# ovs_user_bridge type refers to the OVSUserBridge OVS ifup type, which will
# have the datapath type set as 'netdev' for DPDK processing.
# ovs_dpdk_port type refers to the OVSDPDKPort OVS ifup type, which will
# add the port to the bridge with the interface type as 'dpdk'.
# The 'ovs_internal' parameter defaults to true but if set to false there
# will not be a connection between the bridge and the kernel. Currently this
# is only supported in the ifcfg provider which will set LINKSTATUS=down.

network_config:
  -
    type: ovs_user_bridge
    name: br-link
    ovs_internal: false
    # Do not create a connection between the bridge and the kernel. When using
    # the ifcfg provider setting this to false will add LINKSTATUS=down to the
    # ifcfg file, which will result in the internal interface being down and
    # no traffic will flow between the bridge and the kernel. It is not possible
    # to add an IP address to the internal interface and this will not work with
    # tun interfaces which are routed by the kernel.
    members:
      -
        type: ovs_dpdk_port
        # dpdk0 name is generated by dpdk drivers after dpdk_nic_bind
        name: dpdk0
        # driver is optional argument, default driver is 'vfio-pci'
        driver: igb_uio
        # MTU is optional, used for jumbo frames
        mtu: 8192
        # rx_queue is optional, used for multi-queue option. It configures the
        # maximum number of queues for a physical interface. If not defined,
        # the physical interface will have single queue. The number of queues
        # should be less than the PMD cores as each queue will have one PMD
        # thread (CPU) associated with it.
        rx_queue: 4
        # rx_queue_size and tx_queue_size are optional. It configures the
        # number of rx/tx descriptors that the associated NIC will be
        # initialized with.
        rx_queue_size: 1024
        tx_queue_size: 2048
        members:
            - type: interface
              name: nic2
