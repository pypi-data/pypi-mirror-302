# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class CreateRemoteAuthenticationServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'domain_alias': 'str',
        'base': 'str',
        'type': 'str',
        'port': 'int',
        'dns': 'list[str]'
    }

    attribute_map = {
        'domain': 'domain',
        'domain_alias': 'domain_alias',
        'base': 'base',
        'type': 'type',
        'port': 'port',
        'dns': 'dns'
    }

    def __init__(self, domain=None, domain_alias=None, base=None, type=None, port=None, dns=None, _configuration=None):  # noqa: E501
        """CreateRemoteAuthenticationServer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._domain = None
        self._domain_alias = None
        self._base = None
        self._type = None
        self._port = None
        self._dns = None
        self.discriminator = None

        self.domain = domain
        self.domain_alias = domain_alias
        self.base = base
        self.type = type
        if port is not None:
            self.port = port
        if dns is not None:
            self.dns = dns

    @property
    def domain(self):
        """Gets the domain of this CreateRemoteAuthenticationServer.  # noqa: E501


        :return: The domain of this CreateRemoteAuthenticationServer.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CreateRemoteAuthenticationServer.


        :param domain: The domain of this CreateRemoteAuthenticationServer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def domain_alias(self):
        """Gets the domain_alias of this CreateRemoteAuthenticationServer.  # noqa: E501


        :return: The domain_alias of this CreateRemoteAuthenticationServer.  # noqa: E501
        :rtype: str
        """
        return self._domain_alias

    @domain_alias.setter
    def domain_alias(self, domain_alias):
        """Sets the domain_alias of this CreateRemoteAuthenticationServer.


        :param domain_alias: The domain_alias of this CreateRemoteAuthenticationServer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and domain_alias is None:
            raise ValueError("Invalid value for `domain_alias`, must not be `None`")  # noqa: E501

        self._domain_alias = domain_alias

    @property
    def base(self):
        """Gets the base of this CreateRemoteAuthenticationServer.  # noqa: E501


        :return: The base of this CreateRemoteAuthenticationServer.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this CreateRemoteAuthenticationServer.


        :param base: The base of this CreateRemoteAuthenticationServer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and base is None:
            raise ValueError("Invalid value for `base`, must not be `None`")  # noqa: E501

        self._base = base

    @property
    def type(self):
        """Gets the type of this CreateRemoteAuthenticationServer.  # noqa: E501


        :return: The type of this CreateRemoteAuthenticationServer.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateRemoteAuthenticationServer.


        :param type: The type of this CreateRemoteAuthenticationServer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def port(self):
        """Gets the port of this CreateRemoteAuthenticationServer.  # noqa: E501

        If not specified 389 is the default  # noqa: E501

        :return: The port of this CreateRemoteAuthenticationServer.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreateRemoteAuthenticationServer.

        If not specified 389 is the default  # noqa: E501

        :param port: The port of this CreateRemoteAuthenticationServer.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def dns(self):
        """Gets the dns of this CreateRemoteAuthenticationServer.  # noqa: E501


        :return: The dns of this CreateRemoteAuthenticationServer.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this CreateRemoteAuthenticationServer.


        :param dns: The dns of this CreateRemoteAuthenticationServer.  # noqa: E501
        :type: list[str]
        """

        self._dns = dns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateRemoteAuthenticationServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateRemoteAuthenticationServer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateRemoteAuthenticationServer):
            return True

        return self.to_dict() != other.to_dict()
