{
  "$id": "https://github.com/termux/termux-language-server/blob/main/src/termux_language_server/assets/json/makepkg.conf.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$comment": "Don't edit this file directly! It is generated by `termux-language-server --generate-schema=makepkg.conf`.",
  "type": "object",
  "properties": {
    "DLAGENTS": {
      "description": "```sh\nDLAGENTS=(protocol::/path/to/command [options] ...)\n```\nSets the download agents used to fetch source files specified with a URL in the \nPKGBUILD\n(5) file. Options can be specified for each command as well, and any protocol can have a download agent. Any spaces in option arguments are required to be escaped to avoid being split. Several examples are provided in the default makepkg.conf.\nIf present, %u will be replaced with the download URL. Otherwise, the download URL will be placed on the end of the command. If present, %o will be replaced with the local file name, plus a \u201c.part\u201d extension, which allows makepkg to handle resuming file downloads.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "VCSCLIENTS": {
      "description": "```sh\nVCSCLIENTS=(protocol::package ...)\n```\nSets the packages required to fetch version controlled source files. When required, makepkg will check that these packages are installed or are included in the depends or makedepends arrays in the PKGBUILD.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "CARCH": {
      "description": "```sh\nCARCH=\"carch\"\n```\nSpecifies your computer architecture; possible values include such things as \u201ci686\u201d, \u201cx86_64\u201d, \u201cppc\u201d, etc. This should be automatically set on installation.",
      "type": "string"
    },
    "CHOST": {
      "description": "```sh\nCHOST=\"chost\"\n```\nA string such as \u201ci686-pc-linux-gnu\u201d; do not touch this unless you know what you are doing. This can be commented out by most users if desired.",
      "type": "string"
    },
    "CPPFLAGS": {
      "description": "```sh\nCPPFLAGS=\"cppflags\"\n```\nFlags used for the C preprocessor; see CFLAGS for more information.",
      "type": "string"
    },
    "CFLAGS": {
      "description": "```sh\nCFLAGS=\"cflags\"\n```\nFlags used for the C compiler. This is a key part to the use of makepkg. Usually several options are specified, and the most common string resembles something like this: \u201c-march=i686 -O2 -pipe\u201d. Another useful option may be -mcpu in place of -march. Read gcc(1) for more details on the wide variety of compiler flags available.",
      "type": "string"
    },
    "CXXFLAGS": {
      "description": "```sh\nCXXFLAGS=\"cxxflags\"\n```\nFlags used for the C++ compiler; see CFLAGS for more info.",
      "type": "string"
    },
    "RUSTFLAGS": {
      "description": "```sh\nRUSTFLAGS=\"rustflags\"\n```\nFlags used for the Rust compiler, similar in spirit to CFLAGS. Read \nrustc\n(1) for more details on the available flags.",
      "type": "string"
    },
    "LDFLAGS": {
      "description": "```sh\nLDFLAGS=\"ldflags\"\n```\nFlags used for the linker. Several options may be specified with common usage resembling \u201c-Wl,--hash-style=gnu\u201d. Read ld(1) for more details on available linker flags.",
      "type": "string"
    },
    "LTOFLAGS": {
      "description": "```sh\nLTOFLAGS=\"ltoflags\"\n```\nAdditional compiler and linker flags appended to CFLAGS, CXXFLAGS and LDFLAGS when building with link time optimization. If empty, \u201c-flto\u201d is used.",
      "type": "string"
    },
    "MAKEFLAGS": {
      "description": "```sh\nMAKEFLAGS=\"makeflags\"\n```\nThis is often used to set the number of jobs used; for example, -j2. Other flags that make accepts can also be passed.",
      "type": "string"
    },
    "DEBUG_CFLAGS": {
      "description": "```sh\nDEBUG_CFLAGS=\"debug_cflags\"\n```\nAdditional compiler flags appended to CFLAGS for use in debugging. Usually this would include: \u201c-g\u201d. Read gcc(1) for more details on the wide variety of compiler flags available.",
      "type": "string"
    },
    "DEBUG_CXXFLAGS": {
      "description": "```sh\nDEBUG_CXXFLAGS=\"debug_cxxflags\"\n```\nDebug flags used for the C++ compiler; see DEBUG_CFLAGS for more info.",
      "type": "string"
    },
    "DEBUG_RUSTFLAGS": {
      "description": "```sh\nDEBUG_RUSTFLAGS=\"debug_rustflags\"\n```\nAdditional compiler flags appended to RUSTFLAGS for use in debugging. Usually this would include: \u201c-C debuginfo=2\u201d. Read \nrustc\n(1) for more details on the available flags.",
      "type": "string"
    },
    "BUILDENV": {
      "description": "```sh\nBUILDENV=(!distcc !color !ccache check !sign)\n```\nThis array contains options that affect the build environment; the defaults are shown here. All options should always be left in the array; to enable or disable an option, simply remove or add an \u201c!\u201d at the front of the option. If an option is specified multiple times, the final value takes precedence. Each option works as follows:\ndistcc\nUse the distributed C/C++/ObjC compiler to spread compilation among multiple machines. If this is enabled, DISTCC_HOSTS must be specified as well.\ncolor\nColorize output messages, making output easier to read.\nccache\nUse ccache to cache compilation by default. This allows for faster compiles if you are continuously recompiling the same packages. It can be disabled for individual packages by placing !ccache in the PKGBUILD options array.\ncheck\nRun the check() function if present in the PKGBUILD. This can be enabled or disabled for individual packages through the use of makepkg\u2019s \n--check\n and \n--nocheck\n options, respectively.\nsign\nGenerate a PGP signature file using GnuPG. This will execute \ngpg --detach-sign --use-agent\n on the built package to generate a detached signature file, using the GPG agent, if it is available. The signature file will be the entire file name of the package with a \u201c.sig\u201d extension.",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "distcc",
          "!distcc",
          "color",
          "!color",
          "ccache",
          "!ccache",
          "check",
          "!check",
          "sign",
          "!sign"
        ]
      },
      "uniqueItems": true
    },
    "DISTCC_HOSTS": {
      "description": "```sh\nDISTCC_HOSTS=\"host1 ...\"\n```\nIf using DistCC, this is used to specify a space-delimited list of hosts running in the DistCC cluster. In addition, you will want to modify your MAKEFLAGS.",
      "type": "string"
    },
    "BUILDDIR": {
      "description": "```sh\nBUILDDIR=\"/path/to/directory\"\n```\nIf this value is not set, packages will, by default, be built in subdirectories of the directory that makepkg is called from. This option allows setting the build location to another directory. Incorrect use of $startdir in a PKGBUILD may cause building with this option to fail.",
      "type": "string"
    },
    "GPGKEY": {
      "description": "```sh\nGPGKEY=\"\"\n```\nSpecify a key to use for GPG signing instead of the default key in the keyring. Can be overridden with makepkg\u2019s \n--key\n option.",
      "type": "string"
    },
    "OPTIONS": {
      "description": "```sh\nOPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug)\n```\nThis array contains options that affect default packaging. They are equivalent to options that can be placed in the PKGBUILD; the defaults are shown here. All options should always be left in the array; to enable or disable an option, simply remove or add an \u201c!\u201d at the front of the option. If an option is specified multiple times, the final value takes precedence. Each option works as follows:\nstrip\nStrip symbols from binaries and libraries. If you frequently use a debugger on programs or libraries, it may be helpful to disable this option.\ndocs\nSave doc directories. If you wish to delete doc directories, specify !docs in the array. The directories affected are specified by the DOC_DIRS variable.\nlibtool\nLeave libtool (.la) files in packages. Specify !libtool to remove them.\nstaticlibs\nLeave static library (.a) files in packages. Specify !staticlibs to remove them, if they have a shared counterpart.\nemptydirs\nLeave empty directories in packages.\nzipman\nCompress manual (man and info) pages with gzip. The directories affected are specified by the MAN_DIRS variable.\npurge\nRemove files specified by the PURGE_TARGETS variable from the package.\ndebug\nAdd the user-specified debug flags as specified in DEBUG_CFLAGS and DEBUG_CXXFLAGS to their counterpart buildflags. Creates a separate package containing the debug symbols when used with \u2018strip\u2019.\nlto\nEnable building packages using link time optimization. Adds the flags specified in LTOFLAGS to CFLAGS, CXXFLAGS and LDFLAGS (or \u201c-flto\u201d if LTOFLAGS is empty).",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "strip",
          "!strip",
          "docs",
          "!docs",
          "libtool",
          "!libtool",
          "staticlibs",
          "!staticlibs",
          "emptydirs",
          "!emptydirs",
          "zipman",
          "!zipman",
          "purge",
          "!purge",
          "debug",
          "!debug",
          "lto",
          "!lto"
        ]
      },
      "uniqueItems": true
    },
    "INTEGRITY_CHECK": {
      "description": "```sh\nINTEGRITY_CHECK=(check1 ...)\n```\nFile integrity checks to use. Multiple checks may be specified; this affects both generation and checking. The current valid options are: ck, md5, sha1, sha224, sha256, sha384, sha512, and b2.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "STRIP_BINARIES": {
      "description": "```sh\nSTRIP_BINARIES=\"--strip-all\"\n```\nOptions to be used when stripping binaries. See \nstrip\n(1) for details.",
      "type": "string"
    },
    "STRIP_SHARED": {
      "description": "```sh\nSTRIP_SHARED=\"--strip-unneeded\"\n```\nOptions to be used when stripping shared libraries or PIE executables. See \nstrip\n(1) for details.",
      "type": "string"
    },
    "STRIP_STATIC": {
      "description": "```sh\nSTRIP_STATIC=\"--strip-debug\"\n```\nOptions to be used when stripping static libraries. See \nstrip\n(1) for details.",
      "type": "string"
    },
    "MAN_DIRS": {
      "description": "```sh\nMAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info} ...)\n```\nIf zipman is specified in the OPTIONS array, this variable will instruct makepkg where to look to compress manual (man and info) pages. If you build packages that are located in opt/, you may need to add the directory to this array. \nNOTE:\n Do not add the leading slash to the directory name.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "DOC_DIRS": {
      "description": "```sh\nDOC_DIRS=(usr/{,share/}{doc,gtk-doc} ...)\n```\nIf !docs is specified in the OPTIONS array, this variable will instruct makepkg where to look to remove docs. If you build packages that are located in opt/, you may need to add the directory to this array. \nNOTE:\n Do not add the leading slash to the directory name.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "PURGE_TARGETS": {
      "description": "```sh\nPURGE_TARGETS=(usr/{,share}/info/dir .podlist *.pod...)\n```\nIf purge is specified in the OPTIONS array, this variable will instruct makepkg which files to remove from the package. This is useful for index files that are added by multiple packages.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "DBGSRCDIR": {
      "description": "```sh\nDBGSRCDIR=\"/usr/src/debug\"\n```\nIf strip and debug are specified in the OPTIONS array, this variable will instruct makepkg where to place source files for installed binaries. The binaries will be modified to link this directory for the debugger search path.",
      "type": "string"
    },
    "PKGDEST": {
      "description": "```sh\nPKGDEST=\"/path/to/directory\"\n```\nIf this value is not set, packages will, by default, be placed in the current directory (location of the \nPKGBUILD\n(5)). Many people like to keep all their packages in one place so this option allows for this behavior. A common location is \u201c/home/packages\u201d.",
      "type": "string"
    },
    "SRCDEST": {
      "description": "```sh\nSRCDEST=\"/path/to/directory\"\n```\nIf this value is not set, downloaded source files will only be stored in the current directory. Many people like to keep all source files in a central location for easy cleanup, so this path can be set here.",
      "type": "string"
    },
    "SRCPKGDEST": {
      "description": "```sh\nSRCPKGDEST=\"/path/to/directory\"\n```\nIf this value is not set, source package files will be stored in in the current directory. Many people like to keep all source package files in a central location for easy cleanup, so this path can be set here.",
      "type": "string"
    },
    "LOGDEST": {
      "description": "```sh\nLOGDEST=\"/path/to/directory\"\n```\nIf this value is not set, log files are written to the current directory. This centralizes the log location, facilitating cleanup and compression.",
      "type": "string"
    },
    "PACKAGER": {
      "description": "```sh\nPACKAGER=\"John Doe <john@example.com>\"\n```\nThis value is used when querying a package to see who was the builder. The given format is required for PGP key lookup through WKD. It is recommended to change this to your name and email address.",
      "type": "string"
    },
    "COMPRESSGZ": {
      "description": "```sh\nCOMPRESSGZ=\"(gzip -c -f -n)\", \n```\nSets the command and options used when compressing compiled or source packages in the named format.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "COMPRESSBZ2": {
      "description": "```sh\nCOMPRESSBZ2=\"(bzip2 -c -f)\", \n```\nSets the command and options used when compressing compiled or source packages in the named format.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "COMPRESSXZ": {
      "description": "```sh\nCOMPRESSXZ=\"(xz -c -z -)\", \n```\nSets the command and options used when compressing compiled or source packages in the named format.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "COMPRESSZST": {
      "description": "```sh\nCOMPRESSZST=\"(zstd -c -z -)\", \n```\nSets the command and options used when compressing compiled or source packages in the named format.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "COMPRESSLZO": {
      "description": "```sh\nCOMPRESSLZO=\"(lzop -q)\", \n```\nSets the command and options used when compressing compiled or source packages in the named format.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "COMPRESSLRZ": {
      "description": "```sh\nCOMPRESSLRZ=\"(lrzip -q)\", \n```\nSets the command and options used when compressing compiled or source packages in the named format.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "COMPRESSLZ4": {
      "description": "```sh\nCOMPRESSLZ4=\"(lz4 -q)\", \n```\nSets the command and options used when compressing compiled or source packages in the named format.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "COMPRESSZ": {
      "description": "```sh\nCOMPRESSZ=\"(compress -c -f)\", \n```\nSets the command and options used when compressing compiled or source packages in the named format.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "COMPRESSLZ": {
      "description": "```sh\nCOMPRESSLZ=\"(lzip -c -f)\"\n```\nSets the command and options used when compressing compiled or source packages in the named format.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "PKGEXT": {
      "description": "```sh\nPKGEXT=\".pkg.tar.gz\", \n```\nSets the compression used when making compiled or source packages. Valid suffixes are .tar.gz, .tar.bz2, .tar.xz, .tar.zst, .tar.lzo, .tar.lrz, .tar.lz4, .tar.lz and .tar.Z, or simply .tar to disable compression entirely.",
      "type": "string"
    },
    "SRCEXT": {
      "description": "```sh\nSRCEXT=\".src.tar.gz\"\n```\nSets the compression used when making compiled or source packages. Valid suffixes are .tar.gz, .tar.bz2, .tar.xz, .tar.zst, .tar.lzo, .tar.lrz, .tar.lz4, .tar.lz and .tar.Z, or simply .tar to disable compression entirely.",
      "type": "string"
    },
    "PACMAN_AUTH": {
      "description": "```sh\nPACMAN_AUTH=()\n```\nSpecify a command prefix for running pacman as root. If unset, makepkg will check for the presence of sudo(8) and su(1) in turn, and try the first one it finds.\nIf present, %c will be replaced with the shell-quoted form of the command to run. Otherwise, the command to run is appended to the auth command.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    }
  }
}
