"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import senren.feature_store.v1.service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class FeatureServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetBytes: grpc.UnaryUnaryMultiCallable[
        senren.feature_store.v1.service_pb2.GetBytesRequest,
        senren.feature_store.v1.service_pb2.GetBytesResponse,
    ]

class FeatureServiceAsyncStub:
    GetBytes: grpc.aio.UnaryUnaryMultiCallable[
        senren.feature_store.v1.service_pb2.GetBytesRequest,
        senren.feature_store.v1.service_pb2.GetBytesResponse,
    ]

class FeatureServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetBytes(
        self,
        request: senren.feature_store.v1.service_pb2.GetBytesRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        senren.feature_store.v1.service_pb2.GetBytesResponse,
        collections.abc.Awaitable[senren.feature_store.v1.service_pb2.GetBytesResponse],
    ]: ...

def add_FeatureServiceServicer_to_server(
    servicer: FeatureServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
