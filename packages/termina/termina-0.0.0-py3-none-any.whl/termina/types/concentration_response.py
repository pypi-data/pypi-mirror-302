# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .concentration_endpoint_cdf_detail import ConcentrationEndpointCdfDetail
from .concentration_endpoint_top_users_detail import ConcentrationEndpointTopUsersDetail
from .concentration_timeseries_detail import ConcentrationTimeseriesDetail


class ConcentrationResponse(pydantic_v1.BaseModel):
    """
    A collection of concentration measurements of the amount.

    The "amount" is a generic term for the metric being measured, such as revenue or gtv.
    """

    time_series_metrics: typing.Optional[typing.List[ConcentrationTimeseriesDetail]] = pydantic_v1.Field(default=None)
    """
    The time series metrics for the concentration of the amount. The top 5, 10, and 20 users are shown, as well as the top 10% and 20% of users, and some other supporting aggregate concentration metrics.
    """

    endpoint_top_users: typing.Optional[typing.List[ConcentrationEndpointTopUsersDetail]] = pydantic_v1.Field(
        default=None
    )
    """
    Detail for the top users at the endpoint. Up to the top 100 users are show.
    """

    endpoint_cdf: typing.Optional[typing.List[ConcentrationEndpointCdfDetail]] = pydantic_v1.Field(default=None)
    """
    The detailed cumulative distribution function (CDF). The CDF is presented at the top 100 users, and beyond that it is presented at approximately evenly spaced quantiles. This approach enables robustness to extremely large user bases. The CDF is presented for both users and amount.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
