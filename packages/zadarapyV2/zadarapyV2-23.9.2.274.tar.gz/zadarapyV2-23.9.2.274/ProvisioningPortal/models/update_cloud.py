# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class UpdateCloud(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'enabled': 'bool',
        'ip': 'str',
        'admin_user': 'str',
        'admin_key': 'str'
    }

    attribute_map = {
        'name': 'name',
        'enabled': 'enabled',
        'ip': 'ip',
        'admin_user': 'admin_user',
        'admin_key': 'admin_key'
    }

    def __init__(self, name=None, enabled=None, ip=None, admin_user=None, admin_key=None, _configuration=None):  # noqa: E501
        """UpdateCloud - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._enabled = None
        self._ip = None
        self._admin_user = None
        self._admin_key = None
        self.discriminator = None

        self.name = name
        if enabled is not None:
            self.enabled = enabled
        self.ip = ip
        self.admin_user = admin_user
        self.admin_key = admin_key

    @property
    def name(self):
        """Gets the name of this UpdateCloud.  # noqa: E501

        Cloud name.  # noqa: E501

        :return: The name of this UpdateCloud.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateCloud.

        Cloud name.  # noqa: E501

        :param name: The name of this UpdateCloud.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this UpdateCloud.  # noqa: E501

        cloud will be synced from provided ip  # noqa: E501

        :return: The enabled of this UpdateCloud.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateCloud.

        cloud will be synced from provided ip  # noqa: E501

        :param enabled: The enabled of this UpdateCloud.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def ip(self):
        """Gets the ip of this UpdateCloud.  # noqa: E501

        Cloud's ip address  # noqa: E501

        :return: The ip of this UpdateCloud.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this UpdateCloud.

        Cloud's ip address  # noqa: E501

        :param ip: The ip of this UpdateCloud.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def admin_user(self):
        """Gets the admin_user of this UpdateCloud.  # noqa: E501

        Cloud's admin user  # noqa: E501

        :return: The admin_user of this UpdateCloud.  # noqa: E501
        :rtype: str
        """
        return self._admin_user

    @admin_user.setter
    def admin_user(self, admin_user):
        """Sets the admin_user of this UpdateCloud.

        Cloud's admin user  # noqa: E501

        :param admin_user: The admin_user of this UpdateCloud.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and admin_user is None:
            raise ValueError("Invalid value for `admin_user`, must not be `None`")  # noqa: E501

        self._admin_user = admin_user

    @property
    def admin_key(self):
        """Gets the admin_key of this UpdateCloud.  # noqa: E501

        Cloud's admin key  # noqa: E501

        :return: The admin_key of this UpdateCloud.  # noqa: E501
        :rtype: str
        """
        return self._admin_key

    @admin_key.setter
    def admin_key(self, admin_key):
        """Sets the admin_key of this UpdateCloud.

        Cloud's admin key  # noqa: E501

        :param admin_key: The admin_key of this UpdateCloud.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and admin_key is None:
            raise ValueError("Invalid value for `admin_key`, must not be `None`")  # noqa: E501

        self._admin_key = admin_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCloud, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCloud):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateCloud):
            return True

        return self.to_dict() != other.to_dict()
