# Copyright (c) ONNX Project Contributors
# Copyright (c) Tenzro Contributors
#
# SPDX-License-Identifier: Apache-2.0

from __future__ import annotations

import contextlib
import datetime
import glob
import logging
import multiprocessing
import os
import platform
import shlex
import shutil
import subprocess
import sys
import sysconfig
import textwrap
from typing import ClassVar

import setuptools
import setuptools.command.build_ext
import setuptools.command.build_py
import setuptools.command.develop

TOP_DIR = os.path.realpath(os.path.dirname(__file__))
CMAKE_BUILD_DIR = os.path.join(TOP_DIR, ".setuptools-cmake-build")

WINDOWS = os.name == "nt"

CMAKE = shutil.which("cmake3") or shutil.which("cmake")

################################################################################
# Global variables for controlling the build variant
################################################################################

ONNX_ML = os.getenv("ONNX_ML") != "0"
ONNX_VERIFY_PROTO3 = os.getenv("ONNX_VERIFY_PROTO3") == "1"
ONNX_NAMESPACE = os.getenv("ONNX_NAMESPACE", "onnx")
ONNX_BUILD_TESTS = os.getenv("ONNX_BUILD_TESTS") == "1"
ONNX_DISABLE_EXCEPTIONS = os.getenv("ONNX_DISABLE_EXCEPTIONS") == "1"
ONNX_DISABLE_STATIC_REGISTRATION = os.getenv("ONNX_DISABLE_STATIC_REGISTRATION") == "1"
ONNX_PREVIEW_BUILD = os.getenv("ONNX_PREVIEW_BUILD") == "1"

# Tenzro-specific variables
TENZRO_NAMESPACE = os.getenv("TENZRO_NAMESPACE", "tenzro")
TENZRO_PREVIEW_BUILD = os.getenv("TENZRO_PREVIEW_BUILD") == "1"

USE_MSVC_STATIC_RUNTIME = os.getenv("USE_MSVC_STATIC_RUNTIME", "0") == "1"
DEBUG = os.getenv("DEBUG", "0") == "1"
COVERAGE = os.getenv("COVERAGE", "0") == "1"

ONNX_WHEEL_PLATFORM_NAME = os.getenv("ONNX_WHEEL_PLATFORM_NAME")

################################################################################
# Pre Check
################################################################################

assert CMAKE, "Could not find cmake in PATH"

################################################################################
# Version
################################################################################

try:
    git_version = subprocess.check_output(["git", "rev-parse", "HEAD"], cwd=TOP_DIR).decode("ascii").strip()
except (OSError, subprocess.CalledProcessError):
    git_version = None

with open(os.path.join(TOP_DIR, "VERSION_NUMBER"), encoding="utf-8") as version_file:
    onnx_version = version_file.read().strip()
    if TENZRO_PREVIEW_BUILD:
        onnx_version += ".dev" + datetime.date.today().strftime("%Y%m%d")
    VERSION_INFO = {"version": onnx_version, "git_version": git_version}

################################################################################
# Utilities
################################################################################

@contextlib.contextmanager
def cd(path):
    if not os.path.isabs(path):
        raise RuntimeError(f"Can only cd to absolute path, got: {path}")
    orig_path = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(orig_path)

def get_ext_suffix():
    return sysconfig.get_config_var("EXT_SUFFIX")

def get_python_executable():
    if WINDOWS:
        return sys.executable
    python_dir = os.path.abspath(os.path.join(sysconfig.get_path("include"), "..", ".."))
    if os.path.isdir(python_dir):
        for python_bin in ["python3", "python"]:
            python_path = os.path.join(python_dir, "bin", python_bin)
            if os.path.isfile(python_path):
                return python_path
    return sys.executable

################################################################################
# Customized commands
################################################################################

def create_version_file(directory: str):
    version_file_path = os.path.join(directory, "onnx", "version.py")
    os.makedirs(os.path.dirname(version_file_path), exist_ok=True)

    with open(version_file_path, "w", encoding="utf-8") as f:
        f.write(textwrap.dedent(f"""
            # This file is generated by setup.py. DO NOT EDIT!

            version = "{VERSION_INFO['version']}"
            git_version = "{VERSION_INFO['git_version']}"
        """))

def tenzro_specific_setup():
    # Tenzro-specific setup code here
    pass

class CmakeBuild(setuptools.Command):
    user_options: ClassVar[list] = [
        ("jobs=", "j", "Specifies the number of jobs to use with make")
    ]
    jobs: None | str | int = None

    def initialize_options(self):
        self.jobs = None

    def finalize_options(self):
        self.set_undefined_options("build", ("parallel", "jobs"))
        if self.jobs is None:
            self.jobs = os.getenv("MAX_JOBS") or multiprocessing.cpu_count()

    def run(self):
        os.makedirs(CMAKE_BUILD_DIR, exist_ok=True)

        with cd(CMAKE_BUILD_DIR):
            cmake_args = [
                CMAKE,
                f"-DPYTHON_INCLUDE_DIR={sysconfig.get_path('include')}",
                f"-DPYTHON_EXECUTABLE={get_python_executable()}",
                "-DBUILD_ONNX_PYTHON=ON",
                "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON",
                f"-DONNX_NAMESPACE={ONNX_NAMESPACE}",
                f"-DPY_EXT_SUFFIX={get_ext_suffix() or ''}",
            ]

            if COVERAGE:
                cmake_args.append("-DONNX_COVERAGE=ON")
            
            build_type = "Debug" if COVERAGE or DEBUG else "Release"
            cmake_args.append(f"-DCMAKE_BUILD_TYPE={build_type}")

            if WINDOWS:
                py_version = sys.version_info[:2]
                cmake_args.extend([
                    f"-DPY_VERSION='{py_version[0]}.{py_version[1]}'",
                ])
                if USE_MSVC_STATIC_RUNTIME:
                    cmake_args.append("-DONNX_USE_MSVC_STATIC_RUNTIME=ON")
                if platform.architecture()[0] == "64bit":
                    cmake_args.extend(["-A", "x64" if "arm" not in platform.machine().lower() else "ARM64"])
                else:
                    cmake_args.extend(["-A", "Win32" if "arm" not in platform.machine().lower() else "ARM"])

            for flag, value in [
                (ONNX_ML, "-DONNX_ML=1"),
                (ONNX_VERIFY_PROTO3, "-DONNX_VERIFY_PROTO3=1"),
                (ONNX_BUILD_TESTS, "-DONNX_BUILD_TESTS=ON"),
                (ONNX_DISABLE_EXCEPTIONS, "-DONNX_DISABLE_EXCEPTIONS=ON"),
                (ONNX_DISABLE_STATIC_REGISTRATION, "-DONNX_DISABLE_STATIC_REGISTRATION=ON"),
            ]:
                if flag:
                    cmake_args.append(value)

            if "CMAKE_ARGS" in os.environ:
                extra_cmake_args = shlex.split(os.environ["CMAKE_ARGS"])
                del os.environ["CMAKE_ARGS"]
                logging.info("Extra cmake args: %s", extra_cmake_args)
                cmake_args.extend(extra_cmake_args)

            cmake_args.append(TOP_DIR)
            logging.info("Using cmake args: %s", cmake_args)
            
            if "-DONNX_DISABLE_EXCEPTIONS=ON" in cmake_args:
                raise RuntimeError("ONNX_DISABLE_EXCEPTIONS=ON is not supported for Python builds.")
            
            subprocess.check_call(cmake_args)

            build_args = [CMAKE, "--build", os.curdir]
            if WINDOWS:
                build_args.extend(["--config", build_type, "--", f"/maxcpucount:{self.jobs}"])
            else:
                build_args.extend(["--", "-j", str(self.jobs)])
            subprocess.check_call(build_args)

class TenzroCmakeBuild(CmakeBuild):
    def run(self):
        super().run()
        tenzro_specific_setup()

class BuildPy(setuptools.command.build_py.build_py):
    def run(self):
        create_version_file(self.build_lib if not self.editable_mode else TOP_DIR)
        super().run()

class Develop(setuptools.command.develop.develop):
    def run(self):
        create_version_file(TOP_DIR)
        super().run()

class BuildExt(setuptools.command.build_ext.build_ext):
    def run(self):
        self.run_command("cmake_build")
        super().run()

    def build_extensions(self):
        build_lib = self.build_lib
        extension_dir = os.path.join(build_lib, "onnx")
        os.makedirs(extension_dir, exist_ok=True)

        for ext in self.extensions:
            fullname = self.get_ext_fullname(ext.name)
            filename = os.path.basename(self.get_ext_filename(fullname))

            lib_dir = CMAKE_BUILD_DIR
            if WINDOWS:
                lib_dir = next((d for d in [os.path.join(CMAKE_BUILD_DIR, cfg) for cfg in ["Debug", "Release"]] if os.path.exists(d)), lib_dir)
            
            src = os.path.join(lib_dir, filename)
            dst = os.path.join(extension_dir, filename)
            self.copy_file(src, dst)

        dst_dir = TOP_DIR if self.editable_mode else build_lib
        for pattern in ["onnx/*.py", "onnx/*.pyi"]:
            for src in glob.glob(os.path.join(CMAKE_BUILD_DIR, pattern)):
                dst = os.path.join(dst_dir, os.path.relpath(src, CMAKE_BUILD_DIR))
                os.makedirs(os.path.dirname(dst), exist_ok=True)
                self.copy_file(src, dst)

CMD_CLASS = {
    "cmake_build": TenzroCmakeBuild,
    "build_py": BuildPy,
    "build_ext": BuildExt,
    "develop": Develop,
}

################################################################################
# Extensions
################################################################################

EXT_MODULES = [
    setuptools.Extension(
        name="onnx.onnx_cpp2py_export",
        sources=[],  # sources are set by cmake
    )
]

################################################################################
# Final
################################################################################

setuptools.setup(
    name="tenzro-serve",
    ext_modules=EXT_MODULES,
    cmdclass=CMD_CLASS,
    version=VERSION_INFO["version"],
    author='Hilal Agil',
    author_email='hilaal@gmail.com',
    description='An open-source tool for transporting AI models and serving them locally on devices.',
    long_description=open('README.md').read(),
    long_description_content_type='text/markdown',
    url='https://github.com/tenzro/serve',
    options=(
        {"bdist_wheel": {"plat_name": ONNX_WHEEL_PLATFORM_NAME}}
        if ONNX_WHEEL_PLATFORM_NAME is not None
        else {}
    ),
)