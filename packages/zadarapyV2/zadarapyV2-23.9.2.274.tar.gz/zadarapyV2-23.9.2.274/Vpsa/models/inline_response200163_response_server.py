# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200163ResponseServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'iqn': 'str',
        'iscsi_ip': 'str',
        'ipsec_iscsi': 'str',
        'ipsec_nfs': 'str',
        'status': 'str',
        'os': 'str',
        'registered': 'str',
        'last_check_time': 'str',
        'last_state_change_time': 'str',
        'created_at': 'str',
        'modified_at': 'str'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'iqn': 'iqn',
        'iscsi_ip': 'iscsi_ip',
        'ipsec_iscsi': 'ipsec_iscsi',
        'ipsec_nfs': 'ipsec_nfs',
        'status': 'status',
        'os': 'os',
        'registered': 'registered',
        'last_check_time': 'last_check_time',
        'last_state_change_time': 'last_state_change_time',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, name=None, display_name=None, iqn=None, iscsi_ip=None, ipsec_iscsi=None, ipsec_nfs=None, status=None, os=None, registered=None, last_check_time=None, last_state_change_time=None, created_at=None, modified_at=None, _configuration=None):  # noqa: E501
        """InlineResponse200163ResponseServer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._iqn = None
        self._iscsi_ip = None
        self._ipsec_iscsi = None
        self._ipsec_nfs = None
        self._status = None
        self._os = None
        self._registered = None
        self._last_check_time = None
        self._last_state_change_time = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if iqn is not None:
            self.iqn = iqn
        if iscsi_ip is not None:
            self.iscsi_ip = iscsi_ip
        if ipsec_iscsi is not None:
            self.ipsec_iscsi = ipsec_iscsi
        if ipsec_nfs is not None:
            self.ipsec_nfs = ipsec_nfs
        if status is not None:
            self.status = status
        if os is not None:
            self.os = os
        if registered is not None:
            self.registered = registered
        if last_check_time is not None:
            self.last_check_time = last_check_time
        if last_state_change_time is not None:
            self.last_state_change_time = last_state_change_time
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The name of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200163ResponseServer.


        :param name: The name of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The display_name of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse200163ResponseServer.


        :param display_name: The display_name of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def iqn(self):
        """Gets the iqn of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The iqn of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._iqn

    @iqn.setter
    def iqn(self, iqn):
        """Sets the iqn of this InlineResponse200163ResponseServer.


        :param iqn: The iqn of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._iqn = iqn

    @property
    def iscsi_ip(self):
        """Gets the iscsi_ip of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The iscsi_ip of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._iscsi_ip

    @iscsi_ip.setter
    def iscsi_ip(self, iscsi_ip):
        """Sets the iscsi_ip of this InlineResponse200163ResponseServer.


        :param iscsi_ip: The iscsi_ip of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._iscsi_ip = iscsi_ip

    @property
    def ipsec_iscsi(self):
        """Gets the ipsec_iscsi of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The ipsec_iscsi of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_iscsi

    @ipsec_iscsi.setter
    def ipsec_iscsi(self, ipsec_iscsi):
        """Sets the ipsec_iscsi of this InlineResponse200163ResponseServer.


        :param ipsec_iscsi: The ipsec_iscsi of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._ipsec_iscsi = ipsec_iscsi

    @property
    def ipsec_nfs(self):
        """Gets the ipsec_nfs of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The ipsec_nfs of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_nfs

    @ipsec_nfs.setter
    def ipsec_nfs(self, ipsec_nfs):
        """Sets the ipsec_nfs of this InlineResponse200163ResponseServer.


        :param ipsec_nfs: The ipsec_nfs of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._ipsec_nfs = ipsec_nfs

    @property
    def status(self):
        """Gets the status of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The status of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200163ResponseServer.


        :param status: The status of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def os(self):
        """Gets the os of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The os of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this InlineResponse200163ResponseServer.


        :param os: The os of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._os = os

    @property
    def registered(self):
        """Gets the registered of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The registered of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this InlineResponse200163ResponseServer.


        :param registered: The registered of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._registered = registered

    @property
    def last_check_time(self):
        """Gets the last_check_time of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The last_check_time of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._last_check_time

    @last_check_time.setter
    def last_check_time(self, last_check_time):
        """Sets the last_check_time of this InlineResponse200163ResponseServer.


        :param last_check_time: The last_check_time of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._last_check_time = last_check_time

    @property
    def last_state_change_time(self):
        """Gets the last_state_change_time of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The last_state_change_time of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._last_state_change_time

    @last_state_change_time.setter
    def last_state_change_time(self, last_state_change_time):
        """Sets the last_state_change_time of this InlineResponse200163ResponseServer.


        :param last_state_change_time: The last_state_change_time of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._last_state_change_time = last_state_change_time

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The created_at of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200163ResponseServer.


        :param created_at: The created_at of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InlineResponse200163ResponseServer.  # noqa: E501


        :return: The modified_at of this InlineResponse200163ResponseServer.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InlineResponse200163ResponseServer.


        :param modified_at: The modified_at of this InlineResponse200163ResponseServer.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200163ResponseServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200163ResponseServer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200163ResponseServer):
            return True

        return self.to_dict() != other.to_dict()
