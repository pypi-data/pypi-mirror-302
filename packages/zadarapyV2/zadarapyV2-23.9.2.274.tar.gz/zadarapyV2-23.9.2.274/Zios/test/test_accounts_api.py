# coding: utf-8

"""
    Zadara VPSA Object Storage REST API

    # Overview  This document outlines the methods available for administrating your VPSA&#174; Object Storage. The API supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or through the X-Access-Key header. Alternately, you can use the username and password parameters for authentication, but we do not recommend this method for anything other than possibly retrieving an API key.  By default , all operations are allowed only to VPSA Object Storage admin. Some actions are allowed by an account admin and they will be marked on the action's header  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some time to complete. When using the API, this can cause some actions, such as adding drives to storage policy, to be undesirably asynchronous. You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Metering API  Metering information can be retrieved using the VPSA Object Storage API for the following components:  - Accounts - Users - Drives - Virtual Controllers - Load Balancer Groups - Storage Policies  Metering information returned by the API is subject to the following constraints:  - 10 seconds interval - 1 hour range - 1 minute interval - 1 day range - 1 hour interval - 30 days range  Values outside the accepted range will be returned as 0.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import Zios
from Zios.api.accounts_api import AccountsApi  # noqa: E501
from Zios.rest import ApiException


class TestAccountsApi(unittest.TestCase):
    """AccountsApi unit test stubs"""

    def setUp(self):
        self.api = Zios.api.accounts_api.AccountsApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_approve_request(self):
        """Test case for approve_request

        """
        pass

    def test_cleanup_account(self):
        """Test case for cleanup_account

        """
        pass

    def test_create_account(self):
        """Test case for create_account

        """
        pass

    def test_create_account_requests(self):
        """Test case for create_account_requests

        """
        pass

    def test_delete_account(self):
        """Test case for delete_account

        """
        pass

    def test_deny_request(self):
        """Test case for deny_request

        """
        pass

    def test_disable_account(self):
        """Test case for disable_account

        """
        pass

    def test_enable_account(self):
        """Test case for enable_account

        """
        pass

    def test_export_accounts_in_csv_format(self):
        """Test case for export_accounts_in_csv_format

        """
        pass

    def test_get_account(self):
        """Test case for get_account

        """
        pass

    def test_get_account_quota_details(self):
        """Test case for get_account_quota_details

        """
        pass

    def test_get_account_requests(self):
        """Test case for get_account_requests

        """
        pass

    def test_get_all_accounts(self):
        """Test case for get_all_accounts

        """
        pass

    def test_list_account_users(self):
        """Test case for list_account_users

        """
        pass

    def test_set_account_quota_by_capacity(self):
        """Test case for set_account_quota_by_capacity

        """
        pass

    def test_set_account_quota_notification(self):
        """Test case for set_account_quota_notification

        """
        pass

    def test_show_bandwidth_throughput_metering_of_account(self):
        """Test case for show_bandwidth_throughput_metering_of_account

        """
        pass

    def test_show_iops_metering_of_account(self):
        """Test case for show_iops_metering_of_account

        """
        pass

    def test_show_latency_metering_of_account(self):
        """Test case for show_latency_metering_of_account

        """
        pass


if __name__ == '__main__':
    unittest.main()
