# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class ConcentrationTimeseriesDetail(pydantic_v1.BaseModel):
    date: str = pydantic_v1.Field()
    """
    The date of the entry.
    """

    top_5_count: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The share of amount in the top 5 users.
    """

    top_10_count: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The share of amount in the top 10 users.
    """

    top_20_count: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The share of amount in the top 20 users.
    """

    top_10_percent: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The share of amount in the top 10% of users.
    """

    top_20_percent: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The share of amount in the top 20% of users.
    """

    mean: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The mean amount in the period.
    """

    p_25: typing.Optional[float] = pydantic_v1.Field(alias="p25", default=None)
    """
    The 25th percentile of the amount in the period.
    """

    median: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The 50th percentile of the amount in the period.
    """

    p_75: typing.Optional[float] = pydantic_v1.Field(alias="p75", default=None)
    """
    The 75th percentile of the amount in the period.
    """

    p_90: typing.Optional[float] = pydantic_v1.Field(alias="p90", default=None)
    """
    The 90th percentile of the amount in the period.
    """

    average_to_median: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The ratio of the mean to the median amount in the period.
    """

    gini_coefficient: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The Gini coefficient of the amount in the period, ranging from 0 to 1.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
