
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/plot_structured_mesh_coloring.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_plot_structured_mesh_coloring.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_plot_structured_mesh_coloring.py:


3D Unstructured mesh & coloring
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 7-8

Importing the script dependencies

.. GENERATED FROM PYTHON SOURCE LINES 8-12

.. code-block:: python3

    import numpy
    from MPSPlots.render3D import SceneList









.. GENERATED FROM PYTHON SOURCE LINES 13-14

Transform spherical to cartesian

.. GENERATED FROM PYTHON SOURCE LINES 14-25

.. code-block:: python3

    def spherical_to_cartesian(phi: numpy.ndarray, theta: numpy.ndarray, r: numpy.ndarray = None) -> tuple:
        phi = numpy.asarray(phi)
        theta = numpy.asarray(theta)
        r = r if r is not None else numpy.ones(phi.shape)

        x = r * numpy.cos(phi) * numpy.cos(theta)
        y = r * numpy.cos(phi) * numpy.sin(theta)
        z = r * numpy.sin(phi)
        return x, y, z









.. GENERATED FROM PYTHON SOURCE LINES 26-27

Define data

.. GENERATED FROM PYTHON SOURCE LINES 27-37

.. code-block:: python3

    x = y = z = numpy.linspace(-100, 100, 100)

    theta = numpy.linspace(0, 360, 100)
    phi = numpy.linspace(-90, 90, 100)

    theta = numpy.deg2rad(theta)
    phi = numpy.deg2rad(phi)

    phi, theta = numpy.meshgrid(phi, theta)








.. GENERATED FROM PYTHON SOURCE LINES 38-39

Creating the Scene

.. GENERATED FROM PYTHON SOURCE LINES 39-51

.. code-block:: python3

    scene = SceneList(unit_size=(800, 800))
    ax = scene.append_ax()
    ax.add_unit_sphere(opacity=0.1)
    ax.add_unit_axis()

    scalar = (numpy.cos(phi))**2

    x, y, z = spherical_to_cartesian(phi=phi, theta=theta, r=scalar)

    ax.add_mesh(x=x, y=y, z=z, scalar_coloring=scalar, colormap='viridis')

    _ = scene.show()



.. image-sg:: /gallery/images/sphx_glr_plot_structured_mesh_coloring_001.png
   :alt: plot structured mesh coloring
   :srcset: /gallery/images/sphx_glr_plot_structured_mesh_coloring_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.179 seconds)


.. _sphx_glr_download_gallery_plot_structured_mesh_coloring.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_structured_mesh_coloring.py <plot_structured_mesh_coloring.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_structured_mesh_coloring.ipynb <plot_structured_mesh_coloring.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
