# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20078MessageSns(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'installer_version': 'str',
        'sn_uname': 'str',
        'nova_version': 'str',
        'extmgmt_ip': 'str',
        'sn_version': 'str'
    }

    attribute_map = {
        'status': 'status',
        'installer_version': 'installer-version',
        'sn_uname': 'sn-uname',
        'nova_version': 'nova-version',
        'extmgmt_ip': 'extmgmt-ip',
        'sn_version': 'sn-version'
    }

    def __init__(self, status=None, installer_version=None, sn_uname=None, nova_version=None, extmgmt_ip=None, sn_version=None, _configuration=None):  # noqa: E501
        """InlineResponse20078MessageSns - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._installer_version = None
        self._sn_uname = None
        self._nova_version = None
        self._extmgmt_ip = None
        self._sn_version = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if installer_version is not None:
            self.installer_version = installer_version
        if sn_uname is not None:
            self.sn_uname = sn_uname
        if nova_version is not None:
            self.nova_version = nova_version
        if extmgmt_ip is not None:
            self.extmgmt_ip = extmgmt_ip
        if sn_version is not None:
            self.sn_version = sn_version

    @property
    def status(self):
        """Gets the status of this InlineResponse20078MessageSns.  # noqa: E501


        :return: The status of this InlineResponse20078MessageSns.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20078MessageSns.


        :param status: The status of this InlineResponse20078MessageSns.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def installer_version(self):
        """Gets the installer_version of this InlineResponse20078MessageSns.  # noqa: E501


        :return: The installer_version of this InlineResponse20078MessageSns.  # noqa: E501
        :rtype: str
        """
        return self._installer_version

    @installer_version.setter
    def installer_version(self, installer_version):
        """Sets the installer_version of this InlineResponse20078MessageSns.


        :param installer_version: The installer_version of this InlineResponse20078MessageSns.  # noqa: E501
        :type: str
        """

        self._installer_version = installer_version

    @property
    def sn_uname(self):
        """Gets the sn_uname of this InlineResponse20078MessageSns.  # noqa: E501


        :return: The sn_uname of this InlineResponse20078MessageSns.  # noqa: E501
        :rtype: str
        """
        return self._sn_uname

    @sn_uname.setter
    def sn_uname(self, sn_uname):
        """Sets the sn_uname of this InlineResponse20078MessageSns.


        :param sn_uname: The sn_uname of this InlineResponse20078MessageSns.  # noqa: E501
        :type: str
        """

        self._sn_uname = sn_uname

    @property
    def nova_version(self):
        """Gets the nova_version of this InlineResponse20078MessageSns.  # noqa: E501


        :return: The nova_version of this InlineResponse20078MessageSns.  # noqa: E501
        :rtype: str
        """
        return self._nova_version

    @nova_version.setter
    def nova_version(self, nova_version):
        """Sets the nova_version of this InlineResponse20078MessageSns.


        :param nova_version: The nova_version of this InlineResponse20078MessageSns.  # noqa: E501
        :type: str
        """

        self._nova_version = nova_version

    @property
    def extmgmt_ip(self):
        """Gets the extmgmt_ip of this InlineResponse20078MessageSns.  # noqa: E501


        :return: The extmgmt_ip of this InlineResponse20078MessageSns.  # noqa: E501
        :rtype: str
        """
        return self._extmgmt_ip

    @extmgmt_ip.setter
    def extmgmt_ip(self, extmgmt_ip):
        """Sets the extmgmt_ip of this InlineResponse20078MessageSns.


        :param extmgmt_ip: The extmgmt_ip of this InlineResponse20078MessageSns.  # noqa: E501
        :type: str
        """

        self._extmgmt_ip = extmgmt_ip

    @property
    def sn_version(self):
        """Gets the sn_version of this InlineResponse20078MessageSns.  # noqa: E501


        :return: The sn_version of this InlineResponse20078MessageSns.  # noqa: E501
        :rtype: str
        """
        return self._sn_version

    @sn_version.setter
    def sn_version(self, sn_version):
        """Sets the sn_version of this InlineResponse20078MessageSns.


        :param sn_version: The sn_version of this InlineResponse20078MessageSns.  # noqa: E501
        :type: str
        """

        self._sn_version = sn_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20078MessageSns, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20078MessageSns):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20078MessageSns):
            return True

        return self.to_dict() != other.to_dict()
