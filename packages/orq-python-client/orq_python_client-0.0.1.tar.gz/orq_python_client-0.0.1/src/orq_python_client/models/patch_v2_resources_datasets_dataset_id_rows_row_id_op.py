"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from orq_python_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_python_client.utils import FieldMetadata, PathParamMetadata, RequestMetadata
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDRole(str, Enum):
    r"""The role of the prompt message"""

    SYSTEM = "system"
    ASSISTANT = "assistant"
    USER = "user"
    EXCEPTION = "exception"
    TOOL = "tool"
    PROMPT = "prompt"
    CORRECTION = "correction"
    EXPECTED_OUTPUT = "expected_output"


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesType(str, Enum):
    IMAGE_URL = "image_url"


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2ImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2ImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PatchV2ResourcesDatasetsDatasetIDRowsRowID22TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesType
    image_url: PatchV2ResourcesDatasetsDatasetIDRowsRowID2ImageURLTypedDict


class PatchV2ResourcesDatasetsDatasetIDRowsRowID22(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesType

    image_url: PatchV2ResourcesDatasetsDatasetIDRowsRowID2ImageURL


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2Type(str, Enum):
    TEXT = "text"


class PatchV2ResourcesDatasetsDatasetIDRowsRowID21TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: PatchV2ResourcesDatasetsDatasetIDRowsRowID2Type
    text: str


class PatchV2ResourcesDatasetsDatasetIDRowsRowID21(BaseModel):
    r"""Text content part of a prompt message"""

    type: PatchV2ResourcesDatasetsDatasetIDRowsRowID2Type

    text: str


PatchV2ResourcesDatasetsDatasetIDRowsRowIDContent2TypedDict = Union[
    PatchV2ResourcesDatasetsDatasetIDRowsRowID21TypedDict,
    PatchV2ResourcesDatasetsDatasetIDRowsRowID22TypedDict,
]


PatchV2ResourcesDatasetsDatasetIDRowsRowIDContent2 = Union[
    PatchV2ResourcesDatasetsDatasetIDRowsRowID21,
    PatchV2ResourcesDatasetsDatasetIDRowsRowID22,
]


PatchV2ResourcesDatasetsDatasetIDRowsRowIDContentTypedDict = Union[
    str, List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDContent2TypedDict]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


PatchV2ResourcesDatasetsDatasetIDRowsRowIDContent = Union[
    str, List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDContent2]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDType(str, Enum):
    FUNCTION = "function"


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDToolCallsTypedDict(TypedDict):
    type: PatchV2ResourcesDatasetsDatasetIDRowsRowIDType
    function: PatchV2ResourcesDatasetsDatasetIDRowsRowIDFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDToolCalls(BaseModel):
    type: PatchV2ResourcesDatasetsDatasetIDRowsRowIDType

    function: PatchV2ResourcesDatasetsDatasetIDRowsRowIDFunction

    id: Optional[str] = None

    index: Optional[float] = None


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDMessagesTypedDict(TypedDict):
    role: PatchV2ResourcesDatasetsDatasetIDRowsRowIDRole
    r"""The role of the prompt message"""
    content: PatchV2ResourcesDatasetsDatasetIDRowsRowIDContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[
        List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDToolCallsTypedDict]
    ]


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDMessages(BaseModel):
    role: PatchV2ResourcesDatasetsDatasetIDRowsRowIDRole
    r"""The role of the prompt message"""

    content: PatchV2ResourcesDatasetsDatasetIDRowsRowIDContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDToolCalls]] = (
        None
    )


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDRequestBodyTypedDict(TypedDict):
    messages: List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDMessagesTypedDict]
    r"""Input message(s) of the dataset row"""
    expected_output: NotRequired[Nullable[str]]
    r"""Reference of the dataset row"""


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDRequestBody(BaseModel):
    messages: List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDMessages]
    r"""Input message(s) of the dataset row"""

    expected_output: OptionalNullable[str] = UNSET
    r"""Reference of the dataset row"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["expected_output"]
        nullable_fields = ["expected_output"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDRequestTypedDict(TypedDict):
    dataset_id: str
    r"""Dataset ID"""
    row_id: str
    r"""Dataset row ID"""
    request_body: NotRequired[
        PatchV2ResourcesDatasetsDatasetIDRowsRowIDRequestBodyTypedDict
    ]


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDRequest(BaseModel):
    dataset_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Dataset ID"""

    row_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Dataset row ID"""

    request_body: Annotated[
        Optional[PatchV2ResourcesDatasetsDatasetIDRowsRowIDRequestBody],
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ] = None


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesRole(str, Enum):
    r"""The role of the prompt message"""

    SYSTEM = "system"
    ASSISTANT = "assistant"
    USER = "user"
    EXCEPTION = "exception"
    TOOL = "tool"
    PROMPT = "prompt"
    CORRECTION = "correction"
    EXPECTED_OUTPUT = "expected_output"


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesPublicResponseType(str, Enum):
    IMAGE_URL = "image_url"


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    id: NotRequired[str]
    r"""The orq.ai id of the image"""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    id: Optional[str] = None
    r"""The orq.ai id of the image"""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2Resources2TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesPublicResponseType
    image_url: PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesImageURLTypedDict


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2Resources2(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesPublicResponseType

    image_url: PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesImageURL


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesPublicType(str, Enum):
    TEXT = "text"


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2Resources1TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesPublicType
    text: str


class PatchV2ResourcesDatasetsDatasetIDRowsRowID2Resources1(BaseModel):
    r"""Text content part of a prompt message"""

    type: PatchV2ResourcesDatasetsDatasetIDRowsRowID2ResourcesPublicType

    text: str


PatchV2ResourcesDatasetsDatasetIDRowsRowIDContentResources2TypedDict = Union[
    PatchV2ResourcesDatasetsDatasetIDRowsRowID2Resources1TypedDict,
    PatchV2ResourcesDatasetsDatasetIDRowsRowID2Resources2TypedDict,
]


PatchV2ResourcesDatasetsDatasetIDRowsRowIDContentResources2 = Union[
    PatchV2ResourcesDatasetsDatasetIDRowsRowID2Resources1,
    PatchV2ResourcesDatasetsDatasetIDRowsRowID2Resources2,
]


PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesContentTypedDict = Union[
    str, List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDContentResources2TypedDict]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesContent = Union[
    str, List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDContentResources2]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesType(str, Enum):
    FUNCTION = "function"


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesToolCallsTypedDict(TypedDict):
    type: PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesType
    function: PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesToolCalls(BaseModel):
    type: PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesType

    function: PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesFunction

    id: Optional[str] = None

    index: Optional[float] = None


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesMessagesTypedDict(TypedDict):
    role: PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesRole
    r"""The role of the prompt message"""
    content: PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[
        List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesToolCallsTypedDict]
    ]


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesMessages(BaseModel):
    role: PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesRole
    r"""The role of the prompt message"""

    content: PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[
        List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesToolCalls]
    ] = None


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDResponseBodyTypedDict(TypedDict):
    r"""Dataset updated."""

    messages: List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesMessagesTypedDict]
    r"""Input message(s) of the dataset row"""
    expected_output: NotRequired[Nullable[str]]
    r"""Reference of the dataset row"""


class PatchV2ResourcesDatasetsDatasetIDRowsRowIDResponseBody(BaseModel):
    r"""Dataset updated."""

    messages: List[PatchV2ResourcesDatasetsDatasetIDRowsRowIDResourcesMessages]
    r"""Input message(s) of the dataset row"""

    expected_output: OptionalNullable[str] = UNSET
    r"""Reference of the dataset row"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["expected_output"]
        nullable_fields = ["expected_output"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
