# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2024-09-17T08:24:03+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, Field, conint
from typing_extensions import Literal


class ActivityLap(BaseModel):
    start: AwareDatetime = Field(..., title='Start')
    end: AwareDatetime = Field(..., title='End')
    power: Optional[float] = Field(None, title='Power')
    speed: Optional[float] = Field(None, title='Speed')
    distance: Optional[float] = Field(None, title='Distance')
    altitude: Optional[float] = Field(None, title='Altitude')
    heart_rate: Optional[float] = Field(None, title='Heart Rate')
    heart_rate_start: Optional[float] = Field(None, title='Heart Rate Start')
    heart_rate_end: Optional[float] = Field(None, title='Heart Rate End')
    cadence: Optional[float] = Field(None, title='Cadence')
    temperature: Optional[float] = Field(None, title='Temperature')
    core_temperature: Optional[float] = Field(None, title='Core Temperature')
    smo2: Optional[float] = Field(None, title='Smo2')
    duration: str = Field(..., title='Duration')


class BodyAuthorizeOauthAuthorizePost(BaseModel):
    client_id: str = Field(..., title='Client Id')
    redirect_uri: str = Field(..., title='Redirect Uri')
    scope: Optional[str] = Field(None, title='Scope')
    state: Optional[str] = Field(None, title='State')
    code_challenge: Optional[str] = Field(None, title='Code Challenge')
    code_challenge_method: Optional[str] = Field(None, title='Code Challenge Method')


class GrantType(Enum):
    authorization_code = 'authorization_code'


class BodyTokenOauthTokenPost(BaseModel):
    grant_type: Literal['authorization_code'] = Field(..., title='Grant Type')
    code: str = Field(..., title='Code')
    client_id: str = Field(..., title='Client Id')
    client_secret: Optional[str] = Field(None, title='Client Secret')
    code_verifier: Optional[str] = Field(None, title='Code Verifier')
    refresh_token: Optional[str] = Field(None, title='Refresh Token')


class BodyUploadActivityFileApiActivitiesUploadPost(BaseModel):
    files: List[bytes] = Field(..., title='Files')


class IntegrationNames(Enum):
    garmin_connect = 'garmin_connect'
    manual_upload = 'manual_upload'


class JWTResponse(BaseModel):
    jwt: str = Field(..., title='Jwt')
    refresh_token: str = Field(..., title='Refresh Token')


class LapSyncData(BaseModel):
    power: Optional[float] = Field(None, title='Power')
    speed: Optional[float] = Field(None, title='Speed')
    sport: str = Field(..., title='Sport')
    activity: str = Field(..., title='Activity')


class LapSyncedTrace(BaseModel):
    timestamp: AwareDatetime = Field(..., title='Timestamp')
    lactate: Optional[float] = Field(None, title='Lactate')
    rpe: Optional[conint(ge=0, le=10)] = Field(
        None,
        description='Rating of Perceived Exertion (RPE) on the CR10 scale, ranging from 0 to 10:\n0 - No exertion at all\n1 - Very light\n2 - Light\n3 - Moderate\n4 - Somewhat hard\n5 - Hard\n6 - \n7 - Very hard\n8 - \n9 - Very, very hard\n10 - Maximum effort',
        title='Rpe',
    )
    notes: Optional[str] = Field(None, title='Notes')
    lap_sync: Optional[LapSyncData] = None


class Metric(Enum):
    power = 'power'
    speed = 'speed'
    heart_rate = 'heart_rate'
    smo2 = 'smo2'
    core_temperature = 'core_temperature'
    altitude = 'altitude'
    cadence = 'cadence'
    temperature = 'temperature'
    distance = 'distance'
    longitude = 'longitude'
    latitude = 'latitude'
    lactate = 'lactate'
    rpe = 'rpe'
    notes = 'notes'


class PermissionType(Enum):
    granted = 'granted'
    received = 'received'


class Sport(Enum):
    cycling = 'cycling'
    cycling_road = 'cycling.road'
    cycling_tt = 'cycling.tt'
    cycling_cyclocross = 'cycling.cyclocross'
    cycling_gravel = 'cycling.gravel'
    cycling_mountainbike = 'cycling.mountainbike'
    cycling_track = 'cycling.track'
    cycling_track_250m = 'cycling.track.250m'
    cycling_track_333m = 'cycling.track.333m'
    running = 'running'
    running_road = 'running.road'
    running_track = 'running.track'
    running_track_200m = 'running.track.200m'
    running_track_400m = 'running.track.400m'
    running_trail = 'running.trail'
    walking = 'walking'
    hiking = 'hiking'
    cross_country_skiing = 'cross_country_skiing'
    cross_country_skiing_classic = 'cross_country_skiing.classic'
    cross_country_skiing_skate = 'cross_country_skiing.skate'
    cross_country_skiing_backcountry = 'cross_country_skiing.backcountry'
    rowing = 'rowing'
    swimming = 'swimming'
    swimming_pool = 'swimming.pool'
    swimming_pool_50m = 'swimming.pool.50m'
    swimming_pool_25m = 'swimming.pool.25m'
    swimming_pool_25y = 'swimming.pool.25y'
    swimming_pool_33m = 'swimming.pool.33m'
    swimming_open_water = 'swimming.open_water'
    swimming_flume = 'swimming.flume'
    generic = 'generic'


class Trace(BaseModel):
    timestamp: AwareDatetime = Field(..., title='Timestamp')
    lactate: Optional[float] = Field(None, title='Lactate')
    rpe: Optional[conint(ge=0, le=10)] = Field(
        None,
        description='Rating of Perceived Exertion (RPE) on the CR10 scale, ranging from 0 to 10:\n0 - No exertion at all\n1 - Very light\n2 - Light\n3 - Moderate\n4 - Somewhat hard\n5 - Hard\n6 - \n7 - Very hard\n8 - \n9 - Very, very hard\n10 - Maximum effort',
        title='Rpe',
    )
    notes: Optional[str] = Field(None, title='Notes')


class User(BaseModel):
    id: str = Field(..., title='Id')
    first_name: Optional[str] = Field(None, title='First Name')
    last_name: Optional[str] = Field(None, title='Last Name')
    display_name: Optional[str] = Field(None, title='Display Name')
    permission_types: Optional[List[PermissionType]] = Field(
        None, title='Permission Types'
    )


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class BaseActivitySummary(BaseModel):
    id: str = Field(..., title='Id')
    title: Optional[str] = Field(None, title='Title')
    start: AwareDatetime = Field(..., title='Start')
    end: Optional[AwareDatetime] = Field(..., title='End')
    sport: Sport
    stationary: Optional[bool] = Field(None, title='Stationary')
    metrics: Optional[List[Metric]] = Field([], title='Metrics')
    integration: Optional[IntegrationNames] = None
    device: Optional[str] = Field(None, title='Device')
    duration: Optional[str] = Field(..., title='Duration')
    display_sport: Optional[str] = Field(..., title='Display Sport')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class ActivityDetail(BaseModel):
    id: str = Field(..., title='Id')
    title: Optional[str] = Field(None, title='Title')
    start: AwareDatetime = Field(..., title='Start')
    end: Optional[AwareDatetime] = Field(..., title='End')
    sport: Sport
    stationary: Optional[bool] = Field(None, title='Stationary')
    metrics: Optional[List[Metric]] = Field([], title='Metrics')
    integration: Optional[IntegrationNames] = None
    device: Optional[str] = Field(None, title='Device')
    fusion_activities: Optional[List[BaseActivitySummary]] = Field(
        [], title='Fusion Activities'
    )
    laps: Optional[List[ActivityLap]] = Field([], title='Laps')
    duration: Optional[str] = Field(..., title='Duration')
    display_sport: Optional[str] = Field(..., title='Display Sport')


class ActivitySummary(BaseModel):
    id: str = Field(..., title='Id')
    title: Optional[str] = Field(None, title='Title')
    start: AwareDatetime = Field(..., title='Start')
    end: Optional[AwareDatetime] = Field(..., title='End')
    sport: Sport
    stationary: Optional[bool] = Field(None, title='Stationary')
    metrics: Optional[List[Metric]] = Field([], title='Metrics')
    integration: Optional[IntegrationNames] = None
    device: Optional[str] = Field(None, title='Device')
    fusion_activities: Optional[List[BaseActivitySummary]] = Field(
        [], title='Fusion Activities'
    )
    duration: Optional[str] = Field(..., title='Duration')
    display_sport: Optional[str] = Field(..., title='Display Sport')


class ActivityData(BaseModel):
    data: Optional[str] = Field(
        None,
        description="A JSON encoded pandas DataFrame, generated with read_json(orient='split'). See pandas documentation for more information on the schema.",
        title='DataFrame (optional)',
    )
    activity: ActivityDetail
    column_mapping: Dict[str, Dict[str, str]] = Field(..., title='Column Mapping')
