# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class WeatherComponents(pydantic_v1.BaseModel):
    stage: str = pydantic_v1.Field()
    """
    The stage of the weather gauge
    """

    date: str = pydantic_v1.Field()
    """
    The date of the data point
    """

    weather_gauge: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The values of the individual components of the weather gauge
    """

    actual_annualized: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The measured actual annualized fundraising amount for the stage in a rolling window, subset only to companies that have known amounts raised in the prior stage. The value is null for future dates beyond the last valid date of the indicator
    """

    potential_annualized: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The estimated present and past potential annualized fundraising amount for the stage in a rolling window, which measures the amount of fundraising one would expect under normal conditions, based on investment in the prior stage and accounting for exits. The value is null for future dates beyond the last valid date of the indicator
    """

    potential_annualized_forecast: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The estimated future potential annualized fundraising amount for the stage in a rolling window, which measures the amount of fundraising one would expect under normal conditions, based on investment in the prior stage and accounting for exits. The value is null for past dates and forecasted for future dates
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
