# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse200134Drives(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'internal_name': 'str',
        'node': 'str',
        'size': 'int',
        'type': 'str',
        'uuid': 'str',
        'address': 'str',
        'location': 'str',
        'product_id': 'str',
        'drive_id': 'str',
        'partition_count_degraded': 'str',
        'partition_count_critical': 'str'
    }

    attribute_map = {
        'internal_name': 'internal_name',
        'node': 'node',
        'size': 'size',
        'type': 'type',
        'uuid': 'uuid',
        'address': 'address',
        'location': 'location',
        'product_id': 'product_id',
        'drive_id': 'drive_id',
        'partition_count_degraded': 'partition_count_degraded',
        'partition_count_critical': 'partition_count_critical'
    }

    def __init__(self, internal_name=None, node=None, size=None, type=None, uuid=None, address=None, location=None, product_id=None, drive_id=None, partition_count_degraded=None, partition_count_critical=None, _configuration=None):  # noqa: E501
        """InlineResponse200134Drives - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._internal_name = None
        self._node = None
        self._size = None
        self._type = None
        self._uuid = None
        self._address = None
        self._location = None
        self._product_id = None
        self._drive_id = None
        self._partition_count_degraded = None
        self._partition_count_critical = None
        self.discriminator = None

        if internal_name is not None:
            self.internal_name = internal_name
        if node is not None:
            self.node = node
        if size is not None:
            self.size = size
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid
        if address is not None:
            self.address = address
        if location is not None:
            self.location = location
        if product_id is not None:
            self.product_id = product_id
        if drive_id is not None:
            self.drive_id = drive_id
        if partition_count_degraded is not None:
            self.partition_count_degraded = partition_count_degraded
        if partition_count_critical is not None:
            self.partition_count_critical = partition_count_critical

    @property
    def internal_name(self):
        """Gets the internal_name of this InlineResponse200134Drives.  # noqa: E501


        :return: The internal_name of this InlineResponse200134Drives.  # noqa: E501
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this InlineResponse200134Drives.


        :param internal_name: The internal_name of this InlineResponse200134Drives.  # noqa: E501
        :type: str
        """

        self._internal_name = internal_name

    @property
    def node(self):
        """Gets the node of this InlineResponse200134Drives.  # noqa: E501


        :return: The node of this InlineResponse200134Drives.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this InlineResponse200134Drives.


        :param node: The node of this InlineResponse200134Drives.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def size(self):
        """Gets the size of this InlineResponse200134Drives.  # noqa: E501


        :return: The size of this InlineResponse200134Drives.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this InlineResponse200134Drives.


        :param size: The size of this InlineResponse200134Drives.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def type(self):
        """Gets the type of this InlineResponse200134Drives.  # noqa: E501


        :return: The type of this InlineResponse200134Drives.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200134Drives.


        :param type: The type of this InlineResponse200134Drives.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this InlineResponse200134Drives.  # noqa: E501


        :return: The uuid of this InlineResponse200134Drives.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InlineResponse200134Drives.


        :param uuid: The uuid of this InlineResponse200134Drives.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def address(self):
        """Gets the address of this InlineResponse200134Drives.  # noqa: E501


        :return: The address of this InlineResponse200134Drives.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineResponse200134Drives.


        :param address: The address of this InlineResponse200134Drives.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def location(self):
        """Gets the location of this InlineResponse200134Drives.  # noqa: E501


        :return: The location of this InlineResponse200134Drives.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse200134Drives.


        :param location: The location of this InlineResponse200134Drives.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def product_id(self):
        """Gets the product_id of this InlineResponse200134Drives.  # noqa: E501


        :return: The product_id of this InlineResponse200134Drives.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this InlineResponse200134Drives.


        :param product_id: The product_id of this InlineResponse200134Drives.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def drive_id(self):
        """Gets the drive_id of this InlineResponse200134Drives.  # noqa: E501


        :return: The drive_id of this InlineResponse200134Drives.  # noqa: E501
        :rtype: str
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this InlineResponse200134Drives.


        :param drive_id: The drive_id of this InlineResponse200134Drives.  # noqa: E501
        :type: str
        """

        self._drive_id = drive_id

    @property
    def partition_count_degraded(self):
        """Gets the partition_count_degraded of this InlineResponse200134Drives.  # noqa: E501


        :return: The partition_count_degraded of this InlineResponse200134Drives.  # noqa: E501
        :rtype: str
        """
        return self._partition_count_degraded

    @partition_count_degraded.setter
    def partition_count_degraded(self, partition_count_degraded):
        """Sets the partition_count_degraded of this InlineResponse200134Drives.


        :param partition_count_degraded: The partition_count_degraded of this InlineResponse200134Drives.  # noqa: E501
        :type: str
        """

        self._partition_count_degraded = partition_count_degraded

    @property
    def partition_count_critical(self):
        """Gets the partition_count_critical of this InlineResponse200134Drives.  # noqa: E501


        :return: The partition_count_critical of this InlineResponse200134Drives.  # noqa: E501
        :rtype: str
        """
        return self._partition_count_critical

    @partition_count_critical.setter
    def partition_count_critical(self, partition_count_critical):
        """Sets the partition_count_critical of this InlineResponse200134Drives.


        :param partition_count_critical: The partition_count_critical of this InlineResponse200134Drives.  # noqa: E501
        :type: str
        """

        self._partition_count_critical = partition_count_critical

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200134Drives, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200134Drives):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200134Drives):
            return True

        return self.to_dict() != other.to_dict()
