# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse200138Vcs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'lb_group_owner': 'bool',
        'fe_ipv4': 'str',
        'fe_ipv6': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'lb_group_owner': 'lb_group_owner',
        'fe_ipv4': 'fe_ipv4',
        'fe_ipv6': 'fe_ipv6'
    }

    def __init__(self, id=None, name=None, lb_group_owner=None, fe_ipv4=None, fe_ipv6=None, _configuration=None):  # noqa: E501
        """InlineResponse200138Vcs - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._lb_group_owner = None
        self._fe_ipv4 = None
        self._fe_ipv6 = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if lb_group_owner is not None:
            self.lb_group_owner = lb_group_owner
        if fe_ipv4 is not None:
            self.fe_ipv4 = fe_ipv4
        if fe_ipv6 is not None:
            self.fe_ipv6 = fe_ipv6

    @property
    def id(self):
        """Gets the id of this InlineResponse200138Vcs.  # noqa: E501


        :return: The id of this InlineResponse200138Vcs.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200138Vcs.


        :param id: The id of this InlineResponse200138Vcs.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse200138Vcs.  # noqa: E501


        :return: The name of this InlineResponse200138Vcs.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200138Vcs.


        :param name: The name of this InlineResponse200138Vcs.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def lb_group_owner(self):
        """Gets the lb_group_owner of this InlineResponse200138Vcs.  # noqa: E501


        :return: The lb_group_owner of this InlineResponse200138Vcs.  # noqa: E501
        :rtype: bool
        """
        return self._lb_group_owner

    @lb_group_owner.setter
    def lb_group_owner(self, lb_group_owner):
        """Sets the lb_group_owner of this InlineResponse200138Vcs.


        :param lb_group_owner: The lb_group_owner of this InlineResponse200138Vcs.  # noqa: E501
        :type: bool
        """

        self._lb_group_owner = lb_group_owner

    @property
    def fe_ipv4(self):
        """Gets the fe_ipv4 of this InlineResponse200138Vcs.  # noqa: E501


        :return: The fe_ipv4 of this InlineResponse200138Vcs.  # noqa: E501
        :rtype: str
        """
        return self._fe_ipv4

    @fe_ipv4.setter
    def fe_ipv4(self, fe_ipv4):
        """Sets the fe_ipv4 of this InlineResponse200138Vcs.


        :param fe_ipv4: The fe_ipv4 of this InlineResponse200138Vcs.  # noqa: E501
        :type: str
        """

        self._fe_ipv4 = fe_ipv4

    @property
    def fe_ipv6(self):
        """Gets the fe_ipv6 of this InlineResponse200138Vcs.  # noqa: E501


        :return: The fe_ipv6 of this InlineResponse200138Vcs.  # noqa: E501
        :rtype: str
        """
        return self._fe_ipv6

    @fe_ipv6.setter
    def fe_ipv6(self, fe_ipv6):
        """Sets the fe_ipv6 of this InlineResponse200138Vcs.


        :param fe_ipv6: The fe_ipv6 of this InlineResponse200138Vcs.  # noqa: E501
        :type: str
        """

        self._fe_ipv6 = fe_ipv6

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200138Vcs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200138Vcs):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200138Vcs):
            return True

        return self.to_dict() != other.to_dict()
