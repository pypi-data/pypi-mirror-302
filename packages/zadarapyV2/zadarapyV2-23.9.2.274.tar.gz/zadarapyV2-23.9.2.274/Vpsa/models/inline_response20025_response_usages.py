# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse20025ResponseUsages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_user': 'float',
        'cpu_system': 'float',
        'cpu_iowait': 'float',
        'cpu_idle': 'float',
        'mem_alloc': 'float',
        'gb_wrt': 'float',
        'gb_rd': 'float',
        'zcache_data_dirty': 'float',
        'zcache_meta_dirty': 'float',
        'point': 'int'
    }

    attribute_map = {
        'cpu_user': 'cpu_user',
        'cpu_system': 'cpu_system',
        'cpu_iowait': 'cpu_iowait',
        'cpu_idle': 'cpu_idle',
        'mem_alloc': 'mem_alloc',
        'gb_wrt': 'gb_wrt',
        'gb_rd': 'gb_rd',
        'zcache_data_dirty': 'zcache_data_dirty',
        'zcache_meta_dirty': 'zcache_meta_dirty',
        'point': 'point'
    }

    def __init__(self, cpu_user=None, cpu_system=None, cpu_iowait=None, cpu_idle=None, mem_alloc=None, gb_wrt=None, gb_rd=None, zcache_data_dirty=None, zcache_meta_dirty=None, point=None, _configuration=None):  # noqa: E501
        """InlineResponse20025ResponseUsages - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cpu_user = None
        self._cpu_system = None
        self._cpu_iowait = None
        self._cpu_idle = None
        self._mem_alloc = None
        self._gb_wrt = None
        self._gb_rd = None
        self._zcache_data_dirty = None
        self._zcache_meta_dirty = None
        self._point = None
        self.discriminator = None

        if cpu_user is not None:
            self.cpu_user = cpu_user
        if cpu_system is not None:
            self.cpu_system = cpu_system
        if cpu_iowait is not None:
            self.cpu_iowait = cpu_iowait
        if cpu_idle is not None:
            self.cpu_idle = cpu_idle
        if mem_alloc is not None:
            self.mem_alloc = mem_alloc
        if gb_wrt is not None:
            self.gb_wrt = gb_wrt
        if gb_rd is not None:
            self.gb_rd = gb_rd
        if zcache_data_dirty is not None:
            self.zcache_data_dirty = zcache_data_dirty
        if zcache_meta_dirty is not None:
            self.zcache_meta_dirty = zcache_meta_dirty
        if point is not None:
            self.point = point

    @property
    def cpu_user(self):
        """Gets the cpu_user of this InlineResponse20025ResponseUsages.  # noqa: E501


        :return: The cpu_user of this InlineResponse20025ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._cpu_user

    @cpu_user.setter
    def cpu_user(self, cpu_user):
        """Sets the cpu_user of this InlineResponse20025ResponseUsages.


        :param cpu_user: The cpu_user of this InlineResponse20025ResponseUsages.  # noqa: E501
        :type: float
        """

        self._cpu_user = cpu_user

    @property
    def cpu_system(self):
        """Gets the cpu_system of this InlineResponse20025ResponseUsages.  # noqa: E501


        :return: The cpu_system of this InlineResponse20025ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._cpu_system

    @cpu_system.setter
    def cpu_system(self, cpu_system):
        """Sets the cpu_system of this InlineResponse20025ResponseUsages.


        :param cpu_system: The cpu_system of this InlineResponse20025ResponseUsages.  # noqa: E501
        :type: float
        """

        self._cpu_system = cpu_system

    @property
    def cpu_iowait(self):
        """Gets the cpu_iowait of this InlineResponse20025ResponseUsages.  # noqa: E501


        :return: The cpu_iowait of this InlineResponse20025ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._cpu_iowait

    @cpu_iowait.setter
    def cpu_iowait(self, cpu_iowait):
        """Sets the cpu_iowait of this InlineResponse20025ResponseUsages.


        :param cpu_iowait: The cpu_iowait of this InlineResponse20025ResponseUsages.  # noqa: E501
        :type: float
        """

        self._cpu_iowait = cpu_iowait

    @property
    def cpu_idle(self):
        """Gets the cpu_idle of this InlineResponse20025ResponseUsages.  # noqa: E501


        :return: The cpu_idle of this InlineResponse20025ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._cpu_idle

    @cpu_idle.setter
    def cpu_idle(self, cpu_idle):
        """Sets the cpu_idle of this InlineResponse20025ResponseUsages.


        :param cpu_idle: The cpu_idle of this InlineResponse20025ResponseUsages.  # noqa: E501
        :type: float
        """

        self._cpu_idle = cpu_idle

    @property
    def mem_alloc(self):
        """Gets the mem_alloc of this InlineResponse20025ResponseUsages.  # noqa: E501


        :return: The mem_alloc of this InlineResponse20025ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._mem_alloc

    @mem_alloc.setter
    def mem_alloc(self, mem_alloc):
        """Sets the mem_alloc of this InlineResponse20025ResponseUsages.


        :param mem_alloc: The mem_alloc of this InlineResponse20025ResponseUsages.  # noqa: E501
        :type: float
        """

        self._mem_alloc = mem_alloc

    @property
    def gb_wrt(self):
        """Gets the gb_wrt of this InlineResponse20025ResponseUsages.  # noqa: E501


        :return: The gb_wrt of this InlineResponse20025ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._gb_wrt

    @gb_wrt.setter
    def gb_wrt(self, gb_wrt):
        """Sets the gb_wrt of this InlineResponse20025ResponseUsages.


        :param gb_wrt: The gb_wrt of this InlineResponse20025ResponseUsages.  # noqa: E501
        :type: float
        """

        self._gb_wrt = gb_wrt

    @property
    def gb_rd(self):
        """Gets the gb_rd of this InlineResponse20025ResponseUsages.  # noqa: E501


        :return: The gb_rd of this InlineResponse20025ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._gb_rd

    @gb_rd.setter
    def gb_rd(self, gb_rd):
        """Sets the gb_rd of this InlineResponse20025ResponseUsages.


        :param gb_rd: The gb_rd of this InlineResponse20025ResponseUsages.  # noqa: E501
        :type: float
        """

        self._gb_rd = gb_rd

    @property
    def zcache_data_dirty(self):
        """Gets the zcache_data_dirty of this InlineResponse20025ResponseUsages.  # noqa: E501


        :return: The zcache_data_dirty of this InlineResponse20025ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._zcache_data_dirty

    @zcache_data_dirty.setter
    def zcache_data_dirty(self, zcache_data_dirty):
        """Sets the zcache_data_dirty of this InlineResponse20025ResponseUsages.


        :param zcache_data_dirty: The zcache_data_dirty of this InlineResponse20025ResponseUsages.  # noqa: E501
        :type: float
        """

        self._zcache_data_dirty = zcache_data_dirty

    @property
    def zcache_meta_dirty(self):
        """Gets the zcache_meta_dirty of this InlineResponse20025ResponseUsages.  # noqa: E501


        :return: The zcache_meta_dirty of this InlineResponse20025ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._zcache_meta_dirty

    @zcache_meta_dirty.setter
    def zcache_meta_dirty(self, zcache_meta_dirty):
        """Sets the zcache_meta_dirty of this InlineResponse20025ResponseUsages.


        :param zcache_meta_dirty: The zcache_meta_dirty of this InlineResponse20025ResponseUsages.  # noqa: E501
        :type: float
        """

        self._zcache_meta_dirty = zcache_meta_dirty

    @property
    def point(self):
        """Gets the point of this InlineResponse20025ResponseUsages.  # noqa: E501


        :return: The point of this InlineResponse20025ResponseUsages.  # noqa: E501
        :rtype: int
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this InlineResponse20025ResponseUsages.


        :param point: The point of this InlineResponse20025ResponseUsages.  # noqa: E501
        :type: int
        """

        self._point = point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20025ResponseUsages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20025ResponseUsages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20025ResponseUsages):
            return True

        return self.to_dict() != other.to_dict()
