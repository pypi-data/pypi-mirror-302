# coding: utf-8

"""
    Zadara VPSA Object Storage REST API

    # Overview  This document outlines the methods available for administrating your VPSA&#174; Object Storage. The API supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or through the X-Access-Key header. Alternately, you can use the username and password parameters for authentication, but we do not recommend this method for anything other than possibly retrieving an API key.  By default , all operations are allowed only to VPSA Object Storage admin. Some actions are allowed by an account admin and they will be marked on the action's header  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some time to complete. When using the API, this can cause some actions, such as adding drives to storage policy, to be undesirably asynchronous. You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Metering API  Metering information can be retrieved using the VPSA Object Storage API for the following components:  - Accounts - Users - Drives - Virtual Controllers - Load Balancer Groups - Storage Policies  Metering information returned by the API is subject to the following constraints:  - 10 seconds interval - 1 hour range - 1 minute interval - 1 day range - 1 hour interval - 30 days range  Values outside the accepted range will be returned as 0.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Zios.configuration import Configuration


class InlineResponse2002ResponseAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'update_time': 'str',
        'name': 'str',
        'is_system_account': 'str',
        'public_url_list': 'list[str]',
        'enabled': 'str',
        'email': 'str',
        'state': 'str',
        'create_time': 'str',
        'id': 'str',
        'description': 'str'
    }

    attribute_map = {
        'update_time': 'update_time',
        'name': 'name',
        'is_system_account': 'is_system_account',
        'public_url_list': 'public_url_list',
        'enabled': 'enabled',
        'email': 'email',
        'state': 'state',
        'create_time': 'create_time',
        'id': 'id',
        'description': 'description'
    }

    def __init__(self, update_time=None, name=None, is_system_account=None, public_url_list=None, enabled=None, email=None, state=None, create_time=None, id=None, description=None, _configuration=None):  # noqa: E501
        """InlineResponse2002ResponseAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._update_time = None
        self._name = None
        self._is_system_account = None
        self._public_url_list = None
        self._enabled = None
        self._email = None
        self._state = None
        self._create_time = None
        self._id = None
        self._description = None
        self.discriminator = None

        if update_time is not None:
            self.update_time = update_time
        if name is not None:
            self.name = name
        if is_system_account is not None:
            self.is_system_account = is_system_account
        if public_url_list is not None:
            self.public_url_list = public_url_list
        if enabled is not None:
            self.enabled = enabled
        if email is not None:
            self.email = email
        if state is not None:
            self.state = state
        if create_time is not None:
            self.create_time = create_time
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description

    @property
    def update_time(self):
        """Gets the update_time of this InlineResponse2002ResponseAccount.  # noqa: E501


        :return: The update_time of this InlineResponse2002ResponseAccount.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InlineResponse2002ResponseAccount.


        :param update_time: The update_time of this InlineResponse2002ResponseAccount.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def name(self):
        """Gets the name of this InlineResponse2002ResponseAccount.  # noqa: E501


        :return: The name of this InlineResponse2002ResponseAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2002ResponseAccount.


        :param name: The name of this InlineResponse2002ResponseAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_system_account(self):
        """Gets the is_system_account of this InlineResponse2002ResponseAccount.  # noqa: E501


        :return: The is_system_account of this InlineResponse2002ResponseAccount.  # noqa: E501
        :rtype: str
        """
        return self._is_system_account

    @is_system_account.setter
    def is_system_account(self, is_system_account):
        """Sets the is_system_account of this InlineResponse2002ResponseAccount.


        :param is_system_account: The is_system_account of this InlineResponse2002ResponseAccount.  # noqa: E501
        :type: str
        """

        self._is_system_account = is_system_account

    @property
    def public_url_list(self):
        """Gets the public_url_list of this InlineResponse2002ResponseAccount.  # noqa: E501


        :return: The public_url_list of this InlineResponse2002ResponseAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._public_url_list

    @public_url_list.setter
    def public_url_list(self, public_url_list):
        """Sets the public_url_list of this InlineResponse2002ResponseAccount.


        :param public_url_list: The public_url_list of this InlineResponse2002ResponseAccount.  # noqa: E501
        :type: list[str]
        """

        self._public_url_list = public_url_list

    @property
    def enabled(self):
        """Gets the enabled of this InlineResponse2002ResponseAccount.  # noqa: E501


        :return: The enabled of this InlineResponse2002ResponseAccount.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineResponse2002ResponseAccount.


        :param enabled: The enabled of this InlineResponse2002ResponseAccount.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def email(self):
        """Gets the email of this InlineResponse2002ResponseAccount.  # noqa: E501


        :return: The email of this InlineResponse2002ResponseAccount.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse2002ResponseAccount.


        :param email: The email of this InlineResponse2002ResponseAccount.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def state(self):
        """Gets the state of this InlineResponse2002ResponseAccount.  # noqa: E501


        :return: The state of this InlineResponse2002ResponseAccount.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse2002ResponseAccount.


        :param state: The state of this InlineResponse2002ResponseAccount.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def create_time(self):
        """Gets the create_time of this InlineResponse2002ResponseAccount.  # noqa: E501


        :return: The create_time of this InlineResponse2002ResponseAccount.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InlineResponse2002ResponseAccount.


        :param create_time: The create_time of this InlineResponse2002ResponseAccount.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def id(self):
        """Gets the id of this InlineResponse2002ResponseAccount.  # noqa: E501


        :return: The id of this InlineResponse2002ResponseAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2002ResponseAccount.


        :param id: The id of this InlineResponse2002ResponseAccount.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this InlineResponse2002ResponseAccount.  # noqa: E501


        :return: The description of this InlineResponse2002ResponseAccount.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse2002ResponseAccount.


        :param description: The description of this InlineResponse2002ResponseAccount.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002ResponseAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002ResponseAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2002ResponseAccount):
            return True

        return self.to_dict() != other.to_dict()
