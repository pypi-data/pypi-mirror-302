# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class WeatherMetadata(pydantic_v1.BaseModel):
    slug: str = pydantic_v1.Field()
    """
    Slugified label for the weather indicator
    """

    label: str = pydantic_v1.Field()
    """
    Label for the weather indicator
    """

    segmentation: str = pydantic_v1.Field()
    """
    The segmentation type of the weather indicator
    """

    asof_date: str = pydantic_v1.Field()
    """
    The date of the full revision of the input data for the indicator
    """

    indicator_start_date: str = pydantic_v1.Field()
    """
    The earliest date a data point in the indicator is considered valid
    """

    countries: typing.Optional[typing.List[str]] = None
    categories: typing.Optional[typing.List[str]] = pydantic_v1.Field(default=None)
    """
    A list of categories the indicator covers - If null, the indicator includes all covered categories
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
