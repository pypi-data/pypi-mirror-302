"""A web3.py Contract class for the VmSafe contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import dataclass_to_tuple, rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from . import VmSafeTypes as VmSafe

structs = {
    "VmSafe.Wallet": VmSafe.Wallet,
    "VmSafe.EthGetLogs": VmSafe.EthGetLogs,
    "VmSafe.FsMetadata": VmSafe.FsMetadata,
    "VmSafe.Log": VmSafe.Log,
    "VmSafe.DirEntry": VmSafe.DirEntry,
    "VmSafe.Rpc": VmSafe.Rpc,
    "VmSafe.ChainInfo": VmSafe.ChainInfo,
    "VmSafe.StorageAccess": VmSafe.StorageAccess,
    "VmSafe.AccountAccess": VmSafe.AccountAccess,
    "VmSafe.FfiResult": VmSafe.FfiResult,
}


class VmSafeAccessesContractFunction(ContractFunction):
    """ContractFunction for the accesses method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Accesses."""

        readSlots: list[bytes]
        writeSlots: list[bytes]

    def __call__(self, target: str) -> VmSafeAccessesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(target))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [list[bytes], list[bytes]]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeAddrContractFunction(ContractFunction):
    """ContractFunction for the addr method."""

    def __call__(self, privateKey: int) -> VmSafeAddrContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(privateKey))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeAssertApproxEqAbsContractFunction0(ContractFunction):
    """ContractFunction for the assertApproxEqAbs method."""

    def __call__(self, left: int, right: int, maxDelta: int) -> VmSafeAssertApproxEqAbsContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxDelta))  # type: ignore
        return cast(VmSafeAssertApproxEqAbsContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqAbsContractFunction1(ContractFunction):
    """ContractFunction for the assertApproxEqAbs method."""

    def __call__(self, left: int, right: int, maxDelta: int) -> VmSafeAssertApproxEqAbsContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxDelta))  # type: ignore
        return cast(VmSafeAssertApproxEqAbsContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqAbsContractFunction2(ContractFunction):
    """ContractFunction for the assertApproxEqAbs method."""

    def __call__(self, left: int, right: int, maxDelta: int, error: str) -> VmSafeAssertApproxEqAbsContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxDelta), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertApproxEqAbsContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqAbsContractFunction3(ContractFunction):
    """ContractFunction for the assertApproxEqAbs method."""

    def __call__(self, left: int, right: int, maxDelta: int, error: str) -> VmSafeAssertApproxEqAbsContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxDelta), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertApproxEqAbsContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqAbsContractFunction(ContractFunction):
    """ContractFunction for the assertApproxEqAbs method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, maxDelta: int) -> VmSafeAssertApproxEqAbsContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxDelta: int) -> VmSafeAssertApproxEqAbsContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxDelta: int, error: str) -> VmSafeAssertApproxEqAbsContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxDelta: int, error: str) -> VmSafeAssertApproxEqAbsContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertApproxEqAbsContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertApproxEqAbsDecimalContractFunction0(ContractFunction):
    """ContractFunction for the assertApproxEqAbsDecimal method."""

    def __call__(self, left: int, right: int, maxDelta: int, decimals: int) -> VmSafeAssertApproxEqAbsDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxDelta), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertApproxEqAbsDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqAbsDecimalContractFunction1(ContractFunction):
    """ContractFunction for the assertApproxEqAbsDecimal method."""

    def __call__(self, left: int, right: int, maxDelta: int, decimals: int) -> VmSafeAssertApproxEqAbsDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxDelta), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertApproxEqAbsDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqAbsDecimalContractFunction2(ContractFunction):
    """ContractFunction for the assertApproxEqAbsDecimal method."""

    def __call__(self, left: int, right: int, maxDelta: int, decimals: int, error: str) -> VmSafeAssertApproxEqAbsDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxDelta), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertApproxEqAbsDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqAbsDecimalContractFunction3(ContractFunction):
    """ContractFunction for the assertApproxEqAbsDecimal method."""

    def __call__(self, left: int, right: int, maxDelta: int, decimals: int, error: str) -> VmSafeAssertApproxEqAbsDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxDelta), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertApproxEqAbsDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqAbsDecimalContractFunction(ContractFunction):
    """ContractFunction for the assertApproxEqAbsDecimal method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, maxDelta: int, decimals: int) -> VmSafeAssertApproxEqAbsDecimalContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxDelta: int, decimals: int) -> VmSafeAssertApproxEqAbsDecimalContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxDelta: int, decimals: int, error: str) -> VmSafeAssertApproxEqAbsDecimalContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxDelta: int, decimals: int, error: str) -> VmSafeAssertApproxEqAbsDecimalContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertApproxEqAbsDecimalContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertApproxEqRelContractFunction0(ContractFunction):
    """ContractFunction for the assertApproxEqRel method."""

    def __call__(self, left: int, right: int, maxPercentDelta: int, error: str) -> VmSafeAssertApproxEqRelContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxPercentDelta), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertApproxEqRelContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqRelContractFunction1(ContractFunction):
    """ContractFunction for the assertApproxEqRel method."""

    def __call__(self, left: int, right: int, maxPercentDelta: int) -> VmSafeAssertApproxEqRelContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxPercentDelta))  # type: ignore
        return cast(VmSafeAssertApproxEqRelContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqRelContractFunction2(ContractFunction):
    """ContractFunction for the assertApproxEqRel method."""

    def __call__(self, left: int, right: int, maxPercentDelta: int, error: str) -> VmSafeAssertApproxEqRelContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxPercentDelta), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertApproxEqRelContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqRelContractFunction3(ContractFunction):
    """ContractFunction for the assertApproxEqRel method."""

    def __call__(self, left: int, right: int, maxPercentDelta: int) -> VmSafeAssertApproxEqRelContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxPercentDelta))  # type: ignore
        return cast(VmSafeAssertApproxEqRelContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqRelContractFunction(ContractFunction):
    """ContractFunction for the assertApproxEqRel method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, maxPercentDelta: int, error: str) -> VmSafeAssertApproxEqRelContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxPercentDelta: int) -> VmSafeAssertApproxEqRelContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxPercentDelta: int, error: str) -> VmSafeAssertApproxEqRelContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxPercentDelta: int) -> VmSafeAssertApproxEqRelContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertApproxEqRelContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertApproxEqRelDecimalContractFunction0(ContractFunction):
    """ContractFunction for the assertApproxEqRelDecimal method."""

    def __call__(self, left: int, right: int, maxPercentDelta: int, decimals: int) -> VmSafeAssertApproxEqRelDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxPercentDelta), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertApproxEqRelDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqRelDecimalContractFunction1(ContractFunction):
    """ContractFunction for the assertApproxEqRelDecimal method."""

    def __call__(self, left: int, right: int, maxPercentDelta: int, decimals: int, error: str) -> VmSafeAssertApproxEqRelDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxPercentDelta), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertApproxEqRelDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqRelDecimalContractFunction2(ContractFunction):
    """ContractFunction for the assertApproxEqRelDecimal method."""

    def __call__(self, left: int, right: int, maxPercentDelta: int, decimals: int) -> VmSafeAssertApproxEqRelDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxPercentDelta), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertApproxEqRelDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqRelDecimalContractFunction3(ContractFunction):
    """ContractFunction for the assertApproxEqRelDecimal method."""

    def __call__(self, left: int, right: int, maxPercentDelta: int, decimals: int, error: str) -> VmSafeAssertApproxEqRelDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(maxPercentDelta), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertApproxEqRelDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertApproxEqRelDecimalContractFunction(ContractFunction):
    """ContractFunction for the assertApproxEqRelDecimal method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, maxPercentDelta: int, decimals: int) -> VmSafeAssertApproxEqRelDecimalContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxPercentDelta: int, decimals: int, error: str) -> VmSafeAssertApproxEqRelDecimalContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxPercentDelta: int, decimals: int) -> VmSafeAssertApproxEqRelDecimalContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, maxPercentDelta: int, decimals: int, error: str) -> VmSafeAssertApproxEqRelDecimalContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertApproxEqRelDecimalContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertEqContractFunction0(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[bytes], right: list[bytes]) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction1(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[int], right: list[int], error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction2(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: str, right: str, error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction3(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: str, right: str, error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction4(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[str], right: list[str]) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction5(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[str], right: list[str], error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction6(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: bool, right: bool, error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction7(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: str, right: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction8(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[int], right: list[int], error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction9(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[bool], right: list[bool]) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction10(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[int], right: list[int]) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction11(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction12(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: bytes, right: bytes) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction13(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction14(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[int], right: list[int]) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction15(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: bytes, right: bytes) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction16(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction17(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: bytes, right: bytes, error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction18(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[str], right: list[str]) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction19(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[bytes], right: list[bytes], error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction20(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: bytes, right: bytes, error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction21(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[bool], right: list[bool], error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction22(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[bytes], right: list[bytes]) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction23(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[str], right: list[str], error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction24(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: str, right: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction25(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: list[bytes], right: list[bytes], error: str) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction26(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: bool, right: bool) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction27(ContractFunction):
    """ContractFunction for the assertEq method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqContractFunction(ContractFunction):
    """ContractFunction for the assertEq method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: list[bytes], right: list[bytes]) -> VmSafeAssertEqContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[int], right: list[int], error: str) -> VmSafeAssertEqContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: str, right: str, error: str) -> VmSafeAssertEqContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: str, right: str, error: str) -> VmSafeAssertEqContractFunction3:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[str], right: list[str]) -> VmSafeAssertEqContractFunction4:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[str], right: list[str], error: str) -> VmSafeAssertEqContractFunction5:  # type: ignore
        ...

    @overload
    def __call__(self, left: bool, right: bool, error: str) -> VmSafeAssertEqContractFunction6:  # type: ignore
        ...

    @overload
    def __call__(self, left: str, right: str) -> VmSafeAssertEqContractFunction7:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[int], right: list[int], error: str) -> VmSafeAssertEqContractFunction8:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[bool], right: list[bool]) -> VmSafeAssertEqContractFunction9:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[int], right: list[int]) -> VmSafeAssertEqContractFunction10:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertEqContractFunction11:  # type: ignore
        ...

    @overload
    def __call__(self, left: bytes, right: bytes) -> VmSafeAssertEqContractFunction12:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertEqContractFunction13:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[int], right: list[int]) -> VmSafeAssertEqContractFunction14:  # type: ignore
        ...

    @overload
    def __call__(self, left: bytes, right: bytes) -> VmSafeAssertEqContractFunction15:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertEqContractFunction16:  # type: ignore
        ...

    @overload
    def __call__(self, left: bytes, right: bytes, error: str) -> VmSafeAssertEqContractFunction17:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[str], right: list[str]) -> VmSafeAssertEqContractFunction18:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[bytes], right: list[bytes], error: str) -> VmSafeAssertEqContractFunction19:  # type: ignore
        ...

    @overload
    def __call__(self, left: bytes, right: bytes, error: str) -> VmSafeAssertEqContractFunction20:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[bool], right: list[bool], error: str) -> VmSafeAssertEqContractFunction21:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[bytes], right: list[bytes]) -> VmSafeAssertEqContractFunction22:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[str], right: list[str], error: str) -> VmSafeAssertEqContractFunction23:  # type: ignore
        ...

    @overload
    def __call__(self, left: str, right: str) -> VmSafeAssertEqContractFunction24:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[bytes], right: list[bytes], error: str) -> VmSafeAssertEqContractFunction25:  # type: ignore
        ...

    @overload
    def __call__(self, left: bool, right: bool) -> VmSafeAssertEqContractFunction26:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertEqContractFunction27:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertEqContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertEqDecimalContractFunction0(ContractFunction):
    """ContractFunction for the assertEqDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertEqDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertEqDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqDecimalContractFunction1(ContractFunction):
    """ContractFunction for the assertEqDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertEqDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertEqDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqDecimalContractFunction2(ContractFunction):
    """ContractFunction for the assertEqDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertEqDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqDecimalContractFunction3(ContractFunction):
    """ContractFunction for the assertEqDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertEqDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertEqDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertEqDecimalContractFunction(ContractFunction):
    """ContractFunction for the assertEqDecimal method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertEqDecimalContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertEqDecimalContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertEqDecimalContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertEqDecimalContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertEqDecimalContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertFalseContractFunction0(ContractFunction):
    """ContractFunction for the assertFalse method."""

    def __call__(self, condition: bool, error: str) -> VmSafeAssertFalseContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(condition), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertFalseContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertFalseContractFunction1(ContractFunction):
    """ContractFunction for the assertFalse method."""

    def __call__(self, condition: bool) -> VmSafeAssertFalseContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeAssertFalseContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertFalseContractFunction(ContractFunction):
    """ContractFunction for the assertFalse method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, condition: bool, error: str) -> VmSafeAssertFalseContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, condition: bool) -> VmSafeAssertFalseContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertFalseContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertGeContractFunction0(ContractFunction):
    """ContractFunction for the assertGe method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertGeContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertGeContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGeContractFunction1(ContractFunction):
    """ContractFunction for the assertGe method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertGeContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertGeContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGeContractFunction2(ContractFunction):
    """ContractFunction for the assertGe method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertGeContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertGeContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGeContractFunction3(ContractFunction):
    """ContractFunction for the assertGe method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertGeContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertGeContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGeContractFunction(ContractFunction):
    """ContractFunction for the assertGe method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertGeContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertGeContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertGeContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertGeContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertGeContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertGeDecimalContractFunction0(ContractFunction):
    """ContractFunction for the assertGeDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertGeDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertGeDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGeDecimalContractFunction1(ContractFunction):
    """ContractFunction for the assertGeDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertGeDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertGeDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGeDecimalContractFunction2(ContractFunction):
    """ContractFunction for the assertGeDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertGeDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertGeDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGeDecimalContractFunction3(ContractFunction):
    """ContractFunction for the assertGeDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertGeDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertGeDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGeDecimalContractFunction(ContractFunction):
    """ContractFunction for the assertGeDecimal method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertGeDecimalContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertGeDecimalContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertGeDecimalContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertGeDecimalContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertGeDecimalContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertGtContractFunction0(ContractFunction):
    """ContractFunction for the assertGt method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertGtContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertGtContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGtContractFunction1(ContractFunction):
    """ContractFunction for the assertGt method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertGtContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertGtContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGtContractFunction2(ContractFunction):
    """ContractFunction for the assertGt method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertGtContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertGtContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGtContractFunction3(ContractFunction):
    """ContractFunction for the assertGt method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertGtContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertGtContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGtContractFunction(ContractFunction):
    """ContractFunction for the assertGt method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertGtContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertGtContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertGtContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertGtContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertGtContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertGtDecimalContractFunction0(ContractFunction):
    """ContractFunction for the assertGtDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertGtDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertGtDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGtDecimalContractFunction1(ContractFunction):
    """ContractFunction for the assertGtDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertGtDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertGtDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGtDecimalContractFunction2(ContractFunction):
    """ContractFunction for the assertGtDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertGtDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertGtDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGtDecimalContractFunction3(ContractFunction):
    """ContractFunction for the assertGtDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertGtDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertGtDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertGtDecimalContractFunction(ContractFunction):
    """ContractFunction for the assertGtDecimal method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertGtDecimalContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertGtDecimalContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertGtDecimalContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertGtDecimalContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertGtDecimalContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertLeContractFunction0(ContractFunction):
    """ContractFunction for the assertLe method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertLeContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertLeContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLeContractFunction1(ContractFunction):
    """ContractFunction for the assertLe method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertLeContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertLeContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLeContractFunction2(ContractFunction):
    """ContractFunction for the assertLe method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertLeContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertLeContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLeContractFunction3(ContractFunction):
    """ContractFunction for the assertLe method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertLeContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertLeContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLeContractFunction(ContractFunction):
    """ContractFunction for the assertLe method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertLeContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertLeContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertLeContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertLeContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertLeContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertLeDecimalContractFunction0(ContractFunction):
    """ContractFunction for the assertLeDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertLeDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertLeDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLeDecimalContractFunction1(ContractFunction):
    """ContractFunction for the assertLeDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertLeDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertLeDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLeDecimalContractFunction2(ContractFunction):
    """ContractFunction for the assertLeDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertLeDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertLeDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLeDecimalContractFunction3(ContractFunction):
    """ContractFunction for the assertLeDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertLeDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertLeDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLeDecimalContractFunction(ContractFunction):
    """ContractFunction for the assertLeDecimal method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertLeDecimalContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertLeDecimalContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertLeDecimalContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertLeDecimalContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertLeDecimalContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertLtContractFunction0(ContractFunction):
    """ContractFunction for the assertLt method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertLtContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertLtContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLtContractFunction1(ContractFunction):
    """ContractFunction for the assertLt method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertLtContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertLtContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLtContractFunction2(ContractFunction):
    """ContractFunction for the assertLt method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertLtContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertLtContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLtContractFunction3(ContractFunction):
    """ContractFunction for the assertLt method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertLtContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertLtContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLtContractFunction(ContractFunction):
    """ContractFunction for the assertLt method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertLtContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertLtContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertLtContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertLtContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertLtContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertLtDecimalContractFunction0(ContractFunction):
    """ContractFunction for the assertLtDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertLtDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertLtDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLtDecimalContractFunction1(ContractFunction):
    """ContractFunction for the assertLtDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertLtDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertLtDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLtDecimalContractFunction2(ContractFunction):
    """ContractFunction for the assertLtDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertLtDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertLtDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLtDecimalContractFunction3(ContractFunction):
    """ContractFunction for the assertLtDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertLtDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertLtDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertLtDecimalContractFunction(ContractFunction):
    """ContractFunction for the assertLtDecimal method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertLtDecimalContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertLtDecimalContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertLtDecimalContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertLtDecimalContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertLtDecimalContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertNotEqContractFunction0(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[bytes], right: list[bytes]) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction1(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[int], right: list[int]) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction2(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: bool, right: bool, error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction3(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[bytes], right: list[bytes], error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction4(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: bool, right: bool) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction5(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[bool], right: list[bool]) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction6(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: bytes, right: bytes) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction7(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[str], right: list[str]) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction8(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction9(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[int], right: list[int]) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction10(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[bool], right: list[bool], error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction11(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: str, right: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction12(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[str], right: list[str], error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction13(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: str, right: str, error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction14(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: str, right: str, error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction15(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: bytes, right: bytes) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction16(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: bytes, right: bytes, error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction17(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction18(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[int], right: list[int], error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction19(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: str, right: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction20(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: bytes, right: bytes, error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction21(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[str], right: list[str], error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction22(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction23(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[bytes], right: list[bytes], error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction24(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[str], right: list[str]) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction25(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[int], right: list[int], error: str) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction26(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: list[bytes], right: list[bytes]) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction27(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    def __call__(self, left: int, right: int) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right))  # type: ignore
        return cast(VmSafeAssertNotEqContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqContractFunction(ContractFunction):
    """ContractFunction for the assertNotEq method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: list[bytes], right: list[bytes]) -> VmSafeAssertNotEqContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[int], right: list[int]) -> VmSafeAssertNotEqContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: bool, right: bool, error: str) -> VmSafeAssertNotEqContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[bytes], right: list[bytes], error: str) -> VmSafeAssertNotEqContractFunction3:  # type: ignore
        ...

    @overload
    def __call__(self, left: bool, right: bool) -> VmSafeAssertNotEqContractFunction4:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[bool], right: list[bool]) -> VmSafeAssertNotEqContractFunction5:  # type: ignore
        ...

    @overload
    def __call__(self, left: bytes, right: bytes) -> VmSafeAssertNotEqContractFunction6:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[str], right: list[str]) -> VmSafeAssertNotEqContractFunction7:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertNotEqContractFunction8:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[int], right: list[int]) -> VmSafeAssertNotEqContractFunction9:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[bool], right: list[bool], error: str) -> VmSafeAssertNotEqContractFunction10:  # type: ignore
        ...

    @overload
    def __call__(self, left: str, right: str) -> VmSafeAssertNotEqContractFunction11:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[str], right: list[str], error: str) -> VmSafeAssertNotEqContractFunction12:  # type: ignore
        ...

    @overload
    def __call__(self, left: str, right: str, error: str) -> VmSafeAssertNotEqContractFunction13:  # type: ignore
        ...

    @overload
    def __call__(self, left: str, right: str, error: str) -> VmSafeAssertNotEqContractFunction14:  # type: ignore
        ...

    @overload
    def __call__(self, left: bytes, right: bytes) -> VmSafeAssertNotEqContractFunction15:  # type: ignore
        ...

    @overload
    def __call__(self, left: bytes, right: bytes, error: str) -> VmSafeAssertNotEqContractFunction16:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, error: str) -> VmSafeAssertNotEqContractFunction17:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[int], right: list[int], error: str) -> VmSafeAssertNotEqContractFunction18:  # type: ignore
        ...

    @overload
    def __call__(self, left: str, right: str) -> VmSafeAssertNotEqContractFunction19:  # type: ignore
        ...

    @overload
    def __call__(self, left: bytes, right: bytes, error: str) -> VmSafeAssertNotEqContractFunction20:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[str], right: list[str], error: str) -> VmSafeAssertNotEqContractFunction21:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertNotEqContractFunction22:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[bytes], right: list[bytes], error: str) -> VmSafeAssertNotEqContractFunction23:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[str], right: list[str]) -> VmSafeAssertNotEqContractFunction24:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[int], right: list[int], error: str) -> VmSafeAssertNotEqContractFunction25:  # type: ignore
        ...

    @overload
    def __call__(self, left: list[bytes], right: list[bytes]) -> VmSafeAssertNotEqContractFunction26:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int) -> VmSafeAssertNotEqContractFunction27:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertNotEqContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertNotEqDecimalContractFunction0(ContractFunction):
    """ContractFunction for the assertNotEqDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertNotEqDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertNotEqDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqDecimalContractFunction1(ContractFunction):
    """ContractFunction for the assertNotEqDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertNotEqDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqDecimalContractFunction2(ContractFunction):
    """ContractFunction for the assertNotEqDecimal method."""

    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertNotEqDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals))  # type: ignore
        return cast(VmSafeAssertNotEqDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqDecimalContractFunction3(ContractFunction):
    """ContractFunction for the assertNotEqDecimal method."""

    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertNotEqDecimalContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(left), dataclass_to_tuple(right), dataclass_to_tuple(decimals), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertNotEqDecimalContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertNotEqDecimalContractFunction(ContractFunction):
    """ContractFunction for the assertNotEqDecimal method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertNotEqDecimalContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertNotEqDecimalContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int) -> VmSafeAssertNotEqDecimalContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, left: int, right: int, decimals: int, error: str) -> VmSafeAssertNotEqDecimalContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertNotEqDecimalContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssertTrueContractFunction0(ContractFunction):
    """ContractFunction for the assertTrue method."""

    def __call__(self, condition: bool) -> VmSafeAssertTrueContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeAssertTrueContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertTrueContractFunction1(ContractFunction):
    """ContractFunction for the assertTrue method."""

    def __call__(self, condition: bool, error: str) -> VmSafeAssertTrueContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(condition), dataclass_to_tuple(error))  # type: ignore
        return cast(VmSafeAssertTrueContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeAssertTrueContractFunction(ContractFunction):
    """ContractFunction for the assertTrue method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, condition: bool) -> VmSafeAssertTrueContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, condition: bool, error: str) -> VmSafeAssertTrueContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeAssertTrueContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeAssumeContractFunction(ContractFunction):
    """ContractFunction for the assume method."""

    def __call__(self, condition: bool) -> VmSafeAssumeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(condition))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeBreakpointContractFunction0(ContractFunction):
    """ContractFunction for the breakpoint method."""

    def __call__(self, char: str) -> VmSafeBreakpointContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeBreakpointContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeBreakpointContractFunction1(ContractFunction):
    """ContractFunction for the breakpoint method."""

    def __call__(self, char: str, value: bool) -> VmSafeBreakpointContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(char), dataclass_to_tuple(value))  # type: ignore
        return cast(VmSafeBreakpointContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeBreakpointContractFunction(ContractFunction):
    """ContractFunction for the breakpoint method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, char: str) -> VmSafeBreakpointContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, char: str, value: bool) -> VmSafeBreakpointContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeBreakpointContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeBroadcastContractFunction0(ContractFunction):
    """ContractFunction for the broadcast method."""

    def __call__(self) -> VmSafeBroadcastContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeBroadcastContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeBroadcastContractFunction1(ContractFunction):
    """ContractFunction for the broadcast method."""

    def __call__(self, signer: str) -> VmSafeBroadcastContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeBroadcastContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeBroadcastContractFunction2(ContractFunction):
    """ContractFunction for the broadcast method."""

    def __call__(self, privateKey: int) -> VmSafeBroadcastContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeBroadcastContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeBroadcastContractFunction(ContractFunction):
    """ContractFunction for the broadcast method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self) -> VmSafeBroadcastContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, signer: str) -> VmSafeBroadcastContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, privateKey: int) -> VmSafeBroadcastContractFunction2:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeBroadcastContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeCloseFileContractFunction(ContractFunction):
    """ContractFunction for the closeFile method."""

    def __call__(self, path: str) -> VmSafeCloseFileContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(path))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeComputeCreate2AddressContractFunction0(ContractFunction):
    """ContractFunction for the computeCreate2Address method."""

    def __call__(self, salt: bytes, initCodeHash: bytes) -> VmSafeComputeCreate2AddressContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(initCodeHash))  # type: ignore
        return cast(VmSafeComputeCreate2AddressContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeComputeCreate2AddressContractFunction1(ContractFunction):
    """ContractFunction for the computeCreate2Address method."""

    def __call__(self, salt: bytes, initCodeHash: bytes, deployer: str) -> VmSafeComputeCreate2AddressContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(initCodeHash), dataclass_to_tuple(deployer))  # type: ignore
        return cast(VmSafeComputeCreate2AddressContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeComputeCreate2AddressContractFunction(ContractFunction):
    """ContractFunction for the computeCreate2Address method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, salt: bytes, initCodeHash: bytes) -> VmSafeComputeCreate2AddressContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, salt: bytes, initCodeHash: bytes, deployer: str) -> VmSafeComputeCreate2AddressContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeComputeCreate2AddressContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeComputeCreateAddressContractFunction(ContractFunction):
    """ContractFunction for the computeCreateAddress method."""

    def __call__(self, deployer: str, nonce: int) -> VmSafeComputeCreateAddressContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deployer), dataclass_to_tuple(nonce)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeCopyFileContractFunction(ContractFunction):
    """ContractFunction for the copyFile method."""

    def __call__(self, _from: str, to: str) -> VmSafeCopyFileContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(_from), dataclass_to_tuple(to)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeCreateDirContractFunction(ContractFunction):
    """ContractFunction for the createDir method."""

    def __call__(self, path: str, recursive: bool) -> VmSafeCreateDirContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(path), dataclass_to_tuple(recursive)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeCreateWalletContractFunction0(ContractFunction):
    """ContractFunction for the createWallet method."""

    def __call__(self, walletLabel: str) -> VmSafeCreateWalletContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeCreateWalletContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> VmSafe.Wallet:
        """returns VmSafe.Wallet."""
        # Define the expected return types from the smart contract call

        return_types = VmSafe.Wallet

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            VmSafe.Wallet,
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeCreateWalletContractFunction1(ContractFunction):
    """ContractFunction for the createWallet method."""

    def __call__(self, privateKey: int) -> VmSafeCreateWalletContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeCreateWalletContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> VmSafe.Wallet:
        """returns VmSafe.Wallet."""
        # Define the expected return types from the smart contract call

        return_types = VmSafe.Wallet

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            VmSafe.Wallet,
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeCreateWalletContractFunction2(ContractFunction):
    """ContractFunction for the createWallet method."""

    def __call__(self, privateKey: int, walletLabel: str) -> VmSafeCreateWalletContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(privateKey), dataclass_to_tuple(walletLabel))  # type: ignore
        return cast(VmSafeCreateWalletContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> VmSafe.Wallet:
        """returns VmSafe.Wallet."""
        # Define the expected return types from the smart contract call

        return_types = VmSafe.Wallet

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            VmSafe.Wallet,
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeCreateWalletContractFunction(ContractFunction):
    """ContractFunction for the createWallet method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, walletLabel: str) -> VmSafeCreateWalletContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, privateKey: int) -> VmSafeCreateWalletContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, privateKey: int, walletLabel: str) -> VmSafeCreateWalletContractFunction2:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeCreateWalletContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeDeriveKeyContractFunction0(ContractFunction):
    """ContractFunction for the deriveKey method."""

    def __call__(self, mnemonic: str, derivationPath: str, index: int, language: str) -> VmSafeDeriveKeyContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(mnemonic), dataclass_to_tuple(derivationPath), dataclass_to_tuple(index), dataclass_to_tuple(language))  # type: ignore
        return cast(VmSafeDeriveKeyContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeDeriveKeyContractFunction1(ContractFunction):
    """ContractFunction for the deriveKey method."""

    def __call__(self, mnemonic: str, index: int, language: str) -> VmSafeDeriveKeyContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(mnemonic), dataclass_to_tuple(index), dataclass_to_tuple(language))  # type: ignore
        return cast(VmSafeDeriveKeyContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeDeriveKeyContractFunction2(ContractFunction):
    """ContractFunction for the deriveKey method."""

    def __call__(self, mnemonic: str, index: int) -> VmSafeDeriveKeyContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(mnemonic), dataclass_to_tuple(index))  # type: ignore
        return cast(VmSafeDeriveKeyContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeDeriveKeyContractFunction3(ContractFunction):
    """ContractFunction for the deriveKey method."""

    def __call__(self, mnemonic: str, derivationPath: str, index: int) -> VmSafeDeriveKeyContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(mnemonic), dataclass_to_tuple(derivationPath), dataclass_to_tuple(index))  # type: ignore
        return cast(VmSafeDeriveKeyContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeDeriveKeyContractFunction(ContractFunction):
    """ContractFunction for the deriveKey method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, mnemonic: str, derivationPath: str, index: int, language: str) -> VmSafeDeriveKeyContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, mnemonic: str, index: int, language: str) -> VmSafeDeriveKeyContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, mnemonic: str, index: int) -> VmSafeDeriveKeyContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, mnemonic: str, derivationPath: str, index: int) -> VmSafeDeriveKeyContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeDeriveKeyContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeEnvAddressContractFunction0(ContractFunction):
    """ContractFunction for the envAddress method."""

    def __call__(self, name: str) -> VmSafeEnvAddressContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeEnvAddressContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvAddressContractFunction1(ContractFunction):
    """ContractFunction for the envAddress method."""

    def __call__(self, name: str, delim: str) -> VmSafeEnvAddressContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim))  # type: ignore
        return cast(VmSafeEnvAddressContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvAddressContractFunction(ContractFunction):
    """ContractFunction for the envAddress method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, name: str) -> VmSafeEnvAddressContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, delim: str) -> VmSafeEnvAddressContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeEnvAddressContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeEnvBoolContractFunction0(ContractFunction):
    """ContractFunction for the envBool method."""

    def __call__(self, name: str) -> VmSafeEnvBoolContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeEnvBoolContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvBoolContractFunction1(ContractFunction):
    """ContractFunction for the envBool method."""

    def __call__(self, name: str, delim: str) -> VmSafeEnvBoolContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim))  # type: ignore
        return cast(VmSafeEnvBoolContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bool]:
        """returns list[bool]."""
        # Define the expected return types from the smart contract call

        return_types = list[bool]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[bool], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvBoolContractFunction(ContractFunction):
    """ContractFunction for the envBool method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, name: str) -> VmSafeEnvBoolContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, delim: str) -> VmSafeEnvBoolContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeEnvBoolContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeEnvBytesContractFunction0(ContractFunction):
    """ContractFunction for the envBytes method."""

    def __call__(self, name: str) -> VmSafeEnvBytesContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeEnvBytesContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvBytesContractFunction1(ContractFunction):
    """ContractFunction for the envBytes method."""

    def __call__(self, name: str, delim: str) -> VmSafeEnvBytesContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim))  # type: ignore
        return cast(VmSafeEnvBytesContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bytes]:
        """returns list[bytes]."""
        # Define the expected return types from the smart contract call

        return_types = list[bytes]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[bytes],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeEnvBytesContractFunction(ContractFunction):
    """ContractFunction for the envBytes method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, name: str) -> VmSafeEnvBytesContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, delim: str) -> VmSafeEnvBytesContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeEnvBytesContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeEnvBytes32ContractFunction0(ContractFunction):
    """ContractFunction for the envBytes32 method."""

    def __call__(self, name: str, delim: str) -> VmSafeEnvBytes32ContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim))  # type: ignore
        return cast(VmSafeEnvBytes32ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bytes]:
        """returns list[bytes]."""
        # Define the expected return types from the smart contract call

        return_types = list[bytes]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[bytes],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeEnvBytes32ContractFunction1(ContractFunction):
    """ContractFunction for the envBytes32 method."""

    def __call__(self, name: str) -> VmSafeEnvBytes32ContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeEnvBytes32ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvBytes32ContractFunction(ContractFunction):
    """ContractFunction for the envBytes32 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, name: str, delim: str) -> VmSafeEnvBytes32ContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, name: str) -> VmSafeEnvBytes32ContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeEnvBytes32ContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeEnvIntContractFunction0(ContractFunction):
    """ContractFunction for the envInt method."""

    def __call__(self, name: str, delim: str) -> VmSafeEnvIntContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim))  # type: ignore
        return cast(VmSafeEnvIntContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[int]:
        """returns list[int]."""
        # Define the expected return types from the smart contract call

        return_types = list[int]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[int], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvIntContractFunction1(ContractFunction):
    """ContractFunction for the envInt method."""

    def __call__(self, name: str) -> VmSafeEnvIntContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeEnvIntContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvIntContractFunction(ContractFunction):
    """ContractFunction for the envInt method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, name: str, delim: str) -> VmSafeEnvIntContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, name: str) -> VmSafeEnvIntContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeEnvIntContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeEnvOrContractFunction0(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, delim: str, defaultValue: list[bytes]) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bytes]:
        """returns list[bytes]."""
        # Define the expected return types from the smart contract call

        return_types = list[bytes]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[bytes],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeEnvOrContractFunction1(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, delim: str, defaultValue: list[int]) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[int]:
        """returns list[int]."""
        # Define the expected return types from the smart contract call

        return_types = list[int]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[int], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction2(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, defaultValue: bool) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction3(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, defaultValue: str) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction4(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, defaultValue: int) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction5(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, delim: str, defaultValue: list[bytes]) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bytes]:
        """returns list[bytes]."""
        # Define the expected return types from the smart contract call

        return_types = list[bytes]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[bytes],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeEnvOrContractFunction6(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, delim: str, defaultValue: list[int]) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[int]:
        """returns list[int]."""
        # Define the expected return types from the smart contract call

        return_types = list[int]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[int], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction7(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, delim: str, defaultValue: list[str]) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction8(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, defaultValue: bytes) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction9(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, defaultValue: bytes) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction10(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, defaultValue: int) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction11(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, delim: str, defaultValue: list[str]) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction12(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, defaultValue: str) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction13(ContractFunction):
    """ContractFunction for the envOr method."""

    def __call__(self, name: str, delim: str, defaultValue: list[bool]) -> VmSafeEnvOrContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim), dataclass_to_tuple(defaultValue))  # type: ignore
        return cast(VmSafeEnvOrContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bool]:
        """returns list[bool]."""
        # Define the expected return types from the smart contract call

        return_types = list[bool]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[bool], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvOrContractFunction(ContractFunction):
    """ContractFunction for the envOr method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, name: str, delim: str, defaultValue: list[bytes]) -> VmSafeEnvOrContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, delim: str, defaultValue: list[int]) -> VmSafeEnvOrContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, defaultValue: bool) -> VmSafeEnvOrContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, defaultValue: str) -> VmSafeEnvOrContractFunction3:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, defaultValue: int) -> VmSafeEnvOrContractFunction4:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, delim: str, defaultValue: list[bytes]) -> VmSafeEnvOrContractFunction5:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, delim: str, defaultValue: list[int]) -> VmSafeEnvOrContractFunction6:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, delim: str, defaultValue: list[str]) -> VmSafeEnvOrContractFunction7:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, defaultValue: bytes) -> VmSafeEnvOrContractFunction8:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, defaultValue: bytes) -> VmSafeEnvOrContractFunction9:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, defaultValue: int) -> VmSafeEnvOrContractFunction10:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, delim: str, defaultValue: list[str]) -> VmSafeEnvOrContractFunction11:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, defaultValue: str) -> VmSafeEnvOrContractFunction12:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, delim: str, defaultValue: list[bool]) -> VmSafeEnvOrContractFunction13:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeEnvOrContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeEnvStringContractFunction0(ContractFunction):
    """ContractFunction for the envString method."""

    def __call__(self, name: str, delim: str) -> VmSafeEnvStringContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim))  # type: ignore
        return cast(VmSafeEnvStringContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvStringContractFunction1(ContractFunction):
    """ContractFunction for the envString method."""

    def __call__(self, name: str) -> VmSafeEnvStringContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeEnvStringContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvStringContractFunction(ContractFunction):
    """ContractFunction for the envString method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, name: str, delim: str) -> VmSafeEnvStringContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, name: str) -> VmSafeEnvStringContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeEnvStringContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeEnvUintContractFunction0(ContractFunction):
    """ContractFunction for the envUint method."""

    def __call__(self, name: str) -> VmSafeEnvUintContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeEnvUintContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvUintContractFunction1(ContractFunction):
    """ContractFunction for the envUint method."""

    def __call__(self, name: str, delim: str) -> VmSafeEnvUintContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(name), dataclass_to_tuple(delim))  # type: ignore
        return cast(VmSafeEnvUintContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[int]:
        """returns list[int]."""
        # Define the expected return types from the smart contract call

        return_types = list[int]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[int], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeEnvUintContractFunction(ContractFunction):
    """ContractFunction for the envUint method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, name: str) -> VmSafeEnvUintContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, name: str, delim: str) -> VmSafeEnvUintContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeEnvUintContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeEth_getLogsContractFunction(ContractFunction):
    """ContractFunction for the eth_getLogs method."""

    def __call__(self, fromBlock: int, toBlock: int, target: str, topics: list[bytes]) -> VmSafeEth_getLogsContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(fromBlock),
            dataclass_to_tuple(toBlock),
            dataclass_to_tuple(target),
            dataclass_to_tuple(topics),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[VmSafe.EthGetLogs]:
        """returns list[VmSafe.EthGetLogs]."""
        # Define the expected return types from the smart contract call

        return_types = list[VmSafe.EthGetLogs]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[VmSafe.EthGetLogs],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeExistsContractFunction(ContractFunction):
    """ContractFunction for the exists method."""

    def __call__(self, path: str) -> VmSafeExistsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(path))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeFfiContractFunction(ContractFunction):
    """ContractFunction for the ffi method."""

    def __call__(self, commandInput: list[str]) -> VmSafeFfiContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(commandInput))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeFsMetadataContractFunction(ContractFunction):
    """ContractFunction for the fsMetadata method."""

    def __call__(self, path: str) -> VmSafeFsMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(path))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> VmSafe.FsMetadata:
        """returns VmSafe.FsMetadata."""
        # Define the expected return types from the smart contract call

        return_types = VmSafe.FsMetadata

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            VmSafe.FsMetadata,
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeGetBlockNumberContractFunction(ContractFunction):
    """ContractFunction for the getBlockNumber method."""

    def __call__(self) -> VmSafeGetBlockNumberContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeGetBlockTimestampContractFunction(ContractFunction):
    """ContractFunction for the getBlockTimestamp method."""

    def __call__(self) -> VmSafeGetBlockTimestampContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeGetCodeContractFunction(ContractFunction):
    """ContractFunction for the getCode method."""

    def __call__(self, artifactPath: str) -> VmSafeGetCodeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(artifactPath))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeGetDeployedCodeContractFunction(ContractFunction):
    """ContractFunction for the getDeployedCode method."""

    def __call__(self, artifactPath: str) -> VmSafeGetDeployedCodeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(artifactPath))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeGetLabelContractFunction(ContractFunction):
    """ContractFunction for the getLabel method."""

    def __call__(self, account: str) -> VmSafeGetLabelContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(account))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeGetMappingKeyAndParentOfContractFunction(ContractFunction):
    """ContractFunction for the getMappingKeyAndParentOf method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for GetMappingKeyAndParentOf."""

        found: bool
        key: bytes
        parent: bytes

    def __call__(self, target: str, elementSlot: bytes) -> VmSafeGetMappingKeyAndParentOfContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(target), dataclass_to_tuple(elementSlot)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [bool, bytes, bytes]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeGetMappingLengthContractFunction(ContractFunction):
    """ContractFunction for the getMappingLength method."""

    def __call__(self, target: str, mappingSlot: bytes) -> VmSafeGetMappingLengthContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(target), dataclass_to_tuple(mappingSlot)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeGetMappingSlotAtContractFunction(ContractFunction):
    """ContractFunction for the getMappingSlotAt method."""

    def __call__(self, target: str, mappingSlot: bytes, idx: int) -> VmSafeGetMappingSlotAtContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(target),
            dataclass_to_tuple(mappingSlot),
            dataclass_to_tuple(idx),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeGetNonceContractFunction0(ContractFunction):
    """ContractFunction for the getNonce method."""

    def __call__(self, account: str) -> VmSafeGetNonceContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeGetNonceContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeGetNonceContractFunction1(ContractFunction):
    """ContractFunction for the getNonce method."""

    def __call__(self, wallet: VmSafe.Wallet) -> VmSafeGetNonceContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeGetNonceContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeGetNonceContractFunction(ContractFunction):
    """ContractFunction for the getNonce method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, account: str) -> VmSafeGetNonceContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, wallet: VmSafe.Wallet) -> VmSafeGetNonceContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeGetNonceContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeGetRecordedLogsContractFunction(ContractFunction):
    """ContractFunction for the getRecordedLogs method."""

    def __call__(self) -> VmSafeGetRecordedLogsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[VmSafe.Log]:
        """returns list[VmSafe.Log]."""
        # Define the expected return types from the smart contract call

        return_types = list[VmSafe.Log]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[VmSafe.Log],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeIsDirContractFunction(ContractFunction):
    """ContractFunction for the isDir method."""

    def __call__(self, path: str) -> VmSafeIsDirContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(path))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeIsFileContractFunction(ContractFunction):
    """ContractFunction for the isFile method."""

    def __call__(self, path: str) -> VmSafeIsFileContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(path))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeKeyExistsContractFunction(ContractFunction):
    """ContractFunction for the keyExists method."""

    def __call__(self, json: str, key: str) -> VmSafeKeyExistsContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeKeyExistsJsonContractFunction(ContractFunction):
    """ContractFunction for the keyExistsJson method."""

    def __call__(self, json: str, key: str) -> VmSafeKeyExistsJsonContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeKeyExistsTomlContractFunction(ContractFunction):
    """ContractFunction for the keyExistsToml method."""

    def __call__(self, toml: str, key: str) -> VmSafeKeyExistsTomlContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeLabelContractFunction(ContractFunction):
    """ContractFunction for the label method."""

    def __call__(self, account: str, newLabel: str) -> VmSafeLabelContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(account), dataclass_to_tuple(newLabel)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeLoadContractFunction(ContractFunction):
    """ContractFunction for the load method."""

    def __call__(self, target: str, slot: bytes) -> VmSafeLoadContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(target), dataclass_to_tuple(slot)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseAddressContractFunction(ContractFunction):
    """ContractFunction for the parseAddress method."""

    def __call__(self, stringifiedValue: str) -> VmSafeParseAddressContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(stringifiedValue))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseBoolContractFunction(ContractFunction):
    """ContractFunction for the parseBool method."""

    def __call__(self, stringifiedValue: str) -> VmSafeParseBoolContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(stringifiedValue))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseBytesContractFunction(ContractFunction):
    """ContractFunction for the parseBytes method."""

    def __call__(self, stringifiedValue: str) -> VmSafeParseBytesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(stringifiedValue))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseBytes32ContractFunction(ContractFunction):
    """ContractFunction for the parseBytes32 method."""

    def __call__(self, stringifiedValue: str) -> VmSafeParseBytes32ContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(stringifiedValue))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseIntContractFunction(ContractFunction):
    """ContractFunction for the parseInt method."""

    def __call__(self, stringifiedValue: str) -> VmSafeParseIntContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(stringifiedValue))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonContractFunction0(ContractFunction):
    """ContractFunction for the parseJson method."""

    def __call__(self, json: str) -> VmSafeParseJsonContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeParseJsonContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonContractFunction1(ContractFunction):
    """ContractFunction for the parseJson method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(json), dataclass_to_tuple(key))  # type: ignore
        return cast(VmSafeParseJsonContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonContractFunction(ContractFunction):
    """ContractFunction for the parseJson method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, json: str) -> VmSafeParseJsonContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, json: str, key: str) -> VmSafeParseJsonContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeParseJsonContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeParseJsonAddressContractFunction(ContractFunction):
    """ContractFunction for the parseJsonAddress method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonAddressContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonAddressArrayContractFunction(ContractFunction):
    """ContractFunction for the parseJsonAddressArray method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonAddressArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonBoolContractFunction(ContractFunction):
    """ContractFunction for the parseJsonBool method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonBoolContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonBoolArrayContractFunction(ContractFunction):
    """ContractFunction for the parseJsonBoolArray method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonBoolArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bool]:
        """returns list[bool]."""
        # Define the expected return types from the smart contract call

        return_types = list[bool]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[bool], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonBytesContractFunction(ContractFunction):
    """ContractFunction for the parseJsonBytes method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonBytesContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonBytes32ContractFunction(ContractFunction):
    """ContractFunction for the parseJsonBytes32 method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonBytes32ContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonBytes32ArrayContractFunction(ContractFunction):
    """ContractFunction for the parseJsonBytes32Array method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonBytes32ArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bytes]:
        """returns list[bytes]."""
        # Define the expected return types from the smart contract call

        return_types = list[bytes]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[bytes],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeParseJsonBytesArrayContractFunction(ContractFunction):
    """ContractFunction for the parseJsonBytesArray method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonBytesArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bytes]:
        """returns list[bytes]."""
        # Define the expected return types from the smart contract call

        return_types = list[bytes]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[bytes],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeParseJsonIntContractFunction(ContractFunction):
    """ContractFunction for the parseJsonInt method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonIntContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonIntArrayContractFunction(ContractFunction):
    """ContractFunction for the parseJsonIntArray method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonIntArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[int]:
        """returns list[int]."""
        # Define the expected return types from the smart contract call

        return_types = list[int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[int], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonKeysContractFunction(ContractFunction):
    """ContractFunction for the parseJsonKeys method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonKeysContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonStringContractFunction(ContractFunction):
    """ContractFunction for the parseJsonString method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonStringContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonStringArrayContractFunction(ContractFunction):
    """ContractFunction for the parseJsonStringArray method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonStringArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonUintContractFunction(ContractFunction):
    """ContractFunction for the parseJsonUint method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonUintContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseJsonUintArrayContractFunction(ContractFunction):
    """ContractFunction for the parseJsonUintArray method."""

    def __call__(self, json: str, key: str) -> VmSafeParseJsonUintArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(json), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[int]:
        """returns list[int]."""
        # Define the expected return types from the smart contract call

        return_types = list[int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[int], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlContractFunction0(ContractFunction):
    """ContractFunction for the parseToml method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(toml), dataclass_to_tuple(key))  # type: ignore
        return cast(VmSafeParseTomlContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlContractFunction1(ContractFunction):
    """ContractFunction for the parseToml method."""

    def __call__(self, toml: str) -> VmSafeParseTomlContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeParseTomlContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlContractFunction(ContractFunction):
    """ContractFunction for the parseToml method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, toml: str, key: str) -> VmSafeParseTomlContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, toml: str) -> VmSafeParseTomlContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeParseTomlContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeParseTomlAddressContractFunction(ContractFunction):
    """ContractFunction for the parseTomlAddress method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlAddressContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlAddressArrayContractFunction(ContractFunction):
    """ContractFunction for the parseTomlAddressArray method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlAddressArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlBoolContractFunction(ContractFunction):
    """ContractFunction for the parseTomlBool method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlBoolContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlBoolArrayContractFunction(ContractFunction):
    """ContractFunction for the parseTomlBoolArray method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlBoolArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bool]:
        """returns list[bool]."""
        # Define the expected return types from the smart contract call

        return_types = list[bool]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[bool], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlBytesContractFunction(ContractFunction):
    """ContractFunction for the parseTomlBytes method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlBytesContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlBytes32ContractFunction(ContractFunction):
    """ContractFunction for the parseTomlBytes32 method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlBytes32ContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlBytes32ArrayContractFunction(ContractFunction):
    """ContractFunction for the parseTomlBytes32Array method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlBytes32ArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bytes]:
        """returns list[bytes]."""
        # Define the expected return types from the smart contract call

        return_types = list[bytes]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[bytes],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeParseTomlBytesArrayContractFunction(ContractFunction):
    """ContractFunction for the parseTomlBytesArray method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlBytesArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bytes]:
        """returns list[bytes]."""
        # Define the expected return types from the smart contract call

        return_types = list[bytes]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[bytes],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeParseTomlIntContractFunction(ContractFunction):
    """ContractFunction for the parseTomlInt method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlIntContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlIntArrayContractFunction(ContractFunction):
    """ContractFunction for the parseTomlIntArray method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlIntArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[int]:
        """returns list[int]."""
        # Define the expected return types from the smart contract call

        return_types = list[int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[int], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlKeysContractFunction(ContractFunction):
    """ContractFunction for the parseTomlKeys method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlKeysContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlStringContractFunction(ContractFunction):
    """ContractFunction for the parseTomlString method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlStringContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlStringArrayContractFunction(ContractFunction):
    """ContractFunction for the parseTomlStringArray method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlStringArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlUintContractFunction(ContractFunction):
    """ContractFunction for the parseTomlUint method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlUintContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseTomlUintArrayContractFunction(ContractFunction):
    """ContractFunction for the parseTomlUintArray method."""

    def __call__(self, toml: str, key: str) -> VmSafeParseTomlUintArrayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(toml), dataclass_to_tuple(key)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[int]:
        """returns list[int]."""
        # Define the expected return types from the smart contract call

        return_types = list[int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[int], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeParseUintContractFunction(ContractFunction):
    """ContractFunction for the parseUint method."""

    def __call__(self, stringifiedValue: str) -> VmSafeParseUintContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(stringifiedValue))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafePauseGasMeteringContractFunction(ContractFunction):
    """ContractFunction for the pauseGasMetering method."""

    def __call__(self) -> VmSafePauseGasMeteringContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeProjectRootContractFunction(ContractFunction):
    """ContractFunction for the projectRoot method."""

    def __call__(self) -> VmSafeProjectRootContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeReadDirContractFunction0(ContractFunction):
    """ContractFunction for the readDir method."""

    def __call__(self, path: str, maxDepth: int) -> VmSafeReadDirContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(path), dataclass_to_tuple(maxDepth))  # type: ignore
        return cast(VmSafeReadDirContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[VmSafe.DirEntry]:
        """returns list[VmSafe.DirEntry]."""
        # Define the expected return types from the smart contract call

        return_types = list[VmSafe.DirEntry]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[VmSafe.DirEntry],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeReadDirContractFunction1(ContractFunction):
    """ContractFunction for the readDir method."""

    def __call__(self, path: str, maxDepth: int, followLinks: bool) -> VmSafeReadDirContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(path), dataclass_to_tuple(maxDepth), dataclass_to_tuple(followLinks))  # type: ignore
        return cast(VmSafeReadDirContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[VmSafe.DirEntry]:
        """returns list[VmSafe.DirEntry]."""
        # Define the expected return types from the smart contract call

        return_types = list[VmSafe.DirEntry]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[VmSafe.DirEntry],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeReadDirContractFunction2(ContractFunction):
    """ContractFunction for the readDir method."""

    def __call__(self, path: str) -> VmSafeReadDirContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeReadDirContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[VmSafe.DirEntry]:
        """returns list[VmSafe.DirEntry]."""
        # Define the expected return types from the smart contract call

        return_types = list[VmSafe.DirEntry]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[VmSafe.DirEntry],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeReadDirContractFunction(ContractFunction):
    """ContractFunction for the readDir method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, path: str, maxDepth: int) -> VmSafeReadDirContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, path: str, maxDepth: int, followLinks: bool) -> VmSafeReadDirContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, path: str) -> VmSafeReadDirContractFunction2:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeReadDirContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeReadFileContractFunction(ContractFunction):
    """ContractFunction for the readFile method."""

    def __call__(self, path: str) -> VmSafeReadFileContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(path))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeReadFileBinaryContractFunction(ContractFunction):
    """ContractFunction for the readFileBinary method."""

    def __call__(self, path: str) -> VmSafeReadFileBinaryContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(path))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeReadLineContractFunction(ContractFunction):
    """ContractFunction for the readLine method."""

    def __call__(self, path: str) -> VmSafeReadLineContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(path))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeReadLinkContractFunction(ContractFunction):
    """ContractFunction for the readLink method."""

    def __call__(self, linkPath: str) -> VmSafeReadLinkContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkPath))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeRecordContractFunction(ContractFunction):
    """ContractFunction for the record method."""

    def __call__(self) -> VmSafeRecordContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeRecordLogsContractFunction(ContractFunction):
    """ContractFunction for the recordLogs method."""

    def __call__(self) -> VmSafeRecordLogsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeRememberKeyContractFunction(ContractFunction):
    """ContractFunction for the rememberKey method."""

    def __call__(self, privateKey: int) -> VmSafeRememberKeyContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(privateKey))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeRemoveDirContractFunction(ContractFunction):
    """ContractFunction for the removeDir method."""

    def __call__(self, path: str, recursive: bool) -> VmSafeRemoveDirContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(path), dataclass_to_tuple(recursive)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeRemoveFileContractFunction(ContractFunction):
    """ContractFunction for the removeFile method."""

    def __call__(self, path: str) -> VmSafeRemoveFileContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(path))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeReplaceContractFunction(ContractFunction):
    """ContractFunction for the replace method."""

    def __call__(self, _input: str, _from: str, to: str) -> VmSafeReplaceContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(_input),
            dataclass_to_tuple(_from),
            dataclass_to_tuple(to),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeResumeGasMeteringContractFunction(ContractFunction):
    """ContractFunction for the resumeGasMetering method."""

    def __call__(self) -> VmSafeResumeGasMeteringContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeRpcContractFunction(ContractFunction):
    """ContractFunction for the rpc method."""

    def __call__(self, method: str, params: str) -> VmSafeRpcContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(method), dataclass_to_tuple(params)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeRpcUrlContractFunction(ContractFunction):
    """ContractFunction for the rpcUrl method."""

    def __call__(self, rpcAlias: str) -> VmSafeRpcUrlContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(rpcAlias))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeRpcUrlStructsContractFunction(ContractFunction):
    """ContractFunction for the rpcUrlStructs method."""

    def __call__(self) -> VmSafeRpcUrlStructsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[VmSafe.Rpc]:
        """returns list[VmSafe.Rpc]."""
        # Define the expected return types from the smart contract call

        return_types = list[VmSafe.Rpc]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[VmSafe.Rpc],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeRpcUrlsContractFunction(ContractFunction):
    """ContractFunction for the rpcUrls method."""

    def __call__(self) -> VmSafeRpcUrlsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[list[str]]:
        """returns list[list[str]]."""
        # Define the expected return types from the smart contract call

        return_types = list[list[str]]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[list[str]],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeSerializeAddressContractFunction0(ContractFunction):
    """ContractFunction for the serializeAddress method."""

    def __call__(self, objectKey: str, valueKey: str, values: list[str]) -> VmSafeSerializeAddressContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(values))  # type: ignore
        return cast(VmSafeSerializeAddressContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeAddressContractFunction1(ContractFunction):
    """ContractFunction for the serializeAddress method."""

    def __call__(self, objectKey: str, valueKey: str, value: str) -> VmSafeSerializeAddressContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(value))  # type: ignore
        return cast(VmSafeSerializeAddressContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeAddressContractFunction(ContractFunction):
    """ContractFunction for the serializeAddress method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, objectKey: str, valueKey: str, values: list[str]) -> VmSafeSerializeAddressContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, objectKey: str, valueKey: str, value: str) -> VmSafeSerializeAddressContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeSerializeAddressContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeSerializeBoolContractFunction0(ContractFunction):
    """ContractFunction for the serializeBool method."""

    def __call__(self, objectKey: str, valueKey: str, values: list[bool]) -> VmSafeSerializeBoolContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(values))  # type: ignore
        return cast(VmSafeSerializeBoolContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeBoolContractFunction1(ContractFunction):
    """ContractFunction for the serializeBool method."""

    def __call__(self, objectKey: str, valueKey: str, value: bool) -> VmSafeSerializeBoolContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(value))  # type: ignore
        return cast(VmSafeSerializeBoolContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeBoolContractFunction(ContractFunction):
    """ContractFunction for the serializeBool method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, objectKey: str, valueKey: str, values: list[bool]) -> VmSafeSerializeBoolContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, objectKey: str, valueKey: str, value: bool) -> VmSafeSerializeBoolContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeSerializeBoolContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeSerializeBytesContractFunction0(ContractFunction):
    """ContractFunction for the serializeBytes method."""

    def __call__(self, objectKey: str, valueKey: str, values: list[bytes]) -> VmSafeSerializeBytesContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(values))  # type: ignore
        return cast(VmSafeSerializeBytesContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeBytesContractFunction1(ContractFunction):
    """ContractFunction for the serializeBytes method."""

    def __call__(self, objectKey: str, valueKey: str, value: bytes) -> VmSafeSerializeBytesContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(value))  # type: ignore
        return cast(VmSafeSerializeBytesContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeBytesContractFunction(ContractFunction):
    """ContractFunction for the serializeBytes method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, objectKey: str, valueKey: str, values: list[bytes]) -> VmSafeSerializeBytesContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, objectKey: str, valueKey: str, value: bytes) -> VmSafeSerializeBytesContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeSerializeBytesContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeSerializeBytes32ContractFunction0(ContractFunction):
    """ContractFunction for the serializeBytes32 method."""

    def __call__(self, objectKey: str, valueKey: str, values: list[bytes]) -> VmSafeSerializeBytes32ContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(values))  # type: ignore
        return cast(VmSafeSerializeBytes32ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeBytes32ContractFunction1(ContractFunction):
    """ContractFunction for the serializeBytes32 method."""

    def __call__(self, objectKey: str, valueKey: str, value: bytes) -> VmSafeSerializeBytes32ContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(value))  # type: ignore
        return cast(VmSafeSerializeBytes32ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeBytes32ContractFunction(ContractFunction):
    """ContractFunction for the serializeBytes32 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, objectKey: str, valueKey: str, values: list[bytes]) -> VmSafeSerializeBytes32ContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, objectKey: str, valueKey: str, value: bytes) -> VmSafeSerializeBytes32ContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeSerializeBytes32ContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeSerializeIntContractFunction0(ContractFunction):
    """ContractFunction for the serializeInt method."""

    def __call__(self, objectKey: str, valueKey: str, value: int) -> VmSafeSerializeIntContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(value))  # type: ignore
        return cast(VmSafeSerializeIntContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeIntContractFunction1(ContractFunction):
    """ContractFunction for the serializeInt method."""

    def __call__(self, objectKey: str, valueKey: str, values: list[int]) -> VmSafeSerializeIntContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(values))  # type: ignore
        return cast(VmSafeSerializeIntContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeIntContractFunction(ContractFunction):
    """ContractFunction for the serializeInt method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, objectKey: str, valueKey: str, value: int) -> VmSafeSerializeIntContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, objectKey: str, valueKey: str, values: list[int]) -> VmSafeSerializeIntContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeSerializeIntContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeSerializeJsonContractFunction(ContractFunction):
    """ContractFunction for the serializeJson method."""

    def __call__(self, objectKey: str, value: str) -> VmSafeSerializeJsonContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(objectKey), dataclass_to_tuple(value)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeStringContractFunction0(ContractFunction):
    """ContractFunction for the serializeString method."""

    def __call__(self, objectKey: str, valueKey: str, values: list[str]) -> VmSafeSerializeStringContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(values))  # type: ignore
        return cast(VmSafeSerializeStringContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeStringContractFunction1(ContractFunction):
    """ContractFunction for the serializeString method."""

    def __call__(self, objectKey: str, valueKey: str, value: str) -> VmSafeSerializeStringContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(value))  # type: ignore
        return cast(VmSafeSerializeStringContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeStringContractFunction(ContractFunction):
    """ContractFunction for the serializeString method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, objectKey: str, valueKey: str, values: list[str]) -> VmSafeSerializeStringContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, objectKey: str, valueKey: str, value: str) -> VmSafeSerializeStringContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeSerializeStringContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeSerializeUintContractFunction0(ContractFunction):
    """ContractFunction for the serializeUint method."""

    def __call__(self, objectKey: str, valueKey: str, value: int) -> VmSafeSerializeUintContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(value))  # type: ignore
        return cast(VmSafeSerializeUintContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeUintContractFunction1(ContractFunction):
    """ContractFunction for the serializeUint method."""

    def __call__(self, objectKey: str, valueKey: str, values: list[int]) -> VmSafeSerializeUintContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(objectKey), dataclass_to_tuple(valueKey), dataclass_to_tuple(values))  # type: ignore
        return cast(VmSafeSerializeUintContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSerializeUintContractFunction(ContractFunction):
    """ContractFunction for the serializeUint method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, objectKey: str, valueKey: str, value: int) -> VmSafeSerializeUintContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, objectKey: str, valueKey: str, values: list[int]) -> VmSafeSerializeUintContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeSerializeUintContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeSetEnvContractFunction(ContractFunction):
    """ContractFunction for the setEnv method."""

    def __call__(self, name: str, value: str) -> VmSafeSetEnvContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(name), dataclass_to_tuple(value)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeSignContractFunction0(ContractFunction):
    """ContractFunction for the sign method."""

    def __call__(self, wallet: VmSafe.Wallet, digest: bytes) -> VmSafeSignContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(wallet), dataclass_to_tuple(digest))  # type: ignore
        return cast(VmSafeSignContractFunction, self)

    class ReturnValues(NamedTuple):
        """The return named tuple for Sign."""

        v: int
        r: bytes
        s: bytes

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, bytes, bytes]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSignContractFunction1(ContractFunction):
    """ContractFunction for the sign method."""

    def __call__(self, privateKey: int, digest: bytes) -> VmSafeSignContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(privateKey), dataclass_to_tuple(digest))  # type: ignore
        return cast(VmSafeSignContractFunction, self)

    class ReturnValues(NamedTuple):
        """The return named tuple for Sign."""

        v: int
        r: bytes
        s: bytes

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, bytes, bytes]

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSignContractFunction(ContractFunction):
    """ContractFunction for the sign method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, wallet: VmSafe.Wallet, digest: bytes) -> VmSafeSignContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, privateKey: int, digest: bytes) -> VmSafeSignContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeSignContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeSignP256ContractFunction(ContractFunction):
    """ContractFunction for the signP256 method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for SignP256."""

        r: bytes
        s: bytes

    def __call__(self, privateKey: int, digest: bytes) -> VmSafeSignP256ContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(privateKey), dataclass_to_tuple(digest)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [bytes, bytes]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeSleepContractFunction(ContractFunction):
    """ContractFunction for the sleep method."""

    def __call__(self, duration: int) -> VmSafeSleepContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(duration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeSplitContractFunction(ContractFunction):
    """ContractFunction for the split method."""

    def __call__(self, _input: str, delimiter: str) -> VmSafeSplitContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(_input), dataclass_to_tuple(delimiter)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeStartBroadcastContractFunction0(ContractFunction):
    """ContractFunction for the startBroadcast method."""

    def __call__(self) -> VmSafeStartBroadcastContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeStartBroadcastContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeStartBroadcastContractFunction1(ContractFunction):
    """ContractFunction for the startBroadcast method."""

    def __call__(self, signer: str) -> VmSafeStartBroadcastContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeStartBroadcastContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeStartBroadcastContractFunction2(ContractFunction):
    """ContractFunction for the startBroadcast method."""

    def __call__(self, privateKey: int) -> VmSafeStartBroadcastContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeStartBroadcastContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeStartBroadcastContractFunction(ContractFunction):
    """ContractFunction for the startBroadcast method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self) -> VmSafeStartBroadcastContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, signer: str) -> VmSafeStartBroadcastContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, privateKey: int) -> VmSafeStartBroadcastContractFunction2:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeStartBroadcastContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeStartMappingRecordingContractFunction(ContractFunction):
    """ContractFunction for the startMappingRecording method."""

    def __call__(self) -> VmSafeStartMappingRecordingContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeStartStateDiffRecordingContractFunction(ContractFunction):
    """ContractFunction for the startStateDiffRecording method."""

    def __call__(self) -> VmSafeStartStateDiffRecordingContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeStopAndReturnStateDiffContractFunction(ContractFunction):
    """ContractFunction for the stopAndReturnStateDiff method."""

    def __call__(self) -> VmSafeStopAndReturnStateDiffContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[VmSafe.AccountAccess]:
        """returns list[VmSafe.AccountAccess]."""
        # Define the expected return types from the smart contract call

        return_types = list[VmSafe.AccountAccess]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[VmSafe.AccountAccess],
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeStopBroadcastContractFunction(ContractFunction):
    """ContractFunction for the stopBroadcast method."""

    def __call__(self) -> VmSafeStopBroadcastContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeStopMappingRecordingContractFunction(ContractFunction):
    """ContractFunction for the stopMappingRecording method."""

    def __call__(self) -> VmSafeStopMappingRecordingContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeToBase64ContractFunction0(ContractFunction):
    """ContractFunction for the toBase64 method."""

    def __call__(self, data: str) -> VmSafeToBase64ContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeToBase64ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToBase64ContractFunction1(ContractFunction):
    """ContractFunction for the toBase64 method."""

    def __call__(self, data: bytes) -> VmSafeToBase64ContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeToBase64ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToBase64ContractFunction(ContractFunction):
    """ContractFunction for the toBase64 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, data: str) -> VmSafeToBase64ContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, data: bytes) -> VmSafeToBase64ContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeToBase64ContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeToBase64URLContractFunction0(ContractFunction):
    """ContractFunction for the toBase64URL method."""

    def __call__(self, data: str) -> VmSafeToBase64URLContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeToBase64URLContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToBase64URLContractFunction1(ContractFunction):
    """ContractFunction for the toBase64URL method."""

    def __call__(self, data: bytes) -> VmSafeToBase64URLContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeToBase64URLContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToBase64URLContractFunction(ContractFunction):
    """ContractFunction for the toBase64URL method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, data: str) -> VmSafeToBase64URLContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, data: bytes) -> VmSafeToBase64URLContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeToBase64URLContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeToLowercaseContractFunction(ContractFunction):
    """ContractFunction for the toLowercase method."""

    def __call__(self, _input: str) -> VmSafeToLowercaseContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(_input))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToStringContractFunction0(ContractFunction):
    """ContractFunction for the toString method."""

    def __call__(self, value: str) -> VmSafeToStringContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeToStringContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToStringContractFunction1(ContractFunction):
    """ContractFunction for the toString method."""

    def __call__(self, value: int) -> VmSafeToStringContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeToStringContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToStringContractFunction2(ContractFunction):
    """ContractFunction for the toString method."""

    def __call__(self, value: bytes) -> VmSafeToStringContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeToStringContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToStringContractFunction3(ContractFunction):
    """ContractFunction for the toString method."""

    def __call__(self, value: bool) -> VmSafeToStringContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeToStringContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToStringContractFunction4(ContractFunction):
    """ContractFunction for the toString method."""

    def __call__(self, value: int) -> VmSafeToStringContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeToStringContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToStringContractFunction5(ContractFunction):
    """ContractFunction for the toString method."""

    def __call__(self, value: bytes) -> VmSafeToStringContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(VmSafeToStringContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeToStringContractFunction(ContractFunction):
    """ContractFunction for the toString method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, value: str) -> VmSafeToStringContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, value: int) -> VmSafeToStringContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, value: bytes) -> VmSafeToStringContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, value: bool) -> VmSafeToStringContractFunction3:  # type: ignore
        ...

    @overload
    def __call__(self, value: int) -> VmSafeToStringContractFunction4:  # type: ignore
        ...

    @overload
    def __call__(self, value: bytes) -> VmSafeToStringContractFunction5:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeToStringContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeToUppercaseContractFunction(ContractFunction):
    """ContractFunction for the toUppercase method."""

    def __call__(self, _input: str) -> VmSafeToUppercaseContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(_input))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeTrimContractFunction(ContractFunction):
    """ContractFunction for the trim method."""

    def __call__(self, _input: str) -> VmSafeTrimContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(_input))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeTryFfiContractFunction(ContractFunction):
    """ContractFunction for the tryFfi method."""

    def __call__(self, commandInput: list[str]) -> VmSafeTryFfiContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(commandInput))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> VmSafe.FfiResult:
        """returns VmSafe.FfiResult."""
        # Define the expected return types from the smart contract call

        return_types = VmSafe.FfiResult

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            VmSafe.FfiResult,
            rename_returned_types(structs, return_types, raw_values),
        )


class VmSafeUnixTimeContractFunction(ContractFunction):
    """ContractFunction for the unixTime method."""

    def __call__(self) -> VmSafeUnixTimeContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class VmSafeWriteFileContractFunction(ContractFunction):
    """ContractFunction for the writeFile method."""

    def __call__(self, path: str, data: str) -> VmSafeWriteFileContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(path), dataclass_to_tuple(data)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeWriteFileBinaryContractFunction(ContractFunction):
    """ContractFunction for the writeFileBinary method."""

    def __call__(self, path: str, data: bytes) -> VmSafeWriteFileBinaryContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(path), dataclass_to_tuple(data)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeWriteJsonContractFunction0(ContractFunction):
    """ContractFunction for the writeJson method."""

    def __call__(self, json: str, path: str, valueKey: str) -> VmSafeWriteJsonContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(json), dataclass_to_tuple(path), dataclass_to_tuple(valueKey))  # type: ignore
        return cast(VmSafeWriteJsonContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeWriteJsonContractFunction1(ContractFunction):
    """ContractFunction for the writeJson method."""

    def __call__(self, json: str, path: str) -> VmSafeWriteJsonContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(json), dataclass_to_tuple(path))  # type: ignore
        return cast(VmSafeWriteJsonContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeWriteJsonContractFunction(ContractFunction):
    """ContractFunction for the writeJson method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, json: str, path: str, valueKey: str) -> VmSafeWriteJsonContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, json: str, path: str) -> VmSafeWriteJsonContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeWriteJsonContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeWriteLineContractFunction(ContractFunction):
    """ContractFunction for the writeLine method."""

    def __call__(self, path: str, data: str) -> VmSafeWriteLineContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(path), dataclass_to_tuple(data)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class VmSafeWriteTomlContractFunction0(ContractFunction):
    """ContractFunction for the writeToml method."""

    def __call__(self, json: str, path: str, valueKey: str) -> VmSafeWriteTomlContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(json), dataclass_to_tuple(path), dataclass_to_tuple(valueKey))  # type: ignore
        return cast(VmSafeWriteTomlContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeWriteTomlContractFunction1(ContractFunction):
    """ContractFunction for the writeToml method."""

    def __call__(self, json: str, path: str) -> VmSafeWriteTomlContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(json), dataclass_to_tuple(path))  # type: ignore
        return cast(VmSafeWriteTomlContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class VmSafeWriteTomlContractFunction(ContractFunction):
    """ContractFunction for the writeToml method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, json: str, path: str, valueKey: str) -> VmSafeWriteTomlContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, json: str, path: str) -> VmSafeWriteTomlContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> VmSafeWriteTomlContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class VmSafeContractFunctions(ContractFunctions):
    """ContractFunctions for the VmSafe contract."""

    accesses: VmSafeAccessesContractFunction

    addr: VmSafeAddrContractFunction

    assertApproxEqAbs: VmSafeAssertApproxEqAbsContractFunction

    assertApproxEqAbsDecimal: VmSafeAssertApproxEqAbsDecimalContractFunction

    assertApproxEqRel: VmSafeAssertApproxEqRelContractFunction

    assertApproxEqRelDecimal: VmSafeAssertApproxEqRelDecimalContractFunction

    assertEq: VmSafeAssertEqContractFunction

    assertEqDecimal: VmSafeAssertEqDecimalContractFunction

    assertFalse: VmSafeAssertFalseContractFunction

    assertGe: VmSafeAssertGeContractFunction

    assertGeDecimal: VmSafeAssertGeDecimalContractFunction

    assertGt: VmSafeAssertGtContractFunction

    assertGtDecimal: VmSafeAssertGtDecimalContractFunction

    assertLe: VmSafeAssertLeContractFunction

    assertLeDecimal: VmSafeAssertLeDecimalContractFunction

    assertLt: VmSafeAssertLtContractFunction

    assertLtDecimal: VmSafeAssertLtDecimalContractFunction

    assertNotEq: VmSafeAssertNotEqContractFunction

    assertNotEqDecimal: VmSafeAssertNotEqDecimalContractFunction

    assertTrue: VmSafeAssertTrueContractFunction

    assume: VmSafeAssumeContractFunction

    breakpoint: VmSafeBreakpointContractFunction

    broadcast: VmSafeBroadcastContractFunction

    closeFile: VmSafeCloseFileContractFunction

    computeCreate2Address: VmSafeComputeCreate2AddressContractFunction

    computeCreateAddress: VmSafeComputeCreateAddressContractFunction

    copyFile: VmSafeCopyFileContractFunction

    createDir: VmSafeCreateDirContractFunction

    createWallet: VmSafeCreateWalletContractFunction

    deriveKey: VmSafeDeriveKeyContractFunction

    envAddress: VmSafeEnvAddressContractFunction

    envBool: VmSafeEnvBoolContractFunction

    envBytes: VmSafeEnvBytesContractFunction

    envBytes32: VmSafeEnvBytes32ContractFunction

    envInt: VmSafeEnvIntContractFunction

    envOr: VmSafeEnvOrContractFunction

    envString: VmSafeEnvStringContractFunction

    envUint: VmSafeEnvUintContractFunction

    eth_getLogs: VmSafeEth_getLogsContractFunction

    exists: VmSafeExistsContractFunction

    ffi: VmSafeFfiContractFunction

    fsMetadata: VmSafeFsMetadataContractFunction

    getBlockNumber: VmSafeGetBlockNumberContractFunction

    getBlockTimestamp: VmSafeGetBlockTimestampContractFunction

    getCode: VmSafeGetCodeContractFunction

    getDeployedCode: VmSafeGetDeployedCodeContractFunction

    getLabel: VmSafeGetLabelContractFunction

    getMappingKeyAndParentOf: VmSafeGetMappingKeyAndParentOfContractFunction

    getMappingLength: VmSafeGetMappingLengthContractFunction

    getMappingSlotAt: VmSafeGetMappingSlotAtContractFunction

    getNonce: VmSafeGetNonceContractFunction

    getRecordedLogs: VmSafeGetRecordedLogsContractFunction

    isDir: VmSafeIsDirContractFunction

    isFile: VmSafeIsFileContractFunction

    keyExists: VmSafeKeyExistsContractFunction

    keyExistsJson: VmSafeKeyExistsJsonContractFunction

    keyExistsToml: VmSafeKeyExistsTomlContractFunction

    label: VmSafeLabelContractFunction

    load: VmSafeLoadContractFunction

    parseAddress: VmSafeParseAddressContractFunction

    parseBool: VmSafeParseBoolContractFunction

    parseBytes: VmSafeParseBytesContractFunction

    parseBytes32: VmSafeParseBytes32ContractFunction

    parseInt: VmSafeParseIntContractFunction

    parseJson: VmSafeParseJsonContractFunction

    parseJsonAddress: VmSafeParseJsonAddressContractFunction

    parseJsonAddressArray: VmSafeParseJsonAddressArrayContractFunction

    parseJsonBool: VmSafeParseJsonBoolContractFunction

    parseJsonBoolArray: VmSafeParseJsonBoolArrayContractFunction

    parseJsonBytes: VmSafeParseJsonBytesContractFunction

    parseJsonBytes32: VmSafeParseJsonBytes32ContractFunction

    parseJsonBytes32Array: VmSafeParseJsonBytes32ArrayContractFunction

    parseJsonBytesArray: VmSafeParseJsonBytesArrayContractFunction

    parseJsonInt: VmSafeParseJsonIntContractFunction

    parseJsonIntArray: VmSafeParseJsonIntArrayContractFunction

    parseJsonKeys: VmSafeParseJsonKeysContractFunction

    parseJsonString: VmSafeParseJsonStringContractFunction

    parseJsonStringArray: VmSafeParseJsonStringArrayContractFunction

    parseJsonUint: VmSafeParseJsonUintContractFunction

    parseJsonUintArray: VmSafeParseJsonUintArrayContractFunction

    parseToml: VmSafeParseTomlContractFunction

    parseTomlAddress: VmSafeParseTomlAddressContractFunction

    parseTomlAddressArray: VmSafeParseTomlAddressArrayContractFunction

    parseTomlBool: VmSafeParseTomlBoolContractFunction

    parseTomlBoolArray: VmSafeParseTomlBoolArrayContractFunction

    parseTomlBytes: VmSafeParseTomlBytesContractFunction

    parseTomlBytes32: VmSafeParseTomlBytes32ContractFunction

    parseTomlBytes32Array: VmSafeParseTomlBytes32ArrayContractFunction

    parseTomlBytesArray: VmSafeParseTomlBytesArrayContractFunction

    parseTomlInt: VmSafeParseTomlIntContractFunction

    parseTomlIntArray: VmSafeParseTomlIntArrayContractFunction

    parseTomlKeys: VmSafeParseTomlKeysContractFunction

    parseTomlString: VmSafeParseTomlStringContractFunction

    parseTomlStringArray: VmSafeParseTomlStringArrayContractFunction

    parseTomlUint: VmSafeParseTomlUintContractFunction

    parseTomlUintArray: VmSafeParseTomlUintArrayContractFunction

    parseUint: VmSafeParseUintContractFunction

    pauseGasMetering: VmSafePauseGasMeteringContractFunction

    projectRoot: VmSafeProjectRootContractFunction

    readDir: VmSafeReadDirContractFunction

    readFile: VmSafeReadFileContractFunction

    readFileBinary: VmSafeReadFileBinaryContractFunction

    readLine: VmSafeReadLineContractFunction

    readLink: VmSafeReadLinkContractFunction

    record: VmSafeRecordContractFunction

    recordLogs: VmSafeRecordLogsContractFunction

    rememberKey: VmSafeRememberKeyContractFunction

    removeDir: VmSafeRemoveDirContractFunction

    removeFile: VmSafeRemoveFileContractFunction

    replace: VmSafeReplaceContractFunction

    resumeGasMetering: VmSafeResumeGasMeteringContractFunction

    rpc: VmSafeRpcContractFunction

    rpcUrl: VmSafeRpcUrlContractFunction

    rpcUrlStructs: VmSafeRpcUrlStructsContractFunction

    rpcUrls: VmSafeRpcUrlsContractFunction

    serializeAddress: VmSafeSerializeAddressContractFunction

    serializeBool: VmSafeSerializeBoolContractFunction

    serializeBytes: VmSafeSerializeBytesContractFunction

    serializeBytes32: VmSafeSerializeBytes32ContractFunction

    serializeInt: VmSafeSerializeIntContractFunction

    serializeJson: VmSafeSerializeJsonContractFunction

    serializeString: VmSafeSerializeStringContractFunction

    serializeUint: VmSafeSerializeUintContractFunction

    setEnv: VmSafeSetEnvContractFunction

    sign: VmSafeSignContractFunction

    signP256: VmSafeSignP256ContractFunction

    sleep: VmSafeSleepContractFunction

    split: VmSafeSplitContractFunction

    startBroadcast: VmSafeStartBroadcastContractFunction

    startMappingRecording: VmSafeStartMappingRecordingContractFunction

    startStateDiffRecording: VmSafeStartStateDiffRecordingContractFunction

    stopAndReturnStateDiff: VmSafeStopAndReturnStateDiffContractFunction

    stopBroadcast: VmSafeStopBroadcastContractFunction

    stopMappingRecording: VmSafeStopMappingRecordingContractFunction

    toBase64: VmSafeToBase64ContractFunction

    toBase64URL: VmSafeToBase64URLContractFunction

    toLowercase: VmSafeToLowercaseContractFunction

    toString: VmSafeToStringContractFunction

    toUppercase: VmSafeToUppercaseContractFunction

    trim: VmSafeTrimContractFunction

    tryFfi: VmSafeTryFfiContractFunction

    unixTime: VmSafeUnixTimeContractFunction

    writeFile: VmSafeWriteFileContractFunction

    writeFileBinary: VmSafeWriteFileBinaryContractFunction

    writeJson: VmSafeWriteJsonContractFunction

    writeLine: VmSafeWriteLineContractFunction

    writeToml: VmSafeWriteTomlContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.accesses = VmSafeAccessesContractFunction.factory(
            "accesses",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="accesses",
        )
        self.addr = VmSafeAddrContractFunction.factory(
            "addr",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="addr",
        )
        self.assertApproxEqAbs = (
            VmSafeAssertApproxEqAbsContractFunction.factory(
                "assertApproxEqAbs",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="assertApproxEqAbs",
            )
        )
        self.assertApproxEqAbsDecimal = (
            VmSafeAssertApproxEqAbsDecimalContractFunction.factory(
                "assertApproxEqAbsDecimal",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="assertApproxEqAbsDecimal",
            )
        )
        self.assertApproxEqRel = (
            VmSafeAssertApproxEqRelContractFunction.factory(
                "assertApproxEqRel",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="assertApproxEqRel",
            )
        )
        self.assertApproxEqRelDecimal = (
            VmSafeAssertApproxEqRelDecimalContractFunction.factory(
                "assertApproxEqRelDecimal",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="assertApproxEqRelDecimal",
            )
        )
        self.assertEq = VmSafeAssertEqContractFunction.factory(
            "assertEq",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertEq",
        )
        self.assertEqDecimal = VmSafeAssertEqDecimalContractFunction.factory(
            "assertEqDecimal",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertEqDecimal",
        )
        self.assertFalse = VmSafeAssertFalseContractFunction.factory(
            "assertFalse",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertFalse",
        )
        self.assertGe = VmSafeAssertGeContractFunction.factory(
            "assertGe",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertGe",
        )
        self.assertGeDecimal = VmSafeAssertGeDecimalContractFunction.factory(
            "assertGeDecimal",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertGeDecimal",
        )
        self.assertGt = VmSafeAssertGtContractFunction.factory(
            "assertGt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertGt",
        )
        self.assertGtDecimal = VmSafeAssertGtDecimalContractFunction.factory(
            "assertGtDecimal",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertGtDecimal",
        )
        self.assertLe = VmSafeAssertLeContractFunction.factory(
            "assertLe",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertLe",
        )
        self.assertLeDecimal = VmSafeAssertLeDecimalContractFunction.factory(
            "assertLeDecimal",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertLeDecimal",
        )
        self.assertLt = VmSafeAssertLtContractFunction.factory(
            "assertLt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertLt",
        )
        self.assertLtDecimal = VmSafeAssertLtDecimalContractFunction.factory(
            "assertLtDecimal",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertLtDecimal",
        )
        self.assertNotEq = VmSafeAssertNotEqContractFunction.factory(
            "assertNotEq",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertNotEq",
        )
        self.assertNotEqDecimal = (
            VmSafeAssertNotEqDecimalContractFunction.factory(
                "assertNotEqDecimal",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="assertNotEqDecimal",
            )
        )
        self.assertTrue = VmSafeAssertTrueContractFunction.factory(
            "assertTrue",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertTrue",
        )
        self.assume = VmSafeAssumeContractFunction.factory(
            "assume",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assume",
        )
        self.breakpoint = VmSafeBreakpointContractFunction.factory(
            "breakpoint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="breakpoint",
        )
        self.broadcast = VmSafeBroadcastContractFunction.factory(
            "broadcast",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="broadcast",
        )
        self.closeFile = VmSafeCloseFileContractFunction.factory(
            "closeFile",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="closeFile",
        )
        self.computeCreate2Address = (
            VmSafeComputeCreate2AddressContractFunction.factory(
                "computeCreate2Address",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="computeCreate2Address",
            )
        )
        self.computeCreateAddress = (
            VmSafeComputeCreateAddressContractFunction.factory(
                "computeCreateAddress",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="computeCreateAddress",
            )
        )
        self.copyFile = VmSafeCopyFileContractFunction.factory(
            "copyFile",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="copyFile",
        )
        self.createDir = VmSafeCreateDirContractFunction.factory(
            "createDir",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="createDir",
        )
        self.createWallet = VmSafeCreateWalletContractFunction.factory(
            "createWallet",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="createWallet",
        )
        self.deriveKey = VmSafeDeriveKeyContractFunction.factory(
            "deriveKey",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deriveKey",
        )
        self.envAddress = VmSafeEnvAddressContractFunction.factory(
            "envAddress",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="envAddress",
        )
        self.envBool = VmSafeEnvBoolContractFunction.factory(
            "envBool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="envBool",
        )
        self.envBytes = VmSafeEnvBytesContractFunction.factory(
            "envBytes",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="envBytes",
        )
        self.envBytes32 = VmSafeEnvBytes32ContractFunction.factory(
            "envBytes32",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="envBytes32",
        )
        self.envInt = VmSafeEnvIntContractFunction.factory(
            "envInt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="envInt",
        )
        self.envOr = VmSafeEnvOrContractFunction.factory(
            "envOr",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="envOr",
        )
        self.envString = VmSafeEnvStringContractFunction.factory(
            "envString",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="envString",
        )
        self.envUint = VmSafeEnvUintContractFunction.factory(
            "envUint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="envUint",
        )
        self.eth_getLogs = VmSafeEth_getLogsContractFunction.factory(
            "eth_getLogs",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="eth_getLogs",
        )
        self.exists = VmSafeExistsContractFunction.factory(
            "exists",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="exists",
        )
        self.ffi = VmSafeFfiContractFunction.factory(
            "ffi",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="ffi",
        )
        self.fsMetadata = VmSafeFsMetadataContractFunction.factory(
            "fsMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="fsMetadata",
        )
        self.getBlockNumber = VmSafeGetBlockNumberContractFunction.factory(
            "getBlockNumber",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getBlockNumber",
        )
        self.getBlockTimestamp = (
            VmSafeGetBlockTimestampContractFunction.factory(
                "getBlockTimestamp",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getBlockTimestamp",
            )
        )
        self.getCode = VmSafeGetCodeContractFunction.factory(
            "getCode",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getCode",
        )
        self.getDeployedCode = VmSafeGetDeployedCodeContractFunction.factory(
            "getDeployedCode",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getDeployedCode",
        )
        self.getLabel = VmSafeGetLabelContractFunction.factory(
            "getLabel",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getLabel",
        )
        self.getMappingKeyAndParentOf = (
            VmSafeGetMappingKeyAndParentOfContractFunction.factory(
                "getMappingKeyAndParentOf",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getMappingKeyAndParentOf",
            )
        )
        self.getMappingLength = VmSafeGetMappingLengthContractFunction.factory(
            "getMappingLength",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getMappingLength",
        )
        self.getMappingSlotAt = VmSafeGetMappingSlotAtContractFunction.factory(
            "getMappingSlotAt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getMappingSlotAt",
        )
        self.getNonce = VmSafeGetNonceContractFunction.factory(
            "getNonce",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getNonce",
        )
        self.getRecordedLogs = VmSafeGetRecordedLogsContractFunction.factory(
            "getRecordedLogs",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getRecordedLogs",
        )
        self.isDir = VmSafeIsDirContractFunction.factory(
            "isDir",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="isDir",
        )
        self.isFile = VmSafeIsFileContractFunction.factory(
            "isFile",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="isFile",
        )
        self.keyExists = VmSafeKeyExistsContractFunction.factory(
            "keyExists",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="keyExists",
        )
        self.keyExistsJson = VmSafeKeyExistsJsonContractFunction.factory(
            "keyExistsJson",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="keyExistsJson",
        )
        self.keyExistsToml = VmSafeKeyExistsTomlContractFunction.factory(
            "keyExistsToml",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="keyExistsToml",
        )
        self.label = VmSafeLabelContractFunction.factory(
            "label",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="label",
        )
        self.load = VmSafeLoadContractFunction.factory(
            "load",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="load",
        )
        self.parseAddress = VmSafeParseAddressContractFunction.factory(
            "parseAddress",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseAddress",
        )
        self.parseBool = VmSafeParseBoolContractFunction.factory(
            "parseBool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseBool",
        )
        self.parseBytes = VmSafeParseBytesContractFunction.factory(
            "parseBytes",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseBytes",
        )
        self.parseBytes32 = VmSafeParseBytes32ContractFunction.factory(
            "parseBytes32",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseBytes32",
        )
        self.parseInt = VmSafeParseIntContractFunction.factory(
            "parseInt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseInt",
        )
        self.parseJson = VmSafeParseJsonContractFunction.factory(
            "parseJson",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseJson",
        )
        self.parseJsonAddress = VmSafeParseJsonAddressContractFunction.factory(
            "parseJsonAddress",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseJsonAddress",
        )
        self.parseJsonAddressArray = (
            VmSafeParseJsonAddressArrayContractFunction.factory(
                "parseJsonAddressArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseJsonAddressArray",
            )
        )
        self.parseJsonBool = VmSafeParseJsonBoolContractFunction.factory(
            "parseJsonBool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseJsonBool",
        )
        self.parseJsonBoolArray = (
            VmSafeParseJsonBoolArrayContractFunction.factory(
                "parseJsonBoolArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseJsonBoolArray",
            )
        )
        self.parseJsonBytes = VmSafeParseJsonBytesContractFunction.factory(
            "parseJsonBytes",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseJsonBytes",
        )
        self.parseJsonBytes32 = VmSafeParseJsonBytes32ContractFunction.factory(
            "parseJsonBytes32",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseJsonBytes32",
        )
        self.parseJsonBytes32Array = (
            VmSafeParseJsonBytes32ArrayContractFunction.factory(
                "parseJsonBytes32Array",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseJsonBytes32Array",
            )
        )
        self.parseJsonBytesArray = (
            VmSafeParseJsonBytesArrayContractFunction.factory(
                "parseJsonBytesArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseJsonBytesArray",
            )
        )
        self.parseJsonInt = VmSafeParseJsonIntContractFunction.factory(
            "parseJsonInt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseJsonInt",
        )
        self.parseJsonIntArray = (
            VmSafeParseJsonIntArrayContractFunction.factory(
                "parseJsonIntArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseJsonIntArray",
            )
        )
        self.parseJsonKeys = VmSafeParseJsonKeysContractFunction.factory(
            "parseJsonKeys",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseJsonKeys",
        )
        self.parseJsonString = VmSafeParseJsonStringContractFunction.factory(
            "parseJsonString",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseJsonString",
        )
        self.parseJsonStringArray = (
            VmSafeParseJsonStringArrayContractFunction.factory(
                "parseJsonStringArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseJsonStringArray",
            )
        )
        self.parseJsonUint = VmSafeParseJsonUintContractFunction.factory(
            "parseJsonUint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseJsonUint",
        )
        self.parseJsonUintArray = (
            VmSafeParseJsonUintArrayContractFunction.factory(
                "parseJsonUintArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseJsonUintArray",
            )
        )
        self.parseToml = VmSafeParseTomlContractFunction.factory(
            "parseToml",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseToml",
        )
        self.parseTomlAddress = VmSafeParseTomlAddressContractFunction.factory(
            "parseTomlAddress",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseTomlAddress",
        )
        self.parseTomlAddressArray = (
            VmSafeParseTomlAddressArrayContractFunction.factory(
                "parseTomlAddressArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseTomlAddressArray",
            )
        )
        self.parseTomlBool = VmSafeParseTomlBoolContractFunction.factory(
            "parseTomlBool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseTomlBool",
        )
        self.parseTomlBoolArray = (
            VmSafeParseTomlBoolArrayContractFunction.factory(
                "parseTomlBoolArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseTomlBoolArray",
            )
        )
        self.parseTomlBytes = VmSafeParseTomlBytesContractFunction.factory(
            "parseTomlBytes",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseTomlBytes",
        )
        self.parseTomlBytes32 = VmSafeParseTomlBytes32ContractFunction.factory(
            "parseTomlBytes32",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseTomlBytes32",
        )
        self.parseTomlBytes32Array = (
            VmSafeParseTomlBytes32ArrayContractFunction.factory(
                "parseTomlBytes32Array",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseTomlBytes32Array",
            )
        )
        self.parseTomlBytesArray = (
            VmSafeParseTomlBytesArrayContractFunction.factory(
                "parseTomlBytesArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseTomlBytesArray",
            )
        )
        self.parseTomlInt = VmSafeParseTomlIntContractFunction.factory(
            "parseTomlInt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseTomlInt",
        )
        self.parseTomlIntArray = (
            VmSafeParseTomlIntArrayContractFunction.factory(
                "parseTomlIntArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseTomlIntArray",
            )
        )
        self.parseTomlKeys = VmSafeParseTomlKeysContractFunction.factory(
            "parseTomlKeys",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseTomlKeys",
        )
        self.parseTomlString = VmSafeParseTomlStringContractFunction.factory(
            "parseTomlString",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseTomlString",
        )
        self.parseTomlStringArray = (
            VmSafeParseTomlStringArrayContractFunction.factory(
                "parseTomlStringArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseTomlStringArray",
            )
        )
        self.parseTomlUint = VmSafeParseTomlUintContractFunction.factory(
            "parseTomlUint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseTomlUint",
        )
        self.parseTomlUintArray = (
            VmSafeParseTomlUintArrayContractFunction.factory(
                "parseTomlUintArray",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="parseTomlUintArray",
            )
        )
        self.parseUint = VmSafeParseUintContractFunction.factory(
            "parseUint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="parseUint",
        )
        self.pauseGasMetering = VmSafePauseGasMeteringContractFunction.factory(
            "pauseGasMetering",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="pauseGasMetering",
        )
        self.projectRoot = VmSafeProjectRootContractFunction.factory(
            "projectRoot",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="projectRoot",
        )
        self.readDir = VmSafeReadDirContractFunction.factory(
            "readDir",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="readDir",
        )
        self.readFile = VmSafeReadFileContractFunction.factory(
            "readFile",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="readFile",
        )
        self.readFileBinary = VmSafeReadFileBinaryContractFunction.factory(
            "readFileBinary",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="readFileBinary",
        )
        self.readLine = VmSafeReadLineContractFunction.factory(
            "readLine",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="readLine",
        )
        self.readLink = VmSafeReadLinkContractFunction.factory(
            "readLink",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="readLink",
        )
        self.record = VmSafeRecordContractFunction.factory(
            "record",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="record",
        )
        self.recordLogs = VmSafeRecordLogsContractFunction.factory(
            "recordLogs",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="recordLogs",
        )
        self.rememberKey = VmSafeRememberKeyContractFunction.factory(
            "rememberKey",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="rememberKey",
        )
        self.removeDir = VmSafeRemoveDirContractFunction.factory(
            "removeDir",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="removeDir",
        )
        self.removeFile = VmSafeRemoveFileContractFunction.factory(
            "removeFile",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="removeFile",
        )
        self.replace = VmSafeReplaceContractFunction.factory(
            "replace",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="replace",
        )
        self.resumeGasMetering = (
            VmSafeResumeGasMeteringContractFunction.factory(
                "resumeGasMetering",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="resumeGasMetering",
            )
        )
        self.rpc = VmSafeRpcContractFunction.factory(
            "rpc",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="rpc",
        )
        self.rpcUrl = VmSafeRpcUrlContractFunction.factory(
            "rpcUrl",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="rpcUrl",
        )
        self.rpcUrlStructs = VmSafeRpcUrlStructsContractFunction.factory(
            "rpcUrlStructs",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="rpcUrlStructs",
        )
        self.rpcUrls = VmSafeRpcUrlsContractFunction.factory(
            "rpcUrls",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="rpcUrls",
        )
        self.serializeAddress = VmSafeSerializeAddressContractFunction.factory(
            "serializeAddress",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="serializeAddress",
        )
        self.serializeBool = VmSafeSerializeBoolContractFunction.factory(
            "serializeBool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="serializeBool",
        )
        self.serializeBytes = VmSafeSerializeBytesContractFunction.factory(
            "serializeBytes",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="serializeBytes",
        )
        self.serializeBytes32 = VmSafeSerializeBytes32ContractFunction.factory(
            "serializeBytes32",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="serializeBytes32",
        )
        self.serializeInt = VmSafeSerializeIntContractFunction.factory(
            "serializeInt",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="serializeInt",
        )
        self.serializeJson = VmSafeSerializeJsonContractFunction.factory(
            "serializeJson",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="serializeJson",
        )
        self.serializeString = VmSafeSerializeStringContractFunction.factory(
            "serializeString",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="serializeString",
        )
        self.serializeUint = VmSafeSerializeUintContractFunction.factory(
            "serializeUint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="serializeUint",
        )
        self.setEnv = VmSafeSetEnvContractFunction.factory(
            "setEnv",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setEnv",
        )
        self.sign = VmSafeSignContractFunction.factory(
            "sign",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="sign",
        )
        self.signP256 = VmSafeSignP256ContractFunction.factory(
            "signP256",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="signP256",
        )
        self.sleep = VmSafeSleepContractFunction.factory(
            "sleep",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="sleep",
        )
        self.split = VmSafeSplitContractFunction.factory(
            "split",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="split",
        )
        self.startBroadcast = VmSafeStartBroadcastContractFunction.factory(
            "startBroadcast",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="startBroadcast",
        )
        self.startMappingRecording = (
            VmSafeStartMappingRecordingContractFunction.factory(
                "startMappingRecording",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="startMappingRecording",
            )
        )
        self.startStateDiffRecording = (
            VmSafeStartStateDiffRecordingContractFunction.factory(
                "startStateDiffRecording",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="startStateDiffRecording",
            )
        )
        self.stopAndReturnStateDiff = (
            VmSafeStopAndReturnStateDiffContractFunction.factory(
                "stopAndReturnStateDiff",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="stopAndReturnStateDiff",
            )
        )
        self.stopBroadcast = VmSafeStopBroadcastContractFunction.factory(
            "stopBroadcast",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="stopBroadcast",
        )
        self.stopMappingRecording = (
            VmSafeStopMappingRecordingContractFunction.factory(
                "stopMappingRecording",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="stopMappingRecording",
            )
        )
        self.toBase64 = VmSafeToBase64ContractFunction.factory(
            "toBase64",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toBase64",
        )
        self.toBase64URL = VmSafeToBase64URLContractFunction.factory(
            "toBase64URL",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toBase64URL",
        )
        self.toLowercase = VmSafeToLowercaseContractFunction.factory(
            "toLowercase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toLowercase",
        )
        self.toString = VmSafeToStringContractFunction.factory(
            "toString",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toString",
        )
        self.toUppercase = VmSafeToUppercaseContractFunction.factory(
            "toUppercase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toUppercase",
        )
        self.trim = VmSafeTrimContractFunction.factory(
            "trim",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="trim",
        )
        self.tryFfi = VmSafeTryFfiContractFunction.factory(
            "tryFfi",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="tryFfi",
        )
        self.unixTime = VmSafeUnixTimeContractFunction.factory(
            "unixTime",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="unixTime",
        )
        self.writeFile = VmSafeWriteFileContractFunction.factory(
            "writeFile",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="writeFile",
        )
        self.writeFileBinary = VmSafeWriteFileBinaryContractFunction.factory(
            "writeFileBinary",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="writeFileBinary",
        )
        self.writeJson = VmSafeWriteJsonContractFunction.factory(
            "writeJson",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="writeJson",
        )
        self.writeLine = VmSafeWriteLineContractFunction.factory(
            "writeLine",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="writeLine",
        )
        self.writeToml = VmSafeWriteTomlContractFunction.factory(
            "writeToml",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="writeToml",
        )


vmsafe_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "accesses",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
            "outputs": [
                {
                    "name": "readSlots",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
                {
                    "name": "writeSlots",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "addr",
            "inputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {
                    "name": "keyAddr",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqAbs",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "maxDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqAbs",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "maxDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqAbs",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "maxDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqAbs",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "maxDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqAbsDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "maxDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqAbsDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "maxDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqAbsDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "maxDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqAbsDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "maxDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqRel",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "maxPercentDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqRel",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "maxPercentDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqRel",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "maxPercentDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqRel",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "maxPercentDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqRelDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "maxPercentDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqRelDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "maxPercentDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqRelDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "maxPercentDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertApproxEqRelDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "maxPercentDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
                {
                    "name": "right",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "int256[]",
                    "internalType": "int256[]",
                },
                {
                    "name": "right",
                    "type": "int256[]",
                    "internalType": "int256[]",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "address", "internalType": "address"},
                {"name": "right", "type": "address", "internalType": "address"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "string", "internalType": "string"},
                {"name": "right", "type": "string", "internalType": "string"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {
                    "name": "right",
                    "type": "address[]",
                    "internalType": "address[]",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {
                    "name": "right",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "bool", "internalType": "bool"},
                {"name": "right", "type": "bool", "internalType": "bool"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "address", "internalType": "address"},
                {"name": "right", "type": "address", "internalType": "address"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
                {
                    "name": "right",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "bool[]", "internalType": "bool[]"},
                {"name": "right", "type": "bool[]", "internalType": "bool[]"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "int256[]",
                    "internalType": "int256[]",
                },
                {
                    "name": "right",
                    "type": "int256[]",
                    "internalType": "int256[]",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "bytes32", "internalType": "bytes32"},
                {"name": "right", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
                {
                    "name": "right",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "bytes", "internalType": "bytes"},
                {"name": "right", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "bytes32", "internalType": "bytes32"},
                {"name": "right", "type": "bytes32", "internalType": "bytes32"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "string[]",
                    "internalType": "string[]",
                },
                {
                    "name": "right",
                    "type": "string[]",
                    "internalType": "string[]",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
                {
                    "name": "right",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "bytes", "internalType": "bytes"},
                {"name": "right", "type": "bytes", "internalType": "bytes"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "bool[]", "internalType": "bool[]"},
                {"name": "right", "type": "bool[]", "internalType": "bool[]"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "bytes[]", "internalType": "bytes[]"},
                {"name": "right", "type": "bytes[]", "internalType": "bytes[]"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "string[]",
                    "internalType": "string[]",
                },
                {
                    "name": "right",
                    "type": "string[]",
                    "internalType": "string[]",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "string", "internalType": "string"},
                {"name": "right", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "bytes[]", "internalType": "bytes[]"},
                {"name": "right", "type": "bytes[]", "internalType": "bytes[]"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "bool", "internalType": "bool"},
                {"name": "right", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEq",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEqDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEqDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEqDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertEqDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertFalse",
            "inputs": [
                {"name": "condition", "type": "bool", "internalType": "bool"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertFalse",
            "inputs": [
                {"name": "condition", "type": "bool", "internalType": "bool"}
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGe",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGe",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGe",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGe",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGeDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGeDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGeDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGeDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGt",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGt",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGt",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGt",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGtDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGtDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGtDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertGtDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLe",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLe",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLe",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLe",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLeDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLeDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLeDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLeDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLt",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLt",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLt",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLt",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLtDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLtDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLtDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertLtDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
                {
                    "name": "right",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "int256[]",
                    "internalType": "int256[]",
                },
                {
                    "name": "right",
                    "type": "int256[]",
                    "internalType": "int256[]",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "bool", "internalType": "bool"},
                {"name": "right", "type": "bool", "internalType": "bool"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "bytes[]", "internalType": "bytes[]"},
                {"name": "right", "type": "bytes[]", "internalType": "bytes[]"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "bool", "internalType": "bool"},
                {"name": "right", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "bool[]", "internalType": "bool[]"},
                {"name": "right", "type": "bool[]", "internalType": "bool[]"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "bytes", "internalType": "bytes"},
                {"name": "right", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {
                    "name": "right",
                    "type": "address[]",
                    "internalType": "address[]",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
                {
                    "name": "right",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "bool[]", "internalType": "bool[]"},
                {"name": "right", "type": "bool[]", "internalType": "bool[]"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "string", "internalType": "string"},
                {"name": "right", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {
                    "name": "right",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "string", "internalType": "string"},
                {"name": "right", "type": "string", "internalType": "string"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "address", "internalType": "address"},
                {"name": "right", "type": "address", "internalType": "address"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "bytes32", "internalType": "bytes32"},
                {"name": "right", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "bytes", "internalType": "bytes"},
                {"name": "right", "type": "bytes", "internalType": "bytes"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
                {
                    "name": "right",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "address", "internalType": "address"},
                {"name": "right", "type": "address", "internalType": "address"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "bytes32", "internalType": "bytes32"},
                {"name": "right", "type": "bytes32", "internalType": "bytes32"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "string[]",
                    "internalType": "string[]",
                },
                {
                    "name": "right",
                    "type": "string[]",
                    "internalType": "string[]",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
                {
                    "name": "right",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "string[]",
                    "internalType": "string[]",
                },
                {
                    "name": "right",
                    "type": "string[]",
                    "internalType": "string[]",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {
                    "name": "left",
                    "type": "int256[]",
                    "internalType": "int256[]",
                },
                {
                    "name": "right",
                    "type": "int256[]",
                    "internalType": "int256[]",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "bytes[]", "internalType": "bytes[]"},
                {"name": "right", "type": "bytes[]", "internalType": "bytes[]"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEq",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEqDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEqDecimal",
            "inputs": [
                {"name": "left", "type": "int256", "internalType": "int256"},
                {"name": "right", "type": "int256", "internalType": "int256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEqDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertNotEqDecimal",
            "inputs": [
                {"name": "left", "type": "uint256", "internalType": "uint256"},
                {"name": "right", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertTrue",
            "inputs": [
                {"name": "condition", "type": "bool", "internalType": "bool"}
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assertTrue",
            "inputs": [
                {"name": "condition", "type": "bool", "internalType": "bool"},
                {"name": "error", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assume",
            "inputs": [
                {"name": "condition", "type": "bool", "internalType": "bool"}
            ],
            "outputs": [],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "breakpoint",
            "inputs": [
                {"name": "char", "type": "string", "internalType": "string"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "breakpoint",
            "inputs": [
                {"name": "char", "type": "string", "internalType": "string"},
                {"name": "value", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "broadcast",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "broadcast",
            "inputs": [
                {"name": "signer", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "broadcast",
            "inputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "closeFile",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "computeCreate2Address",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "initCodeHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "computeCreate2Address",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "initCodeHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "deployer",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "computeCreateAddress",
            "inputs": [
                {
                    "name": "deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "nonce", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "copyFile",
            "inputs": [
                {"name": "from", "type": "string", "internalType": "string"},
                {"name": "to", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "copied", "type": "uint64", "internalType": "uint64"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "createDir",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"},
                {"name": "recursive", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "createWallet",
            "inputs": [
                {
                    "name": "walletLabel",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "outputs": [
                {
                    "name": "wallet",
                    "type": "tuple",
                    "internalType": "struct VmSafe.Wallet",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "publicKeyX",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "publicKeyY",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "privateKey",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "createWallet",
            "inputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {
                    "name": "wallet",
                    "type": "tuple",
                    "internalType": "struct VmSafe.Wallet",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "publicKeyX",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "publicKeyY",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "privateKey",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "createWallet",
            "inputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "walletLabel",
                    "type": "string",
                    "internalType": "string",
                },
            ],
            "outputs": [
                {
                    "name": "wallet",
                    "type": "tuple",
                    "internalType": "struct VmSafe.Wallet",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "publicKeyX",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "publicKeyY",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "privateKey",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deriveKey",
            "inputs": [
                {
                    "name": "mnemonic",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "derivationPath",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "index", "type": "uint32", "internalType": "uint32"},
                {
                    "name": "language",
                    "type": "string",
                    "internalType": "string",
                },
            ],
            "outputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "deriveKey",
            "inputs": [
                {
                    "name": "mnemonic",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "index", "type": "uint32", "internalType": "uint32"},
                {
                    "name": "language",
                    "type": "string",
                    "internalType": "string",
                },
            ],
            "outputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "deriveKey",
            "inputs": [
                {
                    "name": "mnemonic",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "index", "type": "uint32", "internalType": "uint32"},
            ],
            "outputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "deriveKey",
            "inputs": [
                {
                    "name": "mnemonic",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "derivationPath",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "index", "type": "uint32", "internalType": "uint32"},
            ],
            "outputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "envAddress",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "value", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envAddress",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {
                    "name": "value",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envBool",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "value", "type": "bool", "internalType": "bool"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envBool",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "value", "type": "bool[]", "internalType": "bool[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envBytes",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "value", "type": "bytes", "internalType": "bytes"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envBytes",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "value", "type": "bytes[]", "internalType": "bytes[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envBytes32",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {
                    "name": "value",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envBytes32",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "value", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envInt",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {
                    "name": "value",
                    "type": "int256[]",
                    "internalType": "int256[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envInt",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "value", "type": "int256", "internalType": "int256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
            ],
            "outputs": [
                {
                    "name": "value",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "int256[]",
                    "internalType": "int256[]",
                },
            ],
            "outputs": [
                {
                    "name": "value",
                    "type": "int256[]",
                    "internalType": "int256[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "bool",
                    "internalType": "bool",
                },
            ],
            "outputs": [
                {"name": "value", "type": "bool", "internalType": "bool"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {"name": "value", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "value", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "bytes[]",
                    "internalType": "bytes[]",
                },
            ],
            "outputs": [
                {"name": "value", "type": "bytes[]", "internalType": "bytes[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
            ],
            "outputs": [
                {
                    "name": "value",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "string[]",
                    "internalType": "string[]",
                },
            ],
            "outputs": [
                {
                    "name": "value",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "bytes",
                    "internalType": "bytes",
                },
            ],
            "outputs": [
                {"name": "value", "type": "bytes", "internalType": "bytes"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [
                {"name": "value", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [
                {"name": "value", "type": "int256", "internalType": "int256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "address[]",
                    "internalType": "address[]",
                },
            ],
            "outputs": [
                {
                    "name": "value",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "string",
                    "internalType": "string",
                },
            ],
            "outputs": [
                {"name": "value", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envOr",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
                {
                    "name": "defaultValue",
                    "type": "bool[]",
                    "internalType": "bool[]",
                },
            ],
            "outputs": [
                {"name": "value", "type": "bool[]", "internalType": "bool[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envString",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {
                    "name": "value",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envString",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "value", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envUint",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "value", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "envUint",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "delim", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {
                    "name": "value",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "eth_getLogs",
            "inputs": [
                {
                    "name": "fromBlock",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "toBlock",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "target",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "topics",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
            ],
            "outputs": [
                {
                    "name": "logs",
                    "type": "tuple[]",
                    "internalType": "struct VmSafe.EthGetLogs[]",
                    "components": [
                        {
                            "name": "emitter",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "topics",
                            "type": "bytes32[]",
                            "internalType": "bytes32[]",
                        },
                        {
                            "name": "data",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "blockHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "blockNumber",
                            "type": "uint64",
                            "internalType": "uint64",
                        },
                        {
                            "name": "transactionHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "transactionIndex",
                            "type": "uint64",
                            "internalType": "uint64",
                        },
                        {
                            "name": "logIndex",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "removed",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "exists",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "result", "type": "bool", "internalType": "bool"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "ffi",
            "inputs": [
                {
                    "name": "commandInput",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "outputs": [
                {"name": "result", "type": "bytes", "internalType": "bytes"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "fsMetadata",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {
                    "name": "metadata",
                    "type": "tuple",
                    "internalType": "struct VmSafe.FsMetadata",
                    "components": [
                        {
                            "name": "isDir",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isSymlink",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "length",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "readOnly",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "modified",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "accessed",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "created",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getBlockNumber",
            "inputs": [],
            "outputs": [
                {"name": "height", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getBlockTimestamp",
            "inputs": [],
            "outputs": [
                {
                    "name": "timestamp",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getCode",
            "inputs": [
                {
                    "name": "artifactPath",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "outputs": [
                {
                    "name": "creationBytecode",
                    "type": "bytes",
                    "internalType": "bytes",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployedCode",
            "inputs": [
                {
                    "name": "artifactPath",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "outputs": [
                {
                    "name": "runtimeBytecode",
                    "type": "bytes",
                    "internalType": "bytes",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getLabel",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {
                    "name": "currentLabel",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getMappingKeyAndParentOf",
            "inputs": [
                {
                    "name": "target",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "elementSlot",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [
                {"name": "found", "type": "bool", "internalType": "bool"},
                {"name": "key", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "parent",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "getMappingLength",
            "inputs": [
                {
                    "name": "target",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "mappingSlot",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [
                {"name": "length", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "getMappingSlotAt",
            "inputs": [
                {
                    "name": "target",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "mappingSlot",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "idx", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "value", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "getNonce",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {"name": "nonce", "type": "uint64", "internalType": "uint64"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNonce",
            "inputs": [
                {
                    "name": "wallet",
                    "type": "tuple",
                    "internalType": "struct VmSafe.Wallet",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "publicKeyX",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "publicKeyY",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "privateKey",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "outputs": [
                {"name": "nonce", "type": "uint64", "internalType": "uint64"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "getRecordedLogs",
            "inputs": [],
            "outputs": [
                {
                    "name": "logs",
                    "type": "tuple[]",
                    "internalType": "struct VmSafe.Log[]",
                    "components": [
                        {
                            "name": "topics",
                            "type": "bytes32[]",
                            "internalType": "bytes32[]",
                        },
                        {
                            "name": "data",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "emitter",
                            "type": "address",
                            "internalType": "address",
                        },
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "isDir",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "result", "type": "bool", "internalType": "bool"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "isFile",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "result", "type": "bool", "internalType": "bool"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "keyExists",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "keyExistsJson",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "keyExistsToml",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "label",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "newLabel",
                    "type": "string",
                    "internalType": "string",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "load",
            "inputs": [
                {
                    "name": "target",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "slot", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "data", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "parseAddress",
            "inputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "outputs": [
                {
                    "name": "parsedValue",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseBool",
            "inputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "outputs": [
                {"name": "parsedValue", "type": "bool", "internalType": "bool"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseBytes",
            "inputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "outputs": [
                {
                    "name": "parsedValue",
                    "type": "bytes",
                    "internalType": "bytes",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseBytes32",
            "inputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "outputs": [
                {
                    "name": "parsedValue",
                    "type": "bytes32",
                    "internalType": "bytes32",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseInt",
            "inputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "outputs": [
                {
                    "name": "parsedValue",
                    "type": "int256",
                    "internalType": "int256",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJson",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {
                    "name": "abiEncodedData",
                    "type": "bytes",
                    "internalType": "bytes",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJson",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {
                    "name": "abiEncodedData",
                    "type": "bytes",
                    "internalType": "bytes",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonAddress",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonAddressArray",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "address[]", "internalType": "address[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonBool",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonBoolArray",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "bool[]", "internalType": "bool[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonBytes",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonBytes32",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonBytes32Array",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "bytes32[]", "internalType": "bytes32[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonBytesArray",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "bytes[]", "internalType": "bytes[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonInt",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "int256", "internalType": "int256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonIntArray",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "int256[]", "internalType": "int256[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonKeys",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "keys", "type": "string[]", "internalType": "string[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonString",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonStringArray",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "string[]", "internalType": "string[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonUint",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseJsonUintArray",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "uint256[]", "internalType": "uint256[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseToml",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {
                    "name": "abiEncodedData",
                    "type": "bytes",
                    "internalType": "bytes",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseToml",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {
                    "name": "abiEncodedData",
                    "type": "bytes",
                    "internalType": "bytes",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlAddress",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlAddressArray",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "address[]", "internalType": "address[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlBool",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlBoolArray",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "bool[]", "internalType": "bool[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlBytes",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlBytes32",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlBytes32Array",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "bytes32[]", "internalType": "bytes32[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlBytesArray",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "bytes[]", "internalType": "bytes[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlInt",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "int256", "internalType": "int256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlIntArray",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "int256[]", "internalType": "int256[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlKeys",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "keys", "type": "string[]", "internalType": "string[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlString",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlStringArray",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "string[]", "internalType": "string[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlUint",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseTomlUintArray",
            "inputs": [
                {"name": "toml", "type": "string", "internalType": "string"},
                {"name": "key", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "", "type": "uint256[]", "internalType": "uint256[]"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "parseUint",
            "inputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "outputs": [
                {
                    "name": "parsedValue",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "pauseGasMetering",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "projectRoot",
            "inputs": [],
            "outputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "readDir",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"},
                {
                    "name": "maxDepth",
                    "type": "uint64",
                    "internalType": "uint64",
                },
            ],
            "outputs": [
                {
                    "name": "entries",
                    "type": "tuple[]",
                    "internalType": "struct VmSafe.DirEntry[]",
                    "components": [
                        {
                            "name": "errorMessage",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "depth",
                            "type": "uint64",
                            "internalType": "uint64",
                        },
                        {
                            "name": "isDir",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isSymlink",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "readDir",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"},
                {
                    "name": "maxDepth",
                    "type": "uint64",
                    "internalType": "uint64",
                },
                {"name": "followLinks", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "entries",
                    "type": "tuple[]",
                    "internalType": "struct VmSafe.DirEntry[]",
                    "components": [
                        {
                            "name": "errorMessage",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "depth",
                            "type": "uint64",
                            "internalType": "uint64",
                        },
                        {
                            "name": "isDir",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isSymlink",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "readDir",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {
                    "name": "entries",
                    "type": "tuple[]",
                    "internalType": "struct VmSafe.DirEntry[]",
                    "components": [
                        {
                            "name": "errorMessage",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "depth",
                            "type": "uint64",
                            "internalType": "uint64",
                        },
                        {
                            "name": "isDir",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isSymlink",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "readFile",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "data", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "readFileBinary",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "data", "type": "bytes", "internalType": "bytes"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "readLine",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "line", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "readLink",
            "inputs": [
                {"name": "linkPath", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {
                    "name": "targetPath",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "record",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "recordLogs",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "rememberKey",
            "inputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {
                    "name": "keyAddr",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeDir",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"},
                {"name": "recursive", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeFile",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "replace",
            "inputs": [
                {"name": "input", "type": "string", "internalType": "string"},
                {"name": "from", "type": "string", "internalType": "string"},
                {"name": "to", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "output", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "resumeGasMetering",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "rpc",
            "inputs": [
                {"name": "method", "type": "string", "internalType": "string"},
                {"name": "params", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "data", "type": "bytes", "internalType": "bytes"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "rpcUrl",
            "inputs": [
                {"name": "rpcAlias", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "rpcUrlStructs",
            "inputs": [],
            "outputs": [
                {
                    "name": "urls",
                    "type": "tuple[]",
                    "internalType": "struct VmSafe.Rpc[]",
                    "components": [
                        {
                            "name": "key",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "internalType": "string",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "rpcUrls",
            "inputs": [],
            "outputs": [
                {
                    "name": "urls",
                    "type": "string[2][]",
                    "internalType": "string[2][]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "serializeAddress",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "values",
                    "type": "address[]",
                    "internalType": "address[]",
                },
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeAddress",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "value", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeBool",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "values", "type": "bool[]", "internalType": "bool[]"},
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeBool",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "value", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeBytes",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "values",
                    "type": "bytes[]",
                    "internalType": "bytes[]",
                },
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeBytes",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "value", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeBytes32",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "values",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                },
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeBytes32",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "value", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeInt",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "value", "type": "int256", "internalType": "int256"},
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeInt",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "values",
                    "type": "int256[]",
                    "internalType": "int256[]",
                },
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeJson",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "value", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeString",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "values",
                    "type": "string[]",
                    "internalType": "string[]",
                },
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeString",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "value", "type": "string", "internalType": "string"},
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeUint",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {"name": "value", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "serializeUint",
            "inputs": [
                {
                    "name": "objectKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
                {
                    "name": "values",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
            ],
            "outputs": [
                {"name": "json", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setEnv",
            "inputs": [
                {"name": "name", "type": "string", "internalType": "string"},
                {"name": "value", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "sign",
            "inputs": [
                {
                    "name": "wallet",
                    "type": "tuple",
                    "internalType": "struct VmSafe.Wallet",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "publicKeyX",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "publicKeyY",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "privateKey",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "digest",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [
                {"name": "v", "type": "uint8", "internalType": "uint8"},
                {"name": "r", "type": "bytes32", "internalType": "bytes32"},
                {"name": "s", "type": "bytes32", "internalType": "bytes32"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "sign",
            "inputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "digest",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [
                {"name": "v", "type": "uint8", "internalType": "uint8"},
                {"name": "r", "type": "bytes32", "internalType": "bytes32"},
                {"name": "s", "type": "bytes32", "internalType": "bytes32"},
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "signP256",
            "inputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "digest",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [
                {"name": "r", "type": "bytes32", "internalType": "bytes32"},
                {"name": "s", "type": "bytes32", "internalType": "bytes32"},
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "sleep",
            "inputs": [
                {
                    "name": "duration",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "split",
            "inputs": [
                {"name": "input", "type": "string", "internalType": "string"},
                {
                    "name": "delimiter",
                    "type": "string",
                    "internalType": "string",
                },
            ],
            "outputs": [
                {
                    "name": "outputs",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "startBroadcast",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "startBroadcast",
            "inputs": [
                {"name": "signer", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "startBroadcast",
            "inputs": [
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "startMappingRecording",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "startStateDiffRecording",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "stopAndReturnStateDiff",
            "inputs": [],
            "outputs": [
                {
                    "name": "accountAccesses",
                    "type": "tuple[]",
                    "internalType": "struct VmSafe.AccountAccess[]",
                    "components": [
                        {
                            "name": "chainInfo",
                            "type": "tuple",
                            "internalType": "struct VmSafe.ChainInfo",
                            "components": [
                                {
                                    "name": "forkId",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "chainId",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "kind",
                            "type": "uint8",
                            "internalType": "enum VmSafe.AccountAccessKind",
                        },
                        {
                            "name": "account",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "accessor",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "initialized",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "oldBalance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "newBalance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "deployedCode",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "value",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "data",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "reverted",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "storageAccesses",
                            "type": "tuple[]",
                            "internalType": "struct VmSafe.StorageAccess[]",
                            "components": [
                                {
                                    "name": "account",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "slot",
                                    "type": "bytes32",
                                    "internalType": "bytes32",
                                },
                                {
                                    "name": "isWrite",
                                    "type": "bool",
                                    "internalType": "bool",
                                },
                                {
                                    "name": "previousValue",
                                    "type": "bytes32",
                                    "internalType": "bytes32",
                                },
                                {
                                    "name": "newValue",
                                    "type": "bytes32",
                                    "internalType": "bytes32",
                                },
                                {
                                    "name": "reverted",
                                    "type": "bool",
                                    "internalType": "bool",
                                },
                            ],
                        },
                        {
                            "name": "depth",
                            "type": "uint64",
                            "internalType": "uint64",
                        },
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "stopBroadcast",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "stopMappingRecording",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "toBase64",
            "inputs": [
                {"name": "data", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toBase64",
            "inputs": [
                {"name": "data", "type": "bytes", "internalType": "bytes"}
            ],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toBase64URL",
            "inputs": [
                {"name": "data", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toBase64URL",
            "inputs": [
                {"name": "data", "type": "bytes", "internalType": "bytes"}
            ],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toLowercase",
            "inputs": [
                {"name": "input", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "output", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toString",
            "inputs": [
                {"name": "value", "type": "address", "internalType": "address"}
            ],
            "outputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toString",
            "inputs": [
                {"name": "value", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toString",
            "inputs": [
                {"name": "value", "type": "bytes", "internalType": "bytes"}
            ],
            "outputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toString",
            "inputs": [
                {"name": "value", "type": "bool", "internalType": "bool"}
            ],
            "outputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toString",
            "inputs": [
                {"name": "value", "type": "int256", "internalType": "int256"}
            ],
            "outputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toString",
            "inputs": [
                {"name": "value", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [
                {
                    "name": "stringifiedValue",
                    "type": "string",
                    "internalType": "string",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toUppercase",
            "inputs": [
                {"name": "input", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "output", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "trim",
            "inputs": [
                {"name": "input", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "output", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "tryFfi",
            "inputs": [
                {
                    "name": "commandInput",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "outputs": [
                {
                    "name": "result",
                    "type": "tuple",
                    "internalType": "struct VmSafe.FfiResult",
                    "components": [
                        {
                            "name": "exitCode",
                            "type": "int32",
                            "internalType": "int32",
                        },
                        {
                            "name": "stdout",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "stderr",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "unixTime",
            "inputs": [],
            "outputs": [
                {
                    "name": "milliseconds",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "writeFile",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"},
                {"name": "data", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "writeFileBinary",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "writeJson",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "path", "type": "string", "internalType": "string"},
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "writeJson",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "path", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "writeLine",
            "inputs": [
                {"name": "path", "type": "string", "internalType": "string"},
                {"name": "data", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "writeToml",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "path", "type": "string", "internalType": "string"},
                {
                    "name": "valueKey",
                    "type": "string",
                    "internalType": "string",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "writeToml",
            "inputs": [
                {"name": "json", "type": "string", "internalType": "string"},
                {"name": "path", "type": "string", "internalType": "string"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
    ],
)


class VmSafeContract(Contract):
    """A web3.py Contract class for the VmSafe contract."""

    abi: ABI = vmsafe_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = VmSafeContractFunctions(vmsafe_abi, self.w3, address)  # type: ignore

    functions: VmSafeContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = VmSafeContractFunctions(vmsafe_abi, w3, None)

        return contract
