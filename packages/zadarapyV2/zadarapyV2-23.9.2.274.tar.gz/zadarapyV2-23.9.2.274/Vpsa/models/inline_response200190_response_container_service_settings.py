# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200190ResponseContainerServiceSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'str',
        'container_network': 'str',
        'containers_running': 'str',
        'ports': 'InlineResponse200190ResponseContainerServiceSettingsPorts',
        'created_at': 'str',
        'modified_at': 'str',
        'images_repository': 'InlineResponse200190ResponseContainerServiceSettingsImagesRepository'
    }

    attribute_map = {
        'enabled': 'enabled',
        'container_network': 'container_network',
        'containers_running': 'containers_running',
        'ports': 'ports',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'images_repository': 'images_repository'
    }

    def __init__(self, enabled=None, container_network=None, containers_running=None, ports=None, created_at=None, modified_at=None, images_repository=None, _configuration=None):  # noqa: E501
        """InlineResponse200190ResponseContainerServiceSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled = None
        self._container_network = None
        self._containers_running = None
        self._ports = None
        self._created_at = None
        self._modified_at = None
        self._images_repository = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if container_network is not None:
            self.container_network = container_network
        if containers_running is not None:
            self.containers_running = containers_running
        if ports is not None:
            self.ports = ports
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if images_repository is not None:
            self.images_repository = images_repository

    @property
    def enabled(self):
        """Gets the enabled of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501


        :return: The enabled of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineResponse200190ResponseContainerServiceSettings.


        :param enabled: The enabled of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def container_network(self):
        """Gets the container_network of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501


        :return: The container_network of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :rtype: str
        """
        return self._container_network

    @container_network.setter
    def container_network(self, container_network):
        """Sets the container_network of this InlineResponse200190ResponseContainerServiceSettings.


        :param container_network: The container_network of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :type: str
        """

        self._container_network = container_network

    @property
    def containers_running(self):
        """Gets the containers_running of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501


        :return: The containers_running of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :rtype: str
        """
        return self._containers_running

    @containers_running.setter
    def containers_running(self, containers_running):
        """Sets the containers_running of this InlineResponse200190ResponseContainerServiceSettings.


        :param containers_running: The containers_running of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :type: str
        """

        self._containers_running = containers_running

    @property
    def ports(self):
        """Gets the ports of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501


        :return: The ports of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :rtype: InlineResponse200190ResponseContainerServiceSettingsPorts
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this InlineResponse200190ResponseContainerServiceSettings.


        :param ports: The ports of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :type: InlineResponse200190ResponseContainerServiceSettingsPorts
        """

        self._ports = ports

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501


        :return: The created_at of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200190ResponseContainerServiceSettings.


        :param created_at: The created_at of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501


        :return: The modified_at of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InlineResponse200190ResponseContainerServiceSettings.


        :param modified_at: The modified_at of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def images_repository(self):
        """Gets the images_repository of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501


        :return: The images_repository of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :rtype: InlineResponse200190ResponseContainerServiceSettingsImagesRepository
        """
        return self._images_repository

    @images_repository.setter
    def images_repository(self, images_repository):
        """Sets the images_repository of this InlineResponse200190ResponseContainerServiceSettings.


        :param images_repository: The images_repository of this InlineResponse200190ResponseContainerServiceSettings.  # noqa: E501
        :type: InlineResponse200190ResponseContainerServiceSettingsImagesRepository
        """

        self._images_repository = images_repository

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200190ResponseContainerServiceSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200190ResponseContainerServiceSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200190ResponseContainerServiceSettings):
            return True

        return self.to_dict() != other.to_dict()
