# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class ObsRestoreJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'mode': 'str',
        'obs_key': 'str',
        'status': 'str',
        'rpo': 'str',
        'avg_sync_rate_kb_sec': 'str',
        'cur_sync_rate_kb_sec': 'int',
        'total_capacity_mb': 'str',
        'already_restored_mb': 'int',
        'already_scanned_mb': 'int',
        'remaining_time_sec': 'int',
        'created_at': 'str',
        'modified_at': 'str',
        'src': 'ObsRestoreJobSrc',
        'dst': 'ObsRestoreJobDst'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'mode': 'mode',
        'obs_key': 'obs_key',
        'status': 'status',
        'rpo': 'rpo',
        'avg_sync_rate_kb_sec': 'avg_sync_rate_kb_sec',
        'cur_sync_rate_kb_sec': 'cur_sync_rate_kb_sec',
        'total_capacity_mb': 'total_capacity_mb',
        'already_restored_mb': 'already_restored_mb',
        'already_scanned_mb': 'already_scanned_mb',
        'remaining_time_sec': 'remaining_time_sec',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'src': 'src',
        'dst': 'dst'
    }

    def __init__(self, name=None, display_name=None, mode=None, obs_key=None, status=None, rpo=None, avg_sync_rate_kb_sec=None, cur_sync_rate_kb_sec=None, total_capacity_mb=None, already_restored_mb=None, already_scanned_mb=None, remaining_time_sec=None, created_at=None, modified_at=None, src=None, dst=None, _configuration=None):  # noqa: E501
        """ObsRestoreJob - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._mode = None
        self._obs_key = None
        self._status = None
        self._rpo = None
        self._avg_sync_rate_kb_sec = None
        self._cur_sync_rate_kb_sec = None
        self._total_capacity_mb = None
        self._already_restored_mb = None
        self._already_scanned_mb = None
        self._remaining_time_sec = None
        self._created_at = None
        self._modified_at = None
        self._src = None
        self._dst = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if mode is not None:
            self.mode = mode
        if obs_key is not None:
            self.obs_key = obs_key
        if status is not None:
            self.status = status
        if rpo is not None:
            self.rpo = rpo
        if avg_sync_rate_kb_sec is not None:
            self.avg_sync_rate_kb_sec = avg_sync_rate_kb_sec
        if cur_sync_rate_kb_sec is not None:
            self.cur_sync_rate_kb_sec = cur_sync_rate_kb_sec
        if total_capacity_mb is not None:
            self.total_capacity_mb = total_capacity_mb
        if already_restored_mb is not None:
            self.already_restored_mb = already_restored_mb
        if already_scanned_mb is not None:
            self.already_scanned_mb = already_scanned_mb
        if remaining_time_sec is not None:
            self.remaining_time_sec = remaining_time_sec
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if src is not None:
            self.src = src
        if dst is not None:
            self.dst = dst

    @property
    def name(self):
        """Gets the name of this ObsRestoreJob.  # noqa: E501


        :return: The name of this ObsRestoreJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObsRestoreJob.


        :param name: The name of this ObsRestoreJob.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this ObsRestoreJob.  # noqa: E501


        :return: The display_name of this ObsRestoreJob.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ObsRestoreJob.


        :param display_name: The display_name of this ObsRestoreJob.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def mode(self):
        """Gets the mode of this ObsRestoreJob.  # noqa: E501


        :return: The mode of this ObsRestoreJob.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ObsRestoreJob.


        :param mode: The mode of this ObsRestoreJob.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def obs_key(self):
        """Gets the obs_key of this ObsRestoreJob.  # noqa: E501


        :return: The obs_key of this ObsRestoreJob.  # noqa: E501
        :rtype: str
        """
        return self._obs_key

    @obs_key.setter
    def obs_key(self, obs_key):
        """Sets the obs_key of this ObsRestoreJob.


        :param obs_key: The obs_key of this ObsRestoreJob.  # noqa: E501
        :type: str
        """

        self._obs_key = obs_key

    @property
    def status(self):
        """Gets the status of this ObsRestoreJob.  # noqa: E501


        :return: The status of this ObsRestoreJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ObsRestoreJob.


        :param status: The status of this ObsRestoreJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def rpo(self):
        """Gets the rpo of this ObsRestoreJob.  # noqa: E501


        :return: The rpo of this ObsRestoreJob.  # noqa: E501
        :rtype: str
        """
        return self._rpo

    @rpo.setter
    def rpo(self, rpo):
        """Sets the rpo of this ObsRestoreJob.


        :param rpo: The rpo of this ObsRestoreJob.  # noqa: E501
        :type: str
        """

        self._rpo = rpo

    @property
    def avg_sync_rate_kb_sec(self):
        """Gets the avg_sync_rate_kb_sec of this ObsRestoreJob.  # noqa: E501


        :return: The avg_sync_rate_kb_sec of this ObsRestoreJob.  # noqa: E501
        :rtype: str
        """
        return self._avg_sync_rate_kb_sec

    @avg_sync_rate_kb_sec.setter
    def avg_sync_rate_kb_sec(self, avg_sync_rate_kb_sec):
        """Sets the avg_sync_rate_kb_sec of this ObsRestoreJob.


        :param avg_sync_rate_kb_sec: The avg_sync_rate_kb_sec of this ObsRestoreJob.  # noqa: E501
        :type: str
        """

        self._avg_sync_rate_kb_sec = avg_sync_rate_kb_sec

    @property
    def cur_sync_rate_kb_sec(self):
        """Gets the cur_sync_rate_kb_sec of this ObsRestoreJob.  # noqa: E501


        :return: The cur_sync_rate_kb_sec of this ObsRestoreJob.  # noqa: E501
        :rtype: int
        """
        return self._cur_sync_rate_kb_sec

    @cur_sync_rate_kb_sec.setter
    def cur_sync_rate_kb_sec(self, cur_sync_rate_kb_sec):
        """Sets the cur_sync_rate_kb_sec of this ObsRestoreJob.


        :param cur_sync_rate_kb_sec: The cur_sync_rate_kb_sec of this ObsRestoreJob.  # noqa: E501
        :type: int
        """

        self._cur_sync_rate_kb_sec = cur_sync_rate_kb_sec

    @property
    def total_capacity_mb(self):
        """Gets the total_capacity_mb of this ObsRestoreJob.  # noqa: E501


        :return: The total_capacity_mb of this ObsRestoreJob.  # noqa: E501
        :rtype: str
        """
        return self._total_capacity_mb

    @total_capacity_mb.setter
    def total_capacity_mb(self, total_capacity_mb):
        """Sets the total_capacity_mb of this ObsRestoreJob.


        :param total_capacity_mb: The total_capacity_mb of this ObsRestoreJob.  # noqa: E501
        :type: str
        """

        self._total_capacity_mb = total_capacity_mb

    @property
    def already_restored_mb(self):
        """Gets the already_restored_mb of this ObsRestoreJob.  # noqa: E501


        :return: The already_restored_mb of this ObsRestoreJob.  # noqa: E501
        :rtype: int
        """
        return self._already_restored_mb

    @already_restored_mb.setter
    def already_restored_mb(self, already_restored_mb):
        """Sets the already_restored_mb of this ObsRestoreJob.


        :param already_restored_mb: The already_restored_mb of this ObsRestoreJob.  # noqa: E501
        :type: int
        """

        self._already_restored_mb = already_restored_mb

    @property
    def already_scanned_mb(self):
        """Gets the already_scanned_mb of this ObsRestoreJob.  # noqa: E501


        :return: The already_scanned_mb of this ObsRestoreJob.  # noqa: E501
        :rtype: int
        """
        return self._already_scanned_mb

    @already_scanned_mb.setter
    def already_scanned_mb(self, already_scanned_mb):
        """Sets the already_scanned_mb of this ObsRestoreJob.


        :param already_scanned_mb: The already_scanned_mb of this ObsRestoreJob.  # noqa: E501
        :type: int
        """

        self._already_scanned_mb = already_scanned_mb

    @property
    def remaining_time_sec(self):
        """Gets the remaining_time_sec of this ObsRestoreJob.  # noqa: E501


        :return: The remaining_time_sec of this ObsRestoreJob.  # noqa: E501
        :rtype: int
        """
        return self._remaining_time_sec

    @remaining_time_sec.setter
    def remaining_time_sec(self, remaining_time_sec):
        """Sets the remaining_time_sec of this ObsRestoreJob.


        :param remaining_time_sec: The remaining_time_sec of this ObsRestoreJob.  # noqa: E501
        :type: int
        """

        self._remaining_time_sec = remaining_time_sec

    @property
    def created_at(self):
        """Gets the created_at of this ObsRestoreJob.  # noqa: E501


        :return: The created_at of this ObsRestoreJob.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ObsRestoreJob.


        :param created_at: The created_at of this ObsRestoreJob.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this ObsRestoreJob.  # noqa: E501


        :return: The modified_at of this ObsRestoreJob.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this ObsRestoreJob.


        :param modified_at: The modified_at of this ObsRestoreJob.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def src(self):
        """Gets the src of this ObsRestoreJob.  # noqa: E501


        :return: The src of this ObsRestoreJob.  # noqa: E501
        :rtype: ObsRestoreJobSrc
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this ObsRestoreJob.


        :param src: The src of this ObsRestoreJob.  # noqa: E501
        :type: ObsRestoreJobSrc
        """

        self._src = src

    @property
    def dst(self):
        """Gets the dst of this ObsRestoreJob.  # noqa: E501


        :return: The dst of this ObsRestoreJob.  # noqa: E501
        :rtype: ObsRestoreJobDst
        """
        return self._dst

    @dst.setter
    def dst(self, dst):
        """Sets the dst of this ObsRestoreJob.


        :param dst: The dst of this ObsRestoreJob.  # noqa: E501
        :type: ObsRestoreJobDst
        """

        self._dst = dst

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObsRestoreJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObsRestoreJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ObsRestoreJob):
            return True

        return self.to_dict() != other.to_dict()
