{"version":3,"file":"lib_index_js.b6934364ccaf88932d03.js","mappings":";;;;;;;;;;;;;;AAAA;;GAEG;AAOH,IAAY,KAIX;AAJD,WAAY,KAAK;IACf,+BAAG;IACH,qCAAM;IACN,yCAAQ;AACV,CAAC,EAJW,KAAK,KAAL,KAAK,QAIhB;AAED,8DAA8D;AAC9D,iDAAiD;AACjD,2CAA2C;AAEpC,MAAM,cAAc,GAAG,CAC5B,eAAiC,EACjC,KAAY,EACZ,QAA8B,EAC9B,EAAE;;IACF,MAAM,QAAQ,GAAG,qBAAe,CAAC,aAAa,0CAAE,OAAO;IACvD,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,+BAA+B;QAC/B,OAAM;KACP;IAED,IAAI,WAAW;IACf,IAAI,KAAK,KAAK,KAAK,CAAC,GAAG,EAAE;QACvB,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE;KACvC;SAAM;QACL,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU;QACtC,IAAI,UAAU,KAAK,IAAI,EAAE;YACvB,OAAM;SACP;QAED,IAAI,KAAK,KAAK,KAAK,CAAC,MAAM,EAAE;YAC1B,WAAW,GAAG,CAAC,UAAU,CAAC;SAC3B;aAAM;YACL,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC,sBAAsB,EAAE;YAC1D,uDAAuD;YACvD,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,EAAE;gBACpC,WAAW,GAAG,CAAC,UAAU,CAAC;aAC3B;iBAAM;gBACL,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,GAAG,CAAC,CAAC;aACvD;SACF;KACF;IACD,mFAAmF;IAEnF,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC;AAC/B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDD;;;GAGG;AAKoD;AAED;AAEA;AAEtD,yDAAyD;AACzD,MAAM,kBAAkB,GAAG,IAAI;AAE/B;;GAEG;AACH,MAAM,MAAM,GAAgC;IAC1C,EAAE,EAAE,mCAAmC;IACvC,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,kEAAgB,EAAE,iEAAe,CAAC;IAC7C,QAAQ,EAAE,CACR,GAAoB,EACpB,eAAiC,EACjC,OAAwB,EACxB,EAAE;QACF,OAAO,CAAC,GAAG,CAAC,oDAAoD,CAAC;QAEjE,IAAI,kBAAkB,EAAE;YACtB,oEAAoB,CAAC,GAAG,EAAE,eAAe,EAAE,OAAO,CAAC;SACpD;QAED,MAAM,aAAa,GAAG,CAAC,GAAW,EAAE,EAAE;YACpC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG;gBAChB,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;;gBAEnB,OAAO,YAAY,GAAG,EAAE;QAC9B,CAAC;QAEC,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;YAC/C,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK;YACzC,IAAI,aAAa,KAAK,IAAI,EAAE;gBAC1B,OAAM;aACP;YAED,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE;gBACvD,IAAI,MAAM,CAAC,IAAI,KAAK,KAAK,EAAE;oBACzB,OAAM;iBACP;gBACD,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;;oBACnC,wCAAwC;oBACxC,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAC9C,CAAC,IAAU,EAAE,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,SAAS,CAAC,EAAE,CAC9D;oBACD,IAAI,WAAW,KAAK,SAAS,IAAI,YAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,MAAK,CAAC,EAAE;wBAC1D,uEAAuE;wBACvE,OAAM;qBACP;oBACD,+EAA+E;oBAE/E,oCAAoC;oBACpC,eAAS,CAAC,WAAW,CAAC,MAAM,CAAC,0CAAE,OAAO,CAAC,CAAC,GAAW,EAAE,EAAE,CACrD,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,CAAC,UAAU,CAAC,EAAE;wBAChC,wEAAwE;wBACxE,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;oBACzC,CAAC,CAAC,CACH;oBAED,2BAA2B;oBAC3B,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,MAAkB,EAAE,MAAM,EAAE,EAAE;wBAC/D,oDAAoD;wBACpD,IAAI,MAAM,CAAC,GAAG,KAAK,MAAM,EAAE;4BACzB,qDAAqD;4BACrD,OAAM;yBACP;wBACD,yCAAyC;wBACzC,oDAAoD;wBACpD,oEAAoE;wBACpE,IAAI;wBACJ,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;4BAC5B,mDAAmD;4BACnD,8CAA8C;4BAC9C,MAAM,OAAO,GAAG,MAAM,CAAC,QAAoB;4BAC3C,MAAM,OAAO,GAAG,MAAM,CAAC,QAAoB;4BAC3C,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;4BAC/D,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;4BACjE,wCAAwC;4BACxC,4CAA4C;4BAC5C,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gCAC/B,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oCACtB,OAAO,CAAC,KAAK,CAAC,wBAAwB,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC;oCAC3D,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gCACzC,CAAC,CAAC;gCACF,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;oCACxB,OAAO,CAAC,KAAK,CAAC,0BAA0B,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC;oCAC7D,UAAU,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gCAC5C,CAAC,CAAC;4BACJ,CAAC,CAAC;yBACH;6BAAM,IAAI,MAAM,CAAC,IAAI,KAAK,KAAK,EAAE;4BAChC,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC;4BAC9D,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gCAC/B,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE;oCACjC,8DAA8D;oCAC9D,UAAU,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;iCACxC;4BACH,CAAC,CAAC;yBACH;6BAAM,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;4BACnC,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC;4BACjE,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;gCAC/B,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE;oCACjC,gEAAgE;oCAChE,UAAU,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;iCAC3C;4BACH,CAAC,CAAC;yBACH;oBACH,CAAC,CAAC;gBACJ,CAAC,CAAC;YACJ,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;CACF;AAED,iEAAe,MAAM;AAErB,sCAAsC;AAWnB;AAEqC;;;;;;;;;;;;;;;;;;;;;;;;;;AC5IxD,sCAAsC;AAEtC,EAAE;AACF,wBAAwB;AACxB,uEAAuE;AACvE,EAAE;AACF,2BAA2B;AAC3B,EAAE;AACF,mCAAmC;AACnC,yDAAyD;AACzD,0EAA0E;AAC1E,uEAAuE;AACvE,mCAAmC;AACnC,sEAAsE;AACtE,uCAAuC;AACvC,2DAA2D;AAC3D,EAAE;AACF,mDAAmD;AACnD,EAAE;AACF,6DAA6D;AAC7D,4DAA4D;AAC5D,mDAAmD;AACnD,4DAA4D;AAC5D,qDAAqD;AACrD,8DAA8D;AAC9D,mDAAmD;AACnD,8DAA8D;AAC9D,0DAA0D;AAC1D,gDAAgD;AAChD,EAAE;AACF,WAAW;AACX,+CAA+C;AAC/C,iDAAiD;AACjD,4BAA4B;AAC5B,kCAAkC;AAClC,oFAAoF;AAEhC;AAYpC;AAEhB,gBAAgB;AAET,MAAM,MAAM,GAAG,CACpB,IAAuB,EACvB,KAAY,EACZ,UAAgB,EACX,EAAE;IACP,IAAI,IAAI,YAAY,mDAAI,EAAE;QACxB,IAAI,GAAG,IAAI,CAAC,KAAK;KAClB;IACD,KAAK,GAAG,iDAAS,CAAC,KAAK,CAAC;IACxB,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK;IAE9B,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IACrC,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO,UAAU;KAClB;SAAM;QACL,OAAO,iDAAS,CAAC,KAAiB,EAAE,IAAI,CAAC;KAC1C;AACH,CAAC;AAEM,MAAM,MAAM,GAAG,CAAC,IAAU,EAAE,KAAY,EAAE,KAAU,EAAO,EAAE;IAClE,KAAK,GAAG,iDAAS,CAAC,KAAK,CAAC;IACxB,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK;IAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC;IAC3C,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC;QACpC,OAAO,KAAK;KACb;IACD,MAAM,OAAO,GAAG,KAAK,IAAI,EAAE;IAC3B,MAAM,MAAM,GAAG,iDAAS,CAAC,OAAmB,EAAE,IAAI,EAAE,KAAK,CAAC;IAC1D,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC;IACtC,OAAO,MAAM;AACf,CAAC;AAEM,MAAM,QAAQ,GAAG,CAAC,IAAU,EAAE,KAAY,EAAW,EAAE;IAC5D,KAAK,GAAG,iDAAS,CAAC,KAAK,CAAC;IACxB,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK;IAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC;IAC3C,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO,KAAK;KACb;IACD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC;QAChC,OAAO,IAAI;KACZ;SAAM;QACL,MAAM,MAAM,GAAG,mDAAW,CAAC,KAAiB,EAAE,IAAI,CAAC;QACnD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC;QACpC,OAAO,MAAM;KACd;AACH,CAAC;AAED,oBAAoB;AAEb,MAAM,MAAM,GAAG,CAAC,IAAU,EAAE,KAAY,EAAE,GAAW,EAAE,EAAE;IAC9D,KAAK,GAAG,iDAAS,CAAC,KAAK,CAAC;IACxB,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK;IAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC;IAC3C,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO,KAAK;KACb;IACD,MAAM,IAAI,GAAG,iDAAS,CAAC,KAAiB,EAAE,IAAI,CAAC;IAC/C,IAAI,IAAI,KAAK,SAAS,EAAE;QACtB,OAAO,KAAK;KACb;IACD,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;AAC/B,CAAC;AAEM,MAAM,SAAS,GAAG,CAAC,IAAU,EAAE,KAAY,EAAE,GAAW,EAAE,EAAE;IACjE,KAAK,GAAG,iDAAS,CAAC,KAAK,CAAC;IACxB,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK;IAE9B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC;IAC3C,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,IAAI,OAAsB;QAC1B,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,GAAG,KAAsB;YAChC,4EAA4E;YAC5E,OAAO,GAAG,OAAO,CAAC,KAAK,EAAE;SAC1B;aAAM;YACL,OAAO,GAAG,EAAE;SACb;QACD,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC5B,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;YACjB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC;YACtC,OAAO,GAAG;SACX;aAAM;YACL,OAAO,SAAS;SACjB;KACF;SAAM;QACL,MAAM,OAAO,GAAG,KAAK,IAAI,EAAE;QAC3B,MAAM,MAAM,GAAG,oDAAY,CAAC,OAAmB,EAAE,IAAI,EAAE,GAAG,CAAC;QAC3D,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC;QACtC,OAAO,MAAM;KACd;AACH,CAAC;AAEM,MAAM,SAAS,GAAG,CAAC,IAAU,EAAE,KAAY,EAAE,GAAW,EAAE,EAAE;IACjE,KAAK,GAAG,iDAAS,CAAC,KAAK,CAAC;IACxB,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK;IAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC;IAC3C,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO,SAAS;KACjB;IACD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,MAAM,OAAO,GAAG,KAAsB;QACtC,IAAI,CAAC,CAAC,OAAO,YAAY,KAAK,CAAC,EAAE;YAC/B,OAAO,SAAS;SACjB;QACD,oEAAoE;QACpE,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE;QAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;QAC/B,IAAI,KAAK,GAAG,CAAC,EAAE;YACb,OAAO,SAAS;SACjB;QACD,4CAA4C;QAC5C,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC;QACnC,OAAO,GAAG;KACX;SAAM;QACL,MAAM,OAAO,GAAG,KAAK;QACrB,MAAM,MAAM,GAAG,oDAAY,CAAC,OAAmB,EAAE,IAAI,EAAE,GAAG,CAAC;QAC3D,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC;QACtC,OAAO,MAAM;KACd;AACH,CAAC;AAEM,MAAM,SAAS,GAAG,CAAC,IAAU,EAAE,KAAY,EAAE,GAAW,EAAE,EAAE;IACjE,KAAK,GAAG,iDAAS,CAAC,KAAK,CAAC;IACxB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,EAAE;QAC7B,OAAO,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;KACnC;SAAM;QACL,OAAO,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;KACnC;AACH,CAAC;AAED;;;;;;;GAOG;AAEI,MAAM,eAAe,GAAG,CAC7B,IAAU,EACV,KAAY,EACZ,GAAW,EACX,UAAyB,EACzB,EAAE;IACF,IAAI,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC5B,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;KAC5B;IACD,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;QAClC,IAAI,SAAS,KAAK,GAAG,EAAE;YACrB,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC;SAClC;KACF;AACH,CAAC;AAEM,MAAM,QAAQ,GAAG,CAAC,IAAU,EAAE,KAAY,EAAE,EAAE;IACnD,KAAK,GAAG,iDAAS,CAAC,KAAK,CAAC;IACxB,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK;IAC9B,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QAChC,qCAAqC;QACrC,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;YACrD,MAAM,KAAK,GAAG,GAAY;YAC1B,MAAM,SAAS,GAAG,mDAAW,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;YACtD,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBACrD,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC;aACtB;iBAAM;gBACL,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC;aAC/B;SACF;KACF;SAAM;QACL,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC;QACnC,MAAM,SAAS,GAAG,mDAAW,CAAC,OAAO,EAAE,IAAI,CAAC;QAC5C,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YACrD,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC;SACtB;aAAM;YACL,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC;SAC/B;KACF;AACH,CAAC;;;;;;;;;;;;;;;;AC3OuD;AAKxD,uDAAuD;AACvD,0CAA0C;AACxC,MAAM,WAAW,GAAG,CAAC,IAAU,EAAE,EAAE;IACnC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC;AAC1C,CAAC;AAED,gBAAgB;AAChB,sBAAsB;AACtB,MAAM,YAAY,GAAG,CAAC,IAAU,EAAE,EAAE;IAClC,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,IAAI,CAAC;IACzC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK;IACxB,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,EAAE;IACjD,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;AACnD,CAAC;AAEM,MAAM,oBAAoB,GAAG,CAClC,GAAoB,EACpB,eAAiC,EACjC,OAAwB,EACxB,EAAE;IACF,MAAM,WAAW,GAAG,CAClB,MAAc,EACd,KAAa,EACb,KAAY,EACZ,IAAc,EACd,YAAkC,EAChC,EAAE;QACJ,MAAM,OAAO,GAAG,mBAAmB,MAAM,EAAE;QAC3C,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE;YAC/B,KAAK;YACL,OAAO,EAAE,GAAG,EAAE;gBACZ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;gBAClB,+DAAc,CAAC,eAAe,EAAE,KAAK,EAAE,YAAY,CAAC;YACtD,CAAC;SACF,CAAC;QACF,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,iBAAiB,EAAE,CAAC;QACzD,GAAG,CAAC,QAAQ,CAAC,aAAa,CAAC;YACzB,OAAO;YACP,IAAI;YACJ,QAAQ,EAAE,cAAc;SACzB,CAAC;IACJ,CAAC;IAED,QAAQ;IACR,WAAW,CACT,cAAc,EACd,4CAA4C,EAC5C,yDAAY,EACZ,CAAC,OAAO,EAAE,OAAO,CAAC,EAClB,YAAY,CACb;IACD,WAAW,CACT,gBAAgB,EAChB,iDAAiD,EACjD,2DAAc,EACd,CAAC,OAAO,EAAE,OAAO,CAAC,EAClB,YAAY,CACb;IACD,WAAW,CACT,WAAW,EACX,mCAAmC,EACnC,sDAAS,EACT,CAAC,OAAO,EAAE,OAAO,CAAC,EAClB,YAAY,CACb;IACD,OAAO;IACP,WAAW,CACT,aAAa,EACb,sCAAsC,EACtC,yDAAY,EACZ,CAAC,OAAO,EAAE,OAAO,CAAC,EAClB,WAAW,CACZ;IACD,WAAW,CACT,eAAe,EACf,2CAA2C,EAC3C,2DAAc,EACd,CAAC,OAAO,EAAE,OAAO,CAAC,EAClB,WAAW,CACZ;IACD,WAAW,CACT,UAAU,EACV,6BAA6B,EAAE,sDAAS,EACxC,CAAE,OAAO,EAAE,OAAO,CAAC,EACnB,WAAW,CACZ;AACH,CAAC;;;;;;;;;;;;;;;;;;;;;AC5FD,yCAAyC;AACzC,sCAAsC;AAEtC,gCAAgC;AAChC,EAAE;AACF,gEAAgE;AAChE,yBAAyB;AAEzB,kCAAkC;AAClC,IAAK,MAMJ;AAND,WAAK,MAAM;IACT,iCAAG;IACH,iCAAG;IACH,qCAAK;IACL,uCAAM;IACN,uCAAM;AACR,CAAC,EANI,MAAM,KAAN,MAAM,QAMV;AAKM,MAAM,SAAS,GAAG,CAAC,KAAY,EAAY,EAAE;IAClD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM,MAAM,GAAG,KAAe;QAC9B,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,OAAO,EAAE;SACV;QACD,OAAO,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;KACzB;SAAM,IAAI,KAAK,YAAY,KAAK,EAAE;QACjC,OAAO,KAAK;KACb;SAAM;QACL,OAAO,CAAC,KAAK,CAAC,sCAAsC,KAAK,EAAE,CAAC;QAC5D,OAAO,EAAE;KACV;AACH,CAAC;AAED,MAAM,gBAAgB,GAAG,CACvB,IAAc,EAAE,+BAA+B;AAC/C,MAAc,EACd,KAAY,EACZ,KAAU,EACL,EAAE;IACP,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM;IAElD,MAAM,OAAO,GAAG,CACd,OAAiB,EACjB,MAAc,EACd,KAAe,EACf,KAAU,EACL,EAAE;QACP,gDAAgD;QAEhD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,QAAQ,MAAM,EAAE;gBACd,KAAK,GAAG;oBACN,OAAO,OAAO;gBAChB;oBACE,OAAO,SAAS;aACnB;SACF;aAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7B,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK;YACpB,EAAE;YACF,QAAQ,MAAM,EAAE;gBACd,KAAK,GAAG;oBACN,OAAO,OAAO,CAAC,IAAI,CAAC;gBACtB,KAAK,GAAG;oBACN,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK;oBACrB,OAAO,KAAK;gBACd,KAAK,KAAK;oBACR,IAAI,IAAI,IAAI,OAAO,EAAE;wBACnB,OAAO,OAAO,CAAC,IAAI,CAAC;wBACpB,OAAO,IAAI;qBACZ;yBAAM;wBACL,OAAO,KAAK;qBACb;gBACH,KAAK,MAAM;oBACT,wBAAwB;oBACxB,IAAI,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,EAAE;wBACtB,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE;qBACnB;oBACD,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,KAAK,CAAC,EAAE;wBACrC,OAAO,SAAS;qBACjB;oBACD,gCAAgC;oBAChC;wBACE,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAkB;wBAC3C,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;4BAC3B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;4BAChB,OAAO,KAAK;yBACb;6BAAM;4BACL,OAAO,SAAS;yBACjB;qBACF;gBACH,KAAK,MAAM;oBACT,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,KAAK,CAAC,EAAE;wBACrC,OAAO,SAAS;qBACjB;oBACD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAa;oBACtC,4CAA4C;oBAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;oBACjC,IAAI,KAAK,IAAI,CAAC,EAAE;wBACd,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;qBACtB;oBACD,OAAO,KAAK;aACf;SACF;aAAM;YACL,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK;YAC9B,IAAI,KAAK,IAAI,OAAO,EAAE;gBACpB,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,MAAM,CAAC,EAAE;oBACvC,OAAO,SAAS;iBACjB;qBAAM;oBACL,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAwB;oBAClD,OAAO,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC;iBAC1C;aACF;iBAAM;gBACL,QAAQ,MAAM,EAAE;oBACd,KAAK,GAAG;wBACN,OAAO,SAAS;oBAClB,KAAK,GAAG;wBACN,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE;wBACnB,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAwB;wBAClD,OAAO,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC;oBAC3C,KAAK,KAAK;wBACR,OAAO,SAAS;oBAClB,KAAK,MAAM;wBACT,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;4BACrB,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE;4BACnB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC;yBACpD;6BAAM;4BACL,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE;4BACnB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC;yBACpD;oBACH,KAAK,MAAM;wBACT,OAAO,SAAS;iBACnB;aACF;SACF;IACH,CAAC;IAED,MAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC;IAEnC,OAAO,OAAO,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,CAAC;AACjD,CAAC;AAED,MAAM,eAAe,GAAG,CAAC,IAAc,EAAE,KAAY,EAAY,EAAE;IACjE,MAAM,SAAS,GAAG,CAAC,CAAM,EAAW,EAAE;QACpC,IAAI,CAAC,YAAY,KAAK,EAAE;YACtB,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC;SACtB;aAAM,IAAI,CAAC,YAAY,MAAM,EAAE;YAC9B,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC;SACnC;aAAM,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YAChC,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC;SACtB;aAAM;YACL,OAAO,IAAI;SACZ;IACH,CAAC;IAED,MAAM,WAAW,GAAG,CAAC,IAAW,EAAS,EAAE;QACzC,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;IAC1C,CAAC;IACD,MAAM,YAAY,GAAG,CAAC,IAAyB,EAAuB,EAAE;QACtE,MAAM,MAAM,GAAG,EAAyB;QACxC,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACtB,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC;YACvB,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC;YAC5B,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE;gBACtB,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO;aACtB;SACF;QACD,OAAO,MAAM;IACf,CAAC;IAED,MAAM,KAAK,GAAG,CAAC,IAAiC,EAAE,EAAE;QAClD,IAAI,IAAI,YAAY,KAAK,EAAE;YACzB,OAAO,WAAW,CAAC,IAAI,CAAC;SACzB;aAAM,IAAI,IAAI,YAAY,MAAM,EAAE;YACjC,OAAO,YAAY,CAAC,IAAI,CAAC;SAC1B;aAAM;YACL,OAAO,IAAI;SACZ;IACH,CAAC;IAED,MAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC;IACnC,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3B,OAAO,KAAK,CAAC,IAAI,CAAC;KACnB;SAAM;QACL,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,EAAE,UAAU,CAAC;QACzC,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,6CAA6C;YAC7C,sFAAsF;YACtF,OAAO,IAAI;SACZ;aAAM;YACL,OAAO,SAAS,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;SACjD;KACF;AACH,CAAC;AAEM,MAAM,SAAS,GAAG,CAAC,QAAkB,EAAE,KAAY,EAAE,EAAE,CAC5D,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,SAAS,CAAC;AACnD,MAAM,SAAS,GAAG,CAAC,QAAkB,EAAE,KAAY,EAAE,KAAU,EAAE,EAAE,CACxE,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC;AAC/C,MAAM,WAAW,GAAG,CAAC,QAAkB,EAAE,KAAY,EAAE,EAAE,CAC9D,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC;AACrD,MAAM,YAAY,GAAG,CAAC,QAAkB,EAAE,KAAY,EAAE,GAAW,EAAE,EAAE,CAC5E,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC;AAChD,MAAM,YAAY,GAAG,CAAC,QAAkB,EAAE,KAAY,EAAE,GAAW,EAAE,EAAE,CAC5E,gBAAgB,CAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC;AAChD,MAAM,WAAW,GAAG,CAAC,QAAkB,EAAE,KAAY,EAAE,EAAE,CAC9D,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC","sources":["webpack://jupyterlab-celltagsclasses/./src/apply_on_cells.ts","webpack://jupyterlab-celltagsclasses/./src/index.ts","webpack://jupyterlab-celltagsclasses/./src/metadata.ts","webpack://jupyterlab-celltagsclasses/./src/test_commands.ts","webpack://jupyterlab-celltagsclasses/./src/xpath.ts"],"sourcesContent":["/*\n * the logic of applying a function on a set of cells\n */\n\n/* eslint-disable prettier/prettier */\nimport { INotebookTracker } from '@jupyterlab/notebook'\n\nimport { Cell } from '@jupyterlab/cells'\n\nexport enum Scope {\n  All, // run on all cells\n  Active, // the active cell only\n  Multiple, // the multiple selected if that is the case, the active cell otherwise\n}\n\n// because this function is designed to define global commands\n// we always act on notebookTracker.currentWidget\n// i.e. the currently active notebook panel\n\nexport const apply_on_cells = (\n  notebookTracker: INotebookTracker,\n  scope: Scope,\n  to_apply: (cell: Cell) => void,\n) => {\n  const notebook = notebookTracker.currentWidget?.content\n  if (notebook === undefined) {\n    // not focusing on a notebook..\n    return\n  }\n\n  let actionCells\n  if (scope === Scope.All) {\n    actionCells = notebook.widgets.slice()\n  } else {\n    const activeCell = notebook.activeCell\n    if (activeCell === null) {\n      return\n    }\n\n    if (scope === Scope.Active) {\n      actionCells = [activeCell]\n    } else {\n      const { anchor, head } = notebook.getContiguousSelection()\n      // when only one cell is selected/active, both are null\n      if (anchor === null || head === null) {\n        actionCells = [activeCell]\n      } else {\n        actionCells = notebook.widgets.slice(anchor, head + 1)\n      }\n    }\n  }\n  // console.log(`apply_on_cells with scope=${scope} on ${actionCells.length} cells`)\n\n  actionCells.forEach(to_apply)\n}\n","/*\n * for attaching keybindings later on, see\n * https://towardsdatascience.com/how-to-customize-jupyterlab-keyboard-shortcuts-72321f73753d\n */\n\n/* eslint-disable prettier/prettier */\n\nimport { JupyterFrontEnd, JupyterFrontEndPlugin } from '@jupyterlab/application'\nimport { INotebookTracker } from '@jupyterlab/notebook'\nimport { ICellModel, Cell } from '@jupyterlab/cells'\nimport { ICommandPalette } from '@jupyterlab/apputils'\n\nimport { create_test_commands } from './test_commands'\n\n// turn that to true to do manual tests of apply_on_cells\nconst SHIP_TEST_COMMANDS = true\n\n/**\n * Initialization data for the jupyterlab-celltagsclasses extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab-celltagsclasses:plugin',\n  autoStart: true,\n  requires: [INotebookTracker, ICommandPalette],\n  activate: (\n    app: JupyterFrontEnd,\n    notebookTracker: INotebookTracker,\n    palette: ICommandPalette,\n  ) => {\n    console.log('extension jupyterlab-celltagsclasses is activating')\n\n    if (SHIP_TEST_COMMANDS) {\n      create_test_commands(app, notebookTracker, palette)\n    }\n\n    const class_for_tag = (tag: string) => {\n      if (tag[0] === '-')\n        return tag.slice(1)\n      else\n        return `cell-tag-${tag}`\n  }\n\n    notebookTracker.widgetAdded.connect((_, panel) => {\n      const notebookModel = panel.content.model\n      if (notebookModel === null) {\n        return\n      }\n\n      notebookModel.cells.changed.connect((cellList, change) => {\n        if (change.type !== 'add') {\n          return\n        }\n        change.newValues.forEach(cellModel => {\n          // compute widgets attached to cellModel\n          const cellWidgets = panel.content.widgets.filter(\n            (cell: Cell, index: number) => cell.model.id === cellModel.id,\n          )\n          if (cellWidgets === undefined || cellWidgets?.length === 0) {\n            // console.warn('could not find cell widget for cell model', cellModel)\n            return\n          }\n          // console.debug( `found ${cellWidgets?.length} cell widgets`, cellWidgets[0] )\n\n          // add classes for pre-existing tags\n          cellModel.getMetadata('tags')?.forEach((tag: string) =>\n            cellWidgets?.forEach(cellWidget => {\n              // console.debug( `adding initial class for tag ${class_for_tag(tag)}` )\n              cellWidget.addClass(class_for_tag(tag))\n            }),\n          )\n\n          // react to changes in tags\n          cellModel.metadataChanged.connect((sender: ICellModel, change) => {\n            // console.debug('metadata changed', sender, change)\n            if (change.key !== 'tags') {\n              // console.debug(\"ignoring non-tags metadata change\")\n              return\n            }\n            // does not seem useful to recompute this\n            // const cellWidgets = panel.content.widgets.filter(\n            //   (cell: Cell, index: number) => (cell.model.id === cellModel.id)\n            // )\n            if (change.type === 'change') {\n              // console.debug('change', change, change.newValue)\n              // compute difference between old and new tags\n              const oldTags = change.oldValue as string[]\n              const newTags = change.newValue as string[]\n              const addedTags = newTags.filter(tag => !oldTags.includes(tag))\n              const removedTags = oldTags.filter(tag => !newTags.includes(tag))\n              // console.debug('addedTags', addedTags)\n              // console.debug('removedTags', removedTags)\n              cellWidgets.forEach(cellWidget => {\n                addedTags.forEach(tag => {\n                  console.debug(`adding class for tag ${class_for_tag(tag)}`)\n                  cellWidget.addClass(class_for_tag(tag))\n                })\n                removedTags.forEach(tag => {\n                  console.debug(`removing class for tag ${class_for_tag(tag)}`)\n                  cellWidget.removeClass(class_for_tag(tag))\n                })\n              })\n            } else if (change.type === 'add') {\n              console.debug('celltagsclasses: add', change, change.newValue)\n              cellWidgets.forEach(cellWidget => {\n                for (const tag of change.newValue) {\n                  // console.debug(`adding class for tag ${class_for_tag(tag)}`)\n                  cellWidget.addClass(class_for_tag(tag))\n                }\n              })\n            } else if (change.type === 'remove') {\n              console.debug('celltagsclasses: remove', change, change.newValue)\n              cellWidgets.forEach(cellWidget => {\n                for (const tag of change.newValue) {\n                  // console.debug(`removing class for tag ${class_for_tag(tag)}`)\n                  cellWidget.removeClass(class_for_tag(tag))\n                }\n              })\n            }\n          })\n        })\n      })\n    })\n  },\n}\n\nexport default plugin\n\n// re-export metadata helper functions\nexport {\n  md_get,\n  md_set,\n  md_unset,\n  md_has,\n  md_insert,\n  md_remove,\n  md_toggle,\n  md_toggle_multi,\n  md_clean,\n} from './metadata'\n\nexport { Scope, apply_on_cells } from './apply_on_cells'\n","/* eslint-disable prettier/prettier */\n\n//\n// Metadata helper tools\n// a xpath can be either a dot-separated string, or an array of strings\n//\n//  single valued metadata:\n//\n// (*) md_get: get a metadata value\n//         e.g. md_get(cell, \"some.path.in.the.metadata\")\n//           or md_get(cell, \"some.path.in.the.metadata\", \"default value\")\n//           or md_get(cell, [\"some\", \"path\", \"in\", \"the\", \"metadata\"])\n// (*) md_set: set a metadata value\n//         e.g. md_set(cell, \"some.path.in.the.metadata\", \"new value\")\n// (*) md_unset: unset a metadata value\n//         e.g. md_unset(cell, \"some.path.in.the.metadata\")\n//\n//  list valued metadata (typically xpath = 'tags')\n//\n// (*) md_has: check if a value is present in a metadata list\n//         e.g. md_has(cell, \"path.to.tags\", \"tag-to-check\")\n// (*) md_insert: insert a value in a metadata list\n//         e.g. md_insert(cell, \"path.to.tags\", \"added-tag\")\n// (*) md_remove: remove a value from a metadata list\n//         e.g. md_remove(cell, \"path.to.tags\", \"removed-tag\")\n// (*) md_toggle: toggle a value in a metadata list\n//         e.g. md_toggle(cell, \"path.to.tags\", \"toggled-tag\")\n// (*) md_toggle_multi: toggle a value in a metadata list,\n//        removing the other values in the lists\n//\n// clean up\n// (*) md_clean: remove empty metadata elements\n//         e.g. md_clean(cell, \"path.to.subtree\")\n//         or more typically\n//              md_clean(cell, \"\")\n//          will alter the cell's metadata so as to remove empty lists or empty keys\n\nimport { ICellModel, Cell } from '@jupyterlab/cells'\n\nimport {\n  XpathMap,\n  Xpath,\n  normalize,\n  xpath_get,\n  xpath_set,\n  xpath_unset,\n  xpath_insert,\n  xpath_remove,\n  xpath_clean,\n} from './xpath'\n\n// atomic values\n\nexport const md_get = (\n  cell: Cell | ICellModel,\n  xpath: Xpath,\n  if_missing?: any,\n): any => {\n  if (cell instanceof Cell) {\n    cell = cell.model\n  }\n  xpath = normalize(xpath)\n  const [first, ...tail] = xpath\n\n  const start = cell.getMetadata(first)\n  if (start === undefined) {\n    return if_missing\n  } else {\n    return xpath_get(start as XpathMap, tail)\n  }\n}\n\nexport const md_set = (cell: Cell, xpath: Xpath, value: any): any => {\n  xpath = normalize(xpath)\n  const [first, ...tail] = xpath\n  const start = cell.model.getMetadata(first)\n  if (tail.length === 0) {\n    cell.model.setMetadata(first, value)\n    return value\n  }\n  const subtree = start || {}\n  const retcod = xpath_set(subtree as XpathMap, tail, value)\n  cell.model.setMetadata(first, subtree)\n  return retcod\n}\n\nexport const md_unset = (cell: Cell, xpath: Xpath): boolean => {\n  xpath = normalize(xpath)\n  const [first, ...tail] = xpath\n  const start = cell.model.getMetadata(first)\n  if (start === undefined) {\n    return false\n  }\n  if (tail.length === 0) {\n    cell.model.deleteMetadata(first)\n    return true\n  } else {\n    const retcod = xpath_unset(start as XpathMap, tail)\n    cell.model.setMetadata(first, start)\n    return retcod\n  }\n}\n\n// lists (e.g. tags)\n\nexport const md_has = (cell: Cell, xpath: Xpath, key: string) => {\n  xpath = normalize(xpath)\n  const [first, ...tail] = xpath\n  const start = cell.model.getMetadata(first)\n  if (start === undefined) {\n    return false\n  }\n  const list = xpath_get(start as XpathMap, tail)\n  if (list === undefined) {\n    return false\n  }\n  return list.indexOf(key) >= 0\n}\n\nexport const md_insert = (cell: Cell, xpath: Xpath, key: string) => {\n  xpath = normalize(xpath)\n  const [first, ...tail] = xpath\n\n  const start = cell.model.getMetadata(first)\n  if (tail.length === 0) {\n    let sublist: Array<string>\n    if (start !== undefined) {\n      sublist = start as Array<string>\n      // use another object as otherwise .setMetadata() does not seem to propagate\n      sublist = sublist.slice()\n    } else {\n      sublist = []\n    }\n    if (sublist.indexOf(key) < 0) {\n      sublist.push(key)\n      cell.model.setMetadata(first, sublist)\n      return key\n    } else {\n      return undefined\n    }\n  } else {\n    const subtree = start || {}\n    const retcod = xpath_insert(subtree as XpathMap, tail, key)\n    cell.model.setMetadata(first, subtree)\n    return retcod\n  }\n}\n\nexport const md_remove = (cell: Cell, xpath: Xpath, key: string) => {\n  xpath = normalize(xpath)\n  const [first, ...tail] = xpath\n  const start = cell.model.getMetadata(first)\n  if (start === undefined) {\n    return undefined\n  }\n  if (tail.length === 0) {\n    const sublist = start as Array<string>\n    if (!(sublist instanceof Array)) {\n      return undefined\n    }\n    // use another object as otherwise .set() does not seem to propagate\n    const copy = sublist.slice()\n    const index = copy.indexOf(key)\n    if (index < 0) {\n      return undefined\n    }\n    // const as_array = sublist as Array<string>\n    copy.splice(index, 1)\n    cell.model.setMetadata(first, copy)\n    return key\n  } else {\n    const subtree = start\n    const retcod = xpath_remove(subtree as XpathMap, tail, key)\n    cell.model.setMetadata(first, subtree)\n    return retcod\n  }\n}\n\nexport const md_toggle = (cell: Cell, xpath: Xpath, key: string) => {\n  xpath = normalize(xpath)\n  if (!md_has(cell, xpath, key)) {\n    return md_insert(cell, xpath, key)\n  } else {\n    return md_remove(cell, xpath, key)\n  }\n}\n\n/*\n * given a within_set of mututally exclusive keys\n * e.g. within_set = ['level1', 'level2', 'level3']\n * and a key to toggle\n * md_toggle_multi will toggle the key and unset the other keys\n * in the event where key is not in within_set\n * the effect of this function is to clear all keys in within_set\n */\n\nexport const md_toggle_multi = (\n  cell: Cell,\n  xpath: Xpath,\n  key: string,\n  within_set: Array<string>,\n) => {\n  if (within_set.includes(key)) {\n    md_toggle(cell, xpath, key)\n  }\n  for (const other_key of within_set) {\n    if (other_key !== key) {\n      md_remove(cell, xpath, other_key)\n    }\n  }\n}\n\nexport const md_clean = (cell: Cell, xpath: Xpath) => {\n  xpath = normalize(xpath)\n  const [first, ...tail] = xpath\n  if (first === undefined) {\n    console.log(cell.model.metadata)\n    // no xpath, clean the whole metadata\n    for (const key of Object.entries(cell.model.metadata)) {\n      const xpath = key as Xpath\n      const new_value = xpath_clean(md_get(cell, xpath), '')\n      if (new_value === undefined || new_value.length === 0) {\n        md_unset(cell, xpath)\n      } else {\n        md_set(cell, xpath, new_value)\n      }\n    }\n  } else {\n    const subtree = md_get(cell, first)\n    const new_value = xpath_clean(subtree, tail)\n    if (new_value === undefined || new_value.length === 0) {\n      md_unset(cell, first)\n    } else {\n      md_set(cell, first, new_value)\n    }\n  }\n}\n","import { JupyterFrontEnd } from '@jupyterlab/application'\nimport { Scope, apply_on_cells } from './apply_on_cells'\nimport { INotebookTracker } from '@jupyterlab/notebook'\nimport { ICommandPalette } from '@jupyterlab/apputils'\nimport { Cell } from '@jupyterlab/cells'\n\n// apply_on_cell calls action on a Cell (Widget) object\n// use cell.model if a CellModel is needed\n  const cell_action = (cell: Cell) => {\n  console.log('cell_action on', cell.node)\n}\n\n// act on models\n// like so for example\nconst model_action = (cell: Cell) => {\n  console.log('model_action on', cell.node)\n  const model = cell.model\n  const source = cell.model.sharedModel.getSource()\n  model.sharedModel.setSource(source.toUpperCase())\n}\n\nexport const create_test_commands = (\n  app: JupyterFrontEnd,\n  notebookTracker: INotebookTracker,\n  palette: ICommandPalette,\n) => {\n  const add_command = (\n    suffix: string,\n    label: string,\n    scope: Scope,\n    keys: string[],\n    the_function: (cell: Cell) => void,\n    ) => {\n    const command = `celltagsclasses:${suffix}`\n    app.commands.addCommand(command, {\n      label,\n      execute: () => {\n        console.log(label)\n        apply_on_cells(notebookTracker, scope, the_function)\n      },\n    })\n    palette.addItem({ command, category: 'celltagsclasses' })\n    app.commands.addKeyBinding({\n      command,\n      keys,\n      selector: '.jp-Notebook',\n    })\n  }\n\n  // MODEL\n  add_command(\n    'single-model',\n    'perform model action on single active cell',\n    Scope.Active,\n    ['Alt-K', 'Alt-1'],\n    model_action,\n  )\n  add_command(\n    'multiple-model',\n    'perform model action on multiple selected cells',\n    Scope.Multiple,\n    ['Alt-K', 'Alt-2'],\n    model_action,\n  )\n  add_command(\n    'all-model',\n    'perform model action on all cells',\n    Scope.All,\n    ['Alt-K', 'Alt-3'],\n    model_action,\n  )\n  // CELL\n  add_command(\n    'single-cell',\n    'perform action on single active cell',\n    Scope.Active,\n    ['Alt-K', 'Alt-4'],\n    cell_action,\n  )\n  add_command(\n    'multiple-cell',\n    'perform action on multiple selected cells',\n    Scope.Multiple,\n    ['Alt-K', 'Alt-5'],\n    cell_action,\n  )\n  add_command(\n    'all-cell',\n    'perform action on all cells', Scope.All,\n    [ 'Alt-K', 'Alt-6'],\n    cell_action,\n  )\n}\n","/* eslint-disable no-case-declarations */\n/* eslint-disable prettier/prettier */\n\n// helpers to manage a JS object\n//\n// in this module we are only concerned about doing side effects\n// in a JavaScript object\n\n// what to do on the passed object\nenum Action {\n  Get, // get the metadata at that xpath\n  Set, // set the metadata at that xpath\n  Unset, // undo the set operation\n  Insert, // insert the value inside that xpath (should point to a list)\n  Remove, // undo insert\n}\n\nexport type XpathMap = Record<string, any>\nexport type Xpath = string | string[]\n\nexport const normalize = (xpath: Xpath): string[] => {\n  if (typeof xpath === 'string') {\n    const string = xpath as string\n    if (string.length === 0) {\n      return []\n    }\n    return string.split('.')\n  } else if (xpath instanceof Array) {\n    return xpath\n  } else {\n    console.error(`xpath must be string or array, got ${xpath}`)\n    return []\n  }\n}\n\nconst _manage_metadata = (\n  data: XpathMap, // intended to be cell.metadata\n  action: Action,\n  xpath: Xpath,\n  value: any,\n): any => {\n  const { Get, Set, Unset, Insert, Remove } = Action\n\n  const recurse = (\n    scanner: XpathMap,\n    action: Action,\n    xpath: string[],\n    value: any,\n  ): any => {\n    // console.log(`in recurse with xpath=${xpath}`)\n\n    if (xpath.length === 0) {\n      switch (action) {\n        case Get:\n          return scanner\n        default:\n          return undefined\n      }\n    } else if (xpath.length === 1) {\n      const [step] = xpath\n      //\n      switch (action) {\n        case Get:\n          return scanner[step]\n        case Set:\n          scanner[step] = value\n          return value\n        case Unset:\n          if (step in scanner) {\n            delete scanner[step]\n            return true\n          } else {\n            return false\n          }\n        case Insert:\n          // create list if needed\n          if (!(step in scanner)) {\n            scanner[step] = []\n          }\n          if (!(scanner[step] instanceof Array)) {\n            return undefined\n          }\n          // insert if not already present\n          {\n            const list = scanner[step] as Array<string>\n            if (list.indexOf(value) < 0) {\n              list.push(value)\n              return value\n            } else {\n              return undefined\n            }\n          }\n        case Remove:\n          if (!(scanner[step] instanceof Array)) {\n            return undefined\n          }\n          const list = scanner[step] as string[]\n          // list.pop(value) is not accepted by ts ?!?\n          const index = list.indexOf(value)\n          if (index >= 0) {\n            list.splice(index, 1)\n          }\n          return value\n      }\n    } else {\n      const [first, ...rest] = xpath\n      if (first in scanner) {\n        if (!(scanner[first] instanceof Object)) {\n          return undefined\n        } else {\n          const next = scanner[first] as Record<string, any>\n          return recurse(next, action, rest, value)\n        }\n      } else {\n        switch (action) {\n          case Get:\n            return undefined\n          case Set:\n            scanner[first] = {}\n            const next = scanner[first] as Record<string, any>\n            return recurse(next, action, rest, value)\n          case Unset:\n            return undefined\n          case Insert:\n            if (rest.length === 0) {\n              scanner[first] = []\n              return recurse(scanner[first], action, rest, value)\n            } else {\n              scanner[first] = {}\n              return recurse(scanner[first], action, rest, value)\n            }\n          case Remove:\n            return undefined\n        }\n      }\n    }\n  }\n\n  const xpath_list = normalize(xpath)\n\n  return recurse(data, action, xpath_list, value)\n}\n\nconst _clean_metadata = (data: XpathMap, xpath: Xpath): XpathMap => {\n  const not_empty = (x: any): boolean => {\n    if (x instanceof Array) {\n      return x.length !== 0\n    } else if (x instanceof Object) {\n      return Object.keys(x).length !== 0\n    } else if (typeof x === 'string') {\n      return x.length !== 0\n    } else {\n      return true\n    }\n  }\n\n  const clean_array = (data: any[]): any[] => {\n    return data.map(clean).filter(not_empty)\n  }\n  const clean_object = (data: Record<string, any>): Record<string, any> => {\n    const result = {} as Record<string, any>\n    for (const key in data) {\n      const value = data[key]\n      const cleaned = clean(value)\n      if (not_empty(cleaned)) {\n        result[key] = cleaned\n      }\n    }\n    return result\n  }\n\n  const clean = (data: any[] | Record<string, any>) => {\n    if (data instanceof Array) {\n      return clean_array(data)\n    } else if (data instanceof Object) {\n      return clean_object(data)\n    } else {\n      return data\n    }\n  }\n\n  const xpath_list = normalize(xpath)\n  if (xpath_list.length === 0) {\n    return clean(data)\n  } else {\n    const start = xpath_get(data, xpath_list)\n    if (start === undefined) {\n      // nothing serious here, just a debug message\n      //console.debug(`DBG: xpath_clean: nothing to clean at ${xpath} - from ${xpath_list}`)\n      return data\n    } else {\n      return xpath_set(data, xpath_list, clean(start))\n    }\n  }\n}\n\nexport const xpath_get = (metadata: XpathMap, xpath: Xpath) =>\n  _manage_metadata(metadata, Action.Get, xpath, undefined)\nexport const xpath_set = (metadata: XpathMap, xpath: Xpath, value: any) =>\n  _manage_metadata(metadata, Action.Set, xpath, value)\nexport const xpath_unset = (metadata: XpathMap, xpath: Xpath) =>\n  _manage_metadata(metadata, Action.Unset, xpath, undefined)\nexport const xpath_insert = (metadata: XpathMap, xpath: Xpath, key: string) =>\n  _manage_metadata(metadata, Action.Insert, xpath, key)\nexport const xpath_remove = (metadata: XpathMap, xpath: Xpath, key: string) =>\n  _manage_metadata(metadata, Action.Remove, xpath, key)\nexport const xpath_clean = (metadata: XpathMap, xpath: Xpath) =>\n  _clean_metadata(metadata, xpath)\n"],"names":[],"sourceRoot":""}