# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class Compute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_uuid': 'str',
        'cluster_ip': 'str',
        'cluster_url': 'str',
        'cluster_name': 'str',
        'cluster_storage_type': 'str',
        'cluster_version': 'str'
    }

    attribute_map = {
        'cluster_uuid': 'cluster_uuid',
        'cluster_ip': 'cluster_ip',
        'cluster_url': 'cluster_url',
        'cluster_name': 'cluster_name',
        'cluster_storage_type': 'cluster_storage_type',
        'cluster_version': 'cluster_version'
    }

    def __init__(self, cluster_uuid=None, cluster_ip=None, cluster_url=None, cluster_name=None, cluster_storage_type=None, cluster_version=None, _configuration=None):  # noqa: E501
        """Compute - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cluster_uuid = None
        self._cluster_ip = None
        self._cluster_url = None
        self._cluster_name = None
        self._cluster_storage_type = None
        self._cluster_version = None
        self.discriminator = None

        if cluster_uuid is not None:
            self.cluster_uuid = cluster_uuid
        if cluster_ip is not None:
            self.cluster_ip = cluster_ip
        if cluster_url is not None:
            self.cluster_url = cluster_url
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if cluster_storage_type is not None:
            self.cluster_storage_type = cluster_storage_type
        if cluster_version is not None:
            self.cluster_version = cluster_version

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this Compute.  # noqa: E501

        The UUID of the cluster.  # noqa: E501

        :return: The cluster_uuid of this Compute.  # noqa: E501
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this Compute.

        The UUID of the cluster.  # noqa: E501

        :param cluster_uuid: The cluster_uuid of this Compute.  # noqa: E501
        :type: str
        """

        self._cluster_uuid = cluster_uuid

    @property
    def cluster_ip(self):
        """Gets the cluster_ip of this Compute.  # noqa: E501

        The IP address of the cluster.  # noqa: E501

        :return: The cluster_ip of this Compute.  # noqa: E501
        :rtype: str
        """
        return self._cluster_ip

    @cluster_ip.setter
    def cluster_ip(self, cluster_ip):
        """Sets the cluster_ip of this Compute.

        The IP address of the cluster.  # noqa: E501

        :param cluster_ip: The cluster_ip of this Compute.  # noqa: E501
        :type: str
        """

        self._cluster_ip = cluster_ip

    @property
    def cluster_url(self):
        """Gets the cluster_url of this Compute.  # noqa: E501

        The URL of the cluster.  # noqa: E501

        :return: The cluster_url of this Compute.  # noqa: E501
        :rtype: str
        """
        return self._cluster_url

    @cluster_url.setter
    def cluster_url(self, cluster_url):
        """Sets the cluster_url of this Compute.

        The URL of the cluster.  # noqa: E501

        :param cluster_url: The cluster_url of this Compute.  # noqa: E501
        :type: str
        """

        self._cluster_url = cluster_url

    @property
    def cluster_name(self):
        """Gets the cluster_name of this Compute.  # noqa: E501

        The name of the cluster.  # noqa: E501

        :return: The cluster_name of this Compute.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this Compute.

        The name of the cluster.  # noqa: E501

        :param cluster_name: The cluster_name of this Compute.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def cluster_storage_type(self):
        """Gets the cluster_storage_type of this Compute.  # noqa: E501

        The storage type of the cluster.  # noqa: E501

        :return: The cluster_storage_type of this Compute.  # noqa: E501
        :rtype: str
        """
        return self._cluster_storage_type

    @cluster_storage_type.setter
    def cluster_storage_type(self, cluster_storage_type):
        """Sets the cluster_storage_type of this Compute.

        The storage type of the cluster.  # noqa: E501

        :param cluster_storage_type: The cluster_storage_type of this Compute.  # noqa: E501
        :type: str
        """
        allowed_values = ["vpsa", "readonly", "vsc"]  # noqa: E501
        if (self._configuration.client_side_validation and
                cluster_storage_type not in allowed_values):
            raise ValueError(
                "Invalid value for `cluster_storage_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cluster_storage_type, allowed_values)
            )

        self._cluster_storage_type = cluster_storage_type

    @property
    def cluster_version(self):
        """Gets the cluster_version of this Compute.  # noqa: E501

        The version of the cluster.  # noqa: E501

        :return: The cluster_version of this Compute.  # noqa: E501
        :rtype: str
        """
        return self._cluster_version

    @cluster_version.setter
    def cluster_version(self, cluster_version):
        """Sets the cluster_version of this Compute.

        The version of the cluster.  # noqa: E501

        :param cluster_version: The cluster_version of this Compute.  # noqa: E501
        :type: str
        """

        self._cluster_version = cluster_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Compute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Compute):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Compute):
            return True

        return self.to_dict() != other.to_dict()
