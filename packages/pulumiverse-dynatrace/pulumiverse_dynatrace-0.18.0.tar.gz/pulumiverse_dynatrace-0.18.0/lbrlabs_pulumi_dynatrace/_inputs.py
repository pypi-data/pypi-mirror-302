# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AlertingFiltersArgs',
    'AlertingFiltersFilterArgs',
    'AlertingFiltersFilterCustomArgs',
    'AlertingFiltersFilterCustomDescriptionArgs',
    'AlertingFiltersFilterCustomMetadataArgs',
    'AlertingFiltersFilterCustomMetadataItemsArgs',
    'AlertingFiltersFilterCustomMetadataItemsFilterArgs',
    'AlertingFiltersFilterCustomTitleArgs',
    'AlertingFiltersFilterPredefinedArgs',
    'AlertingProfileEventTypeFilterArgs',
    'AlertingProfileEventTypeFilterCustomEventFilterArgs',
    'AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilterArgs',
    'AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilterArgs',
    'AlertingProfileEventTypeFilterPredefinedEventFilterArgs',
    'AlertingProfileMetadataArgs',
    'AlertingProfileRuleArgs',
    'AlertingProfileRuleTagFilterArgs',
    'AlertingProfileRuleTagFilterTagFilterArgs',
    'AlertingRulesArgs',
    'AlertingRulesRuleArgs',
    'ApiDetectionConditionsArgs',
    'ApiDetectionConditionsConditionArgs',
    'ApplicationAnomaliesFailureRateArgs',
    'ApplicationAnomaliesFailureRateAutoArgs',
    'ApplicationAnomaliesFailureRateThresholdsArgs',
    'ApplicationAnomaliesResponseTimeArgs',
    'ApplicationAnomaliesResponseTimeAutoArgs',
    'ApplicationAnomaliesResponseTimeThresholdsArgs',
    'ApplicationAnomaliesTrafficArgs',
    'ApplicationAnomaliesTrafficDropsArgs',
    'ApplicationAnomaliesTrafficSpikesArgs',
    'ApplicationDataPrivacySessionReplayDataPrivacyArgs',
    'ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsArgs',
    'ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackArgs',
    'ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesArgs',
    'ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRuleArgs',
    'ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingArgs',
    'ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesArgs',
    'ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRuleArgs',
    'ApplicationDetectionRuleFilterConfigArgs',
    'ApplicationErrorRulesCustomErrorsArgs',
    'ApplicationErrorRulesCustomErrorsRuleArgs',
    'ApplicationErrorRulesHttpErrorsArgs',
    'ApplicationErrorRulesHttpErrorsRuleArgs',
    'AutotagEntitySelectorBasedRuleArgs',
    'AutotagRuleArgs',
    'AutotagRuleConditionArgs',
    'AutotagRuleConditionApplicationTypeArgs',
    'AutotagRuleConditionApplicationTypeComparisonArgs',
    'AutotagRuleConditionAzureComputeModeArgs',
    'AutotagRuleConditionAzureComputeModeComparisonArgs',
    'AutotagRuleConditionAzureSkuComparisionArgs',
    'AutotagRuleConditionAzureSkusArgs',
    'AutotagRuleConditionBaseComparisonBasicArgs',
    'AutotagRuleConditionBaseConditionKeyArgs',
    'AutotagRuleConditionBitnessArgs',
    'AutotagRuleConditionBitnessComparisionArgs',
    'AutotagRuleConditionCloudTypeArgs',
    'AutotagRuleConditionCloudTypeComparisonArgs',
    'AutotagRuleConditionComparisonArgs',
    'AutotagRuleConditionCustomApplicationTypeArgs',
    'AutotagRuleConditionCustomApplicationTypeComparisonArgs',
    'AutotagRuleConditionCustomHostMetadataArgs',
    'AutotagRuleConditionCustomHostMetadataConditionKeyArgs',
    'AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKeyArgs',
    'AutotagRuleConditionCustomHostMetadataDynamicKeyArgs',
    'AutotagRuleConditionCustomProcessMetadataArgs',
    'AutotagRuleConditionCustomProcessMetadataConditionKeyArgs',
    'AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKeyArgs',
    'AutotagRuleConditionCustomProcessMetadataDynamicKeyArgs',
    'AutotagRuleConditionDatabaseTopologyArgs',
    'AutotagRuleConditionDatabaseTopologyComparisonArgs',
    'AutotagRuleConditionDcrumDecoderArgs',
    'AutotagRuleConditionDcrumDecoderComparisonArgs',
    'AutotagRuleConditionEntityArgs',
    'AutotagRuleConditionEntityIdComparisonArgs',
    'AutotagRuleConditionHostTechArgs',
    'AutotagRuleConditionHostTechValueArgs',
    'AutotagRuleConditionHypervisorArgs',
    'AutotagRuleConditionHypervisorTypeComparisionArgs',
    'AutotagRuleConditionIndexedNameArgs',
    'AutotagRuleConditionIndexedNameComparisonArgs',
    'AutotagRuleConditionIndexedStringArgs',
    'AutotagRuleConditionIndexedStringComparisonArgs',
    'AutotagRuleConditionIndexedTagArgs',
    'AutotagRuleConditionIndexedTagComparisonArgs',
    'AutotagRuleConditionIndexedTagComparisonValueArgs',
    'AutotagRuleConditionIndexedTagValueArgs',
    'AutotagRuleConditionIntegerArgs',
    'AutotagRuleConditionIntegerComparisonArgs',
    'AutotagRuleConditionIpaddressArgs',
    'AutotagRuleConditionIpaddressComparisonArgs',
    'AutotagRuleConditionKeyArgs',
    'AutotagRuleConditionMobilePlatformArgs',
    'AutotagRuleConditionMobilePlatformComparisonArgs',
    'AutotagRuleConditionOsArchArgs',
    'AutotagRuleConditionOsTypeArgs',
    'AutotagRuleConditionOsarchitectureComparisonArgs',
    'AutotagRuleConditionOstypeComparisonArgs',
    'AutotagRuleConditionPaasTypeArgs',
    'AutotagRuleConditionPaasTypeComparisonArgs',
    'AutotagRuleConditionProcessMetadataArgs',
    'AutotagRuleConditionProcessMetadataConditionKeyArgs',
    'AutotagRuleConditionServiceTopologyArgs',
    'AutotagRuleConditionServiceTopologyComparisonArgs',
    'AutotagRuleConditionServiceTypeArgs',
    'AutotagRuleConditionServiceTypeComparisonArgs',
    'AutotagRuleConditionSimpleHostTechComparisonArgs',
    'AutotagRuleConditionSimpleHostTechComparisonValueArgs',
    'AutotagRuleConditionSimpleTechComparisonArgs',
    'AutotagRuleConditionSimpleTechComparisonValueArgs',
    'AutotagRuleConditionStringArgs',
    'AutotagRuleConditionStringComparisonArgs',
    'AutotagRuleConditionStringConditionKeyArgs',
    'AutotagRuleConditionStringKeyArgs',
    'AutotagRuleConditionSyntheticEngineArgs',
    'AutotagRuleConditionSyntheticEngineTypeComparisonArgs',
    'AutotagRuleConditionTagArgs',
    'AutotagRuleConditionTagComparisonArgs',
    'AutotagRuleConditionTagComparisonValueArgs',
    'AutotagRuleConditionTagValueArgs',
    'AutotagRuleConditionTechArgs',
    'AutotagRuleConditionTechValueArgs',
    'AutotagV2RulesArgs',
    'AutotagV2RulesRuleArgs',
    'AutotagV2RulesRuleAttributeRuleArgs',
    'AutotagV2RulesRuleAttributeRuleConditionsArgs',
    'AutotagV2RulesRuleAttributeRuleConditionsConditionArgs',
    'AwsAnomaliesEc2CandidateHighCpuDetectionArgs',
    'AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholdsArgs',
    'AwsAnomaliesElbHighConnectionErrorsDetectionArgs',
    'AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholdsArgs',
    'AwsAnomaliesLambdaHighErrorRateDetectionArgs',
    'AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholdsArgs',
    'AwsAnomaliesRdsHighCpuDetectionArgs',
    'AwsAnomaliesRdsHighCpuDetectionCustomThresholdsArgs',
    'AwsAnomaliesRdsHighMemoryDetectionArgs',
    'AwsAnomaliesRdsHighMemoryDetectionCustomThresholdsArgs',
    'AwsAnomaliesRdsHighWriteReadLatencyDetectionArgs',
    'AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholdsArgs',
    'AwsAnomaliesRdsLowStorageDetectionArgs',
    'AwsAnomaliesRdsLowStorageDetectionCustomThresholdsArgs',
    'AwsAnomaliesRdsRestartsSequenceDetectionArgs',
    'AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholdsArgs',
    'AwsCredentialsAuthenticationDataArgs',
    'AwsCredentialsSupportingServicesToMonitorArgs',
    'AwsCredentialsSupportingServicesToMonitorMonitoredMetricArgs',
    'AwsCredentialsTagsToMonitorArgs',
    'AzureCredentialsMonitorOnlyExcludingTagPairArgs',
    'AzureCredentialsMonitorOnlyTagPairArgs',
    'AzureCredentialsSupportingServiceArgs',
    'AzureCredentialsSupportingServiceMonitoredMetricArgs',
    'BrowserMonitorAnomalyDetectionArgs',
    'BrowserMonitorAnomalyDetectionLoadingTimeThresholdArgs',
    'BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdArgs',
    'BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThresholdArgs',
    'BrowserMonitorAnomalyDetectionOutageHandlingArgs',
    'BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs',
    'BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyArgs',
    'BrowserMonitorKeyPerformanceMetricsArgs',
    'BrowserMonitorPerformanceThresholdsArgs',
    'BrowserMonitorPerformanceThresholdsThresholdArgs',
    'BrowserMonitorScriptArgs',
    'BrowserMonitorScriptConfigurationArgs',
    'BrowserMonitorScriptConfigurationBandwidthArgs',
    'BrowserMonitorScriptConfigurationCookiesArgs',
    'BrowserMonitorScriptConfigurationCookiesCookieArgs',
    'BrowserMonitorScriptConfigurationDeviceArgs',
    'BrowserMonitorScriptConfigurationHeadersArgs',
    'BrowserMonitorScriptConfigurationHeadersHeaderArgs',
    'BrowserMonitorScriptConfigurationIgnoredErrorCodesArgs',
    'BrowserMonitorScriptConfigurationJavascriptSetttingsArgs',
    'BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettingsArgs',
    'BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptionsArgs',
    'BrowserMonitorScriptEventsArgs',
    'BrowserMonitorScriptEventsEventArgs',
    'BrowserMonitorScriptEventsEventClickArgs',
    'BrowserMonitorScriptEventsEventClickTargetArgs',
    'BrowserMonitorScriptEventsEventClickTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventClickTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventClickValidateArgs',
    'BrowserMonitorScriptEventsEventClickValidateValidationArgs',
    'BrowserMonitorScriptEventsEventClickValidateValidationTargetArgs',
    'BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventClickWaitArgs',
    'BrowserMonitorScriptEventsEventClickWaitValidationArgs',
    'BrowserMonitorScriptEventsEventClickWaitValidationTargetArgs',
    'BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventCookieArgs',
    'BrowserMonitorScriptEventsEventCookieCookiesArgs',
    'BrowserMonitorScriptEventsEventCookieCookiesCookieArgs',
    'BrowserMonitorScriptEventsEventJavascriptArgs',
    'BrowserMonitorScriptEventsEventJavascriptTargetArgs',
    'BrowserMonitorScriptEventsEventJavascriptTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventJavascriptWaitArgs',
    'BrowserMonitorScriptEventsEventJavascriptWaitValidationArgs',
    'BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetArgs',
    'BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventKeystrokesArgs',
    'BrowserMonitorScriptEventsEventKeystrokesCredentialArgs',
    'BrowserMonitorScriptEventsEventKeystrokesTargetArgs',
    'BrowserMonitorScriptEventsEventKeystrokesTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventKeystrokesValidateArgs',
    'BrowserMonitorScriptEventsEventKeystrokesValidateValidationArgs',
    'BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetArgs',
    'BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventKeystrokesWaitArgs',
    'BrowserMonitorScriptEventsEventKeystrokesWaitValidationArgs',
    'BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetArgs',
    'BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventNavigateArgs',
    'BrowserMonitorScriptEventsEventNavigateAuthenticationArgs',
    'BrowserMonitorScriptEventsEventNavigateTargetArgs',
    'BrowserMonitorScriptEventsEventNavigateTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventNavigateTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventNavigateValidateArgs',
    'BrowserMonitorScriptEventsEventNavigateValidateValidationArgs',
    'BrowserMonitorScriptEventsEventNavigateValidateValidationTargetArgs',
    'BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventNavigateWaitArgs',
    'BrowserMonitorScriptEventsEventNavigateWaitValidationArgs',
    'BrowserMonitorScriptEventsEventNavigateWaitValidationTargetArgs',
    'BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventSelectArgs',
    'BrowserMonitorScriptEventsEventSelectSelectionsArgs',
    'BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs',
    'BrowserMonitorScriptEventsEventSelectTargetArgs',
    'BrowserMonitorScriptEventsEventSelectTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventSelectTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventSelectValidateArgs',
    'BrowserMonitorScriptEventsEventSelectValidateValidationArgs',
    'BrowserMonitorScriptEventsEventSelectValidateValidationTargetArgs',
    'BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventSelectWaitArgs',
    'BrowserMonitorScriptEventsEventSelectWaitValidationArgs',
    'BrowserMonitorScriptEventsEventSelectWaitValidationTargetArgs',
    'BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventTapArgs',
    'BrowserMonitorScriptEventsEventTapTargetArgs',
    'BrowserMonitorScriptEventsEventTapTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventTapTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventTapValidateArgs',
    'BrowserMonitorScriptEventsEventTapValidateValidationArgs',
    'BrowserMonitorScriptEventsEventTapValidateValidationTargetArgs',
    'BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocatorArgs',
    'BrowserMonitorScriptEventsEventTapWaitArgs',
    'BrowserMonitorScriptEventsEventTapWaitValidationArgs',
    'BrowserMonitorScriptEventsEventTapWaitValidationTargetArgs',
    'BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorArgs',
    'BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocatorArgs',
    'BrowserMonitorTagArgs',
    'BrowserMonitorTagTagArgs',
    'BusinessEventsOneagentEventArgs',
    'BusinessEventsOneagentEventCategoryArgs',
    'BusinessEventsOneagentEventDataArgs',
    'BusinessEventsOneagentEventDataEventDataFieldComplexArgs',
    'BusinessEventsOneagentEventDataEventDataFieldComplexSourceArgs',
    'BusinessEventsOneagentEventProviderArgs',
    'BusinessEventsOneagentEventTypeArgs',
    'BusinessEventsOneagentTriggersArgs',
    'BusinessEventsOneagentTriggersTriggerArgs',
    'BusinessEventsOneagentTriggersTriggerSourceArgs',
    'BusinessEventsProcessingRuleTestingArgs',
    'BusinessEventsProcessingTransformationFieldsArgs',
    'BusinessEventsProcessingTransformationFieldsTransformationFieldArgs',
    'CalculatedServiceMetricConditionArgs',
    'CalculatedServiceMetricConditionConditionArgs',
    'CalculatedServiceMetricConditionConditionComparisonArgs',
    'CalculatedServiceMetricConditionConditionComparisonBooleanArgs',
    'CalculatedServiceMetricConditionConditionComparisonEsbInputNodeTypeArgs',
    'CalculatedServiceMetricConditionConditionComparisonFailedStateArgs',
    'CalculatedServiceMetricConditionConditionComparisonFailureReasonArgs',
    'CalculatedServiceMetricConditionConditionComparisonFastStringArgs',
    'CalculatedServiceMetricConditionConditionComparisonFlawStateArgs',
    'CalculatedServiceMetricConditionConditionComparisonGenericArgs',
    'CalculatedServiceMetricConditionConditionComparisonHttpMethodArgs',
    'CalculatedServiceMetricConditionConditionComparisonHttpStatusClassArgs',
    'CalculatedServiceMetricConditionConditionComparisonIibInputNodeTypeArgs',
    'CalculatedServiceMetricConditionConditionComparisonNumberArgs',
    'CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeArgs',
    'CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceArgs',
    'CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagArgs',
    'CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyArgs',
    'CalculatedServiceMetricConditionConditionComparisonServiceTypeArgs',
    'CalculatedServiceMetricConditionConditionComparisonStringArgs',
    'CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeArgs',
    'CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceArgs',
    'CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagArgs',
    'CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKeyArgs',
    'CalculatedServiceMetricConditionConditionComparisonTagArgs',
    'CalculatedServiceMetricConditionConditionComparisonTagValueArgs',
    'CalculatedServiceMetricConditionConditionComparisonTagValuesArgs',
    'CalculatedServiceMetricConditionConditionComparisonTagValuesValueArgs',
    'CalculatedServiceMetricConditionConditionComparisonZosCallTypeArgs',
    'CalculatedServiceMetricDimensionDefinitionArgs',
    'CalculatedServiceMetricDimensionDefinitionPlaceholdersArgs',
    'CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderArgs',
    'CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceArgs',
    'CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagArgs',
    'CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyArgs',
    'CalculatedServiceMetricMetricDefinitionArgs',
    'CloudappWorkloaddetectionCloudFoundryArgs',
    'CloudappWorkloaddetectionDockerArgs',
    'CloudappWorkloaddetectionKubernetesArgs',
    'CloudappWorkloaddetectionKubernetesFiltersArgs',
    'CloudappWorkloaddetectionKubernetesFiltersFilterArgs',
    'CloudappWorkloaddetectionKubernetesFiltersFilterInclusionTogglesArgs',
    'CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilterArgs',
    'CredentialsCredentialUsageSummaryArgs',
    'CredentialsExternalArgs',
    'CustomAnomaliesDimensionArgs',
    'CustomAnomaliesDimensionDimensionArgs',
    'CustomAnomaliesDimensionEntityArgs',
    'CustomAnomaliesDimensionEntityFilterArgs',
    'CustomAnomaliesDimensionStringArgs',
    'CustomAnomaliesDimensionStringFilterArgs',
    'CustomAnomaliesScopeArgs',
    'CustomAnomaliesScopeCustomDeviceGroupNameArgs',
    'CustomAnomaliesScopeCustomDeviceGroupNameFilterArgs',
    'CustomAnomaliesScopeEntityArgs',
    'CustomAnomaliesScopeHostGroupNameArgs',
    'CustomAnomaliesScopeHostGroupNameFilterArgs',
    'CustomAnomaliesScopeHostNameArgs',
    'CustomAnomaliesScopeHostNameFilterArgs',
    'CustomAnomaliesScopeManagementZoneArgs',
    'CustomAnomaliesScopeNameArgs',
    'CustomAnomaliesScopeNameFilterArgs',
    'CustomAnomaliesScopeProcessGroupIdArgs',
    'CustomAnomaliesScopeProcessGroupNameArgs',
    'CustomAnomaliesScopeProcessGroupNameFilterArgs',
    'CustomAnomaliesScopeScopeArgs',
    'CustomAnomaliesScopeTagArgs',
    'CustomAnomaliesScopeTagFilterArgs',
    'CustomAnomaliesStrategyArgs',
    'CustomAnomaliesStrategyAutoArgs',
    'CustomAnomaliesStrategyGenericArgs',
    'CustomAnomaliesStrategyStaticArgs',
    'CustomAppAnomaliesErrorRateIncreaseArgs',
    'CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs',
    'CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs',
    'CustomAppAnomaliesSlowUserActionsArgs',
    'CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs',
    'CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralertingArgs',
    'CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAllArgs',
    'CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowestArgs',
    'CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs',
    'CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralertingArgs',
    'CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixedArgs',
    'CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowestArgs',
    'CustomAppAnomaliesUnexpectedHighLoadArgs',
    'CustomAppAnomaliesUnexpectedLowLoadArgs',
    'CustomAppCrashRateCrashRateIncreaseArgs',
    'CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs',
    'CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs',
    'CustomAppEnablementRumArgs',
    'CustomServiceRuleArgs',
    'CustomServiceRuleClassArgs',
    'CustomServiceRuleFileArgs',
    'CustomServiceRuleMethodArgs',
    'CustomTagsTagsArgs',
    'CustomTagsTagsFilterArgs',
    'DashboardDashboardMetadataArgs',
    'DashboardDashboardMetadataDynamicFiltersArgs',
    'DashboardDashboardMetadataDynamicFiltersGenericTagFiltersArgs',
    'DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilterArgs',
    'DashboardDashboardMetadataFilterArgs',
    'DashboardDashboardMetadataFilterManagementZoneArgs',
    'DashboardDashboardMetadataSharingDetailsArgs',
    'DashboardMetadataArgs',
    'DashboardSharingPermissionsArgs',
    'DashboardSharingPermissionsPermissionArgs',
    'DashboardSharingPublicArgs',
    'DashboardTileArgs',
    'DashboardTileBoundsArgs',
    'DashboardTileFilterArgs',
    'DashboardTileFilterConfigArgs',
    'DashboardTileFilterConfigChartConfigArgs',
    'DashboardTileFilterConfigChartConfigResultMetadataArgs',
    'DashboardTileFilterConfigChartConfigResultMetadataConfigArgs',
    'DashboardTileFilterConfigChartConfigSeriesArgs',
    'DashboardTileFilterConfigChartConfigSeriesDimensionArgs',
    'DashboardTileFilterConfigFiltersArgs',
    'DashboardTileFilterConfigFiltersFilterArgs',
    'DashboardTileFilterConfigFiltersFilterMatchArgs',
    'DashboardTileFilterManagementZoneArgs',
    'DashboardTileVisualizationConfigArgs',
    'DashboardsAllowlistAllowlistArgs',
    'DashboardsAllowlistAllowlistUrlpatternArgs',
    'DashboardsGeneralDefaultDashboardListArgs',
    'DashboardsGeneralDefaultDashboardListDefaultDashboardArgs',
    'DashboardsPresetsDashboardPresetsListArgs',
    'DashboardsPresetsDashboardPresetsListDashboardPresetArgs',
    'DataPrivacyDataCollectionArgs',
    'DataPrivacyDoNotTrackArgs',
    'DataPrivacyMaskingArgs',
    'DataPrivacyUserTrackingArgs',
    'DatabaseAnomaliesDbConnectFailuresArgs',
    'DatabaseAnomaliesFailureRateArgs',
    'DatabaseAnomaliesFailureRateAutoArgs',
    'DatabaseAnomaliesFailureRateThresholdsArgs',
    'DatabaseAnomaliesLoadArgs',
    'DatabaseAnomaliesLoadDropsArgs',
    'DatabaseAnomaliesLoadSpikesArgs',
    'DatabaseAnomaliesResponseTimeArgs',
    'DatabaseAnomaliesResponseTimeAutoArgs',
    'DatabaseAnomaliesResponseTimeThresholdsArgs',
    'DatabaseAnomaliesV2DatabaseConnectionsArgs',
    'DatabaseAnomaliesV2FailureRateArgs',
    'DatabaseAnomaliesV2FailureRateAutoDetectionArgs',
    'DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtectionArgs',
    'DatabaseAnomaliesV2FailureRateFixedDetectionArgs',
    'DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtectionArgs',
    'DatabaseAnomaliesV2LoadDropsArgs',
    'DatabaseAnomaliesV2LoadSpikesArgs',
    'DatabaseAnomaliesV2ResponseTimeArgs',
    'DatabaseAnomaliesV2ResponseTimeAutoDetectionArgs',
    'DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtectionArgs',
    'DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAllArgs',
    'DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowestArgs',
    'DatabaseAnomaliesV2ResponseTimeFixedDetectionArgs',
    'DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtectionArgs',
    'DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAllArgs',
    'DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowestArgs',
    'DduPoolEventsArgs',
    'DduPoolLogMonitoringArgs',
    'DduPoolMetricsArgs',
    'DduPoolServerlessArgs',
    'DduPoolTracesArgs',
    'DeclarativeGroupingDetectionArgs',
    'DeclarativeGroupingDetectionProcessDefinitionArgs',
    'DeclarativeGroupingDetectionProcessDefinitionRulesArgs',
    'DeclarativeGroupingDetectionProcessDefinitionRulesRuleArgs',
    'DiskAnomaliesDiskNameArgs',
    'DiskAnomaliesTagsArgs',
    'DiskAnomaliesTagsFilterArgs',
    'DiskAnomaliesV2DiskArgs',
    'DiskAnomaliesV2DiskDiskLowInodesDetectionArgs',
    'DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholdsArgs',
    'DiskAnomaliesV2DiskDiskLowSpaceDetectionArgs',
    'DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholdsArgs',
    'DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionArgs',
    'DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholdsArgs',
    'DiskAnomalyRulesDiskNameFilterArgs',
    'DiskAnomalyRulesSampleLimitArgs',
    'DiskOptionsExclusionsArgs',
    'DiskOptionsExclusionsExclusionArgs',
    'DiskSpecificAnomaliesV2DiskLowInodesDetectionArgs',
    'DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholdsArgs',
    'DiskSpecificAnomaliesV2DiskLowSpaceDetectionArgs',
    'DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholdsArgs',
    'DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs',
    'DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs',
    'EnvironmentQuotasArgs',
    'EnvironmentQuotasDdusArgs',
    'EnvironmentQuotasDemUnitsArgs',
    'EnvironmentQuotasLogsArgs',
    'EnvironmentQuotasSyntheticArgs',
    'EnvironmentQuotasUserSessionsArgs',
    'EnvironmentStorageArgs',
    'EnvironmentStorageLimitsArgs',
    'EnvironmentStorageRetentionArgs',
    'FailureDetectionParametersBrokenLinksArgs',
    'FailureDetectionParametersExceptionRulesArgs',
    'FailureDetectionParametersExceptionRulesCustomErrorRulesArgs',
    'FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleArgs',
    'FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleConditionArgs',
    'FailureDetectionParametersExceptionRulesCustomHandledExceptionsArgs',
    'FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledExceptionArgs',
    'FailureDetectionParametersExceptionRulesIgnoredExceptionsArgs',
    'FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledExceptionArgs',
    'FailureDetectionParametersExceptionRulesSuccessForcingExceptionsArgs',
    'FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledExceptionArgs',
    'FailureDetectionParametersHttpResponseCodesArgs',
    'FailureDetectionRulesConditionsArgs',
    'FailureDetectionRulesConditionsConditionArgs',
    'FailureDetectionRulesConditionsConditionPredicateArgs',
    'GenericRelationshipsSourcesArgs',
    'GenericRelationshipsSourcesSourceArgs',
    'GenericRelationshipsSourcesSourceMappingRulesArgs',
    'GenericRelationshipsSourcesSourceMappingRulesMappingRuleArgs',
    'GenericTypesRulesArgs',
    'GenericTypesRulesRuleArgs',
    'GenericTypesRulesRuleAttributesArgs',
    'GenericTypesRulesRuleAttributesAttributeArgs',
    'GenericTypesRulesRuleRequiredDimensionsArgs',
    'GenericTypesRulesRuleRequiredDimensionsRequiredDimensionArgs',
    'GenericTypesRulesRuleSourcesArgs',
    'GenericTypesRulesRuleSourcesSourceArgs',
    'HostAnomaliesConnectionsArgs',
    'HostAnomaliesCpuArgs',
    'HostAnomaliesCpuThresholdsArgs',
    'HostAnomaliesDisksArgs',
    'HostAnomaliesDisksInodesArgs',
    'HostAnomaliesDisksInodesThresholdsArgs',
    'HostAnomaliesDisksSpaceArgs',
    'HostAnomaliesDisksSpaceThresholdsArgs',
    'HostAnomaliesDisksSpeedArgs',
    'HostAnomaliesDisksSpeedThresholdsArgs',
    'HostAnomaliesGcArgs',
    'HostAnomaliesGcThresholdsArgs',
    'HostAnomaliesJavaArgs',
    'HostAnomaliesJavaOutOfMemoryArgs',
    'HostAnomaliesJavaOutOfMemoryThresholdsArgs',
    'HostAnomaliesJavaOutOfThreadsArgs',
    'HostAnomaliesJavaOutOfThreadsThresholdsArgs',
    'HostAnomaliesMemoryArgs',
    'HostAnomaliesMemoryThresholdsArgs',
    'HostAnomaliesMemoryThresholdsLinuxArgs',
    'HostAnomaliesMemoryThresholdsWindowsArgs',
    'HostAnomaliesNetworkArgs',
    'HostAnomaliesNetworkConnectivityArgs',
    'HostAnomaliesNetworkConnectivityThresholdsArgs',
    'HostAnomaliesNetworkDroppedPacketsArgs',
    'HostAnomaliesNetworkDroppedPacketsThresholdsArgs',
    'HostAnomaliesNetworkErrorsArgs',
    'HostAnomaliesNetworkErrorsThresholdsArgs',
    'HostAnomaliesNetworkRetransmissionArgs',
    'HostAnomaliesNetworkRetransmissionThresholdsArgs',
    'HostAnomaliesNetworkUtilizationArgs',
    'HostAnomaliesNetworkUtilizationThresholdsArgs',
    'HostAnomaliesV2HostArgs',
    'HostAnomaliesV2HostConnectionLostDetectionArgs',
    'HostAnomaliesV2HostHighCpuSaturationDetectionArgs',
    'HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsArgs',
    'HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholdsArgs',
    'HostAnomaliesV2HostHighGcActivityDetectionArgs',
    'HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsArgs',
    'HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholdsArgs',
    'HostAnomaliesV2HostHighMemoryDetectionArgs',
    'HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsArgs',
    'HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholdsArgs',
    'HostAnomaliesV2HostHighSystemLoadDetectionArgs',
    'HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsArgs',
    'HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholdsArgs',
    'HostAnomaliesV2HostOutOfMemoryDetectionArgs',
    'HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsArgs',
    'HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholdsArgs',
    'HostAnomaliesV2HostOutOfThreadsDetectionArgs',
    'HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsArgs',
    'HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholdsArgs',
    'HostAnomaliesV2NetworkArgs',
    'HostAnomaliesV2NetworkHighNetworkDetectionArgs',
    'HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsArgs',
    'HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholdsArgs',
    'HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionArgs',
    'HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsArgs',
    'HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholdsArgs',
    'HostAnomaliesV2NetworkNetworkErrorsDetectionArgs',
    'HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsArgs',
    'HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholdsArgs',
    'HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionArgs',
    'HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsArgs',
    'HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholdsArgs',
    'HostAnomaliesV2NetworkNetworkTcpProblemsDetectionArgs',
    'HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsArgs',
    'HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholdsArgs',
    'HostNamingConditionArgs',
    'HostNamingConditionConditionArgs',
    'HostNamingConditionConditionApplicationTypeArgs',
    'HostNamingConditionConditionApplicationTypeComparisonArgs',
    'HostNamingConditionConditionAzureComputeModeArgs',
    'HostNamingConditionConditionAzureComputeModeComparisonArgs',
    'HostNamingConditionConditionAzureSkuComparisionArgs',
    'HostNamingConditionConditionAzureSkusArgs',
    'HostNamingConditionConditionBaseComparisonBasicArgs',
    'HostNamingConditionConditionBaseConditionKeyArgs',
    'HostNamingConditionConditionBitnessArgs',
    'HostNamingConditionConditionBitnessComparisionArgs',
    'HostNamingConditionConditionCloudTypeArgs',
    'HostNamingConditionConditionCloudTypeComparisonArgs',
    'HostNamingConditionConditionComparisonArgs',
    'HostNamingConditionConditionCustomApplicationTypeArgs',
    'HostNamingConditionConditionCustomApplicationTypeComparisonArgs',
    'HostNamingConditionConditionCustomHostMetadataArgs',
    'HostNamingConditionConditionCustomHostMetadataConditionKeyArgs',
    'HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs',
    'HostNamingConditionConditionCustomHostMetadataDynamicKeyArgs',
    'HostNamingConditionConditionCustomProcessMetadataArgs',
    'HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs',
    'HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs',
    'HostNamingConditionConditionCustomProcessMetadataDynamicKeyArgs',
    'HostNamingConditionConditionDatabaseTopologyArgs',
    'HostNamingConditionConditionDatabaseTopologyComparisonArgs',
    'HostNamingConditionConditionDcrumDecoderArgs',
    'HostNamingConditionConditionDcrumDecoderComparisonArgs',
    'HostNamingConditionConditionEntityArgs',
    'HostNamingConditionConditionEntityIdComparisonArgs',
    'HostNamingConditionConditionHostTechArgs',
    'HostNamingConditionConditionHostTechValueArgs',
    'HostNamingConditionConditionHypervisorArgs',
    'HostNamingConditionConditionHypervisorTypeComparisionArgs',
    'HostNamingConditionConditionIndexedNameArgs',
    'HostNamingConditionConditionIndexedNameComparisonArgs',
    'HostNamingConditionConditionIndexedStringArgs',
    'HostNamingConditionConditionIndexedStringComparisonArgs',
    'HostNamingConditionConditionIndexedTagArgs',
    'HostNamingConditionConditionIndexedTagComparisonArgs',
    'HostNamingConditionConditionIndexedTagComparisonValueArgs',
    'HostNamingConditionConditionIndexedTagValueArgs',
    'HostNamingConditionConditionIntegerArgs',
    'HostNamingConditionConditionIntegerComparisonArgs',
    'HostNamingConditionConditionIpaddressArgs',
    'HostNamingConditionConditionIpaddressComparisonArgs',
    'HostNamingConditionConditionKeyArgs',
    'HostNamingConditionConditionMobilePlatformArgs',
    'HostNamingConditionConditionMobilePlatformComparisonArgs',
    'HostNamingConditionConditionOsArchArgs',
    'HostNamingConditionConditionOsTypeArgs',
    'HostNamingConditionConditionOsarchitectureComparisonArgs',
    'HostNamingConditionConditionOstypeComparisonArgs',
    'HostNamingConditionConditionPaasTypeArgs',
    'HostNamingConditionConditionPaasTypeComparisonArgs',
    'HostNamingConditionConditionProcessMetadataArgs',
    'HostNamingConditionConditionProcessMetadataConditionKeyArgs',
    'HostNamingConditionConditionServiceTopologyArgs',
    'HostNamingConditionConditionServiceTopologyComparisonArgs',
    'HostNamingConditionConditionServiceTypeArgs',
    'HostNamingConditionConditionServiceTypeComparisonArgs',
    'HostNamingConditionConditionSimpleHostTechComparisonArgs',
    'HostNamingConditionConditionSimpleHostTechComparisonValueArgs',
    'HostNamingConditionConditionSimpleTechComparisonArgs',
    'HostNamingConditionConditionSimpleTechComparisonValueArgs',
    'HostNamingConditionConditionStringArgs',
    'HostNamingConditionConditionStringComparisonArgs',
    'HostNamingConditionConditionStringConditionKeyArgs',
    'HostNamingConditionConditionStringKeyArgs',
    'HostNamingConditionConditionSyntheticEngineArgs',
    'HostNamingConditionConditionSyntheticEngineTypeComparisonArgs',
    'HostNamingConditionConditionTagArgs',
    'HostNamingConditionConditionTagComparisonArgs',
    'HostNamingConditionConditionTagComparisonValueArgs',
    'HostNamingConditionConditionTagValueArgs',
    'HostNamingConditionConditionTechArgs',
    'HostNamingConditionConditionTechValueArgs',
    'HttpMonitorAnomalyDetectionArgs',
    'HttpMonitorAnomalyDetectionLoadingTimeThresholdArgs',
    'HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdArgs',
    'HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThresholdArgs',
    'HttpMonitorAnomalyDetectionOutageHandlingArgs',
    'HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs',
    'HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyArgs',
    'HttpMonitorCookiesCookiesArgs',
    'HttpMonitorCookiesCookiesCookieArgs',
    'HttpMonitorPerformanceThresholdsArgs',
    'HttpMonitorPerformanceThresholdsThresholdArgs',
    'HttpMonitorScriptArgs',
    'HttpMonitorScriptRequestArgs',
    'HttpMonitorScriptRequestAuthenticationArgs',
    'HttpMonitorScriptRequestConfigurationArgs',
    'HttpMonitorScriptRequestConfigurationHeadersArgs',
    'HttpMonitorScriptRequestConfigurationHeadersHeaderArgs',
    'HttpMonitorScriptRequestValidationArgs',
    'HttpMonitorScriptRequestValidationRuleArgs',
    'HttpMonitorTagArgs',
    'HttpMonitorTagTagArgs',
    'IamGroupPermissionsArgs',
    'IamGroupPermissionsPermissionArgs',
    'ImsBridgesQueueManagerArgs',
    'ImsBridgesQueueManagerQueueManagerArgs',
    'K8sClusterAnomaliesCpuRequestsSaturationArgs',
    'K8sClusterAnomaliesCpuRequestsSaturationConfigurationArgs',
    'K8sClusterAnomaliesMemoryRequestsSaturationArgs',
    'K8sClusterAnomaliesMemoryRequestsSaturationConfigurationArgs',
    'K8sClusterAnomaliesMonitoringIssuesArgs',
    'K8sClusterAnomaliesMonitoringIssuesConfigurationArgs',
    'K8sClusterAnomaliesPodsSaturationArgs',
    'K8sClusterAnomaliesPodsSaturationConfigurationArgs',
    'K8sClusterAnomaliesReadinessIssuesArgs',
    'K8sClusterAnomaliesReadinessIssuesConfigurationArgs',
    'K8sCredentialsEventsFieldSelectorArgs',
    'K8sNamespaceAnomaliesCpuLimitsQuotaSaturationArgs',
    'K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfigurationArgs',
    'K8sNamespaceAnomaliesCpuRequestsQuotaSaturationArgs',
    'K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfigurationArgs',
    'K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationArgs',
    'K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfigurationArgs',
    'K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationArgs',
    'K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfigurationArgs',
    'K8sNamespaceAnomaliesPodsQuotaSaturationArgs',
    'K8sNamespaceAnomaliesPodsQuotaSaturationConfigurationArgs',
    'K8sNodeAnomaliesCpuRequestsSaturationArgs',
    'K8sNodeAnomaliesCpuRequestsSaturationConfigurationArgs',
    'K8sNodeAnomaliesMemoryRequestsSaturationArgs',
    'K8sNodeAnomaliesMemoryRequestsSaturationConfigurationArgs',
    'K8sNodeAnomaliesNodeProblematicConditionArgs',
    'K8sNodeAnomaliesNodeProblematicConditionConfigurationArgs',
    'K8sNodeAnomaliesPodsSaturationArgs',
    'K8sNodeAnomaliesPodsSaturationConfigurationArgs',
    'K8sNodeAnomaliesReadinessIssuesArgs',
    'K8sNodeAnomaliesReadinessIssuesConfigurationArgs',
    'K8sPvcAnomaliesLowDiskSpaceCriticalArgs',
    'K8sPvcAnomaliesLowDiskSpaceCriticalConfigurationArgs',
    'K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs',
    'K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfigurationArgs',
    'K8sWorkloadAnomaliesContainerRestartsArgs',
    'K8sWorkloadAnomaliesContainerRestartsConfigurationArgs',
    'K8sWorkloadAnomaliesDeploymentStuckArgs',
    'K8sWorkloadAnomaliesDeploymentStuckConfigurationArgs',
    'K8sWorkloadAnomaliesHighCpuThrottlingArgs',
    'K8sWorkloadAnomaliesHighCpuThrottlingConfigurationArgs',
    'K8sWorkloadAnomaliesHighCpuUsageArgs',
    'K8sWorkloadAnomaliesHighCpuUsageConfigurationArgs',
    'K8sWorkloadAnomaliesHighMemoryUsageArgs',
    'K8sWorkloadAnomaliesHighMemoryUsageConfigurationArgs',
    'K8sWorkloadAnomaliesNotAllPodsReadyArgs',
    'K8sWorkloadAnomaliesNotAllPodsReadyConfigurationArgs',
    'K8sWorkloadAnomaliesPendingPodsArgs',
    'K8sWorkloadAnomaliesPendingPodsConfigurationArgs',
    'K8sWorkloadAnomaliesPodStuckInTerminatingArgs',
    'K8sWorkloadAnomaliesPodStuckInTerminatingConfigurationArgs',
    'K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs',
    'K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfigurationArgs',
    'KubernetesEventPatternsArgs',
    'KubernetesEventPatternsEventPatternArgs',
    'LogCustomSourceContextArgs',
    'LogCustomSourceContextContextArgs',
    'LogCustomSourceCustomLogSourceArgs',
    'LogEventsEventTemplateArgs',
    'LogEventsEventTemplateMetadataArgs',
    'LogEventsEventTemplateMetadataItemArgs',
    'LogProcessingProcessorDefinitionArgs',
    'LogProcessingRuleTestingArgs',
    'LogSensitiveDataMaskingMaskingArgs',
    'LogSensitiveDataMaskingMatchersArgs',
    'LogSensitiveDataMaskingMatchersMatcherArgs',
    'LogStorageMatchersArgs',
    'LogStorageMatchersMatcherArgs',
    'LogTimestampMatchersArgs',
    'LogTimestampMatchersMatcherArgs',
    'MaintenanceFilterArgs',
    'MaintenanceFilterFilterArgs',
    'MaintenanceGeneralPropertiesArgs',
    'MaintenanceScheduleArgs',
    'MaintenanceScheduleDailyRecurrenceArgs',
    'MaintenanceScheduleDailyRecurrenceRecurrenceRangeArgs',
    'MaintenanceScheduleDailyRecurrenceTimeWindowArgs',
    'MaintenanceScheduleMonthlyRecurrenceArgs',
    'MaintenanceScheduleMonthlyRecurrenceRecurrenceRangeArgs',
    'MaintenanceScheduleMonthlyRecurrenceTimeWindowArgs',
    'MaintenanceScheduleOnceRecurrenceArgs',
    'MaintenanceScheduleWeeklyRecurrenceArgs',
    'MaintenanceScheduleWeeklyRecurrenceRecurrenceRangeArgs',
    'MaintenanceScheduleWeeklyRecurrenceTimeWindowArgs',
    'MaintenanceWindowScheduleArgs',
    'MaintenanceWindowScheduleRecurrenceArgs',
    'MaintenanceWindowScopeArgs',
    'MaintenanceWindowScopeMatchArgs',
    'MaintenanceWindowScopeMatchTagArgs',
    'ManagementZoneDimensionalRuleArgs',
    'ManagementZoneDimensionalRuleConditionArgs',
    'ManagementZoneEntitySelectorBasedRuleArgs',
    'ManagementZoneRuleArgs',
    'ManagementZoneRuleConditionArgs',
    'ManagementZoneRuleConditionApplicationTypeArgs',
    'ManagementZoneRuleConditionApplicationTypeComparisonArgs',
    'ManagementZoneRuleConditionAzureComputeModeArgs',
    'ManagementZoneRuleConditionAzureComputeModeComparisonArgs',
    'ManagementZoneRuleConditionAzureSkuComparisionArgs',
    'ManagementZoneRuleConditionAzureSkusArgs',
    'ManagementZoneRuleConditionBaseComparisonBasicArgs',
    'ManagementZoneRuleConditionBaseConditionKeyArgs',
    'ManagementZoneRuleConditionBitnessArgs',
    'ManagementZoneRuleConditionBitnessComparisionArgs',
    'ManagementZoneRuleConditionCloudTypeArgs',
    'ManagementZoneRuleConditionCloudTypeComparisonArgs',
    'ManagementZoneRuleConditionComparisonArgs',
    'ManagementZoneRuleConditionCustomApplicationTypeArgs',
    'ManagementZoneRuleConditionCustomApplicationTypeComparisonArgs',
    'ManagementZoneRuleConditionCustomHostMetadataArgs',
    'ManagementZoneRuleConditionCustomHostMetadataConditionKeyArgs',
    'ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKeyArgs',
    'ManagementZoneRuleConditionCustomHostMetadataDynamicKeyArgs',
    'ManagementZoneRuleConditionCustomProcessMetadataArgs',
    'ManagementZoneRuleConditionCustomProcessMetadataConditionKeyArgs',
    'ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKeyArgs',
    'ManagementZoneRuleConditionCustomProcessMetadataDynamicKeyArgs',
    'ManagementZoneRuleConditionDatabaseTopologyArgs',
    'ManagementZoneRuleConditionDatabaseTopologyComparisonArgs',
    'ManagementZoneRuleConditionDcrumDecoderArgs',
    'ManagementZoneRuleConditionDcrumDecoderComparisonArgs',
    'ManagementZoneRuleConditionEntityArgs',
    'ManagementZoneRuleConditionEntityIdComparisonArgs',
    'ManagementZoneRuleConditionHostTechArgs',
    'ManagementZoneRuleConditionHostTechValueArgs',
    'ManagementZoneRuleConditionHypervisorArgs',
    'ManagementZoneRuleConditionHypervisorTypeComparisionArgs',
    'ManagementZoneRuleConditionIndexedNameArgs',
    'ManagementZoneRuleConditionIndexedNameComparisonArgs',
    'ManagementZoneRuleConditionIndexedStringArgs',
    'ManagementZoneRuleConditionIndexedStringComparisonArgs',
    'ManagementZoneRuleConditionIndexedTagArgs',
    'ManagementZoneRuleConditionIndexedTagComparisonArgs',
    'ManagementZoneRuleConditionIndexedTagComparisonValueArgs',
    'ManagementZoneRuleConditionIndexedTagValueArgs',
    'ManagementZoneRuleConditionIntegerArgs',
    'ManagementZoneRuleConditionIntegerComparisonArgs',
    'ManagementZoneRuleConditionIpaddressArgs',
    'ManagementZoneRuleConditionIpaddressComparisonArgs',
    'ManagementZoneRuleConditionKeyArgs',
    'ManagementZoneRuleConditionMobilePlatformArgs',
    'ManagementZoneRuleConditionMobilePlatformComparisonArgs',
    'ManagementZoneRuleConditionOsArchArgs',
    'ManagementZoneRuleConditionOsTypeArgs',
    'ManagementZoneRuleConditionOsarchitectureComparisonArgs',
    'ManagementZoneRuleConditionOstypeComparisonArgs',
    'ManagementZoneRuleConditionPaasTypeArgs',
    'ManagementZoneRuleConditionPaasTypeComparisonArgs',
    'ManagementZoneRuleConditionProcessMetadataArgs',
    'ManagementZoneRuleConditionProcessMetadataConditionKeyArgs',
    'ManagementZoneRuleConditionServiceTopologyArgs',
    'ManagementZoneRuleConditionServiceTopologyComparisonArgs',
    'ManagementZoneRuleConditionServiceTypeArgs',
    'ManagementZoneRuleConditionServiceTypeComparisonArgs',
    'ManagementZoneRuleConditionSimpleHostTechComparisonArgs',
    'ManagementZoneRuleConditionSimpleHostTechComparisonValueArgs',
    'ManagementZoneRuleConditionSimpleTechComparisonArgs',
    'ManagementZoneRuleConditionSimpleTechComparisonValueArgs',
    'ManagementZoneRuleConditionStringArgs',
    'ManagementZoneRuleConditionStringComparisonArgs',
    'ManagementZoneRuleConditionStringConditionKeyArgs',
    'ManagementZoneRuleConditionStringKeyArgs',
    'ManagementZoneRuleConditionSyntheticEngineArgs',
    'ManagementZoneRuleConditionSyntheticEngineTypeComparisonArgs',
    'ManagementZoneRuleConditionTagArgs',
    'ManagementZoneRuleConditionTagComparisonArgs',
    'ManagementZoneRuleConditionTagComparisonValueArgs',
    'ManagementZoneRuleConditionTagValueArgs',
    'ManagementZoneRuleConditionTechArgs',
    'ManagementZoneRuleConditionTechValueArgs',
    'ManagementZoneV2RulesArgs',
    'ManagementZoneV2RulesRuleArgs',
    'ManagementZoneV2RulesRuleAttributeRuleArgs',
    'ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsArgs',
    'ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsConditionArgs',
    'ManagementZoneV2RulesRuleDimensionRuleArgs',
    'ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsArgs',
    'ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsConditionArgs',
    'MetricEventsEventTemplateArgs',
    'MetricEventsEventTemplateMetadataArgs',
    'MetricEventsModelPropertiesArgs',
    'MetricEventsQueryDefinitionArgs',
    'MetricEventsQueryDefinitionDimensionFilterArgs',
    'MetricEventsQueryDefinitionDimensionFilterFilterArgs',
    'MetricEventsQueryDefinitionEntityFilterArgs',
    'MetricEventsQueryDefinitionEntityFilterConditionArgs',
    'MetricEventsQueryDefinitionEntityFilterConditionConditionArgs',
    'MetricMetadataDimensionsArgs',
    'MetricMetadataDimensionsDimensionArgs',
    'MetricMetadataMetricPropertiesArgs',
    'MobileAppAnomaliesErrorRateIncreaseArgs',
    'MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs',
    'MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs',
    'MobileAppAnomaliesSlowUserActionsArgs',
    'MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs',
    'MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralertingArgs',
    'MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAllArgs',
    'MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowestArgs',
    'MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs',
    'MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralertingArgs',
    'MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixedArgs',
    'MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowestArgs',
    'MobileAppAnomaliesUnexpectedHighLoadArgs',
    'MobileAppAnomaliesUnexpectedLowLoadArgs',
    'MobileAppCrashRateCrashRateIncreaseArgs',
    'MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs',
    'MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs',
    'MobileAppEnablementRumArgs',
    'MobileAppEnablementSessionReplayArgs',
    'MobileAppRequestErrorsErrorRulesArgs',
    'MobileAppRequestErrorsErrorRulesErrorRuleArgs',
    'MobileApplicationApdexArgs',
    'MobileApplicationPropertiesArgs',
    'MobileApplicationPropertiesApiValueArgs',
    'MobileApplicationPropertiesRequestAttributeArgs',
    'NetworkTrafficExcludeIpArgs',
    'NetworkTrafficExcludeIpIpAddressFormArgs',
    'NetworkTrafficExcludeNicArgs',
    'NetworkTrafficExcludeNicNicFormArgs',
    'NotificationAnsibleTowerArgs',
    'NotificationConfigArgs',
    'NotificationEmailArgs',
    'NotificationJiraArgs',
    'NotificationOpsGenieArgs',
    'NotificationPagerDutyArgs',
    'NotificationServiceNowArgs',
    'NotificationSlackArgs',
    'NotificationTrelloArgs',
    'NotificationVictorOpsArgs',
    'NotificationWebHookArgs',
    'NotificationWebHookHeaderArgs',
    'NotificationXmattersArgs',
    'NotificationXmattersHeaderArgs',
    'OneagentUpdatesMaintenanceWindowsArgs',
    'OneagentUpdatesMaintenanceWindowsMaintenanceWindowArgs',
    'OpentelemetryMetricsAdditionalAttributesArgs',
    'OpentelemetryMetricsAdditionalAttributesAdditionalAttributeArgs',
    'OpentelemetryMetricsToDropAttributesArgs',
    'OpentelemetryMetricsToDropAttributesToDropAttributeArgs',
    'OsServicesDetectionConditionsLinuxArgs',
    'OsServicesDetectionConditionsLinuxLinuxDetectionConditionArgs',
    'OsServicesDetectionConditionsWindowsArgs',
    'OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs',
    'OsServicesMetadataArgs',
    'OsServicesMetadataItemArgs',
    'OwnershipConfigOwnershipIdentifiersArgs',
    'OwnershipConfigOwnershipIdentifiersOwnershipIdentifierArgs',
    'OwnershipTeamsAdditionalInformationArgs',
    'OwnershipTeamsAdditionalInformationAdditionalInformationArgs',
    'OwnershipTeamsContactDetailsArgs',
    'OwnershipTeamsContactDetailsContactDetailArgs',
    'OwnershipTeamsContactDetailsContactDetailJiraArgs',
    'OwnershipTeamsLinksArgs',
    'OwnershipTeamsLinksLinkArgs',
    'OwnershipTeamsResponsibilitiesArgs',
    'OwnershipTeamsSupplementaryIdentifiersArgs',
    'OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifierArgs',
    'PgAnomaliesAvailabilityArgs',
    'ProcessAvailabilityMetadataArgs',
    'ProcessAvailabilityMetadataItemArgs',
    'ProcessAvailabilityRulesArgs',
    'ProcessAvailabilityRulesRuleArgs',
    'ProcessGroupDetectionGroupExtractionArgs',
    'ProcessGroupDetectionGroupExtractionDelimiterArgs',
    'ProcessGroupDetectionInstanceExtractionArgs',
    'ProcessGroupDetectionInstanceExtractionDelimiterArgs',
    'ProcessGroupDetectionProcessDetectionArgs',
    'ProcessMonitoringRuleConditionArgs',
    'ProcessgroupNamingConditionArgs',
    'ProcessgroupNamingConditionConditionArgs',
    'ProcessgroupNamingConditionConditionApplicationTypeArgs',
    'ProcessgroupNamingConditionConditionApplicationTypeComparisonArgs',
    'ProcessgroupNamingConditionConditionAzureComputeModeArgs',
    'ProcessgroupNamingConditionConditionAzureComputeModeComparisonArgs',
    'ProcessgroupNamingConditionConditionAzureSkuComparisionArgs',
    'ProcessgroupNamingConditionConditionAzureSkusArgs',
    'ProcessgroupNamingConditionConditionBaseComparisonBasicArgs',
    'ProcessgroupNamingConditionConditionBaseConditionKeyArgs',
    'ProcessgroupNamingConditionConditionBitnessArgs',
    'ProcessgroupNamingConditionConditionBitnessComparisionArgs',
    'ProcessgroupNamingConditionConditionCloudTypeArgs',
    'ProcessgroupNamingConditionConditionCloudTypeComparisonArgs',
    'ProcessgroupNamingConditionConditionComparisonArgs',
    'ProcessgroupNamingConditionConditionCustomApplicationTypeArgs',
    'ProcessgroupNamingConditionConditionCustomApplicationTypeComparisonArgs',
    'ProcessgroupNamingConditionConditionCustomHostMetadataArgs',
    'ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyArgs',
    'ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs',
    'ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKeyArgs',
    'ProcessgroupNamingConditionConditionCustomProcessMetadataArgs',
    'ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyArgs',
    'ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs',
    'ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKeyArgs',
    'ProcessgroupNamingConditionConditionDatabaseTopologyArgs',
    'ProcessgroupNamingConditionConditionDatabaseTopologyComparisonArgs',
    'ProcessgroupNamingConditionConditionDcrumDecoderArgs',
    'ProcessgroupNamingConditionConditionDcrumDecoderComparisonArgs',
    'ProcessgroupNamingConditionConditionEntityArgs',
    'ProcessgroupNamingConditionConditionEntityIdComparisonArgs',
    'ProcessgroupNamingConditionConditionHostTechArgs',
    'ProcessgroupNamingConditionConditionHostTechValueArgs',
    'ProcessgroupNamingConditionConditionHypervisorArgs',
    'ProcessgroupNamingConditionConditionHypervisorTypeComparisionArgs',
    'ProcessgroupNamingConditionConditionIndexedNameArgs',
    'ProcessgroupNamingConditionConditionIndexedNameComparisonArgs',
    'ProcessgroupNamingConditionConditionIndexedStringArgs',
    'ProcessgroupNamingConditionConditionIndexedStringComparisonArgs',
    'ProcessgroupNamingConditionConditionIndexedTagArgs',
    'ProcessgroupNamingConditionConditionIndexedTagComparisonArgs',
    'ProcessgroupNamingConditionConditionIndexedTagComparisonValueArgs',
    'ProcessgroupNamingConditionConditionIndexedTagValueArgs',
    'ProcessgroupNamingConditionConditionIntegerArgs',
    'ProcessgroupNamingConditionConditionIntegerComparisonArgs',
    'ProcessgroupNamingConditionConditionIpaddressArgs',
    'ProcessgroupNamingConditionConditionIpaddressComparisonArgs',
    'ProcessgroupNamingConditionConditionKeyArgs',
    'ProcessgroupNamingConditionConditionMobilePlatformArgs',
    'ProcessgroupNamingConditionConditionMobilePlatformComparisonArgs',
    'ProcessgroupNamingConditionConditionOsArchArgs',
    'ProcessgroupNamingConditionConditionOsTypeArgs',
    'ProcessgroupNamingConditionConditionOsarchitectureComparisonArgs',
    'ProcessgroupNamingConditionConditionOstypeComparisonArgs',
    'ProcessgroupNamingConditionConditionPaasTypeArgs',
    'ProcessgroupNamingConditionConditionPaasTypeComparisonArgs',
    'ProcessgroupNamingConditionConditionProcessMetadataArgs',
    'ProcessgroupNamingConditionConditionProcessMetadataConditionKeyArgs',
    'ProcessgroupNamingConditionConditionServiceTopologyArgs',
    'ProcessgroupNamingConditionConditionServiceTopologyComparisonArgs',
    'ProcessgroupNamingConditionConditionServiceTypeArgs',
    'ProcessgroupNamingConditionConditionServiceTypeComparisonArgs',
    'ProcessgroupNamingConditionConditionSimpleHostTechComparisonArgs',
    'ProcessgroupNamingConditionConditionSimpleHostTechComparisonValueArgs',
    'ProcessgroupNamingConditionConditionSimpleTechComparisonArgs',
    'ProcessgroupNamingConditionConditionSimpleTechComparisonValueArgs',
    'ProcessgroupNamingConditionConditionStringArgs',
    'ProcessgroupNamingConditionConditionStringComparisonArgs',
    'ProcessgroupNamingConditionConditionStringConditionKeyArgs',
    'ProcessgroupNamingConditionConditionStringKeyArgs',
    'ProcessgroupNamingConditionConditionSyntheticEngineArgs',
    'ProcessgroupNamingConditionConditionSyntheticEngineTypeComparisonArgs',
    'ProcessgroupNamingConditionConditionTagArgs',
    'ProcessgroupNamingConditionConditionTagComparisonArgs',
    'ProcessgroupNamingConditionConditionTagComparisonValueArgs',
    'ProcessgroupNamingConditionConditionTagValueArgs',
    'ProcessgroupNamingConditionConditionTechArgs',
    'ProcessgroupNamingConditionConditionTechValueArgs',
    'QueueManagerAliasQueueArgs',
    'QueueManagerAliasQueueAliasQueueArgs',
    'QueueManagerClusterQueueArgs',
    'QueueManagerClusterQueueClusterQueueArgs',
    'QueueManagerRemoteQueueArgs',
    'QueueManagerRemoteQueueRemoteQueueArgs',
    'RequestAttributeDataSourceArgs',
    'RequestAttributeDataSourceCicsSdkMethodNodeConditionArgs',
    'RequestAttributeDataSourceIibLabelMethodNodeConditionArgs',
    'RequestAttributeDataSourceIibMethodNodeConditionArgs',
    'RequestAttributeDataSourceMethodArgs',
    'RequestAttributeDataSourceMethodMethodArgs',
    'RequestAttributeDataSourceScopeArgs',
    'RequestAttributeDataSourceValueProcessingArgs',
    'RequestAttributeDataSourceValueProcessingExtractSubstringArgs',
    'RequestAttributeDataSourceValueProcessingValueConditionArgs',
    'RequestNamingConditionsArgs',
    'RequestNamingConditionsConditionArgs',
    'RequestNamingConditionsConditionComparisonArgs',
    'RequestNamingConditionsConditionComparisonBooleanArgs',
    'RequestNamingConditionsConditionComparisonEsbInputNodeTypeArgs',
    'RequestNamingConditionsConditionComparisonFailedStateArgs',
    'RequestNamingConditionsConditionComparisonFailureReasonArgs',
    'RequestNamingConditionsConditionComparisonFastStringArgs',
    'RequestNamingConditionsConditionComparisonFlawStateArgs',
    'RequestNamingConditionsConditionComparisonGenericArgs',
    'RequestNamingConditionsConditionComparisonHttpMethodArgs',
    'RequestNamingConditionsConditionComparisonHttpStatusClassArgs',
    'RequestNamingConditionsConditionComparisonIibInputNodeTypeArgs',
    'RequestNamingConditionsConditionComparisonNumberArgs',
    'RequestNamingConditionsConditionComparisonNumberRequestAttributeArgs',
    'RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceArgs',
    'RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagArgs',
    'RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyArgs',
    'RequestNamingConditionsConditionComparisonServiceTypeArgs',
    'RequestNamingConditionsConditionComparisonStringArgs',
    'RequestNamingConditionsConditionComparisonStringRequestAttributeArgs',
    'RequestNamingConditionsConditionComparisonStringRequestAttributeSourceArgs',
    'RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagArgs',
    'RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyArgs',
    'RequestNamingConditionsConditionComparisonTagArgs',
    'RequestNamingConditionsConditionComparisonTagValueArgs',
    'RequestNamingConditionsConditionComparisonTagValuesArgs',
    'RequestNamingConditionsConditionComparisonTagValuesValueArgs',
    'RequestNamingConditionsConditionComparisonZosCallTypeArgs',
    'RequestNamingPlaceholdersArgs',
    'RequestNamingPlaceholdersPlaceholderArgs',
    'RequestNamingPlaceholdersPlaceholderSourceArgs',
    'RequestNamingPlaceholdersPlaceholderSourceServiceTagArgs',
    'RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKeyArgs',
    'ResourceAttributesKeysArgs',
    'ResourceAttributesKeysRuleArgs',
    'RumProviderBreakdownDomainNamePatternListArgs',
    'RumProviderBreakdownDomainNamePatternListDomainNamePatternArgs',
    'ServiceAnomaliesFailureRatesArgs',
    'ServiceAnomaliesFailureRatesAutoArgs',
    'ServiceAnomaliesFailureRatesThresholdsArgs',
    'ServiceAnomaliesLoadArgs',
    'ServiceAnomaliesLoadDropsArgs',
    'ServiceAnomaliesLoadSpikesArgs',
    'ServiceAnomaliesResponseTimesArgs',
    'ServiceAnomaliesResponseTimesAutoArgs',
    'ServiceAnomaliesResponseTimesThresholdsArgs',
    'ServiceAnomaliesV2FailureRateArgs',
    'ServiceAnomaliesV2FailureRateAutoDetectionArgs',
    'ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtectionArgs',
    'ServiceAnomaliesV2FailureRateFixedDetectionArgs',
    'ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtectionArgs',
    'ServiceAnomaliesV2LoadDropsArgs',
    'ServiceAnomaliesV2LoadSpikesArgs',
    'ServiceAnomaliesV2ResponseTimeArgs',
    'ServiceAnomaliesV2ResponseTimeAutoDetectionArgs',
    'ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtectionArgs',
    'ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAllArgs',
    'ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowestArgs',
    'ServiceAnomaliesV2ResponseTimeFixedDetectionArgs',
    'ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtectionArgs',
    'ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAllArgs',
    'ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowestArgs',
    'ServiceExternalWebRequestConditionsArgs',
    'ServiceExternalWebRequestConditionsConditionArgs',
    'ServiceExternalWebRequestIdContributorsArgs',
    'ServiceExternalWebRequestIdContributorsApplicationIdArgs',
    'ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorArgs',
    'ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsArgs',
    'ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs',
    'ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverrideArgs',
    'ServiceExternalWebRequestIdContributorsContextRootArgs',
    'ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorArgs',
    'ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsArgs',
    'ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs',
    'ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverrideArgs',
    'ServiceExternalWebRequestIdContributorsPublicDomainNameArgs',
    'ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorArgs',
    'ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsArgs',
    'ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformationArgs',
    'ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverrideArgs',
    'ServiceExternalWebServiceConditionsArgs',
    'ServiceExternalWebServiceConditionsConditionArgs',
    'ServiceExternalWebServiceIdContributorsArgs',
    'ServiceExternalWebServiceIdContributorsUrlPathArgs',
    'ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorArgs',
    'ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsArgs',
    'ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformationArgs',
    'ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverrideArgs',
    'ServiceFailureExceptionRulesArgs',
    'ServiceFailureExceptionRulesCustomErrorRulesArgs',
    'ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleArgs',
    'ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleConditionArgs',
    'ServiceFailureExceptionRulesCustomHandledExceptionsArgs',
    'ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledExceptionArgs',
    'ServiceFailureExceptionRulesIgnoredExceptionsArgs',
    'ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledExceptionArgs',
    'ServiceFailureExceptionRulesSuccessForcingExceptionsArgs',
    'ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledExceptionArgs',
    'ServiceFullWebRequestConditionsArgs',
    'ServiceFullWebRequestConditionsConditionArgs',
    'ServiceFullWebRequestIdContributorsArgs',
    'ServiceFullWebRequestIdContributorsApplicationIdArgs',
    'ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorArgs',
    'ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsArgs',
    'ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs',
    'ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverrideArgs',
    'ServiceFullWebRequestIdContributorsContextRootArgs',
    'ServiceFullWebRequestIdContributorsContextRootServiceIdContributorArgs',
    'ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsArgs',
    'ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs',
    'ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverrideArgs',
    'ServiceFullWebRequestIdContributorsServerNameArgs',
    'ServiceFullWebRequestIdContributorsServerNameServiceIdContributorArgs',
    'ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsArgs',
    'ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformationArgs',
    'ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverrideArgs',
    'ServiceFullWebServiceConditionsArgs',
    'ServiceFullWebServiceConditionsConditionArgs',
    'ServiceFullWebServiceIdContributorsArgs',
    'ServiceFullWebServiceIdContributorsApplicationIdArgs',
    'ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorArgs',
    'ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsArgs',
    'ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs',
    'ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverrideArgs',
    'ServiceFullWebServiceIdContributorsContextRootArgs',
    'ServiceFullWebServiceIdContributorsContextRootServiceIdContributorArgs',
    'ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsArgs',
    'ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs',
    'ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverrideArgs',
    'ServiceFullWebServiceIdContributorsServerNameArgs',
    'ServiceFullWebServiceIdContributorsServerNameServiceIdContributorArgs',
    'ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsArgs',
    'ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformationArgs',
    'ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverrideArgs',
    'ServiceFullWebServiceIdContributorsWebServiceNameArgs',
    'ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorArgs',
    'ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsArgs',
    'ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformationArgs',
    'ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverrideArgs',
    'ServiceFullWebServiceIdContributorsWebServiceNamespaceArgs',
    'ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorArgs',
    'ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsArgs',
    'ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformationArgs',
    'ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverrideArgs',
    'ServiceHttpFailureBrokenLinksArgs',
    'ServiceHttpFailureHttpResponseCodesArgs',
    'ServiceNamingConditionArgs',
    'ServiceNamingConditionConditionArgs',
    'ServiceNamingConditionConditionApplicationTypeArgs',
    'ServiceNamingConditionConditionApplicationTypeComparisonArgs',
    'ServiceNamingConditionConditionAzureComputeModeArgs',
    'ServiceNamingConditionConditionAzureComputeModeComparisonArgs',
    'ServiceNamingConditionConditionAzureSkuComparisionArgs',
    'ServiceNamingConditionConditionAzureSkusArgs',
    'ServiceNamingConditionConditionBaseComparisonBasicArgs',
    'ServiceNamingConditionConditionBaseConditionKeyArgs',
    'ServiceNamingConditionConditionBitnessArgs',
    'ServiceNamingConditionConditionBitnessComparisionArgs',
    'ServiceNamingConditionConditionCloudTypeArgs',
    'ServiceNamingConditionConditionCloudTypeComparisonArgs',
    'ServiceNamingConditionConditionComparisonArgs',
    'ServiceNamingConditionConditionCustomApplicationTypeArgs',
    'ServiceNamingConditionConditionCustomApplicationTypeComparisonArgs',
    'ServiceNamingConditionConditionCustomHostMetadataArgs',
    'ServiceNamingConditionConditionCustomHostMetadataConditionKeyArgs',
    'ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs',
    'ServiceNamingConditionConditionCustomHostMetadataDynamicKeyArgs',
    'ServiceNamingConditionConditionCustomProcessMetadataArgs',
    'ServiceNamingConditionConditionCustomProcessMetadataConditionKeyArgs',
    'ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs',
    'ServiceNamingConditionConditionCustomProcessMetadataDynamicKeyArgs',
    'ServiceNamingConditionConditionDatabaseTopologyArgs',
    'ServiceNamingConditionConditionDatabaseTopologyComparisonArgs',
    'ServiceNamingConditionConditionDcrumDecoderArgs',
    'ServiceNamingConditionConditionDcrumDecoderComparisonArgs',
    'ServiceNamingConditionConditionEntityArgs',
    'ServiceNamingConditionConditionEntityIdComparisonArgs',
    'ServiceNamingConditionConditionHostTechArgs',
    'ServiceNamingConditionConditionHostTechValueArgs',
    'ServiceNamingConditionConditionHypervisorArgs',
    'ServiceNamingConditionConditionHypervisorTypeComparisionArgs',
    'ServiceNamingConditionConditionIndexedNameArgs',
    'ServiceNamingConditionConditionIndexedNameComparisonArgs',
    'ServiceNamingConditionConditionIndexedStringArgs',
    'ServiceNamingConditionConditionIndexedStringComparisonArgs',
    'ServiceNamingConditionConditionIndexedTagArgs',
    'ServiceNamingConditionConditionIndexedTagComparisonArgs',
    'ServiceNamingConditionConditionIndexedTagComparisonValueArgs',
    'ServiceNamingConditionConditionIndexedTagValueArgs',
    'ServiceNamingConditionConditionIntegerArgs',
    'ServiceNamingConditionConditionIntegerComparisonArgs',
    'ServiceNamingConditionConditionIpaddressArgs',
    'ServiceNamingConditionConditionIpaddressComparisonArgs',
    'ServiceNamingConditionConditionKeyArgs',
    'ServiceNamingConditionConditionMobilePlatformArgs',
    'ServiceNamingConditionConditionMobilePlatformComparisonArgs',
    'ServiceNamingConditionConditionOsArchArgs',
    'ServiceNamingConditionConditionOsTypeArgs',
    'ServiceNamingConditionConditionOsarchitectureComparisonArgs',
    'ServiceNamingConditionConditionOstypeComparisonArgs',
    'ServiceNamingConditionConditionPaasTypeArgs',
    'ServiceNamingConditionConditionPaasTypeComparisonArgs',
    'ServiceNamingConditionConditionProcessMetadataArgs',
    'ServiceNamingConditionConditionProcessMetadataConditionKeyArgs',
    'ServiceNamingConditionConditionServiceTopologyArgs',
    'ServiceNamingConditionConditionServiceTopologyComparisonArgs',
    'ServiceNamingConditionConditionServiceTypeArgs',
    'ServiceNamingConditionConditionServiceTypeComparisonArgs',
    'ServiceNamingConditionConditionSimpleHostTechComparisonArgs',
    'ServiceNamingConditionConditionSimpleHostTechComparisonValueArgs',
    'ServiceNamingConditionConditionSimpleTechComparisonArgs',
    'ServiceNamingConditionConditionSimpleTechComparisonValueArgs',
    'ServiceNamingConditionConditionStringArgs',
    'ServiceNamingConditionConditionStringComparisonArgs',
    'ServiceNamingConditionConditionStringConditionKeyArgs',
    'ServiceNamingConditionConditionStringKeyArgs',
    'ServiceNamingConditionConditionSyntheticEngineArgs',
    'ServiceNamingConditionConditionSyntheticEngineTypeComparisonArgs',
    'ServiceNamingConditionConditionTagArgs',
    'ServiceNamingConditionConditionTagComparisonArgs',
    'ServiceNamingConditionConditionTagComparisonValueArgs',
    'ServiceNamingConditionConditionTagValueArgs',
    'ServiceNamingConditionConditionTechArgs',
    'ServiceNamingConditionConditionTechValueArgs',
    'SessionReplayWebPrivacyMaskingPresetsArgs',
    'SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesArgs',
    'SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRuleArgs',
    'SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesArgs',
    'SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRuleArgs',
    'SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesArgs',
    'SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRuleArgs',
    'SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesArgs',
    'SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRuleArgs',
    'SloV2ErrorBudgetBurnRateArgs',
    'SpanCaptureRuleMatchesArgs',
    'SpanCaptureRuleMatchesMatchArgs',
    'SpanContextPropagationMatchesArgs',
    'SpanContextPropagationMatchesMatchArgs',
    'SpanEntryPointMatchesArgs',
    'SpanEntryPointMatchesMatchArgs',
    'UpdateWindowsDailyRecurrenceArgs',
    'UpdateWindowsDailyRecurrenceRecurrenceRangeArgs',
    'UpdateWindowsDailyRecurrenceUpdateTimeArgs',
    'UpdateWindowsMonthlyRecurrenceArgs',
    'UpdateWindowsMonthlyRecurrenceRecurrenceRangeArgs',
    'UpdateWindowsMonthlyRecurrenceUpdateTimeArgs',
    'UpdateWindowsOnceRecurrenceArgs',
    'UpdateWindowsOnceRecurrenceRecurrenceRangeArgs',
    'UpdateWindowsWeeklyRecurrenceArgs',
    'UpdateWindowsWeeklyRecurrenceRecurrenceRangeArgs',
    'UpdateWindowsWeeklyRecurrenceSelectedWeekDaysArgs',
    'UpdateWindowsWeeklyRecurrenceUpdateTimeArgs',
    'UserActionMetricsFiltersArgs',
    'UserActionMetricsFiltersFilterArgs',
    'UserActionMetricsValueArgs',
    'UserGroupPermissionsArgs',
    'UserGroupPermissionsGrantArgs',
    'UserSessionMetricsFiltersArgs',
    'UserSessionMetricsFiltersFilterArgs',
    'UserSessionMetricsValueArgs',
    'VmwareAnomaliesDroppedPacketsDetectionArgs',
    'VmwareAnomaliesDroppedPacketsDetectionCustomThresholdsArgs',
    'VmwareAnomaliesEsxiHighCpuDetectionArgs',
    'VmwareAnomaliesEsxiHighCpuDetectionCustomThresholdsArgs',
    'VmwareAnomaliesEsxiHighMemoryDetectionArgs',
    'VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholdsArgs',
    'VmwareAnomaliesGuestCpuLimitDetectionArgs',
    'VmwareAnomaliesGuestCpuLimitDetectionCustomThresholdsArgs',
    'VmwareAnomaliesLowDatastoreSpaceDetectionArgs',
    'VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholdsArgs',
    'VmwareAnomaliesOverloadedStorageDetectionArgs',
    'VmwareAnomaliesOverloadedStorageDetectionCustomThresholdsArgs',
    'VmwareAnomaliesSlowPhysicalStorageDetectionArgs',
    'VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholdsArgs',
    'VmwareAnomaliesUndersizedStorageDetectionArgs',
    'VmwareAnomaliesUndersizedStorageDetectionCustomThresholdsArgs',
    'WebAppAnomaliesErrorRateArgs',
    'WebAppAnomaliesErrorRateErrorRateAutoArgs',
    'WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtectionArgs',
    'WebAppAnomaliesErrorRateErrorRateFixedArgs',
    'WebAppAnomaliesResponseTimeArgs',
    'WebAppAnomaliesResponseTimeResponseTimeAutoArgs',
    'WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtectionArgs',
    'WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAllArgs',
    'WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowestArgs',
    'WebAppAnomaliesResponseTimeResponseTimeFixedArgs',
    'WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtectionArgs',
    'WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAllArgs',
    'WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowestArgs',
    'WebAppAnomaliesTrafficDropsArgs',
    'WebAppAnomaliesTrafficDropsTrafficDropsArgs',
    'WebAppAnomaliesTrafficSpikesArgs',
    'WebAppAnomaliesTrafficSpikesTrafficSpikesArgs',
    'WebAppCustomErrorsErrorRulesArgs',
    'WebAppCustomErrorsErrorRulesErrorRuleArgs',
    'WebAppCustomErrorsErrorRulesErrorRuleCaptureSettingsArgs',
    'WebAppEnablementRumArgs',
    'WebAppEnablementSessionReplayArgs',
    'WebAppRequestErrorsErrorRulesArgs',
    'WebAppRequestErrorsErrorRulesErrorRuleArgs',
    'WebAppRequestErrorsErrorRulesErrorRuleCaptureSettingsArgs',
    'WebAppRequestErrorsErrorRulesErrorRuleFilterSettingsArgs',
    'WebApplicationConversionGoalsArgs',
    'WebApplicationConversionGoalsGoalArgs',
    'WebApplicationConversionGoalsGoalDestinationArgs',
    'WebApplicationConversionGoalsGoalUserActionArgs',
    'WebApplicationConversionGoalsGoalVisitDurationArgs',
    'WebApplicationConversionGoalsGoalVisitNumActionArgs',
    'WebApplicationCustomActionApdexSettingsArgs',
    'WebApplicationKeyUserActionArgs',
    'WebApplicationKeyUserActionActionArgs',
    'WebApplicationLoadActionApdexSettingsArgs',
    'WebApplicationMetaDataCaptureSettingsArgs',
    'WebApplicationMetaDataCaptureSettingsCaptureArgs',
    'WebApplicationMonitoringSettingsArgs',
    'WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsArgs',
    'WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs',
    'WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettingsArgs',
    'WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettingsArgs',
    'WebApplicationMonitoringSettingsBrowserRestrictionSettingsArgs',
    'WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsArgs',
    'WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestrictionArgs',
    'WebApplicationMonitoringSettingsContentCaptureArgs',
    'WebApplicationMonitoringSettingsContentCaptureResourceTimingSettingsArgs',
    'WebApplicationMonitoringSettingsContentCaptureTimeoutSettingsArgs',
    'WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettingsArgs',
    'WebApplicationMonitoringSettingsIpAddressRestrictionSettingsArgs',
    'WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsArgs',
    'WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRangeArgs',
    'WebApplicationMonitoringSettingsJavascriptFrameworkSupportArgs',
    'WebApplicationMonitoringSettingsJavascriptInjectionRulesArgs',
    'WebApplicationMonitoringSettingsJavascriptInjectionRulesRuleArgs',
    'WebApplicationSessionReplayConfigArgs',
    'WebApplicationUserActionAndSessionPropertiesArgs',
    'WebApplicationUserActionAndSessionPropertiesPropertyArgs',
    'WebApplicationUserActionNamingSettingsArgs',
    'WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs',
    'WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleArgs',
    'WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsArgs',
    'WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsConditionArgs',
    'WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs',
    'WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleArgs',
    'WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsArgs',
    'WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsConditionArgs',
    'WebApplicationUserActionNamingSettingsPlaceholdersArgs',
    'WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderArgs',
    'WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsArgs',
    'WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStepArgs',
    'WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs',
    'WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleArgs',
    'WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsArgs',
    'WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsConditionArgs',
    'WebApplicationUserTagsArgs',
    'WebApplicationUserTagsTagArgs',
    'WebApplicationWaterfallSettingsArgs',
    'WebApplicationXhrActionApdexSettingsArgs',
    'WebhookNotificationHeadersArgs',
    'WebhookNotificationHeadersHeaderArgs',
    'XmattersNotificationHeadersArgs',
    'XmattersNotificationHeadersHeaderArgs',
    'GetEntitiesEntitiesArgs',
    'GetEntitiesEntitiesEntityArgs',
    'GetEntitiesEntitiesEntityTagArgs',
    'GetEntitiesEntitiesEntityTagTagArgs',
    'GetSyntheticLocationsLocationsArgs',
]

@pulumi.input_type
class AlertingFiltersArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingFiltersFilterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AlertingFiltersFilterArgs']]] filters: A conditions for the metric usage
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingFiltersFilterArgs']]]]:
        """
        A conditions for the metric usage
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingFiltersFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class AlertingFiltersFilterArgs:
    def __init__(__self__, *,
                 custom: Optional[pulumi.Input['AlertingFiltersFilterCustomArgs']] = None,
                 predefined: Optional[pulumi.Input['AlertingFiltersFilterPredefinedArgs']] = None):
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input['AlertingFiltersFilterCustomArgs']]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input['AlertingFiltersFilterCustomArgs']]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def predefined(self) -> Optional[pulumi.Input['AlertingFiltersFilterPredefinedArgs']]:
        return pulumi.get(self, "predefined")

    @predefined.setter
    def predefined(self, value: Optional[pulumi.Input['AlertingFiltersFilterPredefinedArgs']]):
        pulumi.set(self, "predefined", value)


@pulumi.input_type
class AlertingFiltersFilterCustomArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input['AlertingFiltersFilterCustomDescriptionArgs']] = None,
                 metadata: Optional[pulumi.Input['AlertingFiltersFilterCustomMetadataArgs']] = None,
                 title: Optional[pulumi.Input['AlertingFiltersFilterCustomTitleArgs']] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input['AlertingFiltersFilterCustomDescriptionArgs']]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input['AlertingFiltersFilterCustomDescriptionArgs']]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['AlertingFiltersFilterCustomMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['AlertingFiltersFilterCustomMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AlertingFiltersFilterCustomTitleArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AlertingFiltersFilterCustomTitleArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AlertingFiltersFilterCustomDescriptionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)


@pulumi.input_type
class AlertingFiltersFilterCustomMetadataArgs:
    def __init__(__self__, *,
                 items: pulumi.Input['AlertingFiltersFilterCustomMetadataItemsArgs']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input['AlertingFiltersFilterCustomMetadataItemsArgs']:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input['AlertingFiltersFilterCustomMetadataItemsArgs']):
        pulumi.set(self, "items", value)


@pulumi.input_type
class AlertingFiltersFilterCustomMetadataItemsArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['AlertingFiltersFilterCustomMetadataItemsFilterArgs']]]):
        pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['AlertingFiltersFilterCustomMetadataItemsFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['AlertingFiltersFilterCustomMetadataItemsFilterArgs']]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class AlertingFiltersFilterCustomMetadataItemsFilterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AlertingFiltersFilterCustomTitleArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)


@pulumi.input_type
class AlertingFiltersFilterPredefinedArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)


@pulumi.input_type
class AlertingProfileEventTypeFilterArgs:
    def __init__(__self__, *,
                 custom_event_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterCustomEventFilterArgs']]]] = None,
                 predefined_event_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterPredefinedEventFilterArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterCustomEventFilterArgs']]] custom_event_filters: Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
        :param pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterPredefinedEventFilterArgs']]] predefined_event_filters: Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if custom_event_filters is not None:
            pulumi.set(__self__, "custom_event_filters", custom_event_filters)
        if predefined_event_filters is not None:
            pulumi.set(__self__, "predefined_event_filters", predefined_event_filters)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="customEventFilters")
    def custom_event_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterCustomEventFilterArgs']]]]:
        """
        Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
        """
        return pulumi.get(self, "custom_event_filters")

    @custom_event_filters.setter
    def custom_event_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterCustomEventFilterArgs']]]]):
        pulumi.set(self, "custom_event_filters", value)

    @property
    @pulumi.getter(name="predefinedEventFilters")
    def predefined_event_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterPredefinedEventFilterArgs']]]]:
        """
        Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
        """
        return pulumi.get(self, "predefined_event_filters")

    @predefined_event_filters.setter
    def predefined_event_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterPredefinedEventFilterArgs']]]]):
        pulumi.set(self, "predefined_event_filters", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AlertingProfileEventTypeFilterCustomEventFilterArgs:
    def __init__(__self__, *,
                 custom_description_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilterArgs']]]] = None,
                 custom_title_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilterArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if custom_description_filters is not None:
            pulumi.set(__self__, "custom_description_filters", custom_description_filters)
        if custom_title_filters is not None:
            pulumi.set(__self__, "custom_title_filters", custom_title_filters)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="customDescriptionFilters")
    def custom_description_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilterArgs']]]]:
        return pulumi.get(self, "custom_description_filters")

    @custom_description_filters.setter
    def custom_description_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilterArgs']]]]):
        pulumi.set(self, "custom_description_filters", value)

    @property
    @pulumi.getter(name="customTitleFilters")
    def custom_title_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilterArgs']]]]:
        return pulumi.get(self, "custom_title_filters")

    @custom_title_filters.setter
    def custom_title_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilterArgs']]]]):
        pulumi.set(self, "custom_title_filters", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilterArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str],
                 case_insensitive: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if case_insensitive is not None:
            pulumi.set(__self__, "case_insensitive", case_insensitive)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="caseInsensitive")
    def case_insensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_insensitive")

    @case_insensitive.setter
    def case_insensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_insensitive", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilterArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str],
                 case_insensitive: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if case_insensitive is not None:
            pulumi.set(__self__, "case_insensitive", case_insensitive)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="caseInsensitive")
    def case_insensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_insensitive")

    @case_insensitive.setter
    def case_insensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_insensitive", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AlertingProfileEventTypeFilterPredefinedEventFilterArgs:
    def __init__(__self__, *,
                 event_type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "event_type", event_type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AlertingProfileMetadataArgs:
    def __init__(__self__, *,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 configuration_versions: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 current_configuration_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] cluster_version: Dynatrace server version
        :param pulumi.Input[Sequence[pulumi.Input[int]]] configuration_versions: A Sorted list of the version numbers of the configuration
        :param pulumi.Input[Sequence[pulumi.Input[str]]] current_configuration_versions: A Sorted list of the version numbers of the configuration
        """
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if configuration_versions is not None:
            pulumi.set(__self__, "configuration_versions", configuration_versions)
        if current_configuration_versions is not None:
            pulumi.set(__self__, "current_configuration_versions", current_configuration_versions)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[str]]:
        """
        Dynatrace server version
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="configurationVersions")
    def configuration_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A Sorted list of the version numbers of the configuration
        """
        return pulumi.get(self, "configuration_versions")

    @configuration_versions.setter
    def configuration_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "configuration_versions", value)

    @property
    @pulumi.getter(name="currentConfigurationVersions")
    def current_configuration_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A Sorted list of the version numbers of the configuration
        """
        return pulumi.get(self, "current_configuration_versions")

    @current_configuration_versions.setter
    def current_configuration_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "current_configuration_versions", value)


@pulumi.input_type
class AlertingProfileRuleArgs:
    def __init__(__self__, *,
                 delay_in_minutes: pulumi.Input[int],
                 severity_level: pulumi.Input[str],
                 tag_filters: pulumi.Input[Sequence[pulumi.Input['AlertingProfileRuleTagFilterArgs']]],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] delay_in_minutes: Send a notification if a problem remains open longer than *X* minutes
        :param pulumi.Input[str] severity_level: The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
        :param pulumi.Input[Sequence[pulumi.Input['AlertingProfileRuleTagFilterArgs']]] tag_filters: Configuration of the tag filtering of the alerting profile
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "delay_in_minutes", delay_in_minutes)
        pulumi.set(__self__, "severity_level", severity_level)
        pulumi.set(__self__, "tag_filters", tag_filters)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="delayInMinutes")
    def delay_in_minutes(self) -> pulumi.Input[int]:
        """
        Send a notification if a problem remains open longer than *X* minutes
        """
        return pulumi.get(self, "delay_in_minutes")

    @delay_in_minutes.setter
    def delay_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "delay_in_minutes", value)

    @property
    @pulumi.getter(name="severityLevel")
    def severity_level(self) -> pulumi.Input[str]:
        """
        The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
        """
        return pulumi.get(self, "severity_level")

    @severity_level.setter
    def severity_level(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity_level", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> pulumi.Input[Sequence[pulumi.Input['AlertingProfileRuleTagFilterArgs']]]:
        """
        Configuration of the tag filtering of the alerting profile
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: pulumi.Input[Sequence[pulumi.Input['AlertingProfileRuleTagFilterArgs']]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AlertingProfileRuleTagFilterArgs:
    def __init__(__self__, *,
                 include_mode: pulumi.Input[str],
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileRuleTagFilterTagFilterArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "include_mode", include_mode)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="includeMode")
    def include_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "include_mode")

    @include_mode.setter
    def include_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "include_mode", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileRuleTagFilterTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingProfileRuleTagFilterTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AlertingProfileRuleTagFilterTagFilterArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AlertingRulesArgs:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRulesRuleArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AlertingRulesRuleArgs']]] rules: A conditions for the metric usage
        """
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRulesRuleArgs']]]]:
        """
        A conditions for the metric usage
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlertingRulesRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class AlertingRulesRuleArgs:
    def __init__(__self__, *,
                 delay_in_minutes: pulumi.Input[int],
                 include_mode: pulumi.Input[str],
                 severity_level: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "delay_in_minutes", delay_in_minutes)
        pulumi.set(__self__, "include_mode", include_mode)
        pulumi.set(__self__, "severity_level", severity_level)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="delayInMinutes")
    def delay_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "delay_in_minutes")

    @delay_in_minutes.setter
    def delay_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "delay_in_minutes", value)

    @property
    @pulumi.getter(name="includeMode")
    def include_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "include_mode")

    @include_mode.setter
    def include_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "include_mode", value)

    @property
    @pulumi.getter(name="severityLevel")
    def severity_level(self) -> pulumi.Input[str]:
        return pulumi.get(self, "severity_level")

    @severity_level.setter
    def severity_level(self, value: pulumi.Input[str]):
        pulumi.set(self, "severity_level", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ApiDetectionConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ApiDetectionConditionsConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ApiDetectionConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ApiDetectionConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ApiDetectionConditionsConditionArgs:
    def __init__(__self__, *,
                 base: pulumi.Input[str],
                 matcher: pulumi.Input[str],
                 pattern: pulumi.Input[str]):
        pulumi.set(__self__, "base", base)
        pulumi.set(__self__, "matcher", matcher)
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def base(self) -> pulumi.Input[str]:
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: pulumi.Input[str]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter
    def matcher(self) -> pulumi.Input[str]:
        return pulumi.get(self, "matcher")

    @matcher.setter
    def matcher(self, value: pulumi.Input[str]):
        pulumi.set(self, "matcher", value)

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class ApplicationAnomaliesFailureRateArgs:
    def __init__(__self__, *,
                 auto: Optional[pulumi.Input['ApplicationAnomaliesFailureRateAutoArgs']] = None,
                 thresholds: Optional[pulumi.Input['ApplicationAnomaliesFailureRateThresholdsArgs']] = None):
        """
        :param pulumi.Input['ApplicationAnomaliesFailureRateAutoArgs'] auto: Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
        :param pulumi.Input['ApplicationAnomaliesFailureRateThresholdsArgs'] thresholds: Fixed thresholds for failure rate increase detection
        """
        if auto is not None:
            pulumi.set(__self__, "auto", auto)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def auto(self) -> Optional[pulumi.Input['ApplicationAnomaliesFailureRateAutoArgs']]:
        """
        Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
        """
        return pulumi.get(self, "auto")

    @auto.setter
    def auto(self, value: Optional[pulumi.Input['ApplicationAnomaliesFailureRateAutoArgs']]):
        pulumi.set(self, "auto", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['ApplicationAnomaliesFailureRateThresholdsArgs']]:
        """
        Fixed thresholds for failure rate increase detection
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['ApplicationAnomaliesFailureRateThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class ApplicationAnomaliesFailureRateAutoArgs:
    def __init__(__self__, *,
                 absolute: pulumi.Input[int],
                 relative: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "absolute", absolute)
        pulumi.set(__self__, "relative", relative)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def absolute(self) -> pulumi.Input[int]:
        return pulumi.get(self, "absolute")

    @absolute.setter
    def absolute(self, value: pulumi.Input[int]):
        pulumi.set(self, "absolute", value)

    @property
    @pulumi.getter
    def relative(self) -> pulumi.Input[int]:
        return pulumi.get(self, "relative")

    @relative.setter
    def relative(self, value: pulumi.Input[int]):
        pulumi.set(self, "relative", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ApplicationAnomaliesFailureRateThresholdsArgs:
    def __init__(__self__, *,
                 sensitivity: pulumi.Input[str],
                 threshold: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sensitivity", sensitivity)
        pulumi.set(__self__, "threshold", threshold)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ApplicationAnomaliesResponseTimeArgs:
    def __init__(__self__, *,
                 auto: Optional[pulumi.Input['ApplicationAnomaliesResponseTimeAutoArgs']] = None,
                 thresholds: Optional[pulumi.Input['ApplicationAnomaliesResponseTimeThresholdsArgs']] = None):
        """
        :param pulumi.Input['ApplicationAnomaliesResponseTimeAutoArgs'] auto: Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
        :param pulumi.Input['ApplicationAnomaliesResponseTimeThresholdsArgs'] thresholds: Fixed thresholds for response time degradation detection
        """
        if auto is not None:
            pulumi.set(__self__, "auto", auto)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def auto(self) -> Optional[pulumi.Input['ApplicationAnomaliesResponseTimeAutoArgs']]:
        """
        Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
        """
        return pulumi.get(self, "auto")

    @auto.setter
    def auto(self, value: Optional[pulumi.Input['ApplicationAnomaliesResponseTimeAutoArgs']]):
        pulumi.set(self, "auto", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['ApplicationAnomaliesResponseTimeThresholdsArgs']]:
        """
        Fixed thresholds for response time degradation detection
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['ApplicationAnomaliesResponseTimeThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class ApplicationAnomaliesResponseTimeAutoArgs:
    def __init__(__self__, *,
                 load: pulumi.Input[str],
                 milliseconds: pulumi.Input[int],
                 percent: pulumi.Input[int],
                 slowest_milliseconds: pulumi.Input[int],
                 slowest_percent: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "load", load)
        pulumi.set(__self__, "milliseconds", milliseconds)
        pulumi.set(__self__, "percent", percent)
        pulumi.set(__self__, "slowest_milliseconds", slowest_milliseconds)
        pulumi.set(__self__, "slowest_percent", slowest_percent)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def load(self) -> pulumi.Input[str]:
        return pulumi.get(self, "load")

    @load.setter
    def load(self, value: pulumi.Input[str]):
        pulumi.set(self, "load", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def percent(self) -> pulumi.Input[int]:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: pulumi.Input[int]):
        pulumi.set(self, "percent", value)

    @property
    @pulumi.getter(name="slowestMilliseconds")
    def slowest_milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "slowest_milliseconds")

    @slowest_milliseconds.setter
    def slowest_milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "slowest_milliseconds", value)

    @property
    @pulumi.getter(name="slowestPercent")
    def slowest_percent(self) -> pulumi.Input[int]:
        return pulumi.get(self, "slowest_percent")

    @slowest_percent.setter
    def slowest_percent(self, value: pulumi.Input[int]):
        pulumi.set(self, "slowest_percent", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ApplicationAnomaliesResponseTimeThresholdsArgs:
    def __init__(__self__, *,
                 load: pulumi.Input[str],
                 milliseconds: pulumi.Input[int],
                 sensitivity: pulumi.Input[str],
                 slowest_milliseconds: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "load", load)
        pulumi.set(__self__, "milliseconds", milliseconds)
        pulumi.set(__self__, "sensitivity", sensitivity)
        pulumi.set(__self__, "slowest_milliseconds", slowest_milliseconds)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def load(self) -> pulumi.Input[str]:
        return pulumi.get(self, "load")

    @load.setter
    def load(self, value: pulumi.Input[str]):
        pulumi.set(self, "load", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter(name="slowestMilliseconds")
    def slowest_milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "slowest_milliseconds")

    @slowest_milliseconds.setter
    def slowest_milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "slowest_milliseconds", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ApplicationAnomaliesTrafficArgs:
    def __init__(__self__, *,
                 drops: Optional[pulumi.Input['ApplicationAnomaliesTrafficDropsArgs']] = None,
                 spikes: Optional[pulumi.Input['ApplicationAnomaliesTrafficSpikesArgs']] = None):
        """
        :param pulumi.Input['ApplicationAnomaliesTrafficDropsArgs'] drops: The configuration of traffic drops detection
        :param pulumi.Input['ApplicationAnomaliesTrafficSpikesArgs'] spikes: The configuration of traffic spikes detection
        """
        if drops is not None:
            pulumi.set(__self__, "drops", drops)
        if spikes is not None:
            pulumi.set(__self__, "spikes", spikes)

    @property
    @pulumi.getter
    def drops(self) -> Optional[pulumi.Input['ApplicationAnomaliesTrafficDropsArgs']]:
        """
        The configuration of traffic drops detection
        """
        return pulumi.get(self, "drops")

    @drops.setter
    def drops(self, value: Optional[pulumi.Input['ApplicationAnomaliesTrafficDropsArgs']]):
        pulumi.set(self, "drops", value)

    @property
    @pulumi.getter
    def spikes(self) -> Optional[pulumi.Input['ApplicationAnomaliesTrafficSpikesArgs']]:
        """
        The configuration of traffic spikes detection
        """
        return pulumi.get(self, "spikes")

    @spikes.setter
    def spikes(self, value: Optional[pulumi.Input['ApplicationAnomaliesTrafficSpikesArgs']]):
        pulumi.set(self, "spikes", value)


@pulumi.input_type
class ApplicationAnomaliesTrafficDropsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 percent: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percent", value)


@pulumi.input_type
class ApplicationAnomaliesTrafficSpikesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 percent: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percent", value)


@pulumi.input_type
class ApplicationDataPrivacySessionReplayDataPrivacyArgs:
    def __init__(__self__, *,
                 content_masking_settings: pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsArgs'],
                 opt_in: Optional[pulumi.Input[bool]] = None,
                 url_exclusion_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsArgs'] content_masking_settings: (Field has overlap with `SessionReplayWebPrivacy`) Content masking settings for Session Replay.
        """
        pulumi.set(__self__, "content_masking_settings", content_masking_settings)
        if opt_in is not None:
            pulumi.set(__self__, "opt_in", opt_in)
        if url_exclusion_rules is not None:
            pulumi.set(__self__, "url_exclusion_rules", url_exclusion_rules)

    @property
    @pulumi.getter(name="contentMaskingSettings")
    def content_masking_settings(self) -> pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsArgs']:
        """
        (Field has overlap with `SessionReplayWebPrivacy`) Content masking settings for Session Replay.
        """
        return pulumi.get(self, "content_masking_settings")

    @content_masking_settings.setter
    def content_masking_settings(self, value: pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsArgs']):
        pulumi.set(self, "content_masking_settings", value)

    @property
    @pulumi.getter(name="optIn")
    def opt_in(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "opt_in")

    @opt_in.setter
    def opt_in(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "opt_in", value)

    @property
    @pulumi.getter(name="urlExclusionRules")
    def url_exclusion_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "url_exclusion_rules")

    @url_exclusion_rules.setter
    def url_exclusion_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "url_exclusion_rules", value)


@pulumi.input_type
class ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsArgs:
    def __init__(__self__, *,
                 playback: pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackArgs'],
                 recording: pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingArgs']):
        pulumi.set(__self__, "playback", playback)
        pulumi.set(__self__, "recording", recording)

    @property
    @pulumi.getter
    def playback(self) -> pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackArgs']:
        return pulumi.get(self, "playback")

    @playback.setter
    def playback(self, value: pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackArgs']):
        pulumi.set(self, "playback", value)

    @property
    @pulumi.getter
    def recording(self) -> pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingArgs']:
        return pulumi.get(self, "recording")

    @recording.setter
    def recording(self, value: pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingArgs']):
        pulumi.set(self, "recording", value)


@pulumi.input_type
class ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackArgs:
    def __init__(__self__, *,
                 preset: pulumi.Input[str],
                 rules: Optional[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesArgs']] = None):
        pulumi.set(__self__, "preset", preset)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def preset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "preset")

    @preset.setter
    def preset(self, value: pulumi.Input[str]):
        pulumi.set(self, "preset", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesArgs']]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesArgs']]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRuleArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str],
                 type: pulumi.Input[str],
                 user_interaction_hidden: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "selector", selector)
        pulumi.set(__self__, "type", type)
        if user_interaction_hidden is not None:
            pulumi.set(__self__, "user_interaction_hidden", user_interaction_hidden)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userInteractionHidden")
    def user_interaction_hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_interaction_hidden")

    @user_interaction_hidden.setter
    def user_interaction_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_interaction_hidden", value)


@pulumi.input_type
class ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingArgs:
    def __init__(__self__, *,
                 preset: pulumi.Input[str],
                 rules: Optional[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesArgs']] = None):
        pulumi.set(__self__, "preset", preset)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def preset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "preset")

    @preset.setter
    def preset(self, value: pulumi.Input[str]):
        pulumi.set(self, "preset", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesArgs']]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesArgs']]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRuleArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[str],
                 type: pulumi.Input[str],
                 user_interaction_hidden: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "selector", selector)
        pulumi.set(__self__, "type", type)
        if user_interaction_hidden is not None:
            pulumi.set(__self__, "user_interaction_hidden", user_interaction_hidden)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[str]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userInteractionHidden")
    def user_interaction_hidden(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_interaction_hidden")

    @user_interaction_hidden.setter
    def user_interaction_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_interaction_hidden", value)


@pulumi.input_type
class ApplicationDetectionRuleFilterConfigArgs:
    def __init__(__self__, *,
                 application_match_target: pulumi.Input[str],
                 application_match_type: pulumi.Input[str],
                 pattern: pulumi.Input[str]):
        """
        :param pulumi.Input[str] application_match_target: Where to look for the pattern value, possible values are `DOMAIN` or `URL`
        :param pulumi.Input[str] application_match_type: The operator used for matching the application detection rule, possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `MATCHES`
        :param pulumi.Input[str] pattern: The value to look for with the application detection rule
        """
        pulumi.set(__self__, "application_match_target", application_match_target)
        pulumi.set(__self__, "application_match_type", application_match_type)
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter(name="applicationMatchTarget")
    def application_match_target(self) -> pulumi.Input[str]:
        """
        Where to look for the pattern value, possible values are `DOMAIN` or `URL`
        """
        return pulumi.get(self, "application_match_target")

    @application_match_target.setter
    def application_match_target(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_match_target", value)

    @property
    @pulumi.getter(name="applicationMatchType")
    def application_match_type(self) -> pulumi.Input[str]:
        """
        The operator used for matching the application detection rule, possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `MATCHES`
        """
        return pulumi.get(self, "application_match_type")

    @application_match_type.setter
    def application_match_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_match_type", value)

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[str]:
        """
        The value to look for with the application detection rule
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class ApplicationErrorRulesCustomErrorsArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['ApplicationErrorRulesCustomErrorsRuleArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationErrorRulesCustomErrorsRuleArgs']]] rules: Configuration of the custom error in the web application
        """
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationErrorRulesCustomErrorsRuleArgs']]]:
        """
        Configuration of the custom error in the web application
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationErrorRulesCustomErrorsRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ApplicationErrorRulesCustomErrorsRuleArgs:
    def __init__(__self__, *,
                 capture: Optional[pulumi.Input[bool]] = None,
                 custom_alerting: Optional[pulumi.Input[bool]] = None,
                 impact_apdex: Optional[pulumi.Input[bool]] = None,
                 key_matcher: Optional[pulumi.Input[str]] = None,
                 key_pattern: Optional[pulumi.Input[str]] = None,
                 value_matcher: Optional[pulumi.Input[str]] = None,
                 value_pattern: Optional[pulumi.Input[str]] = None):
        if capture is not None:
            pulumi.set(__self__, "capture", capture)
        if custom_alerting is not None:
            pulumi.set(__self__, "custom_alerting", custom_alerting)
        if impact_apdex is not None:
            pulumi.set(__self__, "impact_apdex", impact_apdex)
        if key_matcher is not None:
            pulumi.set(__self__, "key_matcher", key_matcher)
        if key_pattern is not None:
            pulumi.set(__self__, "key_pattern", key_pattern)
        if value_matcher is not None:
            pulumi.set(__self__, "value_matcher", value_matcher)
        if value_pattern is not None:
            pulumi.set(__self__, "value_pattern", value_pattern)

    @property
    @pulumi.getter
    def capture(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "capture")

    @capture.setter
    def capture(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "capture", value)

    @property
    @pulumi.getter(name="customAlerting")
    def custom_alerting(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "custom_alerting")

    @custom_alerting.setter
    def custom_alerting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_alerting", value)

    @property
    @pulumi.getter(name="impactApdex")
    def impact_apdex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impact_apdex")

    @impact_apdex.setter
    def impact_apdex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impact_apdex", value)

    @property
    @pulumi.getter(name="keyMatcher")
    def key_matcher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_matcher")

    @key_matcher.setter
    def key_matcher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_matcher", value)

    @property
    @pulumi.getter(name="keyPattern")
    def key_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_pattern")

    @key_pattern.setter
    def key_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pattern", value)

    @property
    @pulumi.getter(name="valueMatcher")
    def value_matcher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_matcher")

    @value_matcher.setter
    def value_matcher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_matcher", value)

    @property
    @pulumi.getter(name="valuePattern")
    def value_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_pattern")

    @value_pattern.setter
    def value_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_pattern", value)


@pulumi.input_type
class ApplicationErrorRulesHttpErrorsArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['ApplicationErrorRulesHttpErrorsRuleArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationErrorRulesHttpErrorsRuleArgs']]] rules: Configuration of the HTTP error in the web application
        """
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationErrorRulesHttpErrorsRuleArgs']]]:
        """
        Configuration of the HTTP error in the web application
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationErrorRulesHttpErrorsRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ApplicationErrorRulesHttpErrorsRuleArgs:
    def __init__(__self__, *,
                 capture: Optional[pulumi.Input[bool]] = None,
                 consider_blocked_requests: Optional[pulumi.Input[bool]] = None,
                 consider_for_ai: Optional[pulumi.Input[bool]] = None,
                 consider_unknown_error_code: Optional[pulumi.Input[bool]] = None,
                 error_codes: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 filter_by_url: Optional[pulumi.Input[bool]] = None,
                 impact_apdex: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if capture is not None:
            pulumi.set(__self__, "capture", capture)
        if consider_blocked_requests is not None:
            pulumi.set(__self__, "consider_blocked_requests", consider_blocked_requests)
        if consider_for_ai is not None:
            pulumi.set(__self__, "consider_for_ai", consider_for_ai)
        if consider_unknown_error_code is not None:
            pulumi.set(__self__, "consider_unknown_error_code", consider_unknown_error_code)
        if error_codes is not None:
            pulumi.set(__self__, "error_codes", error_codes)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_by_url is not None:
            pulumi.set(__self__, "filter_by_url", filter_by_url)
        if impact_apdex is not None:
            pulumi.set(__self__, "impact_apdex", impact_apdex)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def capture(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "capture")

    @capture.setter
    def capture(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "capture", value)

    @property
    @pulumi.getter(name="considerBlockedRequests")
    def consider_blocked_requests(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "consider_blocked_requests")

    @consider_blocked_requests.setter
    def consider_blocked_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consider_blocked_requests", value)

    @property
    @pulumi.getter(name="considerForAi")
    def consider_for_ai(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "consider_for_ai")

    @consider_for_ai.setter
    def consider_for_ai(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consider_for_ai", value)

    @property
    @pulumi.getter(name="considerUnknownErrorCode")
    def consider_unknown_error_code(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "consider_unknown_error_code")

    @consider_unknown_error_code.setter
    def consider_unknown_error_code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consider_unknown_error_code", value)

    @property
    @pulumi.getter(name="errorCodes")
    def error_codes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_codes")

    @error_codes.setter
    def error_codes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_codes", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterByUrl")
    def filter_by_url(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "filter_by_url")

    @filter_by_url.setter
    def filter_by_url(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "filter_by_url", value)

    @property
    @pulumi.getter(name="impactApdex")
    def impact_apdex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impact_apdex")

    @impact_apdex.setter
    def impact_apdex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impact_apdex", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class AutotagEntitySelectorBasedRuleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 normalization: Optional[pulumi.Input[str]] = None,
                 selector: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value_format: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if normalization is not None:
            pulumi.set(__self__, "normalization", normalization)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value_format is not None:
            pulumi.set(__self__, "value_format", value_format)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def normalization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "normalization")

    @normalization.setter
    def normalization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "normalization", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="valueFormat")
    def value_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_format")

    @value_format.setter
    def value_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_format", value)


@pulumi.input_type
class AutotagRuleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 normalization: Optional[pulumi.Input[str]] = None,
                 propagation_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value_format: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if normalization is not None:
            pulumi.set(__self__, "normalization", normalization)
        if propagation_types is not None:
            pulumi.set(__self__, "propagation_types", propagation_types)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value_format is not None:
            pulumi.set(__self__, "value_format", value_format)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def normalization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "normalization")

    @normalization.setter
    def normalization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "normalization", value)

    @property
    @pulumi.getter(name="propagationTypes")
    def propagation_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "propagation_types")

    @propagation_types.setter
    def propagation_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "propagation_types", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="valueFormat")
    def value_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_format")

    @value_format.setter
    def value_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_format", value)


@pulumi.input_type
class AutotagRuleConditionArgs:
    def __init__(__self__, *,
                 application_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionApplicationTypeComparisonArgs']]]] = None,
                 application_types: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionApplicationTypeArgs']]]] = None,
                 azure_compute_mode_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureComputeModeComparisonArgs']]]] = None,
                 azure_compute_modes: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureComputeModeArgs']]]] = None,
                 azure_sku_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureSkuComparisionArgs']]]] = None,
                 azure_skus: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureSkusArgs']]]] = None,
                 base_comparison_basics: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBaseComparisonBasicArgs']]]] = None,
                 base_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBaseConditionKeyArgs']]]] = None,
                 bitness_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBitnessComparisionArgs']]]] = None,
                 bitnesses: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBitnessArgs']]]] = None,
                 cloud_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCloudTypeComparisonArgs']]]] = None,
                 cloud_types: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCloudTypeArgs']]]] = None,
                 comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionComparisonArgs']]]] = None,
                 custom_application_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomApplicationTypeComparisonArgs']]]] = None,
                 custom_application_types: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomApplicationTypeArgs']]]] = None,
                 custom_host_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomHostMetadataConditionKeyArgs']]]] = None,
                 custom_host_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomHostMetadataArgs']]]] = None,
                 custom_process_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomProcessMetadataConditionKeyArgs']]]] = None,
                 custom_process_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomProcessMetadataArgs']]]] = None,
                 database_topologies: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDatabaseTopologyArgs']]]] = None,
                 database_topology_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDatabaseTopologyComparisonArgs']]]] = None,
                 dcrum_decoder_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDcrumDecoderComparisonArgs']]]] = None,
                 dcrum_decoders: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDcrumDecoderArgs']]]] = None,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionEntityArgs']]]] = None,
                 entity_id_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionEntityIdComparisonArgs']]]] = None,
                 host_teches: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionHostTechArgs']]]] = None,
                 hypervisor_type_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionHypervisorTypeComparisionArgs']]]] = None,
                 hypervisors: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionHypervisorArgs']]]] = None,
                 indexed_name_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedNameComparisonArgs']]]] = None,
                 indexed_names: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedNameArgs']]]] = None,
                 indexed_string_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedStringComparisonArgs']]]] = None,
                 indexed_strings: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedStringArgs']]]] = None,
                 indexed_tag_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedTagComparisonArgs']]]] = None,
                 indexed_tags: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedTagArgs']]]] = None,
                 integer_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIntegerComparisonArgs']]]] = None,
                 integers: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIntegerArgs']]]] = None,
                 ipaddress_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIpaddressComparisonArgs']]]] = None,
                 ipaddresses: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIpaddressArgs']]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionKeyArgs']]]] = None,
                 mobile_platform_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionMobilePlatformComparisonArgs']]]] = None,
                 mobile_platforms: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionMobilePlatformArgs']]]] = None,
                 os_arches: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOsArchArgs']]]] = None,
                 os_types: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOsTypeArgs']]]] = None,
                 osarchitecture_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOsarchitectureComparisonArgs']]]] = None,
                 ostype_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOstypeComparisonArgs']]]] = None,
                 paas_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionPaasTypeComparisonArgs']]]] = None,
                 paas_types: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionPaasTypeArgs']]]] = None,
                 process_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionProcessMetadataConditionKeyArgs']]]] = None,
                 process_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionProcessMetadataArgs']]]] = None,
                 service_topologies: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTopologyArgs']]]] = None,
                 service_topology_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTopologyComparisonArgs']]]] = None,
                 service_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTypeComparisonArgs']]]] = None,
                 service_types: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTypeArgs']]]] = None,
                 simple_host_tech_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSimpleHostTechComparisonArgs']]]] = None,
                 simple_tech_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSimpleTechComparisonArgs']]]] = None,
                 string_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringComparisonArgs']]]] = None,
                 string_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringConditionKeyArgs']]]] = None,
                 string_keys: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringKeyArgs']]]] = None,
                 strings: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringArgs']]]] = None,
                 synthetic_engine_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSyntheticEngineTypeComparisonArgs']]]] = None,
                 synthetic_engines: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSyntheticEngineArgs']]]] = None,
                 tag_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionTagComparisonArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionTagArgs']]]] = None,
                 teches: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionTechArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if application_type_comparisons is not None:
            warnings.warn("""You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""application_type_comparisons is deprecated: You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.""")
        if application_type_comparisons is not None:
            pulumi.set(__self__, "application_type_comparisons", application_type_comparisons)
        if application_types is not None:
            pulumi.set(__self__, "application_types", application_types)
        if azure_compute_mode_comparisons is not None:
            pulumi.set(__self__, "azure_compute_mode_comparisons", azure_compute_mode_comparisons)
        if azure_compute_modes is not None:
            warnings.warn("""You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""azure_compute_modes is deprecated: You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.""")
        if azure_compute_modes is not None:
            pulumi.set(__self__, "azure_compute_modes", azure_compute_modes)
        if azure_sku_comparisions is not None:
            warnings.warn("""You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""azure_sku_comparisions is deprecated: You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.""")
        if azure_sku_comparisions is not None:
            pulumi.set(__self__, "azure_sku_comparisions", azure_sku_comparisions)
        if azure_skus is not None:
            pulumi.set(__self__, "azure_skus", azure_skus)
        if base_comparison_basics is not None:
            warnings.warn("""You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""base_comparison_basics is deprecated: You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.""")
        if base_comparison_basics is not None:
            pulumi.set(__self__, "base_comparison_basics", base_comparison_basics)
        if base_condition_keys is not None:
            warnings.warn("""'base_condition_key' is deprecated. You should use 'key'""", DeprecationWarning)
            pulumi.log.warn("""base_condition_keys is deprecated: 'base_condition_key' is deprecated. You should use 'key'""")
        if base_condition_keys is not None:
            pulumi.set(__self__, "base_condition_keys", base_condition_keys)
        if bitness_comparisions is not None:
            warnings.warn("""You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""bitness_comparisions is deprecated: You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.""")
        if bitness_comparisions is not None:
            pulumi.set(__self__, "bitness_comparisions", bitness_comparisions)
        if bitnesses is not None:
            pulumi.set(__self__, "bitnesses", bitnesses)
        if cloud_type_comparisons is not None:
            warnings.warn("""You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""cloud_type_comparisons is deprecated: You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.""")
        if cloud_type_comparisons is not None:
            pulumi.set(__self__, "cloud_type_comparisons", cloud_type_comparisons)
        if cloud_types is not None:
            pulumi.set(__self__, "cloud_types", cloud_types)
        if comparisons is not None:
            pulumi.set(__self__, "comparisons", comparisons)
        if custom_application_type_comparisons is not None:
            warnings.warn("""You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""custom_application_type_comparisons is deprecated: You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.""")
        if custom_application_type_comparisons is not None:
            pulumi.set(__self__, "custom_application_type_comparisons", custom_application_type_comparisons)
        if custom_application_types is not None:
            pulumi.set(__self__, "custom_application_types", custom_application_types)
        if custom_host_metadata_condition_keys is not None:
            warnings.warn("""'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'""", DeprecationWarning)
            pulumi.log.warn("""custom_host_metadata_condition_keys is deprecated: 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'""")
        if custom_host_metadata_condition_keys is not None:
            pulumi.set(__self__, "custom_host_metadata_condition_keys", custom_host_metadata_condition_keys)
        if custom_host_metadatas is not None:
            pulumi.set(__self__, "custom_host_metadatas", custom_host_metadatas)
        if custom_process_metadata_condition_keys is not None:
            warnings.warn("""'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'""", DeprecationWarning)
            pulumi.log.warn("""custom_process_metadata_condition_keys is deprecated: 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'""")
        if custom_process_metadata_condition_keys is not None:
            pulumi.set(__self__, "custom_process_metadata_condition_keys", custom_process_metadata_condition_keys)
        if custom_process_metadatas is not None:
            pulumi.set(__self__, "custom_process_metadatas", custom_process_metadatas)
        if database_topologies is not None:
            pulumi.set(__self__, "database_topologies", database_topologies)
        if database_topology_comparisons is not None:
            warnings.warn("""You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""database_topology_comparisons is deprecated: You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.""")
        if database_topology_comparisons is not None:
            pulumi.set(__self__, "database_topology_comparisons", database_topology_comparisons)
        if dcrum_decoder_comparisons is not None:
            warnings.warn("""You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""dcrum_decoder_comparisons is deprecated: You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.""")
        if dcrum_decoder_comparisons is not None:
            pulumi.set(__self__, "dcrum_decoder_comparisons", dcrum_decoder_comparisons)
        if dcrum_decoders is not None:
            pulumi.set(__self__, "dcrum_decoders", dcrum_decoders)
        if entities is not None:
            pulumi.set(__self__, "entities", entities)
        if entity_id_comparisons is not None:
            warnings.warn("""You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""entity_id_comparisons is deprecated: You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.""")
        if entity_id_comparisons is not None:
            pulumi.set(__self__, "entity_id_comparisons", entity_id_comparisons)
        if host_teches is not None:
            pulumi.set(__self__, "host_teches", host_teches)
        if hypervisor_type_comparisions is not None:
            warnings.warn("""`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead""", DeprecationWarning)
            pulumi.log.warn("""hypervisor_type_comparisions is deprecated: `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead""")
        if hypervisor_type_comparisions is not None:
            pulumi.set(__self__, "hypervisor_type_comparisions", hypervisor_type_comparisions)
        if hypervisors is not None:
            pulumi.set(__self__, "hypervisors", hypervisors)
        if indexed_name_comparisons is not None:
            warnings.warn("""You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_name_comparisons is deprecated: You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_name_comparisons is not None:
            pulumi.set(__self__, "indexed_name_comparisons", indexed_name_comparisons)
        if indexed_names is not None:
            pulumi.set(__self__, "indexed_names", indexed_names)
        if indexed_string_comparisons is not None:
            warnings.warn("""You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_string_comparisons is deprecated: You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_string_comparisons is not None:
            pulumi.set(__self__, "indexed_string_comparisons", indexed_string_comparisons)
        if indexed_strings is not None:
            pulumi.set(__self__, "indexed_strings", indexed_strings)
        if indexed_tag_comparisons is not None:
            warnings.warn("""You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_tag_comparisons is deprecated: You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_tag_comparisons is not None:
            pulumi.set(__self__, "indexed_tag_comparisons", indexed_tag_comparisons)
        if indexed_tags is not None:
            pulumi.set(__self__, "indexed_tags", indexed_tags)
        if integer_comparisons is not None:
            warnings.warn("""You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""integer_comparisons is deprecated: You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.""")
        if integer_comparisons is not None:
            pulumi.set(__self__, "integer_comparisons", integer_comparisons)
        if integers is not None:
            pulumi.set(__self__, "integers", integers)
        if ipaddress_comparisons is not None:
            warnings.warn("""You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""ipaddress_comparisons is deprecated: You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.""")
        if ipaddress_comparisons is not None:
            pulumi.set(__self__, "ipaddress_comparisons", ipaddress_comparisons)
        if ipaddresses is not None:
            pulumi.set(__self__, "ipaddresses", ipaddresses)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if mobile_platform_comparisons is not None:
            warnings.warn("""You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""mobile_platform_comparisons is deprecated: You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.""")
        if mobile_platform_comparisons is not None:
            pulumi.set(__self__, "mobile_platform_comparisons", mobile_platform_comparisons)
        if mobile_platforms is not None:
            pulumi.set(__self__, "mobile_platforms", mobile_platforms)
        if os_arches is not None:
            pulumi.set(__self__, "os_arches", os_arches)
        if os_types is not None:
            pulumi.set(__self__, "os_types", os_types)
        if osarchitecture_comparisons is not None:
            warnings.warn("""You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""osarchitecture_comparisons is deprecated: You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.""")
        if osarchitecture_comparisons is not None:
            pulumi.set(__self__, "osarchitecture_comparisons", osarchitecture_comparisons)
        if ostype_comparisons is not None:
            warnings.warn("""You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""ostype_comparisons is deprecated: You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.""")
        if ostype_comparisons is not None:
            pulumi.set(__self__, "ostype_comparisons", ostype_comparisons)
        if paas_type_comparisons is not None:
            warnings.warn("""You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""paas_type_comparisons is deprecated: You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.""")
        if paas_type_comparisons is not None:
            pulumi.set(__self__, "paas_type_comparisons", paas_type_comparisons)
        if paas_types is not None:
            pulumi.set(__self__, "paas_types", paas_types)
        if process_metadata_condition_keys is not None:
            warnings.warn("""'process_metadata_condition_key' is deprecated. You should use 'process_metadata'""", DeprecationWarning)
            pulumi.log.warn("""process_metadata_condition_keys is deprecated: 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'""")
        if process_metadata_condition_keys is not None:
            pulumi.set(__self__, "process_metadata_condition_keys", process_metadata_condition_keys)
        if process_metadatas is not None:
            pulumi.set(__self__, "process_metadatas", process_metadatas)
        if service_topologies is not None:
            pulumi.set(__self__, "service_topologies", service_topologies)
        if service_topology_comparisons is not None:
            warnings.warn("""You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""service_topology_comparisons is deprecated: You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.""")
        if service_topology_comparisons is not None:
            pulumi.set(__self__, "service_topology_comparisons", service_topology_comparisons)
        if service_type_comparisons is not None:
            warnings.warn("""You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""service_type_comparisons is deprecated: You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.""")
        if service_type_comparisons is not None:
            pulumi.set(__self__, "service_type_comparisons", service_type_comparisons)
        if service_types is not None:
            pulumi.set(__self__, "service_types", service_types)
        if simple_host_tech_comparisons is not None:
            warnings.warn("""You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""simple_host_tech_comparisons is deprecated: You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.""")
        if simple_host_tech_comparisons is not None:
            pulumi.set(__self__, "simple_host_tech_comparisons", simple_host_tech_comparisons)
        if simple_tech_comparisons is not None:
            warnings.warn("""You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""simple_tech_comparisons is deprecated: You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.""")
        if simple_tech_comparisons is not None:
            pulumi.set(__self__, "simple_tech_comparisons", simple_tech_comparisons)
        if string_comparisons is not None:
            warnings.warn("""You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""string_comparisons is deprecated: You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.""")
        if string_comparisons is not None:
            pulumi.set(__self__, "string_comparisons", string_comparisons)
        if string_condition_keys is not None:
            warnings.warn("""'string_condition_key' is deprecated. You should use 'string_key'""", DeprecationWarning)
            pulumi.log.warn("""string_condition_keys is deprecated: 'string_condition_key' is deprecated. You should use 'string_key'""")
        if string_condition_keys is not None:
            pulumi.set(__self__, "string_condition_keys", string_condition_keys)
        if string_keys is not None:
            pulumi.set(__self__, "string_keys", string_keys)
        if strings is not None:
            pulumi.set(__self__, "strings", strings)
        if synthetic_engine_type_comparisons is not None:
            warnings.warn("""You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""synthetic_engine_type_comparisons is deprecated: You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.""")
        if synthetic_engine_type_comparisons is not None:
            pulumi.set(__self__, "synthetic_engine_type_comparisons", synthetic_engine_type_comparisons)
        if synthetic_engines is not None:
            pulumi.set(__self__, "synthetic_engines", synthetic_engines)
        if tag_comparisons is not None:
            warnings.warn("""You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""tag_comparisons is deprecated: You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.""")
        if tag_comparisons is not None:
            pulumi.set(__self__, "tag_comparisons", tag_comparisons)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if teches is not None:
            pulumi.set(__self__, "teches", teches)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="applicationTypeComparisons")
    def application_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionApplicationTypeComparisonArgs']]]]:
        return pulumi.get(self, "application_type_comparisons")

    @application_type_comparisons.setter
    def application_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionApplicationTypeComparisonArgs']]]]):
        pulumi.set(self, "application_type_comparisons", value)

    @property
    @pulumi.getter(name="applicationTypes")
    def application_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionApplicationTypeArgs']]]]:
        return pulumi.get(self, "application_types")

    @application_types.setter
    def application_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionApplicationTypeArgs']]]]):
        pulumi.set(self, "application_types", value)

    @property
    @pulumi.getter(name="azureComputeModeComparisons")
    def azure_compute_mode_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureComputeModeComparisonArgs']]]]:
        return pulumi.get(self, "azure_compute_mode_comparisons")

    @azure_compute_mode_comparisons.setter
    def azure_compute_mode_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureComputeModeComparisonArgs']]]]):
        pulumi.set(self, "azure_compute_mode_comparisons", value)

    @property
    @pulumi.getter(name="azureComputeModes")
    def azure_compute_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureComputeModeArgs']]]]:
        return pulumi.get(self, "azure_compute_modes")

    @azure_compute_modes.setter
    def azure_compute_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureComputeModeArgs']]]]):
        pulumi.set(self, "azure_compute_modes", value)

    @property
    @pulumi.getter(name="azureSkuComparisions")
    def azure_sku_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureSkuComparisionArgs']]]]:
        return pulumi.get(self, "azure_sku_comparisions")

    @azure_sku_comparisions.setter
    def azure_sku_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureSkuComparisionArgs']]]]):
        pulumi.set(self, "azure_sku_comparisions", value)

    @property
    @pulumi.getter(name="azureSkus")
    def azure_skus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureSkusArgs']]]]:
        return pulumi.get(self, "azure_skus")

    @azure_skus.setter
    def azure_skus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionAzureSkusArgs']]]]):
        pulumi.set(self, "azure_skus", value)

    @property
    @pulumi.getter(name="baseComparisonBasics")
    def base_comparison_basics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBaseComparisonBasicArgs']]]]:
        return pulumi.get(self, "base_comparison_basics")

    @base_comparison_basics.setter
    def base_comparison_basics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBaseComparisonBasicArgs']]]]):
        pulumi.set(self, "base_comparison_basics", value)

    @property
    @pulumi.getter(name="baseConditionKeys")
    def base_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBaseConditionKeyArgs']]]]:
        return pulumi.get(self, "base_condition_keys")

    @base_condition_keys.setter
    def base_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBaseConditionKeyArgs']]]]):
        pulumi.set(self, "base_condition_keys", value)

    @property
    @pulumi.getter(name="bitnessComparisions")
    def bitness_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBitnessComparisionArgs']]]]:
        return pulumi.get(self, "bitness_comparisions")

    @bitness_comparisions.setter
    def bitness_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBitnessComparisionArgs']]]]):
        pulumi.set(self, "bitness_comparisions", value)

    @property
    @pulumi.getter
    def bitnesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBitnessArgs']]]]:
        return pulumi.get(self, "bitnesses")

    @bitnesses.setter
    def bitnesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionBitnessArgs']]]]):
        pulumi.set(self, "bitnesses", value)

    @property
    @pulumi.getter(name="cloudTypeComparisons")
    def cloud_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCloudTypeComparisonArgs']]]]:
        return pulumi.get(self, "cloud_type_comparisons")

    @cloud_type_comparisons.setter
    def cloud_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCloudTypeComparisonArgs']]]]):
        pulumi.set(self, "cloud_type_comparisons", value)

    @property
    @pulumi.getter(name="cloudTypes")
    def cloud_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCloudTypeArgs']]]]:
        return pulumi.get(self, "cloud_types")

    @cloud_types.setter
    def cloud_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCloudTypeArgs']]]]):
        pulumi.set(self, "cloud_types", value)

    @property
    @pulumi.getter
    def comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionComparisonArgs']]]]:
        return pulumi.get(self, "comparisons")

    @comparisons.setter
    def comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionComparisonArgs']]]]):
        pulumi.set(self, "comparisons", value)

    @property
    @pulumi.getter(name="customApplicationTypeComparisons")
    def custom_application_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomApplicationTypeComparisonArgs']]]]:
        return pulumi.get(self, "custom_application_type_comparisons")

    @custom_application_type_comparisons.setter
    def custom_application_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomApplicationTypeComparisonArgs']]]]):
        pulumi.set(self, "custom_application_type_comparisons", value)

    @property
    @pulumi.getter(name="customApplicationTypes")
    def custom_application_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomApplicationTypeArgs']]]]:
        return pulumi.get(self, "custom_application_types")

    @custom_application_types.setter
    def custom_application_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomApplicationTypeArgs']]]]):
        pulumi.set(self, "custom_application_types", value)

    @property
    @pulumi.getter(name="customHostMetadataConditionKeys")
    def custom_host_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomHostMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "custom_host_metadata_condition_keys")

    @custom_host_metadata_condition_keys.setter
    def custom_host_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomHostMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "custom_host_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="customHostMetadatas")
    def custom_host_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomHostMetadataArgs']]]]:
        return pulumi.get(self, "custom_host_metadatas")

    @custom_host_metadatas.setter
    def custom_host_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomHostMetadataArgs']]]]):
        pulumi.set(self, "custom_host_metadatas", value)

    @property
    @pulumi.getter(name="customProcessMetadataConditionKeys")
    def custom_process_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomProcessMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "custom_process_metadata_condition_keys")

    @custom_process_metadata_condition_keys.setter
    def custom_process_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomProcessMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "custom_process_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="customProcessMetadatas")
    def custom_process_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomProcessMetadataArgs']]]]:
        return pulumi.get(self, "custom_process_metadatas")

    @custom_process_metadatas.setter
    def custom_process_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionCustomProcessMetadataArgs']]]]):
        pulumi.set(self, "custom_process_metadatas", value)

    @property
    @pulumi.getter(name="databaseTopologies")
    def database_topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDatabaseTopologyArgs']]]]:
        return pulumi.get(self, "database_topologies")

    @database_topologies.setter
    def database_topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDatabaseTopologyArgs']]]]):
        pulumi.set(self, "database_topologies", value)

    @property
    @pulumi.getter(name="databaseTopologyComparisons")
    def database_topology_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDatabaseTopologyComparisonArgs']]]]:
        return pulumi.get(self, "database_topology_comparisons")

    @database_topology_comparisons.setter
    def database_topology_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDatabaseTopologyComparisonArgs']]]]):
        pulumi.set(self, "database_topology_comparisons", value)

    @property
    @pulumi.getter(name="dcrumDecoderComparisons")
    def dcrum_decoder_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDcrumDecoderComparisonArgs']]]]:
        return pulumi.get(self, "dcrum_decoder_comparisons")

    @dcrum_decoder_comparisons.setter
    def dcrum_decoder_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDcrumDecoderComparisonArgs']]]]):
        pulumi.set(self, "dcrum_decoder_comparisons", value)

    @property
    @pulumi.getter(name="dcrumDecoders")
    def dcrum_decoders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDcrumDecoderArgs']]]]:
        return pulumi.get(self, "dcrum_decoders")

    @dcrum_decoders.setter
    def dcrum_decoders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionDcrumDecoderArgs']]]]):
        pulumi.set(self, "dcrum_decoders", value)

    @property
    @pulumi.getter
    def entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionEntityArgs']]]]:
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionEntityArgs']]]]):
        pulumi.set(self, "entities", value)

    @property
    @pulumi.getter(name="entityIdComparisons")
    def entity_id_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionEntityIdComparisonArgs']]]]:
        return pulumi.get(self, "entity_id_comparisons")

    @entity_id_comparisons.setter
    def entity_id_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionEntityIdComparisonArgs']]]]):
        pulumi.set(self, "entity_id_comparisons", value)

    @property
    @pulumi.getter(name="hostTeches")
    def host_teches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionHostTechArgs']]]]:
        return pulumi.get(self, "host_teches")

    @host_teches.setter
    def host_teches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionHostTechArgs']]]]):
        pulumi.set(self, "host_teches", value)

    @property
    @pulumi.getter(name="hypervisorTypeComparisions")
    def hypervisor_type_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionHypervisorTypeComparisionArgs']]]]:
        return pulumi.get(self, "hypervisor_type_comparisions")

    @hypervisor_type_comparisions.setter
    def hypervisor_type_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionHypervisorTypeComparisionArgs']]]]):
        pulumi.set(self, "hypervisor_type_comparisions", value)

    @property
    @pulumi.getter
    def hypervisors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionHypervisorArgs']]]]:
        return pulumi.get(self, "hypervisors")

    @hypervisors.setter
    def hypervisors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionHypervisorArgs']]]]):
        pulumi.set(self, "hypervisors", value)

    @property
    @pulumi.getter(name="indexedNameComparisons")
    def indexed_name_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedNameComparisonArgs']]]]:
        return pulumi.get(self, "indexed_name_comparisons")

    @indexed_name_comparisons.setter
    def indexed_name_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedNameComparisonArgs']]]]):
        pulumi.set(self, "indexed_name_comparisons", value)

    @property
    @pulumi.getter(name="indexedNames")
    def indexed_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedNameArgs']]]]:
        return pulumi.get(self, "indexed_names")

    @indexed_names.setter
    def indexed_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedNameArgs']]]]):
        pulumi.set(self, "indexed_names", value)

    @property
    @pulumi.getter(name="indexedStringComparisons")
    def indexed_string_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedStringComparisonArgs']]]]:
        return pulumi.get(self, "indexed_string_comparisons")

    @indexed_string_comparisons.setter
    def indexed_string_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedStringComparisonArgs']]]]):
        pulumi.set(self, "indexed_string_comparisons", value)

    @property
    @pulumi.getter(name="indexedStrings")
    def indexed_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedStringArgs']]]]:
        return pulumi.get(self, "indexed_strings")

    @indexed_strings.setter
    def indexed_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedStringArgs']]]]):
        pulumi.set(self, "indexed_strings", value)

    @property
    @pulumi.getter(name="indexedTagComparisons")
    def indexed_tag_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedTagComparisonArgs']]]]:
        return pulumi.get(self, "indexed_tag_comparisons")

    @indexed_tag_comparisons.setter
    def indexed_tag_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedTagComparisonArgs']]]]):
        pulumi.set(self, "indexed_tag_comparisons", value)

    @property
    @pulumi.getter(name="indexedTags")
    def indexed_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedTagArgs']]]]:
        return pulumi.get(self, "indexed_tags")

    @indexed_tags.setter
    def indexed_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIndexedTagArgs']]]]):
        pulumi.set(self, "indexed_tags", value)

    @property
    @pulumi.getter(name="integerComparisons")
    def integer_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIntegerComparisonArgs']]]]:
        return pulumi.get(self, "integer_comparisons")

    @integer_comparisons.setter
    def integer_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIntegerComparisonArgs']]]]):
        pulumi.set(self, "integer_comparisons", value)

    @property
    @pulumi.getter
    def integers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIntegerArgs']]]]:
        return pulumi.get(self, "integers")

    @integers.setter
    def integers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIntegerArgs']]]]):
        pulumi.set(self, "integers", value)

    @property
    @pulumi.getter(name="ipaddressComparisons")
    def ipaddress_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIpaddressComparisonArgs']]]]:
        return pulumi.get(self, "ipaddress_comparisons")

    @ipaddress_comparisons.setter
    def ipaddress_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIpaddressComparisonArgs']]]]):
        pulumi.set(self, "ipaddress_comparisons", value)

    @property
    @pulumi.getter
    def ipaddresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIpaddressArgs']]]]:
        return pulumi.get(self, "ipaddresses")

    @ipaddresses.setter
    def ipaddresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionIpaddressArgs']]]]):
        pulumi.set(self, "ipaddresses", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionKeyArgs']]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="mobilePlatformComparisons")
    def mobile_platform_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionMobilePlatformComparisonArgs']]]]:
        return pulumi.get(self, "mobile_platform_comparisons")

    @mobile_platform_comparisons.setter
    def mobile_platform_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionMobilePlatformComparisonArgs']]]]):
        pulumi.set(self, "mobile_platform_comparisons", value)

    @property
    @pulumi.getter(name="mobilePlatforms")
    def mobile_platforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionMobilePlatformArgs']]]]:
        return pulumi.get(self, "mobile_platforms")

    @mobile_platforms.setter
    def mobile_platforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionMobilePlatformArgs']]]]):
        pulumi.set(self, "mobile_platforms", value)

    @property
    @pulumi.getter(name="osArches")
    def os_arches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOsArchArgs']]]]:
        return pulumi.get(self, "os_arches")

    @os_arches.setter
    def os_arches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOsArchArgs']]]]):
        pulumi.set(self, "os_arches", value)

    @property
    @pulumi.getter(name="osTypes")
    def os_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOsTypeArgs']]]]:
        return pulumi.get(self, "os_types")

    @os_types.setter
    def os_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOsTypeArgs']]]]):
        pulumi.set(self, "os_types", value)

    @property
    @pulumi.getter(name="osarchitectureComparisons")
    def osarchitecture_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOsarchitectureComparisonArgs']]]]:
        return pulumi.get(self, "osarchitecture_comparisons")

    @osarchitecture_comparisons.setter
    def osarchitecture_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOsarchitectureComparisonArgs']]]]):
        pulumi.set(self, "osarchitecture_comparisons", value)

    @property
    @pulumi.getter(name="ostypeComparisons")
    def ostype_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOstypeComparisonArgs']]]]:
        return pulumi.get(self, "ostype_comparisons")

    @ostype_comparisons.setter
    def ostype_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionOstypeComparisonArgs']]]]):
        pulumi.set(self, "ostype_comparisons", value)

    @property
    @pulumi.getter(name="paasTypeComparisons")
    def paas_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionPaasTypeComparisonArgs']]]]:
        return pulumi.get(self, "paas_type_comparisons")

    @paas_type_comparisons.setter
    def paas_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionPaasTypeComparisonArgs']]]]):
        pulumi.set(self, "paas_type_comparisons", value)

    @property
    @pulumi.getter(name="paasTypes")
    def paas_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionPaasTypeArgs']]]]:
        return pulumi.get(self, "paas_types")

    @paas_types.setter
    def paas_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionPaasTypeArgs']]]]):
        pulumi.set(self, "paas_types", value)

    @property
    @pulumi.getter(name="processMetadataConditionKeys")
    def process_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionProcessMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "process_metadata_condition_keys")

    @process_metadata_condition_keys.setter
    def process_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionProcessMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "process_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="processMetadatas")
    def process_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionProcessMetadataArgs']]]]:
        return pulumi.get(self, "process_metadatas")

    @process_metadatas.setter
    def process_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionProcessMetadataArgs']]]]):
        pulumi.set(self, "process_metadatas", value)

    @property
    @pulumi.getter(name="serviceTopologies")
    def service_topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTopologyArgs']]]]:
        return pulumi.get(self, "service_topologies")

    @service_topologies.setter
    def service_topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTopologyArgs']]]]):
        pulumi.set(self, "service_topologies", value)

    @property
    @pulumi.getter(name="serviceTopologyComparisons")
    def service_topology_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTopologyComparisonArgs']]]]:
        return pulumi.get(self, "service_topology_comparisons")

    @service_topology_comparisons.setter
    def service_topology_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTopologyComparisonArgs']]]]):
        pulumi.set(self, "service_topology_comparisons", value)

    @property
    @pulumi.getter(name="serviceTypeComparisons")
    def service_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTypeComparisonArgs']]]]:
        return pulumi.get(self, "service_type_comparisons")

    @service_type_comparisons.setter
    def service_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTypeComparisonArgs']]]]):
        pulumi.set(self, "service_type_comparisons", value)

    @property
    @pulumi.getter(name="serviceTypes")
    def service_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTypeArgs']]]]:
        return pulumi.get(self, "service_types")

    @service_types.setter
    def service_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionServiceTypeArgs']]]]):
        pulumi.set(self, "service_types", value)

    @property
    @pulumi.getter(name="simpleHostTechComparisons")
    def simple_host_tech_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSimpleHostTechComparisonArgs']]]]:
        return pulumi.get(self, "simple_host_tech_comparisons")

    @simple_host_tech_comparisons.setter
    def simple_host_tech_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSimpleHostTechComparisonArgs']]]]):
        pulumi.set(self, "simple_host_tech_comparisons", value)

    @property
    @pulumi.getter(name="simpleTechComparisons")
    def simple_tech_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSimpleTechComparisonArgs']]]]:
        return pulumi.get(self, "simple_tech_comparisons")

    @simple_tech_comparisons.setter
    def simple_tech_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSimpleTechComparisonArgs']]]]):
        pulumi.set(self, "simple_tech_comparisons", value)

    @property
    @pulumi.getter(name="stringComparisons")
    def string_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringComparisonArgs']]]]:
        return pulumi.get(self, "string_comparisons")

    @string_comparisons.setter
    def string_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringComparisonArgs']]]]):
        pulumi.set(self, "string_comparisons", value)

    @property
    @pulumi.getter(name="stringConditionKeys")
    def string_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringConditionKeyArgs']]]]:
        return pulumi.get(self, "string_condition_keys")

    @string_condition_keys.setter
    def string_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringConditionKeyArgs']]]]):
        pulumi.set(self, "string_condition_keys", value)

    @property
    @pulumi.getter(name="stringKeys")
    def string_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringKeyArgs']]]]:
        return pulumi.get(self, "string_keys")

    @string_keys.setter
    def string_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringKeyArgs']]]]):
        pulumi.set(self, "string_keys", value)

    @property
    @pulumi.getter
    def strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringArgs']]]]:
        return pulumi.get(self, "strings")

    @strings.setter
    def strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionStringArgs']]]]):
        pulumi.set(self, "strings", value)

    @property
    @pulumi.getter(name="syntheticEngineTypeComparisons")
    def synthetic_engine_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSyntheticEngineTypeComparisonArgs']]]]:
        return pulumi.get(self, "synthetic_engine_type_comparisons")

    @synthetic_engine_type_comparisons.setter
    def synthetic_engine_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSyntheticEngineTypeComparisonArgs']]]]):
        pulumi.set(self, "synthetic_engine_type_comparisons", value)

    @property
    @pulumi.getter(name="syntheticEngines")
    def synthetic_engines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSyntheticEngineArgs']]]]:
        return pulumi.get(self, "synthetic_engines")

    @synthetic_engines.setter
    def synthetic_engines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionSyntheticEngineArgs']]]]):
        pulumi.set(self, "synthetic_engines", value)

    @property
    @pulumi.getter(name="tagComparisons")
    def tag_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionTagComparisonArgs']]]]:
        return pulumi.get(self, "tag_comparisons")

    @tag_comparisons.setter
    def tag_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionTagComparisonArgs']]]]):
        pulumi.set(self, "tag_comparisons", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def teches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionTechArgs']]]]:
        return pulumi.get(self, "teches")

    @teches.setter
    def teches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutotagRuleConditionTechArgs']]]]):
        pulumi.set(self, "teches", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionApplicationTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionApplicationTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionAzureComputeModeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionAzureComputeModeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionAzureSkuComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionAzureSkusArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionBaseComparisonBasicArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionBaseConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionBitnessArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionBitnessComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionCloudTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionCloudTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionComparisonArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionCustomApplicationTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionCustomApplicationTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionCustomHostMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['AutotagRuleConditionCustomHostMetadataDynamicKeyArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['AutotagRuleConditionCustomHostMetadataDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['AutotagRuleConditionCustomHostMetadataDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionCustomHostMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKeyArgs'],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionCustomHostMetadataDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionCustomProcessMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['AutotagRuleConditionCustomProcessMetadataDynamicKeyArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['AutotagRuleConditionCustomProcessMetadataDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['AutotagRuleConditionCustomProcessMetadataDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionCustomProcessMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKeyArgs'],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionCustomProcessMetadataDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionDatabaseTopologyArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionDatabaseTopologyComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionDcrumDecoderArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionDcrumDecoderComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionEntityArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionEntityIdComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionHostTechArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['AutotagRuleConditionHostTechValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AutotagRuleConditionHostTechValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AutotagRuleConditionHostTechValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionHostTechValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class AutotagRuleConditionHypervisorArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionHypervisorTypeComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIndexedNameArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIndexedNameComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIndexedStringArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIndexedStringComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIndexedTagArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['AutotagRuleConditionIndexedTagValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AutotagRuleConditionIndexedTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AutotagRuleConditionIndexedTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIndexedTagComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['AutotagRuleConditionIndexedTagComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AutotagRuleConditionIndexedTagComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AutotagRuleConditionIndexedTagComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIndexedTagComparisonValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIndexedTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIntegerArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIntegerComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIpaddressArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionIpaddressComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionMobilePlatformArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionMobilePlatformComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionOsArchArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionOsTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionOsarchitectureComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionOstypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionPaasTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionPaasTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionProcessMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionProcessMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionServiceTopologyArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionServiceTopologyComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionServiceTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionServiceTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionSimpleHostTechComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['AutotagRuleConditionSimpleHostTechComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AutotagRuleConditionSimpleHostTechComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AutotagRuleConditionSimpleHostTechComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionSimpleHostTechComparisonValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class AutotagRuleConditionSimpleTechComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['AutotagRuleConditionSimpleTechComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AutotagRuleConditionSimpleTechComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AutotagRuleConditionSimpleTechComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionSimpleTechComparisonValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class AutotagRuleConditionStringArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionStringComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionStringConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionStringKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AutotagRuleConditionSyntheticEngineArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionSyntheticEngineTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionTagArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['AutotagRuleConditionTagValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AutotagRuleConditionTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AutotagRuleConditionTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionTagComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['AutotagRuleConditionTagComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AutotagRuleConditionTagComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AutotagRuleConditionTagComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionTagComparisonValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionTechArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['AutotagRuleConditionTechValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AutotagRuleConditionTechValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AutotagRuleConditionTechValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutotagRuleConditionTechValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class AutotagV2RulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['AutotagV2RulesRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['AutotagV2RulesRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['AutotagV2RulesRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class AutotagV2RulesRuleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 value_normalization: pulumi.Input[str],
                 attribute_rule: Optional[pulumi.Input['AutotagV2RulesRuleAttributeRuleArgs']] = None,
                 entity_selector: Optional[pulumi.Input[str]] = None,
                 value_format: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value_normalization", value_normalization)
        if attribute_rule is not None:
            pulumi.set(__self__, "attribute_rule", attribute_rule)
        if entity_selector is not None:
            pulumi.set(__self__, "entity_selector", entity_selector)
        if value_format is not None:
            pulumi.set(__self__, "value_format", value_format)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="valueNormalization")
    def value_normalization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value_normalization")

    @value_normalization.setter
    def value_normalization(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_normalization", value)

    @property
    @pulumi.getter(name="attributeRule")
    def attribute_rule(self) -> Optional[pulumi.Input['AutotagV2RulesRuleAttributeRuleArgs']]:
        return pulumi.get(self, "attribute_rule")

    @attribute_rule.setter
    def attribute_rule(self, value: Optional[pulumi.Input['AutotagV2RulesRuleAttributeRuleArgs']]):
        pulumi.set(self, "attribute_rule", value)

    @property
    @pulumi.getter(name="entitySelector")
    def entity_selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_selector")

    @entity_selector.setter
    def entity_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_selector", value)

    @property
    @pulumi.getter(name="valueFormat")
    def value_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_format")

    @value_format.setter
    def value_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_format", value)


@pulumi.input_type
class AutotagV2RulesRuleAttributeRuleArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input['AutotagV2RulesRuleAttributeRuleConditionsArgs'],
                 entity_type: pulumi.Input[str],
                 azure_to_pgpropagation: Optional[pulumi.Input[bool]] = None,
                 azure_to_service_propagation: Optional[pulumi.Input[bool]] = None,
                 host_to_pgpropagation: Optional[pulumi.Input[bool]] = None,
                 pg_to_host_propagation: Optional[pulumi.Input[bool]] = None,
                 pg_to_service_propagation: Optional[pulumi.Input[bool]] = None,
                 service_to_host_propagation: Optional[pulumi.Input[bool]] = None,
                 service_to_pgpropagation: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "entity_type", entity_type)
        if azure_to_pgpropagation is not None:
            pulumi.set(__self__, "azure_to_pgpropagation", azure_to_pgpropagation)
        if azure_to_service_propagation is not None:
            pulumi.set(__self__, "azure_to_service_propagation", azure_to_service_propagation)
        if host_to_pgpropagation is not None:
            pulumi.set(__self__, "host_to_pgpropagation", host_to_pgpropagation)
        if pg_to_host_propagation is not None:
            pulumi.set(__self__, "pg_to_host_propagation", pg_to_host_propagation)
        if pg_to_service_propagation is not None:
            pulumi.set(__self__, "pg_to_service_propagation", pg_to_service_propagation)
        if service_to_host_propagation is not None:
            pulumi.set(__self__, "service_to_host_propagation", service_to_host_propagation)
        if service_to_pgpropagation is not None:
            pulumi.set(__self__, "service_to_pgpropagation", service_to_pgpropagation)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input['AutotagV2RulesRuleAttributeRuleConditionsArgs']:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input['AutotagV2RulesRuleAttributeRuleConditionsArgs']):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="azureToPgpropagation")
    def azure_to_pgpropagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "azure_to_pgpropagation")

    @azure_to_pgpropagation.setter
    def azure_to_pgpropagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_to_pgpropagation", value)

    @property
    @pulumi.getter(name="azureToServicePropagation")
    def azure_to_service_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "azure_to_service_propagation")

    @azure_to_service_propagation.setter
    def azure_to_service_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_to_service_propagation", value)

    @property
    @pulumi.getter(name="hostToPgpropagation")
    def host_to_pgpropagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "host_to_pgpropagation")

    @host_to_pgpropagation.setter
    def host_to_pgpropagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_to_pgpropagation", value)

    @property
    @pulumi.getter(name="pgToHostPropagation")
    def pg_to_host_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pg_to_host_propagation")

    @pg_to_host_propagation.setter
    def pg_to_host_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pg_to_host_propagation", value)

    @property
    @pulumi.getter(name="pgToServicePropagation")
    def pg_to_service_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pg_to_service_propagation")

    @pg_to_service_propagation.setter
    def pg_to_service_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pg_to_service_propagation", value)

    @property
    @pulumi.getter(name="serviceToHostPropagation")
    def service_to_host_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "service_to_host_propagation")

    @service_to_host_propagation.setter
    def service_to_host_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_to_host_propagation", value)

    @property
    @pulumi.getter(name="serviceToPgpropagation")
    def service_to_pgpropagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "service_to_pgpropagation")

    @service_to_pgpropagation.setter
    def service_to_pgpropagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_to_pgpropagation", value)


@pulumi.input_type
class AutotagV2RulesRuleAttributeRuleConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['AutotagV2RulesRuleAttributeRuleConditionsConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['AutotagV2RulesRuleAttributeRuleConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['AutotagV2RulesRuleAttributeRuleConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class AutotagV2RulesRuleAttributeRuleConditionsConditionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 dynamic_key: Optional[pulumi.Input[str]] = None,
                 dynamic_key_source: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 enum_value: Optional[pulumi.Input[str]] = None,
                 integer_value: Optional[pulumi.Input[int]] = None,
                 string_value: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if dynamic_key is not None:
            pulumi.set(__self__, "dynamic_key", dynamic_key)
        if dynamic_key_source is not None:
            pulumi.set(__self__, "dynamic_key_source", dynamic_key_source)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if enum_value is not None:
            pulumi.set(__self__, "enum_value", enum_value)
        if integer_value is not None:
            pulumi.set(__self__, "integer_value", integer_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter(name="dynamicKeySource")
    def dynamic_key_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_key_source")

    @dynamic_key_source.setter
    def dynamic_key_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_key_source", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="enumValue")
    def enum_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enum_value")

    @enum_value.setter
    def enum_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enum_value", value)

    @property
    @pulumi.getter(name="integerValue")
    def integer_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "integer_value")

    @integer_value.setter
    def integer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "integer_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class AwsAnomaliesEc2CandidateHighCpuDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 cpu_usage: pulumi.Input[float]):
        pulumi.set(__self__, "cpu_usage", cpu_usage)

    @property
    @pulumi.getter(name="cpuUsage")
    def cpu_usage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "cpu_usage")

    @cpu_usage.setter
    def cpu_usage(self, value: pulumi.Input[float]):
        pulumi.set(self, "cpu_usage", value)


@pulumi.input_type
class AwsAnomaliesElbHighConnectionErrorsDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 connection_errors_per_minute: pulumi.Input[int]):
        pulumi.set(__self__, "connection_errors_per_minute", connection_errors_per_minute)

    @property
    @pulumi.getter(name="connectionErrorsPerMinute")
    def connection_errors_per_minute(self) -> pulumi.Input[int]:
        return pulumi.get(self, "connection_errors_per_minute")

    @connection_errors_per_minute.setter
    def connection_errors_per_minute(self, value: pulumi.Input[int]):
        pulumi.set(self, "connection_errors_per_minute", value)


@pulumi.input_type
class AwsAnomaliesLambdaHighErrorRateDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 failed_invocations_rate: pulumi.Input[int]):
        pulumi.set(__self__, "failed_invocations_rate", failed_invocations_rate)

    @property
    @pulumi.getter(name="failedInvocationsRate")
    def failed_invocations_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failed_invocations_rate")

    @failed_invocations_rate.setter
    def failed_invocations_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "failed_invocations_rate", value)


@pulumi.input_type
class AwsAnomaliesRdsHighCpuDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['AwsAnomaliesRdsHighCpuDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['AwsAnomaliesRdsHighCpuDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['AwsAnomaliesRdsHighCpuDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['AwsAnomaliesRdsHighCpuDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class AwsAnomaliesRdsHighCpuDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 cpu_usage: pulumi.Input[float]):
        pulumi.set(__self__, "cpu_usage", cpu_usage)

    @property
    @pulumi.getter(name="cpuUsage")
    def cpu_usage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "cpu_usage")

    @cpu_usage.setter
    def cpu_usage(self, value: pulumi.Input[float]):
        pulumi.set(self, "cpu_usage", value)


@pulumi.input_type
class AwsAnomaliesRdsHighMemoryDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['AwsAnomaliesRdsHighMemoryDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['AwsAnomaliesRdsHighMemoryDetectionCustomThresholdsArgs'] custom_thresholds: Alert if **both** conditions is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['AwsAnomaliesRdsHighMemoryDetectionCustomThresholdsArgs']]:
        """
        Alert if **both** conditions is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['AwsAnomaliesRdsHighMemoryDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class AwsAnomaliesRdsHighMemoryDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 free_memory: pulumi.Input[float],
                 swap_usage: pulumi.Input[float]):
        pulumi.set(__self__, "free_memory", free_memory)
        pulumi.set(__self__, "swap_usage", swap_usage)

    @property
    @pulumi.getter(name="freeMemory")
    def free_memory(self) -> pulumi.Input[float]:
        return pulumi.get(self, "free_memory")

    @free_memory.setter
    def free_memory(self, value: pulumi.Input[float]):
        pulumi.set(self, "free_memory", value)

    @property
    @pulumi.getter(name="swapUsage")
    def swap_usage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "swap_usage")

    @swap_usage.setter
    def swap_usage(self, value: pulumi.Input[float]):
        pulumi.set(self, "swap_usage", value)


@pulumi.input_type
class AwsAnomaliesRdsHighWriteReadLatencyDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 read_write_latency: pulumi.Input[int]):
        pulumi.set(__self__, "read_write_latency", read_write_latency)

    @property
    @pulumi.getter(name="readWriteLatency")
    def read_write_latency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "read_write_latency")

    @read_write_latency.setter
    def read_write_latency(self, value: pulumi.Input[int]):
        pulumi.set(self, "read_write_latency", value)


@pulumi.input_type
class AwsAnomaliesRdsLowStorageDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['AwsAnomaliesRdsLowStorageDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['AwsAnomaliesRdsLowStorageDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['AwsAnomaliesRdsLowStorageDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['AwsAnomaliesRdsLowStorageDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class AwsAnomaliesRdsLowStorageDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 free_storage_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "free_storage_percentage", free_storage_percentage)

    @property
    @pulumi.getter(name="freeStoragePercentage")
    def free_storage_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "free_storage_percentage")

    @free_storage_percentage.setter
    def free_storage_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "free_storage_percentage", value)


@pulumi.input_type
class AwsAnomaliesRdsRestartsSequenceDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 2 out of 20 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 2 out of 20 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 restarts_per_minute: pulumi.Input[int]):
        pulumi.set(__self__, "restarts_per_minute", restarts_per_minute)

    @property
    @pulumi.getter(name="restartsPerMinute")
    def restarts_per_minute(self) -> pulumi.Input[int]:
        return pulumi.get(self, "restarts_per_minute")

    @restarts_per_minute.setter
    def restarts_per_minute(self, value: pulumi.Input[int]):
        pulumi.set(self, "restarts_per_minute", value)


@pulumi.input_type
class AwsCredentialsAuthenticationDataArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 iam_role: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_key: the access key
        :param pulumi.Input[str] account_id: the ID of the Amazon account
        :param pulumi.Input[str] external_id: (Read only) the external ID token for setting an IAM role. You can obtain it with the `GET /aws/iamExternalId` request
        :param pulumi.Input[str] iam_role: the IAM role to be used by Dynatrace to get monitoring data
        :param pulumi.Input[str] secret_key: the secret access key
        :param pulumi.Input[str] unknowns: Any attributes that aren't yet supported by this provider
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if iam_role is not None:
            pulumi.set(__self__, "iam_role", iam_role)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        the access key
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        the ID of the Amazon account
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Read only) the external ID token for setting an IAM role. You can obtain it with the `GET /aws/iamExternalId` request
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter(name="iamRole")
    def iam_role(self) -> Optional[pulumi.Input[str]]:
        """
        the IAM role to be used by Dynatrace to get monitoring data
        """
        return pulumi.get(self, "iam_role")

    @iam_role.setter
    def iam_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_role", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        the secret access key
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        Any attributes that aren't yet supported by this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AwsCredentialsSupportingServicesToMonitorArgs:
    def __init__(__self__, *,
                 monitored_metrics: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCredentialsSupportingServicesToMonitorMonitoredMetricArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AwsCredentialsSupportingServicesToMonitorMonitoredMetricArgs']]] monitored_metrics: a list of metrics to be monitored for this service
        :param pulumi.Input[str] name: the name of the supporting service
        :param pulumi.Input[str] unknowns: Any attributes that aren't yet supported by this provider
        """
        if monitored_metrics is not None:
            pulumi.set(__self__, "monitored_metrics", monitored_metrics)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="monitoredMetrics")
    def monitored_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsCredentialsSupportingServicesToMonitorMonitoredMetricArgs']]]]:
        """
        a list of metrics to be monitored for this service
        """
        return pulumi.get(self, "monitored_metrics")

    @monitored_metrics.setter
    def monitored_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCredentialsSupportingServicesToMonitorMonitoredMetricArgs']]]]):
        pulumi.set(self, "monitored_metrics", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        the name of the supporting service
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        Any attributes that aren't yet supported by this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AwsCredentialsSupportingServicesToMonitorMonitoredMetricArgs:
    def __init__(__self__, *,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 statistic: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: Any attributes that aren't yet supported by this provider
        """
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if statistic is not None:
            pulumi.set(__self__, "statistic", statistic)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def statistic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "statistic")

    @statistic.setter
    def statistic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "statistic", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        Any attributes that aren't yet supported by this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AwsCredentialsTagsToMonitorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: the key of the AWS tag.
        :param pulumi.Input[str] unknowns: Any attributes that aren't yet supported by this provider
        :param pulumi.Input[str] value: the value of the AWS tag
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        the key of the AWS tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        Any attributes that aren't yet supported by this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        the value of the AWS tag
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AzureCredentialsMonitorOnlyExcludingTagPairArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the tag.
        :param pulumi.Input[str] unknowns: Any attributes that aren't yet supported by this provider
        :param pulumi.Input[str] value: The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        Any attributes that aren't yet supported by this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AzureCredentialsMonitorOnlyTagPairArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the tag.
        :param pulumi.Input[str] unknowns: Any attributes that aren't yet supported by this provider
        :param pulumi.Input[str] value: The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the tag.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        Any attributes that aren't yet supported by this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AzureCredentialsSupportingServiceArgs:
    def __init__(__self__, *,
                 monitored_metrics: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCredentialsSupportingServiceMonitoredMetricArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AzureCredentialsSupportingServiceMonitoredMetricArgs']]] monitored_metrics: A list of Azure tags to be monitored.  You can specify up to 10 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
        :param pulumi.Input[str] name: The name of the supporting service.
        :param pulumi.Input[str] unknowns: Any attributes that aren't yet supported by this provider
        """
        if monitored_metrics is not None:
            pulumi.set(__self__, "monitored_metrics", monitored_metrics)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="monitoredMetrics")
    def monitored_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AzureCredentialsSupportingServiceMonitoredMetricArgs']]]]:
        """
        A list of Azure tags to be monitored.  You can specify up to 10 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
        """
        return pulumi.get(self, "monitored_metrics")

    @monitored_metrics.setter
    def monitored_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AzureCredentialsSupportingServiceMonitoredMetricArgs']]]]):
        pulumi.set(self, "monitored_metrics", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the supporting service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        Any attributes that aren't yet supported by this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class AzureCredentialsSupportingServiceMonitoredMetricArgs:
    def __init__(__self__, *,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: Any attributes that aren't yet supported by this provider
        """
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        Any attributes that aren't yet supported by this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class BrowserMonitorAnomalyDetectionArgs:
    def __init__(__self__, *,
                 loading_time_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionLoadingTimeThresholdArgs']]]] = None,
                 outage_handlings: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionOutageHandlingArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionLoadingTimeThresholdArgs']]] loading_time_thresholds: Thresholds for loading times
        :param pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionOutageHandlingArgs']]] outage_handlings: Outage handling configuration
        """
        if loading_time_thresholds is not None:
            pulumi.set(__self__, "loading_time_thresholds", loading_time_thresholds)
        if outage_handlings is not None:
            pulumi.set(__self__, "outage_handlings", outage_handlings)

    @property
    @pulumi.getter(name="loadingTimeThresholds")
    def loading_time_thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionLoadingTimeThresholdArgs']]]]:
        """
        Thresholds for loading times
        """
        return pulumi.get(self, "loading_time_thresholds")

    @loading_time_thresholds.setter
    def loading_time_thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionLoadingTimeThresholdArgs']]]]):
        pulumi.set(self, "loading_time_thresholds", value)

    @property
    @pulumi.getter(name="outageHandlings")
    def outage_handlings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionOutageHandlingArgs']]]]:
        """
        Outage handling configuration
        """
        return pulumi.get(self, "outage_handlings")

    @outage_handlings.setter
    def outage_handlings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionOutageHandlingArgs']]]]):
        pulumi.set(self, "outage_handlings", value)


@pulumi.input_type
class BrowserMonitorAnomalyDetectionLoadingTimeThresholdArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdArgs']]]]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdArgs']]]]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdArgs:
    def __init__(__self__, *,
                 thresholds: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThresholdArgs']]]):
        pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def thresholds(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThresholdArgs']]]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThresholdArgs']]]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThresholdArgs:
    def __init__(__self__, *,
                 value_ms: pulumi.Input[int],
                 event_index: Optional[pulumi.Input[int]] = None,
                 request_index: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "value_ms", value_ms)
        if event_index is not None:
            pulumi.set(__self__, "event_index", event_index)
        if request_index is not None:
            pulumi.set(__self__, "request_index", request_index)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="valueMs")
    def value_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value_ms")

    @value_ms.setter
    def value_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "value_ms", value)

    @property
    @pulumi.getter(name="eventIndex")
    def event_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "event_index")

    @event_index.setter
    def event_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "event_index", value)

    @property
    @pulumi.getter(name="requestIndex")
    def request_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "request_index")

    @request_index.setter
    def request_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_index", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class BrowserMonitorAnomalyDetectionOutageHandlingArgs:
    def __init__(__self__, *,
                 global_outage: Optional[pulumi.Input[bool]] = None,
                 global_outage_policies: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs']]]] = None,
                 local_outage: Optional[pulumi.Input[bool]] = None,
                 local_outage_policies: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyArgs']]]] = None,
                 retry_on_error: Optional[pulumi.Input[bool]] = None):
        if global_outage is not None:
            pulumi.set(__self__, "global_outage", global_outage)
        if global_outage_policies is not None:
            pulumi.set(__self__, "global_outage_policies", global_outage_policies)
        if local_outage is not None:
            pulumi.set(__self__, "local_outage", local_outage)
        if local_outage_policies is not None:
            pulumi.set(__self__, "local_outage_policies", local_outage_policies)
        if retry_on_error is not None:
            pulumi.set(__self__, "retry_on_error", retry_on_error)

    @property
    @pulumi.getter(name="globalOutage")
    def global_outage(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_outage")

    @global_outage.setter
    def global_outage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_outage", value)

    @property
    @pulumi.getter(name="globalOutagePolicies")
    def global_outage_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs']]]]:
        return pulumi.get(self, "global_outage_policies")

    @global_outage_policies.setter
    def global_outage_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs']]]]):
        pulumi.set(self, "global_outage_policies", value)

    @property
    @pulumi.getter(name="localOutage")
    def local_outage(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "local_outage")

    @local_outage.setter
    def local_outage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_outage", value)

    @property
    @pulumi.getter(name="localOutagePolicies")
    def local_outage_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyArgs']]]]:
        return pulumi.get(self, "local_outage_policies")

    @local_outage_policies.setter
    def local_outage_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyArgs']]]]):
        pulumi.set(self, "local_outage_policies", value)

    @property
    @pulumi.getter(name="retryOnError")
    def retry_on_error(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "retry_on_error")

    @retry_on_error.setter
    def retry_on_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retry_on_error", value)


@pulumi.input_type
class BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs:
    def __init__(__self__, *,
                 consecutive_runs: pulumi.Input[int]):
        pulumi.set(__self__, "consecutive_runs", consecutive_runs)

    @property
    @pulumi.getter(name="consecutiveRuns")
    def consecutive_runs(self) -> pulumi.Input[int]:
        return pulumi.get(self, "consecutive_runs")

    @consecutive_runs.setter
    def consecutive_runs(self, value: pulumi.Input[int]):
        pulumi.set(self, "consecutive_runs", value)


@pulumi.input_type
class BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyArgs:
    def __init__(__self__, *,
                 affected_locations: pulumi.Input[int],
                 consecutive_runs: pulumi.Input[int]):
        pulumi.set(__self__, "affected_locations", affected_locations)
        pulumi.set(__self__, "consecutive_runs", consecutive_runs)

    @property
    @pulumi.getter(name="affectedLocations")
    def affected_locations(self) -> pulumi.Input[int]:
        return pulumi.get(self, "affected_locations")

    @affected_locations.setter
    def affected_locations(self, value: pulumi.Input[int]):
        pulumi.set(self, "affected_locations", value)

    @property
    @pulumi.getter(name="consecutiveRuns")
    def consecutive_runs(self) -> pulumi.Input[int]:
        return pulumi.get(self, "consecutive_runs")

    @consecutive_runs.setter
    def consecutive_runs(self, value: pulumi.Input[int]):
        pulumi.set(self, "consecutive_runs", value)


@pulumi.input_type
class BrowserMonitorKeyPerformanceMetricsArgs:
    def __init__(__self__, *,
                 load_action_kpm: pulumi.Input[str],
                 xhr_action_kpm: pulumi.Input[str]):
        """
        :param pulumi.Input[str] load_action_kpm: Defines the key performance metric for load actions. Supported values are `VISUALLY_COMPLETE`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE`, `HTML_DOWNLOADED`, `DOM_INTERACTIVE`, `LOAD_EVENT_START` and `LOAD_EVENT_END`.
        :param pulumi.Input[str] xhr_action_kpm: Defines the key performance metric for XHR actions. Supported values are `VISUALLY_COMPLETE`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE` and `RESPONSE_END`.
        """
        pulumi.set(__self__, "load_action_kpm", load_action_kpm)
        pulumi.set(__self__, "xhr_action_kpm", xhr_action_kpm)

    @property
    @pulumi.getter(name="loadActionKpm")
    def load_action_kpm(self) -> pulumi.Input[str]:
        """
        Defines the key performance metric for load actions. Supported values are `VISUALLY_COMPLETE`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE`, `HTML_DOWNLOADED`, `DOM_INTERACTIVE`, `LOAD_EVENT_START` and `LOAD_EVENT_END`.
        """
        return pulumi.get(self, "load_action_kpm")

    @load_action_kpm.setter
    def load_action_kpm(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_action_kpm", value)

    @property
    @pulumi.getter(name="xhrActionKpm")
    def xhr_action_kpm(self) -> pulumi.Input[str]:
        """
        Defines the key performance metric for XHR actions. Supported values are `VISUALLY_COMPLETE`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE` and `RESPONSE_END`.
        """
        return pulumi.get(self, "xhr_action_kpm")

    @xhr_action_kpm.setter
    def xhr_action_kpm(self, value: pulumi.Input[str]):
        pulumi.set(self, "xhr_action_kpm", value)


@pulumi.input_type
class BrowserMonitorPerformanceThresholdsArgs:
    def __init__(__self__, *,
                 thresholds: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorPerformanceThresholdsThresholdArgs']]]):
        pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def thresholds(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorPerformanceThresholdsThresholdArgs']]]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorPerformanceThresholdsThresholdArgs']]]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class BrowserMonitorPerformanceThresholdsThresholdArgs:
    def __init__(__self__, *,
                 event: pulumi.Input[str],
                 threshold: pulumi.Input[float]):
        pulumi.set(__self__, "event", event)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def event(self) -> pulumi.Input[str]:
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: pulumi.Input[str]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class BrowserMonitorScriptArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 configuration: Optional[pulumi.Input['BrowserMonitorScriptConfigurationArgs']] = None,
                 events: Optional[pulumi.Input['BrowserMonitorScriptEventsArgs']] = None):
        """
        :param pulumi.Input[str] type: The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
        :param pulumi.Input['BrowserMonitorScriptConfigurationArgs'] configuration: The setup of the monitor
        :param pulumi.Input['BrowserMonitorScriptEventsArgs'] events: Steps of the clickpath—the first step must always be of the `navigate` type
        """
        pulumi.set(__self__, "type", type)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if events is not None:
            pulumi.set(__self__, "events", events)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['BrowserMonitorScriptConfigurationArgs']]:
        """
        The setup of the monitor
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['BrowserMonitorScriptConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsArgs']]:
        """
        Steps of the clickpath—the first step must always be of the `navigate` type
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsArgs']]):
        pulumi.set(self, "events", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationArgs:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input['BrowserMonitorScriptConfigurationBandwidthArgs']] = None,
                 blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bypass_csp: Optional[pulumi.Input[bool]] = None,
                 cookies: Optional[pulumi.Input['BrowserMonitorScriptConfigurationCookiesArgs']] = None,
                 device: Optional[pulumi.Input['BrowserMonitorScriptConfigurationDeviceArgs']] = None,
                 disable_web_security: Optional[pulumi.Input[bool]] = None,
                 headers: Optional[pulumi.Input['BrowserMonitorScriptConfigurationHeadersArgs']] = None,
                 ignored_error_codes: Optional[pulumi.Input['BrowserMonitorScriptConfigurationIgnoredErrorCodesArgs']] = None,
                 javascript_setttings: Optional[pulumi.Input['BrowserMonitorScriptConfigurationJavascriptSetttingsArgs']] = None,
                 monitor_frames: Optional[pulumi.Input[bool]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None):
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if blocks is not None:
            pulumi.set(__self__, "blocks", blocks)
        if bypass_csp is not None:
            pulumi.set(__self__, "bypass_csp", bypass_csp)
        if cookies is not None:
            pulumi.set(__self__, "cookies", cookies)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if disable_web_security is not None:
            pulumi.set(__self__, "disable_web_security", disable_web_security)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if ignored_error_codes is not None:
            pulumi.set(__self__, "ignored_error_codes", ignored_error_codes)
        if javascript_setttings is not None:
            pulumi.set(__self__, "javascript_setttings", javascript_setttings)
        if monitor_frames is not None:
            pulumi.set(__self__, "monitor_frames", monitor_frames)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input['BrowserMonitorScriptConfigurationBandwidthArgs']]:
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input['BrowserMonitorScriptConfigurationBandwidthArgs']]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter
    def blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "blocks")

    @blocks.setter
    def blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blocks", value)

    @property
    @pulumi.getter(name="bypassCsp")
    def bypass_csp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bypass_csp")

    @bypass_csp.setter
    def bypass_csp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bypass_csp", value)

    @property
    @pulumi.getter
    def cookies(self) -> Optional[pulumi.Input['BrowserMonitorScriptConfigurationCookiesArgs']]:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: Optional[pulumi.Input['BrowserMonitorScriptConfigurationCookiesArgs']]):
        pulumi.set(self, "cookies", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input['BrowserMonitorScriptConfigurationDeviceArgs']]:
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input['BrowserMonitorScriptConfigurationDeviceArgs']]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="disableWebSecurity")
    def disable_web_security(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_web_security")

    @disable_web_security.setter
    def disable_web_security(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_web_security", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input['BrowserMonitorScriptConfigurationHeadersArgs']]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input['BrowserMonitorScriptConfigurationHeadersArgs']]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="ignoredErrorCodes")
    def ignored_error_codes(self) -> Optional[pulumi.Input['BrowserMonitorScriptConfigurationIgnoredErrorCodesArgs']]:
        return pulumi.get(self, "ignored_error_codes")

    @ignored_error_codes.setter
    def ignored_error_codes(self, value: Optional[pulumi.Input['BrowserMonitorScriptConfigurationIgnoredErrorCodesArgs']]):
        pulumi.set(self, "ignored_error_codes", value)

    @property
    @pulumi.getter(name="javascriptSetttings")
    def javascript_setttings(self) -> Optional[pulumi.Input['BrowserMonitorScriptConfigurationJavascriptSetttingsArgs']]:
        return pulumi.get(self, "javascript_setttings")

    @javascript_setttings.setter
    def javascript_setttings(self, value: Optional[pulumi.Input['BrowserMonitorScriptConfigurationJavascriptSetttingsArgs']]):
        pulumi.set(self, "javascript_setttings", value)

    @property
    @pulumi.getter(name="monitorFrames")
    def monitor_frames(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "monitor_frames")

    @monitor_frames.setter
    def monitor_frames(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitor_frames", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationBandwidthArgs:
    def __init__(__self__, *,
                 download: Optional[pulumi.Input[int]] = None,
                 latency: Optional[pulumi.Input[int]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 upload: Optional[pulumi.Input[int]] = None):
        if download is not None:
            pulumi.set(__self__, "download", download)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if upload is not None:
            pulumi.set(__self__, "upload", upload)

    @property
    @pulumi.getter
    def download(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "download")

    @download.setter
    def download(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "download", value)

    @property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter
    def upload(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "upload")

    @upload.setter
    def upload(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upload", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationCookiesArgs:
    def __init__(__self__, *,
                 cookies: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptConfigurationCookiesCookieArgs']]]):
        pulumi.set(__self__, "cookies", cookies)

    @property
    @pulumi.getter
    def cookies(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptConfigurationCookiesCookieArgs']]]:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptConfigurationCookiesCookieArgs']]]):
        pulumi.set(self, "cookies", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationCookiesCookieArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationDeviceArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[int]] = None,
                 mobile: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 orientation: Optional[pulumi.Input[str]] = None,
                 scale_factor: Optional[pulumi.Input[float]] = None,
                 touch_enabled: Optional[pulumi.Input[bool]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if orientation is not None:
            pulumi.set(__self__, "orientation", orientation)
        if scale_factor is not None:
            pulumi.set(__self__, "scale_factor", scale_factor)
        if touch_enabled is not None:
            pulumi.set(__self__, "touch_enabled", touch_enabled)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def mobile(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mobile")

    @mobile.setter
    def mobile(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mobile", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter(name="scaleFactor")
    def scale_factor(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "scale_factor")

    @scale_factor.setter
    def scale_factor(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "scale_factor", value)

    @property
    @pulumi.getter(name="touchEnabled")
    def touch_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "touch_enabled")

    @touch_enabled.setter
    def touch_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "touch_enabled", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationHeadersArgs:
    def __init__(__self__, *,
                 headers: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptConfigurationHeadersHeaderArgs']]],
                 restrictions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "headers", headers)
        if restrictions is not None:
            pulumi.set(__self__, "restrictions", restrictions)

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptConfigurationHeadersHeaderArgs']]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptConfigurationHeadersHeaderArgs']]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def restrictions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "restrictions")

    @restrictions.setter
    def restrictions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "restrictions", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationHeadersHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationIgnoredErrorCodesArgs:
    def __init__(__self__, *,
                 status_codes: pulumi.Input[str],
                 matching_document_requests: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "status_codes", status_codes)
        if matching_document_requests is not None:
            pulumi.set(__self__, "matching_document_requests", matching_document_requests)

    @property
    @pulumi.getter(name="statusCodes")
    def status_codes(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status_codes")

    @status_codes.setter
    def status_codes(self, value: pulumi.Input[str]):
        pulumi.set(self, "status_codes", value)

    @property
    @pulumi.getter(name="matchingDocumentRequests")
    def matching_document_requests(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "matching_document_requests")

    @matching_document_requests.setter
    def matching_document_requests(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "matching_document_requests", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationJavascriptSetttingsArgs:
    def __init__(__self__, *,
                 custom_properties: Optional[pulumi.Input[str]] = None,
                 timeout_settings: Optional[pulumi.Input['BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettingsArgs']] = None,
                 visually_complete_options: Optional[pulumi.Input['BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptionsArgs']] = None):
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if timeout_settings is not None:
            pulumi.set(__self__, "timeout_settings", timeout_settings)
        if visually_complete_options is not None:
            pulumi.set(__self__, "visually_complete_options", visually_complete_options)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="timeoutSettings")
    def timeout_settings(self) -> Optional[pulumi.Input['BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettingsArgs']]:
        return pulumi.get(self, "timeout_settings")

    @timeout_settings.setter
    def timeout_settings(self, value: Optional[pulumi.Input['BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettingsArgs']]):
        pulumi.set(self, "timeout_settings", value)

    @property
    @pulumi.getter(name="visuallyCompleteOptions")
    def visually_complete_options(self) -> Optional[pulumi.Input['BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptionsArgs']]:
        return pulumi.get(self, "visually_complete_options")

    @visually_complete_options.setter
    def visually_complete_options(self, value: Optional[pulumi.Input['BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptionsArgs']]):
        pulumi.set(self, "visually_complete_options", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettingsArgs:
    def __init__(__self__, *,
                 action_limit: pulumi.Input[int],
                 total_timeout: pulumi.Input[int]):
        pulumi.set(__self__, "action_limit", action_limit)
        pulumi.set(__self__, "total_timeout", total_timeout)

    @property
    @pulumi.getter(name="actionLimit")
    def action_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "action_limit")

    @action_limit.setter
    def action_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "action_limit", value)

    @property
    @pulumi.getter(name="totalTimeout")
    def total_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "total_timeout")

    @total_timeout.setter
    def total_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "total_timeout", value)


@pulumi.input_type
class BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptionsArgs:
    def __init__(__self__, *,
                 image_size_threshold: pulumi.Input[int],
                 inactivity_timeout: pulumi.Input[int],
                 mutation_timeout: pulumi.Input[int],
                 excluded_elements: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 excluded_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "image_size_threshold", image_size_threshold)
        pulumi.set(__self__, "inactivity_timeout", inactivity_timeout)
        pulumi.set(__self__, "mutation_timeout", mutation_timeout)
        if excluded_elements is not None:
            pulumi.set(__self__, "excluded_elements", excluded_elements)
        if excluded_urls is not None:
            pulumi.set(__self__, "excluded_urls", excluded_urls)

    @property
    @pulumi.getter(name="imageSizeThreshold")
    def image_size_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "image_size_threshold")

    @image_size_threshold.setter
    def image_size_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "image_size_threshold", value)

    @property
    @pulumi.getter(name="inactivityTimeout")
    def inactivity_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "inactivity_timeout")

    @inactivity_timeout.setter
    def inactivity_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "inactivity_timeout", value)

    @property
    @pulumi.getter(name="mutationTimeout")
    def mutation_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "mutation_timeout")

    @mutation_timeout.setter
    def mutation_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "mutation_timeout", value)

    @property
    @pulumi.getter(name="excludedElements")
    def excluded_elements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_elements")

    @excluded_elements.setter
    def excluded_elements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_elements", value)

    @property
    @pulumi.getter(name="excludedUrls")
    def excluded_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_urls")

    @excluded_urls.setter
    def excluded_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_urls", value)


@pulumi.input_type
class BrowserMonitorScriptEventsArgs:
    def __init__(__self__, *,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventArgs']]]] = None):
        if events is not None:
            pulumi.set(__self__, "events", events)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventArgs']]]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventArgs']]]]):
        pulumi.set(self, "events", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 click: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickArgs']] = None,
                 cookie: Optional[pulumi.Input['BrowserMonitorScriptEventsEventCookieArgs']] = None,
                 javascript: Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptArgs']] = None,
                 keystrokes: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesArgs']] = None,
                 navigate: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateArgs']] = None,
                 select: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectArgs']] = None,
                 tap: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapArgs']] = None):
        pulumi.set(__self__, "description", description)
        if click is not None:
            pulumi.set(__self__, "click", click)
        if cookie is not None:
            pulumi.set(__self__, "cookie", cookie)
        if javascript is not None:
            pulumi.set(__self__, "javascript", javascript)
        if keystrokes is not None:
            pulumi.set(__self__, "keystrokes", keystrokes)
        if navigate is not None:
            pulumi.set(__self__, "navigate", navigate)
        if select is not None:
            pulumi.set(__self__, "select", select)
        if tap is not None:
            pulumi.set(__self__, "tap", tap)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def click(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickArgs']]:
        return pulumi.get(self, "click")

    @click.setter
    def click(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickArgs']]):
        pulumi.set(self, "click", value)

    @property
    @pulumi.getter
    def cookie(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventCookieArgs']]:
        return pulumi.get(self, "cookie")

    @cookie.setter
    def cookie(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventCookieArgs']]):
        pulumi.set(self, "cookie", value)

    @property
    @pulumi.getter
    def javascript(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptArgs']]:
        return pulumi.get(self, "javascript")

    @javascript.setter
    def javascript(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptArgs']]):
        pulumi.set(self, "javascript", value)

    @property
    @pulumi.getter
    def keystrokes(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesArgs']]:
        return pulumi.get(self, "keystrokes")

    @keystrokes.setter
    def keystrokes(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesArgs']]):
        pulumi.set(self, "keystrokes", value)

    @property
    @pulumi.getter
    def navigate(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateArgs']]:
        return pulumi.get(self, "navigate")

    @navigate.setter
    def navigate(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateArgs']]):
        pulumi.set(self, "navigate", value)

    @property
    @pulumi.getter
    def select(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectArgs']]:
        return pulumi.get(self, "select")

    @select.setter
    def select(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectArgs']]):
        pulumi.set(self, "select", value)

    @property
    @pulumi.getter
    def tap(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapArgs']]:
        return pulumi.get(self, "tap")

    @tap.setter
    def tap(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapArgs']]):
        pulumi.set(self, "tap", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickArgs:
    def __init__(__self__, *,
                 button: pulumi.Input[int],
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickTargetArgs']] = None,
                 validate: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateArgs']] = None,
                 wait: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitArgs']] = None):
        pulumi.set(__self__, "button", button)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def button(self) -> pulumi.Input[int]:
        return pulumi.get(self, "button")

    @button.setter
    def button(self, value: pulumi.Input[int]):
        pulumi.set(self, "button", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickTargetArgs']]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateArgs']]:
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateArgs']]):
        pulumi.set(self, "validate", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitArgs']]:
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitArgs']]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickValidateArgs:
    def __init__(__self__, *,
                 validations: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationArgs']]]):
        pulumi.set(__self__, "validations", validations)

    @property
    @pulumi.getter
    def validations(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationArgs']]]:
        return pulumi.get(self, "validations")

    @validations.setter
    def validations(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationArgs']]]):
        pulumi.set(self, "validations", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickValidateValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickValidateValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickWaitArgs:
    def __init__(__self__, *,
                 wait_for: pulumi.Input[str],
                 milliseconds: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 validation: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationArgs']] = None):
        pulumi.set(__self__, "wait_for", wait_for)
        if milliseconds is not None:
            pulumi.set(__self__, "milliseconds", milliseconds)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter(name="waitFor")
    def wait_for(self) -> pulumi.Input[str]:
        return pulumi.get(self, "wait_for")

    @wait_for.setter
    def wait_for(self, value: pulumi.Input[str]):
        pulumi.set(self, "wait_for", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationArgs']]:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationArgs']]):
        pulumi.set(self, "validation", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickWaitValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickWaitValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventCookieArgs:
    def __init__(__self__, *,
                 cookies: pulumi.Input['BrowserMonitorScriptEventsEventCookieCookiesArgs']):
        pulumi.set(__self__, "cookies", cookies)

    @property
    @pulumi.getter
    def cookies(self) -> pulumi.Input['BrowserMonitorScriptEventsEventCookieCookiesArgs']:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: pulumi.Input['BrowserMonitorScriptEventsEventCookieCookiesArgs']):
        pulumi.set(self, "cookies", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventCookieCookiesArgs:
    def __init__(__self__, *,
                 cookies: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventCookieCookiesCookieArgs']]]):
        pulumi.set(__self__, "cookies", cookies)

    @property
    @pulumi.getter
    def cookies(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventCookieCookiesCookieArgs']]]:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventCookieCookiesCookieArgs']]]):
        pulumi.set(self, "cookies", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventCookieCookiesCookieArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventJavascriptArgs:
    def __init__(__self__, *,
                 code: pulumi.Input[str],
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptTargetArgs']] = None,
                 wait: Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitArgs']] = None):
        pulumi.set(__self__, "code", code)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: pulumi.Input[str]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptTargetArgs']]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitArgs']]:
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitArgs']]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventJavascriptTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventJavascriptTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventJavascriptWaitArgs:
    def __init__(__self__, *,
                 wait_for: pulumi.Input[str],
                 milliseconds: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 validation: Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationArgs']] = None):
        pulumi.set(__self__, "wait_for", wait_for)
        if milliseconds is not None:
            pulumi.set(__self__, "milliseconds", milliseconds)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter(name="waitFor")
    def wait_for(self) -> pulumi.Input[str]:
        return pulumi.get(self, "wait_for")

    @wait_for.setter
    def wait_for(self, value: pulumi.Input[str]):
        pulumi.set(self, "wait_for", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationArgs']]:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationArgs']]):
        pulumi.set(self, "validation", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventJavascriptWaitValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesArgs:
    def __init__(__self__, *,
                 credential: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesCredentialArgs']] = None,
                 masked: Optional[pulumi.Input[bool]] = None,
                 simulate_blur_event: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesTargetArgs']] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 validate: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateArgs']] = None,
                 wait: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitArgs']] = None):
        if credential is not None:
            pulumi.set(__self__, "credential", credential)
        if masked is not None:
            pulumi.set(__self__, "masked", masked)
        if simulate_blur_event is not None:
            pulumi.set(__self__, "simulate_blur_event", simulate_blur_event)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def credential(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesCredentialArgs']]:
        return pulumi.get(self, "credential")

    @credential.setter
    def credential(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesCredentialArgs']]):
        pulumi.set(self, "credential", value)

    @property
    @pulumi.getter
    def masked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "masked")

    @masked.setter
    def masked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "masked", value)

    @property
    @pulumi.getter(name="simulateBlurEvent")
    def simulate_blur_event(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "simulate_blur_event")

    @simulate_blur_event.setter
    def simulate_blur_event(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "simulate_blur_event", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesTargetArgs']]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateArgs']]:
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateArgs']]):
        pulumi.set(self, "validate", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitArgs']]:
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitArgs']]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesCredentialArgs:
    def __init__(__self__, *,
                 field: pulumi.Input[str],
                 vault_id: pulumi.Input[str]):
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vault_id")

    @vault_id.setter
    def vault_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vault_id", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesValidateArgs:
    def __init__(__self__, *,
                 validations: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationArgs']]]):
        pulumi.set(__self__, "validations", validations)

    @property
    @pulumi.getter
    def validations(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationArgs']]]:
        return pulumi.get(self, "validations")

    @validations.setter
    def validations(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationArgs']]]):
        pulumi.set(self, "validations", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesValidateValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesWaitArgs:
    def __init__(__self__, *,
                 wait_for: pulumi.Input[str],
                 milliseconds: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 validation: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationArgs']] = None):
        pulumi.set(__self__, "wait_for", wait_for)
        if milliseconds is not None:
            pulumi.set(__self__, "milliseconds", milliseconds)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter(name="waitFor")
    def wait_for(self) -> pulumi.Input[str]:
        return pulumi.get(self, "wait_for")

    @wait_for.setter
    def wait_for(self, value: pulumi.Input[str]):
        pulumi.set(self, "wait_for", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationArgs']]:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationArgs']]):
        pulumi.set(self, "validation", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesWaitValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 authentication: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateAuthenticationArgs']] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateTargetArgs']] = None,
                 validate: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateArgs']] = None,
                 wait: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitArgs']] = None):
        pulumi.set(__self__, "url", url)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateTargetArgs']]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateArgs']]:
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateArgs']]):
        pulumi.set(self, "validate", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitArgs']]:
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitArgs']]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateAuthenticationArgs:
    def __init__(__self__, *,
                 creds: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "creds", creds)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def creds(self) -> pulumi.Input[str]:
        return pulumi.get(self, "creds")

    @creds.setter
    def creds(self, value: pulumi.Input[str]):
        pulumi.set(self, "creds", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateValidateArgs:
    def __init__(__self__, *,
                 validations: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationArgs']]]):
        pulumi.set(__self__, "validations", validations)

    @property
    @pulumi.getter
    def validations(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationArgs']]]:
        return pulumi.get(self, "validations")

    @validations.setter
    def validations(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationArgs']]]):
        pulumi.set(self, "validations", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateValidateValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateValidateValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateWaitArgs:
    def __init__(__self__, *,
                 wait_for: pulumi.Input[str],
                 milliseconds: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 validation: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationArgs']] = None):
        pulumi.set(__self__, "wait_for", wait_for)
        if milliseconds is not None:
            pulumi.set(__self__, "milliseconds", milliseconds)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter(name="waitFor")
    def wait_for(self) -> pulumi.Input[str]:
        return pulumi.get(self, "wait_for")

    @wait_for.setter
    def wait_for(self, value: pulumi.Input[str]):
        pulumi.set(self, "wait_for", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationArgs']]:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationArgs']]):
        pulumi.set(self, "validation", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateWaitValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateWaitValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectArgs:
    def __init__(__self__, *,
                 selections: pulumi.Input['BrowserMonitorScriptEventsEventSelectSelectionsArgs'],
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectTargetArgs']] = None,
                 validate: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateArgs']] = None,
                 wait: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitArgs']] = None):
        pulumi.set(__self__, "selections", selections)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def selections(self) -> pulumi.Input['BrowserMonitorScriptEventsEventSelectSelectionsArgs']:
        return pulumi.get(self, "selections")

    @selections.setter
    def selections(self, value: pulumi.Input['BrowserMonitorScriptEventsEventSelectSelectionsArgs']):
        pulumi.set(self, "selections", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectTargetArgs']]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateArgs']]:
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateArgs']]):
        pulumi.set(self, "validate", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitArgs']]:
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitArgs']]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectSelectionsArgs:
    def __init__(__self__, *,
                 options: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs']]]):
        pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def options(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs']]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs']]]):
        pulumi.set(self, "options", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectSelectionsOptionArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[int],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[int]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[int]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectValidateArgs:
    def __init__(__self__, *,
                 validations: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationArgs']]]):
        pulumi.set(__self__, "validations", validations)

    @property
    @pulumi.getter
    def validations(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationArgs']]]:
        return pulumi.get(self, "validations")

    @validations.setter
    def validations(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationArgs']]]):
        pulumi.set(self, "validations", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectValidateValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectValidateValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectWaitArgs:
    def __init__(__self__, *,
                 wait_for: pulumi.Input[str],
                 milliseconds: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 validation: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationArgs']] = None):
        pulumi.set(__self__, "wait_for", wait_for)
        if milliseconds is not None:
            pulumi.set(__self__, "milliseconds", milliseconds)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter(name="waitFor")
    def wait_for(self) -> pulumi.Input[str]:
        return pulumi.get(self, "wait_for")

    @wait_for.setter
    def wait_for(self, value: pulumi.Input[str]):
        pulumi.set(self, "wait_for", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationArgs']]:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationArgs']]):
        pulumi.set(self, "validation", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectWaitValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectWaitValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapArgs:
    def __init__(__self__, *,
                 button: pulumi.Input[int],
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapTargetArgs']] = None,
                 validate: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateArgs']] = None,
                 wait: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitArgs']] = None):
        pulumi.set(__self__, "button", button)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if validate is not None:
            pulumi.set(__self__, "validate", validate)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)

    @property
    @pulumi.getter
    def button(self) -> pulumi.Input[int]:
        return pulumi.get(self, "button")

    @button.setter
    def button(self, value: pulumi.Input[int]):
        pulumi.set(self, "button", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapTargetArgs']]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def validate(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateArgs']]:
        return pulumi.get(self, "validate")

    @validate.setter
    def validate(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateArgs']]):
        pulumi.set(self, "validate", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitArgs']]:
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitArgs']]):
        pulumi.set(self, "wait", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapValidateArgs:
    def __init__(__self__, *,
                 validations: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationArgs']]]):
        pulumi.set(__self__, "validations", validations)

    @property
    @pulumi.getter
    def validations(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationArgs']]]:
        return pulumi.get(self, "validations")

    @validations.setter
    def validations(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationArgs']]]):
        pulumi.set(self, "validations", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapValidateValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapValidateValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapWaitArgs:
    def __init__(__self__, *,
                 wait_for: pulumi.Input[str],
                 milliseconds: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 validation: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationArgs']] = None):
        pulumi.set(__self__, "wait_for", wait_for)
        if milliseconds is not None:
            pulumi.set(__self__, "milliseconds", milliseconds)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter(name="waitFor")
    def wait_for(self) -> pulumi.Input[str]:
        return pulumi.get(self, "wait_for")

    @wait_for.setter
    def wait_for(self, value: pulumi.Input[str]):
        pulumi.set(self, "wait_for", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationArgs']]:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationArgs']]):
        pulumi.set(self, "validation", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapWaitValidationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fail_if_found: Optional[pulumi.Input[bool]] = None,
                 match: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[bool]] = None,
                 target: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationTargetArgs']] = None):
        pulumi.set(__self__, "type", type)
        if fail_if_found is not None:
            pulumi.set(__self__, "fail_if_found", fail_if_found)
        if match is not None:
            pulumi.set(__self__, "match", match)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="failIfFound")
    def fail_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_if_found")

    @fail_if_found.setter
    def fail_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_if_found", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapWaitValidationTargetArgs:
    def __init__(__self__, *,
                 locators: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorArgs']]]] = None,
                 window: Optional[pulumi.Input[str]] = None):
        if locators is not None:
            pulumi.set(__self__, "locators", locators)
        if window is not None:
            pulumi.set(__self__, "window", window)

    @property
    @pulumi.getter
    def locators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorArgs']]]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorArgs']]]]):
        pulumi.set(self, "locators", value)

    @property
    @pulumi.getter
    def window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window")

    @window.setter
    def window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorArgs:
    def __init__(__self__, *,
                 locators: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(__self__, "locators", locators)

    @property
    @pulumi.getter
    def locators(self) -> pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocatorArgs']]]:
        return pulumi.get(self, "locators")

    @locators.setter
    def locators(self, value: pulumi.Input[Sequence[pulumi.Input['BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocatorArgs']]]):
        pulumi.set(self, "locators", value)


@pulumi.input_type
class BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocatorArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BrowserMonitorTagArgs:
    def __init__(__self__, *,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorTagTagArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['BrowserMonitorTagTagArgs']]] tags: Tag with source of a Dynatrace entity.
        """
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorTagTagArgs']]]]:
        """
        Tag with source of a Dynatrace entity.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserMonitorTagTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class BrowserMonitorTagTagArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 source: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BusinessEventsOneagentEventArgs:
    def __init__(__self__, *,
                 category: pulumi.Input['BusinessEventsOneagentEventCategoryArgs'],
                 provider: pulumi.Input['BusinessEventsOneagentEventProviderArgs'],
                 type: pulumi.Input['BusinessEventsOneagentEventTypeArgs'],
                 data: Optional[pulumi.Input['BusinessEventsOneagentEventDataArgs']] = None):
        """
        :param pulumi.Input['BusinessEventsOneagentEventCategoryArgs'] category: Event category
        :param pulumi.Input['BusinessEventsOneagentEventProviderArgs'] provider: Event provider
        :param pulumi.Input['BusinessEventsOneagentEventTypeArgs'] type: Event type
        :param pulumi.Input['BusinessEventsOneagentEventDataArgs'] data: Additional attributes for the business event.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "type", type)
        if data is not None:
            pulumi.set(__self__, "data", data)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input['BusinessEventsOneagentEventCategoryArgs']:
        """
        Event category
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input['BusinessEventsOneagentEventCategoryArgs']):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Input['BusinessEventsOneagentEventProviderArgs']:
        """
        Event provider
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: pulumi.Input['BusinessEventsOneagentEventProviderArgs']):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['BusinessEventsOneagentEventTypeArgs']:
        """
        Event type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['BusinessEventsOneagentEventTypeArgs']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input['BusinessEventsOneagentEventDataArgs']]:
        """
        Additional attributes for the business event.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input['BusinessEventsOneagentEventDataArgs']]):
        pulumi.set(self, "data", value)


@pulumi.input_type
class BusinessEventsOneagentEventCategoryArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class BusinessEventsOneagentEventDataArgs:
    def __init__(__self__, *,
                 event_data_field_complexes: pulumi.Input[Sequence[pulumi.Input['BusinessEventsOneagentEventDataEventDataFieldComplexArgs']]]):
        pulumi.set(__self__, "event_data_field_complexes", event_data_field_complexes)

    @property
    @pulumi.getter(name="eventDataFieldComplexes")
    def event_data_field_complexes(self) -> pulumi.Input[Sequence[pulumi.Input['BusinessEventsOneagentEventDataEventDataFieldComplexArgs']]]:
        return pulumi.get(self, "event_data_field_complexes")

    @event_data_field_complexes.setter
    def event_data_field_complexes(self, value: pulumi.Input[Sequence[pulumi.Input['BusinessEventsOneagentEventDataEventDataFieldComplexArgs']]]):
        pulumi.set(self, "event_data_field_complexes", value)


@pulumi.input_type
class BusinessEventsOneagentEventDataEventDataFieldComplexArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 source: pulumi.Input['BusinessEventsOneagentEventDataEventDataFieldComplexSourceArgs']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['BusinessEventsOneagentEventDataEventDataFieldComplexSourceArgs']:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['BusinessEventsOneagentEventDataEventDataFieldComplexSourceArgs']):
        pulumi.set(self, "source", value)


@pulumi.input_type
class BusinessEventsOneagentEventDataEventDataFieldComplexSourceArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class BusinessEventsOneagentEventProviderArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class BusinessEventsOneagentEventTypeArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class BusinessEventsOneagentTriggersArgs:
    def __init__(__self__, *,
                 triggers: pulumi.Input[Sequence[pulumi.Input['BusinessEventsOneagentTriggersTriggerArgs']]]):
        pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter
    def triggers(self) -> pulumi.Input[Sequence[pulumi.Input['BusinessEventsOneagentTriggersTriggerArgs']]]:
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: pulumi.Input[Sequence[pulumi.Input['BusinessEventsOneagentTriggersTriggerArgs']]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class BusinessEventsOneagentTriggersTriggerArgs:
    def __init__(__self__, *,
                 source: pulumi.Input['BusinessEventsOneagentTriggersTriggerSourceArgs'],
                 type: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "type", type)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['BusinessEventsOneagentTriggersTriggerSourceArgs']:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['BusinessEventsOneagentTriggersTriggerSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BusinessEventsOneagentTriggersTriggerSourceArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "data_source", data_source)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class BusinessEventsProcessingRuleTestingArgs:
    def __init__(__self__, *,
                 sample_event: pulumi.Input[str]):
        pulumi.set(__self__, "sample_event", sample_event)

    @property
    @pulumi.getter(name="sampleEvent")
    def sample_event(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sample_event")

    @sample_event.setter
    def sample_event(self, value: pulumi.Input[str]):
        pulumi.set(self, "sample_event", value)


@pulumi.input_type
class BusinessEventsProcessingTransformationFieldsArgs:
    def __init__(__self__, *,
                 transformation_fields: pulumi.Input[Sequence[pulumi.Input['BusinessEventsProcessingTransformationFieldsTransformationFieldArgs']]]):
        pulumi.set(__self__, "transformation_fields", transformation_fields)

    @property
    @pulumi.getter(name="transformationFields")
    def transformation_fields(self) -> pulumi.Input[Sequence[pulumi.Input['BusinessEventsProcessingTransformationFieldsTransformationFieldArgs']]]:
        return pulumi.get(self, "transformation_fields")

    @transformation_fields.setter
    def transformation_fields(self, value: pulumi.Input[Sequence[pulumi.Input['BusinessEventsProcessingTransformationFieldsTransformationFieldArgs']]]):
        pulumi.set(self, "transformation_fields", value)


@pulumi.input_type
class BusinessEventsProcessingTransformationFieldsTransformationFieldArgs:
    def __init__(__self__, *,
                 array: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 optional: pulumi.Input[bool],
                 readonly: pulumi.Input[bool],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "array", array)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "optional", optional)
        pulumi.set(__self__, "readonly", readonly)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def array(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "array")

    @array.setter
    def array(self, value: pulumi.Input[bool]):
        pulumi.set(self, "array", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: pulumi.Input[bool]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter
    def readonly(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "readonly")

    @readonly.setter
    def readonly(self, value: pulumi.Input[bool]):
        pulumi.set(self, "readonly", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CalculatedServiceMetricConditionArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['CalculatedServiceMetricConditionConditionArgs']]]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CalculatedServiceMetricConditionConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CalculatedServiceMetricConditionConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 comparison: pulumi.Input['CalculatedServiceMetricConditionConditionComparisonArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "comparison", comparison)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input['CalculatedServiceMetricConditionConditionComparisonArgs']:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input['CalculatedServiceMetricConditionConditionComparisonArgs']):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonArgs:
    def __init__(__self__, *,
                 boolean: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonBooleanArgs']] = None,
                 esb_input_node_type: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonEsbInputNodeTypeArgs']] = None,
                 failed_state: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFailedStateArgs']] = None,
                 failure_reason: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFailureReasonArgs']] = None,
                 fast_string: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFastStringArgs']] = None,
                 flaw_state: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFlawStateArgs']] = None,
                 generic: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonGenericArgs']] = None,
                 http_method: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonHttpMethodArgs']] = None,
                 http_status_class: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonHttpStatusClassArgs']] = None,
                 iib_input_node_type: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonIibInputNodeTypeArgs']] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 number: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberArgs']] = None,
                 number_request_attribute: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeArgs']] = None,
                 service_type: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonServiceTypeArgs']] = None,
                 string: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringArgs']] = None,
                 string_request_attribute: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeArgs']] = None,
                 tag: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagArgs']] = None,
                 zos_call_type: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonZosCallTypeArgs']] = None):
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if esb_input_node_type is not None:
            pulumi.set(__self__, "esb_input_node_type", esb_input_node_type)
        if failed_state is not None:
            pulumi.set(__self__, "failed_state", failed_state)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if fast_string is not None:
            pulumi.set(__self__, "fast_string", fast_string)
        if flaw_state is not None:
            pulumi.set(__self__, "flaw_state", flaw_state)
        if generic is not None:
            pulumi.set(__self__, "generic", generic)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if http_status_class is not None:
            pulumi.set(__self__, "http_status_class", http_status_class)
        if iib_input_node_type is not None:
            pulumi.set(__self__, "iib_input_node_type", iib_input_node_type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if number_request_attribute is not None:
            pulumi.set(__self__, "number_request_attribute", number_request_attribute)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if string is not None:
            pulumi.set(__self__, "string", string)
        if string_request_attribute is not None:
            pulumi.set(__self__, "string_request_attribute", string_request_attribute)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if zos_call_type is not None:
            pulumi.set(__self__, "zos_call_type", zos_call_type)

    @property
    @pulumi.getter
    def boolean(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonBooleanArgs']]:
        return pulumi.get(self, "boolean")

    @boolean.setter
    def boolean(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonBooleanArgs']]):
        pulumi.set(self, "boolean", value)

    @property
    @pulumi.getter(name="esbInputNodeType")
    def esb_input_node_type(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonEsbInputNodeTypeArgs']]:
        return pulumi.get(self, "esb_input_node_type")

    @esb_input_node_type.setter
    def esb_input_node_type(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonEsbInputNodeTypeArgs']]):
        pulumi.set(self, "esb_input_node_type", value)

    @property
    @pulumi.getter(name="failedState")
    def failed_state(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFailedStateArgs']]:
        return pulumi.get(self, "failed_state")

    @failed_state.setter
    def failed_state(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFailedStateArgs']]):
        pulumi.set(self, "failed_state", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFailureReasonArgs']]:
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFailureReasonArgs']]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="fastString")
    def fast_string(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFastStringArgs']]:
        return pulumi.get(self, "fast_string")

    @fast_string.setter
    def fast_string(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFastStringArgs']]):
        pulumi.set(self, "fast_string", value)

    @property
    @pulumi.getter(name="flawState")
    def flaw_state(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFlawStateArgs']]:
        return pulumi.get(self, "flaw_state")

    @flaw_state.setter
    def flaw_state(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonFlawStateArgs']]):
        pulumi.set(self, "flaw_state", value)

    @property
    @pulumi.getter
    def generic(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonGenericArgs']]:
        return pulumi.get(self, "generic")

    @generic.setter
    def generic(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonGenericArgs']]):
        pulumi.set(self, "generic", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonHttpMethodArgs']]:
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonHttpMethodArgs']]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="httpStatusClass")
    def http_status_class(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonHttpStatusClassArgs']]:
        return pulumi.get(self, "http_status_class")

    @http_status_class.setter
    def http_status_class(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonHttpStatusClassArgs']]):
        pulumi.set(self, "http_status_class", value)

    @property
    @pulumi.getter(name="iibInputNodeType")
    def iib_input_node_type(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonIibInputNodeTypeArgs']]:
        return pulumi.get(self, "iib_input_node_type")

    @iib_input_node_type.setter
    def iib_input_node_type(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonIibInputNodeTypeArgs']]):
        pulumi.set(self, "iib_input_node_type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberArgs']]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberArgs']]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter(name="numberRequestAttribute")
    def number_request_attribute(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeArgs']]:
        return pulumi.get(self, "number_request_attribute")

    @number_request_attribute.setter
    def number_request_attribute(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeArgs']]):
        pulumi.set(self, "number_request_attribute", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonServiceTypeArgs']]:
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonServiceTypeArgs']]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def string(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringArgs']]:
        return pulumi.get(self, "string")

    @string.setter
    def string(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringArgs']]):
        pulumi.set(self, "string", value)

    @property
    @pulumi.getter(name="stringRequestAttribute")
    def string_request_attribute(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeArgs']]:
        return pulumi.get(self, "string_request_attribute")

    @string_request_attribute.setter
    def string_request_attribute(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeArgs']]):
        pulumi.set(self, "string_request_attribute", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagArgs']]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagArgs']]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="zosCallType")
    def zos_call_type(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonZosCallTypeArgs']]:
        return pulumi.get(self, "zos_call_type")

    @zos_call_type.setter
    def zos_call_type(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonZosCallTypeArgs']]):
        pulumi.set(self, "zos_call_type", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonBooleanArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool],
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        pulumi.set(__self__, "value", value)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonEsbInputNodeTypeArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonFailedStateArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonFailureReasonArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonFastStringArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonFlawStateArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonGenericArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonHttpMethodArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonHttpStatusClassArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonIibInputNodeTypeArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonNumberArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeArgs:
    def __init__(__self__, *,
                 request_attribute: pulumi.Input[str],
                 match_on_child_calls: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        pulumi.set(__self__, "request_attribute", request_attribute)
        if match_on_child_calls is not None:
            pulumi.set(__self__, "match_on_child_calls", match_on_child_calls)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="requestAttribute")
    def request_attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "request_attribute")

    @request_attribute.setter
    def request_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_attribute", value)

    @property
    @pulumi.getter(name="matchOnChildCalls")
    def match_on_child_calls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_on_child_calls")

    @match_on_child_calls.setter
    def match_on_child_calls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_on_child_calls", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceArgs']]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceArgs:
    def __init__(__self__, *,
                 management_zone: Optional[pulumi.Input[str]] = None,
                 service_tag: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if management_zone is not None:
            pulumi.set(__self__, "management_zone", management_zone)
        if service_tag is not None:
            pulumi.set(__self__, "service_tag", service_tag)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="managementZone")
    def management_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_zone")

    @management_zone.setter
    def management_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_zone", value)

    @property
    @pulumi.getter(name="serviceTag")
    def service_tag(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagArgs']]:
        return pulumi.get(self, "service_tag")

    @service_tag.setter
    def service_tag(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagArgs']]):
        pulumi.set(self, "service_tag", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 context: Optional[pulumi.Input[str]] = None,
                 tag_key: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyArgs']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyArgs']]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyArgs']]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        if context is not None:
            pulumi.set(__self__, "context", context)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonServiceTypeArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonStringArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeArgs:
    def __init__(__self__, *,
                 request_attribute: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 match_on_child_calls: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "request_attribute", request_attribute)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if match_on_child_calls is not None:
            pulumi.set(__self__, "match_on_child_calls", match_on_child_calls)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="requestAttribute")
    def request_attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "request_attribute")

    @request_attribute.setter
    def request_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_attribute", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="matchOnChildCalls")
    def match_on_child_calls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_on_child_calls")

    @match_on_child_calls.setter
    def match_on_child_calls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_on_child_calls", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceArgs']]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceArgs:
    def __init__(__self__, *,
                 management_zone: Optional[pulumi.Input[str]] = None,
                 service_tag: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if management_zone is not None:
            pulumi.set(__self__, "management_zone", management_zone)
        if service_tag is not None:
            pulumi.set(__self__, "service_tag", service_tag)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="managementZone")
    def management_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_zone")

    @management_zone.setter
    def management_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_zone", value)

    @property
    @pulumi.getter(name="serviceTag")
    def service_tag(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagArgs']]:
        return pulumi.get(self, "service_tag")

    @service_tag.setter
    def service_tag(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagArgs']]):
        pulumi.set(self, "service_tag", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 context: Optional[pulumi.Input[str]] = None,
                 tag_key: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKeyArgs']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKeyArgs']]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKeyArgs']]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKeyArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        if context is not None:
            pulumi.set(__self__, "context", context)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonTagArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagValueArgs']] = None,
                 values: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagValuesArgs']] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagValueArgs']]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagValuesArgs']]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagValuesArgs']]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonTagValuesArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagValuesValueArgs']]]] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagValuesValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CalculatedServiceMetricConditionConditionComparisonTagValuesValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonTagValuesValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CalculatedServiceMetricConditionConditionComparisonZosCallTypeArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CalculatedServiceMetricDimensionDefinitionArgs:
    def __init__(__self__, *,
                 dimension: pulumi.Input[str],
                 name: pulumi.Input[str],
                 top_x: pulumi.Input[int],
                 top_x_aggregation: pulumi.Input[str],
                 top_x_direction: pulumi.Input[str],
                 placeholders: Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "dimension", dimension)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "top_x", top_x)
        pulumi.set(__self__, "top_x_aggregation", top_x_aggregation)
        pulumi.set(__self__, "top_x_direction", top_x_direction)
        if placeholders is not None:
            pulumi.set(__self__, "placeholders", placeholders)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def dimension(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: pulumi.Input[str]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="topX")
    def top_x(self) -> pulumi.Input[int]:
        return pulumi.get(self, "top_x")

    @top_x.setter
    def top_x(self, value: pulumi.Input[int]):
        pulumi.set(self, "top_x", value)

    @property
    @pulumi.getter(name="topXAggregation")
    def top_x_aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "top_x_aggregation")

    @top_x_aggregation.setter
    def top_x_aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "top_x_aggregation", value)

    @property
    @pulumi.getter(name="topXDirection")
    def top_x_direction(self) -> pulumi.Input[str]:
        return pulumi.get(self, "top_x_direction")

    @top_x_direction.setter
    def top_x_direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "top_x_direction", value)

    @property
    @pulumi.getter
    def placeholders(self) -> Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersArgs']]:
        return pulumi.get(self, "placeholders")

    @placeholders.setter
    def placeholders(self, value: Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersArgs']]):
        pulumi.set(self, "placeholders", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CalculatedServiceMetricDimensionDefinitionPlaceholdersArgs:
    def __init__(__self__, *,
                 placeholders: Optional[pulumi.Input[Sequence[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderArgs']]]] = None):
        if placeholders is not None:
            pulumi.set(__self__, "placeholders", placeholders)

    @property
    @pulumi.getter
    def placeholders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderArgs']]]]:
        return pulumi.get(self, "placeholders")

    @placeholders.setter
    def placeholders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderArgs']]]]):
        pulumi.set(self, "placeholders", value)


@pulumi.input_type
class CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 delimiter_or_regex: Optional[pulumi.Input[str]] = None,
                 end_delimiter: Optional[pulumi.Input[str]] = None,
                 normalization: Optional[pulumi.Input[str]] = None,
                 request_attribute: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 use_from_child_calls: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if delimiter_or_regex is not None:
            pulumi.set(__self__, "delimiter_or_regex", delimiter_or_regex)
        if end_delimiter is not None:
            pulumi.set(__self__, "end_delimiter", end_delimiter)
        if normalization is not None:
            pulumi.set(__self__, "normalization", normalization)
        if request_attribute is not None:
            pulumi.set(__self__, "request_attribute", request_attribute)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if use_from_child_calls is not None:
            pulumi.set(__self__, "use_from_child_calls", use_from_child_calls)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="delimiterOrRegex")
    def delimiter_or_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter_or_regex")

    @delimiter_or_regex.setter
    def delimiter_or_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter_or_regex", value)

    @property
    @pulumi.getter(name="endDelimiter")
    def end_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_delimiter")

    @end_delimiter.setter
    def end_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_delimiter", value)

    @property
    @pulumi.getter
    def normalization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "normalization")

    @normalization.setter
    def normalization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "normalization", value)

    @property
    @pulumi.getter(name="requestAttribute")
    def request_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_attribute")

    @request_attribute.setter
    def request_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_attribute", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceArgs']]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="useFromChildCalls")
    def use_from_child_calls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_from_child_calls")

    @use_from_child_calls.setter
    def use_from_child_calls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_from_child_calls", value)


@pulumi.input_type
class CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceArgs:
    def __init__(__self__, *,
                 management_zone: Optional[pulumi.Input[str]] = None,
                 service_tag: Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if management_zone is not None:
            pulumi.set(__self__, "management_zone", management_zone)
        if service_tag is not None:
            pulumi.set(__self__, "service_tag", service_tag)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="managementZone")
    def management_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_zone")

    @management_zone.setter
    def management_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_zone", value)

    @property
    @pulumi.getter(name="serviceTag")
    def service_tag(self) -> Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagArgs']]:
        return pulumi.get(self, "service_tag")

    @service_tag.setter
    def service_tag(self, value: Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagArgs']]):
        pulumi.set(self, "service_tag", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 context: Optional[pulumi.Input[str]] = None,
                 tag_key: Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyArgs']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyArgs']]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input['CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyArgs']]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKeyArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        if context is not None:
            pulumi.set(__self__, "context", context)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class CalculatedServiceMetricMetricDefinitionArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 request_attribute: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if request_attribute is not None:
            pulumi.set(__self__, "request_attribute", request_attribute)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="requestAttribute")
    def request_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_attribute")

    @request_attribute.setter
    def request_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_attribute", value)


@pulumi.input_type
class CloudappWorkloaddetectionCloudFoundryArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class CloudappWorkloaddetectionDockerArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class CloudappWorkloaddetectionKubernetesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 filters: Optional[pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersArgs']]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersArgs']]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class CloudappWorkloaddetectionKubernetesFiltersArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersFilterArgs']]]):
        pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersFilterArgs']]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class CloudappWorkloaddetectionKubernetesFiltersFilterArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 inclusion_toggles: pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersFilterInclusionTogglesArgs'],
                 match_filter: pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilterArgs']):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "inclusion_toggles", inclusion_toggles)
        pulumi.set(__self__, "match_filter", match_filter)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="inclusionToggles")
    def inclusion_toggles(self) -> pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersFilterInclusionTogglesArgs']:
        return pulumi.get(self, "inclusion_toggles")

    @inclusion_toggles.setter
    def inclusion_toggles(self, value: pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersFilterInclusionTogglesArgs']):
        pulumi.set(self, "inclusion_toggles", value)

    @property
    @pulumi.getter(name="matchFilter")
    def match_filter(self) -> pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilterArgs']:
        return pulumi.get(self, "match_filter")

    @match_filter.setter
    def match_filter(self, value: pulumi.Input['CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilterArgs']):
        pulumi.set(self, "match_filter", value)


@pulumi.input_type
class CloudappWorkloaddetectionKubernetesFiltersFilterInclusionTogglesArgs:
    def __init__(__self__, *,
                 inc_basepod: pulumi.Input[bool],
                 inc_container: pulumi.Input[bool],
                 inc_namespace: pulumi.Input[bool],
                 inc_product: pulumi.Input[bool],
                 inc_stage: pulumi.Input[bool]):
        pulumi.set(__self__, "inc_basepod", inc_basepod)
        pulumi.set(__self__, "inc_container", inc_container)
        pulumi.set(__self__, "inc_namespace", inc_namespace)
        pulumi.set(__self__, "inc_product", inc_product)
        pulumi.set(__self__, "inc_stage", inc_stage)

    @property
    @pulumi.getter(name="incBasepod")
    def inc_basepod(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "inc_basepod")

    @inc_basepod.setter
    def inc_basepod(self, value: pulumi.Input[bool]):
        pulumi.set(self, "inc_basepod", value)

    @property
    @pulumi.getter(name="incContainer")
    def inc_container(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "inc_container")

    @inc_container.setter
    def inc_container(self, value: pulumi.Input[bool]):
        pulumi.set(self, "inc_container", value)

    @property
    @pulumi.getter(name="incNamespace")
    def inc_namespace(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "inc_namespace")

    @inc_namespace.setter
    def inc_namespace(self, value: pulumi.Input[bool]):
        pulumi.set(self, "inc_namespace", value)

    @property
    @pulumi.getter(name="incProduct")
    def inc_product(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "inc_product")

    @inc_product.setter
    def inc_product(self, value: pulumi.Input[bool]):
        pulumi.set(self, "inc_product", value)

    @property
    @pulumi.getter(name="incStage")
    def inc_stage(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "inc_stage")

    @inc_stage.setter
    def inc_stage(self, value: pulumi.Input[bool]):
        pulumi.set(self, "inc_stage", value)


@pulumi.input_type
class CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilterArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "match_operator", match_operator)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class CredentialsCredentialUsageSummaryArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[int] count: The number of uses
        :param pulumi.Input[str] type: Type of usage, `HTTP_MONITOR` or `BROWSER_MONITOR`
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        """
        The number of uses
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of usage, `HTTP_MONITOR` or `BROWSER_MONITOR`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CredentialsExternalArgs:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 clientid: Optional[pulumi.Input[str]] = None,
                 credentials_used_for_external_synchronizations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password_secret_name: Optional[pulumi.Input[str]] = None,
                 path_to_credentials: Optional[pulumi.Input[str]] = None,
                 roleid: Optional[pulumi.Input[str]] = None,
                 secretid: Optional[pulumi.Input[str]] = None,
                 tenantid: Optional[pulumi.Input[str]] = None,
                 token_secret_name: Optional[pulumi.Input[str]] = None,
                 username_secret_name: Optional[pulumi.Input[str]] = None,
                 vault_namespace: Optional[pulumi.Input[str]] = None,
                 vault_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] certificate: Required for Hashicorp Certificate. The ID of Credentials within the Certificate Vault holding the certificate
        :param pulumi.Input[str] client_secret: Required for Azure Client Secret. No further documentation available
        :param pulumi.Input[str] clientid: Required for Azure Client Secret. No further documentation available
        :param pulumi.Input[Sequence[pulumi.Input[str]]] credentials_used_for_external_synchronizations: No documentation available
        :param pulumi.Input[str] password_secret_name: No documentation available
        :param pulumi.Input[str] path_to_credentials: Required for Hashicorp App Role or Hashicorp Certificate. No further documentation available
        :param pulumi.Input[str] roleid: Required for Hashicorp App Role. No further documentation available
        :param pulumi.Input[str] secretid: Required for Hashicorp App Role. The ID of Credentials within the Certificate Vault holding the secret id
        :param pulumi.Input[str] tenantid: Required for Azure Client Secret. No further documentation available
        :param pulumi.Input[str] token_secret_name: No documentation available
        :param pulumi.Input[str] username_secret_name: No documentation available
        :param pulumi.Input[str] vault_namespace: Required for Hashicorp App Role. No further documentation available
        :param pulumi.Input[str] vault_url: No documentation available
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if clientid is not None:
            pulumi.set(__self__, "clientid", clientid)
        if credentials_used_for_external_synchronizations is not None:
            pulumi.set(__self__, "credentials_used_for_external_synchronizations", credentials_used_for_external_synchronizations)
        if password_secret_name is not None:
            pulumi.set(__self__, "password_secret_name", password_secret_name)
        if path_to_credentials is not None:
            pulumi.set(__self__, "path_to_credentials", path_to_credentials)
        if roleid is not None:
            pulumi.set(__self__, "roleid", roleid)
        if secretid is not None:
            pulumi.set(__self__, "secretid", secretid)
        if tenantid is not None:
            pulumi.set(__self__, "tenantid", tenantid)
        if token_secret_name is not None:
            pulumi.set(__self__, "token_secret_name", token_secret_name)
        if username_secret_name is not None:
            pulumi.set(__self__, "username_secret_name", username_secret_name)
        if vault_namespace is not None:
            pulumi.set(__self__, "vault_namespace", vault_namespace)
        if vault_url is not None:
            pulumi.set(__self__, "vault_url", vault_url)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Required for Hashicorp Certificate. The ID of Credentials within the Certificate Vault holding the certificate
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Required for Azure Client Secret. No further documentation available
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def clientid(self) -> Optional[pulumi.Input[str]]:
        """
        Required for Azure Client Secret. No further documentation available
        """
        return pulumi.get(self, "clientid")

    @clientid.setter
    def clientid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clientid", value)

    @property
    @pulumi.getter(name="credentialsUsedForExternalSynchronizations")
    def credentials_used_for_external_synchronizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        No documentation available
        """
        return pulumi.get(self, "credentials_used_for_external_synchronizations")

    @credentials_used_for_external_synchronizations.setter
    def credentials_used_for_external_synchronizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "credentials_used_for_external_synchronizations", value)

    @property
    @pulumi.getter(name="passwordSecretName")
    def password_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        No documentation available
        """
        return pulumi.get(self, "password_secret_name")

    @password_secret_name.setter
    def password_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_secret_name", value)

    @property
    @pulumi.getter(name="pathToCredentials")
    def path_to_credentials(self) -> Optional[pulumi.Input[str]]:
        """
        Required for Hashicorp App Role or Hashicorp Certificate. No further documentation available
        """
        return pulumi.get(self, "path_to_credentials")

    @path_to_credentials.setter
    def path_to_credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_to_credentials", value)

    @property
    @pulumi.getter
    def roleid(self) -> Optional[pulumi.Input[str]]:
        """
        Required for Hashicorp App Role. No further documentation available
        """
        return pulumi.get(self, "roleid")

    @roleid.setter
    def roleid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "roleid", value)

    @property
    @pulumi.getter
    def secretid(self) -> Optional[pulumi.Input[str]]:
        """
        Required for Hashicorp App Role. The ID of Credentials within the Certificate Vault holding the secret id
        """
        return pulumi.get(self, "secretid")

    @secretid.setter
    def secretid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secretid", value)

    @property
    @pulumi.getter
    def tenantid(self) -> Optional[pulumi.Input[str]]:
        """
        Required for Azure Client Secret. No further documentation available
        """
        return pulumi.get(self, "tenantid")

    @tenantid.setter
    def tenantid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenantid", value)

    @property
    @pulumi.getter(name="tokenSecretName")
    def token_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        No documentation available
        """
        return pulumi.get(self, "token_secret_name")

    @token_secret_name.setter
    def token_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_secret_name", value)

    @property
    @pulumi.getter(name="usernameSecretName")
    def username_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        No documentation available
        """
        return pulumi.get(self, "username_secret_name")

    @username_secret_name.setter
    def username_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username_secret_name", value)

    @property
    @pulumi.getter(name="vaultNamespace")
    def vault_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Required for Hashicorp App Role. No further documentation available
        """
        return pulumi.get(self, "vault_namespace")

    @vault_namespace.setter
    def vault_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vault_namespace", value)

    @property
    @pulumi.getter(name="vaultUrl")
    def vault_url(self) -> Optional[pulumi.Input[str]]:
        """
        No documentation available
        """
        return pulumi.get(self, "vault_url")

    @vault_url.setter
    def vault_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vault_url", value)


@pulumi.input_type
class CustomAnomaliesDimensionArgs:
    def __init__(__self__, *,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionDimensionArgs']]]] = None,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionEntityArgs']]]] = None,
                 strings: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionStringArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionDimensionArgs']]] dimensions: A generic definition for a filter
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionEntityArgs']]] entities: A filter for the metrics entity dimensions
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionStringArgs']]] strings: A filter for the metrics string dimensions
        """
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if entities is not None:
            pulumi.set(__self__, "entities", entities)
        if strings is not None:
            pulumi.set(__self__, "strings", strings)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionDimensionArgs']]]]:
        """
        A generic definition for a filter
        """
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionEntityArgs']]]]:
        """
        A filter for the metrics entity dimensions
        """
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionEntityArgs']]]]):
        pulumi.set(self, "entities", value)

    @property
    @pulumi.getter
    def strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionStringArgs']]]]:
        """
        A filter for the metrics string dimensions
        """
        return pulumi.get(self, "strings")

    @strings.setter
    def strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesDimensionStringArgs']]]]):
        pulumi.set(self, "strings", value)


@pulumi.input_type
class CustomAnomaliesDimensionDimensionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 index: Optional[pulumi.Input[int]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the metric event displayed in the UI
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "type", type)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the metric event displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesDimensionEntityArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['CustomAnomaliesDimensionEntityFilterArgs'],
                 key: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "filter", filter)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['CustomAnomaliesDimensionEntityFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['CustomAnomaliesDimensionEntityFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesDimensionEntityFilterArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CustomAnomaliesDimensionStringArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['CustomAnomaliesDimensionStringFilterArgs'],
                 index: Optional[pulumi.Input[int]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the metric event displayed in the UI
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "filter", filter)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['CustomAnomaliesDimensionStringFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['CustomAnomaliesDimensionStringFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the metric event displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesDimensionStringFilterArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CustomAnomaliesScopeArgs:
    def __init__(__self__, *,
                 custom_device_group_names: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeCustomDeviceGroupNameArgs']]]] = None,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeEntityArgs']]]] = None,
                 host_group_names: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeHostGroupNameArgs']]]] = None,
                 host_names: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeHostNameArgs']]]] = None,
                 management_zones: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeManagementZoneArgs']]]] = None,
                 names: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeNameArgs']]]] = None,
                 process_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeProcessGroupIdArgs']]]] = None,
                 process_group_names: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeProcessGroupNameArgs']]]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeScopeArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeTagArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeCustomDeviceGroupNameArgs']]] custom_device_group_names: A scope filter for the related custom device group name
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeEntityArgs']]] entities: A scope filter for a monitored entity identifier
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeHostGroupNameArgs']]] host_group_names: A scope filter for the related host group name
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeHostNameArgs']]] host_names: A scope filter for the related host name
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeManagementZoneArgs']]] management_zones: A scope filter for a management zone identifier
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeNameArgs']]] names: A scope filter for a monitored entity name
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeProcessGroupIdArgs']]] process_group_ids: A scope filter for a process group identifier
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeProcessGroupNameArgs']]] process_group_names: A scope filter for the related process group name
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeScopeArgs']]] scopes: A generic scope filter
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeTagArgs']]] tags: A scope filter for tags on entities
        """
        if custom_device_group_names is not None:
            pulumi.set(__self__, "custom_device_group_names", custom_device_group_names)
        if entities is not None:
            pulumi.set(__self__, "entities", entities)
        if host_group_names is not None:
            pulumi.set(__self__, "host_group_names", host_group_names)
        if host_names is not None:
            pulumi.set(__self__, "host_names", host_names)
        if management_zones is not None:
            pulumi.set(__self__, "management_zones", management_zones)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if process_group_ids is not None:
            pulumi.set(__self__, "process_group_ids", process_group_ids)
        if process_group_names is not None:
            pulumi.set(__self__, "process_group_names", process_group_names)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="customDeviceGroupNames")
    def custom_device_group_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeCustomDeviceGroupNameArgs']]]]:
        """
        A scope filter for the related custom device group name
        """
        return pulumi.get(self, "custom_device_group_names")

    @custom_device_group_names.setter
    def custom_device_group_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeCustomDeviceGroupNameArgs']]]]):
        pulumi.set(self, "custom_device_group_names", value)

    @property
    @pulumi.getter
    def entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeEntityArgs']]]]:
        """
        A scope filter for a monitored entity identifier
        """
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeEntityArgs']]]]):
        pulumi.set(self, "entities", value)

    @property
    @pulumi.getter(name="hostGroupNames")
    def host_group_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeHostGroupNameArgs']]]]:
        """
        A scope filter for the related host group name
        """
        return pulumi.get(self, "host_group_names")

    @host_group_names.setter
    def host_group_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeHostGroupNameArgs']]]]):
        pulumi.set(self, "host_group_names", value)

    @property
    @pulumi.getter(name="hostNames")
    def host_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeHostNameArgs']]]]:
        """
        A scope filter for the related host name
        """
        return pulumi.get(self, "host_names")

    @host_names.setter
    def host_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeHostNameArgs']]]]):
        pulumi.set(self, "host_names", value)

    @property
    @pulumi.getter(name="managementZones")
    def management_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeManagementZoneArgs']]]]:
        """
        A scope filter for a management zone identifier
        """
        return pulumi.get(self, "management_zones")

    @management_zones.setter
    def management_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeManagementZoneArgs']]]]):
        pulumi.set(self, "management_zones", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeNameArgs']]]]:
        """
        A scope filter for a monitored entity name
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeNameArgs']]]]):
        pulumi.set(self, "names", value)

    @property
    @pulumi.getter(name="processGroupIds")
    def process_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeProcessGroupIdArgs']]]]:
        """
        A scope filter for a process group identifier
        """
        return pulumi.get(self, "process_group_ids")

    @process_group_ids.setter
    def process_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeProcessGroupIdArgs']]]]):
        pulumi.set(self, "process_group_ids", value)

    @property
    @pulumi.getter(name="processGroupNames")
    def process_group_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeProcessGroupNameArgs']]]]:
        """
        A scope filter for the related process group name
        """
        return pulumi.get(self, "process_group_names")

    @process_group_names.setter
    def process_group_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeProcessGroupNameArgs']]]]):
        pulumi.set(self, "process_group_names", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeScopeArgs']]]]:
        """
        A generic scope filter
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeScopeArgs']]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeTagArgs']]]]:
        """
        A scope filter for tags on entities
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesScopeTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class CustomAnomaliesScopeCustomDeviceGroupNameArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['CustomAnomaliesScopeCustomDeviceGroupNameFilterArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "filter", filter)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['CustomAnomaliesScopeCustomDeviceGroupNameFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['CustomAnomaliesScopeCustomDeviceGroupNameFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesScopeCustomDeviceGroupNameFilterArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CustomAnomaliesScopeEntityArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "id", id)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesScopeHostGroupNameArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['CustomAnomaliesScopeHostGroupNameFilterArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "filter", filter)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['CustomAnomaliesScopeHostGroupNameFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['CustomAnomaliesScopeHostGroupNameFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesScopeHostGroupNameFilterArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CustomAnomaliesScopeHostNameArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['CustomAnomaliesScopeHostNameFilterArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "filter", filter)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['CustomAnomaliesScopeHostNameFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['CustomAnomaliesScopeHostNameFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesScopeHostNameFilterArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CustomAnomaliesScopeManagementZoneArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesScopeNameArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['CustomAnomaliesScopeNameFilterArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "filter", filter)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['CustomAnomaliesScopeNameFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['CustomAnomaliesScopeNameFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesScopeNameFilterArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CustomAnomaliesScopeProcessGroupIdArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "id", id)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesScopeProcessGroupNameArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['CustomAnomaliesScopeProcessGroupNameFilterArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "filter", filter)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['CustomAnomaliesScopeProcessGroupNameFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['CustomAnomaliesScopeProcessGroupNameFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesScopeProcessGroupNameFilterArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CustomAnomaliesScopeScopeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesScopeTagArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['CustomAnomaliesScopeTagFilterArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "filter", filter)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['CustomAnomaliesScopeTagFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['CustomAnomaliesScopeTagFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesScopeTagFilterArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CustomAnomaliesStrategyArgs:
    def __init__(__self__, *,
                 auto: Optional[pulumi.Input['CustomAnomaliesStrategyAutoArgs']] = None,
                 generics: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesStrategyGenericArgs']]]] = None,
                 static: Optional[pulumi.Input['CustomAnomaliesStrategyStaticArgs']] = None):
        """
        :param pulumi.Input['CustomAnomaliesStrategyAutoArgs'] auto: An auto-adaptive baseline strategy to detect anomalies within metrics that show a regular change over time, as the baseline is also updated automatically. An example is to detect an anomaly in the number of received network packets or within the number of user actions over time
        :param pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesStrategyGenericArgs']]] generics: A generic monitoring strategy
        :param pulumi.Input['CustomAnomaliesStrategyStaticArgs'] static: A static threshold monitoring strategy to alert on hard limits within a given metric. An example is the violation of a critical memory limit
        """
        if auto is not None:
            pulumi.set(__self__, "auto", auto)
        if generics is not None:
            pulumi.set(__self__, "generics", generics)
        if static is not None:
            pulumi.set(__self__, "static", static)

    @property
    @pulumi.getter
    def auto(self) -> Optional[pulumi.Input['CustomAnomaliesStrategyAutoArgs']]:
        """
        An auto-adaptive baseline strategy to detect anomalies within metrics that show a regular change over time, as the baseline is also updated automatically. An example is to detect an anomaly in the number of received network packets or within the number of user actions over time
        """
        return pulumi.get(self, "auto")

    @auto.setter
    def auto(self, value: Optional[pulumi.Input['CustomAnomaliesStrategyAutoArgs']]):
        pulumi.set(self, "auto", value)

    @property
    @pulumi.getter
    def generics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesStrategyGenericArgs']]]]:
        """
        A generic monitoring strategy
        """
        return pulumi.get(self, "generics")

    @generics.setter
    def generics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomAnomaliesStrategyGenericArgs']]]]):
        pulumi.set(self, "generics", value)

    @property
    @pulumi.getter
    def static(self) -> Optional[pulumi.Input['CustomAnomaliesStrategyStaticArgs']]:
        """
        A static threshold monitoring strategy to alert on hard limits within a given metric. An example is the violation of a critical memory limit
        """
        return pulumi.get(self, "static")

    @static.setter
    def static(self, value: Optional[pulumi.Input['CustomAnomaliesStrategyStaticArgs']]):
        pulumi.set(self, "static", value)


@pulumi.input_type
class CustomAnomaliesStrategyAutoArgs:
    def __init__(__self__, *,
                 alert_condition: pulumi.Input[str],
                 dealerting_samples: pulumi.Input[int],
                 samples: pulumi.Input[int],
                 signal_fluctuations: pulumi.Input[float],
                 violating_samples: pulumi.Input[int],
                 alerting_on_missing_data: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "alert_condition", alert_condition)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "samples", samples)
        pulumi.set(__self__, "signal_fluctuations", signal_fluctuations)
        pulumi.set(__self__, "violating_samples", violating_samples)
        if alerting_on_missing_data is not None:
            pulumi.set(__self__, "alerting_on_missing_data", alerting_on_missing_data)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="alertCondition")
    def alert_condition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alert_condition")

    @alert_condition.setter
    def alert_condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_condition", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter
    def samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "samples")

    @samples.setter
    def samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "samples", value)

    @property
    @pulumi.getter(name="signalFluctuations")
    def signal_fluctuations(self) -> pulumi.Input[float]:
        return pulumi.get(self, "signal_fluctuations")

    @signal_fluctuations.setter
    def signal_fluctuations(self, value: pulumi.Input[float]):
        pulumi.set(self, "signal_fluctuations", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)

    @property
    @pulumi.getter(name="alertingOnMissingData")
    def alerting_on_missing_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "alerting_on_missing_data")

    @alerting_on_missing_data.setter
    def alerting_on_missing_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alerting_on_missing_data", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesStrategyGenericArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAnomaliesStrategyStaticArgs:
    def __init__(__self__, *,
                 alert_condition: pulumi.Input[str],
                 dealerting_samples: pulumi.Input[int],
                 samples: pulumi.Input[int],
                 threshold: pulumi.Input[float],
                 unit: pulumi.Input[str],
                 violating_samples: pulumi.Input[int],
                 alerting_on_missing_data: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "alert_condition", alert_condition)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "samples", samples)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "violating_samples", violating_samples)
        if alerting_on_missing_data is not None:
            pulumi.set(__self__, "alerting_on_missing_data", alerting_on_missing_data)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="alertCondition")
    def alert_condition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alert_condition")

    @alert_condition.setter
    def alert_condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_condition", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter
    def samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "samples")

    @samples.setter
    def samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "samples", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)

    @property
    @pulumi.getter(name="alertingOnMissingData")
    def alerting_on_missing_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "alerting_on_missing_data")

    @alerting_on_missing_data.setter
    def alerting_on_missing_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alerting_on_missing_data", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomAppAnomaliesErrorRateIncreaseArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 detection_mode: Optional[pulumi.Input[str]] = None,
                 error_rate_increase_auto: Optional[pulumi.Input['CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs']] = None,
                 error_rate_increase_fixed: Optional[pulumi.Input['CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Fixed`
        :param pulumi.Input['CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs'] error_rate_increase_auto: Alert if the percentage of user actions affected by reported errors exceeds **both** the absolute threshold and the relative threshold
        :param pulumi.Input['CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs'] error_rate_increase_fixed: Alert if the custom reported error rate threshold is exceeded during any 5-minute period
        """
        pulumi.set(__self__, "enabled", enabled)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if error_rate_increase_auto is not None:
            pulumi.set(__self__, "error_rate_increase_auto", error_rate_increase_auto)
        if error_rate_increase_fixed is not None:
            pulumi.set(__self__, "error_rate_increase_fixed", error_rate_increase_fixed)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Fixed`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)

    @property
    @pulumi.getter(name="errorRateIncreaseAuto")
    def error_rate_increase_auto(self) -> Optional[pulumi.Input['CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs']]:
        """
        Alert if the percentage of user actions affected by reported errors exceeds **both** the absolute threshold and the relative threshold
        """
        return pulumi.get(self, "error_rate_increase_auto")

    @error_rate_increase_auto.setter
    def error_rate_increase_auto(self, value: Optional[pulumi.Input['CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs']]):
        pulumi.set(self, "error_rate_increase_auto", value)

    @property
    @pulumi.getter(name="errorRateIncreaseFixed")
    def error_rate_increase_fixed(self) -> Optional[pulumi.Input['CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs']]:
        """
        Alert if the custom reported error rate threshold is exceeded during any 5-minute period
        """
        return pulumi.get(self, "error_rate_increase_fixed")

    @error_rate_increase_fixed.setter
    def error_rate_increase_fixed(self, value: Optional[pulumi.Input['CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs']]):
        pulumi.set(self, "error_rate_increase_fixed", value)


@pulumi.input_type
class CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs:
    def __init__(__self__, *,
                 threshold_absolute: pulumi.Input[float],
                 threshold_relative: pulumi.Input[float]):
        pulumi.set(__self__, "threshold_absolute", threshold_absolute)
        pulumi.set(__self__, "threshold_relative", threshold_relative)

    @property
    @pulumi.getter(name="thresholdAbsolute")
    def threshold_absolute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold_absolute")

    @threshold_absolute.setter
    def threshold_absolute(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold_absolute", value)

    @property
    @pulumi.getter(name="thresholdRelative")
    def threshold_relative(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold_relative")

    @threshold_relative.setter
    def threshold_relative(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold_relative", value)


@pulumi.input_type
class CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs:
    def __init__(__self__, *,
                 sensitivity: pulumi.Input[str],
                 threshold_absolute: pulumi.Input[float]):
        pulumi.set(__self__, "sensitivity", sensitivity)
        pulumi.set(__self__, "threshold_absolute", threshold_absolute)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter(name="thresholdAbsolute")
    def threshold_absolute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold_absolute")

    @threshold_absolute.setter
    def threshold_absolute(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold_absolute", value)


@pulumi.input_type
class CustomAppAnomaliesSlowUserActionsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 detection_mode: Optional[pulumi.Input[str]] = None,
                 slow_user_actions_auto: Optional[pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs']] = None,
                 slow_user_actions_fixed: Optional[pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Fixed`
        :param pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs'] slow_user_actions_auto: no documentation available
        :param pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs'] slow_user_actions_fixed: no documentation available
        """
        pulumi.set(__self__, "enabled", enabled)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if slow_user_actions_auto is not None:
            pulumi.set(__self__, "slow_user_actions_auto", slow_user_actions_auto)
        if slow_user_actions_fixed is not None:
            pulumi.set(__self__, "slow_user_actions_fixed", slow_user_actions_fixed)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Fixed`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)

    @property
    @pulumi.getter(name="slowUserActionsAuto")
    def slow_user_actions_auto(self) -> Optional[pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "slow_user_actions_auto")

    @slow_user_actions_auto.setter
    def slow_user_actions_auto(self, value: Optional[pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs']]):
        pulumi.set(self, "slow_user_actions_auto", value)

    @property
    @pulumi.getter(name="slowUserActionsFixed")
    def slow_user_actions_fixed(self) -> Optional[pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "slow_user_actions_fixed")

    @slow_user_actions_fixed.setter
    def slow_user_actions_fixed(self, value: Optional[pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs']]):
        pulumi.set(self, "slow_user_actions_fixed", value)


@pulumi.input_type
class CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs:
    def __init__(__self__, *,
                 duration_avoid_overalerting: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralertingArgs'],
                 duration_threshold_all: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAllArgs'],
                 duration_threshold_slowest: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowestArgs']):
        pulumi.set(__self__, "duration_avoid_overalerting", duration_avoid_overalerting)
        pulumi.set(__self__, "duration_threshold_all", duration_threshold_all)
        pulumi.set(__self__, "duration_threshold_slowest", duration_threshold_slowest)

    @property
    @pulumi.getter(name="durationAvoidOveralerting")
    def duration_avoid_overalerting(self) -> pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralertingArgs']:
        return pulumi.get(self, "duration_avoid_overalerting")

    @duration_avoid_overalerting.setter
    def duration_avoid_overalerting(self, value: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralertingArgs']):
        pulumi.set(self, "duration_avoid_overalerting", value)

    @property
    @pulumi.getter(name="durationThresholdAll")
    def duration_threshold_all(self) -> pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAllArgs']:
        return pulumi.get(self, "duration_threshold_all")

    @duration_threshold_all.setter
    def duration_threshold_all(self, value: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAllArgs']):
        pulumi.set(self, "duration_threshold_all", value)

    @property
    @pulumi.getter(name="durationThresholdSlowest")
    def duration_threshold_slowest(self) -> pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowestArgs']:
        return pulumi.get(self, "duration_threshold_slowest")

    @duration_threshold_slowest.setter
    def duration_threshold_slowest(self, value: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowestArgs']):
        pulumi.set(self, "duration_threshold_slowest", value)


@pulumi.input_type
class CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralertingArgs:
    def __init__(__self__, *,
                 min_action_rate: pulumi.Input[int]):
        pulumi.set(__self__, "min_action_rate", min_action_rate)

    @property
    @pulumi.getter(name="minActionRate")
    def min_action_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_action_rate")

    @min_action_rate.setter
    def min_action_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_action_rate", value)


@pulumi.input_type
class CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAllArgs:
    def __init__(__self__, *,
                 duration_threshold: pulumi.Input[float],
                 slowdown_percentage: pulumi.Input[float]):
        pulumi.set(__self__, "duration_threshold", duration_threshold)
        pulumi.set(__self__, "slowdown_percentage", slowdown_percentage)

    @property
    @pulumi.getter(name="durationThreshold")
    def duration_threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "duration_threshold")

    @duration_threshold.setter
    def duration_threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "duration_threshold", value)

    @property
    @pulumi.getter(name="slowdownPercentage")
    def slowdown_percentage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowdown_percentage")

    @slowdown_percentage.setter
    def slowdown_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowdown_percentage", value)


@pulumi.input_type
class CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowestArgs:
    def __init__(__self__, *,
                 duration_threshold: pulumi.Input[float],
                 slowdown_percentage: pulumi.Input[float]):
        pulumi.set(__self__, "duration_threshold", duration_threshold)
        pulumi.set(__self__, "slowdown_percentage", slowdown_percentage)

    @property
    @pulumi.getter(name="durationThreshold")
    def duration_threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "duration_threshold")

    @duration_threshold.setter
    def duration_threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "duration_threshold", value)

    @property
    @pulumi.getter(name="slowdownPercentage")
    def slowdown_percentage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowdown_percentage")

    @slowdown_percentage.setter
    def slowdown_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowdown_percentage", value)


@pulumi.input_type
class CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs:
    def __init__(__self__, *,
                 duration_avoid_overalerting: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralertingArgs'],
                 duration_threshold_all_fixed: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixedArgs'],
                 duration_threshold_slowest: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowestArgs'],
                 sensitivity: pulumi.Input[str]):
        pulumi.set(__self__, "duration_avoid_overalerting", duration_avoid_overalerting)
        pulumi.set(__self__, "duration_threshold_all_fixed", duration_threshold_all_fixed)
        pulumi.set(__self__, "duration_threshold_slowest", duration_threshold_slowest)
        pulumi.set(__self__, "sensitivity", sensitivity)

    @property
    @pulumi.getter(name="durationAvoidOveralerting")
    def duration_avoid_overalerting(self) -> pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralertingArgs']:
        return pulumi.get(self, "duration_avoid_overalerting")

    @duration_avoid_overalerting.setter
    def duration_avoid_overalerting(self, value: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralertingArgs']):
        pulumi.set(self, "duration_avoid_overalerting", value)

    @property
    @pulumi.getter(name="durationThresholdAllFixed")
    def duration_threshold_all_fixed(self) -> pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixedArgs']:
        return pulumi.get(self, "duration_threshold_all_fixed")

    @duration_threshold_all_fixed.setter
    def duration_threshold_all_fixed(self, value: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixedArgs']):
        pulumi.set(self, "duration_threshold_all_fixed", value)

    @property
    @pulumi.getter(name="durationThresholdSlowest")
    def duration_threshold_slowest(self) -> pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowestArgs']:
        return pulumi.get(self, "duration_threshold_slowest")

    @duration_threshold_slowest.setter
    def duration_threshold_slowest(self, value: pulumi.Input['CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowestArgs']):
        pulumi.set(self, "duration_threshold_slowest", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)


@pulumi.input_type
class CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralertingArgs:
    def __init__(__self__, *,
                 min_action_rate: pulumi.Input[int]):
        pulumi.set(__self__, "min_action_rate", min_action_rate)

    @property
    @pulumi.getter(name="minActionRate")
    def min_action_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_action_rate")

    @min_action_rate.setter
    def min_action_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_action_rate", value)


@pulumi.input_type
class CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixedArgs:
    def __init__(__self__, *,
                 duration_threshold: pulumi.Input[float]):
        pulumi.set(__self__, "duration_threshold", duration_threshold)

    @property
    @pulumi.getter(name="durationThreshold")
    def duration_threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "duration_threshold")

    @duration_threshold.setter
    def duration_threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "duration_threshold", value)


@pulumi.input_type
class CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowestArgs:
    def __init__(__self__, *,
                 duration_threshold: pulumi.Input[float]):
        pulumi.set(__self__, "duration_threshold", duration_threshold)

    @property
    @pulumi.getter(name="durationThreshold")
    def duration_threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "duration_threshold")

    @duration_threshold.setter
    def duration_threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "duration_threshold", value)


@pulumi.input_type
class CustomAppAnomaliesUnexpectedHighLoadArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 threshold_percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[float] threshold_percentage: Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
        """
        pulumi.set(__self__, "enabled", enabled)
        if threshold_percentage is not None:
            pulumi.set(__self__, "threshold_percentage", threshold_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="thresholdPercentage")
    def threshold_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
        """
        return pulumi.get(self, "threshold_percentage")

    @threshold_percentage.setter
    def threshold_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold_percentage", value)


@pulumi.input_type
class CustomAppAnomaliesUnexpectedLowLoadArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 threshold_percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[float] threshold_percentage: Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic drops within your application.
        """
        pulumi.set(__self__, "enabled", enabled)
        if threshold_percentage is not None:
            pulumi.set(__self__, "threshold_percentage", threshold_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="thresholdPercentage")
    def threshold_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic drops within your application.
        """
        return pulumi.get(self, "threshold_percentage")

    @threshold_percentage.setter
    def threshold_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold_percentage", value)


@pulumi.input_type
class CustomAppCrashRateCrashRateIncreaseArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 crash_rate_increase_auto: Optional[pulumi.Input['CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs']] = None,
                 crash_rate_increase_fixed: Optional[pulumi.Input['CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs'] crash_rate_increase_auto: Alert crash rate increases when auto-detected baseline is exceeded by a certain number of users
        :param pulumi.Input['CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs'] crash_rate_increase_fixed: Alert crash rate increases when the defined threshold is exceeded by a certain number of users
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Fixed`
        """
        pulumi.set(__self__, "enabled", enabled)
        if crash_rate_increase_auto is not None:
            pulumi.set(__self__, "crash_rate_increase_auto", crash_rate_increase_auto)
        if crash_rate_increase_fixed is not None:
            pulumi.set(__self__, "crash_rate_increase_fixed", crash_rate_increase_fixed)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="crashRateIncreaseAuto")
    def crash_rate_increase_auto(self) -> Optional[pulumi.Input['CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs']]:
        """
        Alert crash rate increases when auto-detected baseline is exceeded by a certain number of users
        """
        return pulumi.get(self, "crash_rate_increase_auto")

    @crash_rate_increase_auto.setter
    def crash_rate_increase_auto(self, value: Optional[pulumi.Input['CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs']]):
        pulumi.set(self, "crash_rate_increase_auto", value)

    @property
    @pulumi.getter(name="crashRateIncreaseFixed")
    def crash_rate_increase_fixed(self) -> Optional[pulumi.Input['CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs']]:
        """
        Alert crash rate increases when the defined threshold is exceeded by a certain number of users
        """
        return pulumi.get(self, "crash_rate_increase_fixed")

    @crash_rate_increase_fixed.setter
    def crash_rate_increase_fixed(self, value: Optional[pulumi.Input['CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs']]):
        pulumi.set(self, "crash_rate_increase_fixed", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Fixed`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs:
    def __init__(__self__, *,
                 baseline_violation_percentage: pulumi.Input[float],
                 concurrent_users: pulumi.Input[float],
                 sensitivity: pulumi.Input[str]):
        pulumi.set(__self__, "baseline_violation_percentage", baseline_violation_percentage)
        pulumi.set(__self__, "concurrent_users", concurrent_users)
        pulumi.set(__self__, "sensitivity", sensitivity)

    @property
    @pulumi.getter(name="baselineViolationPercentage")
    def baseline_violation_percentage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "baseline_violation_percentage")

    @baseline_violation_percentage.setter
    def baseline_violation_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "baseline_violation_percentage", value)

    @property
    @pulumi.getter(name="concurrentUsers")
    def concurrent_users(self) -> pulumi.Input[float]:
        return pulumi.get(self, "concurrent_users")

    @concurrent_users.setter
    def concurrent_users(self, value: pulumi.Input[float]):
        pulumi.set(self, "concurrent_users", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)


@pulumi.input_type
class CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs:
    def __init__(__self__, *,
                 absolute_crash_rate: pulumi.Input[float],
                 concurrent_users: pulumi.Input[int]):
        pulumi.set(__self__, "absolute_crash_rate", absolute_crash_rate)
        pulumi.set(__self__, "concurrent_users", concurrent_users)

    @property
    @pulumi.getter(name="absoluteCrashRate")
    def absolute_crash_rate(self) -> pulumi.Input[float]:
        return pulumi.get(self, "absolute_crash_rate")

    @absolute_crash_rate.setter
    def absolute_crash_rate(self, value: pulumi.Input[float]):
        pulumi.set(self, "absolute_crash_rate", value)

    @property
    @pulumi.getter(name="concurrentUsers")
    def concurrent_users(self) -> pulumi.Input[int]:
        return pulumi.get(self, "concurrent_users")

    @concurrent_users.setter
    def concurrent_users(self, value: pulumi.Input[int]):
        pulumi.set(self, "concurrent_users", value)


@pulumi.input_type
class CustomAppEnablementRumArgs:
    def __init__(__self__, *,
                 cost_and_traffic_control: pulumi.Input[int],
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[int] cost_and_traffic_control: (Field has overlap with `MobileApplication`) Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        """
        pulumi.set(__self__, "cost_and_traffic_control", cost_and_traffic_control)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="costAndTrafficControl")
    def cost_and_traffic_control(self) -> pulumi.Input[int]:
        """
        (Field has overlap with `MobileApplication`) Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
        """
        return pulumi.get(self, "cost_and_traffic_control")

    @cost_and_traffic_control.setter
    def cost_and_traffic_control(self, value: pulumi.Input[int]):
        pulumi.set(self, "cost_and_traffic_control", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class CustomServiceRuleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 methods: pulumi.Input[Sequence[pulumi.Input['CustomServiceRuleMethodArgs']]],
                 annotations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 class_: Optional[pulumi.Input['CustomServiceRuleClassArgs']] = None,
                 file: Optional[pulumi.Input['CustomServiceRuleFileArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Rule enabled/disabled
        :param pulumi.Input[Sequence[pulumi.Input['CustomServiceRuleMethodArgs']]] methods: methods to instrument
        :param pulumi.Input[Sequence[pulumi.Input[str]]] annotations: Additional annotations filter of the rule. Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented. Not applicable to PHP
        :param pulumi.Input['CustomServiceRuleClassArgs'] class_: The fully qualified class or interface to instrument (or a substring if matching to a string). Required for Java and .NET custom services. Not applicable to PHP
        :param pulumi.Input['CustomServiceRuleFileArgs'] file: The PHP file containing the class or methods to instrument. Required for PHP custom service. Not applicable to Java and .NET
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "methods", methods)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Rule enabled/disabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def methods(self) -> pulumi.Input[Sequence[pulumi.Input['CustomServiceRuleMethodArgs']]]:
        """
        methods to instrument
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: pulumi.Input[Sequence[pulumi.Input['CustomServiceRuleMethodArgs']]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Additional annotations filter of the rule. Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented. Not applicable to PHP
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input['CustomServiceRuleClassArgs']]:
        """
        The fully qualified class or interface to instrument (or a substring if matching to a string). Required for Java and .NET custom services. Not applicable to PHP
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input['CustomServiceRuleClassArgs']]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input['CustomServiceRuleFileArgs']]:
        """
        The PHP file containing the class or methods to instrument. Required for PHP custom service. Not applicable to Java and .NET
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input['CustomServiceRuleFileArgs']]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class CustomServiceRuleClassArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 match: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the custom service, displayed in the UI
        """
        pulumi.set(__self__, "name", name)
        if match is not None:
            pulumi.set(__self__, "match", match)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the custom service, displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)


@pulumi.input_type
class CustomServiceRuleFileArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 match: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the custom service, displayed in the UI
        """
        pulumi.set(__self__, "name", name)
        if match is not None:
            pulumi.set(__self__, "match", match)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the custom service, displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def match(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match", value)


@pulumi.input_type
class CustomServiceRuleMethodArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 arguments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 modifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 returns: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the custom service, displayed in the UI
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "name", name)
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if modifiers is not None:
            pulumi.set(__self__, "modifiers", modifiers)
        if returns is not None:
            pulumi.set(__self__, "returns", returns)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the custom service, displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "arguments")

    @arguments.setter
    def arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "arguments", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def modifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "modifiers")

    @modifiers.setter
    def modifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "modifiers", value)

    @property
    @pulumi.getter
    def returns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "returns")

    @returns.setter
    def returns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "returns", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class CustomTagsTagsArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['CustomTagsTagsFilterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CustomTagsTagsFilterArgs']]] filters: A Tag Filter
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomTagsTagsFilterArgs']]]]:
        """
        A Tag Filter
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomTagsTagsFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class CustomTagsTagsFilterArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardDashboardMetadataArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 owner: pulumi.Input[str],
                 consistent_colors: Optional[pulumi.Input[bool]] = None,
                 dynamic_filters: Optional[pulumi.Input['DashboardDashboardMetadataDynamicFiltersArgs']] = None,
                 filter: Optional[pulumi.Input['DashboardDashboardMetadataFilterArgs']] = None,
                 preset: Optional[pulumi.Input[bool]] = None,
                 shared: Optional[pulumi.Input[bool]] = None,
                 sharing_details: Optional[pulumi.Input['DashboardDashboardMetadataSharingDetailsArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tiles_name_size: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 valid_filter_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: the name of the dashboard
        :param pulumi.Input[str] owner: the owner of the dashboard
        :param pulumi.Input[bool] consistent_colors: The tile uses consistent colors when rendering its content
        :param pulumi.Input['DashboardDashboardMetadataDynamicFiltersArgs'] dynamic_filters: Dashboard filter configuration of a dashboard
        :param pulumi.Input['DashboardDashboardMetadataFilterArgs'] filter: Global filter Settings for the Dashboard
        :param pulumi.Input[bool] preset: the dashboard is a preset (`true`) or not (`false`). Default is `false`.
        :param pulumi.Input[bool] shared: the dashboard is shared (`true`) or private (`false`)
        :param pulumi.Input['DashboardDashboardMetadataSharingDetailsArgs'] sharing_details: represents sharing configuration of a dashboard
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: a set of tags assigned to the dashboard
        :param pulumi.Input[str] tiles_name_size: No documentation available
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        :param pulumi.Input[Sequence[pulumi.Input[str]]] valid_filter_keys: a set of all possible global dashboard filters that can be applied to dashboard
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        if consistent_colors is not None:
            pulumi.set(__self__, "consistent_colors", consistent_colors)
        if dynamic_filters is not None:
            pulumi.set(__self__, "dynamic_filters", dynamic_filters)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if preset is not None:
            pulumi.set(__self__, "preset", preset)
        if shared is not None:
            warnings.warn("""Please use the resource `dynatrace_dashboard_sharing` to configure share settings""", DeprecationWarning)
            pulumi.log.warn("""shared is deprecated: Please use the resource `dynatrace_dashboard_sharing` to configure share settings""")
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if sharing_details is not None:
            warnings.warn("""Please use the resource `dynatrace_dashboard_sharing` to configure share settings""", DeprecationWarning)
            pulumi.log.warn("""sharing_details is deprecated: Please use the resource `dynatrace_dashboard_sharing` to configure share settings""")
        if sharing_details is not None:
            pulumi.set(__self__, "sharing_details", sharing_details)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tiles_name_size is not None:
            pulumi.set(__self__, "tiles_name_size", tiles_name_size)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if valid_filter_keys is not None:
            pulumi.set(__self__, "valid_filter_keys", valid_filter_keys)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        the name of the dashboard
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        """
        the owner of the dashboard
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="consistentColors")
    def consistent_colors(self) -> Optional[pulumi.Input[bool]]:
        """
        The tile uses consistent colors when rendering its content
        """
        return pulumi.get(self, "consistent_colors")

    @consistent_colors.setter
    def consistent_colors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consistent_colors", value)

    @property
    @pulumi.getter(name="dynamicFilters")
    def dynamic_filters(self) -> Optional[pulumi.Input['DashboardDashboardMetadataDynamicFiltersArgs']]:
        """
        Dashboard filter configuration of a dashboard
        """
        return pulumi.get(self, "dynamic_filters")

    @dynamic_filters.setter
    def dynamic_filters(self, value: Optional[pulumi.Input['DashboardDashboardMetadataDynamicFiltersArgs']]):
        pulumi.set(self, "dynamic_filters", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['DashboardDashboardMetadataFilterArgs']]:
        """
        Global filter Settings for the Dashboard
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['DashboardDashboardMetadataFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def preset(self) -> Optional[pulumi.Input[bool]]:
        """
        the dashboard is a preset (`true`) or not (`false`). Default is `false`.
        """
        return pulumi.get(self, "preset")

    @preset.setter
    def preset(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preset", value)

    @property
    @pulumi.getter
    def shared(self) -> Optional[pulumi.Input[bool]]:
        """
        the dashboard is shared (`true`) or private (`false`)
        """
        return pulumi.get(self, "shared")

    @shared.setter
    def shared(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shared", value)

    @property
    @pulumi.getter(name="sharingDetails")
    def sharing_details(self) -> Optional[pulumi.Input['DashboardDashboardMetadataSharingDetailsArgs']]:
        """
        represents sharing configuration of a dashboard
        """
        return pulumi.get(self, "sharing_details")

    @sharing_details.setter
    def sharing_details(self, value: Optional[pulumi.Input['DashboardDashboardMetadataSharingDetailsArgs']]):
        pulumi.set(self, "sharing_details", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        a set of tags assigned to the dashboard
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tilesNameSize")
    def tiles_name_size(self) -> Optional[pulumi.Input[str]]:
        """
        No documentation available
        """
        return pulumi.get(self, "tiles_name_size")

    @tiles_name_size.setter
    def tiles_name_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tiles_name_size", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="validFilterKeys")
    def valid_filter_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        a set of all possible global dashboard filters that can be applied to dashboard
        """
        return pulumi.get(self, "valid_filter_keys")

    @valid_filter_keys.setter
    def valid_filter_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "valid_filter_keys", value)


@pulumi.input_type
class DashboardDashboardMetadataDynamicFiltersArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input[str]]],
                 generic_tag_filters: Optional[pulumi.Input['DashboardDashboardMetadataDynamicFiltersGenericTagFiltersArgs']] = None,
                 tag_suggestion_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "filters", filters)
        if generic_tag_filters is not None:
            pulumi.set(__self__, "generic_tag_filters", generic_tag_filters)
        if tag_suggestion_types is not None:
            pulumi.set(__self__, "tag_suggestion_types", tag_suggestion_types)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="genericTagFilters")
    def generic_tag_filters(self) -> Optional[pulumi.Input['DashboardDashboardMetadataDynamicFiltersGenericTagFiltersArgs']]:
        return pulumi.get(self, "generic_tag_filters")

    @generic_tag_filters.setter
    def generic_tag_filters(self, value: Optional[pulumi.Input['DashboardDashboardMetadataDynamicFiltersGenericTagFiltersArgs']]):
        pulumi.set(self, "generic_tag_filters", value)

    @property
    @pulumi.getter(name="tagSuggestionTypes")
    def tag_suggestion_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tag_suggestion_types")

    @tag_suggestion_types.setter
    def tag_suggestion_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_suggestion_types", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardDashboardMetadataDynamicFiltersGenericTagFiltersArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilterArgs']]]):
        pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilterArgs']]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilterArgs:
    def __init__(__self__, *,
                 entity_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: Optional[pulumi.Input[str]] = None,
                 suggestions_from_entity_type: Optional[pulumi.Input[str]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "entity_types", entity_types)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if suggestions_from_entity_type is not None:
            pulumi.set(__self__, "suggestions_from_entity_type", suggestions_from_entity_type)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)

    @property
    @pulumi.getter(name="entityTypes")
    def entity_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "entity_types")

    @entity_types.setter
    def entity_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "entity_types", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="suggestionsFromEntityType")
    def suggestions_from_entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suggestions_from_entity_type")

    @suggestions_from_entity_type.setter
    def suggestions_from_entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suggestions_from_entity_type", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)


@pulumi.input_type
class DashboardDashboardMetadataFilterArgs:
    def __init__(__self__, *,
                 management_zones: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDashboardMetadataFilterManagementZoneArgs']]]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if management_zones is not None:
            pulumi.set(__self__, "management_zones", management_zones)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="managementZones")
    def management_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDashboardMetadataFilterManagementZoneArgs']]]]:
        return pulumi.get(self, "management_zones")

    @management_zones.setter
    def management_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDashboardMetadataFilterManagementZoneArgs']]]]):
        pulumi.set(self, "management_zones", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardDashboardMetadataFilterManagementZoneArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardDashboardMetadataSharingDetailsArgs:
    def __init__(__self__, *,
                 link_shared: Optional[pulumi.Input[bool]] = None,
                 published: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if link_shared is not None:
            pulumi.set(__self__, "link_shared", link_shared)
        if published is not None:
            pulumi.set(__self__, "published", published)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="linkShared")
    def link_shared(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "link_shared")

    @link_shared.setter
    def link_shared(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_shared", value)

    @property
    @pulumi.getter
    def published(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "published")

    @published.setter
    def published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "published", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardMetadataArgs:
    def __init__(__self__, *,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 configuration_versions: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 current_configuration_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] cluster_version: Dynatrace server version
        :param pulumi.Input[Sequence[pulumi.Input[int]]] configuration_versions: A Sorted list of the version numbers of the configuration
        :param pulumi.Input[Sequence[pulumi.Input[str]]] current_configuration_versions: A Sorted list of the version numbers of the configuration
        """
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if configuration_versions is not None:
            pulumi.set(__self__, "configuration_versions", configuration_versions)
        if current_configuration_versions is not None:
            pulumi.set(__self__, "current_configuration_versions", current_configuration_versions)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[str]]:
        """
        Dynatrace server version
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="configurationVersions")
    def configuration_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A Sorted list of the version numbers of the configuration
        """
        return pulumi.get(self, "configuration_versions")

    @configuration_versions.setter
    def configuration_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "configuration_versions", value)

    @property
    @pulumi.getter(name="currentConfigurationVersions")
    def current_configuration_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A Sorted list of the version numbers of the configuration
        """
        return pulumi.get(self, "current_configuration_versions")

    @current_configuration_versions.setter
    def current_configuration_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "current_configuration_versions", value)


@pulumi.input_type
class DashboardSharingPermissionsArgs:
    def __init__(__self__, *,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSharingPermissionsPermissionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardSharingPermissionsPermissionArgs']]] permissions: Access permissions of the dashboard
        """
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSharingPermissionsPermissionArgs']]]]:
        """
        Access permissions of the dashboard
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSharingPermissionsPermissionArgs']]]]):
        pulumi.set(self, "permissions", value)


@pulumi.input_type
class DashboardSharingPermissionsPermissionArgs:
    def __init__(__self__, *,
                 level: pulumi.Input[str],
                 type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class DashboardSharingPublicArgs:
    def __init__(__self__, *,
                 management_zones: pulumi.Input[Sequence[pulumi.Input[str]]],
                 urls: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] management_zones: A list of management zones that can display data on the publicly shared dashboard.
        """
        pulumi.set(__self__, "management_zones", management_zones)
        if urls is not None:
            pulumi.set(__self__, "urls", urls)

    @property
    @pulumi.getter(name="managementZones")
    def management_zones(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of management zones that can display data on the publicly shared dashboard.
        """
        return pulumi.get(self, "management_zones")

    @management_zones.setter
    def management_zones(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "management_zones", value)

    @property
    @pulumi.getter
    def urls(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "urls")

    @urls.setter
    def urls(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "urls", value)


@pulumi.input_type
class DashboardTileArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 tile_type: pulumi.Input[str],
                 assigned_entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auto_refresh_disabled: Optional[pulumi.Input[bool]] = None,
                 bounds: Optional[pulumi.Input['DashboardTileBoundsArgs']] = None,
                 chart_visible: Optional[pulumi.Input[bool]] = None,
                 configured: Optional[pulumi.Input[bool]] = None,
                 custom_name: Optional[pulumi.Input[str]] = None,
                 exclude_maintenance_windows: Optional[pulumi.Input[bool]] = None,
                 filter: Optional[pulumi.Input['DashboardTileFilterArgs']] = None,
                 filter_config: Optional[pulumi.Input['DashboardTileFilterConfigArgs']] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 markdown: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 name_size: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 time_frame_shift: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 visualization: Optional[pulumi.Input[str]] = None,
                 visualization_config: Optional[pulumi.Input['DashboardTileVisualizationConfigArgs']] = None):
        """
        :param pulumi.Input[str] name: the name of the tile
        :param pulumi.Input[str] tile_type: the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
        :param pulumi.Input[Sequence[pulumi.Input[str]]] assigned_entities: The list of Dynatrace entities, assigned to the tile
        :param pulumi.Input[bool] auto_refresh_disabled: Auto Refresh is disabled (`true`)
        :param pulumi.Input['DashboardTileBoundsArgs'] bounds: the position and size of a tile
        :param pulumi.Input[bool] configured: The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
        :param pulumi.Input[str] custom_name: The name of the tile, set by user
        :param pulumi.Input[bool] exclude_maintenance_windows: Include (`false') or exclude (`true`) maintenance windows from availability calculations
        :param pulumi.Input['DashboardTileFilterArgs'] filter: is filter applied to a tile. It overrides dashboard's filter
        :param pulumi.Input['DashboardTileFilterConfigArgs'] filter_config: the position and size of a tile
        :param pulumi.Input[int] limit: The limit of the results, if not set will use the default value of the system
        :param pulumi.Input[str] markdown: The markdown-formatted content of the tile
        :param pulumi.Input[str] metric: The metric assigned to the tile
        :param pulumi.Input[str] name_size: The size of the tile name. Possible values are `small`, `medium` and `large`.
        :param pulumi.Input[str] query: A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
        :param pulumi.Input[str] time_frame_shift: The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
        :param pulumi.Input[str] type: The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        :param pulumi.Input[str] visualization: The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
        :param pulumi.Input['DashboardTileVisualizationConfigArgs'] visualization_config: Configuration of a User session query visualization tile
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tile_type", tile_type)
        if assigned_entities is not None:
            pulumi.set(__self__, "assigned_entities", assigned_entities)
        if auto_refresh_disabled is not None:
            pulumi.set(__self__, "auto_refresh_disabled", auto_refresh_disabled)
        if bounds is not None:
            pulumi.set(__self__, "bounds", bounds)
        if chart_visible is not None:
            pulumi.set(__self__, "chart_visible", chart_visible)
        if configured is not None:
            pulumi.set(__self__, "configured", configured)
        if custom_name is not None:
            pulumi.set(__self__, "custom_name", custom_name)
        if exclude_maintenance_windows is not None:
            pulumi.set(__self__, "exclude_maintenance_windows", exclude_maintenance_windows)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if filter_config is not None:
            pulumi.set(__self__, "filter_config", filter_config)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if markdown is not None:
            pulumi.set(__self__, "markdown", markdown)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name_size is not None:
            pulumi.set(__self__, "name_size", name_size)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if time_frame_shift is not None:
            pulumi.set(__self__, "time_frame_shift", time_frame_shift)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if visualization is not None:
            pulumi.set(__self__, "visualization", visualization)
        if visualization_config is not None:
            pulumi.set(__self__, "visualization_config", visualization_config)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        the name of the tile
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tileType")
    def tile_type(self) -> pulumi.Input[str]:
        """
        the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
        """
        return pulumi.get(self, "tile_type")

    @tile_type.setter
    def tile_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "tile_type", value)

    @property
    @pulumi.getter(name="assignedEntities")
    def assigned_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of Dynatrace entities, assigned to the tile
        """
        return pulumi.get(self, "assigned_entities")

    @assigned_entities.setter
    def assigned_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "assigned_entities", value)

    @property
    @pulumi.getter(name="autoRefreshDisabled")
    def auto_refresh_disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Auto Refresh is disabled (`true`)
        """
        return pulumi.get(self, "auto_refresh_disabled")

    @auto_refresh_disabled.setter
    def auto_refresh_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_refresh_disabled", value)

    @property
    @pulumi.getter
    def bounds(self) -> Optional[pulumi.Input['DashboardTileBoundsArgs']]:
        """
        the position and size of a tile
        """
        return pulumi.get(self, "bounds")

    @bounds.setter
    def bounds(self, value: Optional[pulumi.Input['DashboardTileBoundsArgs']]):
        pulumi.set(self, "bounds", value)

    @property
    @pulumi.getter(name="chartVisible")
    def chart_visible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "chart_visible")

    @chart_visible.setter
    def chart_visible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "chart_visible", value)

    @property
    @pulumi.getter
    def configured(self) -> Optional[pulumi.Input[bool]]:
        """
        The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
        """
        return pulumi.get(self, "configured")

    @configured.setter
    def configured(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "configured", value)

    @property
    @pulumi.getter(name="customName")
    def custom_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the tile, set by user
        """
        return pulumi.get(self, "custom_name")

    @custom_name.setter
    def custom_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_name", value)

    @property
    @pulumi.getter(name="excludeMaintenanceWindows")
    def exclude_maintenance_windows(self) -> Optional[pulumi.Input[bool]]:
        """
        Include (`false') or exclude (`true`) maintenance windows from availability calculations
        """
        return pulumi.get(self, "exclude_maintenance_windows")

    @exclude_maintenance_windows.setter
    def exclude_maintenance_windows(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_maintenance_windows", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['DashboardTileFilterArgs']]:
        """
        is filter applied to a tile. It overrides dashboard's filter
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['DashboardTileFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="filterConfig")
    def filter_config(self) -> Optional[pulumi.Input['DashboardTileFilterConfigArgs']]:
        """
        the position and size of a tile
        """
        return pulumi.get(self, "filter_config")

    @filter_config.setter
    def filter_config(self, value: Optional[pulumi.Input['DashboardTileFilterConfigArgs']]):
        pulumi.set(self, "filter_config", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The limit of the results, if not set will use the default value of the system
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def markdown(self) -> Optional[pulumi.Input[str]]:
        """
        The markdown-formatted content of the tile
        """
        return pulumi.get(self, "markdown")

    @markdown.setter
    def markdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "markdown", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric assigned to the tile
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="nameSize")
    def name_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the tile name. Possible values are `small`, `medium` and `large`.
        """
        return pulumi.get(self, "name_size")

    @name_size.setter
    def name_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_size", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="timeFrameShift")
    def time_frame_shift(self) -> Optional[pulumi.Input[str]]:
        """
        The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
        """
        return pulumi.get(self, "time_frame_shift")

    @time_frame_shift.setter
    def time_frame_shift(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_frame_shift", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def visualization(self) -> Optional[pulumi.Input[str]]:
        """
        The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
        """
        return pulumi.get(self, "visualization")

    @visualization.setter
    def visualization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "visualization", value)

    @property
    @pulumi.getter(name="visualizationConfig")
    def visualization_config(self) -> Optional[pulumi.Input['DashboardTileVisualizationConfigArgs']]:
        """
        Configuration of a User session query visualization tile
        """
        return pulumi.get(self, "visualization_config")

    @visualization_config.setter
    def visualization_config(self, value: Optional[pulumi.Input['DashboardTileVisualizationConfigArgs']]):
        pulumi.set(self, "visualization_config", value)


@pulumi.input_type
class DashboardTileBoundsArgs:
    def __init__(__self__, *,
                 height: pulumi.Input[int],
                 left: pulumi.Input[int],
                 top: pulumi.Input[int],
                 width: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "left", left)
        pulumi.set(__self__, "top", top)
        pulumi.set(__self__, "width", width)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def height(self) -> pulumi.Input[int]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: pulumi.Input[int]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def left(self) -> pulumi.Input[int]:
        return pulumi.get(self, "left")

    @left.setter
    def left(self, value: pulumi.Input[int]):
        pulumi.set(self, "left", value)

    @property
    @pulumi.getter
    def top(self) -> pulumi.Input[int]:
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: pulumi.Input[int]):
        pulumi.set(self, "top", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[int]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[int]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardTileFilterArgs:
    def __init__(__self__, *,
                 management_zones: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterManagementZoneArgs']]]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if management_zones is not None:
            pulumi.set(__self__, "management_zones", management_zones)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="managementZones")
    def management_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterManagementZoneArgs']]]]:
        return pulumi.get(self, "management_zones")

    @management_zones.setter
    def management_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterManagementZoneArgs']]]]):
        pulumi.set(self, "management_zones", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardTileFilterConfigArgs:
    def __init__(__self__, *,
                 custom_name: pulumi.Input[str],
                 default_name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 chart_config: Optional[pulumi.Input['DashboardTileFilterConfigChartConfigArgs']] = None,
                 filters: Optional[pulumi.Input['DashboardTileFilterConfigFiltersArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "custom_name", custom_name)
        pulumi.set(__self__, "default_name", default_name)
        pulumi.set(__self__, "type", type)
        if chart_config is not None:
            pulumi.set(__self__, "chart_config", chart_config)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="customName")
    def custom_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_name")

    @custom_name.setter
    def custom_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_name", value)

    @property
    @pulumi.getter(name="defaultName")
    def default_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default_name")

    @default_name.setter
    def default_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="chartConfig")
    def chart_config(self) -> Optional[pulumi.Input['DashboardTileFilterConfigChartConfigArgs']]:
        return pulumi.get(self, "chart_config")

    @chart_config.setter
    def chart_config(self, value: Optional[pulumi.Input['DashboardTileFilterConfigChartConfigArgs']]):
        pulumi.set(self, "chart_config", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input['DashboardTileFilterConfigFiltersArgs']]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input['DashboardTileFilterConfigFiltersArgs']]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardTileFilterConfigChartConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 axis_limits: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 left_axis_custom_unit: Optional[pulumi.Input[str]] = None,
                 legend: Optional[pulumi.Input[bool]] = None,
                 result_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigResultMetadataArgs']]]] = None,
                 right_axis_custom_unit: Optional[pulumi.Input[str]] = None,
                 series: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigSeriesArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "type", type)
        if axis_limits is not None:
            pulumi.set(__self__, "axis_limits", axis_limits)
        if left_axis_custom_unit is not None:
            pulumi.set(__self__, "left_axis_custom_unit", left_axis_custom_unit)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)
        if result_metadatas is not None:
            pulumi.set(__self__, "result_metadatas", result_metadatas)
        if right_axis_custom_unit is not None:
            pulumi.set(__self__, "right_axis_custom_unit", right_axis_custom_unit)
        if series is not None:
            pulumi.set(__self__, "series", series)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="axisLimits")
    def axis_limits(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]:
        return pulumi.get(self, "axis_limits")

    @axis_limits.setter
    def axis_limits(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]):
        pulumi.set(self, "axis_limits", value)

    @property
    @pulumi.getter(name="leftAxisCustomUnit")
    def left_axis_custom_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "left_axis_custom_unit")

    @left_axis_custom_unit.setter
    def left_axis_custom_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "left_axis_custom_unit", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="resultMetadatas")
    def result_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigResultMetadataArgs']]]]:
        return pulumi.get(self, "result_metadatas")

    @result_metadatas.setter
    def result_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigResultMetadataArgs']]]]):
        pulumi.set(self, "result_metadatas", value)

    @property
    @pulumi.getter(name="rightAxisCustomUnit")
    def right_axis_custom_unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "right_axis_custom_unit")

    @right_axis_custom_unit.setter
    def right_axis_custom_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "right_axis_custom_unit", value)

    @property
    @pulumi.getter
    def series(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigSeriesArgs']]]]:
        return pulumi.get(self, "series")

    @series.setter
    def series(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigSeriesArgs']]]]):
        pulumi.set(self, "series", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardTileFilterConfigChartConfigResultMetadataArgs:
    def __init__(__self__, *,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigResultMetadataConfigArgs']]]] = None):
        if configs is not None:
            pulumi.set(__self__, "configs", configs)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigResultMetadataConfigArgs']]]]:
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigResultMetadataConfigArgs']]]]):
        pulumi.set(self, "configs", value)


@pulumi.input_type
class DashboardTileFilterConfigChartConfigResultMetadataConfigArgs:
    def __init__(__self__, *,
                 custom_color: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[int]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if custom_color is not None:
            pulumi.set(__self__, "custom_color", custom_color)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="customColor")
    def custom_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_color")

    @custom_color.setter
    def custom_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_color", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardTileFilterConfigChartConfigSeriesArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 entity_type: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 type: pulumi.Input[str],
                 aggregation_rate: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigSeriesDimensionArgs']]]] = None,
                 percentile: Optional[pulumi.Input[int]] = None,
                 sort_ascending: Optional[pulumi.Input[bool]] = None,
                 sort_column: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "type", type)
        if aggregation_rate is not None:
            pulumi.set(__self__, "aggregation_rate", aggregation_rate)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if percentile is not None:
            pulumi.set(__self__, "percentile", percentile)
        if sort_ascending is not None:
            pulumi.set(__self__, "sort_ascending", sort_ascending)
        if sort_column is not None:
            pulumi.set(__self__, "sort_column", sort_column)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="aggregationRate")
    def aggregation_rate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation_rate")

    @aggregation_rate.setter
    def aggregation_rate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation_rate", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigSeriesDimensionArgs']]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigChartConfigSeriesDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def percentile(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "percentile")

    @percentile.setter
    def percentile(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percentile", value)

    @property
    @pulumi.getter(name="sortAscending")
    def sort_ascending(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sort_ascending")

    @sort_ascending.setter
    def sort_ascending(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sort_ascending", value)

    @property
    @pulumi.getter(name="sortColumn")
    def sort_column(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sort_column")

    @sort_column.setter
    def sort_column(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sort_column", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardTileFilterConfigChartConfigSeriesDimensionArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 entity_dimension: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "id", id)
        if entity_dimension is not None:
            pulumi.set(__self__, "entity_dimension", entity_dimension)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="entityDimension")
    def entity_dimension(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "entity_dimension")

    @entity_dimension.setter
    def entity_dimension(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "entity_dimension", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardTileFilterConfigFiltersArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigFiltersFilterArgs']]]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigFiltersFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigFiltersFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class DashboardTileFilterConfigFiltersFilterArgs:
    def __init__(__self__, *,
                 entity_type: pulumi.Input[str],
                 matches: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigFiltersFilterMatchArgs']]]] = None):
        pulumi.set(__self__, "entity_type", entity_type)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigFiltersFilterMatchArgs']]]]:
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTileFilterConfigFiltersFilterMatchArgs']]]]):
        pulumi.set(self, "matches", value)


@pulumi.input_type
class DashboardTileFilterConfigFiltersFilterMatchArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardTileFilterManagementZoneArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "id", id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardTileVisualizationConfigArgs:
    def __init__(__self__, *,
                 has_axis_bucketing: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if has_axis_bucketing is not None:
            pulumi.set(__self__, "has_axis_bucketing", has_axis_bucketing)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="hasAxisBucketing")
    def has_axis_bucketing(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_axis_bucketing")

    @has_axis_bucketing.setter
    def has_axis_bucketing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_axis_bucketing", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DashboardsAllowlistAllowlistArgs:
    def __init__(__self__, *,
                 urlpatterns: pulumi.Input[Sequence[pulumi.Input['DashboardsAllowlistAllowlistUrlpatternArgs']]]):
        pulumi.set(__self__, "urlpatterns", urlpatterns)

    @property
    @pulumi.getter
    def urlpatterns(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardsAllowlistAllowlistUrlpatternArgs']]]:
        return pulumi.get(self, "urlpatterns")

    @urlpatterns.setter
    def urlpatterns(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardsAllowlistAllowlistUrlpatternArgs']]]):
        pulumi.set(self, "urlpatterns", value)


@pulumi.input_type
class DashboardsAllowlistAllowlistUrlpatternArgs:
    def __init__(__self__, *,
                 rule: pulumi.Input[str],
                 template: pulumi.Input[str]):
        pulumi.set(__self__, "rule", rule)
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[str]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class DashboardsGeneralDefaultDashboardListArgs:
    def __init__(__self__, *,
                 default_dashboards: pulumi.Input[Sequence[pulumi.Input['DashboardsGeneralDefaultDashboardListDefaultDashboardArgs']]]):
        pulumi.set(__self__, "default_dashboards", default_dashboards)

    @property
    @pulumi.getter(name="defaultDashboards")
    def default_dashboards(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardsGeneralDefaultDashboardListDefaultDashboardArgs']]]:
        return pulumi.get(self, "default_dashboards")

    @default_dashboards.setter
    def default_dashboards(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardsGeneralDefaultDashboardListDefaultDashboardArgs']]]):
        pulumi.set(self, "default_dashboards", value)


@pulumi.input_type
class DashboardsGeneralDefaultDashboardListDefaultDashboardArgs:
    def __init__(__self__, *,
                 dashboard: pulumi.Input[str],
                 user_group: pulumi.Input[str]):
        pulumi.set(__self__, "dashboard", dashboard)
        pulumi.set(__self__, "user_group", user_group)

    @property
    @pulumi.getter
    def dashboard(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dashboard")

    @dashboard.setter
    def dashboard(self, value: pulumi.Input[str]):
        pulumi.set(self, "dashboard", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_group", value)


@pulumi.input_type
class DashboardsPresetsDashboardPresetsListArgs:
    def __init__(__self__, *,
                 dashboard_presets: pulumi.Input[Sequence[pulumi.Input['DashboardsPresetsDashboardPresetsListDashboardPresetArgs']]]):
        pulumi.set(__self__, "dashboard_presets", dashboard_presets)

    @property
    @pulumi.getter(name="dashboardPresets")
    def dashboard_presets(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardsPresetsDashboardPresetsListDashboardPresetArgs']]]:
        return pulumi.get(self, "dashboard_presets")

    @dashboard_presets.setter
    def dashboard_presets(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardsPresetsDashboardPresetsListDashboardPresetArgs']]]):
        pulumi.set(self, "dashboard_presets", value)


@pulumi.input_type
class DashboardsPresetsDashboardPresetsListDashboardPresetArgs:
    def __init__(__self__, *,
                 dashboard_preset: pulumi.Input[str],
                 user_group: pulumi.Input[str]):
        pulumi.set(__self__, "dashboard_preset", dashboard_preset)
        pulumi.set(__self__, "user_group", user_group)

    @property
    @pulumi.getter(name="dashboardPreset")
    def dashboard_preset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dashboard_preset")

    @dashboard_preset.setter
    def dashboard_preset(self, value: pulumi.Input[str]):
        pulumi.set(self, "dashboard_preset", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_group", value)


@pulumi.input_type
class DataPrivacyDataCollectionArgs:
    def __init__(__self__, *,
                 opt_in_mode_enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] opt_in_mode_enabled: With [Data-collection and opt-in mode](https://dt-url.net/7l3p0p3h) enabled, Real User Monitoring data isn't captured until dtrum.enable() is called for specific user sessions.
        """
        pulumi.set(__self__, "opt_in_mode_enabled", opt_in_mode_enabled)

    @property
    @pulumi.getter(name="optInModeEnabled")
    def opt_in_mode_enabled(self) -> pulumi.Input[bool]:
        """
        With [Data-collection and opt-in mode](https://dt-url.net/7l3p0p3h) enabled, Real User Monitoring data isn't captured until dtrum.enable() is called for specific user sessions.
        """
        return pulumi.get(self, "opt_in_mode_enabled")

    @opt_in_mode_enabled.setter
    def opt_in_mode_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "opt_in_mode_enabled", value)


@pulumi.input_type
class DataPrivacyDoNotTrackArgs:
    def __init__(__self__, *,
                 comply_with_do_not_track: pulumi.Input[bool],
                 do_not_track: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] comply_with_do_not_track: Comply with "Do Not Track" browser settings
        :param pulumi.Input[str] do_not_track: Possible Values: `Anonymous`, `Disable_rum`
        """
        pulumi.set(__self__, "comply_with_do_not_track", comply_with_do_not_track)
        if do_not_track is not None:
            pulumi.set(__self__, "do_not_track", do_not_track)

    @property
    @pulumi.getter(name="complyWithDoNotTrack")
    def comply_with_do_not_track(self) -> pulumi.Input[bool]:
        """
        Comply with "Do Not Track" browser settings
        """
        return pulumi.get(self, "comply_with_do_not_track")

    @comply_with_do_not_track.setter
    def comply_with_do_not_track(self, value: pulumi.Input[bool]):
        pulumi.set(self, "comply_with_do_not_track", value)

    @property
    @pulumi.getter(name="doNotTrack")
    def do_not_track(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Anonymous`, `Disable_rum`
        """
        return pulumi.get(self, "do_not_track")

    @do_not_track.setter
    def do_not_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "do_not_track", value)


@pulumi.input_type
class DataPrivacyMaskingArgs:
    def __init__(__self__, *,
                 ip_address_masking_enabled: pulumi.Input[bool],
                 personal_data_uri_masking_enabled: pulumi.Input[bool],
                 user_action_masking_enabled: pulumi.Input[bool],
                 ip_address_masking: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] ip_address_masking_enabled: Dynatrace captures the IP addresses of your end-users to determine the regions from which they access your application. To learn more, visit [Mask IPs and GPS coordinates](https://dt-url.net/mask-end-users-ip-addresses).. Dynatrace also captures GPS data from mobile apps that provide their users with the option of sharing geolocation data. On the server side, Dynatrace captures IP addresses to enable detailed troubleshooting for Dynatrace service calls.
        """
        pulumi.set(__self__, "ip_address_masking_enabled", ip_address_masking_enabled)
        pulumi.set(__self__, "personal_data_uri_masking_enabled", personal_data_uri_masking_enabled)
        pulumi.set(__self__, "user_action_masking_enabled", user_action_masking_enabled)
        if ip_address_masking is not None:
            pulumi.set(__self__, "ip_address_masking", ip_address_masking)

    @property
    @pulumi.getter(name="ipAddressMaskingEnabled")
    def ip_address_masking_enabled(self) -> pulumi.Input[bool]:
        """
        Dynatrace captures the IP addresses of your end-users to determine the regions from which they access your application. To learn more, visit [Mask IPs and GPS coordinates](https://dt-url.net/mask-end-users-ip-addresses).. Dynatrace also captures GPS data from mobile apps that provide their users with the option of sharing geolocation data. On the server side, Dynatrace captures IP addresses to enable detailed troubleshooting for Dynatrace service calls.
        """
        return pulumi.get(self, "ip_address_masking_enabled")

    @ip_address_masking_enabled.setter
    def ip_address_masking_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ip_address_masking_enabled", value)

    @property
    @pulumi.getter(name="personalDataUriMaskingEnabled")
    def personal_data_uri_masking_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "personal_data_uri_masking_enabled")

    @personal_data_uri_masking_enabled.setter
    def personal_data_uri_masking_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "personal_data_uri_masking_enabled", value)

    @property
    @pulumi.getter(name="userActionMaskingEnabled")
    def user_action_masking_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "user_action_masking_enabled")

    @user_action_masking_enabled.setter
    def user_action_masking_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "user_action_masking_enabled", value)

    @property
    @pulumi.getter(name="ipAddressMasking")
    def ip_address_masking(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address_masking")

    @ip_address_masking.setter
    def ip_address_masking(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address_masking", value)


@pulumi.input_type
class DataPrivacyUserTrackingArgs:
    def __init__(__self__, *,
                 persistent_cookie_enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] persistent_cookie_enabled: When enabled, Dynatrace places a [persistent cookie](https://dt-url.net/313o0p4n) on all end-user devices to identify returning users.
        """
        pulumi.set(__self__, "persistent_cookie_enabled", persistent_cookie_enabled)

    @property
    @pulumi.getter(name="persistentCookieEnabled")
    def persistent_cookie_enabled(self) -> pulumi.Input[bool]:
        """
        When enabled, Dynatrace places a [persistent cookie](https://dt-url.net/313o0p4n) on all end-user devices to identify returning users.
        """
        return pulumi.get(self, "persistent_cookie_enabled")

    @persistent_cookie_enabled.setter
    def persistent_cookie_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "persistent_cookie_enabled", value)


@pulumi.input_type
class DatabaseAnomaliesDbConnectFailuresArgs:
    def __init__(__self__, *,
                 connection_fails_count: Optional[pulumi.Input[int]] = None,
                 eval_period: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] connection_fails_count: Number of failed database connections during any **eval_period** minutes period to trigger an alert
        :param pulumi.Input[int] eval_period: The *X* minutes time period during which the **connection*fails*count** is evaluated
        """
        if connection_fails_count is not None:
            pulumi.set(__self__, "connection_fails_count", connection_fails_count)
        if eval_period is not None:
            pulumi.set(__self__, "eval_period", eval_period)

    @property
    @pulumi.getter(name="connectionFailsCount")
    def connection_fails_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of failed database connections during any **eval_period** minutes period to trigger an alert
        """
        return pulumi.get(self, "connection_fails_count")

    @connection_fails_count.setter
    def connection_fails_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_fails_count", value)

    @property
    @pulumi.getter(name="evalPeriod")
    def eval_period(self) -> Optional[pulumi.Input[int]]:
        """
        The *X* minutes time period during which the **connection*fails*count** is evaluated
        """
        return pulumi.get(self, "eval_period")

    @eval_period.setter
    def eval_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eval_period", value)


@pulumi.input_type
class DatabaseAnomaliesFailureRateArgs:
    def __init__(__self__, *,
                 auto: Optional[pulumi.Input['DatabaseAnomaliesFailureRateAutoArgs']] = None,
                 thresholds: Optional[pulumi.Input['DatabaseAnomaliesFailureRateThresholdsArgs']] = None):
        """
        :param pulumi.Input['DatabaseAnomaliesFailureRateAutoArgs'] auto: Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
        :param pulumi.Input['DatabaseAnomaliesFailureRateThresholdsArgs'] thresholds: Fixed thresholds for failure rate increase detection
        """
        if auto is not None:
            pulumi.set(__self__, "auto", auto)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def auto(self) -> Optional[pulumi.Input['DatabaseAnomaliesFailureRateAutoArgs']]:
        """
        Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
        """
        return pulumi.get(self, "auto")

    @auto.setter
    def auto(self, value: Optional[pulumi.Input['DatabaseAnomaliesFailureRateAutoArgs']]):
        pulumi.set(self, "auto", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['DatabaseAnomaliesFailureRateThresholdsArgs']]:
        """
        Fixed thresholds for failure rate increase detection
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['DatabaseAnomaliesFailureRateThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class DatabaseAnomaliesFailureRateAutoArgs:
    def __init__(__self__, *,
                 absolute: pulumi.Input[int],
                 relative: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "absolute", absolute)
        pulumi.set(__self__, "relative", relative)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def absolute(self) -> pulumi.Input[int]:
        return pulumi.get(self, "absolute")

    @absolute.setter
    def absolute(self, value: pulumi.Input[int]):
        pulumi.set(self, "absolute", value)

    @property
    @pulumi.getter
    def relative(self) -> pulumi.Input[int]:
        return pulumi.get(self, "relative")

    @relative.setter
    def relative(self, value: pulumi.Input[int]):
        pulumi.set(self, "relative", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DatabaseAnomaliesFailureRateThresholdsArgs:
    def __init__(__self__, *,
                 sensitivity: pulumi.Input[str],
                 threshold: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sensitivity", sensitivity)
        pulumi.set(__self__, "threshold", threshold)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DatabaseAnomaliesLoadArgs:
    def __init__(__self__, *,
                 drops: Optional[pulumi.Input['DatabaseAnomaliesLoadDropsArgs']] = None,
                 spikes: Optional[pulumi.Input['DatabaseAnomaliesLoadSpikesArgs']] = None):
        """
        :param pulumi.Input['DatabaseAnomaliesLoadDropsArgs'] drops: The configuration of traffic drops detection
        :param pulumi.Input['DatabaseAnomaliesLoadSpikesArgs'] spikes: The configuration of traffic spikes detection
        """
        if drops is not None:
            pulumi.set(__self__, "drops", drops)
        if spikes is not None:
            pulumi.set(__self__, "spikes", spikes)

    @property
    @pulumi.getter
    def drops(self) -> Optional[pulumi.Input['DatabaseAnomaliesLoadDropsArgs']]:
        """
        The configuration of traffic drops detection
        """
        return pulumi.get(self, "drops")

    @drops.setter
    def drops(self, value: Optional[pulumi.Input['DatabaseAnomaliesLoadDropsArgs']]):
        pulumi.set(self, "drops", value)

    @property
    @pulumi.getter
    def spikes(self) -> Optional[pulumi.Input['DatabaseAnomaliesLoadSpikesArgs']]:
        """
        The configuration of traffic spikes detection
        """
        return pulumi.get(self, "spikes")

    @spikes.setter
    def spikes(self, value: Optional[pulumi.Input['DatabaseAnomaliesLoadSpikesArgs']]):
        pulumi.set(self, "spikes", value)


@pulumi.input_type
class DatabaseAnomaliesLoadDropsArgs:
    def __init__(__self__, *,
                 minutes: Optional[pulumi.Input[int]] = None,
                 percent: Optional[pulumi.Input[int]] = None):
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percent", value)


@pulumi.input_type
class DatabaseAnomaliesLoadSpikesArgs:
    def __init__(__self__, *,
                 minutes: Optional[pulumi.Input[int]] = None,
                 percent: Optional[pulumi.Input[int]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percent", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DatabaseAnomaliesResponseTimeArgs:
    def __init__(__self__, *,
                 auto: Optional[pulumi.Input['DatabaseAnomaliesResponseTimeAutoArgs']] = None,
                 thresholds: Optional[pulumi.Input['DatabaseAnomaliesResponseTimeThresholdsArgs']] = None):
        """
        :param pulumi.Input['DatabaseAnomaliesResponseTimeAutoArgs'] auto: Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
        :param pulumi.Input['DatabaseAnomaliesResponseTimeThresholdsArgs'] thresholds: Fixed thresholds for response time degradation detection
        """
        if auto is not None:
            pulumi.set(__self__, "auto", auto)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def auto(self) -> Optional[pulumi.Input['DatabaseAnomaliesResponseTimeAutoArgs']]:
        """
        Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
        """
        return pulumi.get(self, "auto")

    @auto.setter
    def auto(self, value: Optional[pulumi.Input['DatabaseAnomaliesResponseTimeAutoArgs']]):
        pulumi.set(self, "auto", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['DatabaseAnomaliesResponseTimeThresholdsArgs']]:
        """
        Fixed thresholds for response time degradation detection
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['DatabaseAnomaliesResponseTimeThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class DatabaseAnomaliesResponseTimeAutoArgs:
    def __init__(__self__, *,
                 load: pulumi.Input[str],
                 milliseconds: pulumi.Input[int],
                 percent: pulumi.Input[int],
                 slowest_milliseconds: pulumi.Input[int],
                 slowest_percent: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] load: Configuration for anomalies regarding load drops and spikes
        """
        pulumi.set(__self__, "load", load)
        pulumi.set(__self__, "milliseconds", milliseconds)
        pulumi.set(__self__, "percent", percent)
        pulumi.set(__self__, "slowest_milliseconds", slowest_milliseconds)
        pulumi.set(__self__, "slowest_percent", slowest_percent)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def load(self) -> pulumi.Input[str]:
        """
        Configuration for anomalies regarding load drops and spikes
        """
        return pulumi.get(self, "load")

    @load.setter
    def load(self, value: pulumi.Input[str]):
        pulumi.set(self, "load", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def percent(self) -> pulumi.Input[int]:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: pulumi.Input[int]):
        pulumi.set(self, "percent", value)

    @property
    @pulumi.getter(name="slowestMilliseconds")
    def slowest_milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "slowest_milliseconds")

    @slowest_milliseconds.setter
    def slowest_milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "slowest_milliseconds", value)

    @property
    @pulumi.getter(name="slowestPercent")
    def slowest_percent(self) -> pulumi.Input[int]:
        return pulumi.get(self, "slowest_percent")

    @slowest_percent.setter
    def slowest_percent(self, value: pulumi.Input[int]):
        pulumi.set(self, "slowest_percent", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DatabaseAnomaliesResponseTimeThresholdsArgs:
    def __init__(__self__, *,
                 load: pulumi.Input[str],
                 milliseconds: pulumi.Input[int],
                 sensitivity: pulumi.Input[str],
                 slowest_milliseconds: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] load: Configuration for anomalies regarding load drops and spikes
        """
        pulumi.set(__self__, "load", load)
        pulumi.set(__self__, "milliseconds", milliseconds)
        pulumi.set(__self__, "sensitivity", sensitivity)
        pulumi.set(__self__, "slowest_milliseconds", slowest_milliseconds)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def load(self) -> pulumi.Input[str]:
        """
        Configuration for anomalies regarding load drops and spikes
        """
        return pulumi.get(self, "load")

    @load.setter
    def load(self, value: pulumi.Input[str]):
        pulumi.set(self, "load", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter(name="slowestMilliseconds")
    def slowest_milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "slowest_milliseconds")

    @slowest_milliseconds.setter
    def slowest_milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "slowest_milliseconds", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class DatabaseAnomaliesV2DatabaseConnectionsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 max_failed_connects: Optional[pulumi.Input[int]] = None,
                 time_period: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Detect failed database connects
        :param pulumi.Input[int] max_failed_connects: Threshold
        :param pulumi.Input[int] time_period: Time span
        """
        pulumi.set(__self__, "enabled", enabled)
        if max_failed_connects is not None:
            pulumi.set(__self__, "max_failed_connects", max_failed_connects)
        if time_period is not None:
            pulumi.set(__self__, "time_period", time_period)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect failed database connects
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxFailedConnects")
    def max_failed_connects(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold
        """
        return pulumi.get(self, "max_failed_connects")

    @max_failed_connects.setter
    def max_failed_connects(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_failed_connects", value)

    @property
    @pulumi.getter(name="timePeriod")
    def time_period(self) -> Optional[pulumi.Input[int]]:
        """
        Time span
        """
        return pulumi.get(self, "time_period")

    @time_period.setter
    def time_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_period", value)


@pulumi.input_type
class DatabaseAnomaliesV2FailureRateArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 auto_detection: Optional[pulumi.Input['DatabaseAnomaliesV2FailureRateAutoDetectionArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None,
                 fixed_detection: Optional[pulumi.Input['DatabaseAnomaliesV2FailureRateFixedDetectionArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Detect increases in failure rate
        :param pulumi.Input['DatabaseAnomaliesV2FailureRateAutoDetectionArgs'] auto_detection: Alert if the percentage of failing service calls increases by **both** the absolute and relative thresholds:
        :param pulumi.Input[str] detection_mode: Detection mode for increases in failure rate
        :param pulumi.Input['DatabaseAnomaliesV2FailureRateFixedDetectionArgs'] fixed_detection: Alert if a given failure rate is exceeded during any 5-minute-period
        """
        pulumi.set(__self__, "enabled", enabled)
        if auto_detection is not None:
            pulumi.set(__self__, "auto_detection", auto_detection)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if fixed_detection is not None:
            pulumi.set(__self__, "fixed_detection", fixed_detection)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect increases in failure rate
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="autoDetection")
    def auto_detection(self) -> Optional[pulumi.Input['DatabaseAnomaliesV2FailureRateAutoDetectionArgs']]:
        """
        Alert if the percentage of failing service calls increases by **both** the absolute and relative thresholds:
        """
        return pulumi.get(self, "auto_detection")

    @auto_detection.setter
    def auto_detection(self, value: Optional[pulumi.Input['DatabaseAnomaliesV2FailureRateAutoDetectionArgs']]):
        pulumi.set(self, "auto_detection", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Detection mode for increases in failure rate
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)

    @property
    @pulumi.getter(name="fixedDetection")
    def fixed_detection(self) -> Optional[pulumi.Input['DatabaseAnomaliesV2FailureRateFixedDetectionArgs']]:
        """
        Alert if a given failure rate is exceeded during any 5-minute-period
        """
        return pulumi.get(self, "fixed_detection")

    @fixed_detection.setter
    def fixed_detection(self, value: Optional[pulumi.Input['DatabaseAnomaliesV2FailureRateFixedDetectionArgs']]):
        pulumi.set(self, "fixed_detection", value)


@pulumi.input_type
class DatabaseAnomaliesV2FailureRateAutoDetectionArgs:
    def __init__(__self__, *,
                 absolute_increase: pulumi.Input[float],
                 over_alerting_protection: pulumi.Input['DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtectionArgs'],
                 relative_increase: pulumi.Input[float]):
        pulumi.set(__self__, "absolute_increase", absolute_increase)
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "relative_increase", relative_increase)

    @property
    @pulumi.getter(name="absoluteIncrease")
    def absolute_increase(self) -> pulumi.Input[float]:
        return pulumi.get(self, "absolute_increase")

    @absolute_increase.setter
    def absolute_increase(self, value: pulumi.Input[float]):
        pulumi.set(self, "absolute_increase", value)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter(name="relativeIncrease")
    def relative_increase(self) -> pulumi.Input[float]:
        return pulumi.get(self, "relative_increase")

    @relative_increase.setter
    def relative_increase(self, value: pulumi.Input[float]):
        pulumi.set(self, "relative_increase", value)


@pulumi.input_type
class DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 minutes_abnormal_state: pulumi.Input[int],
                 requests_per_minute: pulumi.Input[float]):
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)
        pulumi.set(__self__, "requests_per_minute", requests_per_minute)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[int]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes_abnormal_state", value)

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "requests_per_minute")

    @requests_per_minute.setter
    def requests_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "requests_per_minute", value)


@pulumi.input_type
class DatabaseAnomaliesV2FailureRateFixedDetectionArgs:
    def __init__(__self__, *,
                 over_alerting_protection: pulumi.Input['DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtectionArgs'],
                 sensitivity: pulumi.Input[str],
                 threshold: pulumi.Input[float]):
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "sensitivity", sensitivity)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 minutes_abnormal_state: pulumi.Input[int],
                 requests_per_minute: pulumi.Input[float]):
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)
        pulumi.set(__self__, "requests_per_minute", requests_per_minute)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[int]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes_abnormal_state", value)

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "requests_per_minute")

    @requests_per_minute.setter
    def requests_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "requests_per_minute", value)


@pulumi.input_type
class DatabaseAnomaliesV2LoadDropsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 load_drop_percent: Optional[pulumi.Input[float]] = None,
                 minutes_abnormal_state: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Detect service load drops
        :param pulumi.Input[float] load_drop_percent: Threshold
        :param pulumi.Input[int] minutes_abnormal_state: Time span
        """
        pulumi.set(__self__, "enabled", enabled)
        if load_drop_percent is not None:
            pulumi.set(__self__, "load_drop_percent", load_drop_percent)
        if minutes_abnormal_state is not None:
            pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect service load drops
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="loadDropPercent")
    def load_drop_percent(self) -> Optional[pulumi.Input[float]]:
        """
        Threshold
        """
        return pulumi.get(self, "load_drop_percent")

    @load_drop_percent.setter
    def load_drop_percent(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "load_drop_percent", value)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> Optional[pulumi.Input[int]]:
        """
        Time span
        """
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes_abnormal_state", value)


@pulumi.input_type
class DatabaseAnomaliesV2LoadSpikesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 load_spike_percent: Optional[pulumi.Input[float]] = None,
                 minutes_abnormal_state: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Detect service load spikes
        :param pulumi.Input[float] load_spike_percent: Threshold
        :param pulumi.Input[int] minutes_abnormal_state: Time span
        """
        pulumi.set(__self__, "enabled", enabled)
        if load_spike_percent is not None:
            pulumi.set(__self__, "load_spike_percent", load_spike_percent)
        if minutes_abnormal_state is not None:
            pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect service load spikes
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="loadSpikePercent")
    def load_spike_percent(self) -> Optional[pulumi.Input[float]]:
        """
        Threshold
        """
        return pulumi.get(self, "load_spike_percent")

    @load_spike_percent.setter
    def load_spike_percent(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "load_spike_percent", value)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> Optional[pulumi.Input[int]]:
        """
        Time span
        """
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes_abnormal_state", value)


@pulumi.input_type
class DatabaseAnomaliesV2ResponseTimeArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 auto_detection: Optional[pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None,
                 fixed_detection: Optional[pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Detect response time degradations
        :param pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionArgs'] auto_detection: no documentation available
        :param pulumi.Input[str] detection_mode: Detection mode for response time degradations
        :param pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionArgs'] fixed_detection: no documentation available
        """
        pulumi.set(__self__, "enabled", enabled)
        if auto_detection is not None:
            pulumi.set(__self__, "auto_detection", auto_detection)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if fixed_detection is not None:
            pulumi.set(__self__, "fixed_detection", fixed_detection)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect response time degradations
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="autoDetection")
    def auto_detection(self) -> Optional[pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "auto_detection")

    @auto_detection.setter
    def auto_detection(self, value: Optional[pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionArgs']]):
        pulumi.set(self, "auto_detection", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Detection mode for response time degradations
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)

    @property
    @pulumi.getter(name="fixedDetection")
    def fixed_detection(self) -> Optional[pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "fixed_detection")

    @fixed_detection.setter
    def fixed_detection(self, value: Optional[pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionArgs']]):
        pulumi.set(self, "fixed_detection", value)


@pulumi.input_type
class DatabaseAnomaliesV2ResponseTimeAutoDetectionArgs:
    def __init__(__self__, *,
                 over_alerting_protection: pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtectionArgs'],
                 response_time_all: pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAllArgs'],
                 response_time_slowest: pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowestArgs']):
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "response_time_all", response_time_all)
        pulumi.set(__self__, "response_time_slowest", response_time_slowest)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter(name="responseTimeAll")
    def response_time_all(self) -> pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAllArgs']:
        return pulumi.get(self, "response_time_all")

    @response_time_all.setter
    def response_time_all(self, value: pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAllArgs']):
        pulumi.set(self, "response_time_all", value)

    @property
    @pulumi.getter(name="responseTimeSlowest")
    def response_time_slowest(self) -> pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowestArgs']:
        return pulumi.get(self, "response_time_slowest")

    @response_time_slowest.setter
    def response_time_slowest(self, value: pulumi.Input['DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowestArgs']):
        pulumi.set(self, "response_time_slowest", value)


@pulumi.input_type
class DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 minutes_abnormal_state: pulumi.Input[int],
                 requests_per_minute: pulumi.Input[float]):
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)
        pulumi.set(__self__, "requests_per_minute", requests_per_minute)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[int]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes_abnormal_state", value)

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "requests_per_minute")

    @requests_per_minute.setter
    def requests_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "requests_per_minute", value)


@pulumi.input_type
class DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAllArgs:
    def __init__(__self__, *,
                 degradation_milliseconds: pulumi.Input[float],
                 degradation_percent: pulumi.Input[float]):
        pulumi.set(__self__, "degradation_milliseconds", degradation_milliseconds)
        pulumi.set(__self__, "degradation_percent", degradation_percent)

    @property
    @pulumi.getter(name="degradationMilliseconds")
    def degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "degradation_milliseconds")

    @degradation_milliseconds.setter
    def degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "degradation_milliseconds", value)

    @property
    @pulumi.getter(name="degradationPercent")
    def degradation_percent(self) -> pulumi.Input[float]:
        return pulumi.get(self, "degradation_percent")

    @degradation_percent.setter
    def degradation_percent(self, value: pulumi.Input[float]):
        pulumi.set(self, "degradation_percent", value)


@pulumi.input_type
class DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowestArgs:
    def __init__(__self__, *,
                 slowest_degradation_milliseconds: pulumi.Input[float],
                 slowest_degradation_percent: pulumi.Input[float]):
        pulumi.set(__self__, "slowest_degradation_milliseconds", slowest_degradation_milliseconds)
        pulumi.set(__self__, "slowest_degradation_percent", slowest_degradation_percent)

    @property
    @pulumi.getter(name="slowestDegradationMilliseconds")
    def slowest_degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowest_degradation_milliseconds")

    @slowest_degradation_milliseconds.setter
    def slowest_degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowest_degradation_milliseconds", value)

    @property
    @pulumi.getter(name="slowestDegradationPercent")
    def slowest_degradation_percent(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowest_degradation_percent")

    @slowest_degradation_percent.setter
    def slowest_degradation_percent(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowest_degradation_percent", value)


@pulumi.input_type
class DatabaseAnomaliesV2ResponseTimeFixedDetectionArgs:
    def __init__(__self__, *,
                 over_alerting_protection: pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtectionArgs'],
                 response_time_all: pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAllArgs'],
                 response_time_slowest: pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowestArgs'],
                 sensitivity: pulumi.Input[str]):
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "response_time_all", response_time_all)
        pulumi.set(__self__, "response_time_slowest", response_time_slowest)
        pulumi.set(__self__, "sensitivity", sensitivity)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter(name="responseTimeAll")
    def response_time_all(self) -> pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAllArgs']:
        return pulumi.get(self, "response_time_all")

    @response_time_all.setter
    def response_time_all(self, value: pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAllArgs']):
        pulumi.set(self, "response_time_all", value)

    @property
    @pulumi.getter(name="responseTimeSlowest")
    def response_time_slowest(self) -> pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowestArgs']:
        return pulumi.get(self, "response_time_slowest")

    @response_time_slowest.setter
    def response_time_slowest(self, value: pulumi.Input['DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowestArgs']):
        pulumi.set(self, "response_time_slowest", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)


@pulumi.input_type
class DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 minutes_abnormal_state: pulumi.Input[int],
                 requests_per_minute: pulumi.Input[float]):
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)
        pulumi.set(__self__, "requests_per_minute", requests_per_minute)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[int]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes_abnormal_state", value)

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "requests_per_minute")

    @requests_per_minute.setter
    def requests_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "requests_per_minute", value)


@pulumi.input_type
class DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAllArgs:
    def __init__(__self__, *,
                 degradation_milliseconds: pulumi.Input[float]):
        pulumi.set(__self__, "degradation_milliseconds", degradation_milliseconds)

    @property
    @pulumi.getter(name="degradationMilliseconds")
    def degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "degradation_milliseconds")

    @degradation_milliseconds.setter
    def degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "degradation_milliseconds", value)


@pulumi.input_type
class DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowestArgs:
    def __init__(__self__, *,
                 slowest_degradation_milliseconds: pulumi.Input[float]):
        pulumi.set(__self__, "slowest_degradation_milliseconds", slowest_degradation_milliseconds)

    @property
    @pulumi.getter(name="slowestDegradationMilliseconds")
    def slowest_degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowest_degradation_milliseconds")

    @slowest_degradation_milliseconds.setter
    def slowest_degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowest_degradation_milliseconds", value)


@pulumi.input_type
class DduPoolEventsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Is the limit configuration enabled
        :param pulumi.Input[str] type: Type of the limit applied: MONTHLY or ANNUAL
        :param pulumi.Input[int] value: Value of the DDU limit applied for provided timerange
        """
        pulumi.set(__self__, "enabled", enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Is the limit configuration enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the limit applied: MONTHLY or ANNUAL
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        Value of the DDU limit applied for provided timerange
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DduPoolLogMonitoringArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Is the limit configuration enabled
        :param pulumi.Input[str] type: Type of the limit applied: MONTHLY or ANNUAL
        :param pulumi.Input[int] value: Value of the DDU limit applied for provided timerange
        """
        pulumi.set(__self__, "enabled", enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Is the limit configuration enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the limit applied: MONTHLY or ANNUAL
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        Value of the DDU limit applied for provided timerange
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DduPoolMetricsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Is the limit configuration enabled
        :param pulumi.Input[str] type: Type of the limit applied: MONTHLY or ANNUAL
        :param pulumi.Input[int] value: Value of the DDU limit applied for provided timerange
        """
        pulumi.set(__self__, "enabled", enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Is the limit configuration enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the limit applied: MONTHLY or ANNUAL
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        Value of the DDU limit applied for provided timerange
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DduPoolServerlessArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Is the limit configuration enabled
        :param pulumi.Input[str] type: Type of the limit applied: MONTHLY or ANNUAL
        :param pulumi.Input[int] value: Value of the DDU limit applied for provided timerange
        """
        pulumi.set(__self__, "enabled", enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Is the limit configuration enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the limit applied: MONTHLY or ANNUAL
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        Value of the DDU limit applied for provided timerange
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DduPoolTracesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Is the limit configuration enabled
        :param pulumi.Input[str] type: Type of the limit applied: MONTHLY or ANNUAL
        :param pulumi.Input[int] value: Value of the DDU limit applied for provided timerange
        """
        pulumi.set(__self__, "enabled", enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Is the limit configuration enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the limit applied: MONTHLY or ANNUAL
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        Value of the DDU limit applied for provided timerange
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DeclarativeGroupingDetectionArgs:
    def __init__(__self__, *,
                 process_definitions: pulumi.Input[Sequence[pulumi.Input['DeclarativeGroupingDetectionProcessDefinitionArgs']]]):
        pulumi.set(__self__, "process_definitions", process_definitions)

    @property
    @pulumi.getter(name="processDefinitions")
    def process_definitions(self) -> pulumi.Input[Sequence[pulumi.Input['DeclarativeGroupingDetectionProcessDefinitionArgs']]]:
        return pulumi.get(self, "process_definitions")

    @process_definitions.setter
    def process_definitions(self, value: pulumi.Input[Sequence[pulumi.Input['DeclarativeGroupingDetectionProcessDefinitionArgs']]]):
        pulumi.set(self, "process_definitions", value)


@pulumi.input_type
class DeclarativeGroupingDetectionProcessDefinitionArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 process_group_name: pulumi.Input[str],
                 report: pulumi.Input[str],
                 rules: Optional[pulumi.Input['DeclarativeGroupingDetectionProcessDefinitionRulesArgs']] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "process_group_name", process_group_name)
        pulumi.set(__self__, "report", report)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="processGroupName")
    def process_group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "process_group_name")

    @process_group_name.setter
    def process_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "process_group_name", value)

    @property
    @pulumi.getter
    def report(self) -> pulumi.Input[str]:
        return pulumi.get(self, "report")

    @report.setter
    def report(self, value: pulumi.Input[str]):
        pulumi.set(self, "report", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input['DeclarativeGroupingDetectionProcessDefinitionRulesArgs']]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input['DeclarativeGroupingDetectionProcessDefinitionRulesArgs']]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class DeclarativeGroupingDetectionProcessDefinitionRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['DeclarativeGroupingDetectionProcessDefinitionRulesRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['DeclarativeGroupingDetectionProcessDefinitionRulesRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['DeclarativeGroupingDetectionProcessDefinitionRulesRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class DeclarativeGroupingDetectionProcessDefinitionRulesRuleArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[str],
                 property: pulumi.Input[str]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class DiskAnomaliesDiskNameArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] operator: Possible values are: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS` and `STARTS_WITH`
        :param pulumi.Input[str] value: Value to compare to
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Possible values are: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS` and `STARTS_WITH`
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value to compare to
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DiskAnomaliesTagsArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['DiskAnomaliesTagsFilterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DiskAnomaliesTagsFilterArgs']]] filters: A Tag Filter
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DiskAnomaliesTagsFilterArgs']]]]:
        """
        A Tag Filter
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DiskAnomaliesTagsFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class DiskAnomaliesTagsFilterArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DiskAnomaliesV2DiskArgs:
    def __init__(__self__, *,
                 disk_low_inodes_detection: pulumi.Input['DiskAnomaliesV2DiskDiskLowInodesDetectionArgs'],
                 disk_low_space_detection: pulumi.Input['DiskAnomaliesV2DiskDiskLowSpaceDetectionArgs'],
                 disk_slow_writes_and_reads_detection: pulumi.Input['DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionArgs']):
        """
        :param pulumi.Input['DiskAnomaliesV2DiskDiskLowInodesDetectionArgs'] disk_low_inodes_detection: no documentation available
        :param pulumi.Input['DiskAnomaliesV2DiskDiskLowSpaceDetectionArgs'] disk_low_space_detection: no documentation available
        :param pulumi.Input['DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionArgs'] disk_slow_writes_and_reads_detection: no documentation available
        """
        pulumi.set(__self__, "disk_low_inodes_detection", disk_low_inodes_detection)
        pulumi.set(__self__, "disk_low_space_detection", disk_low_space_detection)
        pulumi.set(__self__, "disk_slow_writes_and_reads_detection", disk_slow_writes_and_reads_detection)

    @property
    @pulumi.getter(name="diskLowInodesDetection")
    def disk_low_inodes_detection(self) -> pulumi.Input['DiskAnomaliesV2DiskDiskLowInodesDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "disk_low_inodes_detection")

    @disk_low_inodes_detection.setter
    def disk_low_inodes_detection(self, value: pulumi.Input['DiskAnomaliesV2DiskDiskLowInodesDetectionArgs']):
        pulumi.set(self, "disk_low_inodes_detection", value)

    @property
    @pulumi.getter(name="diskLowSpaceDetection")
    def disk_low_space_detection(self) -> pulumi.Input['DiskAnomaliesV2DiskDiskLowSpaceDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "disk_low_space_detection")

    @disk_low_space_detection.setter
    def disk_low_space_detection(self, value: pulumi.Input['DiskAnomaliesV2DiskDiskLowSpaceDetectionArgs']):
        pulumi.set(self, "disk_low_space_detection", value)

    @property
    @pulumi.getter(name="diskSlowWritesAndReadsDetection")
    def disk_slow_writes_and_reads_detection(self) -> pulumi.Input['DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "disk_slow_writes_and_reads_detection")

    @disk_slow_writes_and_reads_detection.setter
    def disk_slow_writes_and_reads_detection(self, value: pulumi.Input['DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionArgs']):
        pulumi.set(self, "disk_slow_writes_and_reads_detection", value)


@pulumi.input_type
class DiskAnomaliesV2DiskDiskLowInodesDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 free_inodes_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "free_inodes_percentage", free_inodes_percentage)

    @property
    @pulumi.getter(name="freeInodesPercentage")
    def free_inodes_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "free_inodes_percentage")

    @free_inodes_percentage.setter
    def free_inodes_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "free_inodes_percentage", value)


@pulumi.input_type
class DiskAnomaliesV2DiskDiskLowSpaceDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 free_space_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "free_space_percentage", free_space_percentage)

    @property
    @pulumi.getter(name="freeSpacePercentage")
    def free_space_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "free_space_percentage")

    @free_space_percentage.setter
    def free_space_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "free_space_percentage", value)


@pulumi.input_type
class DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 write_and_read_time: pulumi.Input[int]):
        pulumi.set(__self__, "write_and_read_time", write_and_read_time)

    @property
    @pulumi.getter(name="writeAndReadTime")
    def write_and_read_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "write_and_read_time")

    @write_and_read_time.setter
    def write_and_read_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "write_and_read_time", value)


@pulumi.input_type
class DiskAnomalyRulesDiskNameFilterArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] operator: Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS`, `STARTS_WITH`
        :param pulumi.Input[str] value: Matching text
        """
        pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS`, `STARTS_WITH`
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Matching text
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DiskAnomalyRulesSampleLimitArgs:
    def __init__(__self__, *,
                 samples: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        """
        :param pulumi.Input[int] samples: .. within the last
        :param pulumi.Input[int] violating_samples: Minimum number of violating samples
        """
        pulumi.set(__self__, "samples", samples)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter
    def samples(self) -> pulumi.Input[int]:
        """
        .. within the last
        """
        return pulumi.get(self, "samples")

    @samples.setter
    def samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "samples", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        """
        Minimum number of violating samples
        """
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class DiskOptionsExclusionsArgs:
    def __init__(__self__, *,
                 exclusions: pulumi.Input[Sequence[pulumi.Input['DiskOptionsExclusionsExclusionArgs']]]):
        pulumi.set(__self__, "exclusions", exclusions)

    @property
    @pulumi.getter
    def exclusions(self) -> pulumi.Input[Sequence[pulumi.Input['DiskOptionsExclusionsExclusionArgs']]]:
        return pulumi.get(self, "exclusions")

    @exclusions.setter
    def exclusions(self, value: pulumi.Input[Sequence[pulumi.Input['DiskOptionsExclusionsExclusionArgs']]]):
        pulumi.set(self, "exclusions", value)


@pulumi.input_type
class DiskOptionsExclusionsExclusionArgs:
    def __init__(__self__, *,
                 os: pulumi.Input[str],
                 filesystem: Optional[pulumi.Input[str]] = None,
                 mountpoint: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "os", os)
        if filesystem is not None:
            pulumi.set(__self__, "filesystem", filesystem)
        if mountpoint is not None:
            pulumi.set(__self__, "mountpoint", mountpoint)

    @property
    @pulumi.getter
    def os(self) -> pulumi.Input[str]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: pulumi.Input[str]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter
    def filesystem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filesystem")

    @filesystem.setter
    def filesystem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filesystem", value)

    @property
    @pulumi.getter
    def mountpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mountpoint")

    @mountpoint.setter
    def mountpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mountpoint", value)


@pulumi.input_type
class DiskSpecificAnomaliesV2DiskLowInodesDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Detect low inodes number available
        :param pulumi.Input['DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholdsArgs'] custom_thresholds: no documentation available
        :param pulumi.Input[str] detection_mode: Detection mode for low inodes number available
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect low inodes number available
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholdsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Detection mode for low inodes number available
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 free_inodes_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "free_inodes_percentage", free_inodes_percentage)

    @property
    @pulumi.getter(name="freeInodesPercentage")
    def free_inodes_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "free_inodes_percentage")

    @free_inodes_percentage.setter
    def free_inodes_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "free_inodes_percentage", value)


@pulumi.input_type
class DiskSpecificAnomaliesV2DiskLowSpaceDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Detect low disk space
        :param pulumi.Input['DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholdsArgs'] custom_thresholds: no documentation available
        :param pulumi.Input[str] detection_mode: Detection mode for low disk space
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect low disk space
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholdsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Detection mode for low disk space
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 free_space_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "free_space_percentage", free_space_percentage)

    @property
    @pulumi.getter(name="freeSpacePercentage")
    def free_space_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "free_space_percentage")

    @free_space_percentage.setter
    def free_space_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "free_space_percentage", value)


@pulumi.input_type
class DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Detect slow-running disks
        :param pulumi.Input['DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs'] custom_thresholds: no documentation available
        :param pulumi.Input[str] detection_mode: Detection mode for slow running disks
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect slow-running disks
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Detection mode for slow running disks
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 write_and_read_time: pulumi.Input[int]):
        pulumi.set(__self__, "write_and_read_time", write_and_read_time)

    @property
    @pulumi.getter(name="writeAndReadTime")
    def write_and_read_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "write_and_read_time")

    @write_and_read_time.setter
    def write_and_read_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "write_and_read_time", value)


@pulumi.input_type
class EnvironmentQuotasArgs:
    def __init__(__self__, *,
                 ddus: Optional[pulumi.Input['EnvironmentQuotasDdusArgs']] = None,
                 dem_units: Optional[pulumi.Input['EnvironmentQuotasDemUnitsArgs']] = None,
                 host_units: Optional[pulumi.Input[int]] = None,
                 logs: Optional[pulumi.Input['EnvironmentQuotasLogsArgs']] = None,
                 synthetic: Optional[pulumi.Input['EnvironmentQuotasSyntheticArgs']] = None,
                 user_sessions: Optional[pulumi.Input['EnvironmentQuotasUserSessionsArgs']] = None):
        """
        :param pulumi.Input['EnvironmentQuotasDdusArgs'] ddus: Davis Data Units consumption and quota information on environment level. Not set (and not editable) if Davis data units is not enabled
        :param pulumi.Input['EnvironmentQuotasDemUnitsArgs'] dem_units: DEM units consumption and quota information on environment level
        :param pulumi.Input[int] host_units: Host units consumption and quota information on environment level
        :param pulumi.Input['EnvironmentQuotasLogsArgs'] logs: Log Monitoring consumption and quota information on environment level. Not set (and not editable) if Log monitoring is not enabled. Not set (and not editable) if Log monitoring is migrated to Davis data on license level
        :param pulumi.Input['EnvironmentQuotasSyntheticArgs'] synthetic: Synthetic monitors consumption and quota information on environment level. Not set (and not editable) if neither Synthetic nor DEM units is enabled
        :param pulumi.Input['EnvironmentQuotasUserSessionsArgs'] user_sessions: User sessions consumption and quota information on environment level
        """
        if ddus is not None:
            pulumi.set(__self__, "ddus", ddus)
        if dem_units is not None:
            pulumi.set(__self__, "dem_units", dem_units)
        if host_units is not None:
            pulumi.set(__self__, "host_units", host_units)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if synthetic is not None:
            pulumi.set(__self__, "synthetic", synthetic)
        if user_sessions is not None:
            pulumi.set(__self__, "user_sessions", user_sessions)

    @property
    @pulumi.getter
    def ddus(self) -> Optional[pulumi.Input['EnvironmentQuotasDdusArgs']]:
        """
        Davis Data Units consumption and quota information on environment level. Not set (and not editable) if Davis data units is not enabled
        """
        return pulumi.get(self, "ddus")

    @ddus.setter
    def ddus(self, value: Optional[pulumi.Input['EnvironmentQuotasDdusArgs']]):
        pulumi.set(self, "ddus", value)

    @property
    @pulumi.getter(name="demUnits")
    def dem_units(self) -> Optional[pulumi.Input['EnvironmentQuotasDemUnitsArgs']]:
        """
        DEM units consumption and quota information on environment level
        """
        return pulumi.get(self, "dem_units")

    @dem_units.setter
    def dem_units(self, value: Optional[pulumi.Input['EnvironmentQuotasDemUnitsArgs']]):
        pulumi.set(self, "dem_units", value)

    @property
    @pulumi.getter(name="hostUnits")
    def host_units(self) -> Optional[pulumi.Input[int]]:
        """
        Host units consumption and quota information on environment level
        """
        return pulumi.get(self, "host_units")

    @host_units.setter
    def host_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "host_units", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input['EnvironmentQuotasLogsArgs']]:
        """
        Log Monitoring consumption and quota information on environment level. Not set (and not editable) if Log monitoring is not enabled. Not set (and not editable) if Log monitoring is migrated to Davis data on license level
        """
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input['EnvironmentQuotasLogsArgs']]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def synthetic(self) -> Optional[pulumi.Input['EnvironmentQuotasSyntheticArgs']]:
        """
        Synthetic monitors consumption and quota information on environment level. Not set (and not editable) if neither Synthetic nor DEM units is enabled
        """
        return pulumi.get(self, "synthetic")

    @synthetic.setter
    def synthetic(self, value: Optional[pulumi.Input['EnvironmentQuotasSyntheticArgs']]):
        pulumi.set(self, "synthetic", value)

    @property
    @pulumi.getter(name="userSessions")
    def user_sessions(self) -> Optional[pulumi.Input['EnvironmentQuotasUserSessionsArgs']]:
        """
        User sessions consumption and quota information on environment level
        """
        return pulumi.get(self, "user_sessions")

    @user_sessions.setter
    def user_sessions(self, value: Optional[pulumi.Input['EnvironmentQuotasUserSessionsArgs']]):
        pulumi.set(self, "user_sessions", value)


@pulumi.input_type
class EnvironmentQuotasDdusArgs:
    def __init__(__self__, *,
                 annual: Optional[pulumi.Input[int]] = None,
                 monthly: Optional[pulumi.Input[int]] = None):
        if annual is not None:
            pulumi.set(__self__, "annual", annual)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def annual(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "annual")

    @annual.setter
    def annual(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "annual", value)

    @property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly", value)


@pulumi.input_type
class EnvironmentQuotasDemUnitsArgs:
    def __init__(__self__, *,
                 annual: Optional[pulumi.Input[int]] = None,
                 monthly: Optional[pulumi.Input[int]] = None):
        if annual is not None:
            pulumi.set(__self__, "annual", annual)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def annual(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "annual")

    @annual.setter
    def annual(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "annual", value)

    @property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly", value)


@pulumi.input_type
class EnvironmentQuotasLogsArgs:
    def __init__(__self__, *,
                 annual: Optional[pulumi.Input[int]] = None,
                 monthly: Optional[pulumi.Input[int]] = None):
        if annual is not None:
            pulumi.set(__self__, "annual", annual)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def annual(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "annual")

    @annual.setter
    def annual(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "annual", value)

    @property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly", value)


@pulumi.input_type
class EnvironmentQuotasSyntheticArgs:
    def __init__(__self__, *,
                 annual: Optional[pulumi.Input[int]] = None,
                 monthly: Optional[pulumi.Input[int]] = None):
        if annual is not None:
            pulumi.set(__self__, "annual", annual)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def annual(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "annual")

    @annual.setter
    def annual(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "annual", value)

    @property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly", value)


@pulumi.input_type
class EnvironmentQuotasUserSessionsArgs:
    def __init__(__self__, *,
                 annual: Optional[pulumi.Input[int]] = None,
                 monthly: Optional[pulumi.Input[int]] = None):
        if annual is not None:
            pulumi.set(__self__, "annual", annual)
        if monthly is not None:
            pulumi.set(__self__, "monthly", monthly)

    @property
    @pulumi.getter
    def annual(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "annual")

    @annual.setter
    def annual(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "annual", value)

    @property
    @pulumi.getter
    def monthly(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monthly")

    @monthly.setter
    def monthly(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monthly", value)


@pulumi.input_type
class EnvironmentStorageArgs:
    def __init__(__self__, *,
                 transactions: pulumi.Input[int],
                 limits: Optional[pulumi.Input['EnvironmentStorageLimitsArgs']] = None,
                 retention: Optional[pulumi.Input['EnvironmentStorageRetentionArgs']] = None,
                 user_actions: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] transactions: Maximum number of newly monitored entry point PurePaths captured per process/minute on environment level. Can be set to any value from 100 to 100000
        :param pulumi.Input[int] user_actions: Maximum number of user actions generated per minute on environment level. Can be set to any value from 1 to 2147483646 or left unlimited by omitting this property
        """
        pulumi.set(__self__, "transactions", transactions)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if retention is not None:
            pulumi.set(__self__, "retention", retention)
        if user_actions is not None:
            pulumi.set(__self__, "user_actions", user_actions)

    @property
    @pulumi.getter
    def transactions(self) -> pulumi.Input[int]:
        """
        Maximum number of newly monitored entry point PurePaths captured per process/minute on environment level. Can be set to any value from 100 to 100000
        """
        return pulumi.get(self, "transactions")

    @transactions.setter
    def transactions(self, value: pulumi.Input[int]):
        pulumi.set(self, "transactions", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input['EnvironmentStorageLimitsArgs']]:
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input['EnvironmentStorageLimitsArgs']]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def retention(self) -> Optional[pulumi.Input['EnvironmentStorageRetentionArgs']]:
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: Optional[pulumi.Input['EnvironmentStorageRetentionArgs']]):
        pulumi.set(self, "retention", value)

    @property
    @pulumi.getter(name="userActions")
    def user_actions(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of user actions generated per minute on environment level. Can be set to any value from 1 to 2147483646 or left unlimited by omitting this property
        """
        return pulumi.get(self, "user_actions")

    @user_actions.setter
    def user_actions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_actions", value)


@pulumi.input_type
class EnvironmentStorageLimitsArgs:
    def __init__(__self__, *,
                 logs: Optional[pulumi.Input[int]] = None,
                 session_replay: Optional[pulumi.Input[int]] = None,
                 symbol_files: Optional[pulumi.Input[int]] = None,
                 transactions: Optional[pulumi.Input[int]] = None):
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if session_replay is not None:
            pulumi.set(__self__, "session_replay", session_replay)
        if symbol_files is not None:
            pulumi.set(__self__, "symbol_files", symbol_files)
        if transactions is not None:
            pulumi.set(__self__, "transactions", transactions)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter(name="sessionReplay")
    def session_replay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_replay")

    @session_replay.setter
    def session_replay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_replay", value)

    @property
    @pulumi.getter(name="symbolFiles")
    def symbol_files(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "symbol_files")

    @symbol_files.setter
    def symbol_files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "symbol_files", value)

    @property
    @pulumi.getter
    def transactions(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "transactions")

    @transactions.setter
    def transactions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transactions", value)


@pulumi.input_type
class EnvironmentStorageRetentionArgs:
    def __init__(__self__, *,
                 rum: pulumi.Input[int],
                 service_code_level: pulumi.Input[int],
                 service_request_level: pulumi.Input[int],
                 session_replay: pulumi.Input[int],
                 synthetic: pulumi.Input[int],
                 logs: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "rum", rum)
        pulumi.set(__self__, "service_code_level", service_code_level)
        pulumi.set(__self__, "service_request_level", service_request_level)
        pulumi.set(__self__, "session_replay", session_replay)
        pulumi.set(__self__, "synthetic", synthetic)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)

    @property
    @pulumi.getter
    def rum(self) -> pulumi.Input[int]:
        return pulumi.get(self, "rum")

    @rum.setter
    def rum(self, value: pulumi.Input[int]):
        pulumi.set(self, "rum", value)

    @property
    @pulumi.getter(name="serviceCodeLevel")
    def service_code_level(self) -> pulumi.Input[int]:
        return pulumi.get(self, "service_code_level")

    @service_code_level.setter
    def service_code_level(self, value: pulumi.Input[int]):
        pulumi.set(self, "service_code_level", value)

    @property
    @pulumi.getter(name="serviceRequestLevel")
    def service_request_level(self) -> pulumi.Input[int]:
        return pulumi.get(self, "service_request_level")

    @service_request_level.setter
    def service_request_level(self, value: pulumi.Input[int]):
        pulumi.set(self, "service_request_level", value)

    @property
    @pulumi.getter(name="sessionReplay")
    def session_replay(self) -> pulumi.Input[int]:
        return pulumi.get(self, "session_replay")

    @session_replay.setter
    def session_replay(self, value: pulumi.Input[int]):
        pulumi.set(self, "session_replay", value)

    @property
    @pulumi.getter
    def synthetic(self) -> pulumi.Input[int]:
        return pulumi.get(self, "synthetic")

    @synthetic.setter
    def synthetic(self, value: pulumi.Input[int]):
        pulumi.set(self, "synthetic", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logs", value)


@pulumi.input_type
class FailureDetectionParametersBrokenLinksArgs:
    def __init__(__self__, *,
                 http404_not_found_failures: pulumi.Input[bool],
                 broken_link_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] http404_not_found_failures: Consider 404 HTTP response codes as failures
        :param pulumi.Input[Sequence[pulumi.Input[str]]] broken_link_domains: If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
        """
        pulumi.set(__self__, "http404_not_found_failures", http404_not_found_failures)
        if broken_link_domains is not None:
            pulumi.set(__self__, "broken_link_domains", broken_link_domains)

    @property
    @pulumi.getter(name="http404NotFoundFailures")
    def http404_not_found_failures(self) -> pulumi.Input[bool]:
        """
        Consider 404 HTTP response codes as failures
        """
        return pulumi.get(self, "http404_not_found_failures")

    @http404_not_found_failures.setter
    def http404_not_found_failures(self, value: pulumi.Input[bool]):
        pulumi.set(self, "http404_not_found_failures", value)

    @property
    @pulumi.getter(name="brokenLinkDomains")
    def broken_link_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
        """
        return pulumi.get(self, "broken_link_domains")

    @broken_link_domains.setter
    def broken_link_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "broken_link_domains", value)


@pulumi.input_type
class FailureDetectionParametersExceptionRulesArgs:
    def __init__(__self__, *,
                 ignore_all_exceptions: pulumi.Input[bool],
                 ignore_span_failure_detection: pulumi.Input[bool],
                 custom_error_rules: Optional[pulumi.Input['FailureDetectionParametersExceptionRulesCustomErrorRulesArgs']] = None,
                 custom_handled_exceptions: Optional[pulumi.Input['FailureDetectionParametersExceptionRulesCustomHandledExceptionsArgs']] = None,
                 ignored_exceptions: Optional[pulumi.Input['FailureDetectionParametersExceptionRulesIgnoredExceptionsArgs']] = None,
                 success_forcing_exceptions: Optional[pulumi.Input['FailureDetectionParametersExceptionRulesSuccessForcingExceptionsArgs']] = None):
        """
        :param pulumi.Input[bool] ignore_all_exceptions: Ignore all exceptions
        :param pulumi.Input[bool] ignore_span_failure_detection: Ignore span failure detection
        :param pulumi.Input['FailureDetectionParametersExceptionRulesCustomErrorRulesArgs'] custom_error_rules: Some custom error situations are only detectable via a return value or other means. To support such cases, [define a request attribute](https://dt-url.net/ys5k0p4y) that captures the required data. Then define a custom error rule that determines if the request has failed based on the value of the request attribute.
        :param pulumi.Input['FailureDetectionParametersExceptionRulesCustomHandledExceptionsArgs'] custom_handled_exceptions: There may be situations where your application code handles exceptions gracefully in a manner that these failures aren't detected by Dynatrace. Use this setting to define specific gracefully-handled exceptions that should be treated as service failures.
        :param pulumi.Input['FailureDetectionParametersExceptionRulesIgnoredExceptionsArgs'] ignored_exceptions: Some exceptions that are thrown by legacy or 3rd-party code indicate a specific response, not an error. Use this setting to instruct Dynatrace to treat such exceptions as non-failed requests.. If an exception matching any of the defined patterns occurs in a request, it will not be considered as a failure. Other exceptions occurring at the same request might still mark the request as failed.
        :param pulumi.Input['FailureDetectionParametersExceptionRulesSuccessForcingExceptionsArgs'] success_forcing_exceptions: Define exceptions which indicate that a service call should not be considered as failed. E.g. an exception indicating that the client aborted the operation.. If an exception matching any of the defined patterns occurs on the entry node of the service, it will be considered successful. Compared to ignored exceptions, the request will be considered successful even if other exceptions occur in the same request.
        """
        pulumi.set(__self__, "ignore_all_exceptions", ignore_all_exceptions)
        pulumi.set(__self__, "ignore_span_failure_detection", ignore_span_failure_detection)
        if custom_error_rules is not None:
            pulumi.set(__self__, "custom_error_rules", custom_error_rules)
        if custom_handled_exceptions is not None:
            pulumi.set(__self__, "custom_handled_exceptions", custom_handled_exceptions)
        if ignored_exceptions is not None:
            pulumi.set(__self__, "ignored_exceptions", ignored_exceptions)
        if success_forcing_exceptions is not None:
            pulumi.set(__self__, "success_forcing_exceptions", success_forcing_exceptions)

    @property
    @pulumi.getter(name="ignoreAllExceptions")
    def ignore_all_exceptions(self) -> pulumi.Input[bool]:
        """
        Ignore all exceptions
        """
        return pulumi.get(self, "ignore_all_exceptions")

    @ignore_all_exceptions.setter
    def ignore_all_exceptions(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ignore_all_exceptions", value)

    @property
    @pulumi.getter(name="ignoreSpanFailureDetection")
    def ignore_span_failure_detection(self) -> pulumi.Input[bool]:
        """
        Ignore span failure detection
        """
        return pulumi.get(self, "ignore_span_failure_detection")

    @ignore_span_failure_detection.setter
    def ignore_span_failure_detection(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ignore_span_failure_detection", value)

    @property
    @pulumi.getter(name="customErrorRules")
    def custom_error_rules(self) -> Optional[pulumi.Input['FailureDetectionParametersExceptionRulesCustomErrorRulesArgs']]:
        """
        Some custom error situations are only detectable via a return value or other means. To support such cases, [define a request attribute](https://dt-url.net/ys5k0p4y) that captures the required data. Then define a custom error rule that determines if the request has failed based on the value of the request attribute.
        """
        return pulumi.get(self, "custom_error_rules")

    @custom_error_rules.setter
    def custom_error_rules(self, value: Optional[pulumi.Input['FailureDetectionParametersExceptionRulesCustomErrorRulesArgs']]):
        pulumi.set(self, "custom_error_rules", value)

    @property
    @pulumi.getter(name="customHandledExceptions")
    def custom_handled_exceptions(self) -> Optional[pulumi.Input['FailureDetectionParametersExceptionRulesCustomHandledExceptionsArgs']]:
        """
        There may be situations where your application code handles exceptions gracefully in a manner that these failures aren't detected by Dynatrace. Use this setting to define specific gracefully-handled exceptions that should be treated as service failures.
        """
        return pulumi.get(self, "custom_handled_exceptions")

    @custom_handled_exceptions.setter
    def custom_handled_exceptions(self, value: Optional[pulumi.Input['FailureDetectionParametersExceptionRulesCustomHandledExceptionsArgs']]):
        pulumi.set(self, "custom_handled_exceptions", value)

    @property
    @pulumi.getter(name="ignoredExceptions")
    def ignored_exceptions(self) -> Optional[pulumi.Input['FailureDetectionParametersExceptionRulesIgnoredExceptionsArgs']]:
        """
        Some exceptions that are thrown by legacy or 3rd-party code indicate a specific response, not an error. Use this setting to instruct Dynatrace to treat such exceptions as non-failed requests.. If an exception matching any of the defined patterns occurs in a request, it will not be considered as a failure. Other exceptions occurring at the same request might still mark the request as failed.
        """
        return pulumi.get(self, "ignored_exceptions")

    @ignored_exceptions.setter
    def ignored_exceptions(self, value: Optional[pulumi.Input['FailureDetectionParametersExceptionRulesIgnoredExceptionsArgs']]):
        pulumi.set(self, "ignored_exceptions", value)

    @property
    @pulumi.getter(name="successForcingExceptions")
    def success_forcing_exceptions(self) -> Optional[pulumi.Input['FailureDetectionParametersExceptionRulesSuccessForcingExceptionsArgs']]:
        """
        Define exceptions which indicate that a service call should not be considered as failed. E.g. an exception indicating that the client aborted the operation.. If an exception matching any of the defined patterns occurs on the entry node of the service, it will be considered successful. Compared to ignored exceptions, the request will be considered successful even if other exceptions occur in the same request.
        """
        return pulumi.get(self, "success_forcing_exceptions")

    @success_forcing_exceptions.setter
    def success_forcing_exceptions(self, value: Optional[pulumi.Input['FailureDetectionParametersExceptionRulesSuccessForcingExceptionsArgs']]):
        pulumi.set(self, "success_forcing_exceptions", value)


@pulumi.input_type
class FailureDetectionParametersExceptionRulesCustomErrorRulesArgs:
    def __init__(__self__, *,
                 custom_error_rules: pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleArgs']]]):
        pulumi.set(__self__, "custom_error_rules", custom_error_rules)

    @property
    @pulumi.getter(name="customErrorRules")
    def custom_error_rules(self) -> pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleArgs']]]:
        return pulumi.get(self, "custom_error_rules")

    @custom_error_rules.setter
    def custom_error_rules(self, value: pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleArgs']]]):
        pulumi.set(self, "custom_error_rules", value)


@pulumi.input_type
class FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleConditionArgs'],
                 request_attribute: pulumi.Input[str]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "request_attribute", request_attribute)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleConditionArgs']:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="requestAttribute")
    def request_attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "request_attribute")

    @request_attribute.setter
    def request_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_attribute", value)


@pulumi.input_type
class FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleConditionArgs:
    def __init__(__self__, *,
                 compare_operation_type: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 int_value: Optional[pulumi.Input[int]] = None,
                 text_value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "compare_operation_type", compare_operation_type)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if double_value is not None:
            pulumi.set(__self__, "double_value", double_value)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if text_value is not None:
            pulumi.set(__self__, "text_value", text_value)

    @property
    @pulumi.getter(name="compareOperationType")
    def compare_operation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compare_operation_type")

    @compare_operation_type.setter
    def compare_operation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "compare_operation_type", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="textValue")
    def text_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_value")

    @text_value.setter
    def text_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_value", value)


@pulumi.input_type
class FailureDetectionParametersExceptionRulesCustomHandledExceptionsArgs:
    def __init__(__self__, *,
                 custom_handled_exceptions: pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(__self__, "custom_handled_exceptions", custom_handled_exceptions)

    @property
    @pulumi.getter(name="customHandledExceptions")
    def custom_handled_exceptions(self) -> pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledExceptionArgs']]]:
        return pulumi.get(self, "custom_handled_exceptions")

    @custom_handled_exceptions.setter
    def custom_handled_exceptions(self, value: pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(self, "custom_handled_exceptions", value)


@pulumi.input_type
class FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledExceptionArgs:
    def __init__(__self__, *,
                 class_pattern: Optional[pulumi.Input[str]] = None,
                 message_pattern: Optional[pulumi.Input[str]] = None):
        if class_pattern is not None:
            pulumi.set(__self__, "class_pattern", class_pattern)
        if message_pattern is not None:
            pulumi.set(__self__, "message_pattern", message_pattern)

    @property
    @pulumi.getter(name="classPattern")
    def class_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_pattern")

    @class_pattern.setter
    def class_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_pattern", value)

    @property
    @pulumi.getter(name="messagePattern")
    def message_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_pattern")

    @message_pattern.setter
    def message_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_pattern", value)


@pulumi.input_type
class FailureDetectionParametersExceptionRulesIgnoredExceptionsArgs:
    def __init__(__self__, *,
                 custom_handled_exceptions: pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(__self__, "custom_handled_exceptions", custom_handled_exceptions)

    @property
    @pulumi.getter(name="customHandledExceptions")
    def custom_handled_exceptions(self) -> pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledExceptionArgs']]]:
        return pulumi.get(self, "custom_handled_exceptions")

    @custom_handled_exceptions.setter
    def custom_handled_exceptions(self, value: pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(self, "custom_handled_exceptions", value)


@pulumi.input_type
class FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledExceptionArgs:
    def __init__(__self__, *,
                 class_pattern: Optional[pulumi.Input[str]] = None,
                 message_pattern: Optional[pulumi.Input[str]] = None):
        if class_pattern is not None:
            pulumi.set(__self__, "class_pattern", class_pattern)
        if message_pattern is not None:
            pulumi.set(__self__, "message_pattern", message_pattern)

    @property
    @pulumi.getter(name="classPattern")
    def class_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_pattern")

    @class_pattern.setter
    def class_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_pattern", value)

    @property
    @pulumi.getter(name="messagePattern")
    def message_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_pattern")

    @message_pattern.setter
    def message_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_pattern", value)


@pulumi.input_type
class FailureDetectionParametersExceptionRulesSuccessForcingExceptionsArgs:
    def __init__(__self__, *,
                 custom_handled_exceptions: pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(__self__, "custom_handled_exceptions", custom_handled_exceptions)

    @property
    @pulumi.getter(name="customHandledExceptions")
    def custom_handled_exceptions(self) -> pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledExceptionArgs']]]:
        return pulumi.get(self, "custom_handled_exceptions")

    @custom_handled_exceptions.setter
    def custom_handled_exceptions(self, value: pulumi.Input[Sequence[pulumi.Input['FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(self, "custom_handled_exceptions", value)


@pulumi.input_type
class FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledExceptionArgs:
    def __init__(__self__, *,
                 class_pattern: Optional[pulumi.Input[str]] = None,
                 message_pattern: Optional[pulumi.Input[str]] = None):
        if class_pattern is not None:
            pulumi.set(__self__, "class_pattern", class_pattern)
        if message_pattern is not None:
            pulumi.set(__self__, "message_pattern", message_pattern)

    @property
    @pulumi.getter(name="classPattern")
    def class_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_pattern")

    @class_pattern.setter
    def class_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_pattern", value)

    @property
    @pulumi.getter(name="messagePattern")
    def message_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_pattern")

    @message_pattern.setter
    def message_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_pattern", value)


@pulumi.input_type
class FailureDetectionParametersHttpResponseCodesArgs:
    def __init__(__self__, *,
                 client_side_errors: pulumi.Input[str],
                 fail_on_missing_response_code_client_side: pulumi.Input[bool],
                 fail_on_missing_response_code_server_side: pulumi.Input[bool],
                 server_side_errors: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_side_errors: HTTP response codes which indicate client side errors
        :param pulumi.Input[bool] fail_on_missing_response_code_client_side: Treat missing HTTP response code as client side error
        :param pulumi.Input[bool] fail_on_missing_response_code_server_side: Treat missing HTTP response code as server side errors
        :param pulumi.Input[str] server_side_errors: HTTP response codes which indicate an error on the server side
        """
        pulumi.set(__self__, "client_side_errors", client_side_errors)
        pulumi.set(__self__, "fail_on_missing_response_code_client_side", fail_on_missing_response_code_client_side)
        pulumi.set(__self__, "fail_on_missing_response_code_server_side", fail_on_missing_response_code_server_side)
        pulumi.set(__self__, "server_side_errors", server_side_errors)

    @property
    @pulumi.getter(name="clientSideErrors")
    def client_side_errors(self) -> pulumi.Input[str]:
        """
        HTTP response codes which indicate client side errors
        """
        return pulumi.get(self, "client_side_errors")

    @client_side_errors.setter
    def client_side_errors(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_side_errors", value)

    @property
    @pulumi.getter(name="failOnMissingResponseCodeClientSide")
    def fail_on_missing_response_code_client_side(self) -> pulumi.Input[bool]:
        """
        Treat missing HTTP response code as client side error
        """
        return pulumi.get(self, "fail_on_missing_response_code_client_side")

    @fail_on_missing_response_code_client_side.setter
    def fail_on_missing_response_code_client_side(self, value: pulumi.Input[bool]):
        pulumi.set(self, "fail_on_missing_response_code_client_side", value)

    @property
    @pulumi.getter(name="failOnMissingResponseCodeServerSide")
    def fail_on_missing_response_code_server_side(self) -> pulumi.Input[bool]:
        """
        Treat missing HTTP response code as server side errors
        """
        return pulumi.get(self, "fail_on_missing_response_code_server_side")

    @fail_on_missing_response_code_server_side.setter
    def fail_on_missing_response_code_server_side(self, value: pulumi.Input[bool]):
        pulumi.set(self, "fail_on_missing_response_code_server_side", value)

    @property
    @pulumi.getter(name="serverSideErrors")
    def server_side_errors(self) -> pulumi.Input[str]:
        """
        HTTP response codes which indicate an error on the server side
        """
        return pulumi.get(self, "server_side_errors")

    @server_side_errors.setter
    def server_side_errors(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_side_errors", value)


@pulumi.input_type
class FailureDetectionRulesConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['FailureDetectionRulesConditionsConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['FailureDetectionRulesConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['FailureDetectionRulesConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class FailureDetectionRulesConditionsConditionArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 predicate: pulumi.Input['FailureDetectionRulesConditionsConditionPredicateArgs']):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "predicate", predicate)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def predicate(self) -> pulumi.Input['FailureDetectionRulesConditionsConditionPredicateArgs']:
        return pulumi.get(self, "predicate")

    @predicate.setter
    def predicate(self, value: pulumi.Input['FailureDetectionRulesConditionsConditionPredicateArgs']):
        pulumi.set(self, "predicate", value)


@pulumi.input_type
class FailureDetectionRulesConditionsConditionPredicateArgs:
    def __init__(__self__, *,
                 predicate_type: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 management_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "predicate_type", predicate_type)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if management_zones is not None:
            pulumi.set(__self__, "management_zones", management_zones)
        if service_types is not None:
            pulumi.set(__self__, "service_types", service_types)
        if tag_keys is not None:
            pulumi.set(__self__, "tag_keys", tag_keys)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if text_values is not None:
            pulumi.set(__self__, "text_values", text_values)

    @property
    @pulumi.getter(name="predicateType")
    def predicate_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "predicate_type")

    @predicate_type.setter
    def predicate_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "predicate_type", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="managementZones")
    def management_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "management_zones")

    @management_zones.setter
    def management_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "management_zones", value)

    @property
    @pulumi.getter(name="serviceTypes")
    def service_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_types")

    @service_types.setter
    def service_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_types", value)

    @property
    @pulumi.getter(name="tagKeys")
    def tag_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tag_keys")

    @tag_keys.setter
    def tag_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_keys", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="textValues")
    def text_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "text_values")

    @text_values.setter
    def text_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "text_values", value)


@pulumi.input_type
class GenericRelationshipsSourcesArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['GenericRelationshipsSourcesSourceArgs']]]):
        pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['GenericRelationshipsSourcesSourceArgs']]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['GenericRelationshipsSourcesSourceArgs']]]):
        pulumi.set(self, "sources", value)


@pulumi.input_type
class GenericRelationshipsSourcesSourceArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 condition: Optional[pulumi.Input[str]] = None,
                 mapping_rules: Optional[pulumi.Input['GenericRelationshipsSourcesSourceMappingRulesArgs']] = None):
        pulumi.set(__self__, "source_type", source_type)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if mapping_rules is not None:
            pulumi.set(__self__, "mapping_rules", mapping_rules)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="mappingRules")
    def mapping_rules(self) -> Optional[pulumi.Input['GenericRelationshipsSourcesSourceMappingRulesArgs']]:
        return pulumi.get(self, "mapping_rules")

    @mapping_rules.setter
    def mapping_rules(self, value: Optional[pulumi.Input['GenericRelationshipsSourcesSourceMappingRulesArgs']]):
        pulumi.set(self, "mapping_rules", value)


@pulumi.input_type
class GenericRelationshipsSourcesSourceMappingRulesArgs:
    def __init__(__self__, *,
                 mapping_rules: pulumi.Input[Sequence[pulumi.Input['GenericRelationshipsSourcesSourceMappingRulesMappingRuleArgs']]]):
        pulumi.set(__self__, "mapping_rules", mapping_rules)

    @property
    @pulumi.getter(name="mappingRules")
    def mapping_rules(self) -> pulumi.Input[Sequence[pulumi.Input['GenericRelationshipsSourcesSourceMappingRulesMappingRuleArgs']]]:
        return pulumi.get(self, "mapping_rules")

    @mapping_rules.setter
    def mapping_rules(self, value: pulumi.Input[Sequence[pulumi.Input['GenericRelationshipsSourcesSourceMappingRulesMappingRuleArgs']]]):
        pulumi.set(self, "mapping_rules", value)


@pulumi.input_type
class GenericRelationshipsSourcesSourceMappingRulesMappingRuleArgs:
    def __init__(__self__, *,
                 destination_property: pulumi.Input[str],
                 destination_transformation: pulumi.Input[str],
                 source_property: pulumi.Input[str],
                 source_transformation: pulumi.Input[str]):
        pulumi.set(__self__, "destination_property", destination_property)
        pulumi.set(__self__, "destination_transformation", destination_transformation)
        pulumi.set(__self__, "source_property", source_property)
        pulumi.set(__self__, "source_transformation", source_transformation)

    @property
    @pulumi.getter(name="destinationProperty")
    def destination_property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_property")

    @destination_property.setter
    def destination_property(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_property", value)

    @property
    @pulumi.getter(name="destinationTransformation")
    def destination_transformation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_transformation")

    @destination_transformation.setter
    def destination_transformation(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_transformation", value)

    @property
    @pulumi.getter(name="sourceProperty")
    def source_property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_property")

    @source_property.setter
    def source_property(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_property", value)

    @property
    @pulumi.getter(name="sourceTransformation")
    def source_transformation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_transformation")

    @source_transformation.setter
    def source_transformation(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_transformation", value)


@pulumi.input_type
class GenericTypesRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class GenericTypesRulesRuleArgs:
    def __init__(__self__, *,
                 id_pattern: pulumi.Input[str],
                 sources: pulumi.Input['GenericTypesRulesRuleSourcesArgs'],
                 attributes: Optional[pulumi.Input['GenericTypesRulesRuleAttributesArgs']] = None,
                 icon_pattern: Optional[pulumi.Input[str]] = None,
                 instance_name_pattern: Optional[pulumi.Input[str]] = None,
                 required_dimensions: Optional[pulumi.Input['GenericTypesRulesRuleRequiredDimensionsArgs']] = None,
                 role: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "id_pattern", id_pattern)
        pulumi.set(__self__, "sources", sources)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if icon_pattern is not None:
            pulumi.set(__self__, "icon_pattern", icon_pattern)
        if instance_name_pattern is not None:
            pulumi.set(__self__, "instance_name_pattern", instance_name_pattern)
        if required_dimensions is not None:
            pulumi.set(__self__, "required_dimensions", required_dimensions)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="idPattern")
    def id_pattern(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id_pattern")

    @id_pattern.setter
    def id_pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "id_pattern", value)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input['GenericTypesRulesRuleSourcesArgs']:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input['GenericTypesRulesRuleSourcesArgs']):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input['GenericTypesRulesRuleAttributesArgs']]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input['GenericTypesRulesRuleAttributesArgs']]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="iconPattern")
    def icon_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "icon_pattern")

    @icon_pattern.setter
    def icon_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon_pattern", value)

    @property
    @pulumi.getter(name="instanceNamePattern")
    def instance_name_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_name_pattern")

    @instance_name_pattern.setter
    def instance_name_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name_pattern", value)

    @property
    @pulumi.getter(name="requiredDimensions")
    def required_dimensions(self) -> Optional[pulumi.Input['GenericTypesRulesRuleRequiredDimensionsArgs']]:
        return pulumi.get(self, "required_dimensions")

    @required_dimensions.setter
    def required_dimensions(self, value: Optional[pulumi.Input['GenericTypesRulesRuleRequiredDimensionsArgs']]):
        pulumi.set(self, "required_dimensions", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class GenericTypesRulesRuleAttributesArgs:
    def __init__(__self__, *,
                 attributes: pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleAttributesAttributeArgs']]]):
        pulumi.set(__self__, "attributes", attributes)

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleAttributesAttributeArgs']]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleAttributesAttributeArgs']]]):
        pulumi.set(self, "attributes", value)


@pulumi.input_type
class GenericTypesRulesRuleAttributesAttributeArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 pattern: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: The human readable type name for this entity type.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "pattern", pattern)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The human readable type name for this entity type.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class GenericTypesRulesRuleRequiredDimensionsArgs:
    def __init__(__self__, *,
                 required_dimensions: pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleRequiredDimensionsRequiredDimensionArgs']]]):
        pulumi.set(__self__, "required_dimensions", required_dimensions)

    @property
    @pulumi.getter(name="requiredDimensions")
    def required_dimensions(self) -> pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleRequiredDimensionsRequiredDimensionArgs']]]:
        return pulumi.get(self, "required_dimensions")

    @required_dimensions.setter
    def required_dimensions(self, value: pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleRequiredDimensionsRequiredDimensionArgs']]]):
        pulumi.set(self, "required_dimensions", value)


@pulumi.input_type
class GenericTypesRulesRuleRequiredDimensionsRequiredDimensionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value_pattern: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if value_pattern is not None:
            pulumi.set(__self__, "value_pattern", value_pattern)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="valuePattern")
    def value_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_pattern")

    @value_pattern.setter
    def value_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_pattern", value)


@pulumi.input_type
class GenericTypesRulesRuleSourcesArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleSourcesSourceArgs']]]):
        pulumi.set(__self__, "sources", sources)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleSourcesSourceArgs']]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input['GenericTypesRulesRuleSourcesSourceArgs']]]):
        pulumi.set(self, "sources", value)


@pulumi.input_type
class GenericTypesRulesRuleSourcesSourceArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 condition: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)


@pulumi.input_type
class HostAnomaliesConnectionsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 enabled_on_graceful_shutdowns: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] enabled: The detection is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[bool] enabled_on_graceful_shutdowns: Alert (`true`) on graceful host shutdowns
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "enabled_on_graceful_shutdowns", enabled_on_graceful_shutdowns)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        The detection is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enabledOnGracefulShutdowns")
    def enabled_on_graceful_shutdowns(self) -> pulumi.Input[bool]:
        """
        Alert (`true`) on graceful host shutdowns
        """
        return pulumi.get(self, "enabled_on_graceful_shutdowns")

    @enabled_on_graceful_shutdowns.setter
    def enabled_on_graceful_shutdowns(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled_on_graceful_shutdowns", value)


@pulumi.input_type
class HostAnomaliesCpuArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesCpuThresholdsArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: The detection is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['HostAnomaliesCpuThresholdsArgs'] thresholds: Custom thresholds for high CPU saturation. If not set then the automatic mode is used
        """
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        The detection is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesCpuThresholdsArgs']]:
        """
        Custom thresholds for high CPU saturation. If not set then the automatic mode is used
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesCpuThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesCpuThresholdsArgs:
    def __init__(__self__, *,
                 saturation: pulumi.Input[int]):
        pulumi.set(__self__, "saturation", saturation)

    @property
    @pulumi.getter
    def saturation(self) -> pulumi.Input[int]:
        return pulumi.get(self, "saturation")

    @saturation.setter
    def saturation(self, value: pulumi.Input[int]):
        pulumi.set(self, "saturation", value)


@pulumi.input_type
class HostAnomaliesDisksArgs:
    def __init__(__self__, *,
                 inodes: Optional[pulumi.Input['HostAnomaliesDisksInodesArgs']] = None,
                 space: Optional[pulumi.Input['HostAnomaliesDisksSpaceArgs']] = None,
                 speed: Optional[pulumi.Input['HostAnomaliesDisksSpeedArgs']] = None):
        """
        :param pulumi.Input['HostAnomaliesDisksInodesArgs'] inodes: Configuration of low disk inodes number detection
        :param pulumi.Input['HostAnomaliesDisksSpaceArgs'] space: Configuration of low disk space detection
        :param pulumi.Input['HostAnomaliesDisksSpeedArgs'] speed: Configuration of slow running disks detection
        """
        if inodes is not None:
            pulumi.set(__self__, "inodes", inodes)
        if space is not None:
            pulumi.set(__self__, "space", space)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)

    @property
    @pulumi.getter
    def inodes(self) -> Optional[pulumi.Input['HostAnomaliesDisksInodesArgs']]:
        """
        Configuration of low disk inodes number detection
        """
        return pulumi.get(self, "inodes")

    @inodes.setter
    def inodes(self, value: Optional[pulumi.Input['HostAnomaliesDisksInodesArgs']]):
        pulumi.set(self, "inodes", value)

    @property
    @pulumi.getter
    def space(self) -> Optional[pulumi.Input['HostAnomaliesDisksSpaceArgs']]:
        """
        Configuration of low disk space detection
        """
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: Optional[pulumi.Input['HostAnomaliesDisksSpaceArgs']]):
        pulumi.set(self, "space", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input['HostAnomaliesDisksSpeedArgs']]:
        """
        Configuration of slow running disks detection
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input['HostAnomaliesDisksSpeedArgs']]):
        pulumi.set(self, "speed", value)


@pulumi.input_type
class HostAnomaliesDisksInodesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesDisksInodesThresholdsArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesDisksInodesThresholdsArgs']]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesDisksInodesThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesDisksInodesThresholdsArgs:
    def __init__(__self__, *,
                 percentage: pulumi.Input[int]):
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "percentage", value)


@pulumi.input_type
class HostAnomaliesDisksSpaceArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesDisksSpaceThresholdsArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesDisksSpaceThresholdsArgs']]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesDisksSpaceThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesDisksSpaceThresholdsArgs:
    def __init__(__self__, *,
                 percentage: pulumi.Input[int]):
        pulumi.set(__self__, "percentage", percentage)

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "percentage", value)


@pulumi.input_type
class HostAnomaliesDisksSpeedArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesDisksSpeedThresholdsArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesDisksSpeedThresholdsArgs']]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesDisksSpeedThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesDisksSpeedThresholdsArgs:
    def __init__(__self__, *,
                 write_and_read_time: pulumi.Input[int]):
        pulumi.set(__self__, "write_and_read_time", write_and_read_time)

    @property
    @pulumi.getter(name="writeAndReadTime")
    def write_and_read_time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "write_and_read_time")

    @write_and_read_time.setter
    def write_and_read_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "write_and_read_time", value)


@pulumi.input_type
class HostAnomaliesGcArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesGcThresholdsArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: The detection is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['HostAnomaliesGcThresholdsArgs'] thresholds: Custom thresholds for high GC activity. If not set, automatic mode is used.   Meeting **any** of these conditions triggers an alert
        """
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        The detection is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesGcThresholdsArgs']]:
        """
        Custom thresholds for high GC activity. If not set, automatic mode is used.   Meeting **any** of these conditions triggers an alert
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesGcThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesGcThresholdsArgs:
    def __init__(__self__, *,
                 suspension_percentage: pulumi.Input[int],
                 time_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "suspension_percentage", suspension_percentage)
        pulumi.set(__self__, "time_percentage", time_percentage)

    @property
    @pulumi.getter(name="suspensionPercentage")
    def suspension_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "suspension_percentage")

    @suspension_percentage.setter
    def suspension_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "suspension_percentage", value)

    @property
    @pulumi.getter(name="timePercentage")
    def time_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "time_percentage")

    @time_percentage.setter
    def time_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "time_percentage", value)


@pulumi.input_type
class HostAnomaliesJavaArgs:
    def __init__(__self__, *,
                 out_of_memory: Optional[pulumi.Input['HostAnomaliesJavaOutOfMemoryArgs']] = None,
                 out_of_threads: Optional[pulumi.Input['HostAnomaliesJavaOutOfThreadsArgs']] = None):
        """
        :param pulumi.Input['HostAnomaliesJavaOutOfMemoryArgs'] out_of_memory: Configuration of Java out of memory problems detection
        :param pulumi.Input['HostAnomaliesJavaOutOfThreadsArgs'] out_of_threads: Configuration of Java out of threads problems detection
        """
        if out_of_memory is not None:
            pulumi.set(__self__, "out_of_memory", out_of_memory)
        if out_of_threads is not None:
            pulumi.set(__self__, "out_of_threads", out_of_threads)

    @property
    @pulumi.getter(name="outOfMemory")
    def out_of_memory(self) -> Optional[pulumi.Input['HostAnomaliesJavaOutOfMemoryArgs']]:
        """
        Configuration of Java out of memory problems detection
        """
        return pulumi.get(self, "out_of_memory")

    @out_of_memory.setter
    def out_of_memory(self, value: Optional[pulumi.Input['HostAnomaliesJavaOutOfMemoryArgs']]):
        pulumi.set(self, "out_of_memory", value)

    @property
    @pulumi.getter(name="outOfThreads")
    def out_of_threads(self) -> Optional[pulumi.Input['HostAnomaliesJavaOutOfThreadsArgs']]:
        """
        Configuration of Java out of threads problems detection
        """
        return pulumi.get(self, "out_of_threads")

    @out_of_threads.setter
    def out_of_threads(self, value: Optional[pulumi.Input['HostAnomaliesJavaOutOfThreadsArgs']]):
        pulumi.set(self, "out_of_threads", value)


@pulumi.input_type
class HostAnomaliesJavaOutOfMemoryArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesJavaOutOfMemoryThresholdsArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesJavaOutOfMemoryThresholdsArgs']]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesJavaOutOfMemoryThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesJavaOutOfMemoryThresholdsArgs:
    def __init__(__self__, *,
                 exception_count: pulumi.Input[int]):
        pulumi.set(__self__, "exception_count", exception_count)

    @property
    @pulumi.getter(name="exceptionCount")
    def exception_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "exception_count")

    @exception_count.setter
    def exception_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "exception_count", value)


@pulumi.input_type
class HostAnomaliesJavaOutOfThreadsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesJavaOutOfThreadsThresholdsArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesJavaOutOfThreadsThresholdsArgs']]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesJavaOutOfThreadsThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesJavaOutOfThreadsThresholdsArgs:
    def __init__(__self__, *,
                 exception_count: pulumi.Input[int]):
        pulumi.set(__self__, "exception_count", exception_count)

    @property
    @pulumi.getter(name="exceptionCount")
    def exception_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "exception_count")

    @exception_count.setter
    def exception_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "exception_count", value)


@pulumi.input_type
class HostAnomaliesMemoryArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesMemoryThresholdsArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: The detection is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['HostAnomaliesMemoryThresholdsArgs'] thresholds: Custom thresholds for high memory usage. If not set then the automatic mode is used. **Both** conditions must be met to trigger an alert
        """
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        The detection is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesMemoryThresholdsArgs']]:
        """
        Custom thresholds for high memory usage. If not set then the automatic mode is used. **Both** conditions must be met to trigger an alert
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesMemoryThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesMemoryThresholdsArgs:
    def __init__(__self__, *,
                 linux: pulumi.Input['HostAnomaliesMemoryThresholdsLinuxArgs'],
                 windows: pulumi.Input['HostAnomaliesMemoryThresholdsWindowsArgs']):
        pulumi.set(__self__, "linux", linux)
        pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def linux(self) -> pulumi.Input['HostAnomaliesMemoryThresholdsLinuxArgs']:
        return pulumi.get(self, "linux")

    @linux.setter
    def linux(self, value: pulumi.Input['HostAnomaliesMemoryThresholdsLinuxArgs']):
        pulumi.set(self, "linux", value)

    @property
    @pulumi.getter
    def windows(self) -> pulumi.Input['HostAnomaliesMemoryThresholdsWindowsArgs']:
        return pulumi.get(self, "windows")

    @windows.setter
    def windows(self, value: pulumi.Input['HostAnomaliesMemoryThresholdsWindowsArgs']):
        pulumi.set(self, "windows", value)


@pulumi.input_type
class HostAnomaliesMemoryThresholdsLinuxArgs:
    def __init__(__self__, *,
                 page_faults: pulumi.Input[int],
                 usage: pulumi.Input[int]):
        pulumi.set(__self__, "page_faults", page_faults)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter(name="pageFaults")
    def page_faults(self) -> pulumi.Input[int]:
        return pulumi.get(self, "page_faults")

    @page_faults.setter
    def page_faults(self, value: pulumi.Input[int]):
        pulumi.set(self, "page_faults", value)

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: pulumi.Input[int]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class HostAnomaliesMemoryThresholdsWindowsArgs:
    def __init__(__self__, *,
                 page_faults: pulumi.Input[int],
                 usage: pulumi.Input[int]):
        pulumi.set(__self__, "page_faults", page_faults)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter(name="pageFaults")
    def page_faults(self) -> pulumi.Input[int]:
        return pulumi.get(self, "page_faults")

    @page_faults.setter
    def page_faults(self, value: pulumi.Input[int]):
        pulumi.set(self, "page_faults", value)

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: pulumi.Input[int]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class HostAnomaliesNetworkArgs:
    def __init__(__self__, *,
                 connectivity: Optional[pulumi.Input['HostAnomaliesNetworkConnectivityArgs']] = None,
                 dropped_packets: Optional[pulumi.Input['HostAnomaliesNetworkDroppedPacketsArgs']] = None,
                 errors: Optional[pulumi.Input['HostAnomaliesNetworkErrorsArgs']] = None,
                 retransmission: Optional[pulumi.Input['HostAnomaliesNetworkRetransmissionArgs']] = None,
                 utilization: Optional[pulumi.Input['HostAnomaliesNetworkUtilizationArgs']] = None):
        """
        :param pulumi.Input['HostAnomaliesNetworkConnectivityArgs'] connectivity: Configuration of TCP connectivity problems detection
        :param pulumi.Input['HostAnomaliesNetworkDroppedPacketsArgs'] dropped_packets: Configuration of high number of dropped packets detection
        :param pulumi.Input['HostAnomaliesNetworkErrorsArgs'] errors: Configuration of high number of network errors detection
        :param pulumi.Input['HostAnomaliesNetworkRetransmissionArgs'] retransmission: Configuration of high retransmission rate detection
        :param pulumi.Input['HostAnomaliesNetworkUtilizationArgs'] utilization: Configuration of high network utilization detection
        """
        if connectivity is not None:
            pulumi.set(__self__, "connectivity", connectivity)
        if dropped_packets is not None:
            pulumi.set(__self__, "dropped_packets", dropped_packets)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if retransmission is not None:
            pulumi.set(__self__, "retransmission", retransmission)
        if utilization is not None:
            pulumi.set(__self__, "utilization", utilization)

    @property
    @pulumi.getter
    def connectivity(self) -> Optional[pulumi.Input['HostAnomaliesNetworkConnectivityArgs']]:
        """
        Configuration of TCP connectivity problems detection
        """
        return pulumi.get(self, "connectivity")

    @connectivity.setter
    def connectivity(self, value: Optional[pulumi.Input['HostAnomaliesNetworkConnectivityArgs']]):
        pulumi.set(self, "connectivity", value)

    @property
    @pulumi.getter(name="droppedPackets")
    def dropped_packets(self) -> Optional[pulumi.Input['HostAnomaliesNetworkDroppedPacketsArgs']]:
        """
        Configuration of high number of dropped packets detection
        """
        return pulumi.get(self, "dropped_packets")

    @dropped_packets.setter
    def dropped_packets(self, value: Optional[pulumi.Input['HostAnomaliesNetworkDroppedPacketsArgs']]):
        pulumi.set(self, "dropped_packets", value)

    @property
    @pulumi.getter
    def errors(self) -> Optional[pulumi.Input['HostAnomaliesNetworkErrorsArgs']]:
        """
        Configuration of high number of network errors detection
        """
        return pulumi.get(self, "errors")

    @errors.setter
    def errors(self, value: Optional[pulumi.Input['HostAnomaliesNetworkErrorsArgs']]):
        pulumi.set(self, "errors", value)

    @property
    @pulumi.getter
    def retransmission(self) -> Optional[pulumi.Input['HostAnomaliesNetworkRetransmissionArgs']]:
        """
        Configuration of high retransmission rate detection
        """
        return pulumi.get(self, "retransmission")

    @retransmission.setter
    def retransmission(self, value: Optional[pulumi.Input['HostAnomaliesNetworkRetransmissionArgs']]):
        pulumi.set(self, "retransmission", value)

    @property
    @pulumi.getter
    def utilization(self) -> Optional[pulumi.Input['HostAnomaliesNetworkUtilizationArgs']]:
        """
        Configuration of high network utilization detection
        """
        return pulumi.get(self, "utilization")

    @utilization.setter
    def utilization(self, value: Optional[pulumi.Input['HostAnomaliesNetworkUtilizationArgs']]):
        pulumi.set(self, "utilization", value)


@pulumi.input_type
class HostAnomaliesNetworkConnectivityArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesNetworkConnectivityThresholdsArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesNetworkConnectivityThresholdsArgs']]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesNetworkConnectivityThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesNetworkConnectivityThresholdsArgs:
    def __init__(__self__, *,
                 failed_connections: pulumi.Input[int],
                 new_connection_failures: pulumi.Input[int]):
        pulumi.set(__self__, "failed_connections", failed_connections)
        pulumi.set(__self__, "new_connection_failures", new_connection_failures)

    @property
    @pulumi.getter(name="failedConnections")
    def failed_connections(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failed_connections")

    @failed_connections.setter
    def failed_connections(self, value: pulumi.Input[int]):
        pulumi.set(self, "failed_connections", value)

    @property
    @pulumi.getter(name="newConnectionFailures")
    def new_connection_failures(self) -> pulumi.Input[int]:
        return pulumi.get(self, "new_connection_failures")

    @new_connection_failures.setter
    def new_connection_failures(self, value: pulumi.Input[int]):
        pulumi.set(self, "new_connection_failures", value)


@pulumi.input_type
class HostAnomaliesNetworkDroppedPacketsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesNetworkDroppedPacketsThresholdsArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesNetworkDroppedPacketsThresholdsArgs']]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesNetworkDroppedPacketsThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesNetworkDroppedPacketsThresholdsArgs:
    def __init__(__self__, *,
                 dropped_packets: pulumi.Input[int],
                 total_packets_rate: pulumi.Input[int]):
        pulumi.set(__self__, "dropped_packets", dropped_packets)
        pulumi.set(__self__, "total_packets_rate", total_packets_rate)

    @property
    @pulumi.getter(name="droppedPackets")
    def dropped_packets(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dropped_packets")

    @dropped_packets.setter
    def dropped_packets(self, value: pulumi.Input[int]):
        pulumi.set(self, "dropped_packets", value)

    @property
    @pulumi.getter(name="totalPacketsRate")
    def total_packets_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "total_packets_rate")

    @total_packets_rate.setter
    def total_packets_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "total_packets_rate", value)


@pulumi.input_type
class HostAnomaliesNetworkErrorsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesNetworkErrorsThresholdsArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesNetworkErrorsThresholdsArgs']]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesNetworkErrorsThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesNetworkErrorsThresholdsArgs:
    def __init__(__self__, *,
                 errors_percentage: pulumi.Input[int],
                 total_packets_rate: pulumi.Input[int]):
        pulumi.set(__self__, "errors_percentage", errors_percentage)
        pulumi.set(__self__, "total_packets_rate", total_packets_rate)

    @property
    @pulumi.getter(name="errorsPercentage")
    def errors_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "errors_percentage")

    @errors_percentage.setter
    def errors_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "errors_percentage", value)

    @property
    @pulumi.getter(name="totalPacketsRate")
    def total_packets_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "total_packets_rate")

    @total_packets_rate.setter
    def total_packets_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "total_packets_rate", value)


@pulumi.input_type
class HostAnomaliesNetworkRetransmissionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesNetworkRetransmissionThresholdsArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesNetworkRetransmissionThresholdsArgs']]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesNetworkRetransmissionThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesNetworkRetransmissionThresholdsArgs:
    def __init__(__self__, *,
                 retransmission_rate: pulumi.Input[int],
                 retransmitted_packets: pulumi.Input[int]):
        pulumi.set(__self__, "retransmission_rate", retransmission_rate)
        pulumi.set(__self__, "retransmitted_packets", retransmitted_packets)

    @property
    @pulumi.getter(name="retransmissionRate")
    def retransmission_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "retransmission_rate")

    @retransmission_rate.setter
    def retransmission_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "retransmission_rate", value)

    @property
    @pulumi.getter(name="retransmittedPackets")
    def retransmitted_packets(self) -> pulumi.Input[int]:
        return pulumi.get(self, "retransmitted_packets")

    @retransmitted_packets.setter
    def retransmitted_packets(self, value: pulumi.Input[int]):
        pulumi.set(self, "retransmitted_packets", value)


@pulumi.input_type
class HostAnomaliesNetworkUtilizationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 thresholds: Optional[pulumi.Input['HostAnomaliesNetworkUtilizationThresholdsArgs']] = None):
        pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['HostAnomaliesNetworkUtilizationThresholdsArgs']]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['HostAnomaliesNetworkUtilizationThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HostAnomaliesNetworkUtilizationThresholdsArgs:
    def __init__(__self__, *,
                 utilization: pulumi.Input[int]):
        pulumi.set(__self__, "utilization", utilization)

    @property
    @pulumi.getter
    def utilization(self) -> pulumi.Input[int]:
        return pulumi.get(self, "utilization")

    @utilization.setter
    def utilization(self, value: pulumi.Input[int]):
        pulumi.set(self, "utilization", value)


@pulumi.input_type
class HostAnomaliesV2HostArgs:
    def __init__(__self__, *,
                 connection_lost_detection: pulumi.Input['HostAnomaliesV2HostConnectionLostDetectionArgs'],
                 high_cpu_saturation_detection: pulumi.Input['HostAnomaliesV2HostHighCpuSaturationDetectionArgs'],
                 high_gc_activity_detection: pulumi.Input['HostAnomaliesV2HostHighGcActivityDetectionArgs'],
                 high_memory_detection: pulumi.Input['HostAnomaliesV2HostHighMemoryDetectionArgs'],
                 high_system_load_detection: pulumi.Input['HostAnomaliesV2HostHighSystemLoadDetectionArgs'],
                 out_of_memory_detection: pulumi.Input['HostAnomaliesV2HostOutOfMemoryDetectionArgs'],
                 out_of_threads_detection: pulumi.Input['HostAnomaliesV2HostOutOfThreadsDetectionArgs']):
        """
        :param pulumi.Input['HostAnomaliesV2HostConnectionLostDetectionArgs'] connection_lost_detection: no documentation available
        :param pulumi.Input['HostAnomaliesV2HostHighCpuSaturationDetectionArgs'] high_cpu_saturation_detection: no documentation available
        :param pulumi.Input['HostAnomaliesV2HostHighGcActivityDetectionArgs'] high_gc_activity_detection: no documentation available
        :param pulumi.Input['HostAnomaliesV2HostHighMemoryDetectionArgs'] high_memory_detection: no documentation available
        :param pulumi.Input['HostAnomaliesV2HostHighSystemLoadDetectionArgs'] high_system_load_detection: no documentation available
        :param pulumi.Input['HostAnomaliesV2HostOutOfMemoryDetectionArgs'] out_of_memory_detection: no documentation available
        :param pulumi.Input['HostAnomaliesV2HostOutOfThreadsDetectionArgs'] out_of_threads_detection: no documentation available
        """
        pulumi.set(__self__, "connection_lost_detection", connection_lost_detection)
        pulumi.set(__self__, "high_cpu_saturation_detection", high_cpu_saturation_detection)
        pulumi.set(__self__, "high_gc_activity_detection", high_gc_activity_detection)
        pulumi.set(__self__, "high_memory_detection", high_memory_detection)
        pulumi.set(__self__, "high_system_load_detection", high_system_load_detection)
        pulumi.set(__self__, "out_of_memory_detection", out_of_memory_detection)
        pulumi.set(__self__, "out_of_threads_detection", out_of_threads_detection)

    @property
    @pulumi.getter(name="connectionLostDetection")
    def connection_lost_detection(self) -> pulumi.Input['HostAnomaliesV2HostConnectionLostDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "connection_lost_detection")

    @connection_lost_detection.setter
    def connection_lost_detection(self, value: pulumi.Input['HostAnomaliesV2HostConnectionLostDetectionArgs']):
        pulumi.set(self, "connection_lost_detection", value)

    @property
    @pulumi.getter(name="highCpuSaturationDetection")
    def high_cpu_saturation_detection(self) -> pulumi.Input['HostAnomaliesV2HostHighCpuSaturationDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_cpu_saturation_detection")

    @high_cpu_saturation_detection.setter
    def high_cpu_saturation_detection(self, value: pulumi.Input['HostAnomaliesV2HostHighCpuSaturationDetectionArgs']):
        pulumi.set(self, "high_cpu_saturation_detection", value)

    @property
    @pulumi.getter(name="highGcActivityDetection")
    def high_gc_activity_detection(self) -> pulumi.Input['HostAnomaliesV2HostHighGcActivityDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_gc_activity_detection")

    @high_gc_activity_detection.setter
    def high_gc_activity_detection(self, value: pulumi.Input['HostAnomaliesV2HostHighGcActivityDetectionArgs']):
        pulumi.set(self, "high_gc_activity_detection", value)

    @property
    @pulumi.getter(name="highMemoryDetection")
    def high_memory_detection(self) -> pulumi.Input['HostAnomaliesV2HostHighMemoryDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_memory_detection")

    @high_memory_detection.setter
    def high_memory_detection(self, value: pulumi.Input['HostAnomaliesV2HostHighMemoryDetectionArgs']):
        pulumi.set(self, "high_memory_detection", value)

    @property
    @pulumi.getter(name="highSystemLoadDetection")
    def high_system_load_detection(self) -> pulumi.Input['HostAnomaliesV2HostHighSystemLoadDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_system_load_detection")

    @high_system_load_detection.setter
    def high_system_load_detection(self, value: pulumi.Input['HostAnomaliesV2HostHighSystemLoadDetectionArgs']):
        pulumi.set(self, "high_system_load_detection", value)

    @property
    @pulumi.getter(name="outOfMemoryDetection")
    def out_of_memory_detection(self) -> pulumi.Input['HostAnomaliesV2HostOutOfMemoryDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "out_of_memory_detection")

    @out_of_memory_detection.setter
    def out_of_memory_detection(self, value: pulumi.Input['HostAnomaliesV2HostOutOfMemoryDetectionArgs']):
        pulumi.set(self, "out_of_memory_detection", value)

    @property
    @pulumi.getter(name="outOfThreadsDetection")
    def out_of_threads_detection(self) -> pulumi.Input['HostAnomaliesV2HostOutOfThreadsDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "out_of_threads_detection")

    @out_of_threads_detection.setter
    def out_of_threads_detection(self, value: pulumi.Input['HostAnomaliesV2HostOutOfThreadsDetectionArgs']):
        pulumi.set(self, "out_of_threads_detection", value)


@pulumi.input_type
class HostAnomaliesV2HostConnectionLostDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 on_graceful_shutdowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if on_graceful_shutdowns is not None:
            pulumi.set(__self__, "on_graceful_shutdowns", on_graceful_shutdowns)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="onGracefulShutdowns")
    def on_graceful_shutdowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "on_graceful_shutdowns")

    @on_graceful_shutdowns.setter
    def on_graceful_shutdowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "on_graceful_shutdowns", value)


@pulumi.input_type
class HostAnomaliesV2HostHighCpuSaturationDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 cpu_saturation: pulumi.Input[int],
                 event_thresholds: pulumi.Input['HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(__self__, "cpu_saturation", cpu_saturation)
        pulumi.set(__self__, "event_thresholds", event_thresholds)

    @property
    @pulumi.getter(name="cpuSaturation")
    def cpu_saturation(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cpu_saturation")

    @cpu_saturation.setter
    def cpu_saturation(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu_saturation", value)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)


@pulumi.input_type
class HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostAnomaliesV2HostHighGcActivityDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 event_thresholds: pulumi.Input['HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholdsArgs'],
                 gc_suspension_percentage: pulumi.Input[int],
                 gc_time_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "event_thresholds", event_thresholds)
        pulumi.set(__self__, "gc_suspension_percentage", gc_suspension_percentage)
        pulumi.set(__self__, "gc_time_percentage", gc_time_percentage)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)

    @property
    @pulumi.getter(name="gcSuspensionPercentage")
    def gc_suspension_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "gc_suspension_percentage")

    @gc_suspension_percentage.setter
    def gc_suspension_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "gc_suspension_percentage", value)

    @property
    @pulumi.getter(name="gcTimePercentage")
    def gc_time_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "gc_time_percentage")

    @gc_time_percentage.setter
    def gc_time_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "gc_time_percentage", value)


@pulumi.input_type
class HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostAnomaliesV2HostHighMemoryDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 event_thresholds: pulumi.Input['HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholdsArgs'],
                 page_faults_per_second_non_windows: pulumi.Input[int],
                 page_faults_per_second_windows: pulumi.Input[int],
                 used_memory_percentage_non_windows: pulumi.Input[int],
                 used_memory_percentage_windows: pulumi.Input[int]):
        pulumi.set(__self__, "event_thresholds", event_thresholds)
        pulumi.set(__self__, "page_faults_per_second_non_windows", page_faults_per_second_non_windows)
        pulumi.set(__self__, "page_faults_per_second_windows", page_faults_per_second_windows)
        pulumi.set(__self__, "used_memory_percentage_non_windows", used_memory_percentage_non_windows)
        pulumi.set(__self__, "used_memory_percentage_windows", used_memory_percentage_windows)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)

    @property
    @pulumi.getter(name="pageFaultsPerSecondNonWindows")
    def page_faults_per_second_non_windows(self) -> pulumi.Input[int]:
        return pulumi.get(self, "page_faults_per_second_non_windows")

    @page_faults_per_second_non_windows.setter
    def page_faults_per_second_non_windows(self, value: pulumi.Input[int]):
        pulumi.set(self, "page_faults_per_second_non_windows", value)

    @property
    @pulumi.getter(name="pageFaultsPerSecondWindows")
    def page_faults_per_second_windows(self) -> pulumi.Input[int]:
        return pulumi.get(self, "page_faults_per_second_windows")

    @page_faults_per_second_windows.setter
    def page_faults_per_second_windows(self, value: pulumi.Input[int]):
        pulumi.set(self, "page_faults_per_second_windows", value)

    @property
    @pulumi.getter(name="usedMemoryPercentageNonWindows")
    def used_memory_percentage_non_windows(self) -> pulumi.Input[int]:
        return pulumi.get(self, "used_memory_percentage_non_windows")

    @used_memory_percentage_non_windows.setter
    def used_memory_percentage_non_windows(self, value: pulumi.Input[int]):
        pulumi.set(self, "used_memory_percentage_non_windows", value)

    @property
    @pulumi.getter(name="usedMemoryPercentageWindows")
    def used_memory_percentage_windows(self) -> pulumi.Input[int]:
        return pulumi.get(self, "used_memory_percentage_windows")

    @used_memory_percentage_windows.setter
    def used_memory_percentage_windows(self, value: pulumi.Input[int]):
        pulumi.set(self, "used_memory_percentage_windows", value)


@pulumi.input_type
class HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostAnomaliesV2HostHighSystemLoadDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 event_thresholds: pulumi.Input['HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholdsArgs'],
                 system_load: pulumi.Input[float]):
        pulumi.set(__self__, "event_thresholds", event_thresholds)
        pulumi.set(__self__, "system_load", system_load)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)

    @property
    @pulumi.getter(name="systemLoad")
    def system_load(self) -> pulumi.Input[float]:
        return pulumi.get(self, "system_load")

    @system_load.setter
    def system_load(self, value: pulumi.Input[float]):
        pulumi.set(self, "system_load", value)


@pulumi.input_type
class HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostAnomaliesV2HostOutOfMemoryDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 event_thresholds: pulumi.Input['HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholdsArgs'],
                 out_of_memory_exceptions_number: pulumi.Input[int]):
        pulumi.set(__self__, "event_thresholds", event_thresholds)
        pulumi.set(__self__, "out_of_memory_exceptions_number", out_of_memory_exceptions_number)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)

    @property
    @pulumi.getter(name="outOfMemoryExceptionsNumber")
    def out_of_memory_exceptions_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "out_of_memory_exceptions_number")

    @out_of_memory_exceptions_number.setter
    def out_of_memory_exceptions_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "out_of_memory_exceptions_number", value)


@pulumi.input_type
class HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostAnomaliesV2HostOutOfThreadsDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 event_thresholds: pulumi.Input['HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholdsArgs'],
                 out_of_threads_exceptions_number: pulumi.Input[int]):
        pulumi.set(__self__, "event_thresholds", event_thresholds)
        pulumi.set(__self__, "out_of_threads_exceptions_number", out_of_threads_exceptions_number)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)

    @property
    @pulumi.getter(name="outOfThreadsExceptionsNumber")
    def out_of_threads_exceptions_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "out_of_threads_exceptions_number")

    @out_of_threads_exceptions_number.setter
    def out_of_threads_exceptions_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "out_of_threads_exceptions_number", value)


@pulumi.input_type
class HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostAnomaliesV2NetworkArgs:
    def __init__(__self__, *,
                 high_network_detection: pulumi.Input['HostAnomaliesV2NetworkHighNetworkDetectionArgs'],
                 network_dropped_packets_detection: pulumi.Input['HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionArgs'],
                 network_errors_detection: pulumi.Input['HostAnomaliesV2NetworkNetworkErrorsDetectionArgs'],
                 network_high_retransmission_detection: pulumi.Input['HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionArgs'],
                 network_tcp_problems_detection: pulumi.Input['HostAnomaliesV2NetworkNetworkTcpProblemsDetectionArgs']):
        """
        :param pulumi.Input['HostAnomaliesV2NetworkHighNetworkDetectionArgs'] high_network_detection: no documentation available
        :param pulumi.Input['HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionArgs'] network_dropped_packets_detection: no documentation available
        :param pulumi.Input['HostAnomaliesV2NetworkNetworkErrorsDetectionArgs'] network_errors_detection: no documentation available
        :param pulumi.Input['HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionArgs'] network_high_retransmission_detection: no documentation available
        :param pulumi.Input['HostAnomaliesV2NetworkNetworkTcpProblemsDetectionArgs'] network_tcp_problems_detection: no documentation available
        """
        pulumi.set(__self__, "high_network_detection", high_network_detection)
        pulumi.set(__self__, "network_dropped_packets_detection", network_dropped_packets_detection)
        pulumi.set(__self__, "network_errors_detection", network_errors_detection)
        pulumi.set(__self__, "network_high_retransmission_detection", network_high_retransmission_detection)
        pulumi.set(__self__, "network_tcp_problems_detection", network_tcp_problems_detection)

    @property
    @pulumi.getter(name="highNetworkDetection")
    def high_network_detection(self) -> pulumi.Input['HostAnomaliesV2NetworkHighNetworkDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "high_network_detection")

    @high_network_detection.setter
    def high_network_detection(self, value: pulumi.Input['HostAnomaliesV2NetworkHighNetworkDetectionArgs']):
        pulumi.set(self, "high_network_detection", value)

    @property
    @pulumi.getter(name="networkDroppedPacketsDetection")
    def network_dropped_packets_detection(self) -> pulumi.Input['HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "network_dropped_packets_detection")

    @network_dropped_packets_detection.setter
    def network_dropped_packets_detection(self, value: pulumi.Input['HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionArgs']):
        pulumi.set(self, "network_dropped_packets_detection", value)

    @property
    @pulumi.getter(name="networkErrorsDetection")
    def network_errors_detection(self) -> pulumi.Input['HostAnomaliesV2NetworkNetworkErrorsDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "network_errors_detection")

    @network_errors_detection.setter
    def network_errors_detection(self, value: pulumi.Input['HostAnomaliesV2NetworkNetworkErrorsDetectionArgs']):
        pulumi.set(self, "network_errors_detection", value)

    @property
    @pulumi.getter(name="networkHighRetransmissionDetection")
    def network_high_retransmission_detection(self) -> pulumi.Input['HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "network_high_retransmission_detection")

    @network_high_retransmission_detection.setter
    def network_high_retransmission_detection(self, value: pulumi.Input['HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionArgs']):
        pulumi.set(self, "network_high_retransmission_detection", value)

    @property
    @pulumi.getter(name="networkTcpProblemsDetection")
    def network_tcp_problems_detection(self) -> pulumi.Input['HostAnomaliesV2NetworkNetworkTcpProblemsDetectionArgs']:
        """
        no documentation available
        """
        return pulumi.get(self, "network_tcp_problems_detection")

    @network_tcp_problems_detection.setter
    def network_tcp_problems_detection(self, value: pulumi.Input['HostAnomaliesV2NetworkNetworkTcpProblemsDetectionArgs']):
        pulumi.set(self, "network_tcp_problems_detection", value)


@pulumi.input_type
class HostAnomaliesV2NetworkHighNetworkDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 errors_percentage: pulumi.Input[int],
                 event_thresholds: pulumi.Input['HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(__self__, "errors_percentage", errors_percentage)
        pulumi.set(__self__, "event_thresholds", event_thresholds)

    @property
    @pulumi.getter(name="errorsPercentage")
    def errors_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "errors_percentage")

    @errors_percentage.setter
    def errors_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "errors_percentage", value)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)


@pulumi.input_type
class HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 dropped_packets_percentage: pulumi.Input[int],
                 event_thresholds: pulumi.Input['HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholdsArgs'],
                 total_packets_rate: pulumi.Input[int]):
        pulumi.set(__self__, "dropped_packets_percentage", dropped_packets_percentage)
        pulumi.set(__self__, "event_thresholds", event_thresholds)
        pulumi.set(__self__, "total_packets_rate", total_packets_rate)

    @property
    @pulumi.getter(name="droppedPacketsPercentage")
    def dropped_packets_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dropped_packets_percentage")

    @dropped_packets_percentage.setter
    def dropped_packets_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "dropped_packets_percentage", value)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)

    @property
    @pulumi.getter(name="totalPacketsRate")
    def total_packets_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "total_packets_rate")

    @total_packets_rate.setter
    def total_packets_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "total_packets_rate", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkErrorsDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 errors_percentage: pulumi.Input[int],
                 event_thresholds: pulumi.Input['HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholdsArgs'],
                 total_packets_rate: pulumi.Input[int]):
        pulumi.set(__self__, "errors_percentage", errors_percentage)
        pulumi.set(__self__, "event_thresholds", event_thresholds)
        pulumi.set(__self__, "total_packets_rate", total_packets_rate)

    @property
    @pulumi.getter(name="errorsPercentage")
    def errors_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "errors_percentage")

    @errors_percentage.setter
    def errors_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "errors_percentage", value)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)

    @property
    @pulumi.getter(name="totalPacketsRate")
    def total_packets_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "total_packets_rate")

    @total_packets_rate.setter
    def total_packets_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "total_packets_rate", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 event_thresholds: pulumi.Input['HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholdsArgs'],
                 retransmission_rate_percentage: pulumi.Input[int],
                 retransmitted_packets_number_per_minute: pulumi.Input[int]):
        pulumi.set(__self__, "event_thresholds", event_thresholds)
        pulumi.set(__self__, "retransmission_rate_percentage", retransmission_rate_percentage)
        pulumi.set(__self__, "retransmitted_packets_number_per_minute", retransmitted_packets_number_per_minute)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)

    @property
    @pulumi.getter(name="retransmissionRatePercentage")
    def retransmission_rate_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "retransmission_rate_percentage")

    @retransmission_rate_percentage.setter
    def retransmission_rate_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "retransmission_rate_percentage", value)

    @property
    @pulumi.getter(name="retransmittedPacketsNumberPerMinute")
    def retransmitted_packets_number_per_minute(self) -> pulumi.Input[int]:
        return pulumi.get(self, "retransmitted_packets_number_per_minute")

    @retransmitted_packets_number_per_minute.setter
    def retransmitted_packets_number_per_minute(self, value: pulumi.Input[int]):
        pulumi.set(self, "retransmitted_packets_number_per_minute", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkTcpProblemsDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsArgs']]:
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 event_thresholds: pulumi.Input['HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholdsArgs'],
                 failed_connections_number_per_minute: pulumi.Input[int],
                 new_connection_failures_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "event_thresholds", event_thresholds)
        pulumi.set(__self__, "failed_connections_number_per_minute", failed_connections_number_per_minute)
        pulumi.set(__self__, "new_connection_failures_percentage", new_connection_failures_percentage)

    @property
    @pulumi.getter(name="eventThresholds")
    def event_thresholds(self) -> pulumi.Input['HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholdsArgs']:
        return pulumi.get(self, "event_thresholds")

    @event_thresholds.setter
    def event_thresholds(self, value: pulumi.Input['HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholdsArgs']):
        pulumi.set(self, "event_thresholds", value)

    @property
    @pulumi.getter(name="failedConnectionsNumberPerMinute")
    def failed_connections_number_per_minute(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failed_connections_number_per_minute")

    @failed_connections_number_per_minute.setter
    def failed_connections_number_per_minute(self, value: pulumi.Input[int]):
        pulumi.set(self, "failed_connections_number_per_minute", value)

    @property
    @pulumi.getter(name="newConnectionFailuresPercentage")
    def new_connection_failures_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "new_connection_failures_percentage")

    @new_connection_failures_percentage.setter
    def new_connection_failures_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "new_connection_failures_percentage", value)


@pulumi.input_type
class HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholdsArgs:
    def __init__(__self__, *,
                 dealerting_evaluation_window: pulumi.Input[int],
                 dealerting_samples: pulumi.Input[int],
                 violating_evaluation_window: pulumi.Input[int],
                 violating_samples: pulumi.Input[int]):
        pulumi.set(__self__, "dealerting_evaluation_window", dealerting_evaluation_window)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "violating_evaluation_window", violating_evaluation_window)
        pulumi.set(__self__, "violating_samples", violating_samples)

    @property
    @pulumi.getter(name="dealertingEvaluationWindow")
    def dealerting_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_evaluation_window")

    @dealerting_evaluation_window.setter
    def dealerting_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_evaluation_window", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter(name="violatingEvaluationWindow")
    def violating_evaluation_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_evaluation_window")

    @violating_evaluation_window.setter
    def violating_evaluation_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_evaluation_window", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)


@pulumi.input_type
class HostNamingConditionArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionArgs']]]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class HostNamingConditionConditionArgs:
    def __init__(__self__, *,
                 application_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionApplicationTypeComparisonArgs']]]] = None,
                 application_types: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionApplicationTypeArgs']]]] = None,
                 azure_compute_mode_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureComputeModeComparisonArgs']]]] = None,
                 azure_compute_modes: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureComputeModeArgs']]]] = None,
                 azure_sku_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureSkuComparisionArgs']]]] = None,
                 azure_skus: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureSkusArgs']]]] = None,
                 base_comparison_basics: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBaseComparisonBasicArgs']]]] = None,
                 base_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBaseConditionKeyArgs']]]] = None,
                 bitness_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBitnessComparisionArgs']]]] = None,
                 bitnesses: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBitnessArgs']]]] = None,
                 cloud_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCloudTypeComparisonArgs']]]] = None,
                 cloud_types: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCloudTypeArgs']]]] = None,
                 comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionComparisonArgs']]]] = None,
                 custom_application_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomApplicationTypeComparisonArgs']]]] = None,
                 custom_application_types: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomApplicationTypeArgs']]]] = None,
                 custom_host_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomHostMetadataConditionKeyArgs']]]] = None,
                 custom_host_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomHostMetadataArgs']]]] = None,
                 custom_process_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs']]]] = None,
                 custom_process_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomProcessMetadataArgs']]]] = None,
                 database_topologies: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDatabaseTopologyArgs']]]] = None,
                 database_topology_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDatabaseTopologyComparisonArgs']]]] = None,
                 dcrum_decoder_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDcrumDecoderComparisonArgs']]]] = None,
                 dcrum_decoders: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDcrumDecoderArgs']]]] = None,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionEntityArgs']]]] = None,
                 entity_id_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionEntityIdComparisonArgs']]]] = None,
                 host_teches: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionHostTechArgs']]]] = None,
                 hypervisor_type_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionHypervisorTypeComparisionArgs']]]] = None,
                 hypervisors: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionHypervisorArgs']]]] = None,
                 indexed_name_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedNameComparisonArgs']]]] = None,
                 indexed_names: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedNameArgs']]]] = None,
                 indexed_string_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedStringComparisonArgs']]]] = None,
                 indexed_strings: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedStringArgs']]]] = None,
                 indexed_tag_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedTagComparisonArgs']]]] = None,
                 indexed_tags: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedTagArgs']]]] = None,
                 integer_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIntegerComparisonArgs']]]] = None,
                 integers: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIntegerArgs']]]] = None,
                 ipaddress_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIpaddressComparisonArgs']]]] = None,
                 ipaddresses: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIpaddressArgs']]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionKeyArgs']]]] = None,
                 mobile_platform_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionMobilePlatformComparisonArgs']]]] = None,
                 mobile_platforms: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionMobilePlatformArgs']]]] = None,
                 os_arches: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOsArchArgs']]]] = None,
                 os_types: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOsTypeArgs']]]] = None,
                 osarchitecture_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOsarchitectureComparisonArgs']]]] = None,
                 ostype_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOstypeComparisonArgs']]]] = None,
                 paas_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionPaasTypeComparisonArgs']]]] = None,
                 paas_types: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionPaasTypeArgs']]]] = None,
                 process_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionProcessMetadataConditionKeyArgs']]]] = None,
                 process_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionProcessMetadataArgs']]]] = None,
                 service_topologies: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTopologyArgs']]]] = None,
                 service_topology_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTopologyComparisonArgs']]]] = None,
                 service_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTypeComparisonArgs']]]] = None,
                 service_types: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTypeArgs']]]] = None,
                 simple_host_tech_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSimpleHostTechComparisonArgs']]]] = None,
                 simple_tech_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSimpleTechComparisonArgs']]]] = None,
                 string_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringComparisonArgs']]]] = None,
                 string_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringConditionKeyArgs']]]] = None,
                 string_keys: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringKeyArgs']]]] = None,
                 strings: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringArgs']]]] = None,
                 synthetic_engine_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSyntheticEngineTypeComparisonArgs']]]] = None,
                 synthetic_engines: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSyntheticEngineArgs']]]] = None,
                 tag_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionTagComparisonArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionTagArgs']]]] = None,
                 teches: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionTechArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if application_type_comparisons is not None:
            warnings.warn("""You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""application_type_comparisons is deprecated: You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.""")
        if application_type_comparisons is not None:
            pulumi.set(__self__, "application_type_comparisons", application_type_comparisons)
        if application_types is not None:
            pulumi.set(__self__, "application_types", application_types)
        if azure_compute_mode_comparisons is not None:
            pulumi.set(__self__, "azure_compute_mode_comparisons", azure_compute_mode_comparisons)
        if azure_compute_modes is not None:
            warnings.warn("""You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""azure_compute_modes is deprecated: You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.""")
        if azure_compute_modes is not None:
            pulumi.set(__self__, "azure_compute_modes", azure_compute_modes)
        if azure_sku_comparisions is not None:
            warnings.warn("""You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""azure_sku_comparisions is deprecated: You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.""")
        if azure_sku_comparisions is not None:
            pulumi.set(__self__, "azure_sku_comparisions", azure_sku_comparisions)
        if azure_skus is not None:
            pulumi.set(__self__, "azure_skus", azure_skus)
        if base_comparison_basics is not None:
            warnings.warn("""You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""base_comparison_basics is deprecated: You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.""")
        if base_comparison_basics is not None:
            pulumi.set(__self__, "base_comparison_basics", base_comparison_basics)
        if base_condition_keys is not None:
            warnings.warn("""'base_condition_key' is deprecated. You should use 'key'""", DeprecationWarning)
            pulumi.log.warn("""base_condition_keys is deprecated: 'base_condition_key' is deprecated. You should use 'key'""")
        if base_condition_keys is not None:
            pulumi.set(__self__, "base_condition_keys", base_condition_keys)
        if bitness_comparisions is not None:
            warnings.warn("""You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""bitness_comparisions is deprecated: You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.""")
        if bitness_comparisions is not None:
            pulumi.set(__self__, "bitness_comparisions", bitness_comparisions)
        if bitnesses is not None:
            pulumi.set(__self__, "bitnesses", bitnesses)
        if cloud_type_comparisons is not None:
            warnings.warn("""You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""cloud_type_comparisons is deprecated: You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.""")
        if cloud_type_comparisons is not None:
            pulumi.set(__self__, "cloud_type_comparisons", cloud_type_comparisons)
        if cloud_types is not None:
            pulumi.set(__self__, "cloud_types", cloud_types)
        if comparisons is not None:
            pulumi.set(__self__, "comparisons", comparisons)
        if custom_application_type_comparisons is not None:
            warnings.warn("""You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""custom_application_type_comparisons is deprecated: You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.""")
        if custom_application_type_comparisons is not None:
            pulumi.set(__self__, "custom_application_type_comparisons", custom_application_type_comparisons)
        if custom_application_types is not None:
            pulumi.set(__self__, "custom_application_types", custom_application_types)
        if custom_host_metadata_condition_keys is not None:
            warnings.warn("""'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'""", DeprecationWarning)
            pulumi.log.warn("""custom_host_metadata_condition_keys is deprecated: 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'""")
        if custom_host_metadata_condition_keys is not None:
            pulumi.set(__self__, "custom_host_metadata_condition_keys", custom_host_metadata_condition_keys)
        if custom_host_metadatas is not None:
            pulumi.set(__self__, "custom_host_metadatas", custom_host_metadatas)
        if custom_process_metadata_condition_keys is not None:
            warnings.warn("""'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'""", DeprecationWarning)
            pulumi.log.warn("""custom_process_metadata_condition_keys is deprecated: 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'""")
        if custom_process_metadata_condition_keys is not None:
            pulumi.set(__self__, "custom_process_metadata_condition_keys", custom_process_metadata_condition_keys)
        if custom_process_metadatas is not None:
            pulumi.set(__self__, "custom_process_metadatas", custom_process_metadatas)
        if database_topologies is not None:
            pulumi.set(__self__, "database_topologies", database_topologies)
        if database_topology_comparisons is not None:
            warnings.warn("""You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""database_topology_comparisons is deprecated: You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.""")
        if database_topology_comparisons is not None:
            pulumi.set(__self__, "database_topology_comparisons", database_topology_comparisons)
        if dcrum_decoder_comparisons is not None:
            warnings.warn("""You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""dcrum_decoder_comparisons is deprecated: You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.""")
        if dcrum_decoder_comparisons is not None:
            pulumi.set(__self__, "dcrum_decoder_comparisons", dcrum_decoder_comparisons)
        if dcrum_decoders is not None:
            pulumi.set(__self__, "dcrum_decoders", dcrum_decoders)
        if entities is not None:
            pulumi.set(__self__, "entities", entities)
        if entity_id_comparisons is not None:
            warnings.warn("""You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""entity_id_comparisons is deprecated: You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.""")
        if entity_id_comparisons is not None:
            pulumi.set(__self__, "entity_id_comparisons", entity_id_comparisons)
        if host_teches is not None:
            pulumi.set(__self__, "host_teches", host_teches)
        if hypervisor_type_comparisions is not None:
            warnings.warn("""`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead""", DeprecationWarning)
            pulumi.log.warn("""hypervisor_type_comparisions is deprecated: `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead""")
        if hypervisor_type_comparisions is not None:
            pulumi.set(__self__, "hypervisor_type_comparisions", hypervisor_type_comparisions)
        if hypervisors is not None:
            pulumi.set(__self__, "hypervisors", hypervisors)
        if indexed_name_comparisons is not None:
            warnings.warn("""You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_name_comparisons is deprecated: You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_name_comparisons is not None:
            pulumi.set(__self__, "indexed_name_comparisons", indexed_name_comparisons)
        if indexed_names is not None:
            pulumi.set(__self__, "indexed_names", indexed_names)
        if indexed_string_comparisons is not None:
            warnings.warn("""You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_string_comparisons is deprecated: You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_string_comparisons is not None:
            pulumi.set(__self__, "indexed_string_comparisons", indexed_string_comparisons)
        if indexed_strings is not None:
            pulumi.set(__self__, "indexed_strings", indexed_strings)
        if indexed_tag_comparisons is not None:
            warnings.warn("""You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_tag_comparisons is deprecated: You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_tag_comparisons is not None:
            pulumi.set(__self__, "indexed_tag_comparisons", indexed_tag_comparisons)
        if indexed_tags is not None:
            pulumi.set(__self__, "indexed_tags", indexed_tags)
        if integer_comparisons is not None:
            warnings.warn("""You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""integer_comparisons is deprecated: You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.""")
        if integer_comparisons is not None:
            pulumi.set(__self__, "integer_comparisons", integer_comparisons)
        if integers is not None:
            pulumi.set(__self__, "integers", integers)
        if ipaddress_comparisons is not None:
            warnings.warn("""You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""ipaddress_comparisons is deprecated: You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.""")
        if ipaddress_comparisons is not None:
            pulumi.set(__self__, "ipaddress_comparisons", ipaddress_comparisons)
        if ipaddresses is not None:
            pulumi.set(__self__, "ipaddresses", ipaddresses)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if mobile_platform_comparisons is not None:
            warnings.warn("""You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""mobile_platform_comparisons is deprecated: You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.""")
        if mobile_platform_comparisons is not None:
            pulumi.set(__self__, "mobile_platform_comparisons", mobile_platform_comparisons)
        if mobile_platforms is not None:
            pulumi.set(__self__, "mobile_platforms", mobile_platforms)
        if os_arches is not None:
            pulumi.set(__self__, "os_arches", os_arches)
        if os_types is not None:
            pulumi.set(__self__, "os_types", os_types)
        if osarchitecture_comparisons is not None:
            warnings.warn("""You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""osarchitecture_comparisons is deprecated: You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.""")
        if osarchitecture_comparisons is not None:
            pulumi.set(__self__, "osarchitecture_comparisons", osarchitecture_comparisons)
        if ostype_comparisons is not None:
            warnings.warn("""You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""ostype_comparisons is deprecated: You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.""")
        if ostype_comparisons is not None:
            pulumi.set(__self__, "ostype_comparisons", ostype_comparisons)
        if paas_type_comparisons is not None:
            warnings.warn("""You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""paas_type_comparisons is deprecated: You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.""")
        if paas_type_comparisons is not None:
            pulumi.set(__self__, "paas_type_comparisons", paas_type_comparisons)
        if paas_types is not None:
            pulumi.set(__self__, "paas_types", paas_types)
        if process_metadata_condition_keys is not None:
            warnings.warn("""'process_metadata_condition_key' is deprecated. You should use 'process_metadata'""", DeprecationWarning)
            pulumi.log.warn("""process_metadata_condition_keys is deprecated: 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'""")
        if process_metadata_condition_keys is not None:
            pulumi.set(__self__, "process_metadata_condition_keys", process_metadata_condition_keys)
        if process_metadatas is not None:
            pulumi.set(__self__, "process_metadatas", process_metadatas)
        if service_topologies is not None:
            pulumi.set(__self__, "service_topologies", service_topologies)
        if service_topology_comparisons is not None:
            warnings.warn("""You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""service_topology_comparisons is deprecated: You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.""")
        if service_topology_comparisons is not None:
            pulumi.set(__self__, "service_topology_comparisons", service_topology_comparisons)
        if service_type_comparisons is not None:
            warnings.warn("""You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""service_type_comparisons is deprecated: You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.""")
        if service_type_comparisons is not None:
            pulumi.set(__self__, "service_type_comparisons", service_type_comparisons)
        if service_types is not None:
            pulumi.set(__self__, "service_types", service_types)
        if simple_host_tech_comparisons is not None:
            warnings.warn("""You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""simple_host_tech_comparisons is deprecated: You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.""")
        if simple_host_tech_comparisons is not None:
            pulumi.set(__self__, "simple_host_tech_comparisons", simple_host_tech_comparisons)
        if simple_tech_comparisons is not None:
            warnings.warn("""You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""simple_tech_comparisons is deprecated: You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.""")
        if simple_tech_comparisons is not None:
            pulumi.set(__self__, "simple_tech_comparisons", simple_tech_comparisons)
        if string_comparisons is not None:
            warnings.warn("""You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""string_comparisons is deprecated: You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.""")
        if string_comparisons is not None:
            pulumi.set(__self__, "string_comparisons", string_comparisons)
        if string_condition_keys is not None:
            warnings.warn("""'string_condition_key' is deprecated. You should use 'string_key'""", DeprecationWarning)
            pulumi.log.warn("""string_condition_keys is deprecated: 'string_condition_key' is deprecated. You should use 'string_key'""")
        if string_condition_keys is not None:
            pulumi.set(__self__, "string_condition_keys", string_condition_keys)
        if string_keys is not None:
            pulumi.set(__self__, "string_keys", string_keys)
        if strings is not None:
            pulumi.set(__self__, "strings", strings)
        if synthetic_engine_type_comparisons is not None:
            warnings.warn("""You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""synthetic_engine_type_comparisons is deprecated: You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.""")
        if synthetic_engine_type_comparisons is not None:
            pulumi.set(__self__, "synthetic_engine_type_comparisons", synthetic_engine_type_comparisons)
        if synthetic_engines is not None:
            pulumi.set(__self__, "synthetic_engines", synthetic_engines)
        if tag_comparisons is not None:
            warnings.warn("""You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""tag_comparisons is deprecated: You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.""")
        if tag_comparisons is not None:
            pulumi.set(__self__, "tag_comparisons", tag_comparisons)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if teches is not None:
            pulumi.set(__self__, "teches", teches)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="applicationTypeComparisons")
    def application_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionApplicationTypeComparisonArgs']]]]:
        return pulumi.get(self, "application_type_comparisons")

    @application_type_comparisons.setter
    def application_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionApplicationTypeComparisonArgs']]]]):
        pulumi.set(self, "application_type_comparisons", value)

    @property
    @pulumi.getter(name="applicationTypes")
    def application_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionApplicationTypeArgs']]]]:
        return pulumi.get(self, "application_types")

    @application_types.setter
    def application_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionApplicationTypeArgs']]]]):
        pulumi.set(self, "application_types", value)

    @property
    @pulumi.getter(name="azureComputeModeComparisons")
    def azure_compute_mode_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureComputeModeComparisonArgs']]]]:
        return pulumi.get(self, "azure_compute_mode_comparisons")

    @azure_compute_mode_comparisons.setter
    def azure_compute_mode_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureComputeModeComparisonArgs']]]]):
        pulumi.set(self, "azure_compute_mode_comparisons", value)

    @property
    @pulumi.getter(name="azureComputeModes")
    def azure_compute_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureComputeModeArgs']]]]:
        return pulumi.get(self, "azure_compute_modes")

    @azure_compute_modes.setter
    def azure_compute_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureComputeModeArgs']]]]):
        pulumi.set(self, "azure_compute_modes", value)

    @property
    @pulumi.getter(name="azureSkuComparisions")
    def azure_sku_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureSkuComparisionArgs']]]]:
        return pulumi.get(self, "azure_sku_comparisions")

    @azure_sku_comparisions.setter
    def azure_sku_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureSkuComparisionArgs']]]]):
        pulumi.set(self, "azure_sku_comparisions", value)

    @property
    @pulumi.getter(name="azureSkus")
    def azure_skus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureSkusArgs']]]]:
        return pulumi.get(self, "azure_skus")

    @azure_skus.setter
    def azure_skus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionAzureSkusArgs']]]]):
        pulumi.set(self, "azure_skus", value)

    @property
    @pulumi.getter(name="baseComparisonBasics")
    def base_comparison_basics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBaseComparisonBasicArgs']]]]:
        return pulumi.get(self, "base_comparison_basics")

    @base_comparison_basics.setter
    def base_comparison_basics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBaseComparisonBasicArgs']]]]):
        pulumi.set(self, "base_comparison_basics", value)

    @property
    @pulumi.getter(name="baseConditionKeys")
    def base_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBaseConditionKeyArgs']]]]:
        return pulumi.get(self, "base_condition_keys")

    @base_condition_keys.setter
    def base_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBaseConditionKeyArgs']]]]):
        pulumi.set(self, "base_condition_keys", value)

    @property
    @pulumi.getter(name="bitnessComparisions")
    def bitness_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBitnessComparisionArgs']]]]:
        return pulumi.get(self, "bitness_comparisions")

    @bitness_comparisions.setter
    def bitness_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBitnessComparisionArgs']]]]):
        pulumi.set(self, "bitness_comparisions", value)

    @property
    @pulumi.getter
    def bitnesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBitnessArgs']]]]:
        return pulumi.get(self, "bitnesses")

    @bitnesses.setter
    def bitnesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionBitnessArgs']]]]):
        pulumi.set(self, "bitnesses", value)

    @property
    @pulumi.getter(name="cloudTypeComparisons")
    def cloud_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCloudTypeComparisonArgs']]]]:
        return pulumi.get(self, "cloud_type_comparisons")

    @cloud_type_comparisons.setter
    def cloud_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCloudTypeComparisonArgs']]]]):
        pulumi.set(self, "cloud_type_comparisons", value)

    @property
    @pulumi.getter(name="cloudTypes")
    def cloud_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCloudTypeArgs']]]]:
        return pulumi.get(self, "cloud_types")

    @cloud_types.setter
    def cloud_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCloudTypeArgs']]]]):
        pulumi.set(self, "cloud_types", value)

    @property
    @pulumi.getter
    def comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionComparisonArgs']]]]:
        return pulumi.get(self, "comparisons")

    @comparisons.setter
    def comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionComparisonArgs']]]]):
        pulumi.set(self, "comparisons", value)

    @property
    @pulumi.getter(name="customApplicationTypeComparisons")
    def custom_application_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomApplicationTypeComparisonArgs']]]]:
        return pulumi.get(self, "custom_application_type_comparisons")

    @custom_application_type_comparisons.setter
    def custom_application_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomApplicationTypeComparisonArgs']]]]):
        pulumi.set(self, "custom_application_type_comparisons", value)

    @property
    @pulumi.getter(name="customApplicationTypes")
    def custom_application_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomApplicationTypeArgs']]]]:
        return pulumi.get(self, "custom_application_types")

    @custom_application_types.setter
    def custom_application_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomApplicationTypeArgs']]]]):
        pulumi.set(self, "custom_application_types", value)

    @property
    @pulumi.getter(name="customHostMetadataConditionKeys")
    def custom_host_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomHostMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "custom_host_metadata_condition_keys")

    @custom_host_metadata_condition_keys.setter
    def custom_host_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomHostMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "custom_host_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="customHostMetadatas")
    def custom_host_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomHostMetadataArgs']]]]:
        return pulumi.get(self, "custom_host_metadatas")

    @custom_host_metadatas.setter
    def custom_host_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomHostMetadataArgs']]]]):
        pulumi.set(self, "custom_host_metadatas", value)

    @property
    @pulumi.getter(name="customProcessMetadataConditionKeys")
    def custom_process_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "custom_process_metadata_condition_keys")

    @custom_process_metadata_condition_keys.setter
    def custom_process_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "custom_process_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="customProcessMetadatas")
    def custom_process_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomProcessMetadataArgs']]]]:
        return pulumi.get(self, "custom_process_metadatas")

    @custom_process_metadatas.setter
    def custom_process_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionCustomProcessMetadataArgs']]]]):
        pulumi.set(self, "custom_process_metadatas", value)

    @property
    @pulumi.getter(name="databaseTopologies")
    def database_topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDatabaseTopologyArgs']]]]:
        return pulumi.get(self, "database_topologies")

    @database_topologies.setter
    def database_topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDatabaseTopologyArgs']]]]):
        pulumi.set(self, "database_topologies", value)

    @property
    @pulumi.getter(name="databaseTopologyComparisons")
    def database_topology_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDatabaseTopologyComparisonArgs']]]]:
        return pulumi.get(self, "database_topology_comparisons")

    @database_topology_comparisons.setter
    def database_topology_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDatabaseTopologyComparisonArgs']]]]):
        pulumi.set(self, "database_topology_comparisons", value)

    @property
    @pulumi.getter(name="dcrumDecoderComparisons")
    def dcrum_decoder_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDcrumDecoderComparisonArgs']]]]:
        return pulumi.get(self, "dcrum_decoder_comparisons")

    @dcrum_decoder_comparisons.setter
    def dcrum_decoder_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDcrumDecoderComparisonArgs']]]]):
        pulumi.set(self, "dcrum_decoder_comparisons", value)

    @property
    @pulumi.getter(name="dcrumDecoders")
    def dcrum_decoders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDcrumDecoderArgs']]]]:
        return pulumi.get(self, "dcrum_decoders")

    @dcrum_decoders.setter
    def dcrum_decoders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionDcrumDecoderArgs']]]]):
        pulumi.set(self, "dcrum_decoders", value)

    @property
    @pulumi.getter
    def entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionEntityArgs']]]]:
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionEntityArgs']]]]):
        pulumi.set(self, "entities", value)

    @property
    @pulumi.getter(name="entityIdComparisons")
    def entity_id_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionEntityIdComparisonArgs']]]]:
        return pulumi.get(self, "entity_id_comparisons")

    @entity_id_comparisons.setter
    def entity_id_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionEntityIdComparisonArgs']]]]):
        pulumi.set(self, "entity_id_comparisons", value)

    @property
    @pulumi.getter(name="hostTeches")
    def host_teches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionHostTechArgs']]]]:
        return pulumi.get(self, "host_teches")

    @host_teches.setter
    def host_teches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionHostTechArgs']]]]):
        pulumi.set(self, "host_teches", value)

    @property
    @pulumi.getter(name="hypervisorTypeComparisions")
    def hypervisor_type_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionHypervisorTypeComparisionArgs']]]]:
        return pulumi.get(self, "hypervisor_type_comparisions")

    @hypervisor_type_comparisions.setter
    def hypervisor_type_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionHypervisorTypeComparisionArgs']]]]):
        pulumi.set(self, "hypervisor_type_comparisions", value)

    @property
    @pulumi.getter
    def hypervisors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionHypervisorArgs']]]]:
        return pulumi.get(self, "hypervisors")

    @hypervisors.setter
    def hypervisors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionHypervisorArgs']]]]):
        pulumi.set(self, "hypervisors", value)

    @property
    @pulumi.getter(name="indexedNameComparisons")
    def indexed_name_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedNameComparisonArgs']]]]:
        return pulumi.get(self, "indexed_name_comparisons")

    @indexed_name_comparisons.setter
    def indexed_name_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedNameComparisonArgs']]]]):
        pulumi.set(self, "indexed_name_comparisons", value)

    @property
    @pulumi.getter(name="indexedNames")
    def indexed_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedNameArgs']]]]:
        return pulumi.get(self, "indexed_names")

    @indexed_names.setter
    def indexed_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedNameArgs']]]]):
        pulumi.set(self, "indexed_names", value)

    @property
    @pulumi.getter(name="indexedStringComparisons")
    def indexed_string_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedStringComparisonArgs']]]]:
        return pulumi.get(self, "indexed_string_comparisons")

    @indexed_string_comparisons.setter
    def indexed_string_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedStringComparisonArgs']]]]):
        pulumi.set(self, "indexed_string_comparisons", value)

    @property
    @pulumi.getter(name="indexedStrings")
    def indexed_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedStringArgs']]]]:
        return pulumi.get(self, "indexed_strings")

    @indexed_strings.setter
    def indexed_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedStringArgs']]]]):
        pulumi.set(self, "indexed_strings", value)

    @property
    @pulumi.getter(name="indexedTagComparisons")
    def indexed_tag_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedTagComparisonArgs']]]]:
        return pulumi.get(self, "indexed_tag_comparisons")

    @indexed_tag_comparisons.setter
    def indexed_tag_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedTagComparisonArgs']]]]):
        pulumi.set(self, "indexed_tag_comparisons", value)

    @property
    @pulumi.getter(name="indexedTags")
    def indexed_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedTagArgs']]]]:
        return pulumi.get(self, "indexed_tags")

    @indexed_tags.setter
    def indexed_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIndexedTagArgs']]]]):
        pulumi.set(self, "indexed_tags", value)

    @property
    @pulumi.getter(name="integerComparisons")
    def integer_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIntegerComparisonArgs']]]]:
        return pulumi.get(self, "integer_comparisons")

    @integer_comparisons.setter
    def integer_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIntegerComparisonArgs']]]]):
        pulumi.set(self, "integer_comparisons", value)

    @property
    @pulumi.getter
    def integers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIntegerArgs']]]]:
        return pulumi.get(self, "integers")

    @integers.setter
    def integers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIntegerArgs']]]]):
        pulumi.set(self, "integers", value)

    @property
    @pulumi.getter(name="ipaddressComparisons")
    def ipaddress_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIpaddressComparisonArgs']]]]:
        return pulumi.get(self, "ipaddress_comparisons")

    @ipaddress_comparisons.setter
    def ipaddress_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIpaddressComparisonArgs']]]]):
        pulumi.set(self, "ipaddress_comparisons", value)

    @property
    @pulumi.getter
    def ipaddresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIpaddressArgs']]]]:
        return pulumi.get(self, "ipaddresses")

    @ipaddresses.setter
    def ipaddresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionIpaddressArgs']]]]):
        pulumi.set(self, "ipaddresses", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionKeyArgs']]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="mobilePlatformComparisons")
    def mobile_platform_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionMobilePlatformComparisonArgs']]]]:
        return pulumi.get(self, "mobile_platform_comparisons")

    @mobile_platform_comparisons.setter
    def mobile_platform_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionMobilePlatformComparisonArgs']]]]):
        pulumi.set(self, "mobile_platform_comparisons", value)

    @property
    @pulumi.getter(name="mobilePlatforms")
    def mobile_platforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionMobilePlatformArgs']]]]:
        return pulumi.get(self, "mobile_platforms")

    @mobile_platforms.setter
    def mobile_platforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionMobilePlatformArgs']]]]):
        pulumi.set(self, "mobile_platforms", value)

    @property
    @pulumi.getter(name="osArches")
    def os_arches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOsArchArgs']]]]:
        return pulumi.get(self, "os_arches")

    @os_arches.setter
    def os_arches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOsArchArgs']]]]):
        pulumi.set(self, "os_arches", value)

    @property
    @pulumi.getter(name="osTypes")
    def os_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOsTypeArgs']]]]:
        return pulumi.get(self, "os_types")

    @os_types.setter
    def os_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOsTypeArgs']]]]):
        pulumi.set(self, "os_types", value)

    @property
    @pulumi.getter(name="osarchitectureComparisons")
    def osarchitecture_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOsarchitectureComparisonArgs']]]]:
        return pulumi.get(self, "osarchitecture_comparisons")

    @osarchitecture_comparisons.setter
    def osarchitecture_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOsarchitectureComparisonArgs']]]]):
        pulumi.set(self, "osarchitecture_comparisons", value)

    @property
    @pulumi.getter(name="ostypeComparisons")
    def ostype_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOstypeComparisonArgs']]]]:
        return pulumi.get(self, "ostype_comparisons")

    @ostype_comparisons.setter
    def ostype_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionOstypeComparisonArgs']]]]):
        pulumi.set(self, "ostype_comparisons", value)

    @property
    @pulumi.getter(name="paasTypeComparisons")
    def paas_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionPaasTypeComparisonArgs']]]]:
        return pulumi.get(self, "paas_type_comparisons")

    @paas_type_comparisons.setter
    def paas_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionPaasTypeComparisonArgs']]]]):
        pulumi.set(self, "paas_type_comparisons", value)

    @property
    @pulumi.getter(name="paasTypes")
    def paas_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionPaasTypeArgs']]]]:
        return pulumi.get(self, "paas_types")

    @paas_types.setter
    def paas_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionPaasTypeArgs']]]]):
        pulumi.set(self, "paas_types", value)

    @property
    @pulumi.getter(name="processMetadataConditionKeys")
    def process_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionProcessMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "process_metadata_condition_keys")

    @process_metadata_condition_keys.setter
    def process_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionProcessMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "process_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="processMetadatas")
    def process_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionProcessMetadataArgs']]]]:
        return pulumi.get(self, "process_metadatas")

    @process_metadatas.setter
    def process_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionProcessMetadataArgs']]]]):
        pulumi.set(self, "process_metadatas", value)

    @property
    @pulumi.getter(name="serviceTopologies")
    def service_topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTopologyArgs']]]]:
        return pulumi.get(self, "service_topologies")

    @service_topologies.setter
    def service_topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTopologyArgs']]]]):
        pulumi.set(self, "service_topologies", value)

    @property
    @pulumi.getter(name="serviceTopologyComparisons")
    def service_topology_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTopologyComparisonArgs']]]]:
        return pulumi.get(self, "service_topology_comparisons")

    @service_topology_comparisons.setter
    def service_topology_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTopologyComparisonArgs']]]]):
        pulumi.set(self, "service_topology_comparisons", value)

    @property
    @pulumi.getter(name="serviceTypeComparisons")
    def service_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTypeComparisonArgs']]]]:
        return pulumi.get(self, "service_type_comparisons")

    @service_type_comparisons.setter
    def service_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTypeComparisonArgs']]]]):
        pulumi.set(self, "service_type_comparisons", value)

    @property
    @pulumi.getter(name="serviceTypes")
    def service_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTypeArgs']]]]:
        return pulumi.get(self, "service_types")

    @service_types.setter
    def service_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionServiceTypeArgs']]]]):
        pulumi.set(self, "service_types", value)

    @property
    @pulumi.getter(name="simpleHostTechComparisons")
    def simple_host_tech_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSimpleHostTechComparisonArgs']]]]:
        return pulumi.get(self, "simple_host_tech_comparisons")

    @simple_host_tech_comparisons.setter
    def simple_host_tech_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSimpleHostTechComparisonArgs']]]]):
        pulumi.set(self, "simple_host_tech_comparisons", value)

    @property
    @pulumi.getter(name="simpleTechComparisons")
    def simple_tech_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSimpleTechComparisonArgs']]]]:
        return pulumi.get(self, "simple_tech_comparisons")

    @simple_tech_comparisons.setter
    def simple_tech_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSimpleTechComparisonArgs']]]]):
        pulumi.set(self, "simple_tech_comparisons", value)

    @property
    @pulumi.getter(name="stringComparisons")
    def string_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringComparisonArgs']]]]:
        return pulumi.get(self, "string_comparisons")

    @string_comparisons.setter
    def string_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringComparisonArgs']]]]):
        pulumi.set(self, "string_comparisons", value)

    @property
    @pulumi.getter(name="stringConditionKeys")
    def string_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringConditionKeyArgs']]]]:
        return pulumi.get(self, "string_condition_keys")

    @string_condition_keys.setter
    def string_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringConditionKeyArgs']]]]):
        pulumi.set(self, "string_condition_keys", value)

    @property
    @pulumi.getter(name="stringKeys")
    def string_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringKeyArgs']]]]:
        return pulumi.get(self, "string_keys")

    @string_keys.setter
    def string_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringKeyArgs']]]]):
        pulumi.set(self, "string_keys", value)

    @property
    @pulumi.getter
    def strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringArgs']]]]:
        return pulumi.get(self, "strings")

    @strings.setter
    def strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionStringArgs']]]]):
        pulumi.set(self, "strings", value)

    @property
    @pulumi.getter(name="syntheticEngineTypeComparisons")
    def synthetic_engine_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSyntheticEngineTypeComparisonArgs']]]]:
        return pulumi.get(self, "synthetic_engine_type_comparisons")

    @synthetic_engine_type_comparisons.setter
    def synthetic_engine_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSyntheticEngineTypeComparisonArgs']]]]):
        pulumi.set(self, "synthetic_engine_type_comparisons", value)

    @property
    @pulumi.getter(name="syntheticEngines")
    def synthetic_engines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSyntheticEngineArgs']]]]:
        return pulumi.get(self, "synthetic_engines")

    @synthetic_engines.setter
    def synthetic_engines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionSyntheticEngineArgs']]]]):
        pulumi.set(self, "synthetic_engines", value)

    @property
    @pulumi.getter(name="tagComparisons")
    def tag_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionTagComparisonArgs']]]]:
        return pulumi.get(self, "tag_comparisons")

    @tag_comparisons.setter
    def tag_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionTagComparisonArgs']]]]):
        pulumi.set(self, "tag_comparisons", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def teches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionTechArgs']]]]:
        return pulumi.get(self, "teches")

    @teches.setter
    def teches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HostNamingConditionConditionTechArgs']]]]):
        pulumi.set(self, "teches", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionApplicationTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionApplicationTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionAzureComputeModeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionAzureComputeModeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionAzureSkuComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionAzureSkusArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionBaseComparisonBasicArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionBaseConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionBitnessArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionBitnessComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionCloudTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionCloudTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionComparisonArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionCustomApplicationTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionCustomApplicationTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionCustomHostMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['HostNamingConditionConditionCustomHostMetadataDynamicKeyArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['HostNamingConditionConditionCustomHostMetadataDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['HostNamingConditionConditionCustomHostMetadataDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionCustomHostMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs'],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionCustomHostMetadataDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionCustomProcessMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['HostNamingConditionConditionCustomProcessMetadataDynamicKeyArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['HostNamingConditionConditionCustomProcessMetadataDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['HostNamingConditionConditionCustomProcessMetadataDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionCustomProcessMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs'],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionCustomProcessMetadataDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionDatabaseTopologyArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionDatabaseTopologyComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionDcrumDecoderArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionDcrumDecoderComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionEntityArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionEntityIdComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionHostTechArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['HostNamingConditionConditionHostTechValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['HostNamingConditionConditionHostTechValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['HostNamingConditionConditionHostTechValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionHostTechValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class HostNamingConditionConditionHypervisorArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionHypervisorTypeComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIndexedNameArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIndexedNameComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIndexedStringArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIndexedStringComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIndexedTagArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['HostNamingConditionConditionIndexedTagValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['HostNamingConditionConditionIndexedTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['HostNamingConditionConditionIndexedTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIndexedTagComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['HostNamingConditionConditionIndexedTagComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['HostNamingConditionConditionIndexedTagComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['HostNamingConditionConditionIndexedTagComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIndexedTagComparisonValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIndexedTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIntegerArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIntegerComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIpaddressArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionIpaddressComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionMobilePlatformArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionMobilePlatformComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionOsArchArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionOsTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionOsarchitectureComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionOstypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionPaasTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionPaasTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionProcessMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionProcessMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionServiceTopologyArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionServiceTopologyComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionServiceTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionServiceTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionSimpleHostTechComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['HostNamingConditionConditionSimpleHostTechComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['HostNamingConditionConditionSimpleHostTechComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['HostNamingConditionConditionSimpleHostTechComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionSimpleHostTechComparisonValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class HostNamingConditionConditionSimpleTechComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['HostNamingConditionConditionSimpleTechComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['HostNamingConditionConditionSimpleTechComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['HostNamingConditionConditionSimpleTechComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionSimpleTechComparisonValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class HostNamingConditionConditionStringArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionStringComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionStringConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionStringKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class HostNamingConditionConditionSyntheticEngineArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionSyntheticEngineTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionTagArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['HostNamingConditionConditionTagValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['HostNamingConditionConditionTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['HostNamingConditionConditionTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionTagComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['HostNamingConditionConditionTagComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['HostNamingConditionConditionTagComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['HostNamingConditionConditionTagComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionTagComparisonValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionTechArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['HostNamingConditionConditionTechValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['HostNamingConditionConditionTechValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['HostNamingConditionConditionTechValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HostNamingConditionConditionTechValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class HttpMonitorAnomalyDetectionArgs:
    def __init__(__self__, *,
                 loading_time_thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionLoadingTimeThresholdArgs']]]] = None,
                 outage_handlings: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionOutageHandlingArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionLoadingTimeThresholdArgs']]] loading_time_thresholds: Thresholds for loading times
        :param pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionOutageHandlingArgs']]] outage_handlings: Outage handling configuration
        """
        if loading_time_thresholds is not None:
            pulumi.set(__self__, "loading_time_thresholds", loading_time_thresholds)
        if outage_handlings is not None:
            pulumi.set(__self__, "outage_handlings", outage_handlings)

    @property
    @pulumi.getter(name="loadingTimeThresholds")
    def loading_time_thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionLoadingTimeThresholdArgs']]]]:
        """
        Thresholds for loading times
        """
        return pulumi.get(self, "loading_time_thresholds")

    @loading_time_thresholds.setter
    def loading_time_thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionLoadingTimeThresholdArgs']]]]):
        pulumi.set(self, "loading_time_thresholds", value)

    @property
    @pulumi.getter(name="outageHandlings")
    def outage_handlings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionOutageHandlingArgs']]]]:
        """
        Outage handling configuration
        """
        return pulumi.get(self, "outage_handlings")

    @outage_handlings.setter
    def outage_handlings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionOutageHandlingArgs']]]]):
        pulumi.set(self, "outage_handlings", value)


@pulumi.input_type
class HttpMonitorAnomalyDetectionLoadingTimeThresholdArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 thresholds: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdArgs']]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdArgs']]]]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdArgs']]]]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdArgs:
    def __init__(__self__, *,
                 thresholds: pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThresholdArgs']]]):
        pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def thresholds(self) -> pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThresholdArgs']]]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThresholdArgs']]]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThresholdArgs:
    def __init__(__self__, *,
                 value_ms: pulumi.Input[int],
                 event_index: Optional[pulumi.Input[int]] = None,
                 request_index: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "value_ms", value_ms)
        if event_index is not None:
            pulumi.set(__self__, "event_index", event_index)
        if request_index is not None:
            pulumi.set(__self__, "request_index", request_index)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="valueMs")
    def value_ms(self) -> pulumi.Input[int]:
        return pulumi.get(self, "value_ms")

    @value_ms.setter
    def value_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "value_ms", value)

    @property
    @pulumi.getter(name="eventIndex")
    def event_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "event_index")

    @event_index.setter
    def event_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "event_index", value)

    @property
    @pulumi.getter(name="requestIndex")
    def request_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "request_index")

    @request_index.setter
    def request_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_index", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class HttpMonitorAnomalyDetectionOutageHandlingArgs:
    def __init__(__self__, *,
                 global_outage: Optional[pulumi.Input[bool]] = None,
                 global_outage_policies: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs']]]] = None,
                 local_outage: Optional[pulumi.Input[bool]] = None,
                 local_outage_policies: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyArgs']]]] = None,
                 retry_on_error: Optional[pulumi.Input[bool]] = None):
        if global_outage is not None:
            pulumi.set(__self__, "global_outage", global_outage)
        if global_outage_policies is not None:
            pulumi.set(__self__, "global_outage_policies", global_outage_policies)
        if local_outage is not None:
            pulumi.set(__self__, "local_outage", local_outage)
        if local_outage_policies is not None:
            pulumi.set(__self__, "local_outage_policies", local_outage_policies)
        if retry_on_error is not None:
            pulumi.set(__self__, "retry_on_error", retry_on_error)

    @property
    @pulumi.getter(name="globalOutage")
    def global_outage(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_outage")

    @global_outage.setter
    def global_outage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_outage", value)

    @property
    @pulumi.getter(name="globalOutagePolicies")
    def global_outage_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs']]]]:
        return pulumi.get(self, "global_outage_policies")

    @global_outage_policies.setter
    def global_outage_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs']]]]):
        pulumi.set(self, "global_outage_policies", value)

    @property
    @pulumi.getter(name="localOutage")
    def local_outage(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "local_outage")

    @local_outage.setter
    def local_outage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_outage", value)

    @property
    @pulumi.getter(name="localOutagePolicies")
    def local_outage_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyArgs']]]]:
        return pulumi.get(self, "local_outage_policies")

    @local_outage_policies.setter
    def local_outage_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyArgs']]]]):
        pulumi.set(self, "local_outage_policies", value)

    @property
    @pulumi.getter(name="retryOnError")
    def retry_on_error(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "retry_on_error")

    @retry_on_error.setter
    def retry_on_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "retry_on_error", value)


@pulumi.input_type
class HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicyArgs:
    def __init__(__self__, *,
                 consecutive_runs: pulumi.Input[int]):
        pulumi.set(__self__, "consecutive_runs", consecutive_runs)

    @property
    @pulumi.getter(name="consecutiveRuns")
    def consecutive_runs(self) -> pulumi.Input[int]:
        return pulumi.get(self, "consecutive_runs")

    @consecutive_runs.setter
    def consecutive_runs(self, value: pulumi.Input[int]):
        pulumi.set(self, "consecutive_runs", value)


@pulumi.input_type
class HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicyArgs:
    def __init__(__self__, *,
                 affected_locations: pulumi.Input[int],
                 consecutive_runs: pulumi.Input[int]):
        pulumi.set(__self__, "affected_locations", affected_locations)
        pulumi.set(__self__, "consecutive_runs", consecutive_runs)

    @property
    @pulumi.getter(name="affectedLocations")
    def affected_locations(self) -> pulumi.Input[int]:
        return pulumi.get(self, "affected_locations")

    @affected_locations.setter
    def affected_locations(self, value: pulumi.Input[int]):
        pulumi.set(self, "affected_locations", value)

    @property
    @pulumi.getter(name="consecutiveRuns")
    def consecutive_runs(self) -> pulumi.Input[int]:
        return pulumi.get(self, "consecutive_runs")

    @consecutive_runs.setter
    def consecutive_runs(self, value: pulumi.Input[int]):
        pulumi.set(self, "consecutive_runs", value)


@pulumi.input_type
class HttpMonitorCookiesCookiesArgs:
    def __init__(__self__, *,
                 cookies: pulumi.Input[Sequence[pulumi.Input['HttpMonitorCookiesCookiesCookieArgs']]]):
        pulumi.set(__self__, "cookies", cookies)

    @property
    @pulumi.getter
    def cookies(self) -> pulumi.Input[Sequence[pulumi.Input['HttpMonitorCookiesCookiesCookieArgs']]]:
        return pulumi.get(self, "cookies")

    @cookies.setter
    def cookies(self, value: pulumi.Input[Sequence[pulumi.Input['HttpMonitorCookiesCookiesCookieArgs']]]):
        pulumi.set(self, "cookies", value)


@pulumi.input_type
class HttpMonitorCookiesCookiesCookieArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 name: pulumi.Input[str],
                 value: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class HttpMonitorPerformanceThresholdsArgs:
    def __init__(__self__, *,
                 thresholds: pulumi.Input[Sequence[pulumi.Input['HttpMonitorPerformanceThresholdsThresholdArgs']]]):
        pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def thresholds(self) -> pulumi.Input[Sequence[pulumi.Input['HttpMonitorPerformanceThresholdsThresholdArgs']]]:
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: pulumi.Input[Sequence[pulumi.Input['HttpMonitorPerformanceThresholdsThresholdArgs']]]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class HttpMonitorPerformanceThresholdsThresholdArgs:
    def __init__(__self__, *,
                 event: pulumi.Input[str],
                 threshold: pulumi.Input[float]):
        pulumi.set(__self__, "event", event)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def event(self) -> pulumi.Input[str]:
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: pulumi.Input[str]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class HttpMonitorScriptArgs:
    def __init__(__self__, *,
                 requests: pulumi.Input[Sequence[pulumi.Input['HttpMonitorScriptRequestArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['HttpMonitorScriptRequestArgs']]] requests: A HTTP request to be performed by the monitor.
        """
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> pulumi.Input[Sequence[pulumi.Input['HttpMonitorScriptRequestArgs']]]:
        """
        A HTTP request to be performed by the monitor.
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: pulumi.Input[Sequence[pulumi.Input['HttpMonitorScriptRequestArgs']]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class HttpMonitorScriptRequestArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 url: pulumi.Input[str],
                 authentication: Optional[pulumi.Input['HttpMonitorScriptRequestAuthenticationArgs']] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 configuration: Optional[pulumi.Input['HttpMonitorScriptRequestConfigurationArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 post_processing: Optional[pulumi.Input[str]] = None,
                 pre_processing: Optional[pulumi.Input[str]] = None,
                 request_timeout: Optional[pulumi.Input[int]] = None,
                 validation: Optional[pulumi.Input['HttpMonitorScriptRequestValidationArgs']] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "url", url)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if post_processing is not None:
            pulumi.set(__self__, "post_processing", post_processing)
        if pre_processing is not None:
            pulumi.set(__self__, "pre_processing", pre_processing)
        if request_timeout is not None:
            pulumi.set(__self__, "request_timeout", request_timeout)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['HttpMonitorScriptRequestAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['HttpMonitorScriptRequestAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['HttpMonitorScriptRequestConfigurationArgs']]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['HttpMonitorScriptRequestConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="postProcessing")
    def post_processing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_processing")

    @post_processing.setter
    def post_processing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_processing", value)

    @property
    @pulumi.getter(name="preProcessing")
    def pre_processing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_processing")

    @pre_processing.setter
    def pre_processing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_processing", value)

    @property
    @pulumi.getter(name="requestTimeout")
    def request_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "request_timeout")

    @request_timeout.setter
    def request_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_timeout", value)

    @property
    @pulumi.getter
    def validation(self) -> Optional[pulumi.Input['HttpMonitorScriptRequestValidationArgs']]:
        return pulumi.get(self, "validation")

    @validation.setter
    def validation(self, value: Optional[pulumi.Input['HttpMonitorScriptRequestValidationArgs']]):
        pulumi.set(self, "validation", value)


@pulumi.input_type
class HttpMonitorScriptRequestAuthenticationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input[str],
                 type: pulumi.Input[str],
                 kdc_ip: Optional[pulumi.Input[str]] = None,
                 realm_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "type", type)
        if kdc_ip is not None:
            pulumi.set(__self__, "kdc_ip", kdc_ip)
        if realm_name is not None:
            pulumi.set(__self__, "realm_name", realm_name)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="kdcIp")
    def kdc_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kdc_ip")

    @kdc_ip.setter
    def kdc_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kdc_ip", value)

    @property
    @pulumi.getter(name="realmName")
    def realm_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "realm_name")

    @realm_name.setter
    def realm_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm_name", value)


@pulumi.input_type
class HttpMonitorScriptRequestConfigurationArgs:
    def __init__(__self__, *,
                 accept_any_certificate: Optional[pulumi.Input[bool]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 follow_redirects: Optional[pulumi.Input[bool]] = None,
                 headers: Optional[pulumi.Input['HttpMonitorScriptRequestConfigurationHeadersArgs']] = None,
                 sensitive_data: Optional[pulumi.Input[bool]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None):
        if accept_any_certificate is not None:
            pulumi.set(__self__, "accept_any_certificate", accept_any_certificate)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if sensitive_data is not None:
            pulumi.set(__self__, "sensitive_data", sensitive_data)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter(name="acceptAnyCertificate")
    def accept_any_certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "accept_any_certificate")

    @accept_any_certificate.setter
    def accept_any_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_any_certificate", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "follow_redirects")

    @follow_redirects.setter
    def follow_redirects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_redirects", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input['HttpMonitorScriptRequestConfigurationHeadersArgs']]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input['HttpMonitorScriptRequestConfigurationHeadersArgs']]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="sensitiveData")
    def sensitive_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sensitive_data")

    @sensitive_data.setter
    def sensitive_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sensitive_data", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent", value)


@pulumi.input_type
class HttpMonitorScriptRequestConfigurationHeadersArgs:
    def __init__(__self__, *,
                 headers: pulumi.Input[Sequence[pulumi.Input['HttpMonitorScriptRequestConfigurationHeadersHeaderArgs']]]):
        pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Input[Sequence[pulumi.Input['HttpMonitorScriptRequestConfigurationHeadersHeaderArgs']]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: pulumi.Input[Sequence[pulumi.Input['HttpMonitorScriptRequestConfigurationHeadersHeaderArgs']]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class HttpMonitorScriptRequestConfigurationHeadersHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HttpMonitorScriptRequestValidationArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['HttpMonitorScriptRequestValidationRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['HttpMonitorScriptRequestValidationRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['HttpMonitorScriptRequestValidationRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class HttpMonitorScriptRequestValidationRuleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 pass_if_found: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if pass_if_found is not None:
            pulumi.set(__self__, "pass_if_found", pass_if_found)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="passIfFound")
    def pass_if_found(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pass_if_found")

    @pass_if_found.setter
    def pass_if_found(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pass_if_found", value)


@pulumi.input_type
class HttpMonitorTagArgs:
    def __init__(__self__, *,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorTagTagArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['HttpMonitorTagTagArgs']]] tags: Tag with source of a Dynatrace entity.
        """
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorTagTagArgs']]]]:
        """
        Tag with source of a Dynatrace entity.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HttpMonitorTagTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class HttpMonitorTagTagArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 source: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IamGroupPermissionsArgs:
    def __init__(__self__, *,
                 permissions: pulumi.Input[Sequence[pulumi.Input['IamGroupPermissionsPermissionArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['IamGroupPermissionsPermissionArgs']]] permissions: A Permission
        """
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[Sequence[pulumi.Input['IamGroupPermissionsPermissionArgs']]]:
        """
        A Permission
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[Sequence[pulumi.Input['IamGroupPermissionsPermissionArgs']]]):
        pulumi.set(self, "permissions", value)


@pulumi.input_type
class IamGroupPermissionsPermissionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 scope: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ImsBridgesQueueManagerArgs:
    def __init__(__self__, *,
                 queue_managers: Optional[pulumi.Input[Sequence[pulumi.Input['ImsBridgesQueueManagerQueueManagerArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ImsBridgesQueueManagerQueueManagerArgs']]] queue_managers: Queue manager definition for IMS bridge
        """
        if queue_managers is not None:
            pulumi.set(__self__, "queue_managers", queue_managers)

    @property
    @pulumi.getter(name="queueManagers")
    def queue_managers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImsBridgesQueueManagerQueueManagerArgs']]]]:
        """
        Queue manager definition for IMS bridge
        """
        return pulumi.get(self, "queue_managers")

    @queue_managers.setter
    def queue_managers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImsBridgesQueueManagerQueueManagerArgs']]]]):
        pulumi.set(self, "queue_managers", value)


@pulumi.input_type
class ImsBridgesQueueManagerQueueManagerArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 queue_manager_queues: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name of the IMS bridge
        """
        pulumi.set(__self__, "name", name)
        if queue_manager_queues is not None:
            pulumi.set(__self__, "queue_manager_queues", queue_manager_queues)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the IMS bridge
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queueManagerQueues")
    def queue_manager_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "queue_manager_queues")

    @queue_manager_queues.setter
    def queue_manager_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "queue_manager_queues", value)


@pulumi.input_type
class K8sClusterAnomaliesCpuRequestsSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sClusterAnomaliesCpuRequestsSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sClusterAnomaliesCpuRequestsSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sClusterAnomaliesCpuRequestsSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sClusterAnomaliesCpuRequestsSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sClusterAnomaliesCpuRequestsSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sClusterAnomaliesMemoryRequestsSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sClusterAnomaliesMemoryRequestsSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sClusterAnomaliesMemoryRequestsSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sClusterAnomaliesMemoryRequestsSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sClusterAnomaliesMemoryRequestsSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sClusterAnomaliesMemoryRequestsSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sClusterAnomaliesMonitoringIssuesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sClusterAnomaliesMonitoringIssuesConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sClusterAnomaliesMonitoringIssuesConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sClusterAnomaliesMonitoringIssuesConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sClusterAnomaliesMonitoringIssuesConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sClusterAnomaliesMonitoringIssuesConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)


@pulumi.input_type
class K8sClusterAnomaliesPodsSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sClusterAnomaliesPodsSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sClusterAnomaliesPodsSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sClusterAnomaliesPodsSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sClusterAnomaliesPodsSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sClusterAnomaliesPodsSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sClusterAnomaliesReadinessIssuesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sClusterAnomaliesReadinessIssuesConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sClusterAnomaliesReadinessIssuesConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sClusterAnomaliesReadinessIssuesConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sClusterAnomaliesReadinessIssuesConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sClusterAnomaliesReadinessIssuesConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)


@pulumi.input_type
class K8sCredentialsEventsFieldSelectorArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 field_selector: pulumi.Input[str],
                 label: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: Whether subscription to this events field selector is enabled (value set to `true`). If disabled (value set to `false`), Dynatrace will stop fetching events from the Kubernetes API for this events field selector
        :param pulumi.Input[str] field_selector: The field selector string (url decoding is applied) when storing it.
        :param pulumi.Input[str] label: A label of the events field selector.
        :param pulumi.Input[str] unknowns: Any attributes that aren't yet supported by this provider
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "field_selector", field_selector)
        pulumi.set(__self__, "label", label)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        Whether subscription to this events field selector is enabled (value set to `true`). If disabled (value set to `false`), Dynatrace will stop fetching events from the Kubernetes API for this events field selector
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="fieldSelector")
    def field_selector(self) -> pulumi.Input[str]:
        """
        The field selector string (url decoding is applied) when storing it.
        """
        return pulumi.get(self, "field_selector")

    @field_selector.setter
    def field_selector(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_selector", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        A label of the events field selector.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        Any attributes that aren't yet supported by this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class K8sNamespaceAnomaliesCpuLimitsQuotaSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sNamespaceAnomaliesCpuRequestsQuotaSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sNamespaceAnomaliesPodsQuotaSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sNamespaceAnomaliesPodsQuotaSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sNamespaceAnomaliesPodsQuotaSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sNamespaceAnomaliesPodsQuotaSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sNamespaceAnomaliesPodsQuotaSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sNamespaceAnomaliesPodsQuotaSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sNodeAnomaliesCpuRequestsSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sNodeAnomaliesCpuRequestsSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sNodeAnomaliesCpuRequestsSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sNodeAnomaliesMemoryRequestsSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sNodeAnomaliesMemoryRequestsSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sNodeAnomaliesMemoryRequestsSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sNodeAnomaliesNodeProblematicConditionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sNodeAnomaliesNodeProblematicConditionConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sNodeAnomaliesNodeProblematicConditionConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)


@pulumi.input_type
class K8sNodeAnomaliesPodsSaturationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sNodeAnomaliesPodsSaturationConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sNodeAnomaliesPodsSaturationConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sNodeAnomaliesPodsSaturationConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sNodeAnomaliesPodsSaturationConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sNodeAnomaliesPodsSaturationConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sNodeAnomaliesReadinessIssuesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sNodeAnomaliesReadinessIssuesConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sNodeAnomaliesReadinessIssuesConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sNodeAnomaliesReadinessIssuesConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sNodeAnomaliesReadinessIssuesConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sNodeAnomaliesReadinessIssuesConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)


@pulumi.input_type
class K8sPvcAnomaliesLowDiskSpaceCriticalArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sPvcAnomaliesLowDiskSpaceCriticalConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sPvcAnomaliesLowDiskSpaceCriticalPercentageArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sWorkloadAnomaliesContainerRestartsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sWorkloadAnomaliesContainerRestartsConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sWorkloadAnomaliesContainerRestartsConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesContainerRestartsConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesContainerRestartsConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sWorkloadAnomaliesContainerRestartsConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sWorkloadAnomaliesDeploymentStuckArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesDeploymentStuckConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sWorkloadAnomaliesDeploymentStuckConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)


@pulumi.input_type
class K8sWorkloadAnomaliesHighCpuThrottlingArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuThrottlingConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sWorkloadAnomaliesHighCpuThrottlingConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sWorkloadAnomaliesHighCpuUsageArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesHighCpuUsageConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sWorkloadAnomaliesHighCpuUsageConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sWorkloadAnomaliesHighMemoryUsageArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesHighMemoryUsageConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sWorkloadAnomaliesHighMemoryUsageConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sWorkloadAnomaliesNotAllPodsReadyArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesNotAllPodsReadyConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sWorkloadAnomaliesNotAllPodsReadyConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)


@pulumi.input_type
class K8sWorkloadAnomaliesPendingPodsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sWorkloadAnomaliesPendingPodsConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sWorkloadAnomaliesPendingPodsConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesPendingPodsConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesPendingPodsConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sWorkloadAnomaliesPendingPodsConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class K8sWorkloadAnomaliesPodStuckInTerminatingArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesPodStuckInTerminatingConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sWorkloadAnomaliesPodStuckInTerminatingConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)


@pulumi.input_type
class K8sWorkloadAnomaliesWorkloadWithoutReadyPodsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 configuration: Optional[pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfigurationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfigurationArgs'] configuration: Alert if
        """
        pulumi.set(__self__, "enabled", enabled)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfigurationArgs']]:
        """
        Alert if
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfigurationArgs']]):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfigurationArgs:
    def __init__(__self__, *,
                 observation_period_in_minutes: pulumi.Input[int],
                 sample_period_in_minutes: pulumi.Input[int]):
        pulumi.set(__self__, "observation_period_in_minutes", observation_period_in_minutes)
        pulumi.set(__self__, "sample_period_in_minutes", sample_period_in_minutes)

    @property
    @pulumi.getter(name="observationPeriodInMinutes")
    def observation_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "observation_period_in_minutes")

    @observation_period_in_minutes.setter
    def observation_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "observation_period_in_minutes", value)

    @property
    @pulumi.getter(name="samplePeriodInMinutes")
    def sample_period_in_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_period_in_minutes")

    @sample_period_in_minutes.setter
    def sample_period_in_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_period_in_minutes", value)


@pulumi.input_type
class KubernetesEventPatternsArgs:
    def __init__(__self__, *,
                 event_patterns: pulumi.Input[Sequence[pulumi.Input['KubernetesEventPatternsEventPatternArgs']]]):
        pulumi.set(__self__, "event_patterns", event_patterns)

    @property
    @pulumi.getter(name="eventPatterns")
    def event_patterns(self) -> pulumi.Input[Sequence[pulumi.Input['KubernetesEventPatternsEventPatternArgs']]]:
        return pulumi.get(self, "event_patterns")

    @event_patterns.setter
    def event_patterns(self, value: pulumi.Input[Sequence[pulumi.Input['KubernetesEventPatternsEventPatternArgs']]]):
        pulumi.set(self, "event_patterns", value)


@pulumi.input_type
class KubernetesEventPatternsEventPatternArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 label: pulumi.Input[str],
                 pattern: pulumi.Input[str]):
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class LogCustomSourceContextArgs:
    def __init__(__self__, *,
                 contexts: pulumi.Input[Sequence[pulumi.Input['LogCustomSourceContextContextArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['LogCustomSourceContextContextArgs']]] contexts: Define Custom Log Source only within context if provided
        """
        pulumi.set(__self__, "contexts", contexts)

    @property
    @pulumi.getter
    def contexts(self) -> pulumi.Input[Sequence[pulumi.Input['LogCustomSourceContextContextArgs']]]:
        """
        Define Custom Log Source only within context if provided
        """
        return pulumi.get(self, "contexts")

    @contexts.setter
    def contexts(self, value: pulumi.Input[Sequence[pulumi.Input['LogCustomSourceContextContextArgs']]]):
        pulumi.set(self, "contexts", value)


@pulumi.input_type
class LogCustomSourceContextContextArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class LogCustomSourceCustomLogSourceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] type: Possible Values: `LOG_PATH_PATTERN`, `WINDOWS_EVENT_LOG`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Possible Values: `LOG_PATH_PATTERN`, `WINDOWS_EVENT_LOG`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class LogEventsEventTemplateArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 event_type: pulumi.Input[str],
                 title: pulumi.Input[str],
                 davis_merge: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input['LogEventsEventTemplateMetadataArgs']] = None):
        """
        :param pulumi.Input[str] description: The description of the event to trigger.
        :param pulumi.Input[str] event_type: Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
        :param pulumi.Input[str] title: The title of the event to trigger.
        :param pulumi.Input[bool] davis_merge: Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
        :param pulumi.Input['LogEventsEventTemplateMetadataArgs'] metadata: Set of additional key-value properties to be attached to the triggered event.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "title", title)
        if davis_merge is not None:
            pulumi.set(__self__, "davis_merge", davis_merge)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The description of the event to trigger.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[str]:
        """
        Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the event to trigger.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="davisMerge")
    def davis_merge(self) -> Optional[pulumi.Input[bool]]:
        """
        Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
        """
        return pulumi.get(self, "davis_merge")

    @davis_merge.setter
    def davis_merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "davis_merge", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['LogEventsEventTemplateMetadataArgs']]:
        """
        Set of additional key-value properties to be attached to the triggered event.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['LogEventsEventTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class LogEventsEventTemplateMetadataArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['LogEventsEventTemplateMetadataItemArgs']]]):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['LogEventsEventTemplateMetadataItemArgs']]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['LogEventsEventTemplateMetadataItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class LogEventsEventTemplateMetadataItemArgs:
    def __init__(__self__, *,
                 metadata_key: pulumi.Input[str],
                 metadata_value: pulumi.Input[str]):
        pulumi.set(__self__, "metadata_key", metadata_key)
        pulumi.set(__self__, "metadata_value", metadata_value)

    @property
    @pulumi.getter(name="metadataKey")
    def metadata_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metadata_key")

    @metadata_key.setter
    def metadata_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "metadata_key", value)

    @property
    @pulumi.getter(name="metadataValue")
    def metadata_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metadata_value")

    @metadata_value.setter
    def metadata_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "metadata_value", value)


@pulumi.input_type
class LogProcessingProcessorDefinitionArgs:
    def __init__(__self__, *,
                 rule: pulumi.Input[str]):
        pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)


@pulumi.input_type
class LogProcessingRuleTestingArgs:
    def __init__(__self__, *,
                 sample_log: pulumi.Input[str]):
        pulumi.set(__self__, "sample_log", sample_log)

    @property
    @pulumi.getter(name="sampleLog")
    def sample_log(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sample_log")

    @sample_log.setter
    def sample_log(self, value: pulumi.Input[str]):
        pulumi.set(self, "sample_log", value)


@pulumi.input_type
class LogSensitiveDataMaskingMaskingArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 type: pulumi.Input[str],
                 replacement: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Maximum one capture group is allowed. If none was given, the whole expression will be treated as a capture group.
        :param pulumi.Input[str] type: Possible Values: `SHA1`, `STRING`
        :param pulumi.Input[str] replacement: The string to replace the masked expression with. Irrelevant if `type` is `SHA1`.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "type", type)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Maximum one capture group is allowed. If none was given, the whole expression will be treated as a capture group.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Possible Values: `SHA1`, `STRING`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def replacement(self) -> Optional[pulumi.Input[str]]:
        """
        The string to replace the masked expression with. Irrelevant if `type` is `SHA1`.
        """
        return pulumi.get(self, "replacement")

    @replacement.setter
    def replacement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement", value)


@pulumi.input_type
class LogSensitiveDataMaskingMatchersArgs:
    def __init__(__self__, *,
                 matchers: pulumi.Input[Sequence[pulumi.Input['LogSensitiveDataMaskingMatchersMatcherArgs']]]):
        pulumi.set(__self__, "matchers", matchers)

    @property
    @pulumi.getter
    def matchers(self) -> pulumi.Input[Sequence[pulumi.Input['LogSensitiveDataMaskingMatchersMatcherArgs']]]:
        return pulumi.get(self, "matchers")

    @matchers.setter
    def matchers(self, value: pulumi.Input[Sequence[pulumi.Input['LogSensitiveDataMaskingMatchersMatcherArgs']]]):
        pulumi.set(self, "matchers", value)


@pulumi.input_type
class LogSensitiveDataMaskingMatchersMatcherArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class LogStorageMatchersArgs:
    def __init__(__self__, *,
                 matchers: pulumi.Input[Sequence[pulumi.Input['LogStorageMatchersMatcherArgs']]]):
        pulumi.set(__self__, "matchers", matchers)

    @property
    @pulumi.getter
    def matchers(self) -> pulumi.Input[Sequence[pulumi.Input['LogStorageMatchersMatcherArgs']]]:
        return pulumi.get(self, "matchers")

    @matchers.setter
    def matchers(self, value: pulumi.Input[Sequence[pulumi.Input['LogStorageMatchersMatcherArgs']]]):
        pulumi.set(self, "matchers", value)


@pulumi.input_type
class LogStorageMatchersMatcherArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class LogTimestampMatchersArgs:
    def __init__(__self__, *,
                 matchers: pulumi.Input[Sequence[pulumi.Input['LogTimestampMatchersMatcherArgs']]]):
        pulumi.set(__self__, "matchers", matchers)

    @property
    @pulumi.getter
    def matchers(self) -> pulumi.Input[Sequence[pulumi.Input['LogTimestampMatchersMatcherArgs']]]:
        return pulumi.get(self, "matchers")

    @matchers.setter
    def matchers(self, value: pulumi.Input[Sequence[pulumi.Input['LogTimestampMatchersMatcherArgs']]]):
        pulumi.set(self, "matchers", value)


@pulumi.input_type
class LogTimestampMatchersMatcherArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class MaintenanceFilterArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceFilterFilterArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['MaintenanceFilterFilterArgs']]] filters: A list of matching rules for dynamic filter formation.  If several rules are set, the OR logic applies
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceFilterFilterArgs']]]]:
        """
        A list of matching rules for dynamic filter formation.  If several rules are set, the OR logic applies
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceFilterFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class MaintenanceFilterFilterArgs:
    def __init__(__self__, *,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 entity_type: Optional[pulumi.Input[str]] = None,
                 management_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_tags is not None:
            pulumi.set(__self__, "entity_tags", entity_tags)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if management_zones is not None:
            pulumi.set(__self__, "management_zones", management_zones)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityTags")
    def entity_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "entity_tags")

    @entity_tags.setter
    def entity_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entity_tags", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="managementZones")
    def management_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "management_zones")

    @management_zones.setter
    def management_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "management_zones", value)


@pulumi.input_type
class MaintenanceGeneralPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 suppression: pulumi.Input[str],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 disable_synthetic: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: The name of the maintenance window, displayed in the UI
        :param pulumi.Input[str] suppression: The type of suppression of alerting and problem detection during the maintenance
        :param pulumi.Input[str] type: The type of the maintenance: planned or unplanned
        :param pulumi.Input[str] description: A short description of the maintenance purpose
        :param pulumi.Input[bool] disable_synthetic: Suppress execution of synthetic monitors during the maintenance
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "suppression", suppression)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_synthetic is not None:
            pulumi.set(__self__, "disable_synthetic", disable_synthetic)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the maintenance window, displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def suppression(self) -> pulumi.Input[str]:
        """
        The type of suppression of alerting and problem detection during the maintenance
        """
        return pulumi.get(self, "suppression")

    @suppression.setter
    def suppression(self, value: pulumi.Input[str]):
        pulumi.set(self, "suppression", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the maintenance: planned or unplanned
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A short description of the maintenance purpose
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableSynthetic")
    def disable_synthetic(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress execution of synthetic monitors during the maintenance
        """
        return pulumi.get(self, "disable_synthetic")

    @disable_synthetic.setter
    def disable_synthetic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_synthetic", value)


@pulumi.input_type
class MaintenanceScheduleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 daily_recurrence: Optional[pulumi.Input['MaintenanceScheduleDailyRecurrenceArgs']] = None,
                 monthly_recurrence: Optional[pulumi.Input['MaintenanceScheduleMonthlyRecurrenceArgs']] = None,
                 once_recurrence: Optional[pulumi.Input['MaintenanceScheduleOnceRecurrenceArgs']] = None,
                 weekly_recurrence: Optional[pulumi.Input['MaintenanceScheduleWeeklyRecurrenceArgs']] = None):
        """
        :param pulumi.Input[str] type: The time window of the maintenance window
        :param pulumi.Input['MaintenanceScheduleDailyRecurrenceArgs'] daily_recurrence: The configuration for maintenance windows occuring daily
        :param pulumi.Input['MaintenanceScheduleMonthlyRecurrenceArgs'] monthly_recurrence: The configuration for maintenance windows occuring monthly
        :param pulumi.Input['MaintenanceScheduleOnceRecurrenceArgs'] once_recurrence: The configuration for maintenance windows occuring once
        :param pulumi.Input['MaintenanceScheduleWeeklyRecurrenceArgs'] weekly_recurrence: The configuration for maintenance windows occuring weekly
        """
        pulumi.set(__self__, "type", type)
        if daily_recurrence is not None:
            pulumi.set(__self__, "daily_recurrence", daily_recurrence)
        if monthly_recurrence is not None:
            pulumi.set(__self__, "monthly_recurrence", monthly_recurrence)
        if once_recurrence is not None:
            pulumi.set(__self__, "once_recurrence", once_recurrence)
        if weekly_recurrence is not None:
            pulumi.set(__self__, "weekly_recurrence", weekly_recurrence)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The time window of the maintenance window
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="dailyRecurrence")
    def daily_recurrence(self) -> Optional[pulumi.Input['MaintenanceScheduleDailyRecurrenceArgs']]:
        """
        The configuration for maintenance windows occuring daily
        """
        return pulumi.get(self, "daily_recurrence")

    @daily_recurrence.setter
    def daily_recurrence(self, value: Optional[pulumi.Input['MaintenanceScheduleDailyRecurrenceArgs']]):
        pulumi.set(self, "daily_recurrence", value)

    @property
    @pulumi.getter(name="monthlyRecurrence")
    def monthly_recurrence(self) -> Optional[pulumi.Input['MaintenanceScheduleMonthlyRecurrenceArgs']]:
        """
        The configuration for maintenance windows occuring monthly
        """
        return pulumi.get(self, "monthly_recurrence")

    @monthly_recurrence.setter
    def monthly_recurrence(self, value: Optional[pulumi.Input['MaintenanceScheduleMonthlyRecurrenceArgs']]):
        pulumi.set(self, "monthly_recurrence", value)

    @property
    @pulumi.getter(name="onceRecurrence")
    def once_recurrence(self) -> Optional[pulumi.Input['MaintenanceScheduleOnceRecurrenceArgs']]:
        """
        The configuration for maintenance windows occuring once
        """
        return pulumi.get(self, "once_recurrence")

    @once_recurrence.setter
    def once_recurrence(self, value: Optional[pulumi.Input['MaintenanceScheduleOnceRecurrenceArgs']]):
        pulumi.set(self, "once_recurrence", value)

    @property
    @pulumi.getter(name="weeklyRecurrence")
    def weekly_recurrence(self) -> Optional[pulumi.Input['MaintenanceScheduleWeeklyRecurrenceArgs']]:
        """
        The configuration for maintenance windows occuring weekly
        """
        return pulumi.get(self, "weekly_recurrence")

    @weekly_recurrence.setter
    def weekly_recurrence(self, value: Optional[pulumi.Input['MaintenanceScheduleWeeklyRecurrenceArgs']]):
        pulumi.set(self, "weekly_recurrence", value)


@pulumi.input_type
class MaintenanceScheduleDailyRecurrenceArgs:
    def __init__(__self__, *,
                 recurrence_range: pulumi.Input['MaintenanceScheduleDailyRecurrenceRecurrenceRangeArgs'],
                 time_window: pulumi.Input['MaintenanceScheduleDailyRecurrenceTimeWindowArgs']):
        pulumi.set(__self__, "recurrence_range", recurrence_range)
        pulumi.set(__self__, "time_window", time_window)

    @property
    @pulumi.getter(name="recurrenceRange")
    def recurrence_range(self) -> pulumi.Input['MaintenanceScheduleDailyRecurrenceRecurrenceRangeArgs']:
        return pulumi.get(self, "recurrence_range")

    @recurrence_range.setter
    def recurrence_range(self, value: pulumi.Input['MaintenanceScheduleDailyRecurrenceRecurrenceRangeArgs']):
        pulumi.set(self, "recurrence_range", value)

    @property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> pulumi.Input['MaintenanceScheduleDailyRecurrenceTimeWindowArgs']:
        return pulumi.get(self, "time_window")

    @time_window.setter
    def time_window(self, value: pulumi.Input['MaintenanceScheduleDailyRecurrenceTimeWindowArgs']):
        pulumi.set(self, "time_window", value)


@pulumi.input_type
class MaintenanceScheduleDailyRecurrenceRecurrenceRangeArgs:
    def __init__(__self__, *,
                 end_date: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class MaintenanceScheduleDailyRecurrenceTimeWindowArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 time_zone: pulumi.Input[str]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class MaintenanceScheduleMonthlyRecurrenceArgs:
    def __init__(__self__, *,
                 day_of_month: pulumi.Input[int],
                 recurrence_range: pulumi.Input['MaintenanceScheduleMonthlyRecurrenceRecurrenceRangeArgs'],
                 time_window: pulumi.Input['MaintenanceScheduleMonthlyRecurrenceTimeWindowArgs']):
        pulumi.set(__self__, "day_of_month", day_of_month)
        pulumi.set(__self__, "recurrence_range", recurrence_range)
        pulumi.set(__self__, "time_window", time_window)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> pulumi.Input[int]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: pulumi.Input[int]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter(name="recurrenceRange")
    def recurrence_range(self) -> pulumi.Input['MaintenanceScheduleMonthlyRecurrenceRecurrenceRangeArgs']:
        return pulumi.get(self, "recurrence_range")

    @recurrence_range.setter
    def recurrence_range(self, value: pulumi.Input['MaintenanceScheduleMonthlyRecurrenceRecurrenceRangeArgs']):
        pulumi.set(self, "recurrence_range", value)

    @property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> pulumi.Input['MaintenanceScheduleMonthlyRecurrenceTimeWindowArgs']:
        return pulumi.get(self, "time_window")

    @time_window.setter
    def time_window(self, value: pulumi.Input['MaintenanceScheduleMonthlyRecurrenceTimeWindowArgs']):
        pulumi.set(self, "time_window", value)


@pulumi.input_type
class MaintenanceScheduleMonthlyRecurrenceRecurrenceRangeArgs:
    def __init__(__self__, *,
                 end_date: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class MaintenanceScheduleMonthlyRecurrenceTimeWindowArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 time_zone: pulumi.Input[str]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class MaintenanceScheduleOnceRecurrenceArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 time_zone: pulumi.Input[str]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class MaintenanceScheduleWeeklyRecurrenceArgs:
    def __init__(__self__, *,
                 day_of_week: pulumi.Input[str],
                 recurrence_range: pulumi.Input['MaintenanceScheduleWeeklyRecurrenceRecurrenceRangeArgs'],
                 time_window: pulumi.Input['MaintenanceScheduleWeeklyRecurrenceTimeWindowArgs']):
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "recurrence_range", recurrence_range)
        pulumi.set(__self__, "time_window", time_window)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> pulumi.Input[str]:
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: pulumi.Input[str]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter(name="recurrenceRange")
    def recurrence_range(self) -> pulumi.Input['MaintenanceScheduleWeeklyRecurrenceRecurrenceRangeArgs']:
        return pulumi.get(self, "recurrence_range")

    @recurrence_range.setter
    def recurrence_range(self, value: pulumi.Input['MaintenanceScheduleWeeklyRecurrenceRecurrenceRangeArgs']):
        pulumi.set(self, "recurrence_range", value)

    @property
    @pulumi.getter(name="timeWindow")
    def time_window(self) -> pulumi.Input['MaintenanceScheduleWeeklyRecurrenceTimeWindowArgs']:
        return pulumi.get(self, "time_window")

    @time_window.setter
    def time_window(self, value: pulumi.Input['MaintenanceScheduleWeeklyRecurrenceTimeWindowArgs']):
        pulumi.set(self, "time_window", value)


@pulumi.input_type
class MaintenanceScheduleWeeklyRecurrenceRecurrenceRangeArgs:
    def __init__(__self__, *,
                 end_date: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class MaintenanceScheduleWeeklyRecurrenceTimeWindowArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 time_zone: pulumi.Input[str]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class MaintenanceWindowScheduleArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[str],
                 recurrence_type: pulumi.Input[str],
                 start: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 recurrence: Optional[pulumi.Input['MaintenanceWindowScheduleRecurrenceArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end: The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
        :param pulumi.Input[str] recurrence_type: The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
        :param pulumi.Input[str] start: The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
        :param pulumi.Input[str] zone_id: The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
        :param pulumi.Input['MaintenanceWindowScheduleRecurrenceArgs'] recurrence: The recurrence of the maintenance window
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "recurrence_type", recurrence_type)
        pulumi.set(__self__, "start", start)
        pulumi.set(__self__, "zone_id", zone_id)
        if recurrence is not None:
            pulumi.set(__self__, "recurrence", recurrence)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[str]:
        """
        The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter(name="recurrenceType")
    def recurrence_type(self) -> pulumi.Input[str]:
        """
        The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
        """
        return pulumi.get(self, "recurrence_type")

    @recurrence_type.setter
    def recurrence_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "recurrence_type", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[str]:
        """
        The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[str]):
        pulumi.set(self, "start", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter
    def recurrence(self) -> Optional[pulumi.Input['MaintenanceWindowScheduleRecurrenceArgs']]:
        """
        The recurrence of the maintenance window
        """
        return pulumi.get(self, "recurrence")

    @recurrence.setter
    def recurrence(self, value: Optional[pulumi.Input['MaintenanceWindowScheduleRecurrenceArgs']]):
        pulumi.set(self, "recurrence", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class MaintenanceWindowScheduleRecurrenceArgs:
    def __init__(__self__, *,
                 duration_minutes: pulumi.Input[int],
                 start_time: pulumi.Input[str],
                 day_of_month: Optional[pulumi.Input[int]] = None,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "duration_minutes", duration_minutes)
        pulumi.set(__self__, "start_time", start_time)
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="durationMinutes")
    def duration_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "duration_minutes")

    @duration_minutes.setter
    def duration_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration_minutes", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class MaintenanceWindowScopeArgs:
    def __init__(__self__, *,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 matches: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowScopeMatchArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entities: A list of Dynatrace entities (for example, hosts or services) to be included in the scope.  Allowed values are Dynatrace entity IDs
        :param pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowScopeMatchArgs']]] matches: A list of matching rules for dynamic scope formation.  If several rules are set, the OR logic applies
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if entities is not None:
            pulumi.set(__self__, "entities", entities)
        if matches is not None:
            pulumi.set(__self__, "matches", matches)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of Dynatrace entities (for example, hosts or services) to be included in the scope.  Allowed values are Dynatrace entity IDs
        """
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entities", value)

    @property
    @pulumi.getter
    def matches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowScopeMatchArgs']]]]:
        """
        A list of matching rules for dynamic scope formation.  If several rules are set, the OR logic applies
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowScopeMatchArgs']]]]):
        pulumi.set(self, "matches", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class MaintenanceWindowScopeMatchArgs:
    def __init__(__self__, *,
                 mz_id: Optional[pulumi.Input[str]] = None,
                 tag_combination: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowScopeMatchTagArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The type of the maintenance: planned or unplanned
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if mz_id is not None:
            pulumi.set(__self__, "mz_id", mz_id)
        if tag_combination is not None:
            pulumi.set(__self__, "tag_combination", tag_combination)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="mzId")
    def mz_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mz_id")

    @mz_id.setter
    def mz_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mz_id", value)

    @property
    @pulumi.getter(name="tagCombination")
    def tag_combination(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_combination")

    @tag_combination.setter
    def tag_combination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_combination", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowScopeMatchTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MaintenanceWindowScopeMatchTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the maintenance: planned or unplanned
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class MaintenanceWindowScopeMatchTagArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneDimensionalRuleArgs:
    def __init__(__self__, *,
                 applies_to: pulumi.Input[str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneDimensionalRuleConditionArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "applies_to", applies_to)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="appliesTo")
    def applies_to(self) -> pulumi.Input[str]:
        return pulumi.get(self, "applies_to")

    @applies_to.setter
    def applies_to(self, value: pulumi.Input[str]):
        pulumi.set(self, "applies_to", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneDimensionalRuleConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneDimensionalRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneDimensionalRuleConditionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 match: pulumi.Input[str],
                 type: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "match", match)
        pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def match(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match")

    @match.setter
    def match(self, value: pulumi.Input[str]):
        pulumi.set(self, "match", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneEntitySelectorBasedRuleArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 selector: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selector", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 propagation_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if propagation_types is not None:
            pulumi.set(__self__, "propagation_types", propagation_types)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="propagationTypes")
    def propagation_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "propagation_types")

    @propagation_types.setter
    def propagation_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "propagation_types", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionArgs:
    def __init__(__self__, *,
                 application_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionApplicationTypeComparisonArgs']]]] = None,
                 application_types: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionApplicationTypeArgs']]]] = None,
                 azure_compute_mode_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureComputeModeComparisonArgs']]]] = None,
                 azure_compute_modes: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureComputeModeArgs']]]] = None,
                 azure_sku_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureSkuComparisionArgs']]]] = None,
                 azure_skus: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureSkusArgs']]]] = None,
                 base_comparison_basics: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBaseComparisonBasicArgs']]]] = None,
                 base_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBaseConditionKeyArgs']]]] = None,
                 bitness_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBitnessComparisionArgs']]]] = None,
                 bitnesses: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBitnessArgs']]]] = None,
                 cloud_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCloudTypeComparisonArgs']]]] = None,
                 cloud_types: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCloudTypeArgs']]]] = None,
                 comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionComparisonArgs']]]] = None,
                 custom_application_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomApplicationTypeComparisonArgs']]]] = None,
                 custom_application_types: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomApplicationTypeArgs']]]] = None,
                 custom_host_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataConditionKeyArgs']]]] = None,
                 custom_host_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataArgs']]]] = None,
                 custom_process_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataConditionKeyArgs']]]] = None,
                 custom_process_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataArgs']]]] = None,
                 database_topologies: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDatabaseTopologyArgs']]]] = None,
                 database_topology_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDatabaseTopologyComparisonArgs']]]] = None,
                 dcrum_decoder_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDcrumDecoderComparisonArgs']]]] = None,
                 dcrum_decoders: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDcrumDecoderArgs']]]] = None,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionEntityArgs']]]] = None,
                 entity_id_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionEntityIdComparisonArgs']]]] = None,
                 host_teches: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionHostTechArgs']]]] = None,
                 hypervisor_type_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionHypervisorTypeComparisionArgs']]]] = None,
                 hypervisors: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionHypervisorArgs']]]] = None,
                 indexed_name_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedNameComparisonArgs']]]] = None,
                 indexed_names: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedNameArgs']]]] = None,
                 indexed_string_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedStringComparisonArgs']]]] = None,
                 indexed_strings: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedStringArgs']]]] = None,
                 indexed_tag_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedTagComparisonArgs']]]] = None,
                 indexed_tags: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedTagArgs']]]] = None,
                 integer_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIntegerComparisonArgs']]]] = None,
                 integers: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIntegerArgs']]]] = None,
                 ipaddress_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIpaddressComparisonArgs']]]] = None,
                 ipaddresses: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIpaddressArgs']]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionKeyArgs']]]] = None,
                 mobile_platform_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionMobilePlatformComparisonArgs']]]] = None,
                 mobile_platforms: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionMobilePlatformArgs']]]] = None,
                 os_arches: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOsArchArgs']]]] = None,
                 os_types: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOsTypeArgs']]]] = None,
                 osarchitecture_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOsarchitectureComparisonArgs']]]] = None,
                 ostype_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOstypeComparisonArgs']]]] = None,
                 paas_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionPaasTypeComparisonArgs']]]] = None,
                 paas_types: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionPaasTypeArgs']]]] = None,
                 process_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionProcessMetadataConditionKeyArgs']]]] = None,
                 process_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionProcessMetadataArgs']]]] = None,
                 service_topologies: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTopologyArgs']]]] = None,
                 service_topology_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTopologyComparisonArgs']]]] = None,
                 service_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTypeComparisonArgs']]]] = None,
                 service_types: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTypeArgs']]]] = None,
                 simple_host_tech_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSimpleHostTechComparisonArgs']]]] = None,
                 simple_tech_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSimpleTechComparisonArgs']]]] = None,
                 string_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringComparisonArgs']]]] = None,
                 string_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringConditionKeyArgs']]]] = None,
                 string_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringKeyArgs']]]] = None,
                 strings: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringArgs']]]] = None,
                 synthetic_engine_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSyntheticEngineTypeComparisonArgs']]]] = None,
                 synthetic_engines: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSyntheticEngineArgs']]]] = None,
                 tag_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionTagComparisonArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionTagArgs']]]] = None,
                 teches: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionTechArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if application_type_comparisons is not None:
            warnings.warn("""You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""application_type_comparisons is deprecated: You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.""")
        if application_type_comparisons is not None:
            pulumi.set(__self__, "application_type_comparisons", application_type_comparisons)
        if application_types is not None:
            pulumi.set(__self__, "application_types", application_types)
        if azure_compute_mode_comparisons is not None:
            pulumi.set(__self__, "azure_compute_mode_comparisons", azure_compute_mode_comparisons)
        if azure_compute_modes is not None:
            warnings.warn("""You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""azure_compute_modes is deprecated: You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.""")
        if azure_compute_modes is not None:
            pulumi.set(__self__, "azure_compute_modes", azure_compute_modes)
        if azure_sku_comparisions is not None:
            warnings.warn("""You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""azure_sku_comparisions is deprecated: You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.""")
        if azure_sku_comparisions is not None:
            pulumi.set(__self__, "azure_sku_comparisions", azure_sku_comparisions)
        if azure_skus is not None:
            pulumi.set(__self__, "azure_skus", azure_skus)
        if base_comparison_basics is not None:
            warnings.warn("""You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""base_comparison_basics is deprecated: You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.""")
        if base_comparison_basics is not None:
            pulumi.set(__self__, "base_comparison_basics", base_comparison_basics)
        if base_condition_keys is not None:
            warnings.warn("""'base_condition_key' is deprecated. You should use 'key'""", DeprecationWarning)
            pulumi.log.warn("""base_condition_keys is deprecated: 'base_condition_key' is deprecated. You should use 'key'""")
        if base_condition_keys is not None:
            pulumi.set(__self__, "base_condition_keys", base_condition_keys)
        if bitness_comparisions is not None:
            warnings.warn("""You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""bitness_comparisions is deprecated: You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.""")
        if bitness_comparisions is not None:
            pulumi.set(__self__, "bitness_comparisions", bitness_comparisions)
        if bitnesses is not None:
            pulumi.set(__self__, "bitnesses", bitnesses)
        if cloud_type_comparisons is not None:
            warnings.warn("""You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""cloud_type_comparisons is deprecated: You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.""")
        if cloud_type_comparisons is not None:
            pulumi.set(__self__, "cloud_type_comparisons", cloud_type_comparisons)
        if cloud_types is not None:
            pulumi.set(__self__, "cloud_types", cloud_types)
        if comparisons is not None:
            pulumi.set(__self__, "comparisons", comparisons)
        if custom_application_type_comparisons is not None:
            warnings.warn("""You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""custom_application_type_comparisons is deprecated: You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.""")
        if custom_application_type_comparisons is not None:
            pulumi.set(__self__, "custom_application_type_comparisons", custom_application_type_comparisons)
        if custom_application_types is not None:
            pulumi.set(__self__, "custom_application_types", custom_application_types)
        if custom_host_metadata_condition_keys is not None:
            warnings.warn("""'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'""", DeprecationWarning)
            pulumi.log.warn("""custom_host_metadata_condition_keys is deprecated: 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'""")
        if custom_host_metadata_condition_keys is not None:
            pulumi.set(__self__, "custom_host_metadata_condition_keys", custom_host_metadata_condition_keys)
        if custom_host_metadatas is not None:
            pulumi.set(__self__, "custom_host_metadatas", custom_host_metadatas)
        if custom_process_metadata_condition_keys is not None:
            warnings.warn("""'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'""", DeprecationWarning)
            pulumi.log.warn("""custom_process_metadata_condition_keys is deprecated: 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'""")
        if custom_process_metadata_condition_keys is not None:
            pulumi.set(__self__, "custom_process_metadata_condition_keys", custom_process_metadata_condition_keys)
        if custom_process_metadatas is not None:
            pulumi.set(__self__, "custom_process_metadatas", custom_process_metadatas)
        if database_topologies is not None:
            pulumi.set(__self__, "database_topologies", database_topologies)
        if database_topology_comparisons is not None:
            warnings.warn("""You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""database_topology_comparisons is deprecated: You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.""")
        if database_topology_comparisons is not None:
            pulumi.set(__self__, "database_topology_comparisons", database_topology_comparisons)
        if dcrum_decoder_comparisons is not None:
            warnings.warn("""You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""dcrum_decoder_comparisons is deprecated: You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.""")
        if dcrum_decoder_comparisons is not None:
            pulumi.set(__self__, "dcrum_decoder_comparisons", dcrum_decoder_comparisons)
        if dcrum_decoders is not None:
            pulumi.set(__self__, "dcrum_decoders", dcrum_decoders)
        if entities is not None:
            pulumi.set(__self__, "entities", entities)
        if entity_id_comparisons is not None:
            warnings.warn("""You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""entity_id_comparisons is deprecated: You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.""")
        if entity_id_comparisons is not None:
            pulumi.set(__self__, "entity_id_comparisons", entity_id_comparisons)
        if host_teches is not None:
            pulumi.set(__self__, "host_teches", host_teches)
        if hypervisor_type_comparisions is not None:
            warnings.warn("""`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead""", DeprecationWarning)
            pulumi.log.warn("""hypervisor_type_comparisions is deprecated: `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead""")
        if hypervisor_type_comparisions is not None:
            pulumi.set(__self__, "hypervisor_type_comparisions", hypervisor_type_comparisions)
        if hypervisors is not None:
            pulumi.set(__self__, "hypervisors", hypervisors)
        if indexed_name_comparisons is not None:
            warnings.warn("""You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_name_comparisons is deprecated: You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_name_comparisons is not None:
            pulumi.set(__self__, "indexed_name_comparisons", indexed_name_comparisons)
        if indexed_names is not None:
            pulumi.set(__self__, "indexed_names", indexed_names)
        if indexed_string_comparisons is not None:
            warnings.warn("""You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_string_comparisons is deprecated: You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_string_comparisons is not None:
            pulumi.set(__self__, "indexed_string_comparisons", indexed_string_comparisons)
        if indexed_strings is not None:
            pulumi.set(__self__, "indexed_strings", indexed_strings)
        if indexed_tag_comparisons is not None:
            warnings.warn("""You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_tag_comparisons is deprecated: You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_tag_comparisons is not None:
            pulumi.set(__self__, "indexed_tag_comparisons", indexed_tag_comparisons)
        if indexed_tags is not None:
            pulumi.set(__self__, "indexed_tags", indexed_tags)
        if integer_comparisons is not None:
            warnings.warn("""You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""integer_comparisons is deprecated: You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.""")
        if integer_comparisons is not None:
            pulumi.set(__self__, "integer_comparisons", integer_comparisons)
        if integers is not None:
            pulumi.set(__self__, "integers", integers)
        if ipaddress_comparisons is not None:
            warnings.warn("""You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""ipaddress_comparisons is deprecated: You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.""")
        if ipaddress_comparisons is not None:
            pulumi.set(__self__, "ipaddress_comparisons", ipaddress_comparisons)
        if ipaddresses is not None:
            pulumi.set(__self__, "ipaddresses", ipaddresses)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if mobile_platform_comparisons is not None:
            warnings.warn("""You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""mobile_platform_comparisons is deprecated: You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.""")
        if mobile_platform_comparisons is not None:
            pulumi.set(__self__, "mobile_platform_comparisons", mobile_platform_comparisons)
        if mobile_platforms is not None:
            pulumi.set(__self__, "mobile_platforms", mobile_platforms)
        if os_arches is not None:
            pulumi.set(__self__, "os_arches", os_arches)
        if os_types is not None:
            pulumi.set(__self__, "os_types", os_types)
        if osarchitecture_comparisons is not None:
            warnings.warn("""You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""osarchitecture_comparisons is deprecated: You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.""")
        if osarchitecture_comparisons is not None:
            pulumi.set(__self__, "osarchitecture_comparisons", osarchitecture_comparisons)
        if ostype_comparisons is not None:
            warnings.warn("""You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""ostype_comparisons is deprecated: You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.""")
        if ostype_comparisons is not None:
            pulumi.set(__self__, "ostype_comparisons", ostype_comparisons)
        if paas_type_comparisons is not None:
            warnings.warn("""You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""paas_type_comparisons is deprecated: You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.""")
        if paas_type_comparisons is not None:
            pulumi.set(__self__, "paas_type_comparisons", paas_type_comparisons)
        if paas_types is not None:
            pulumi.set(__self__, "paas_types", paas_types)
        if process_metadata_condition_keys is not None:
            warnings.warn("""'process_metadata_condition_key' is deprecated. You should use 'process_metadata'""", DeprecationWarning)
            pulumi.log.warn("""process_metadata_condition_keys is deprecated: 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'""")
        if process_metadata_condition_keys is not None:
            pulumi.set(__self__, "process_metadata_condition_keys", process_metadata_condition_keys)
        if process_metadatas is not None:
            pulumi.set(__self__, "process_metadatas", process_metadatas)
        if service_topologies is not None:
            pulumi.set(__self__, "service_topologies", service_topologies)
        if service_topology_comparisons is not None:
            warnings.warn("""You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""service_topology_comparisons is deprecated: You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.""")
        if service_topology_comparisons is not None:
            pulumi.set(__self__, "service_topology_comparisons", service_topology_comparisons)
        if service_type_comparisons is not None:
            warnings.warn("""You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""service_type_comparisons is deprecated: You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.""")
        if service_type_comparisons is not None:
            pulumi.set(__self__, "service_type_comparisons", service_type_comparisons)
        if service_types is not None:
            pulumi.set(__self__, "service_types", service_types)
        if simple_host_tech_comparisons is not None:
            warnings.warn("""You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""simple_host_tech_comparisons is deprecated: You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.""")
        if simple_host_tech_comparisons is not None:
            pulumi.set(__self__, "simple_host_tech_comparisons", simple_host_tech_comparisons)
        if simple_tech_comparisons is not None:
            warnings.warn("""You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""simple_tech_comparisons is deprecated: You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.""")
        if simple_tech_comparisons is not None:
            pulumi.set(__self__, "simple_tech_comparisons", simple_tech_comparisons)
        if string_comparisons is not None:
            warnings.warn("""You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""string_comparisons is deprecated: You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.""")
        if string_comparisons is not None:
            pulumi.set(__self__, "string_comparisons", string_comparisons)
        if string_condition_keys is not None:
            warnings.warn("""'string_condition_key' is deprecated. You should use 'string_key'""", DeprecationWarning)
            pulumi.log.warn("""string_condition_keys is deprecated: 'string_condition_key' is deprecated. You should use 'string_key'""")
        if string_condition_keys is not None:
            pulumi.set(__self__, "string_condition_keys", string_condition_keys)
        if string_keys is not None:
            pulumi.set(__self__, "string_keys", string_keys)
        if strings is not None:
            pulumi.set(__self__, "strings", strings)
        if synthetic_engine_type_comparisons is not None:
            warnings.warn("""You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""synthetic_engine_type_comparisons is deprecated: You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.""")
        if synthetic_engine_type_comparisons is not None:
            pulumi.set(__self__, "synthetic_engine_type_comparisons", synthetic_engine_type_comparisons)
        if synthetic_engines is not None:
            pulumi.set(__self__, "synthetic_engines", synthetic_engines)
        if tag_comparisons is not None:
            warnings.warn("""You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""tag_comparisons is deprecated: You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.""")
        if tag_comparisons is not None:
            pulumi.set(__self__, "tag_comparisons", tag_comparisons)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if teches is not None:
            pulumi.set(__self__, "teches", teches)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="applicationTypeComparisons")
    def application_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionApplicationTypeComparisonArgs']]]]:
        return pulumi.get(self, "application_type_comparisons")

    @application_type_comparisons.setter
    def application_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionApplicationTypeComparisonArgs']]]]):
        pulumi.set(self, "application_type_comparisons", value)

    @property
    @pulumi.getter(name="applicationTypes")
    def application_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionApplicationTypeArgs']]]]:
        return pulumi.get(self, "application_types")

    @application_types.setter
    def application_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionApplicationTypeArgs']]]]):
        pulumi.set(self, "application_types", value)

    @property
    @pulumi.getter(name="azureComputeModeComparisons")
    def azure_compute_mode_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureComputeModeComparisonArgs']]]]:
        return pulumi.get(self, "azure_compute_mode_comparisons")

    @azure_compute_mode_comparisons.setter
    def azure_compute_mode_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureComputeModeComparisonArgs']]]]):
        pulumi.set(self, "azure_compute_mode_comparisons", value)

    @property
    @pulumi.getter(name="azureComputeModes")
    def azure_compute_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureComputeModeArgs']]]]:
        return pulumi.get(self, "azure_compute_modes")

    @azure_compute_modes.setter
    def azure_compute_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureComputeModeArgs']]]]):
        pulumi.set(self, "azure_compute_modes", value)

    @property
    @pulumi.getter(name="azureSkuComparisions")
    def azure_sku_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureSkuComparisionArgs']]]]:
        return pulumi.get(self, "azure_sku_comparisions")

    @azure_sku_comparisions.setter
    def azure_sku_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureSkuComparisionArgs']]]]):
        pulumi.set(self, "azure_sku_comparisions", value)

    @property
    @pulumi.getter(name="azureSkus")
    def azure_skus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureSkusArgs']]]]:
        return pulumi.get(self, "azure_skus")

    @azure_skus.setter
    def azure_skus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionAzureSkusArgs']]]]):
        pulumi.set(self, "azure_skus", value)

    @property
    @pulumi.getter(name="baseComparisonBasics")
    def base_comparison_basics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBaseComparisonBasicArgs']]]]:
        return pulumi.get(self, "base_comparison_basics")

    @base_comparison_basics.setter
    def base_comparison_basics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBaseComparisonBasicArgs']]]]):
        pulumi.set(self, "base_comparison_basics", value)

    @property
    @pulumi.getter(name="baseConditionKeys")
    def base_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBaseConditionKeyArgs']]]]:
        return pulumi.get(self, "base_condition_keys")

    @base_condition_keys.setter
    def base_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBaseConditionKeyArgs']]]]):
        pulumi.set(self, "base_condition_keys", value)

    @property
    @pulumi.getter(name="bitnessComparisions")
    def bitness_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBitnessComparisionArgs']]]]:
        return pulumi.get(self, "bitness_comparisions")

    @bitness_comparisions.setter
    def bitness_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBitnessComparisionArgs']]]]):
        pulumi.set(self, "bitness_comparisions", value)

    @property
    @pulumi.getter
    def bitnesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBitnessArgs']]]]:
        return pulumi.get(self, "bitnesses")

    @bitnesses.setter
    def bitnesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionBitnessArgs']]]]):
        pulumi.set(self, "bitnesses", value)

    @property
    @pulumi.getter(name="cloudTypeComparisons")
    def cloud_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCloudTypeComparisonArgs']]]]:
        return pulumi.get(self, "cloud_type_comparisons")

    @cloud_type_comparisons.setter
    def cloud_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCloudTypeComparisonArgs']]]]):
        pulumi.set(self, "cloud_type_comparisons", value)

    @property
    @pulumi.getter(name="cloudTypes")
    def cloud_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCloudTypeArgs']]]]:
        return pulumi.get(self, "cloud_types")

    @cloud_types.setter
    def cloud_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCloudTypeArgs']]]]):
        pulumi.set(self, "cloud_types", value)

    @property
    @pulumi.getter
    def comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionComparisonArgs']]]]:
        return pulumi.get(self, "comparisons")

    @comparisons.setter
    def comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionComparisonArgs']]]]):
        pulumi.set(self, "comparisons", value)

    @property
    @pulumi.getter(name="customApplicationTypeComparisons")
    def custom_application_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomApplicationTypeComparisonArgs']]]]:
        return pulumi.get(self, "custom_application_type_comparisons")

    @custom_application_type_comparisons.setter
    def custom_application_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomApplicationTypeComparisonArgs']]]]):
        pulumi.set(self, "custom_application_type_comparisons", value)

    @property
    @pulumi.getter(name="customApplicationTypes")
    def custom_application_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomApplicationTypeArgs']]]]:
        return pulumi.get(self, "custom_application_types")

    @custom_application_types.setter
    def custom_application_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomApplicationTypeArgs']]]]):
        pulumi.set(self, "custom_application_types", value)

    @property
    @pulumi.getter(name="customHostMetadataConditionKeys")
    def custom_host_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "custom_host_metadata_condition_keys")

    @custom_host_metadata_condition_keys.setter
    def custom_host_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "custom_host_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="customHostMetadatas")
    def custom_host_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataArgs']]]]:
        return pulumi.get(self, "custom_host_metadatas")

    @custom_host_metadatas.setter
    def custom_host_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataArgs']]]]):
        pulumi.set(self, "custom_host_metadatas", value)

    @property
    @pulumi.getter(name="customProcessMetadataConditionKeys")
    def custom_process_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "custom_process_metadata_condition_keys")

    @custom_process_metadata_condition_keys.setter
    def custom_process_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "custom_process_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="customProcessMetadatas")
    def custom_process_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataArgs']]]]:
        return pulumi.get(self, "custom_process_metadatas")

    @custom_process_metadatas.setter
    def custom_process_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataArgs']]]]):
        pulumi.set(self, "custom_process_metadatas", value)

    @property
    @pulumi.getter(name="databaseTopologies")
    def database_topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDatabaseTopologyArgs']]]]:
        return pulumi.get(self, "database_topologies")

    @database_topologies.setter
    def database_topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDatabaseTopologyArgs']]]]):
        pulumi.set(self, "database_topologies", value)

    @property
    @pulumi.getter(name="databaseTopologyComparisons")
    def database_topology_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDatabaseTopologyComparisonArgs']]]]:
        return pulumi.get(self, "database_topology_comparisons")

    @database_topology_comparisons.setter
    def database_topology_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDatabaseTopologyComparisonArgs']]]]):
        pulumi.set(self, "database_topology_comparisons", value)

    @property
    @pulumi.getter(name="dcrumDecoderComparisons")
    def dcrum_decoder_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDcrumDecoderComparisonArgs']]]]:
        return pulumi.get(self, "dcrum_decoder_comparisons")

    @dcrum_decoder_comparisons.setter
    def dcrum_decoder_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDcrumDecoderComparisonArgs']]]]):
        pulumi.set(self, "dcrum_decoder_comparisons", value)

    @property
    @pulumi.getter(name="dcrumDecoders")
    def dcrum_decoders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDcrumDecoderArgs']]]]:
        return pulumi.get(self, "dcrum_decoders")

    @dcrum_decoders.setter
    def dcrum_decoders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionDcrumDecoderArgs']]]]):
        pulumi.set(self, "dcrum_decoders", value)

    @property
    @pulumi.getter
    def entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionEntityArgs']]]]:
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionEntityArgs']]]]):
        pulumi.set(self, "entities", value)

    @property
    @pulumi.getter(name="entityIdComparisons")
    def entity_id_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionEntityIdComparisonArgs']]]]:
        return pulumi.get(self, "entity_id_comparisons")

    @entity_id_comparisons.setter
    def entity_id_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionEntityIdComparisonArgs']]]]):
        pulumi.set(self, "entity_id_comparisons", value)

    @property
    @pulumi.getter(name="hostTeches")
    def host_teches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionHostTechArgs']]]]:
        return pulumi.get(self, "host_teches")

    @host_teches.setter
    def host_teches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionHostTechArgs']]]]):
        pulumi.set(self, "host_teches", value)

    @property
    @pulumi.getter(name="hypervisorTypeComparisions")
    def hypervisor_type_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionHypervisorTypeComparisionArgs']]]]:
        return pulumi.get(self, "hypervisor_type_comparisions")

    @hypervisor_type_comparisions.setter
    def hypervisor_type_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionHypervisorTypeComparisionArgs']]]]):
        pulumi.set(self, "hypervisor_type_comparisions", value)

    @property
    @pulumi.getter
    def hypervisors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionHypervisorArgs']]]]:
        return pulumi.get(self, "hypervisors")

    @hypervisors.setter
    def hypervisors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionHypervisorArgs']]]]):
        pulumi.set(self, "hypervisors", value)

    @property
    @pulumi.getter(name="indexedNameComparisons")
    def indexed_name_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedNameComparisonArgs']]]]:
        return pulumi.get(self, "indexed_name_comparisons")

    @indexed_name_comparisons.setter
    def indexed_name_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedNameComparisonArgs']]]]):
        pulumi.set(self, "indexed_name_comparisons", value)

    @property
    @pulumi.getter(name="indexedNames")
    def indexed_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedNameArgs']]]]:
        return pulumi.get(self, "indexed_names")

    @indexed_names.setter
    def indexed_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedNameArgs']]]]):
        pulumi.set(self, "indexed_names", value)

    @property
    @pulumi.getter(name="indexedStringComparisons")
    def indexed_string_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedStringComparisonArgs']]]]:
        return pulumi.get(self, "indexed_string_comparisons")

    @indexed_string_comparisons.setter
    def indexed_string_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedStringComparisonArgs']]]]):
        pulumi.set(self, "indexed_string_comparisons", value)

    @property
    @pulumi.getter(name="indexedStrings")
    def indexed_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedStringArgs']]]]:
        return pulumi.get(self, "indexed_strings")

    @indexed_strings.setter
    def indexed_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedStringArgs']]]]):
        pulumi.set(self, "indexed_strings", value)

    @property
    @pulumi.getter(name="indexedTagComparisons")
    def indexed_tag_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedTagComparisonArgs']]]]:
        return pulumi.get(self, "indexed_tag_comparisons")

    @indexed_tag_comparisons.setter
    def indexed_tag_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedTagComparisonArgs']]]]):
        pulumi.set(self, "indexed_tag_comparisons", value)

    @property
    @pulumi.getter(name="indexedTags")
    def indexed_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedTagArgs']]]]:
        return pulumi.get(self, "indexed_tags")

    @indexed_tags.setter
    def indexed_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIndexedTagArgs']]]]):
        pulumi.set(self, "indexed_tags", value)

    @property
    @pulumi.getter(name="integerComparisons")
    def integer_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIntegerComparisonArgs']]]]:
        return pulumi.get(self, "integer_comparisons")

    @integer_comparisons.setter
    def integer_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIntegerComparisonArgs']]]]):
        pulumi.set(self, "integer_comparisons", value)

    @property
    @pulumi.getter
    def integers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIntegerArgs']]]]:
        return pulumi.get(self, "integers")

    @integers.setter
    def integers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIntegerArgs']]]]):
        pulumi.set(self, "integers", value)

    @property
    @pulumi.getter(name="ipaddressComparisons")
    def ipaddress_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIpaddressComparisonArgs']]]]:
        return pulumi.get(self, "ipaddress_comparisons")

    @ipaddress_comparisons.setter
    def ipaddress_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIpaddressComparisonArgs']]]]):
        pulumi.set(self, "ipaddress_comparisons", value)

    @property
    @pulumi.getter
    def ipaddresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIpaddressArgs']]]]:
        return pulumi.get(self, "ipaddresses")

    @ipaddresses.setter
    def ipaddresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionIpaddressArgs']]]]):
        pulumi.set(self, "ipaddresses", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionKeyArgs']]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="mobilePlatformComparisons")
    def mobile_platform_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionMobilePlatformComparisonArgs']]]]:
        return pulumi.get(self, "mobile_platform_comparisons")

    @mobile_platform_comparisons.setter
    def mobile_platform_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionMobilePlatformComparisonArgs']]]]):
        pulumi.set(self, "mobile_platform_comparisons", value)

    @property
    @pulumi.getter(name="mobilePlatforms")
    def mobile_platforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionMobilePlatformArgs']]]]:
        return pulumi.get(self, "mobile_platforms")

    @mobile_platforms.setter
    def mobile_platforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionMobilePlatformArgs']]]]):
        pulumi.set(self, "mobile_platforms", value)

    @property
    @pulumi.getter(name="osArches")
    def os_arches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOsArchArgs']]]]:
        return pulumi.get(self, "os_arches")

    @os_arches.setter
    def os_arches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOsArchArgs']]]]):
        pulumi.set(self, "os_arches", value)

    @property
    @pulumi.getter(name="osTypes")
    def os_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOsTypeArgs']]]]:
        return pulumi.get(self, "os_types")

    @os_types.setter
    def os_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOsTypeArgs']]]]):
        pulumi.set(self, "os_types", value)

    @property
    @pulumi.getter(name="osarchitectureComparisons")
    def osarchitecture_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOsarchitectureComparisonArgs']]]]:
        return pulumi.get(self, "osarchitecture_comparisons")

    @osarchitecture_comparisons.setter
    def osarchitecture_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOsarchitectureComparisonArgs']]]]):
        pulumi.set(self, "osarchitecture_comparisons", value)

    @property
    @pulumi.getter(name="ostypeComparisons")
    def ostype_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOstypeComparisonArgs']]]]:
        return pulumi.get(self, "ostype_comparisons")

    @ostype_comparisons.setter
    def ostype_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionOstypeComparisonArgs']]]]):
        pulumi.set(self, "ostype_comparisons", value)

    @property
    @pulumi.getter(name="paasTypeComparisons")
    def paas_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionPaasTypeComparisonArgs']]]]:
        return pulumi.get(self, "paas_type_comparisons")

    @paas_type_comparisons.setter
    def paas_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionPaasTypeComparisonArgs']]]]):
        pulumi.set(self, "paas_type_comparisons", value)

    @property
    @pulumi.getter(name="paasTypes")
    def paas_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionPaasTypeArgs']]]]:
        return pulumi.get(self, "paas_types")

    @paas_types.setter
    def paas_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionPaasTypeArgs']]]]):
        pulumi.set(self, "paas_types", value)

    @property
    @pulumi.getter(name="processMetadataConditionKeys")
    def process_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionProcessMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "process_metadata_condition_keys")

    @process_metadata_condition_keys.setter
    def process_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionProcessMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "process_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="processMetadatas")
    def process_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionProcessMetadataArgs']]]]:
        return pulumi.get(self, "process_metadatas")

    @process_metadatas.setter
    def process_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionProcessMetadataArgs']]]]):
        pulumi.set(self, "process_metadatas", value)

    @property
    @pulumi.getter(name="serviceTopologies")
    def service_topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTopologyArgs']]]]:
        return pulumi.get(self, "service_topologies")

    @service_topologies.setter
    def service_topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTopologyArgs']]]]):
        pulumi.set(self, "service_topologies", value)

    @property
    @pulumi.getter(name="serviceTopologyComparisons")
    def service_topology_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTopologyComparisonArgs']]]]:
        return pulumi.get(self, "service_topology_comparisons")

    @service_topology_comparisons.setter
    def service_topology_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTopologyComparisonArgs']]]]):
        pulumi.set(self, "service_topology_comparisons", value)

    @property
    @pulumi.getter(name="serviceTypeComparisons")
    def service_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTypeComparisonArgs']]]]:
        return pulumi.get(self, "service_type_comparisons")

    @service_type_comparisons.setter
    def service_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTypeComparisonArgs']]]]):
        pulumi.set(self, "service_type_comparisons", value)

    @property
    @pulumi.getter(name="serviceTypes")
    def service_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTypeArgs']]]]:
        return pulumi.get(self, "service_types")

    @service_types.setter
    def service_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionServiceTypeArgs']]]]):
        pulumi.set(self, "service_types", value)

    @property
    @pulumi.getter(name="simpleHostTechComparisons")
    def simple_host_tech_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSimpleHostTechComparisonArgs']]]]:
        return pulumi.get(self, "simple_host_tech_comparisons")

    @simple_host_tech_comparisons.setter
    def simple_host_tech_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSimpleHostTechComparisonArgs']]]]):
        pulumi.set(self, "simple_host_tech_comparisons", value)

    @property
    @pulumi.getter(name="simpleTechComparisons")
    def simple_tech_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSimpleTechComparisonArgs']]]]:
        return pulumi.get(self, "simple_tech_comparisons")

    @simple_tech_comparisons.setter
    def simple_tech_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSimpleTechComparisonArgs']]]]):
        pulumi.set(self, "simple_tech_comparisons", value)

    @property
    @pulumi.getter(name="stringComparisons")
    def string_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringComparisonArgs']]]]:
        return pulumi.get(self, "string_comparisons")

    @string_comparisons.setter
    def string_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringComparisonArgs']]]]):
        pulumi.set(self, "string_comparisons", value)

    @property
    @pulumi.getter(name="stringConditionKeys")
    def string_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringConditionKeyArgs']]]]:
        return pulumi.get(self, "string_condition_keys")

    @string_condition_keys.setter
    def string_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringConditionKeyArgs']]]]):
        pulumi.set(self, "string_condition_keys", value)

    @property
    @pulumi.getter(name="stringKeys")
    def string_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringKeyArgs']]]]:
        return pulumi.get(self, "string_keys")

    @string_keys.setter
    def string_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringKeyArgs']]]]):
        pulumi.set(self, "string_keys", value)

    @property
    @pulumi.getter
    def strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringArgs']]]]:
        return pulumi.get(self, "strings")

    @strings.setter
    def strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionStringArgs']]]]):
        pulumi.set(self, "strings", value)

    @property
    @pulumi.getter(name="syntheticEngineTypeComparisons")
    def synthetic_engine_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSyntheticEngineTypeComparisonArgs']]]]:
        return pulumi.get(self, "synthetic_engine_type_comparisons")

    @synthetic_engine_type_comparisons.setter
    def synthetic_engine_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSyntheticEngineTypeComparisonArgs']]]]):
        pulumi.set(self, "synthetic_engine_type_comparisons", value)

    @property
    @pulumi.getter(name="syntheticEngines")
    def synthetic_engines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSyntheticEngineArgs']]]]:
        return pulumi.get(self, "synthetic_engines")

    @synthetic_engines.setter
    def synthetic_engines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionSyntheticEngineArgs']]]]):
        pulumi.set(self, "synthetic_engines", value)

    @property
    @pulumi.getter(name="tagComparisons")
    def tag_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionTagComparisonArgs']]]]:
        return pulumi.get(self, "tag_comparisons")

    @tag_comparisons.setter
    def tag_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionTagComparisonArgs']]]]):
        pulumi.set(self, "tag_comparisons", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def teches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionTechArgs']]]]:
        return pulumi.get(self, "teches")

    @teches.setter
    def teches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneRuleConditionTechArgs']]]]):
        pulumi.set(self, "teches", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionApplicationTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionApplicationTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionAzureComputeModeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionAzureComputeModeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionAzureSkuComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionAzureSkusArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionBaseComparisonBasicArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionBaseConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionBitnessArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionBitnessComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionCloudTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionCloudTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionComparisonArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionCustomApplicationTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionCustomApplicationTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionCustomHostMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataDynamicKeyArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionCustomHostMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKeyArgs'],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionCustomHostMetadataDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionCustomProcessMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataDynamicKeyArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionCustomProcessMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKeyArgs'],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionCustomProcessMetadataDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionDatabaseTopologyArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionDatabaseTopologyComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionDcrumDecoderArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionDcrumDecoderComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionEntityArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionEntityIdComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionHostTechArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ManagementZoneRuleConditionHostTechValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ManagementZoneRuleConditionHostTechValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ManagementZoneRuleConditionHostTechValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionHostTechValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class ManagementZoneRuleConditionHypervisorArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionHypervisorTypeComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIndexedNameArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIndexedNameComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIndexedStringArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIndexedStringComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIndexedTagArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ManagementZoneRuleConditionIndexedTagValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ManagementZoneRuleConditionIndexedTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ManagementZoneRuleConditionIndexedTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIndexedTagComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ManagementZoneRuleConditionIndexedTagComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ManagementZoneRuleConditionIndexedTagComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ManagementZoneRuleConditionIndexedTagComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIndexedTagComparisonValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIndexedTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIntegerArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIntegerComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIpaddressArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionIpaddressComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionMobilePlatformArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionMobilePlatformComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionOsArchArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionOsTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionOsarchitectureComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionOstypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionPaasTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionPaasTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionProcessMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionProcessMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionServiceTopologyArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionServiceTopologyComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionServiceTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionServiceTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionSimpleHostTechComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ManagementZoneRuleConditionSimpleHostTechComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ManagementZoneRuleConditionSimpleHostTechComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ManagementZoneRuleConditionSimpleHostTechComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionSimpleHostTechComparisonValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class ManagementZoneRuleConditionSimpleTechComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ManagementZoneRuleConditionSimpleTechComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ManagementZoneRuleConditionSimpleTechComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ManagementZoneRuleConditionSimpleTechComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionSimpleTechComparisonValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class ManagementZoneRuleConditionStringArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionStringComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionStringConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionStringKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ManagementZoneRuleConditionSyntheticEngineArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionSyntheticEngineTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionTagArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ManagementZoneRuleConditionTagValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ManagementZoneRuleConditionTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ManagementZoneRuleConditionTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionTagComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ManagementZoneRuleConditionTagComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ManagementZoneRuleConditionTagComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ManagementZoneRuleConditionTagComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionTagComparisonValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionTechArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ManagementZoneRuleConditionTechValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ManagementZoneRuleConditionTechValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ManagementZoneRuleConditionTechValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ManagementZoneRuleConditionTechValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class ManagementZoneV2RulesArgs:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneV2RulesRuleArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ManagementZoneV2RulesRuleArgs']]] rules: A management zone rule
        """
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneV2RulesRuleArgs']]]]:
        """
        A management zone rule
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneV2RulesRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ManagementZoneV2RulesRuleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 attribute_rule: Optional[pulumi.Input['ManagementZoneV2RulesRuleAttributeRuleArgs']] = None,
                 dimension_rule: Optional[pulumi.Input['ManagementZoneV2RulesRuleDimensionRuleArgs']] = None,
                 entity_selector: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "type", type)
        if attribute_rule is not None:
            pulumi.set(__self__, "attribute_rule", attribute_rule)
        if dimension_rule is not None:
            pulumi.set(__self__, "dimension_rule", dimension_rule)
        if entity_selector is not None:
            pulumi.set(__self__, "entity_selector", entity_selector)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="attributeRule")
    def attribute_rule(self) -> Optional[pulumi.Input['ManagementZoneV2RulesRuleAttributeRuleArgs']]:
        return pulumi.get(self, "attribute_rule")

    @attribute_rule.setter
    def attribute_rule(self, value: Optional[pulumi.Input['ManagementZoneV2RulesRuleAttributeRuleArgs']]):
        pulumi.set(self, "attribute_rule", value)

    @property
    @pulumi.getter(name="dimensionRule")
    def dimension_rule(self) -> Optional[pulumi.Input['ManagementZoneV2RulesRuleDimensionRuleArgs']]:
        return pulumi.get(self, "dimension_rule")

    @dimension_rule.setter
    def dimension_rule(self, value: Optional[pulumi.Input['ManagementZoneV2RulesRuleDimensionRuleArgs']]):
        pulumi.set(self, "dimension_rule", value)

    @property
    @pulumi.getter(name="entitySelector")
    def entity_selector(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_selector")

    @entity_selector.setter
    def entity_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_selector", value)


@pulumi.input_type
class ManagementZoneV2RulesRuleAttributeRuleArgs:
    def __init__(__self__, *,
                 attribute_conditions: pulumi.Input['ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsArgs'],
                 entity_type: pulumi.Input[str],
                 azure_to_pgpropagation: Optional[pulumi.Input[bool]] = None,
                 azure_to_service_propagation: Optional[pulumi.Input[bool]] = None,
                 custom_device_group_to_custom_device_propagation: Optional[pulumi.Input[bool]] = None,
                 host_to_pgpropagation: Optional[pulumi.Input[bool]] = None,
                 pg_to_host_propagation: Optional[pulumi.Input[bool]] = None,
                 pg_to_service_propagation: Optional[pulumi.Input[bool]] = None,
                 service_to_host_propagation: Optional[pulumi.Input[bool]] = None,
                 service_to_pgpropagation: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "attribute_conditions", attribute_conditions)
        pulumi.set(__self__, "entity_type", entity_type)
        if azure_to_pgpropagation is not None:
            pulumi.set(__self__, "azure_to_pgpropagation", azure_to_pgpropagation)
        if azure_to_service_propagation is not None:
            pulumi.set(__self__, "azure_to_service_propagation", azure_to_service_propagation)
        if custom_device_group_to_custom_device_propagation is not None:
            pulumi.set(__self__, "custom_device_group_to_custom_device_propagation", custom_device_group_to_custom_device_propagation)
        if host_to_pgpropagation is not None:
            pulumi.set(__self__, "host_to_pgpropagation", host_to_pgpropagation)
        if pg_to_host_propagation is not None:
            pulumi.set(__self__, "pg_to_host_propagation", pg_to_host_propagation)
        if pg_to_service_propagation is not None:
            pulumi.set(__self__, "pg_to_service_propagation", pg_to_service_propagation)
        if service_to_host_propagation is not None:
            pulumi.set(__self__, "service_to_host_propagation", service_to_host_propagation)
        if service_to_pgpropagation is not None:
            pulumi.set(__self__, "service_to_pgpropagation", service_to_pgpropagation)

    @property
    @pulumi.getter(name="attributeConditions")
    def attribute_conditions(self) -> pulumi.Input['ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsArgs']:
        return pulumi.get(self, "attribute_conditions")

    @attribute_conditions.setter
    def attribute_conditions(self, value: pulumi.Input['ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsArgs']):
        pulumi.set(self, "attribute_conditions", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="azureToPgpropagation")
    def azure_to_pgpropagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "azure_to_pgpropagation")

    @azure_to_pgpropagation.setter
    def azure_to_pgpropagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_to_pgpropagation", value)

    @property
    @pulumi.getter(name="azureToServicePropagation")
    def azure_to_service_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "azure_to_service_propagation")

    @azure_to_service_propagation.setter
    def azure_to_service_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_to_service_propagation", value)

    @property
    @pulumi.getter(name="customDeviceGroupToCustomDevicePropagation")
    def custom_device_group_to_custom_device_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "custom_device_group_to_custom_device_propagation")

    @custom_device_group_to_custom_device_propagation.setter
    def custom_device_group_to_custom_device_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_device_group_to_custom_device_propagation", value)

    @property
    @pulumi.getter(name="hostToPgpropagation")
    def host_to_pgpropagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "host_to_pgpropagation")

    @host_to_pgpropagation.setter
    def host_to_pgpropagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_to_pgpropagation", value)

    @property
    @pulumi.getter(name="pgToHostPropagation")
    def pg_to_host_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pg_to_host_propagation")

    @pg_to_host_propagation.setter
    def pg_to_host_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pg_to_host_propagation", value)

    @property
    @pulumi.getter(name="pgToServicePropagation")
    def pg_to_service_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pg_to_service_propagation")

    @pg_to_service_propagation.setter
    def pg_to_service_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pg_to_service_propagation", value)

    @property
    @pulumi.getter(name="serviceToHostPropagation")
    def service_to_host_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "service_to_host_propagation")

    @service_to_host_propagation.setter
    def service_to_host_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_to_host_propagation", value)

    @property
    @pulumi.getter(name="serviceToPgpropagation")
    def service_to_pgpropagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "service_to_pgpropagation")

    @service_to_pgpropagation.setter
    def service_to_pgpropagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_to_pgpropagation", value)


@pulumi.input_type
class ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsConditionArgs']]]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsConditionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 dynamic_key: Optional[pulumi.Input[str]] = None,
                 dynamic_key_source: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 enum_value: Optional[pulumi.Input[str]] = None,
                 integer_value: Optional[pulumi.Input[int]] = None,
                 string_value: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if dynamic_key is not None:
            pulumi.set(__self__, "dynamic_key", dynamic_key)
        if dynamic_key_source is not None:
            pulumi.set(__self__, "dynamic_key_source", dynamic_key_source)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if enum_value is not None:
            pulumi.set(__self__, "enum_value", enum_value)
        if integer_value is not None:
            pulumi.set(__self__, "integer_value", integer_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter(name="dynamicKeySource")
    def dynamic_key_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamic_key_source")

    @dynamic_key_source.setter
    def dynamic_key_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamic_key_source", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="enumValue")
    def enum_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enum_value")

    @enum_value.setter
    def enum_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enum_value", value)

    @property
    @pulumi.getter(name="integerValue")
    def integer_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "integer_value")

    @integer_value.setter
    def integer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "integer_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class ManagementZoneV2RulesRuleDimensionRuleArgs:
    def __init__(__self__, *,
                 applies_to: pulumi.Input[str],
                 dimension_conditions: Optional[pulumi.Input['ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsArgs']] = None):
        pulumi.set(__self__, "applies_to", applies_to)
        if dimension_conditions is not None:
            pulumi.set(__self__, "dimension_conditions", dimension_conditions)

    @property
    @pulumi.getter(name="appliesTo")
    def applies_to(self) -> pulumi.Input[str]:
        return pulumi.get(self, "applies_to")

    @applies_to.setter
    def applies_to(self, value: pulumi.Input[str]):
        pulumi.set(self, "applies_to", value)

    @property
    @pulumi.getter(name="dimensionConditions")
    def dimension_conditions(self) -> Optional[pulumi.Input['ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsArgs']]:
        return pulumi.get(self, "dimension_conditions")

    @dimension_conditions.setter
    def dimension_conditions(self, value: Optional[pulumi.Input['ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsArgs']]):
        pulumi.set(self, "dimension_conditions", value)


@pulumi.input_type
class ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsConditionArgs']]]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsConditionArgs:
    def __init__(__self__, *,
                 condition_type: pulumi.Input[str],
                 rule_matcher: pulumi.Input[str],
                 value: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "condition_type", condition_type)
        pulumi.set(__self__, "rule_matcher", rule_matcher)
        pulumi.set(__self__, "value", value)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition_type", value)

    @property
    @pulumi.getter(name="ruleMatcher")
    def rule_matcher(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_matcher")

    @rule_matcher.setter
    def rule_matcher(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_matcher", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class MetricEventsEventTemplateArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 event_type: pulumi.Input[str],
                 title: pulumi.Input[str],
                 davis_merge: Optional[pulumi.Input[bool]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsEventTemplateMetadataArgs']]]] = None):
        """
        :param pulumi.Input[str] description: The description of the event to trigger.
        :param pulumi.Input[str] event_type: The event type to trigger.
        :param pulumi.Input[str] title: The title of the event to trigger.
        :param pulumi.Input[bool] davis_merge: Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
        :param pulumi.Input[Sequence[pulumi.Input['MetricEventsEventTemplateMetadataArgs']]] metadatas: Set of additional key-value properties to be attached to the triggered event.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "title", title)
        if davis_merge is not None:
            pulumi.set(__self__, "davis_merge", davis_merge)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The description of the event to trigger.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Input[str]:
        """
        The event type to trigger.
        """
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the event to trigger.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="davisMerge")
    def davis_merge(self) -> Optional[pulumi.Input[bool]]:
        """
        Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
        """
        return pulumi.get(self, "davis_merge")

    @davis_merge.setter
    def davis_merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "davis_merge", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsEventTemplateMetadataArgs']]]]:
        """
        Set of additional key-value properties to be attached to the triggered event.
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsEventTemplateMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)


@pulumi.input_type
class MetricEventsEventTemplateMetadataArgs:
    def __init__(__self__, *,
                 metadata_key: pulumi.Input[str],
                 metadata_value: pulumi.Input[str]):
        pulumi.set(__self__, "metadata_key", metadata_key)
        pulumi.set(__self__, "metadata_value", metadata_value)

    @property
    @pulumi.getter(name="metadataKey")
    def metadata_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metadata_key")

    @metadata_key.setter
    def metadata_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "metadata_key", value)

    @property
    @pulumi.getter(name="metadataValue")
    def metadata_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metadata_value")

    @metadata_value.setter
    def metadata_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "metadata_value", value)


@pulumi.input_type
class MetricEventsModelPropertiesArgs:
    def __init__(__self__, *,
                 alert_condition: pulumi.Input[str],
                 alert_on_no_data: pulumi.Input[bool],
                 dealerting_samples: pulumi.Input[int],
                 samples: pulumi.Input[int],
                 type: pulumi.Input[str],
                 violating_samples: pulumi.Input[int],
                 signal_fluctuation: Optional[pulumi.Input[float]] = None,
                 threshold: Optional[pulumi.Input[float]] = None,
                 tolerance: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] alert_condition: The alert condition of the model properties
        :param pulumi.Input[bool] alert_on_no_data: The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
        :param pulumi.Input[int] dealerting_samples: The number of one-minute samples within the evaluation window that must go back to normal to close the event.
        :param pulumi.Input[int] samples: The number of one-minute samples that form the sliding evaluation window.
        :param pulumi.Input[str] type: Metric-key-based query definitions only support static thresholds.
        :param pulumi.Input[int] violating_samples: The number of one-minute samples within the evaluation window that must violate to trigger an event.
        :param pulumi.Input[float] signal_fluctuation: Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
        :param pulumi.Input[float] threshold: Raise an event if this value is violated
        :param pulumi.Input[float] tolerance: Controls the width of the confidence band and larger values lead to a less sensitive model
        """
        pulumi.set(__self__, "alert_condition", alert_condition)
        pulumi.set(__self__, "alert_on_no_data", alert_on_no_data)
        pulumi.set(__self__, "dealerting_samples", dealerting_samples)
        pulumi.set(__self__, "samples", samples)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "violating_samples", violating_samples)
        if signal_fluctuation is not None:
            pulumi.set(__self__, "signal_fluctuation", signal_fluctuation)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if tolerance is not None:
            pulumi.set(__self__, "tolerance", tolerance)

    @property
    @pulumi.getter(name="alertCondition")
    def alert_condition(self) -> pulumi.Input[str]:
        """
        The alert condition of the model properties
        """
        return pulumi.get(self, "alert_condition")

    @alert_condition.setter
    def alert_condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_condition", value)

    @property
    @pulumi.getter(name="alertOnNoData")
    def alert_on_no_data(self) -> pulumi.Input[bool]:
        """
        The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
        """
        return pulumi.get(self, "alert_on_no_data")

    @alert_on_no_data.setter
    def alert_on_no_data(self, value: pulumi.Input[bool]):
        pulumi.set(self, "alert_on_no_data", value)

    @property
    @pulumi.getter(name="dealertingSamples")
    def dealerting_samples(self) -> pulumi.Input[int]:
        """
        The number of one-minute samples within the evaluation window that must go back to normal to close the event.
        """
        return pulumi.get(self, "dealerting_samples")

    @dealerting_samples.setter
    def dealerting_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "dealerting_samples", value)

    @property
    @pulumi.getter
    def samples(self) -> pulumi.Input[int]:
        """
        The number of one-minute samples that form the sliding evaluation window.
        """
        return pulumi.get(self, "samples")

    @samples.setter
    def samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "samples", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Metric-key-based query definitions only support static thresholds.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="violatingSamples")
    def violating_samples(self) -> pulumi.Input[int]:
        """
        The number of one-minute samples within the evaluation window that must violate to trigger an event.
        """
        return pulumi.get(self, "violating_samples")

    @violating_samples.setter
    def violating_samples(self, value: pulumi.Input[int]):
        pulumi.set(self, "violating_samples", value)

    @property
    @pulumi.getter(name="signalFluctuation")
    def signal_fluctuation(self) -> Optional[pulumi.Input[float]]:
        """
        Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
        """
        return pulumi.get(self, "signal_fluctuation")

    @signal_fluctuation.setter
    def signal_fluctuation(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "signal_fluctuation", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Raise an event if this value is violated
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def tolerance(self) -> Optional[pulumi.Input[float]]:
        """
        Controls the width of the confidence band and larger values lead to a less sensitive model
        """
        return pulumi.get(self, "tolerance")

    @tolerance.setter
    def tolerance(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "tolerance", value)


@pulumi.input_type
class MetricEventsQueryDefinitionArgs:
    def __init__(__self__, *,
                 metric_key: pulumi.Input[str],
                 type: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 dimension_filter: Optional[pulumi.Input['MetricEventsQueryDefinitionDimensionFilterArgs']] = None,
                 entity_filter: Optional[pulumi.Input['MetricEventsQueryDefinitionEntityFilterArgs']] = None,
                 metric_selector: Optional[pulumi.Input[str]] = None,
                 query_offset: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] metric_key: The metric key of the query definition
        :param pulumi.Input[str] type: The type of query definition
        :param pulumi.Input[str] aggregation: The aggregation of the query definition
        :param pulumi.Input['MetricEventsQueryDefinitionDimensionFilterArgs'] dimension_filter: The dimension filters of the query definition
        :param pulumi.Input['MetricEventsQueryDefinitionEntityFilterArgs'] entity_filter: Use rule-based filters to define the scope this event monitors.
        :param pulumi.Input[str] metric_selector: To learn more, visit [Metric Selector](https://dt-url.net/metselad)
        :param pulumi.Input[int] query_offset: Minute offset of sliding evaluation window for metrics with latency
        """
        pulumi.set(__self__, "metric_key", metric_key)
        pulumi.set(__self__, "type", type)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if dimension_filter is not None:
            pulumi.set(__self__, "dimension_filter", dimension_filter)
        if entity_filter is not None:
            pulumi.set(__self__, "entity_filter", entity_filter)
        if metric_selector is not None:
            pulumi.set(__self__, "metric_selector", metric_selector)
        if query_offset is not None:
            pulumi.set(__self__, "query_offset", query_offset)

    @property
    @pulumi.getter(name="metricKey")
    def metric_key(self) -> pulumi.Input[str]:
        """
        The metric key of the query definition
        """
        return pulumi.get(self, "metric_key")

    @metric_key.setter
    def metric_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_key", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of query definition
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation of the query definition
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="dimensionFilter")
    def dimension_filter(self) -> Optional[pulumi.Input['MetricEventsQueryDefinitionDimensionFilterArgs']]:
        """
        The dimension filters of the query definition
        """
        return pulumi.get(self, "dimension_filter")

    @dimension_filter.setter
    def dimension_filter(self, value: Optional[pulumi.Input['MetricEventsQueryDefinitionDimensionFilterArgs']]):
        pulumi.set(self, "dimension_filter", value)

    @property
    @pulumi.getter(name="entityFilter")
    def entity_filter(self) -> Optional[pulumi.Input['MetricEventsQueryDefinitionEntityFilterArgs']]:
        """
        Use rule-based filters to define the scope this event monitors.
        """
        return pulumi.get(self, "entity_filter")

    @entity_filter.setter
    def entity_filter(self, value: Optional[pulumi.Input['MetricEventsQueryDefinitionEntityFilterArgs']]):
        pulumi.set(self, "entity_filter", value)

    @property
    @pulumi.getter(name="metricSelector")
    def metric_selector(self) -> Optional[pulumi.Input[str]]:
        """
        To learn more, visit [Metric Selector](https://dt-url.net/metselad)
        """
        return pulumi.get(self, "metric_selector")

    @metric_selector.setter
    def metric_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_selector", value)

    @property
    @pulumi.getter(name="queryOffset")
    def query_offset(self) -> Optional[pulumi.Input[int]]:
        """
        Minute offset of sliding evaluation window for metrics with latency
        """
        return pulumi.get(self, "query_offset")

    @query_offset.setter
    def query_offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "query_offset", value)


@pulumi.input_type
class MetricEventsQueryDefinitionDimensionFilterArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsQueryDefinitionDimensionFilterFilterArgs']]]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsQueryDefinitionDimensionFilterFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsQueryDefinitionDimensionFilterFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class MetricEventsQueryDefinitionDimensionFilterFilterArgs:
    def __init__(__self__, *,
                 dimension_key: pulumi.Input[str],
                 dimension_value: pulumi.Input[str]):
        pulumi.set(__self__, "dimension_key", dimension_key)
        pulumi.set(__self__, "dimension_value", dimension_value)

    @property
    @pulumi.getter(name="dimensionKey")
    def dimension_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dimension_key")

    @dimension_key.setter
    def dimension_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dimension_key", value)

    @property
    @pulumi.getter(name="dimensionValue")
    def dimension_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dimension_value")

    @dimension_value.setter
    def dimension_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "dimension_value", value)


@pulumi.input_type
class MetricEventsQueryDefinitionEntityFilterArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsQueryDefinitionEntityFilterConditionArgs']]]] = None,
                 dimension_key: Optional[pulumi.Input[str]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if dimension_key is not None:
            pulumi.set(__self__, "dimension_key", dimension_key)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsQueryDefinitionEntityFilterConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsQueryDefinitionEntityFilterConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="dimensionKey")
    def dimension_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dimension_key")

    @dimension_key.setter
    def dimension_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dimension_key", value)


@pulumi.input_type
class MetricEventsQueryDefinitionEntityFilterConditionArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsQueryDefinitionEntityFilterConditionConditionArgs']]]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsQueryDefinitionEntityFilterConditionConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MetricEventsQueryDefinitionEntityFilterConditionConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class MetricEventsQueryDefinitionEntityFilterConditionConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 type: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class MetricMetadataDimensionsArgs:
    def __init__(__self__, *,
                 dimensions: pulumi.Input[Sequence[pulumi.Input['MetricMetadataDimensionsDimensionArgs']]]):
        pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter
    def dimensions(self) -> pulumi.Input[Sequence[pulumi.Input['MetricMetadataDimensionsDimensionArgs']]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: pulumi.Input[Sequence[pulumi.Input['MetricMetadataDimensionsDimensionArgs']]]):
        pulumi.set(self, "dimensions", value)


@pulumi.input_type
class MetricMetadataDimensionsDimensionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: Display name
        """
        pulumi.set(__self__, "key", key)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class MetricMetadataMetricPropertiesArgs:
    def __init__(__self__, *,
                 value_type: pulumi.Input[str],
                 impact_relevant: Optional[pulumi.Input[bool]] = None,
                 latency: Optional[pulumi.Input[int]] = None,
                 max_value: Optional[pulumi.Input[float]] = None,
                 min_value: Optional[pulumi.Input[float]] = None,
                 root_cause_relevant: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] value_type: Possible Values: `Error`, `Score`, `Unknown`
        :param pulumi.Input[bool] impact_relevant: Whether (true or false) the metric is relevant to a problem's impact.
        """
        pulumi.set(__self__, "value_type", value_type)
        if impact_relevant is not None:
            pulumi.set(__self__, "impact_relevant", impact_relevant)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if root_cause_relevant is not None:
            pulumi.set(__self__, "root_cause_relevant", root_cause_relevant)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input[str]:
        """
        Possible Values: `Error`, `Score`, `Unknown`
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter(name="impactRelevant")
    def impact_relevant(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether (true or false) the metric is relevant to a problem's impact.
        """
        return pulumi.get(self, "impact_relevant")

    @impact_relevant.setter
    def impact_relevant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impact_relevant", value)

    @property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "latency", value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min_value")

    @min_value.setter
    def min_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_value", value)

    @property
    @pulumi.getter(name="rootCauseRelevant")
    def root_cause_relevant(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "root_cause_relevant")

    @root_cause_relevant.setter
    def root_cause_relevant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "root_cause_relevant", value)


@pulumi.input_type
class MobileAppAnomaliesErrorRateIncreaseArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 detection_mode: Optional[pulumi.Input[str]] = None,
                 error_rate_increase_auto: Optional[pulumi.Input['MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs']] = None,
                 error_rate_increase_fixed: Optional[pulumi.Input['MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Fixed`
        :param pulumi.Input['MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs'] error_rate_increase_auto: Alert if the percentage of user actions affected by reported errors exceeds **both** the absolute threshold and the relative threshold
        :param pulumi.Input['MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs'] error_rate_increase_fixed: Alert if the custom reported error rate threshold is exceeded during any 5-minute period
        """
        pulumi.set(__self__, "enabled", enabled)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if error_rate_increase_auto is not None:
            pulumi.set(__self__, "error_rate_increase_auto", error_rate_increase_auto)
        if error_rate_increase_fixed is not None:
            pulumi.set(__self__, "error_rate_increase_fixed", error_rate_increase_fixed)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Fixed`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)

    @property
    @pulumi.getter(name="errorRateIncreaseAuto")
    def error_rate_increase_auto(self) -> Optional[pulumi.Input['MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs']]:
        """
        Alert if the percentage of user actions affected by reported errors exceeds **both** the absolute threshold and the relative threshold
        """
        return pulumi.get(self, "error_rate_increase_auto")

    @error_rate_increase_auto.setter
    def error_rate_increase_auto(self, value: Optional[pulumi.Input['MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs']]):
        pulumi.set(self, "error_rate_increase_auto", value)

    @property
    @pulumi.getter(name="errorRateIncreaseFixed")
    def error_rate_increase_fixed(self) -> Optional[pulumi.Input['MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs']]:
        """
        Alert if the custom reported error rate threshold is exceeded during any 5-minute period
        """
        return pulumi.get(self, "error_rate_increase_fixed")

    @error_rate_increase_fixed.setter
    def error_rate_increase_fixed(self, value: Optional[pulumi.Input['MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs']]):
        pulumi.set(self, "error_rate_increase_fixed", value)


@pulumi.input_type
class MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAutoArgs:
    def __init__(__self__, *,
                 threshold_absolute: pulumi.Input[float],
                 threshold_relative: pulumi.Input[float]):
        pulumi.set(__self__, "threshold_absolute", threshold_absolute)
        pulumi.set(__self__, "threshold_relative", threshold_relative)

    @property
    @pulumi.getter(name="thresholdAbsolute")
    def threshold_absolute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold_absolute")

    @threshold_absolute.setter
    def threshold_absolute(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold_absolute", value)

    @property
    @pulumi.getter(name="thresholdRelative")
    def threshold_relative(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold_relative")

    @threshold_relative.setter
    def threshold_relative(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold_relative", value)


@pulumi.input_type
class MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixedArgs:
    def __init__(__self__, *,
                 sensitivity: pulumi.Input[str],
                 threshold_absolute: pulumi.Input[float]):
        pulumi.set(__self__, "sensitivity", sensitivity)
        pulumi.set(__self__, "threshold_absolute", threshold_absolute)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter(name="thresholdAbsolute")
    def threshold_absolute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold_absolute")

    @threshold_absolute.setter
    def threshold_absolute(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold_absolute", value)


@pulumi.input_type
class MobileAppAnomaliesSlowUserActionsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 detection_mode: Optional[pulumi.Input[str]] = None,
                 slow_user_actions_auto: Optional[pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs']] = None,
                 slow_user_actions_fixed: Optional[pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Fixed`
        :param pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs'] slow_user_actions_auto: no documentation available
        :param pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs'] slow_user_actions_fixed: no documentation available
        """
        pulumi.set(__self__, "enabled", enabled)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if slow_user_actions_auto is not None:
            pulumi.set(__self__, "slow_user_actions_auto", slow_user_actions_auto)
        if slow_user_actions_fixed is not None:
            pulumi.set(__self__, "slow_user_actions_fixed", slow_user_actions_fixed)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Fixed`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)

    @property
    @pulumi.getter(name="slowUserActionsAuto")
    def slow_user_actions_auto(self) -> Optional[pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "slow_user_actions_auto")

    @slow_user_actions_auto.setter
    def slow_user_actions_auto(self, value: Optional[pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs']]):
        pulumi.set(self, "slow_user_actions_auto", value)

    @property
    @pulumi.getter(name="slowUserActionsFixed")
    def slow_user_actions_fixed(self) -> Optional[pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "slow_user_actions_fixed")

    @slow_user_actions_fixed.setter
    def slow_user_actions_fixed(self, value: Optional[pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs']]):
        pulumi.set(self, "slow_user_actions_fixed", value)


@pulumi.input_type
class MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoArgs:
    def __init__(__self__, *,
                 duration_avoid_overalerting: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralertingArgs'],
                 duration_threshold_all: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAllArgs'],
                 duration_threshold_slowest: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowestArgs']):
        pulumi.set(__self__, "duration_avoid_overalerting", duration_avoid_overalerting)
        pulumi.set(__self__, "duration_threshold_all", duration_threshold_all)
        pulumi.set(__self__, "duration_threshold_slowest", duration_threshold_slowest)

    @property
    @pulumi.getter(name="durationAvoidOveralerting")
    def duration_avoid_overalerting(self) -> pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralertingArgs']:
        return pulumi.get(self, "duration_avoid_overalerting")

    @duration_avoid_overalerting.setter
    def duration_avoid_overalerting(self, value: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralertingArgs']):
        pulumi.set(self, "duration_avoid_overalerting", value)

    @property
    @pulumi.getter(name="durationThresholdAll")
    def duration_threshold_all(self) -> pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAllArgs']:
        return pulumi.get(self, "duration_threshold_all")

    @duration_threshold_all.setter
    def duration_threshold_all(self, value: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAllArgs']):
        pulumi.set(self, "duration_threshold_all", value)

    @property
    @pulumi.getter(name="durationThresholdSlowest")
    def duration_threshold_slowest(self) -> pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowestArgs']:
        return pulumi.get(self, "duration_threshold_slowest")

    @duration_threshold_slowest.setter
    def duration_threshold_slowest(self, value: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowestArgs']):
        pulumi.set(self, "duration_threshold_slowest", value)


@pulumi.input_type
class MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralertingArgs:
    def __init__(__self__, *,
                 min_action_rate: pulumi.Input[int]):
        pulumi.set(__self__, "min_action_rate", min_action_rate)

    @property
    @pulumi.getter(name="minActionRate")
    def min_action_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_action_rate")

    @min_action_rate.setter
    def min_action_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_action_rate", value)


@pulumi.input_type
class MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAllArgs:
    def __init__(__self__, *,
                 duration_threshold: pulumi.Input[float],
                 slowdown_percentage: pulumi.Input[float]):
        pulumi.set(__self__, "duration_threshold", duration_threshold)
        pulumi.set(__self__, "slowdown_percentage", slowdown_percentage)

    @property
    @pulumi.getter(name="durationThreshold")
    def duration_threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "duration_threshold")

    @duration_threshold.setter
    def duration_threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "duration_threshold", value)

    @property
    @pulumi.getter(name="slowdownPercentage")
    def slowdown_percentage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowdown_percentage")

    @slowdown_percentage.setter
    def slowdown_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowdown_percentage", value)


@pulumi.input_type
class MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowestArgs:
    def __init__(__self__, *,
                 duration_threshold: pulumi.Input[float],
                 slowdown_percentage: pulumi.Input[float]):
        pulumi.set(__self__, "duration_threshold", duration_threshold)
        pulumi.set(__self__, "slowdown_percentage", slowdown_percentage)

    @property
    @pulumi.getter(name="durationThreshold")
    def duration_threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "duration_threshold")

    @duration_threshold.setter
    def duration_threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "duration_threshold", value)

    @property
    @pulumi.getter(name="slowdownPercentage")
    def slowdown_percentage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowdown_percentage")

    @slowdown_percentage.setter
    def slowdown_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowdown_percentage", value)


@pulumi.input_type
class MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedArgs:
    def __init__(__self__, *,
                 duration_avoid_overalerting: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralertingArgs'],
                 duration_threshold_all_fixed: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixedArgs'],
                 duration_threshold_slowest: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowestArgs'],
                 sensitivity: pulumi.Input[str]):
        pulumi.set(__self__, "duration_avoid_overalerting", duration_avoid_overalerting)
        pulumi.set(__self__, "duration_threshold_all_fixed", duration_threshold_all_fixed)
        pulumi.set(__self__, "duration_threshold_slowest", duration_threshold_slowest)
        pulumi.set(__self__, "sensitivity", sensitivity)

    @property
    @pulumi.getter(name="durationAvoidOveralerting")
    def duration_avoid_overalerting(self) -> pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralertingArgs']:
        return pulumi.get(self, "duration_avoid_overalerting")

    @duration_avoid_overalerting.setter
    def duration_avoid_overalerting(self, value: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralertingArgs']):
        pulumi.set(self, "duration_avoid_overalerting", value)

    @property
    @pulumi.getter(name="durationThresholdAllFixed")
    def duration_threshold_all_fixed(self) -> pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixedArgs']:
        return pulumi.get(self, "duration_threshold_all_fixed")

    @duration_threshold_all_fixed.setter
    def duration_threshold_all_fixed(self, value: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixedArgs']):
        pulumi.set(self, "duration_threshold_all_fixed", value)

    @property
    @pulumi.getter(name="durationThresholdSlowest")
    def duration_threshold_slowest(self) -> pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowestArgs']:
        return pulumi.get(self, "duration_threshold_slowest")

    @duration_threshold_slowest.setter
    def duration_threshold_slowest(self, value: pulumi.Input['MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowestArgs']):
        pulumi.set(self, "duration_threshold_slowest", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)


@pulumi.input_type
class MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralertingArgs:
    def __init__(__self__, *,
                 min_action_rate: pulumi.Input[int]):
        pulumi.set(__self__, "min_action_rate", min_action_rate)

    @property
    @pulumi.getter(name="minActionRate")
    def min_action_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_action_rate")

    @min_action_rate.setter
    def min_action_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_action_rate", value)


@pulumi.input_type
class MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixedArgs:
    def __init__(__self__, *,
                 duration_threshold: pulumi.Input[float]):
        pulumi.set(__self__, "duration_threshold", duration_threshold)

    @property
    @pulumi.getter(name="durationThreshold")
    def duration_threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "duration_threshold")

    @duration_threshold.setter
    def duration_threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "duration_threshold", value)


@pulumi.input_type
class MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowestArgs:
    def __init__(__self__, *,
                 duration_threshold: pulumi.Input[float]):
        pulumi.set(__self__, "duration_threshold", duration_threshold)

    @property
    @pulumi.getter(name="durationThreshold")
    def duration_threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "duration_threshold")

    @duration_threshold.setter
    def duration_threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "duration_threshold", value)


@pulumi.input_type
class MobileAppAnomaliesUnexpectedHighLoadArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 threshold_percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[float] threshold_percentage: Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
        """
        pulumi.set(__self__, "enabled", enabled)
        if threshold_percentage is not None:
            pulumi.set(__self__, "threshold_percentage", threshold_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="thresholdPercentage")
    def threshold_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
        """
        return pulumi.get(self, "threshold_percentage")

    @threshold_percentage.setter
    def threshold_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold_percentage", value)


@pulumi.input_type
class MobileAppAnomaliesUnexpectedLowLoadArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 threshold_percentage: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[float] threshold_percentage: Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic drops within your application.
        """
        pulumi.set(__self__, "enabled", enabled)
        if threshold_percentage is not None:
            pulumi.set(__self__, "threshold_percentage", threshold_percentage)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="thresholdPercentage")
    def threshold_percentage(self) -> Optional[pulumi.Input[float]]:
        """
        Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic drops within your application.
        """
        return pulumi.get(self, "threshold_percentage")

    @threshold_percentage.setter
    def threshold_percentage(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold_percentage", value)


@pulumi.input_type
class MobileAppCrashRateCrashRateIncreaseArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 crash_rate_increase_auto: Optional[pulumi.Input['MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs']] = None,
                 crash_rate_increase_fixed: Optional[pulumi.Input['MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs'] crash_rate_increase_auto: Alert crash rate increases when auto-detected baseline is exceeded by a certain number of users
        :param pulumi.Input['MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs'] crash_rate_increase_fixed: Alert crash rate increases when the defined threshold is exceeded by a certain number of users
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Fixed`
        """
        pulumi.set(__self__, "enabled", enabled)
        if crash_rate_increase_auto is not None:
            pulumi.set(__self__, "crash_rate_increase_auto", crash_rate_increase_auto)
        if crash_rate_increase_fixed is not None:
            pulumi.set(__self__, "crash_rate_increase_fixed", crash_rate_increase_fixed)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="crashRateIncreaseAuto")
    def crash_rate_increase_auto(self) -> Optional[pulumi.Input['MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs']]:
        """
        Alert crash rate increases when auto-detected baseline is exceeded by a certain number of users
        """
        return pulumi.get(self, "crash_rate_increase_auto")

    @crash_rate_increase_auto.setter
    def crash_rate_increase_auto(self, value: Optional[pulumi.Input['MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs']]):
        pulumi.set(self, "crash_rate_increase_auto", value)

    @property
    @pulumi.getter(name="crashRateIncreaseFixed")
    def crash_rate_increase_fixed(self) -> Optional[pulumi.Input['MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs']]:
        """
        Alert crash rate increases when the defined threshold is exceeded by a certain number of users
        """
        return pulumi.get(self, "crash_rate_increase_fixed")

    @crash_rate_increase_fixed.setter
    def crash_rate_increase_fixed(self, value: Optional[pulumi.Input['MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs']]):
        pulumi.set(self, "crash_rate_increase_fixed", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Fixed`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAutoArgs:
    def __init__(__self__, *,
                 baseline_violation_percentage: pulumi.Input[float],
                 concurrent_users: pulumi.Input[float],
                 sensitivity: pulumi.Input[str]):
        pulumi.set(__self__, "baseline_violation_percentage", baseline_violation_percentage)
        pulumi.set(__self__, "concurrent_users", concurrent_users)
        pulumi.set(__self__, "sensitivity", sensitivity)

    @property
    @pulumi.getter(name="baselineViolationPercentage")
    def baseline_violation_percentage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "baseline_violation_percentage")

    @baseline_violation_percentage.setter
    def baseline_violation_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "baseline_violation_percentage", value)

    @property
    @pulumi.getter(name="concurrentUsers")
    def concurrent_users(self) -> pulumi.Input[float]:
        return pulumi.get(self, "concurrent_users")

    @concurrent_users.setter
    def concurrent_users(self, value: pulumi.Input[float]):
        pulumi.set(self, "concurrent_users", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)


@pulumi.input_type
class MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixedArgs:
    def __init__(__self__, *,
                 absolute_crash_rate: pulumi.Input[float],
                 concurrent_users: pulumi.Input[int]):
        pulumi.set(__self__, "absolute_crash_rate", absolute_crash_rate)
        pulumi.set(__self__, "concurrent_users", concurrent_users)

    @property
    @pulumi.getter(name="absoluteCrashRate")
    def absolute_crash_rate(self) -> pulumi.Input[float]:
        return pulumi.get(self, "absolute_crash_rate")

    @absolute_crash_rate.setter
    def absolute_crash_rate(self, value: pulumi.Input[float]):
        pulumi.set(self, "absolute_crash_rate", value)

    @property
    @pulumi.getter(name="concurrentUsers")
    def concurrent_users(self) -> pulumi.Input[int]:
        return pulumi.get(self, "concurrent_users")

    @concurrent_users.setter
    def concurrent_users(self, value: pulumi.Input[int]):
        pulumi.set(self, "concurrent_users", value)


@pulumi.input_type
class MobileAppEnablementRumArgs:
    def __init__(__self__, *,
                 cost_and_traffic_control: pulumi.Input[int],
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[int] cost_and_traffic_control: Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        """
        pulumi.set(__self__, "cost_and_traffic_control", cost_and_traffic_control)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="costAndTrafficControl")
    def cost_and_traffic_control(self) -> pulumi.Input[int]:
        """
        Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
        """
        return pulumi.get(self, "cost_and_traffic_control")

    @cost_and_traffic_control.setter
    def cost_and_traffic_control(self, value: pulumi.Input[int]):
        pulumi.set(self, "cost_and_traffic_control", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class MobileAppEnablementSessionReplayArgs:
    def __init__(__self__, *,
                 on_crash: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] on_crash: Before enabling, Dynatrace checks your system against the [prerequisites for Session Replay](https://dt-url.net/t23s0ppi).
        """
        pulumi.set(__self__, "on_crash", on_crash)

    @property
    @pulumi.getter(name="onCrash")
    def on_crash(self) -> pulumi.Input[bool]:
        """
        Before enabling, Dynatrace checks your system against the [prerequisites for Session Replay](https://dt-url.net/t23s0ppi).
        """
        return pulumi.get(self, "on_crash")

    @on_crash.setter
    def on_crash(self, value: pulumi.Input[bool]):
        pulumi.set(self, "on_crash", value)


@pulumi.input_type
class MobileAppRequestErrorsErrorRulesArgs:
    def __init__(__self__, *,
                 error_rules: pulumi.Input[Sequence[pulumi.Input['MobileAppRequestErrorsErrorRulesErrorRuleArgs']]]):
        pulumi.set(__self__, "error_rules", error_rules)

    @property
    @pulumi.getter(name="errorRules")
    def error_rules(self) -> pulumi.Input[Sequence[pulumi.Input['MobileAppRequestErrorsErrorRulesErrorRuleArgs']]]:
        return pulumi.get(self, "error_rules")

    @error_rules.setter
    def error_rules(self, value: pulumi.Input[Sequence[pulumi.Input['MobileAppRequestErrorsErrorRulesErrorRuleArgs']]]):
        pulumi.set(self, "error_rules", value)


@pulumi.input_type
class MobileAppRequestErrorsErrorRulesErrorRuleArgs:
    def __init__(__self__, *,
                 error_codes: pulumi.Input[str]):
        pulumi.set(__self__, "error_codes", error_codes)

    @property
    @pulumi.getter(name="errorCodes")
    def error_codes(self) -> pulumi.Input[str]:
        return pulumi.get(self, "error_codes")

    @error_codes.setter
    def error_codes(self, value: pulumi.Input[str]):
        pulumi.set(self, "error_codes", value)


@pulumi.input_type
class MobileApplicationApdexArgs:
    def __init__(__self__, *,
                 frustrated: pulumi.Input[int],
                 tolerable: pulumi.Input[int],
                 frustrated_on_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] frustrated: Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated
        :param pulumi.Input[int] tolerable: Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable
        :param pulumi.Input[bool] frustrated_on_error: Apdex error condition: if `true` the user session is considered frustrated when an error is reported
        """
        pulumi.set(__self__, "frustrated", frustrated)
        pulumi.set(__self__, "tolerable", tolerable)
        if frustrated_on_error is not None:
            pulumi.set(__self__, "frustrated_on_error", frustrated_on_error)

    @property
    @pulumi.getter
    def frustrated(self) -> pulumi.Input[int]:
        """
        Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated
        """
        return pulumi.get(self, "frustrated")

    @frustrated.setter
    def frustrated(self, value: pulumi.Input[int]):
        pulumi.set(self, "frustrated", value)

    @property
    @pulumi.getter
    def tolerable(self) -> pulumi.Input[int]:
        """
        Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable
        """
        return pulumi.get(self, "tolerable")

    @tolerable.setter
    def tolerable(self, value: pulumi.Input[int]):
        pulumi.set(self, "tolerable", value)

    @property
    @pulumi.getter(name="frustratedOnError")
    def frustrated_on_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Apdex error condition: if `true` the user session is considered frustrated when an error is reported
        """
        return pulumi.get(self, "frustrated_on_error")

    @frustrated_on_error.setter
    def frustrated_on_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "frustrated_on_error", value)


@pulumi.input_type
class MobileApplicationPropertiesArgs:
    def __init__(__self__, *,
                 api_values: Optional[pulumi.Input[Sequence[pulumi.Input['MobileApplicationPropertiesApiValueArgs']]]] = None,
                 request_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['MobileApplicationPropertiesRequestAttributeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['MobileApplicationPropertiesApiValueArgs']]] api_values: A User Action / Session Property based on a value reported by the API
        :param pulumi.Input[Sequence[pulumi.Input['MobileApplicationPropertiesRequestAttributeArgs']]] request_attributes: A User Action / Session Property based on a Server Side Request Attribute
        """
        if api_values is not None:
            pulumi.set(__self__, "api_values", api_values)
        if request_attributes is not None:
            pulumi.set(__self__, "request_attributes", request_attributes)

    @property
    @pulumi.getter(name="apiValues")
    def api_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MobileApplicationPropertiesApiValueArgs']]]]:
        """
        A User Action / Session Property based on a value reported by the API
        """
        return pulumi.get(self, "api_values")

    @api_values.setter
    def api_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MobileApplicationPropertiesApiValueArgs']]]]):
        pulumi.set(self, "api_values", value)

    @property
    @pulumi.getter(name="requestAttributes")
    def request_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MobileApplicationPropertiesRequestAttributeArgs']]]]:
        """
        A User Action / Session Property based on a Server Side Request Attribute
        """
        return pulumi.get(self, "request_attributes")

    @request_attributes.setter
    def request_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MobileApplicationPropertiesRequestAttributeArgs']]]]):
        pulumi.set(self, "request_attributes", value)


@pulumi.input_type
class MobileApplicationPropertiesApiValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 type: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 cleanup_rule: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 store_as_session_property: Optional[pulumi.Input[bool]] = None,
                 store_as_user_action_property: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: The name of the application
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if cleanup_rule is not None:
            pulumi.set(__self__, "cleanup_rule", cleanup_rule)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if store_as_session_property is not None:
            pulumi.set(__self__, "store_as_session_property", store_as_session_property)
        if store_as_user_action_property is not None:
            pulumi.set(__self__, "store_as_user_action_property", store_as_user_action_property)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="cleanupRule")
    def cleanup_rule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cleanup_rule")

    @cleanup_rule.setter
    def cleanup_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cleanup_rule", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the application
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="storeAsSessionProperty")
    def store_as_session_property(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "store_as_session_property")

    @store_as_session_property.setter
    def store_as_session_property(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_as_session_property", value)

    @property
    @pulumi.getter(name="storeAsUserActionProperty")
    def store_as_user_action_property(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "store_as_user_action_property")

    @store_as_user_action_property.setter
    def store_as_user_action_property(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_as_user_action_property", value)


@pulumi.input_type
class MobileApplicationPropertiesRequestAttributeArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 key: pulumi.Input[str],
                 type: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 cleanup_rule: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 store_as_session_property: Optional[pulumi.Input[bool]] = None,
                 store_as_user_action_property: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if cleanup_rule is not None:
            pulumi.set(__self__, "cleanup_rule", cleanup_rule)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if store_as_session_property is not None:
            pulumi.set(__self__, "store_as_session_property", store_as_session_property)
        if store_as_user_action_property is not None:
            pulumi.set(__self__, "store_as_user_action_property", store_as_user_action_property)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="cleanupRule")
    def cleanup_rule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cleanup_rule")

    @cleanup_rule.setter
    def cleanup_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cleanup_rule", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="storeAsSessionProperty")
    def store_as_session_property(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "store_as_session_property")

    @store_as_session_property.setter
    def store_as_session_property(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_as_session_property", value)

    @property
    @pulumi.getter(name="storeAsUserActionProperty")
    def store_as_user_action_property(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "store_as_user_action_property")

    @store_as_user_action_property.setter
    def store_as_user_action_property(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_as_user_action_property", value)


@pulumi.input_type
class NetworkTrafficExcludeIpArgs:
    def __init__(__self__, *,
                 ip_address_forms: pulumi.Input[Sequence[pulumi.Input['NetworkTrafficExcludeIpIpAddressFormArgs']]]):
        pulumi.set(__self__, "ip_address_forms", ip_address_forms)

    @property
    @pulumi.getter(name="ipAddressForms")
    def ip_address_forms(self) -> pulumi.Input[Sequence[pulumi.Input['NetworkTrafficExcludeIpIpAddressFormArgs']]]:
        return pulumi.get(self, "ip_address_forms")

    @ip_address_forms.setter
    def ip_address_forms(self, value: pulumi.Input[Sequence[pulumi.Input['NetworkTrafficExcludeIpIpAddressFormArgs']]]):
        pulumi.set(self, "ip_address_forms", value)


@pulumi.input_type
class NetworkTrafficExcludeIpIpAddressFormArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str]):
        pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)


@pulumi.input_type
class NetworkTrafficExcludeNicArgs:
    def __init__(__self__, *,
                 nic_forms: pulumi.Input[Sequence[pulumi.Input['NetworkTrafficExcludeNicNicFormArgs']]]):
        pulumi.set(__self__, "nic_forms", nic_forms)

    @property
    @pulumi.getter(name="nicForms")
    def nic_forms(self) -> pulumi.Input[Sequence[pulumi.Input['NetworkTrafficExcludeNicNicFormArgs']]]:
        return pulumi.get(self, "nic_forms")

    @nic_forms.setter
    def nic_forms(self, value: pulumi.Input[Sequence[pulumi.Input['NetworkTrafficExcludeNicNicFormArgs']]]):
        pulumi.set(self, "nic_forms", value)


@pulumi.input_type
class NetworkTrafficExcludeNicNicFormArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 os: pulumi.Input[str]):
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def os(self) -> pulumi.Input[str]:
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: pulumi.Input[str]):
        pulumi.set(self, "os", value)


@pulumi.input_type
class NotificationAnsibleTowerArgs:
    def __init__(__self__, *,
                 accept_any_certificate: pulumi.Input[bool],
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 custom_message: pulumi.Input[str],
                 job_template_id: pulumi.Input[int],
                 job_template_url: pulumi.Input[str],
                 name: pulumi.Input[str],
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] accept_any_certificate: Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] custom_message: The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        :param pulumi.Input[int] job_template_id: The ID of the target Ansible Tower job template
        :param pulumi.Input[str] job_template_url: The URL of the target Ansible Tower job template
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] username: The username of the Ansible Tower account
        :param pulumi.Input[str] password: The password for the Ansible Tower account
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "accept_any_certificate", accept_any_certificate)
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "custom_message", custom_message)
        pulumi.set(__self__, "job_template_id", job_template_id)
        pulumi.set(__self__, "job_template_url", job_template_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="acceptAnyCertificate")
    def accept_any_certificate(self) -> pulumi.Input[bool]:
        """
        Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
        """
        return pulumi.get(self, "accept_any_certificate")

    @accept_any_certificate.setter
    def accept_any_certificate(self, value: pulumi.Input[bool]):
        pulumi.set(self, "accept_any_certificate", value)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter(name="customMessage")
    def custom_message(self) -> pulumi.Input[str]:
        """
        The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        """
        return pulumi.get(self, "custom_message")

    @custom_message.setter
    def custom_message(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_message", value)

    @property
    @pulumi.getter(name="jobTemplateId")
    def job_template_id(self) -> pulumi.Input[int]:
        """
        The ID of the target Ansible Tower job template
        """
        return pulumi.get(self, "job_template_id")

    @job_template_id.setter
    def job_template_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "job_template_id", value)

    @property
    @pulumi.getter(name="jobTemplateUrl")
    def job_template_url(self) -> pulumi.Input[str]:
        """
        The URL of the target Ansible Tower job template
        """
        return pulumi.get(self, "job_template_url")

    @job_template_url.setter
    def job_template_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_template_url", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username of the Ansible Tower account
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the Ansible Tower account
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class NotificationConfigArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] type: Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` > EmailNotificationConfig  * `PAGER_DUTY` > PagerDutyNotificationConfig  * `WEBHOOK` > WebHookNotificationConfig  * `SLACK` > SlackNotificationConfig  * `HIPCHAT` > HipChatNotificationConfig  * `VICTOROPS` > VictorOpsNotificationConfig  * `SERVICE_NOW` > ServiceNowNotificationConfig  * `XMATTERS` > XMattersNotificationConfig  * `ANSIBLETOWER` > AnsibleTowerNotificationConfig  * `OPS_GENIE` > OpsGenieNotificationConfig  * `JIRA` > JiraNotificationConfig  * `TRELLO` > TrelloNotificationConfig
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` > EmailNotificationConfig  * `PAGER_DUTY` > PagerDutyNotificationConfig  * `WEBHOOK` > WebHookNotificationConfig  * `SLACK` > SlackNotificationConfig  * `HIPCHAT` > HipChatNotificationConfig  * `VICTOROPS` > VictorOpsNotificationConfig  * `SERVICE_NOW` > ServiceNowNotificationConfig  * `XMATTERS` > XMattersNotificationConfig  * `ANSIBLETOWER` > AnsibleTowerNotificationConfig  * `OPS_GENIE` > OpsGenieNotificationConfig  * `JIRA` > JiraNotificationConfig  * `TRELLO` > TrelloNotificationConfig
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class NotificationEmailArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 body: pulumi.Input[str],
                 name: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 bcc_receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cc_receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] body: The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] subject: The subject of the email notifications
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bcc_receivers: The list of the email BCC-recipients
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cc_receivers: The list of the email CC-recipients
        :param pulumi.Input[Sequence[pulumi.Input[str]]] receivers: The list of the email recipients
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subject", subject)
        if bcc_receivers is not None:
            pulumi.set(__self__, "bcc_receivers", bcc_receivers)
        if cc_receivers is not None:
            pulumi.set(__self__, "cc_receivers", cc_receivers)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        """
        The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject of the email notifications
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="bccReceivers")
    def bcc_receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of the email BCC-recipients
        """
        return pulumi.get(self, "bcc_receivers")

    @bcc_receivers.setter
    def bcc_receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bcc_receivers", value)

    @property
    @pulumi.getter(name="ccReceivers")
    def cc_receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of the email CC-recipients
        """
        return pulumi.get(self, "cc_receivers")

    @cc_receivers.setter
    def cc_receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cc_receivers", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of the email recipients
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "receivers", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class NotificationJiraArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 description: pulumi.Input[str],
                 issue_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 project_key: pulumi.Input[str],
                 summary: pulumi.Input[str],
                 url: pulumi.Input[str],
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] description: The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
        :param pulumi.Input[str] issue_type: The type of the Jira issue to be created by this notification
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] project_key: The project key of the Jira issue to be created by this notification
        :param pulumi.Input[str] summary: The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        :param pulumi.Input[str] url: The URL of the Jira API endpoint
        :param pulumi.Input[str] username: The username of the Jira profile
        :param pulumi.Input[str] password: The password for the Jira profile
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "issue_type", issue_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_key", project_key)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> pulumi.Input[str]:
        """
        The type of the Jira issue to be created by this notification
        """
        return pulumi.get(self, "issue_type")

    @issue_type.setter
    def issue_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "issue_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Input[str]:
        """
        The project key of the Jira issue to be created by this notification
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter
    def summary(self) -> pulumi.Input[str]:
        """
        The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: pulumi.Input[str]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the Jira API endpoint
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username of the Jira profile
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the Jira profile
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class NotificationOpsGenieArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 message: pulumi.Input[str],
                 name: pulumi.Input[str],
                 api_key: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] domain: The region domain of the OpsGenie
        :param pulumi.Input[str] message: The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] api_key: The API key to access OpsGenie
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        The region domain of the OpsGenie
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        The API key to access OpsGenie
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class NotificationPagerDutyArgs:
    def __init__(__self__, *,
                 account: pulumi.Input[str],
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 service_api_key: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] account: The name of the PagerDuty account
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] service_name: The name of the service
        :param pulumi.Input[str] service_api_key: The API key to access PagerDuty
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service_name", service_name)
        if service_api_key is not None:
            pulumi.set(__self__, "service_api_key", service_api_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Input[str]:
        """
        The name of the PagerDuty account
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input[str]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of the service
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="serviceApiKey")
    def service_api_key(self) -> Optional[pulumi.Input[str]]:
        """
        The API key to access PagerDuty
        """
        return pulumi.get(self, "service_api_key")

    @service_api_key.setter
    def service_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_api_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class NotificationServiceNowArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 message: pulumi.Input[str],
                 name: pulumi.Input[str],
                 send_events: pulumi.Input[bool],
                 send_incidents: pulumi.Input[bool],
                 username: pulumi.Input[str],
                 instance_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] message: The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[bool] send_events: Send events into ServiceNow ITOM (`true`)
        :param pulumi.Input[bool] send_incidents: Send incidents into ServiceNow ITSM (`true`)
        :param pulumi.Input[str] username: The username of the ServiceNow account.   Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles
        :param pulumi.Input[str] instance_name: The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
        :param pulumi.Input[str] password: The username to the ServiceNow account
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        :param pulumi.Input[str] url: The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "send_events", send_events)
        pulumi.set(__self__, "send_incidents", send_incidents)
        pulumi.set(__self__, "username", username)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sendEvents")
    def send_events(self) -> pulumi.Input[bool]:
        """
        Send events into ServiceNow ITOM (`true`)
        """
        return pulumi.get(self, "send_events")

    @send_events.setter
    def send_events(self, value: pulumi.Input[bool]):
        pulumi.set(self, "send_events", value)

    @property
    @pulumi.getter(name="sendIncidents")
    def send_incidents(self) -> pulumi.Input[bool]:
        """
        Send incidents into ServiceNow ITSM (`true`)
        """
        return pulumi.get(self, "send_incidents")

    @send_incidents.setter
    def send_incidents(self, value: pulumi.Input[bool]):
        pulumi.set(self, "send_incidents", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username of the ServiceNow account.   Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The username to the ServiceNow account
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class NotificationSlackArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 channel: pulumi.Input[str],
                 name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] channel: The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] title: The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        :param pulumi.Input[str] url: The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "title", title)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input[str]:
        """
        The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[str]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class NotificationTrelloArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 application_key: pulumi.Input[str],
                 board_id: pulumi.Input[str],
                 description: pulumi.Input[str],
                 list_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 resolved_list_id: pulumi.Input[str],
                 text: pulumi.Input[str],
                 authorization_token: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] application_key: The application key for the Trello account
        :param pulumi.Input[str] board_id: The Trello board to which the card should be assigned
        :param pulumi.Input[str] description: The description of the Trello card.   You can use same placeholders as in card text
        :param pulumi.Input[str] list_id: The Trello list to which the card should be assigned
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] resolved_list_id: The Trello list to which the card of the resolved problem should be assigned
        :param pulumi.Input[str] text: The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        :param pulumi.Input[str] authorization_token: The application token for the Trello account
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "application_key", application_key)
        pulumi.set(__self__, "board_id", board_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "list_id", list_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resolved_list_id", resolved_list_id)
        pulumi.set(__self__, "text", text)
        if authorization_token is not None:
            pulumi.set(__self__, "authorization_token", authorization_token)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> pulumi.Input[str]:
        """
        The application key for the Trello account
        """
        return pulumi.get(self, "application_key")

    @application_key.setter
    def application_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_key", value)

    @property
    @pulumi.getter(name="boardId")
    def board_id(self) -> pulumi.Input[str]:
        """
        The Trello board to which the card should be assigned
        """
        return pulumi.get(self, "board_id")

    @board_id.setter
    def board_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "board_id", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The description of the Trello card.   You can use same placeholders as in card text
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> pulumi.Input[str]:
        """
        The Trello list to which the card should be assigned
        """
        return pulumi.get(self, "list_id")

    @list_id.setter
    def list_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "list_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resolvedListId")
    def resolved_list_id(self) -> pulumi.Input[str]:
        """
        The Trello list to which the card of the resolved problem should be assigned
        """
        return pulumi.get(self, "resolved_list_id")

    @resolved_list_id.setter
    def resolved_list_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resolved_list_id", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="authorizationToken")
    def authorization_token(self) -> Optional[pulumi.Input[str]]:
        """
        The application token for the Trello account
        """
        return pulumi.get(self, "authorization_token")

    @authorization_token.setter
    def authorization_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_token", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class NotificationVictorOpsArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 message: pulumi.Input[str],
                 name: pulumi.Input[str],
                 routing_key: pulumi.Input[str],
                 api_key: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] message: The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] routing_key: The routing key, defining the group to be notified
        :param pulumi.Input[str] api_key: The API key for the target VictorOps account
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routing_key", routing_key)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> pulumi.Input[str]:
        """
        The routing key, defining the group to be notified
        """
        return pulumi.get(self, "routing_key")

    @routing_key.setter
    def routing_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "routing_key", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        The API key for the target VictorOps account
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class NotificationWebHookArgs:
    def __init__(__self__, *,
                 accept_any_certificate: pulumi.Input[bool],
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 name: pulumi.Input[str],
                 payload: pulumi.Input[str],
                 url: pulumi.Input[str],
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationWebHookHeaderArgs']]]] = None,
                 notify_event_merges: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] accept_any_certificate: Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] payload: The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        :param pulumi.Input[str] url: The URL of the WebHook endpoint
        :param pulumi.Input[Sequence[pulumi.Input['NotificationWebHookHeaderArgs']]] headers: A list of the additional HTTP headers
        :param pulumi.Input[bool] notify_event_merges: Call webhook if new events merge into existing problems
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "accept_any_certificate", accept_any_certificate)
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "payload", payload)
        pulumi.set(__self__, "url", url)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if notify_event_merges is not None:
            pulumi.set(__self__, "notify_event_merges", notify_event_merges)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="acceptAnyCertificate")
    def accept_any_certificate(self) -> pulumi.Input[bool]:
        """
        Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
        """
        return pulumi.get(self, "accept_any_certificate")

    @accept_any_certificate.setter
    def accept_any_certificate(self, value: pulumi.Input[bool]):
        pulumi.set(self, "accept_any_certificate", value)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def payload(self) -> pulumi.Input[str]:
        """
        The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: pulumi.Input[str]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the WebHook endpoint
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotificationWebHookHeaderArgs']]]]:
        """
        A list of the additional HTTP headers
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationWebHookHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="notifyEventMerges")
    def notify_event_merges(self) -> Optional[pulumi.Input[bool]]:
        """
        Call webhook if new events merge into existing problems
        """
        return pulumi.get(self, "notify_event_merges")

    @notify_event_merges.setter
    def notify_event_merges(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify_event_merges", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class NotificationWebHookHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NotificationXmattersArgs:
    def __init__(__self__, *,
                 accept_any_certificate: pulumi.Input[bool],
                 active: pulumi.Input[bool],
                 alerting_profile: pulumi.Input[str],
                 name: pulumi.Input[str],
                 payload: pulumi.Input[str],
                 url: pulumi.Input[str],
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationXmattersHeaderArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] accept_any_certificate: Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
        :param pulumi.Input[bool] active: The configuration is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] alerting_profile: The ID of the associated alerting profile
        :param pulumi.Input[str] name: The name of the notification configuration
        :param pulumi.Input[str] payload: The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        :param pulumi.Input[str] url: The URL of the xMatters WebHook
        :param pulumi.Input[Sequence[pulumi.Input['NotificationXmattersHeaderArgs']]] headers: A list of the additional HTTP headers
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "accept_any_certificate", accept_any_certificate)
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "alerting_profile", alerting_profile)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "payload", payload)
        pulumi.set(__self__, "url", url)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="acceptAnyCertificate")
    def accept_any_certificate(self) -> pulumi.Input[bool]:
        """
        Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
        """
        return pulumi.get(self, "accept_any_certificate")

    @accept_any_certificate.setter
    def accept_any_certificate(self, value: pulumi.Input[bool]):
        pulumi.set(self, "accept_any_certificate", value)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        The configuration is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="alertingProfile")
    def alerting_profile(self) -> pulumi.Input[str]:
        """
        The ID of the associated alerting profile
        """
        return pulumi.get(self, "alerting_profile")

    @alerting_profile.setter
    def alerting_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "alerting_profile", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def payload(self) -> pulumi.Input[str]:
        """
        The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: pulumi.Input[str]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the xMatters WebHook
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NotificationXmattersHeaderArgs']]]]:
        """
        A list of the additional HTTP headers
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NotificationXmattersHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class NotificationXmattersHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class OneagentUpdatesMaintenanceWindowsArgs:
    def __init__(__self__, *,
                 maintenance_windows: pulumi.Input[Sequence[pulumi.Input['OneagentUpdatesMaintenanceWindowsMaintenanceWindowArgs']]]):
        pulumi.set(__self__, "maintenance_windows", maintenance_windows)

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> pulumi.Input[Sequence[pulumi.Input['OneagentUpdatesMaintenanceWindowsMaintenanceWindowArgs']]]:
        return pulumi.get(self, "maintenance_windows")

    @maintenance_windows.setter
    def maintenance_windows(self, value: pulumi.Input[Sequence[pulumi.Input['OneagentUpdatesMaintenanceWindowsMaintenanceWindowArgs']]]):
        pulumi.set(self, "maintenance_windows", value)


@pulumi.input_type
class OneagentUpdatesMaintenanceWindowsMaintenanceWindowArgs:
    def __init__(__self__, *,
                 maintenance_window: pulumi.Input[str]):
        pulumi.set(__self__, "maintenance_window", maintenance_window)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Input[str]:
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: pulumi.Input[str]):
        pulumi.set(self, "maintenance_window", value)


@pulumi.input_type
class OpentelemetryMetricsAdditionalAttributesArgs:
    def __init__(__self__, *,
                 additional_attributes: pulumi.Input[Sequence[pulumi.Input['OpentelemetryMetricsAdditionalAttributesAdditionalAttributeArgs']]]):
        pulumi.set(__self__, "additional_attributes", additional_attributes)

    @property
    @pulumi.getter(name="additionalAttributes")
    def additional_attributes(self) -> pulumi.Input[Sequence[pulumi.Input['OpentelemetryMetricsAdditionalAttributesAdditionalAttributeArgs']]]:
        return pulumi.get(self, "additional_attributes")

    @additional_attributes.setter
    def additional_attributes(self, value: pulumi.Input[Sequence[pulumi.Input['OpentelemetryMetricsAdditionalAttributesAdditionalAttributeArgs']]]):
        pulumi.set(self, "additional_attributes", value)


@pulumi.input_type
class OpentelemetryMetricsAdditionalAttributesAdditionalAttributeArgs:
    def __init__(__self__, *,
                 attribute_key: pulumi.Input[str],
                 enabled: pulumi.Input[bool]):
        pulumi.set(__self__, "attribute_key", attribute_key)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="attributeKey")
    def attribute_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_key")

    @attribute_key.setter
    def attribute_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_key", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class OpentelemetryMetricsToDropAttributesArgs:
    def __init__(__self__, *,
                 to_drop_attributes: pulumi.Input[Sequence[pulumi.Input['OpentelemetryMetricsToDropAttributesToDropAttributeArgs']]]):
        pulumi.set(__self__, "to_drop_attributes", to_drop_attributes)

    @property
    @pulumi.getter(name="toDropAttributes")
    def to_drop_attributes(self) -> pulumi.Input[Sequence[pulumi.Input['OpentelemetryMetricsToDropAttributesToDropAttributeArgs']]]:
        return pulumi.get(self, "to_drop_attributes")

    @to_drop_attributes.setter
    def to_drop_attributes(self, value: pulumi.Input[Sequence[pulumi.Input['OpentelemetryMetricsToDropAttributesToDropAttributeArgs']]]):
        pulumi.set(self, "to_drop_attributes", value)


@pulumi.input_type
class OpentelemetryMetricsToDropAttributesToDropAttributeArgs:
    def __init__(__self__, *,
                 attribute_key: pulumi.Input[str],
                 enabled: pulumi.Input[bool]):
        pulumi.set(__self__, "attribute_key", attribute_key)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="attributeKey")
    def attribute_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_key")

    @attribute_key.setter
    def attribute_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_key", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class OsServicesDetectionConditionsLinuxArgs:
    def __init__(__self__, *,
                 linux_detection_conditions: pulumi.Input[Sequence[pulumi.Input['OsServicesDetectionConditionsLinuxLinuxDetectionConditionArgs']]]):
        pulumi.set(__self__, "linux_detection_conditions", linux_detection_conditions)

    @property
    @pulumi.getter(name="linuxDetectionConditions")
    def linux_detection_conditions(self) -> pulumi.Input[Sequence[pulumi.Input['OsServicesDetectionConditionsLinuxLinuxDetectionConditionArgs']]]:
        return pulumi.get(self, "linux_detection_conditions")

    @linux_detection_conditions.setter
    def linux_detection_conditions(self, value: pulumi.Input[Sequence[pulumi.Input['OsServicesDetectionConditionsLinuxLinuxDetectionConditionArgs']]]):
        pulumi.set(self, "linux_detection_conditions", value)


@pulumi.input_type
class OsServicesDetectionConditionsLinuxLinuxDetectionConditionArgs:
    def __init__(__self__, *,
                 property: pulumi.Input[str],
                 condition: Optional[pulumi.Input[str]] = None,
                 startup_condition: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "property", property)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if startup_condition is not None:
            pulumi.set(__self__, "startup_condition", startup_condition)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="startupCondition")
    def startup_condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "startup_condition")

    @startup_condition.setter
    def startup_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "startup_condition", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class OsServicesDetectionConditionsWindowsArgs:
    def __init__(__self__, *,
                 detection_conditions_windows: pulumi.Input[Sequence[pulumi.Input['OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs']]]):
        pulumi.set(__self__, "detection_conditions_windows", detection_conditions_windows)

    @property
    @pulumi.getter(name="detectionConditionsWindows")
    def detection_conditions_windows(self) -> pulumi.Input[Sequence[pulumi.Input['OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs']]]:
        return pulumi.get(self, "detection_conditions_windows")

    @detection_conditions_windows.setter
    def detection_conditions_windows(self, value: pulumi.Input[Sequence[pulumi.Input['OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs']]]):
        pulumi.set(self, "detection_conditions_windows", value)


@pulumi.input_type
class OsServicesDetectionConditionsWindowsDetectionConditionsWindowArgs:
    def __init__(__self__, *,
                 property: pulumi.Input[str],
                 condition: Optional[pulumi.Input[str]] = None,
                 startup_condition: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "property", property)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if startup_condition is not None:
            pulumi.set(__self__, "startup_condition", startup_condition)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="startupCondition")
    def startup_condition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "startup_condition")

    @startup_condition.setter
    def startup_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "startup_condition", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class OsServicesMetadataArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['OsServicesMetadataItemArgs']]]):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['OsServicesMetadataItemArgs']]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['OsServicesMetadataItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class OsServicesMetadataItemArgs:
    def __init__(__self__, *,
                 metadata_key: pulumi.Input[str],
                 metadata_value: pulumi.Input[str]):
        pulumi.set(__self__, "metadata_key", metadata_key)
        pulumi.set(__self__, "metadata_value", metadata_value)

    @property
    @pulumi.getter(name="metadataKey")
    def metadata_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metadata_key")

    @metadata_key.setter
    def metadata_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "metadata_key", value)

    @property
    @pulumi.getter(name="metadataValue")
    def metadata_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metadata_value")

    @metadata_value.setter
    def metadata_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "metadata_value", value)


@pulumi.input_type
class OwnershipConfigOwnershipIdentifiersArgs:
    def __init__(__self__, *,
                 ownership_identifiers: pulumi.Input[Sequence[pulumi.Input['OwnershipConfigOwnershipIdentifiersOwnershipIdentifierArgs']]]):
        pulumi.set(__self__, "ownership_identifiers", ownership_identifiers)

    @property
    @pulumi.getter(name="ownershipIdentifiers")
    def ownership_identifiers(self) -> pulumi.Input[Sequence[pulumi.Input['OwnershipConfigOwnershipIdentifiersOwnershipIdentifierArgs']]]:
        return pulumi.get(self, "ownership_identifiers")

    @ownership_identifiers.setter
    def ownership_identifiers(self, value: pulumi.Input[Sequence[pulumi.Input['OwnershipConfigOwnershipIdentifiersOwnershipIdentifierArgs']]]):
        pulumi.set(self, "ownership_identifiers", value)


@pulumi.input_type
class OwnershipConfigOwnershipIdentifiersOwnershipIdentifierArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 key: pulumi.Input[str]):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class OwnershipTeamsAdditionalInformationArgs:
    def __init__(__self__, *,
                 additional_informations: pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsAdditionalInformationAdditionalInformationArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsAdditionalInformationAdditionalInformationArgs']]] additional_informations: Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit assignments.
        """
        pulumi.set(__self__, "additional_informations", additional_informations)

    @property
    @pulumi.getter(name="additionalInformations")
    def additional_informations(self) -> pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsAdditionalInformationAdditionalInformationArgs']]]:
        """
        Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit assignments.
        """
        return pulumi.get(self, "additional_informations")

    @additional_informations.setter
    def additional_informations(self, value: pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsAdditionalInformationAdditionalInformationArgs']]]):
        pulumi.set(self, "additional_informations", value)


@pulumi.input_type
class OwnershipTeamsAdditionalInformationAdditionalInformationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class OwnershipTeamsContactDetailsArgs:
    def __init__(__self__, *,
                 contact_details: pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsContactDetailsContactDetailArgs']]]):
        pulumi.set(__self__, "contact_details", contact_details)

    @property
    @pulumi.getter(name="contactDetails")
    def contact_details(self) -> pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsContactDetailsContactDetailArgs']]]:
        return pulumi.get(self, "contact_details")

    @contact_details.setter
    def contact_details(self, value: pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsContactDetailsContactDetailArgs']]]):
        pulumi.set(self, "contact_details", value)


@pulumi.input_type
class OwnershipTeamsContactDetailsContactDetailArgs:
    def __init__(__self__, *,
                 integration_type: pulumi.Input[str],
                 email: Optional[pulumi.Input[str]] = None,
                 jira: Optional[pulumi.Input['OwnershipTeamsContactDetailsContactDetailJiraArgs']] = None,
                 ms_teams: Optional[pulumi.Input[str]] = None,
                 slack_channel: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "integration_type", integration_type)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if jira is not None:
            pulumi.set(__self__, "jira", jira)
        if ms_teams is not None:
            pulumi.set(__self__, "ms_teams", ms_teams)
        if slack_channel is not None:
            pulumi.set(__self__, "slack_channel", slack_channel)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="integrationType")
    def integration_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "integration_type")

    @integration_type.setter
    def integration_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration_type", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def jira(self) -> Optional[pulumi.Input['OwnershipTeamsContactDetailsContactDetailJiraArgs']]:
        return pulumi.get(self, "jira")

    @jira.setter
    def jira(self, value: Optional[pulumi.Input['OwnershipTeamsContactDetailsContactDetailJiraArgs']]):
        pulumi.set(self, "jira", value)

    @property
    @pulumi.getter(name="msTeams")
    def ms_teams(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ms_teams")

    @ms_teams.setter
    def ms_teams(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ms_teams", value)

    @property
    @pulumi.getter(name="slackChannel")
    def slack_channel(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slack_channel")

    @slack_channel.setter
    def slack_channel(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slack_channel", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class OwnershipTeamsContactDetailsContactDetailJiraArgs:
    def __init__(__self__, *,
                 default_assignee: pulumi.Input[str],
                 project: pulumi.Input[str]):
        pulumi.set(__self__, "default_assignee", default_assignee)
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="defaultAssignee")
    def default_assignee(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default_assignee")

    @default_assignee.setter
    def default_assignee(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_assignee", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)


@pulumi.input_type
class OwnershipTeamsLinksArgs:
    def __init__(__self__, *,
                 links: pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsLinksLinkArgs']]]):
        pulumi.set(__self__, "links", links)

    @property
    @pulumi.getter
    def links(self) -> pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsLinksLinkArgs']]]:
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsLinksLinkArgs']]]):
        pulumi.set(self, "links", value)


@pulumi.input_type
class OwnershipTeamsLinksLinkArgs:
    def __init__(__self__, *,
                 link_type: pulumi.Input[str],
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "link_type", link_type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="linkType")
    def link_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "link_type")

    @link_type.setter
    def link_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "link_type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class OwnershipTeamsResponsibilitiesArgs:
    def __init__(__self__, *,
                 development: pulumi.Input[bool],
                 infrastructure: pulumi.Input[bool],
                 line_of_business: pulumi.Input[bool],
                 operations: pulumi.Input[bool],
                 security: pulumi.Input[bool]):
        """
        :param pulumi.Input[bool] development: Responsible for developing and maintaining high quality software. Development teams are responsible for making code changes to address performance regressions, errors, or security vulnerabilities.
        :param pulumi.Input[bool] infrastructure: Responsible for the administration, management, and support of the IT infrastructure including physical servers, virtualization, and cloud. Teams with infrastructure responsibility are responsible for addressing hardware issues, resource limits, and operating system vulnerabilities.
        :param pulumi.Input[bool] line_of_business: Responsible for ensuring that applications in development align with business needs and meet the usability requirements of users, stakeholders, customers, and external partners. Teams with line of business responsibility are responsible for understanding the customer experience and how it affects business goals.
        :param pulumi.Input[bool] operations: Responsible for deploying and managing software, with a focus on high availability and performance. Teams with operations responsibilities needs to understand the impact, priority, and team responsible for addressing problems detected by Dynatrace.
        :param pulumi.Input[bool] security: Responsible for the security posture of the organization. Teams with security responsibility must understand the impact, priority, and team responsible for addressing security vulnerabilities.
        """
        pulumi.set(__self__, "development", development)
        pulumi.set(__self__, "infrastructure", infrastructure)
        pulumi.set(__self__, "line_of_business", line_of_business)
        pulumi.set(__self__, "operations", operations)
        pulumi.set(__self__, "security", security)

    @property
    @pulumi.getter
    def development(self) -> pulumi.Input[bool]:
        """
        Responsible for developing and maintaining high quality software. Development teams are responsible for making code changes to address performance regressions, errors, or security vulnerabilities.
        """
        return pulumi.get(self, "development")

    @development.setter
    def development(self, value: pulumi.Input[bool]):
        pulumi.set(self, "development", value)

    @property
    @pulumi.getter
    def infrastructure(self) -> pulumi.Input[bool]:
        """
        Responsible for the administration, management, and support of the IT infrastructure including physical servers, virtualization, and cloud. Teams with infrastructure responsibility are responsible for addressing hardware issues, resource limits, and operating system vulnerabilities.
        """
        return pulumi.get(self, "infrastructure")

    @infrastructure.setter
    def infrastructure(self, value: pulumi.Input[bool]):
        pulumi.set(self, "infrastructure", value)

    @property
    @pulumi.getter(name="lineOfBusiness")
    def line_of_business(self) -> pulumi.Input[bool]:
        """
        Responsible for ensuring that applications in development align with business needs and meet the usability requirements of users, stakeholders, customers, and external partners. Teams with line of business responsibility are responsible for understanding the customer experience and how it affects business goals.
        """
        return pulumi.get(self, "line_of_business")

    @line_of_business.setter
    def line_of_business(self, value: pulumi.Input[bool]):
        pulumi.set(self, "line_of_business", value)

    @property
    @pulumi.getter
    def operations(self) -> pulumi.Input[bool]:
        """
        Responsible for deploying and managing software, with a focus on high availability and performance. Teams with operations responsibilities needs to understand the impact, priority, and team responsible for addressing problems detected by Dynatrace.
        """
        return pulumi.get(self, "operations")

    @operations.setter
    def operations(self, value: pulumi.Input[bool]):
        pulumi.set(self, "operations", value)

    @property
    @pulumi.getter
    def security(self) -> pulumi.Input[bool]:
        """
        Responsible for the security posture of the organization. Teams with security responsibility must understand the impact, priority, and team responsible for addressing security vulnerabilities.
        """
        return pulumi.get(self, "security")

    @security.setter
    def security(self, value: pulumi.Input[bool]):
        pulumi.set(self, "security", value)


@pulumi.input_type
class OwnershipTeamsSupplementaryIdentifiersArgs:
    def __init__(__self__, *,
                 supplementary_identifiers: pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifierArgs']]]):
        pulumi.set(__self__, "supplementary_identifiers", supplementary_identifiers)

    @property
    @pulumi.getter(name="supplementaryIdentifiers")
    def supplementary_identifiers(self) -> pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifierArgs']]]:
        return pulumi.get(self, "supplementary_identifiers")

    @supplementary_identifiers.setter
    def supplementary_identifiers(self, value: pulumi.Input[Sequence[pulumi.Input['OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifierArgs']]]):
        pulumi.set(self, "supplementary_identifiers", value)


@pulumi.input_type
class OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifierArgs:
    def __init__(__self__, *,
                 supplementary_identifier: pulumi.Input[str]):
        pulumi.set(__self__, "supplementary_identifier", supplementary_identifier)

    @property
    @pulumi.getter(name="supplementaryIdentifier")
    def supplementary_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "supplementary_identifier")

    @supplementary_identifier.setter
    def supplementary_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "supplementary_identifier", value)


@pulumi.input_type
class PgAnomaliesAvailabilityArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 minimum_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] method: How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
        :param pulumi.Input[int] minimum_threshold: Alert if the number of active processes in the group is lower than this value.
        """
        pulumi.set(__self__, "method", method)
        if minimum_threshold is not None:
            pulumi.set(__self__, "minimum_threshold", minimum_threshold)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        """
        How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="minimumThreshold")
    def minimum_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Alert if the number of active processes in the group is lower than this value.
        """
        return pulumi.get(self, "minimum_threshold")

    @minimum_threshold.setter
    def minimum_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_threshold", value)


@pulumi.input_type
class ProcessAvailabilityMetadataArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['ProcessAvailabilityMetadataItemArgs']]]):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['ProcessAvailabilityMetadataItemArgs']]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['ProcessAvailabilityMetadataItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class ProcessAvailabilityMetadataItemArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessAvailabilityRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['ProcessAvailabilityRulesRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['ProcessAvailabilityRulesRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['ProcessAvailabilityRulesRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ProcessAvailabilityRulesRuleArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[str],
                 property: pulumi.Input[str]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ProcessGroupDetectionGroupExtractionArgs:
    def __init__(__self__, *,
                 delimiter: pulumi.Input['ProcessGroupDetectionGroupExtractionDelimiterArgs'],
                 property: pulumi.Input[str],
                 standalone_rule: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['ProcessGroupDetectionGroupExtractionDelimiterArgs'] delimiter: Optionally delimit this property between *From* and *To*.
        :param pulumi.Input[str] property: Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
        :param pulumi.Input[bool] standalone_rule: If this option is selected, the default Dynatrace behavior is disabled for these detected processes. Only this rule is used to separate the process group.
        """
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "property", property)
        if standalone_rule is not None:
            pulumi.set(__self__, "standalone_rule", standalone_rule)

    @property
    @pulumi.getter
    def delimiter(self) -> pulumi.Input['ProcessGroupDetectionGroupExtractionDelimiterArgs']:
        """
        Optionally delimit this property between *From* and *To*.
        """
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: pulumi.Input['ProcessGroupDetectionGroupExtractionDelimiterArgs']):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="standaloneRule")
    def standalone_rule(self) -> Optional[pulumi.Input[bool]]:
        """
        If this option is selected, the default Dynatrace behavior is disabled for these detected processes. Only this rule is used to separate the process group.
        """
        return pulumi.get(self, "standalone_rule")

    @standalone_rule.setter
    def standalone_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "standalone_rule", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        """
        Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ProcessGroupDetectionGroupExtractionDelimiterArgs:
    def __init__(__self__, *,
                 remove_ids: pulumi.Input[bool],
                 from_: Optional[pulumi.Input[str]] = None,
                 to: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "remove_ids", remove_ids)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="removeIds")
    def remove_ids(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "remove_ids")

    @remove_ids.setter
    def remove_ids(self, value: pulumi.Input[bool]):
        pulumi.set(self, "remove_ids", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class ProcessGroupDetectionInstanceExtractionArgs:
    def __init__(__self__, *,
                 delimiter: Optional[pulumi.Input['ProcessGroupDetectionInstanceExtractionDelimiterArgs']] = None,
                 property: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ProcessGroupDetectionInstanceExtractionDelimiterArgs'] delimiter: Optionally delimit this property between *From* and *To*.
        :param pulumi.Input[str] property: Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
        """
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if property is not None:
            pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input['ProcessGroupDetectionInstanceExtractionDelimiterArgs']]:
        """
        Optionally delimit this property between *From* and *To*.
        """
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input['ProcessGroupDetectionInstanceExtractionDelimiterArgs']]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        """
        Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ProcessGroupDetectionInstanceExtractionDelimiterArgs:
    def __init__(__self__, *,
                 remove_ids: pulumi.Input[bool],
                 from_: Optional[pulumi.Input[str]] = None,
                 to: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "remove_ids", remove_ids)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter(name="removeIds")
    def remove_ids(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "remove_ids")

    @remove_ids.setter
    def remove_ids(self, value: pulumi.Input[bool]):
        pulumi.set(self, "remove_ids", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class ProcessGroupDetectionProcessDetectionArgs:
    def __init__(__self__, *,
                 contained_string: pulumi.Input[str],
                 property: pulumi.Input[str],
                 restrict_to_process_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] contained_string: The substring to be contained in the value `property` refers to. Case Sensitive
        :param pulumi.Input[str] property: Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
        :param pulumi.Input[str] restrict_to_process_type: Restrict this rule to specific process types. Note: Not all types can be detected at startup. Possible values: `PROCESS_TYPE_APACHE_HTTPD`, `PROCESS_TYPE_GLASSFISH`, `PROCESS_TYPE_GO`, `PROCESS_TYPE_IIS_APP_POOL`, `PROCESS_TYPE_JBOSS`, `PROCESS_TYPE_JAVA`, `PROCESS_TYPE_NGINX`, `PROCESS_TYPE_NODE_JS`, `PROCESS_TYPE_PHP`, `PROCESS_TYPE_TOMCAT`, `PROCESS_TYPE_WEBLOGIC`, `PROCESS_TYPE_WEBSPHERE`
        """
        pulumi.set(__self__, "contained_string", contained_string)
        pulumi.set(__self__, "property", property)
        if restrict_to_process_type is not None:
            pulumi.set(__self__, "restrict_to_process_type", restrict_to_process_type)

    @property
    @pulumi.getter(name="containedString")
    def contained_string(self) -> pulumi.Input[str]:
        """
        The substring to be contained in the value `property` refers to. Case Sensitive
        """
        return pulumi.get(self, "contained_string")

    @contained_string.setter
    def contained_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "contained_string", value)

    @property
    @pulumi.getter(name="restrictToProcessType")
    def restrict_to_process_type(self) -> Optional[pulumi.Input[str]]:
        """
        Restrict this rule to specific process types. Note: Not all types can be detected at startup. Possible values: `PROCESS_TYPE_APACHE_HTTPD`, `PROCESS_TYPE_GLASSFISH`, `PROCESS_TYPE_GO`, `PROCESS_TYPE_IIS_APP_POOL`, `PROCESS_TYPE_JBOSS`, `PROCESS_TYPE_JAVA`, `PROCESS_TYPE_NGINX`, `PROCESS_TYPE_NODE_JS`, `PROCESS_TYPE_PHP`, `PROCESS_TYPE_TOMCAT`, `PROCESS_TYPE_WEBLOGIC`, `PROCESS_TYPE_WEBSPHERE`
        """
        return pulumi.get(self, "restrict_to_process_type")

    @restrict_to_process_type.setter
    def restrict_to_process_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restrict_to_process_type", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        """
        Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ProcessMonitoringRuleConditionArgs:
    def __init__(__self__, *,
                 item: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 env_var: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] item: Condition target
        :param pulumi.Input[str] operator: Condition operator
        :param pulumi.Input[str] env_var: supported only with OneAgent 1.167+
        :param pulumi.Input[str] value: Condition value
        """
        pulumi.set(__self__, "item", item)
        pulumi.set(__self__, "operator", operator)
        if env_var is not None:
            pulumi.set(__self__, "env_var", env_var)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def item(self) -> pulumi.Input[str]:
        """
        Condition target
        """
        return pulumi.get(self, "item")

    @item.setter
    def item(self, value: pulumi.Input[str]):
        pulumi.set(self, "item", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Condition operator
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="envVar")
    def env_var(self) -> Optional[pulumi.Input[str]]:
        """
        supported only with OneAgent 1.167+
        """
        return pulumi.get(self, "env_var")

    @env_var.setter
    def env_var(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "env_var", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Condition value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionArgs']]]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionArgs:
    def __init__(__self__, *,
                 application_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionApplicationTypeComparisonArgs']]]] = None,
                 application_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionApplicationTypeArgs']]]] = None,
                 azure_compute_mode_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureComputeModeComparisonArgs']]]] = None,
                 azure_compute_modes: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureComputeModeArgs']]]] = None,
                 azure_sku_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureSkuComparisionArgs']]]] = None,
                 azure_skus: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureSkusArgs']]]] = None,
                 base_comparison_basics: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBaseComparisonBasicArgs']]]] = None,
                 base_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBaseConditionKeyArgs']]]] = None,
                 bitness_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBitnessComparisionArgs']]]] = None,
                 bitnesses: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBitnessArgs']]]] = None,
                 cloud_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCloudTypeComparisonArgs']]]] = None,
                 cloud_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCloudTypeArgs']]]] = None,
                 comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionComparisonArgs']]]] = None,
                 custom_application_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomApplicationTypeComparisonArgs']]]] = None,
                 custom_application_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomApplicationTypeArgs']]]] = None,
                 custom_host_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyArgs']]]] = None,
                 custom_host_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataArgs']]]] = None,
                 custom_process_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyArgs']]]] = None,
                 custom_process_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataArgs']]]] = None,
                 database_topologies: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDatabaseTopologyArgs']]]] = None,
                 database_topology_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDatabaseTopologyComparisonArgs']]]] = None,
                 dcrum_decoder_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDcrumDecoderComparisonArgs']]]] = None,
                 dcrum_decoders: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDcrumDecoderArgs']]]] = None,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionEntityArgs']]]] = None,
                 entity_id_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionEntityIdComparisonArgs']]]] = None,
                 host_teches: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionHostTechArgs']]]] = None,
                 hypervisor_type_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionHypervisorTypeComparisionArgs']]]] = None,
                 hypervisors: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionHypervisorArgs']]]] = None,
                 indexed_name_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedNameComparisonArgs']]]] = None,
                 indexed_names: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedNameArgs']]]] = None,
                 indexed_string_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedStringComparisonArgs']]]] = None,
                 indexed_strings: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedStringArgs']]]] = None,
                 indexed_tag_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagComparisonArgs']]]] = None,
                 indexed_tags: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagArgs']]]] = None,
                 integer_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIntegerComparisonArgs']]]] = None,
                 integers: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIntegerArgs']]]] = None,
                 ipaddress_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIpaddressComparisonArgs']]]] = None,
                 ipaddresses: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIpaddressArgs']]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionKeyArgs']]]] = None,
                 mobile_platform_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionMobilePlatformComparisonArgs']]]] = None,
                 mobile_platforms: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionMobilePlatformArgs']]]] = None,
                 os_arches: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOsArchArgs']]]] = None,
                 os_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOsTypeArgs']]]] = None,
                 osarchitecture_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOsarchitectureComparisonArgs']]]] = None,
                 ostype_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOstypeComparisonArgs']]]] = None,
                 paas_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionPaasTypeComparisonArgs']]]] = None,
                 paas_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionPaasTypeArgs']]]] = None,
                 process_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionProcessMetadataConditionKeyArgs']]]] = None,
                 process_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionProcessMetadataArgs']]]] = None,
                 service_topologies: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTopologyArgs']]]] = None,
                 service_topology_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTopologyComparisonArgs']]]] = None,
                 service_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTypeComparisonArgs']]]] = None,
                 service_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTypeArgs']]]] = None,
                 simple_host_tech_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSimpleHostTechComparisonArgs']]]] = None,
                 simple_tech_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSimpleTechComparisonArgs']]]] = None,
                 string_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringComparisonArgs']]]] = None,
                 string_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringConditionKeyArgs']]]] = None,
                 string_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringKeyArgs']]]] = None,
                 strings: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringArgs']]]] = None,
                 synthetic_engine_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSyntheticEngineTypeComparisonArgs']]]] = None,
                 synthetic_engines: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSyntheticEngineArgs']]]] = None,
                 tag_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionTagComparisonArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionTagArgs']]]] = None,
                 teches: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionTechArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if application_type_comparisons is not None:
            warnings.warn("""You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""application_type_comparisons is deprecated: You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.""")
        if application_type_comparisons is not None:
            pulumi.set(__self__, "application_type_comparisons", application_type_comparisons)
        if application_types is not None:
            pulumi.set(__self__, "application_types", application_types)
        if azure_compute_mode_comparisons is not None:
            pulumi.set(__self__, "azure_compute_mode_comparisons", azure_compute_mode_comparisons)
        if azure_compute_modes is not None:
            warnings.warn("""You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""azure_compute_modes is deprecated: You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.""")
        if azure_compute_modes is not None:
            pulumi.set(__self__, "azure_compute_modes", azure_compute_modes)
        if azure_sku_comparisions is not None:
            warnings.warn("""You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""azure_sku_comparisions is deprecated: You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.""")
        if azure_sku_comparisions is not None:
            pulumi.set(__self__, "azure_sku_comparisions", azure_sku_comparisions)
        if azure_skus is not None:
            pulumi.set(__self__, "azure_skus", azure_skus)
        if base_comparison_basics is not None:
            warnings.warn("""You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""base_comparison_basics is deprecated: You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.""")
        if base_comparison_basics is not None:
            pulumi.set(__self__, "base_comparison_basics", base_comparison_basics)
        if base_condition_keys is not None:
            warnings.warn("""'base_condition_key' is deprecated. You should use 'key'""", DeprecationWarning)
            pulumi.log.warn("""base_condition_keys is deprecated: 'base_condition_key' is deprecated. You should use 'key'""")
        if base_condition_keys is not None:
            pulumi.set(__self__, "base_condition_keys", base_condition_keys)
        if bitness_comparisions is not None:
            warnings.warn("""You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""bitness_comparisions is deprecated: You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.""")
        if bitness_comparisions is not None:
            pulumi.set(__self__, "bitness_comparisions", bitness_comparisions)
        if bitnesses is not None:
            pulumi.set(__self__, "bitnesses", bitnesses)
        if cloud_type_comparisons is not None:
            warnings.warn("""You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""cloud_type_comparisons is deprecated: You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.""")
        if cloud_type_comparisons is not None:
            pulumi.set(__self__, "cloud_type_comparisons", cloud_type_comparisons)
        if cloud_types is not None:
            pulumi.set(__self__, "cloud_types", cloud_types)
        if comparisons is not None:
            pulumi.set(__self__, "comparisons", comparisons)
        if custom_application_type_comparisons is not None:
            warnings.warn("""You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""custom_application_type_comparisons is deprecated: You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.""")
        if custom_application_type_comparisons is not None:
            pulumi.set(__self__, "custom_application_type_comparisons", custom_application_type_comparisons)
        if custom_application_types is not None:
            pulumi.set(__self__, "custom_application_types", custom_application_types)
        if custom_host_metadata_condition_keys is not None:
            warnings.warn("""'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'""", DeprecationWarning)
            pulumi.log.warn("""custom_host_metadata_condition_keys is deprecated: 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'""")
        if custom_host_metadata_condition_keys is not None:
            pulumi.set(__self__, "custom_host_metadata_condition_keys", custom_host_metadata_condition_keys)
        if custom_host_metadatas is not None:
            pulumi.set(__self__, "custom_host_metadatas", custom_host_metadatas)
        if custom_process_metadata_condition_keys is not None:
            warnings.warn("""'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'""", DeprecationWarning)
            pulumi.log.warn("""custom_process_metadata_condition_keys is deprecated: 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'""")
        if custom_process_metadata_condition_keys is not None:
            pulumi.set(__self__, "custom_process_metadata_condition_keys", custom_process_metadata_condition_keys)
        if custom_process_metadatas is not None:
            pulumi.set(__self__, "custom_process_metadatas", custom_process_metadatas)
        if database_topologies is not None:
            pulumi.set(__self__, "database_topologies", database_topologies)
        if database_topology_comparisons is not None:
            warnings.warn("""You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""database_topology_comparisons is deprecated: You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.""")
        if database_topology_comparisons is not None:
            pulumi.set(__self__, "database_topology_comparisons", database_topology_comparisons)
        if dcrum_decoder_comparisons is not None:
            warnings.warn("""You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""dcrum_decoder_comparisons is deprecated: You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.""")
        if dcrum_decoder_comparisons is not None:
            pulumi.set(__self__, "dcrum_decoder_comparisons", dcrum_decoder_comparisons)
        if dcrum_decoders is not None:
            pulumi.set(__self__, "dcrum_decoders", dcrum_decoders)
        if entities is not None:
            pulumi.set(__self__, "entities", entities)
        if entity_id_comparisons is not None:
            warnings.warn("""You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""entity_id_comparisons is deprecated: You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.""")
        if entity_id_comparisons is not None:
            pulumi.set(__self__, "entity_id_comparisons", entity_id_comparisons)
        if host_teches is not None:
            pulumi.set(__self__, "host_teches", host_teches)
        if hypervisor_type_comparisions is not None:
            warnings.warn("""`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead""", DeprecationWarning)
            pulumi.log.warn("""hypervisor_type_comparisions is deprecated: `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead""")
        if hypervisor_type_comparisions is not None:
            pulumi.set(__self__, "hypervisor_type_comparisions", hypervisor_type_comparisions)
        if hypervisors is not None:
            pulumi.set(__self__, "hypervisors", hypervisors)
        if indexed_name_comparisons is not None:
            warnings.warn("""You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_name_comparisons is deprecated: You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_name_comparisons is not None:
            pulumi.set(__self__, "indexed_name_comparisons", indexed_name_comparisons)
        if indexed_names is not None:
            pulumi.set(__self__, "indexed_names", indexed_names)
        if indexed_string_comparisons is not None:
            warnings.warn("""You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_string_comparisons is deprecated: You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_string_comparisons is not None:
            pulumi.set(__self__, "indexed_string_comparisons", indexed_string_comparisons)
        if indexed_strings is not None:
            pulumi.set(__self__, "indexed_strings", indexed_strings)
        if indexed_tag_comparisons is not None:
            warnings.warn("""You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_tag_comparisons is deprecated: You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_tag_comparisons is not None:
            pulumi.set(__self__, "indexed_tag_comparisons", indexed_tag_comparisons)
        if indexed_tags is not None:
            pulumi.set(__self__, "indexed_tags", indexed_tags)
        if integer_comparisons is not None:
            warnings.warn("""You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""integer_comparisons is deprecated: You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.""")
        if integer_comparisons is not None:
            pulumi.set(__self__, "integer_comparisons", integer_comparisons)
        if integers is not None:
            pulumi.set(__self__, "integers", integers)
        if ipaddress_comparisons is not None:
            warnings.warn("""You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""ipaddress_comparisons is deprecated: You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.""")
        if ipaddress_comparisons is not None:
            pulumi.set(__self__, "ipaddress_comparisons", ipaddress_comparisons)
        if ipaddresses is not None:
            pulumi.set(__self__, "ipaddresses", ipaddresses)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if mobile_platform_comparisons is not None:
            warnings.warn("""You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""mobile_platform_comparisons is deprecated: You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.""")
        if mobile_platform_comparisons is not None:
            pulumi.set(__self__, "mobile_platform_comparisons", mobile_platform_comparisons)
        if mobile_platforms is not None:
            pulumi.set(__self__, "mobile_platforms", mobile_platforms)
        if os_arches is not None:
            pulumi.set(__self__, "os_arches", os_arches)
        if os_types is not None:
            pulumi.set(__self__, "os_types", os_types)
        if osarchitecture_comparisons is not None:
            warnings.warn("""You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""osarchitecture_comparisons is deprecated: You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.""")
        if osarchitecture_comparisons is not None:
            pulumi.set(__self__, "osarchitecture_comparisons", osarchitecture_comparisons)
        if ostype_comparisons is not None:
            warnings.warn("""You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""ostype_comparisons is deprecated: You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.""")
        if ostype_comparisons is not None:
            pulumi.set(__self__, "ostype_comparisons", ostype_comparisons)
        if paas_type_comparisons is not None:
            warnings.warn("""You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""paas_type_comparisons is deprecated: You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.""")
        if paas_type_comparisons is not None:
            pulumi.set(__self__, "paas_type_comparisons", paas_type_comparisons)
        if paas_types is not None:
            pulumi.set(__self__, "paas_types", paas_types)
        if process_metadata_condition_keys is not None:
            warnings.warn("""'process_metadata_condition_key' is deprecated. You should use 'process_metadata'""", DeprecationWarning)
            pulumi.log.warn("""process_metadata_condition_keys is deprecated: 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'""")
        if process_metadata_condition_keys is not None:
            pulumi.set(__self__, "process_metadata_condition_keys", process_metadata_condition_keys)
        if process_metadatas is not None:
            pulumi.set(__self__, "process_metadatas", process_metadatas)
        if service_topologies is not None:
            pulumi.set(__self__, "service_topologies", service_topologies)
        if service_topology_comparisons is not None:
            warnings.warn("""You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""service_topology_comparisons is deprecated: You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.""")
        if service_topology_comparisons is not None:
            pulumi.set(__self__, "service_topology_comparisons", service_topology_comparisons)
        if service_type_comparisons is not None:
            warnings.warn("""You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""service_type_comparisons is deprecated: You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.""")
        if service_type_comparisons is not None:
            pulumi.set(__self__, "service_type_comparisons", service_type_comparisons)
        if service_types is not None:
            pulumi.set(__self__, "service_types", service_types)
        if simple_host_tech_comparisons is not None:
            warnings.warn("""You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""simple_host_tech_comparisons is deprecated: You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.""")
        if simple_host_tech_comparisons is not None:
            pulumi.set(__self__, "simple_host_tech_comparisons", simple_host_tech_comparisons)
        if simple_tech_comparisons is not None:
            warnings.warn("""You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""simple_tech_comparisons is deprecated: You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.""")
        if simple_tech_comparisons is not None:
            pulumi.set(__self__, "simple_tech_comparisons", simple_tech_comparisons)
        if string_comparisons is not None:
            warnings.warn("""You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""string_comparisons is deprecated: You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.""")
        if string_comparisons is not None:
            pulumi.set(__self__, "string_comparisons", string_comparisons)
        if string_condition_keys is not None:
            warnings.warn("""'string_condition_key' is deprecated. You should use 'string_key'""", DeprecationWarning)
            pulumi.log.warn("""string_condition_keys is deprecated: 'string_condition_key' is deprecated. You should use 'string_key'""")
        if string_condition_keys is not None:
            pulumi.set(__self__, "string_condition_keys", string_condition_keys)
        if string_keys is not None:
            pulumi.set(__self__, "string_keys", string_keys)
        if strings is not None:
            pulumi.set(__self__, "strings", strings)
        if synthetic_engine_type_comparisons is not None:
            warnings.warn("""You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""synthetic_engine_type_comparisons is deprecated: You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.""")
        if synthetic_engine_type_comparisons is not None:
            pulumi.set(__self__, "synthetic_engine_type_comparisons", synthetic_engine_type_comparisons)
        if synthetic_engines is not None:
            pulumi.set(__self__, "synthetic_engines", synthetic_engines)
        if tag_comparisons is not None:
            warnings.warn("""You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""tag_comparisons is deprecated: You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.""")
        if tag_comparisons is not None:
            pulumi.set(__self__, "tag_comparisons", tag_comparisons)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if teches is not None:
            pulumi.set(__self__, "teches", teches)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="applicationTypeComparisons")
    def application_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionApplicationTypeComparisonArgs']]]]:
        return pulumi.get(self, "application_type_comparisons")

    @application_type_comparisons.setter
    def application_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionApplicationTypeComparisonArgs']]]]):
        pulumi.set(self, "application_type_comparisons", value)

    @property
    @pulumi.getter(name="applicationTypes")
    def application_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionApplicationTypeArgs']]]]:
        return pulumi.get(self, "application_types")

    @application_types.setter
    def application_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionApplicationTypeArgs']]]]):
        pulumi.set(self, "application_types", value)

    @property
    @pulumi.getter(name="azureComputeModeComparisons")
    def azure_compute_mode_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureComputeModeComparisonArgs']]]]:
        return pulumi.get(self, "azure_compute_mode_comparisons")

    @azure_compute_mode_comparisons.setter
    def azure_compute_mode_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureComputeModeComparisonArgs']]]]):
        pulumi.set(self, "azure_compute_mode_comparisons", value)

    @property
    @pulumi.getter(name="azureComputeModes")
    def azure_compute_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureComputeModeArgs']]]]:
        return pulumi.get(self, "azure_compute_modes")

    @azure_compute_modes.setter
    def azure_compute_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureComputeModeArgs']]]]):
        pulumi.set(self, "azure_compute_modes", value)

    @property
    @pulumi.getter(name="azureSkuComparisions")
    def azure_sku_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureSkuComparisionArgs']]]]:
        return pulumi.get(self, "azure_sku_comparisions")

    @azure_sku_comparisions.setter
    def azure_sku_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureSkuComparisionArgs']]]]):
        pulumi.set(self, "azure_sku_comparisions", value)

    @property
    @pulumi.getter(name="azureSkus")
    def azure_skus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureSkusArgs']]]]:
        return pulumi.get(self, "azure_skus")

    @azure_skus.setter
    def azure_skus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionAzureSkusArgs']]]]):
        pulumi.set(self, "azure_skus", value)

    @property
    @pulumi.getter(name="baseComparisonBasics")
    def base_comparison_basics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBaseComparisonBasicArgs']]]]:
        return pulumi.get(self, "base_comparison_basics")

    @base_comparison_basics.setter
    def base_comparison_basics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBaseComparisonBasicArgs']]]]):
        pulumi.set(self, "base_comparison_basics", value)

    @property
    @pulumi.getter(name="baseConditionKeys")
    def base_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBaseConditionKeyArgs']]]]:
        return pulumi.get(self, "base_condition_keys")

    @base_condition_keys.setter
    def base_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBaseConditionKeyArgs']]]]):
        pulumi.set(self, "base_condition_keys", value)

    @property
    @pulumi.getter(name="bitnessComparisions")
    def bitness_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBitnessComparisionArgs']]]]:
        return pulumi.get(self, "bitness_comparisions")

    @bitness_comparisions.setter
    def bitness_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBitnessComparisionArgs']]]]):
        pulumi.set(self, "bitness_comparisions", value)

    @property
    @pulumi.getter
    def bitnesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBitnessArgs']]]]:
        return pulumi.get(self, "bitnesses")

    @bitnesses.setter
    def bitnesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionBitnessArgs']]]]):
        pulumi.set(self, "bitnesses", value)

    @property
    @pulumi.getter(name="cloudTypeComparisons")
    def cloud_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCloudTypeComparisonArgs']]]]:
        return pulumi.get(self, "cloud_type_comparisons")

    @cloud_type_comparisons.setter
    def cloud_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCloudTypeComparisonArgs']]]]):
        pulumi.set(self, "cloud_type_comparisons", value)

    @property
    @pulumi.getter(name="cloudTypes")
    def cloud_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCloudTypeArgs']]]]:
        return pulumi.get(self, "cloud_types")

    @cloud_types.setter
    def cloud_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCloudTypeArgs']]]]):
        pulumi.set(self, "cloud_types", value)

    @property
    @pulumi.getter
    def comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionComparisonArgs']]]]:
        return pulumi.get(self, "comparisons")

    @comparisons.setter
    def comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionComparisonArgs']]]]):
        pulumi.set(self, "comparisons", value)

    @property
    @pulumi.getter(name="customApplicationTypeComparisons")
    def custom_application_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomApplicationTypeComparisonArgs']]]]:
        return pulumi.get(self, "custom_application_type_comparisons")

    @custom_application_type_comparisons.setter
    def custom_application_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomApplicationTypeComparisonArgs']]]]):
        pulumi.set(self, "custom_application_type_comparisons", value)

    @property
    @pulumi.getter(name="customApplicationTypes")
    def custom_application_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomApplicationTypeArgs']]]]:
        return pulumi.get(self, "custom_application_types")

    @custom_application_types.setter
    def custom_application_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomApplicationTypeArgs']]]]):
        pulumi.set(self, "custom_application_types", value)

    @property
    @pulumi.getter(name="customHostMetadataConditionKeys")
    def custom_host_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "custom_host_metadata_condition_keys")

    @custom_host_metadata_condition_keys.setter
    def custom_host_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "custom_host_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="customHostMetadatas")
    def custom_host_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataArgs']]]]:
        return pulumi.get(self, "custom_host_metadatas")

    @custom_host_metadatas.setter
    def custom_host_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataArgs']]]]):
        pulumi.set(self, "custom_host_metadatas", value)

    @property
    @pulumi.getter(name="customProcessMetadataConditionKeys")
    def custom_process_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "custom_process_metadata_condition_keys")

    @custom_process_metadata_condition_keys.setter
    def custom_process_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "custom_process_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="customProcessMetadatas")
    def custom_process_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataArgs']]]]:
        return pulumi.get(self, "custom_process_metadatas")

    @custom_process_metadatas.setter
    def custom_process_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataArgs']]]]):
        pulumi.set(self, "custom_process_metadatas", value)

    @property
    @pulumi.getter(name="databaseTopologies")
    def database_topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDatabaseTopologyArgs']]]]:
        return pulumi.get(self, "database_topologies")

    @database_topologies.setter
    def database_topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDatabaseTopologyArgs']]]]):
        pulumi.set(self, "database_topologies", value)

    @property
    @pulumi.getter(name="databaseTopologyComparisons")
    def database_topology_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDatabaseTopologyComparisonArgs']]]]:
        return pulumi.get(self, "database_topology_comparisons")

    @database_topology_comparisons.setter
    def database_topology_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDatabaseTopologyComparisonArgs']]]]):
        pulumi.set(self, "database_topology_comparisons", value)

    @property
    @pulumi.getter(name="dcrumDecoderComparisons")
    def dcrum_decoder_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDcrumDecoderComparisonArgs']]]]:
        return pulumi.get(self, "dcrum_decoder_comparisons")

    @dcrum_decoder_comparisons.setter
    def dcrum_decoder_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDcrumDecoderComparisonArgs']]]]):
        pulumi.set(self, "dcrum_decoder_comparisons", value)

    @property
    @pulumi.getter(name="dcrumDecoders")
    def dcrum_decoders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDcrumDecoderArgs']]]]:
        return pulumi.get(self, "dcrum_decoders")

    @dcrum_decoders.setter
    def dcrum_decoders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionDcrumDecoderArgs']]]]):
        pulumi.set(self, "dcrum_decoders", value)

    @property
    @pulumi.getter
    def entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionEntityArgs']]]]:
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionEntityArgs']]]]):
        pulumi.set(self, "entities", value)

    @property
    @pulumi.getter(name="entityIdComparisons")
    def entity_id_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionEntityIdComparisonArgs']]]]:
        return pulumi.get(self, "entity_id_comparisons")

    @entity_id_comparisons.setter
    def entity_id_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionEntityIdComparisonArgs']]]]):
        pulumi.set(self, "entity_id_comparisons", value)

    @property
    @pulumi.getter(name="hostTeches")
    def host_teches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionHostTechArgs']]]]:
        return pulumi.get(self, "host_teches")

    @host_teches.setter
    def host_teches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionHostTechArgs']]]]):
        pulumi.set(self, "host_teches", value)

    @property
    @pulumi.getter(name="hypervisorTypeComparisions")
    def hypervisor_type_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionHypervisorTypeComparisionArgs']]]]:
        return pulumi.get(self, "hypervisor_type_comparisions")

    @hypervisor_type_comparisions.setter
    def hypervisor_type_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionHypervisorTypeComparisionArgs']]]]):
        pulumi.set(self, "hypervisor_type_comparisions", value)

    @property
    @pulumi.getter
    def hypervisors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionHypervisorArgs']]]]:
        return pulumi.get(self, "hypervisors")

    @hypervisors.setter
    def hypervisors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionHypervisorArgs']]]]):
        pulumi.set(self, "hypervisors", value)

    @property
    @pulumi.getter(name="indexedNameComparisons")
    def indexed_name_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedNameComparisonArgs']]]]:
        return pulumi.get(self, "indexed_name_comparisons")

    @indexed_name_comparisons.setter
    def indexed_name_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedNameComparisonArgs']]]]):
        pulumi.set(self, "indexed_name_comparisons", value)

    @property
    @pulumi.getter(name="indexedNames")
    def indexed_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedNameArgs']]]]:
        return pulumi.get(self, "indexed_names")

    @indexed_names.setter
    def indexed_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedNameArgs']]]]):
        pulumi.set(self, "indexed_names", value)

    @property
    @pulumi.getter(name="indexedStringComparisons")
    def indexed_string_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedStringComparisonArgs']]]]:
        return pulumi.get(self, "indexed_string_comparisons")

    @indexed_string_comparisons.setter
    def indexed_string_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedStringComparisonArgs']]]]):
        pulumi.set(self, "indexed_string_comparisons", value)

    @property
    @pulumi.getter(name="indexedStrings")
    def indexed_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedStringArgs']]]]:
        return pulumi.get(self, "indexed_strings")

    @indexed_strings.setter
    def indexed_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedStringArgs']]]]):
        pulumi.set(self, "indexed_strings", value)

    @property
    @pulumi.getter(name="indexedTagComparisons")
    def indexed_tag_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagComparisonArgs']]]]:
        return pulumi.get(self, "indexed_tag_comparisons")

    @indexed_tag_comparisons.setter
    def indexed_tag_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagComparisonArgs']]]]):
        pulumi.set(self, "indexed_tag_comparisons", value)

    @property
    @pulumi.getter(name="indexedTags")
    def indexed_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagArgs']]]]:
        return pulumi.get(self, "indexed_tags")

    @indexed_tags.setter
    def indexed_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagArgs']]]]):
        pulumi.set(self, "indexed_tags", value)

    @property
    @pulumi.getter(name="integerComparisons")
    def integer_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIntegerComparisonArgs']]]]:
        return pulumi.get(self, "integer_comparisons")

    @integer_comparisons.setter
    def integer_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIntegerComparisonArgs']]]]):
        pulumi.set(self, "integer_comparisons", value)

    @property
    @pulumi.getter
    def integers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIntegerArgs']]]]:
        return pulumi.get(self, "integers")

    @integers.setter
    def integers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIntegerArgs']]]]):
        pulumi.set(self, "integers", value)

    @property
    @pulumi.getter(name="ipaddressComparisons")
    def ipaddress_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIpaddressComparisonArgs']]]]:
        return pulumi.get(self, "ipaddress_comparisons")

    @ipaddress_comparisons.setter
    def ipaddress_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIpaddressComparisonArgs']]]]):
        pulumi.set(self, "ipaddress_comparisons", value)

    @property
    @pulumi.getter
    def ipaddresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIpaddressArgs']]]]:
        return pulumi.get(self, "ipaddresses")

    @ipaddresses.setter
    def ipaddresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionIpaddressArgs']]]]):
        pulumi.set(self, "ipaddresses", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionKeyArgs']]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="mobilePlatformComparisons")
    def mobile_platform_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionMobilePlatformComparisonArgs']]]]:
        return pulumi.get(self, "mobile_platform_comparisons")

    @mobile_platform_comparisons.setter
    def mobile_platform_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionMobilePlatformComparisonArgs']]]]):
        pulumi.set(self, "mobile_platform_comparisons", value)

    @property
    @pulumi.getter(name="mobilePlatforms")
    def mobile_platforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionMobilePlatformArgs']]]]:
        return pulumi.get(self, "mobile_platforms")

    @mobile_platforms.setter
    def mobile_platforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionMobilePlatformArgs']]]]):
        pulumi.set(self, "mobile_platforms", value)

    @property
    @pulumi.getter(name="osArches")
    def os_arches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOsArchArgs']]]]:
        return pulumi.get(self, "os_arches")

    @os_arches.setter
    def os_arches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOsArchArgs']]]]):
        pulumi.set(self, "os_arches", value)

    @property
    @pulumi.getter(name="osTypes")
    def os_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOsTypeArgs']]]]:
        return pulumi.get(self, "os_types")

    @os_types.setter
    def os_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOsTypeArgs']]]]):
        pulumi.set(self, "os_types", value)

    @property
    @pulumi.getter(name="osarchitectureComparisons")
    def osarchitecture_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOsarchitectureComparisonArgs']]]]:
        return pulumi.get(self, "osarchitecture_comparisons")

    @osarchitecture_comparisons.setter
    def osarchitecture_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOsarchitectureComparisonArgs']]]]):
        pulumi.set(self, "osarchitecture_comparisons", value)

    @property
    @pulumi.getter(name="ostypeComparisons")
    def ostype_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOstypeComparisonArgs']]]]:
        return pulumi.get(self, "ostype_comparisons")

    @ostype_comparisons.setter
    def ostype_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionOstypeComparisonArgs']]]]):
        pulumi.set(self, "ostype_comparisons", value)

    @property
    @pulumi.getter(name="paasTypeComparisons")
    def paas_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionPaasTypeComparisonArgs']]]]:
        return pulumi.get(self, "paas_type_comparisons")

    @paas_type_comparisons.setter
    def paas_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionPaasTypeComparisonArgs']]]]):
        pulumi.set(self, "paas_type_comparisons", value)

    @property
    @pulumi.getter(name="paasTypes")
    def paas_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionPaasTypeArgs']]]]:
        return pulumi.get(self, "paas_types")

    @paas_types.setter
    def paas_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionPaasTypeArgs']]]]):
        pulumi.set(self, "paas_types", value)

    @property
    @pulumi.getter(name="processMetadataConditionKeys")
    def process_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionProcessMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "process_metadata_condition_keys")

    @process_metadata_condition_keys.setter
    def process_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionProcessMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "process_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="processMetadatas")
    def process_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionProcessMetadataArgs']]]]:
        return pulumi.get(self, "process_metadatas")

    @process_metadatas.setter
    def process_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionProcessMetadataArgs']]]]):
        pulumi.set(self, "process_metadatas", value)

    @property
    @pulumi.getter(name="serviceTopologies")
    def service_topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTopologyArgs']]]]:
        return pulumi.get(self, "service_topologies")

    @service_topologies.setter
    def service_topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTopologyArgs']]]]):
        pulumi.set(self, "service_topologies", value)

    @property
    @pulumi.getter(name="serviceTopologyComparisons")
    def service_topology_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTopologyComparisonArgs']]]]:
        return pulumi.get(self, "service_topology_comparisons")

    @service_topology_comparisons.setter
    def service_topology_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTopologyComparisonArgs']]]]):
        pulumi.set(self, "service_topology_comparisons", value)

    @property
    @pulumi.getter(name="serviceTypeComparisons")
    def service_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTypeComparisonArgs']]]]:
        return pulumi.get(self, "service_type_comparisons")

    @service_type_comparisons.setter
    def service_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTypeComparisonArgs']]]]):
        pulumi.set(self, "service_type_comparisons", value)

    @property
    @pulumi.getter(name="serviceTypes")
    def service_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTypeArgs']]]]:
        return pulumi.get(self, "service_types")

    @service_types.setter
    def service_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionServiceTypeArgs']]]]):
        pulumi.set(self, "service_types", value)

    @property
    @pulumi.getter(name="simpleHostTechComparisons")
    def simple_host_tech_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSimpleHostTechComparisonArgs']]]]:
        return pulumi.get(self, "simple_host_tech_comparisons")

    @simple_host_tech_comparisons.setter
    def simple_host_tech_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSimpleHostTechComparisonArgs']]]]):
        pulumi.set(self, "simple_host_tech_comparisons", value)

    @property
    @pulumi.getter(name="simpleTechComparisons")
    def simple_tech_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSimpleTechComparisonArgs']]]]:
        return pulumi.get(self, "simple_tech_comparisons")

    @simple_tech_comparisons.setter
    def simple_tech_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSimpleTechComparisonArgs']]]]):
        pulumi.set(self, "simple_tech_comparisons", value)

    @property
    @pulumi.getter(name="stringComparisons")
    def string_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringComparisonArgs']]]]:
        return pulumi.get(self, "string_comparisons")

    @string_comparisons.setter
    def string_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringComparisonArgs']]]]):
        pulumi.set(self, "string_comparisons", value)

    @property
    @pulumi.getter(name="stringConditionKeys")
    def string_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringConditionKeyArgs']]]]:
        return pulumi.get(self, "string_condition_keys")

    @string_condition_keys.setter
    def string_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringConditionKeyArgs']]]]):
        pulumi.set(self, "string_condition_keys", value)

    @property
    @pulumi.getter(name="stringKeys")
    def string_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringKeyArgs']]]]:
        return pulumi.get(self, "string_keys")

    @string_keys.setter
    def string_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringKeyArgs']]]]):
        pulumi.set(self, "string_keys", value)

    @property
    @pulumi.getter
    def strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringArgs']]]]:
        return pulumi.get(self, "strings")

    @strings.setter
    def strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionStringArgs']]]]):
        pulumi.set(self, "strings", value)

    @property
    @pulumi.getter(name="syntheticEngineTypeComparisons")
    def synthetic_engine_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSyntheticEngineTypeComparisonArgs']]]]:
        return pulumi.get(self, "synthetic_engine_type_comparisons")

    @synthetic_engine_type_comparisons.setter
    def synthetic_engine_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSyntheticEngineTypeComparisonArgs']]]]):
        pulumi.set(self, "synthetic_engine_type_comparisons", value)

    @property
    @pulumi.getter(name="syntheticEngines")
    def synthetic_engines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSyntheticEngineArgs']]]]:
        return pulumi.get(self, "synthetic_engines")

    @synthetic_engines.setter
    def synthetic_engines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionSyntheticEngineArgs']]]]):
        pulumi.set(self, "synthetic_engines", value)

    @property
    @pulumi.getter(name="tagComparisons")
    def tag_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionTagComparisonArgs']]]]:
        return pulumi.get(self, "tag_comparisons")

    @tag_comparisons.setter
    def tag_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionTagComparisonArgs']]]]):
        pulumi.set(self, "tag_comparisons", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def teches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionTechArgs']]]]:
        return pulumi.get(self, "teches")

    @teches.setter
    def teches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProcessgroupNamingConditionConditionTechArgs']]]]):
        pulumi.set(self, "teches", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionApplicationTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionApplicationTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionAzureComputeModeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionAzureComputeModeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionAzureSkuComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionAzureSkusArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionBaseComparisonBasicArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionBaseConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionBitnessArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionBitnessComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCloudTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCloudTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionComparisonArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCustomApplicationTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCustomApplicationTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCustomHostMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKeyArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs'],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCustomProcessMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKeyArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs'],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionDatabaseTopologyArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionDatabaseTopologyComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionDcrumDecoderArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionDcrumDecoderComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionEntityArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionEntityIdComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionHostTechArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionHostTechValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ProcessgroupNamingConditionConditionHostTechValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionHostTechValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionHostTechValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionHypervisorArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionHypervisorTypeComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIndexedNameArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIndexedNameComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIndexedStringArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIndexedStringComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIndexedTagArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIndexedTagComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionIndexedTagComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIndexedTagComparisonValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIndexedTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIntegerArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIntegerComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIpaddressArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionIpaddressComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionMobilePlatformArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionMobilePlatformComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionOsArchArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionOsTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionOsarchitectureComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionOstypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionPaasTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionPaasTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionProcessMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionProcessMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionServiceTopologyArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionServiceTopologyComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionServiceTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionServiceTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionSimpleHostTechComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionSimpleHostTechComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ProcessgroupNamingConditionConditionSimpleHostTechComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionSimpleHostTechComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionSimpleHostTechComparisonValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionSimpleTechComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionSimpleTechComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ProcessgroupNamingConditionConditionSimpleTechComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionSimpleTechComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionSimpleTechComparisonValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionStringArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionStringComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionStringConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionStringKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionSyntheticEngineArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionSyntheticEngineTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionTagArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionTagValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ProcessgroupNamingConditionConditionTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionTagComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionTagComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ProcessgroupNamingConditionConditionTagComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionTagComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionTagComparisonValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionTechArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionTechValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ProcessgroupNamingConditionConditionTechValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ProcessgroupNamingConditionConditionTechValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ProcessgroupNamingConditionConditionTechValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class QueueManagerAliasQueueArgs:
    def __init__(__self__, *,
                 alias_queues: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueAliasQueueArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueAliasQueueArgs']]] alias_queues: Alias queue definitions for queue manager
        """
        if alias_queues is not None:
            pulumi.set(__self__, "alias_queues", alias_queues)

    @property
    @pulumi.getter(name="aliasQueues")
    def alias_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueAliasQueueArgs']]]]:
        """
        Alias queue definitions for queue manager
        """
        return pulumi.get(self, "alias_queues")

    @alias_queues.setter
    def alias_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerAliasQueueAliasQueueArgs']]]]):
        pulumi.set(self, "alias_queues", value)


@pulumi.input_type
class QueueManagerAliasQueueAliasQueueArgs:
    def __init__(__self__, *,
                 alias_queue_name: pulumi.Input[str],
                 base_queue_name: pulumi.Input[str],
                 cluster_visibilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "alias_queue_name", alias_queue_name)
        pulumi.set(__self__, "base_queue_name", base_queue_name)
        if cluster_visibilities is not None:
            pulumi.set(__self__, "cluster_visibilities", cluster_visibilities)

    @property
    @pulumi.getter(name="aliasQueueName")
    def alias_queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alias_queue_name")

    @alias_queue_name.setter
    def alias_queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "alias_queue_name", value)

    @property
    @pulumi.getter(name="baseQueueName")
    def base_queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "base_queue_name")

    @base_queue_name.setter
    def base_queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_queue_name", value)

    @property
    @pulumi.getter(name="clusterVisibilities")
    def cluster_visibilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cluster_visibilities")

    @cluster_visibilities.setter
    def cluster_visibilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_visibilities", value)


@pulumi.input_type
class QueueManagerClusterQueueArgs:
    def __init__(__self__, *,
                 cluster_queues: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueClusterQueueArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueClusterQueueArgs']]] cluster_queues: Cluster queue definitions for queue manager
        """
        if cluster_queues is not None:
            pulumi.set(__self__, "cluster_queues", cluster_queues)

    @property
    @pulumi.getter(name="clusterQueues")
    def cluster_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueClusterQueueArgs']]]]:
        """
        Cluster queue definitions for queue manager
        """
        return pulumi.get(self, "cluster_queues")

    @cluster_queues.setter
    def cluster_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerClusterQueueClusterQueueArgs']]]]):
        pulumi.set(self, "cluster_queues", value)


@pulumi.input_type
class QueueManagerClusterQueueClusterQueueArgs:
    def __init__(__self__, *,
                 local_queue_name: pulumi.Input[str],
                 cluster_visibilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "local_queue_name", local_queue_name)
        if cluster_visibilities is not None:
            pulumi.set(__self__, "cluster_visibilities", cluster_visibilities)

    @property
    @pulumi.getter(name="localQueueName")
    def local_queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "local_queue_name")

    @local_queue_name.setter
    def local_queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_queue_name", value)

    @property
    @pulumi.getter(name="clusterVisibilities")
    def cluster_visibilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cluster_visibilities")

    @cluster_visibilities.setter
    def cluster_visibilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_visibilities", value)


@pulumi.input_type
class QueueManagerRemoteQueueArgs:
    def __init__(__self__, *,
                 remote_queues: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueRemoteQueueArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueRemoteQueueArgs']]] remote_queues: Remote queue definitions for queue manager
        """
        if remote_queues is not None:
            pulumi.set(__self__, "remote_queues", remote_queues)

    @property
    @pulumi.getter(name="remoteQueues")
    def remote_queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueRemoteQueueArgs']]]]:
        """
        Remote queue definitions for queue manager
        """
        return pulumi.get(self, "remote_queues")

    @remote_queues.setter
    def remote_queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QueueManagerRemoteQueueRemoteQueueArgs']]]]):
        pulumi.set(self, "remote_queues", value)


@pulumi.input_type
class QueueManagerRemoteQueueRemoteQueueArgs:
    def __init__(__self__, *,
                 local_queue_name: pulumi.Input[str],
                 remote_queue_manager: pulumi.Input[str],
                 remote_queue_name: pulumi.Input[str],
                 cluster_visibilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "local_queue_name", local_queue_name)
        pulumi.set(__self__, "remote_queue_manager", remote_queue_manager)
        pulumi.set(__self__, "remote_queue_name", remote_queue_name)
        if cluster_visibilities is not None:
            pulumi.set(__self__, "cluster_visibilities", cluster_visibilities)

    @property
    @pulumi.getter(name="localQueueName")
    def local_queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "local_queue_name")

    @local_queue_name.setter
    def local_queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "local_queue_name", value)

    @property
    @pulumi.getter(name="remoteQueueManager")
    def remote_queue_manager(self) -> pulumi.Input[str]:
        return pulumi.get(self, "remote_queue_manager")

    @remote_queue_manager.setter
    def remote_queue_manager(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_queue_manager", value)

    @property
    @pulumi.getter(name="remoteQueueName")
    def remote_queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "remote_queue_name")

    @remote_queue_name.setter
    def remote_queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "remote_queue_name", value)

    @property
    @pulumi.getter(name="clusterVisibilities")
    def cluster_visibilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cluster_visibilities")

    @cluster_visibilities.setter
    def cluster_visibilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_visibilities", value)


@pulumi.input_type
class RequestAttributeDataSourceArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 source: pulumi.Input[str],
                 capturing_and_storage_location: Optional[pulumi.Input[str]] = None,
                 cics_sdk_method_node_condition: Optional[pulumi.Input['RequestAttributeDataSourceCicsSdkMethodNodeConditionArgs']] = None,
                 iib_label_method_node_condition: Optional[pulumi.Input['RequestAttributeDataSourceIibLabelMethodNodeConditionArgs']] = None,
                 iib_method_node_condition: Optional[pulumi.Input['RequestAttributeDataSourceIibMethodNodeConditionArgs']] = None,
                 iib_node_type: Optional[pulumi.Input[str]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input['RequestAttributeDataSourceMethodArgs']]]] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input['RequestAttributeDataSourceScopeArgs']] = None,
                 session_attribute_technology: Optional[pulumi.Input[str]] = None,
                 technology: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value_processing: Optional[pulumi.Input['RequestAttributeDataSourceValueProcessingArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: The data source is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] source: The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**
        :param pulumi.Input[str] capturing_and_storage_location: Specifies the location where the values are captured and stored.  Required if the **source** is one of the following: `GET_PARAMETER`, `URI`, `REQUEST_HEADER`, `RESPONSE_HEADER`.   Not applicable in other cases.   If the **source** value is `REQUEST_HEADER` or `RESPONSE_HEADER`, the `CAPTURE_AND_STORE_ON_BOTH` location is not allowed
        :param pulumi.Input['RequestAttributeDataSourceCicsSdkMethodNodeConditionArgs'] cics_sdk_method_node_condition: IBM integration bus label node name condition for which the value is captured
        :param pulumi.Input['RequestAttributeDataSourceIibLabelMethodNodeConditionArgs'] iib_label_method_node_condition: IBM integration bus label node name condition for which the value is captured
        :param pulumi.Input['RequestAttributeDataSourceIibMethodNodeConditionArgs'] iib_method_node_condition: IBM integration bus label node name condition for which the value is captured
        :param pulumi.Input[str] iib_node_type: The IBM integration bus node type for which the value is captured.  This or `iibMethodNodeCondition` is required if the **source** is: `IIB_NODE`.  Not applicable in other cases
        :param pulumi.Input[Sequence[pulumi.Input['RequestAttributeDataSourceMethodArgs']]] methods: The method specification if the **source** value is `METHOD_PARAM`.   Not applicable in other cases
        :param pulumi.Input[str] parameter_name: The name of the web request parameter to capture.  Required if the **source** is one of the following: `POST_PARAMETER`, `GET_PARAMETER`, `REQUEST_HEADER`, `RESPONSE_HEADER`, `CUSTOM_ATTRIBUTE`.  Not applicable in other cases
        :param pulumi.Input['RequestAttributeDataSourceScopeArgs'] scope: Conditions for data capturing
        :param pulumi.Input[str] session_attribute_technology: The technology of the session attribute to capture if the **source** value is `SESSION_ATTRIBUTE`.
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "source", source)
        if capturing_and_storage_location is not None:
            pulumi.set(__self__, "capturing_and_storage_location", capturing_and_storage_location)
        if cics_sdk_method_node_condition is not None:
            pulumi.set(__self__, "cics_sdk_method_node_condition", cics_sdk_method_node_condition)
        if iib_label_method_node_condition is not None:
            pulumi.set(__self__, "iib_label_method_node_condition", iib_label_method_node_condition)
        if iib_method_node_condition is not None:
            pulumi.set(__self__, "iib_method_node_condition", iib_method_node_condition)
        if iib_node_type is not None:
            pulumi.set(__self__, "iib_node_type", iib_node_type)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if session_attribute_technology is not None:
            pulumi.set(__self__, "session_attribute_technology", session_attribute_technology)
        if technology is not None:
            pulumi.set(__self__, "technology", technology)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value_processing is not None:
            pulumi.set(__self__, "value_processing", value_processing)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        The data source is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="capturingAndStorageLocation")
    def capturing_and_storage_location(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the location where the values are captured and stored.  Required if the **source** is one of the following: `GET_PARAMETER`, `URI`, `REQUEST_HEADER`, `RESPONSE_HEADER`.   Not applicable in other cases.   If the **source** value is `REQUEST_HEADER` or `RESPONSE_HEADER`, the `CAPTURE_AND_STORE_ON_BOTH` location is not allowed
        """
        return pulumi.get(self, "capturing_and_storage_location")

    @capturing_and_storage_location.setter
    def capturing_and_storage_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capturing_and_storage_location", value)

    @property
    @pulumi.getter(name="cicsSdkMethodNodeCondition")
    def cics_sdk_method_node_condition(self) -> Optional[pulumi.Input['RequestAttributeDataSourceCicsSdkMethodNodeConditionArgs']]:
        """
        IBM integration bus label node name condition for which the value is captured
        """
        return pulumi.get(self, "cics_sdk_method_node_condition")

    @cics_sdk_method_node_condition.setter
    def cics_sdk_method_node_condition(self, value: Optional[pulumi.Input['RequestAttributeDataSourceCicsSdkMethodNodeConditionArgs']]):
        pulumi.set(self, "cics_sdk_method_node_condition", value)

    @property
    @pulumi.getter(name="iibLabelMethodNodeCondition")
    def iib_label_method_node_condition(self) -> Optional[pulumi.Input['RequestAttributeDataSourceIibLabelMethodNodeConditionArgs']]:
        """
        IBM integration bus label node name condition for which the value is captured
        """
        return pulumi.get(self, "iib_label_method_node_condition")

    @iib_label_method_node_condition.setter
    def iib_label_method_node_condition(self, value: Optional[pulumi.Input['RequestAttributeDataSourceIibLabelMethodNodeConditionArgs']]):
        pulumi.set(self, "iib_label_method_node_condition", value)

    @property
    @pulumi.getter(name="iibMethodNodeCondition")
    def iib_method_node_condition(self) -> Optional[pulumi.Input['RequestAttributeDataSourceIibMethodNodeConditionArgs']]:
        """
        IBM integration bus label node name condition for which the value is captured
        """
        return pulumi.get(self, "iib_method_node_condition")

    @iib_method_node_condition.setter
    def iib_method_node_condition(self, value: Optional[pulumi.Input['RequestAttributeDataSourceIibMethodNodeConditionArgs']]):
        pulumi.set(self, "iib_method_node_condition", value)

    @property
    @pulumi.getter(name="iibNodeType")
    def iib_node_type(self) -> Optional[pulumi.Input[str]]:
        """
        The IBM integration bus node type for which the value is captured.  This or `iibMethodNodeCondition` is required if the **source** is: `IIB_NODE`.  Not applicable in other cases
        """
        return pulumi.get(self, "iib_node_type")

    @iib_node_type.setter
    def iib_node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iib_node_type", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RequestAttributeDataSourceMethodArgs']]]]:
        """
        The method specification if the **source** value is `METHOD_PARAM`.   Not applicable in other cases
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RequestAttributeDataSourceMethodArgs']]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the web request parameter to capture.  Required if the **source** is one of the following: `POST_PARAMETER`, `GET_PARAMETER`, `REQUEST_HEADER`, `RESPONSE_HEADER`, `CUSTOM_ATTRIBUTE`.  Not applicable in other cases
        """
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['RequestAttributeDataSourceScopeArgs']]:
        """
        Conditions for data capturing
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['RequestAttributeDataSourceScopeArgs']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sessionAttributeTechnology")
    def session_attribute_technology(self) -> Optional[pulumi.Input[str]]:
        """
        The technology of the session attribute to capture if the **source** value is `SESSION_ATTRIBUTE`.
        """
        return pulumi.get(self, "session_attribute_technology")

    @session_attribute_technology.setter
    def session_attribute_technology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_attribute_technology", value)

    @property
    @pulumi.getter
    def technology(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "technology")

    @technology.setter
    def technology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "technology", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="valueProcessing")
    def value_processing(self) -> Optional[pulumi.Input['RequestAttributeDataSourceValueProcessingArgs']]:
        return pulumi.get(self, "value_processing")

    @value_processing.setter
    def value_processing(self, value: Optional[pulumi.Input['RequestAttributeDataSourceValueProcessingArgs']]):
        pulumi.set(self, "value_processing", value)


@pulumi.input_type
class RequestAttributeDataSourceCicsSdkMethodNodeConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestAttributeDataSourceIibLabelMethodNodeConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestAttributeDataSourceIibMethodNodeConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestAttributeDataSourceMethodArgs:
    def __init__(__self__, *,
                 capture: pulumi.Input[str],
                 argument_index: Optional[pulumi.Input[int]] = None,
                 deep_object_access: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input['RequestAttributeDataSourceMethodMethodArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "capture", capture)
        if argument_index is not None:
            pulumi.set(__self__, "argument_index", argument_index)
        if deep_object_access is not None:
            pulumi.set(__self__, "deep_object_access", deep_object_access)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def capture(self) -> pulumi.Input[str]:
        return pulumi.get(self, "capture")

    @capture.setter
    def capture(self, value: pulumi.Input[str]):
        pulumi.set(self, "capture", value)

    @property
    @pulumi.getter(name="argumentIndex")
    def argument_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "argument_index")

    @argument_index.setter
    def argument_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "argument_index", value)

    @property
    @pulumi.getter(name="deepObjectAccess")
    def deep_object_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deep_object_access")

    @deep_object_access.setter
    def deep_object_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deep_object_access", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input['RequestAttributeDataSourceMethodMethodArgs']]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input['RequestAttributeDataSourceMethodMethodArgs']]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestAttributeDataSourceMethodMethodArgs:
    def __init__(__self__, *,
                 method_name: pulumi.Input[str],
                 return_type: pulumi.Input[str],
                 visibility: pulumi.Input[str],
                 argument_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 class_name: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 file_name_matcher: Optional[pulumi.Input[str]] = None,
                 modifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "method_name", method_name)
        pulumi.set(__self__, "return_type", return_type)
        pulumi.set(__self__, "visibility", visibility)
        if argument_types is not None:
            pulumi.set(__self__, "argument_types", argument_types)
        if class_name is not None:
            pulumi.set(__self__, "class_name", class_name)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if file_name_matcher is not None:
            pulumi.set(__self__, "file_name_matcher", file_name_matcher)
        if modifiers is not None:
            pulumi.set(__self__, "modifiers", modifiers)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="methodName")
    def method_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method_name")

    @method_name.setter
    def method_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "method_name", value)

    @property
    @pulumi.getter(name="returnType")
    def return_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "return_type")

    @return_type.setter
    def return_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "return_type", value)

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: pulumi.Input[str]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter(name="argumentTypes")
    def argument_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "argument_types")

    @argument_types.setter
    def argument_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "argument_types", value)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_name", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="fileNameMatcher")
    def file_name_matcher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_name_matcher")

    @file_name_matcher.setter
    def file_name_matcher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name_matcher", value)

    @property
    @pulumi.getter
    def modifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "modifiers")

    @modifiers.setter
    def modifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "modifiers", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestAttributeDataSourceScopeArgs:
    def __init__(__self__, *,
                 host_group: Optional[pulumi.Input[str]] = None,
                 process_group: Optional[pulumi.Input[str]] = None,
                 service_technology: Optional[pulumi.Input[str]] = None,
                 tag_of_process_group: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if host_group is not None:
            pulumi.set(__self__, "host_group", host_group)
        if process_group is not None:
            pulumi.set(__self__, "process_group", process_group)
        if service_technology is not None:
            pulumi.set(__self__, "service_technology", service_technology)
        if tag_of_process_group is not None:
            pulumi.set(__self__, "tag_of_process_group", tag_of_process_group)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="hostGroup")
    def host_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_group")

    @host_group.setter
    def host_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_group", value)

    @property
    @pulumi.getter(name="processGroup")
    def process_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "process_group")

    @process_group.setter
    def process_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_group", value)

    @property
    @pulumi.getter(name="serviceTechnology")
    def service_technology(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_technology")

    @service_technology.setter
    def service_technology(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_technology", value)

    @property
    @pulumi.getter(name="tagOfProcessGroup")
    def tag_of_process_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_of_process_group")

    @tag_of_process_group.setter
    def tag_of_process_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_of_process_group", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestAttributeDataSourceValueProcessingArgs:
    def __init__(__self__, *,
                 extract_substring: Optional[pulumi.Input['RequestAttributeDataSourceValueProcessingExtractSubstringArgs']] = None,
                 split_at: Optional[pulumi.Input[str]] = None,
                 trim: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value_condition: Optional[pulumi.Input['RequestAttributeDataSourceValueProcessingValueConditionArgs']] = None,
                 value_extractor_regex: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        if extract_substring is not None:
            pulumi.set(__self__, "extract_substring", extract_substring)
        if split_at is not None:
            pulumi.set(__self__, "split_at", split_at)
        if trim is not None:
            pulumi.set(__self__, "trim", trim)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value_condition is not None:
            pulumi.set(__self__, "value_condition", value_condition)
        if value_extractor_regex is not None:
            pulumi.set(__self__, "value_extractor_regex", value_extractor_regex)

    @property
    @pulumi.getter(name="extractSubstring")
    def extract_substring(self) -> Optional[pulumi.Input['RequestAttributeDataSourceValueProcessingExtractSubstringArgs']]:
        return pulumi.get(self, "extract_substring")

    @extract_substring.setter
    def extract_substring(self, value: Optional[pulumi.Input['RequestAttributeDataSourceValueProcessingExtractSubstringArgs']]):
        pulumi.set(self, "extract_substring", value)

    @property
    @pulumi.getter(name="splitAt")
    def split_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_at")

    @split_at.setter
    def split_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_at", value)

    @property
    @pulumi.getter
    def trim(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trim")

    @trim.setter
    def trim(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trim", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="valueCondition")
    def value_condition(self) -> Optional[pulumi.Input['RequestAttributeDataSourceValueProcessingValueConditionArgs']]:
        return pulumi.get(self, "value_condition")

    @value_condition.setter
    def value_condition(self, value: Optional[pulumi.Input['RequestAttributeDataSourceValueProcessingValueConditionArgs']]):
        pulumi.set(self, "value_condition", value)

    @property
    @pulumi.getter(name="valueExtractorRegex")
    def value_extractor_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_extractor_regex")

    @value_extractor_regex.setter
    def value_extractor_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_extractor_regex", value)


@pulumi.input_type
class RequestAttributeDataSourceValueProcessingExtractSubstringArgs:
    def __init__(__self__, *,
                 delimiter: pulumi.Input[str],
                 position: pulumi.Input[str],
                 end_delimiter: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "position", position)
        if end_delimiter is not None:
            pulumi.set(__self__, "end_delimiter", end_delimiter)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter
    def position(self) -> pulumi.Input[str]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: pulumi.Input[str]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="endDelimiter")
    def end_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_delimiter")

    @end_delimiter.setter
    def end_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_delimiter", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestAttributeDataSourceValueProcessingValueConditionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 value: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] unknowns: allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "value", value)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        """
        allows for configuring properties that are not explicitly supported by the current version of this provider
        """
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestNamingConditionsArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['RequestNamingConditionsConditionArgs']]]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RequestNamingConditionsConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RequestNamingConditionsConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class RequestNamingConditionsConditionArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 comparison: pulumi.Input['RequestNamingConditionsConditionComparisonArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "comparison", comparison)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input['RequestNamingConditionsConditionComparisonArgs']:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input['RequestNamingConditionsConditionComparisonArgs']):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonArgs:
    def __init__(__self__, *,
                 boolean: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonBooleanArgs']] = None,
                 esb_input_node_type: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonEsbInputNodeTypeArgs']] = None,
                 failed_state: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFailedStateArgs']] = None,
                 failure_reason: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFailureReasonArgs']] = None,
                 fast_string: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFastStringArgs']] = None,
                 flaw_state: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFlawStateArgs']] = None,
                 generic: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonGenericArgs']] = None,
                 http_method: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonHttpMethodArgs']] = None,
                 http_status_class: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonHttpStatusClassArgs']] = None,
                 iib_input_node_type: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonIibInputNodeTypeArgs']] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 number: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberArgs']] = None,
                 number_request_attribute: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeArgs']] = None,
                 service_type: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonServiceTypeArgs']] = None,
                 string: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringArgs']] = None,
                 string_request_attribute: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeArgs']] = None,
                 tag: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonTagArgs']] = None,
                 zos_call_type: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonZosCallTypeArgs']] = None):
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if esb_input_node_type is not None:
            pulumi.set(__self__, "esb_input_node_type", esb_input_node_type)
        if failed_state is not None:
            pulumi.set(__self__, "failed_state", failed_state)
        if failure_reason is not None:
            pulumi.set(__self__, "failure_reason", failure_reason)
        if fast_string is not None:
            pulumi.set(__self__, "fast_string", fast_string)
        if flaw_state is not None:
            pulumi.set(__self__, "flaw_state", flaw_state)
        if generic is not None:
            pulumi.set(__self__, "generic", generic)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if http_status_class is not None:
            pulumi.set(__self__, "http_status_class", http_status_class)
        if iib_input_node_type is not None:
            pulumi.set(__self__, "iib_input_node_type", iib_input_node_type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if number is not None:
            pulumi.set(__self__, "number", number)
        if number_request_attribute is not None:
            pulumi.set(__self__, "number_request_attribute", number_request_attribute)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if string is not None:
            pulumi.set(__self__, "string", string)
        if string_request_attribute is not None:
            pulumi.set(__self__, "string_request_attribute", string_request_attribute)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)
        if zos_call_type is not None:
            pulumi.set(__self__, "zos_call_type", zos_call_type)

    @property
    @pulumi.getter
    def boolean(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonBooleanArgs']]:
        return pulumi.get(self, "boolean")

    @boolean.setter
    def boolean(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonBooleanArgs']]):
        pulumi.set(self, "boolean", value)

    @property
    @pulumi.getter(name="esbInputNodeType")
    def esb_input_node_type(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonEsbInputNodeTypeArgs']]:
        return pulumi.get(self, "esb_input_node_type")

    @esb_input_node_type.setter
    def esb_input_node_type(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonEsbInputNodeTypeArgs']]):
        pulumi.set(self, "esb_input_node_type", value)

    @property
    @pulumi.getter(name="failedState")
    def failed_state(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFailedStateArgs']]:
        return pulumi.get(self, "failed_state")

    @failed_state.setter
    def failed_state(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFailedStateArgs']]):
        pulumi.set(self, "failed_state", value)

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFailureReasonArgs']]:
        return pulumi.get(self, "failure_reason")

    @failure_reason.setter
    def failure_reason(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFailureReasonArgs']]):
        pulumi.set(self, "failure_reason", value)

    @property
    @pulumi.getter(name="fastString")
    def fast_string(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFastStringArgs']]:
        return pulumi.get(self, "fast_string")

    @fast_string.setter
    def fast_string(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFastStringArgs']]):
        pulumi.set(self, "fast_string", value)

    @property
    @pulumi.getter(name="flawState")
    def flaw_state(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFlawStateArgs']]:
        return pulumi.get(self, "flaw_state")

    @flaw_state.setter
    def flaw_state(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonFlawStateArgs']]):
        pulumi.set(self, "flaw_state", value)

    @property
    @pulumi.getter
    def generic(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonGenericArgs']]:
        return pulumi.get(self, "generic")

    @generic.setter
    def generic(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonGenericArgs']]):
        pulumi.set(self, "generic", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonHttpMethodArgs']]:
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonHttpMethodArgs']]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="httpStatusClass")
    def http_status_class(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonHttpStatusClassArgs']]:
        return pulumi.get(self, "http_status_class")

    @http_status_class.setter
    def http_status_class(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonHttpStatusClassArgs']]):
        pulumi.set(self, "http_status_class", value)

    @property
    @pulumi.getter(name="iibInputNodeType")
    def iib_input_node_type(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonIibInputNodeTypeArgs']]:
        return pulumi.get(self, "iib_input_node_type")

    @iib_input_node_type.setter
    def iib_input_node_type(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonIibInputNodeTypeArgs']]):
        pulumi.set(self, "iib_input_node_type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def number(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberArgs']]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberArgs']]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter(name="numberRequestAttribute")
    def number_request_attribute(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeArgs']]:
        return pulumi.get(self, "number_request_attribute")

    @number_request_attribute.setter
    def number_request_attribute(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeArgs']]):
        pulumi.set(self, "number_request_attribute", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonServiceTypeArgs']]:
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonServiceTypeArgs']]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter
    def string(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringArgs']]:
        return pulumi.get(self, "string")

    @string.setter
    def string(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringArgs']]):
        pulumi.set(self, "string", value)

    @property
    @pulumi.getter(name="stringRequestAttribute")
    def string_request_attribute(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeArgs']]:
        return pulumi.get(self, "string_request_attribute")

    @string_request_attribute.setter
    def string_request_attribute(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeArgs']]):
        pulumi.set(self, "string_request_attribute", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonTagArgs']]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonTagArgs']]):
        pulumi.set(self, "tag", value)

    @property
    @pulumi.getter(name="zosCallType")
    def zos_call_type(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonZosCallTypeArgs']]:
        return pulumi.get(self, "zos_call_type")

    @zos_call_type.setter
    def zos_call_type(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonZosCallTypeArgs']]):
        pulumi.set(self, "zos_call_type", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonBooleanArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool],
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None):
        pulumi.set(__self__, "value", value)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonEsbInputNodeTypeArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonFailedStateArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonFailureReasonArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonFastStringArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonFlawStateArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonGenericArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonHttpMethodArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonHttpStatusClassArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonIibInputNodeTypeArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonNumberArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonNumberRequestAttributeArgs:
    def __init__(__self__, *,
                 request_attribute: pulumi.Input[str],
                 match_on_child_calls: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        pulumi.set(__self__, "request_attribute", request_attribute)
        if match_on_child_calls is not None:
            pulumi.set(__self__, "match_on_child_calls", match_on_child_calls)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="requestAttribute")
    def request_attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "request_attribute")

    @request_attribute.setter
    def request_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_attribute", value)

    @property
    @pulumi.getter(name="matchOnChildCalls")
    def match_on_child_calls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_on_child_calls")

    @match_on_child_calls.setter
    def match_on_child_calls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_on_child_calls", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceArgs']]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceArgs:
    def __init__(__self__, *,
                 management_zone: Optional[pulumi.Input[str]] = None,
                 service_tag: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if management_zone is not None:
            pulumi.set(__self__, "management_zone", management_zone)
        if service_tag is not None:
            pulumi.set(__self__, "service_tag", service_tag)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="managementZone")
    def management_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_zone")

    @management_zone.setter
    def management_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_zone", value)

    @property
    @pulumi.getter(name="serviceTag")
    def service_tag(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagArgs']]:
        return pulumi.get(self, "service_tag")

    @service_tag.setter
    def service_tag(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagArgs']]):
        pulumi.set(self, "service_tag", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 context: Optional[pulumi.Input[str]] = None,
                 tag_key: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyArgs']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyArgs']]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyArgs']]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKeyArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        if context is not None:
            pulumi.set(__self__, "context", context)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonServiceTypeArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonStringArgs:
    def __init__(__self__, *,
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonStringRequestAttributeArgs:
    def __init__(__self__, *,
                 request_attribute: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 match_on_child_calls: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeSourceArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "request_attribute", request_attribute)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if match_on_child_calls is not None:
            pulumi.set(__self__, "match_on_child_calls", match_on_child_calls)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="requestAttribute")
    def request_attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "request_attribute")

    @request_attribute.setter
    def request_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_attribute", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="matchOnChildCalls")
    def match_on_child_calls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_on_child_calls")

    @match_on_child_calls.setter
    def match_on_child_calls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_on_child_calls", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeSourceArgs']]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonStringRequestAttributeSourceArgs:
    def __init__(__self__, *,
                 management_zone: Optional[pulumi.Input[str]] = None,
                 service_tag: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if management_zone is not None:
            pulumi.set(__self__, "management_zone", management_zone)
        if service_tag is not None:
            pulumi.set(__self__, "service_tag", service_tag)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="managementZone")
    def management_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_zone")

    @management_zone.setter
    def management_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_zone", value)

    @property
    @pulumi.getter(name="serviceTag")
    def service_tag(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagArgs']]:
        return pulumi.get(self, "service_tag")

    @service_tag.setter
    def service_tag(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagArgs']]):
        pulumi.set(self, "service_tag", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 context: Optional[pulumi.Input[str]] = None,
                 tag_key: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyArgs']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyArgs']]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyArgs']]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKeyArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        if context is not None:
            pulumi.set(__self__, "context", context)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonTagArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonTagValueArgs']] = None,
                 values: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonTagValuesArgs']] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonTagValueArgs']]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input['RequestNamingConditionsConditionComparisonTagValuesArgs']]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input['RequestNamingConditionsConditionComparisonTagValuesArgs']]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonTagValuesArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['RequestNamingConditionsConditionComparisonTagValuesValueArgs']]]] = None):
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RequestNamingConditionsConditionComparisonTagValuesValueArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RequestNamingConditionsConditionComparisonTagValuesValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonTagValuesValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RequestNamingConditionsConditionComparisonZosCallTypeArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RequestNamingPlaceholdersArgs:
    def __init__(__self__, *,
                 placeholders: Optional[pulumi.Input[Sequence[pulumi.Input['RequestNamingPlaceholdersPlaceholderArgs']]]] = None):
        if placeholders is not None:
            pulumi.set(__self__, "placeholders", placeholders)

    @property
    @pulumi.getter
    def placeholders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RequestNamingPlaceholdersPlaceholderArgs']]]]:
        return pulumi.get(self, "placeholders")

    @placeholders.setter
    def placeholders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RequestNamingPlaceholdersPlaceholderArgs']]]]):
        pulumi.set(self, "placeholders", value)


@pulumi.input_type
class RequestNamingPlaceholdersPlaceholderArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 delimiter_or_regex: Optional[pulumi.Input[str]] = None,
                 end_delimiter: Optional[pulumi.Input[str]] = None,
                 normalization: Optional[pulumi.Input[str]] = None,
                 request_attribute: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input['RequestNamingPlaceholdersPlaceholderSourceArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 use_from_child_calls: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if delimiter_or_regex is not None:
            pulumi.set(__self__, "delimiter_or_regex", delimiter_or_regex)
        if end_delimiter is not None:
            pulumi.set(__self__, "end_delimiter", end_delimiter)
        if normalization is not None:
            pulumi.set(__self__, "normalization", normalization)
        if request_attribute is not None:
            pulumi.set(__self__, "request_attribute", request_attribute)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if use_from_child_calls is not None:
            pulumi.set(__self__, "use_from_child_calls", use_from_child_calls)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="delimiterOrRegex")
    def delimiter_or_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter_or_regex")

    @delimiter_or_regex.setter
    def delimiter_or_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter_or_regex", value)

    @property
    @pulumi.getter(name="endDelimiter")
    def end_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_delimiter")

    @end_delimiter.setter
    def end_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_delimiter", value)

    @property
    @pulumi.getter
    def normalization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "normalization")

    @normalization.setter
    def normalization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "normalization", value)

    @property
    @pulumi.getter(name="requestAttribute")
    def request_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_attribute")

    @request_attribute.setter
    def request_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_attribute", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['RequestNamingPlaceholdersPlaceholderSourceArgs']]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['RequestNamingPlaceholdersPlaceholderSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="useFromChildCalls")
    def use_from_child_calls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_from_child_calls")

    @use_from_child_calls.setter
    def use_from_child_calls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_from_child_calls", value)


@pulumi.input_type
class RequestNamingPlaceholdersPlaceholderSourceArgs:
    def __init__(__self__, *,
                 management_zone: Optional[pulumi.Input[str]] = None,
                 service_tag: Optional[pulumi.Input['RequestNamingPlaceholdersPlaceholderSourceServiceTagArgs']] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if management_zone is not None:
            pulumi.set(__self__, "management_zone", management_zone)
        if service_tag is not None:
            pulumi.set(__self__, "service_tag", service_tag)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="managementZone")
    def management_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "management_zone")

    @management_zone.setter
    def management_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "management_zone", value)

    @property
    @pulumi.getter(name="serviceTag")
    def service_tag(self) -> Optional[pulumi.Input['RequestNamingPlaceholdersPlaceholderSourceServiceTagArgs']]:
        return pulumi.get(self, "service_tag")

    @service_tag.setter
    def service_tag(self, value: Optional[pulumi.Input['RequestNamingPlaceholdersPlaceholderSourceServiceTagArgs']]):
        pulumi.set(self, "service_tag", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class RequestNamingPlaceholdersPlaceholderSourceServiceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 context: Optional[pulumi.Input[str]] = None,
                 tag_key: Optional[pulumi.Input['RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKeyArgs']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input['RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKeyArgs']]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input['RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKeyArgs']]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKeyArgs:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        if context is not None:
            pulumi.set(__self__, "context", context)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ResourceAttributesKeysArgs:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceAttributesKeysRuleArgs']]]] = None):
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ResourceAttributesKeysRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ResourceAttributesKeysRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class ResourceAttributesKeysRuleArgs:
    def __init__(__self__, *,
                 attribute_key: pulumi.Input[str],
                 enabled: pulumi.Input[bool],
                 masking: pulumi.Input[str]):
        pulumi.set(__self__, "attribute_key", attribute_key)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "masking", masking)

    @property
    @pulumi.getter(name="attributeKey")
    def attribute_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_key")

    @attribute_key.setter
    def attribute_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_key", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def masking(self) -> pulumi.Input[str]:
        return pulumi.get(self, "masking")

    @masking.setter
    def masking(self, value: pulumi.Input[str]):
        pulumi.set(self, "masking", value)


@pulumi.input_type
class RumProviderBreakdownDomainNamePatternListArgs:
    def __init__(__self__, *,
                 domain_name_patterns: pulumi.Input[Sequence[pulumi.Input['RumProviderBreakdownDomainNamePatternListDomainNamePatternArgs']]]):
        pulumi.set(__self__, "domain_name_patterns", domain_name_patterns)

    @property
    @pulumi.getter(name="domainNamePatterns")
    def domain_name_patterns(self) -> pulumi.Input[Sequence[pulumi.Input['RumProviderBreakdownDomainNamePatternListDomainNamePatternArgs']]]:
        return pulumi.get(self, "domain_name_patterns")

    @domain_name_patterns.setter
    def domain_name_patterns(self, value: pulumi.Input[Sequence[pulumi.Input['RumProviderBreakdownDomainNamePatternListDomainNamePatternArgs']]]):
        pulumi.set(self, "domain_name_patterns", value)


@pulumi.input_type
class RumProviderBreakdownDomainNamePatternListDomainNamePatternArgs:
    def __init__(__self__, *,
                 pattern: pulumi.Input[str]):
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class ServiceAnomaliesFailureRatesArgs:
    def __init__(__self__, *,
                 auto: Optional[pulumi.Input['ServiceAnomaliesFailureRatesAutoArgs']] = None,
                 thresholds: Optional[pulumi.Input['ServiceAnomaliesFailureRatesThresholdsArgs']] = None):
        """
        :param pulumi.Input['ServiceAnomaliesFailureRatesAutoArgs'] auto: Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
        :param pulumi.Input['ServiceAnomaliesFailureRatesThresholdsArgs'] thresholds: Fixed thresholds for failure rate increase detection
        """
        if auto is not None:
            pulumi.set(__self__, "auto", auto)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def auto(self) -> Optional[pulumi.Input['ServiceAnomaliesFailureRatesAutoArgs']]:
        """
        Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
        """
        return pulumi.get(self, "auto")

    @auto.setter
    def auto(self, value: Optional[pulumi.Input['ServiceAnomaliesFailureRatesAutoArgs']]):
        pulumi.set(self, "auto", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['ServiceAnomaliesFailureRatesThresholdsArgs']]:
        """
        Fixed thresholds for failure rate increase detection
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['ServiceAnomaliesFailureRatesThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class ServiceAnomaliesFailureRatesAutoArgs:
    def __init__(__self__, *,
                 absolute: pulumi.Input[int],
                 relative: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "absolute", absolute)
        pulumi.set(__self__, "relative", relative)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def absolute(self) -> pulumi.Input[int]:
        return pulumi.get(self, "absolute")

    @absolute.setter
    def absolute(self, value: pulumi.Input[int]):
        pulumi.set(self, "absolute", value)

    @property
    @pulumi.getter
    def relative(self) -> pulumi.Input[int]:
        return pulumi.get(self, "relative")

    @relative.setter
    def relative(self, value: pulumi.Input[int]):
        pulumi.set(self, "relative", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceAnomaliesFailureRatesThresholdsArgs:
    def __init__(__self__, *,
                 sensitivity: pulumi.Input[str],
                 threshold: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sensitivity", sensitivity)
        pulumi.set(__self__, "threshold", threshold)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceAnomaliesLoadArgs:
    def __init__(__self__, *,
                 drops: Optional[pulumi.Input['ServiceAnomaliesLoadDropsArgs']] = None,
                 spikes: Optional[pulumi.Input['ServiceAnomaliesLoadSpikesArgs']] = None):
        """
        :param pulumi.Input['ServiceAnomaliesLoadDropsArgs'] drops: The configuration of traffic drops detection
        :param pulumi.Input['ServiceAnomaliesLoadSpikesArgs'] spikes: The configuration of traffic spikes detection
        """
        if drops is not None:
            pulumi.set(__self__, "drops", drops)
        if spikes is not None:
            pulumi.set(__self__, "spikes", spikes)

    @property
    @pulumi.getter
    def drops(self) -> Optional[pulumi.Input['ServiceAnomaliesLoadDropsArgs']]:
        """
        The configuration of traffic drops detection
        """
        return pulumi.get(self, "drops")

    @drops.setter
    def drops(self, value: Optional[pulumi.Input['ServiceAnomaliesLoadDropsArgs']]):
        pulumi.set(self, "drops", value)

    @property
    @pulumi.getter
    def spikes(self) -> Optional[pulumi.Input['ServiceAnomaliesLoadSpikesArgs']]:
        """
        The configuration of traffic spikes detection
        """
        return pulumi.get(self, "spikes")

    @spikes.setter
    def spikes(self, value: Optional[pulumi.Input['ServiceAnomaliesLoadSpikesArgs']]):
        pulumi.set(self, "spikes", value)


@pulumi.input_type
class ServiceAnomaliesLoadDropsArgs:
    def __init__(__self__, *,
                 minutes: Optional[pulumi.Input[int]] = None,
                 percent: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] minutes: Alert if the service stays in abnormal state for at least *X* minutes
        :param pulumi.Input[int] percent: Alert if the observed load is more than *X* % of the expected value
        """
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Alert if the service stays in abnormal state for at least *X* minutes
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[int]]:
        """
        Alert if the observed load is more than *X* % of the expected value
        """
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percent", value)


@pulumi.input_type
class ServiceAnomaliesLoadSpikesArgs:
    def __init__(__self__, *,
                 minutes: Optional[pulumi.Input[int]] = None,
                 percent: Optional[pulumi.Input[int]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percent", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceAnomaliesResponseTimesArgs:
    def __init__(__self__, *,
                 auto: Optional[pulumi.Input['ServiceAnomaliesResponseTimesAutoArgs']] = None,
                 thresholds: Optional[pulumi.Input['ServiceAnomaliesResponseTimesThresholdsArgs']] = None):
        """
        :param pulumi.Input['ServiceAnomaliesResponseTimesAutoArgs'] auto: Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
        :param pulumi.Input['ServiceAnomaliesResponseTimesThresholdsArgs'] thresholds: Fixed thresholds for response time degradation detection
        """
        if auto is not None:
            pulumi.set(__self__, "auto", auto)
        if thresholds is not None:
            pulumi.set(__self__, "thresholds", thresholds)

    @property
    @pulumi.getter
    def auto(self) -> Optional[pulumi.Input['ServiceAnomaliesResponseTimesAutoArgs']]:
        """
        Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
        """
        return pulumi.get(self, "auto")

    @auto.setter
    def auto(self, value: Optional[pulumi.Input['ServiceAnomaliesResponseTimesAutoArgs']]):
        pulumi.set(self, "auto", value)

    @property
    @pulumi.getter
    def thresholds(self) -> Optional[pulumi.Input['ServiceAnomaliesResponseTimesThresholdsArgs']]:
        """
        Fixed thresholds for response time degradation detection
        """
        return pulumi.get(self, "thresholds")

    @thresholds.setter
    def thresholds(self, value: Optional[pulumi.Input['ServiceAnomaliesResponseTimesThresholdsArgs']]):
        pulumi.set(self, "thresholds", value)


@pulumi.input_type
class ServiceAnomaliesResponseTimesAutoArgs:
    def __init__(__self__, *,
                 load: pulumi.Input[str],
                 milliseconds: pulumi.Input[int],
                 percent: pulumi.Input[int],
                 slowest_milliseconds: pulumi.Input[int],
                 slowest_percent: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] load: The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.
        """
        pulumi.set(__self__, "load", load)
        pulumi.set(__self__, "milliseconds", milliseconds)
        pulumi.set(__self__, "percent", percent)
        pulumi.set(__self__, "slowest_milliseconds", slowest_milliseconds)
        pulumi.set(__self__, "slowest_percent", slowest_percent)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def load(self) -> pulumi.Input[str]:
        """
        The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.
        """
        return pulumi.get(self, "load")

    @load.setter
    def load(self, value: pulumi.Input[str]):
        pulumi.set(self, "load", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def percent(self) -> pulumi.Input[int]:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: pulumi.Input[int]):
        pulumi.set(self, "percent", value)

    @property
    @pulumi.getter(name="slowestMilliseconds")
    def slowest_milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "slowest_milliseconds")

    @slowest_milliseconds.setter
    def slowest_milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "slowest_milliseconds", value)

    @property
    @pulumi.getter(name="slowestPercent")
    def slowest_percent(self) -> pulumi.Input[int]:
        return pulumi.get(self, "slowest_percent")

    @slowest_percent.setter
    def slowest_percent(self, value: pulumi.Input[int]):
        pulumi.set(self, "slowest_percent", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceAnomaliesResponseTimesThresholdsArgs:
    def __init__(__self__, *,
                 load: pulumi.Input[str],
                 milliseconds: pulumi.Input[int],
                 sensitivity: pulumi.Input[str],
                 slowest_milliseconds: pulumi.Input[int],
                 unknowns: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] load: The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.
        """
        pulumi.set(__self__, "load", load)
        pulumi.set(__self__, "milliseconds", milliseconds)
        pulumi.set(__self__, "sensitivity", sensitivity)
        pulumi.set(__self__, "slowest_milliseconds", slowest_milliseconds)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def load(self) -> pulumi.Input[str]:
        """
        The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.
        """
        return pulumi.get(self, "load")

    @load.setter
    def load(self, value: pulumi.Input[str]):
        pulumi.set(self, "load", value)

    @property
    @pulumi.getter
    def milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "milliseconds")

    @milliseconds.setter
    def milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "milliseconds", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter(name="slowestMilliseconds")
    def slowest_milliseconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "slowest_milliseconds")

    @slowest_milliseconds.setter
    def slowest_milliseconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "slowest_milliseconds", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceAnomaliesV2FailureRateArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 auto_detection: Optional[pulumi.Input['ServiceAnomaliesV2FailureRateAutoDetectionArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None,
                 fixed_detection: Optional[pulumi.Input['ServiceAnomaliesV2FailureRateFixedDetectionArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Detect increases in failure rate
        :param pulumi.Input['ServiceAnomaliesV2FailureRateAutoDetectionArgs'] auto_detection: . Alert if the percentage of failing service calls increases by **both** the absolute and relative thresholds:
        :param pulumi.Input[str] detection_mode: Detection mode for increases in failure rate
        :param pulumi.Input['ServiceAnomaliesV2FailureRateFixedDetectionArgs'] fixed_detection: . Alert if a given failure rate is exceeded during any 5-minute-period
        """
        pulumi.set(__self__, "enabled", enabled)
        if auto_detection is not None:
            pulumi.set(__self__, "auto_detection", auto_detection)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if fixed_detection is not None:
            pulumi.set(__self__, "fixed_detection", fixed_detection)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect increases in failure rate
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="autoDetection")
    def auto_detection(self) -> Optional[pulumi.Input['ServiceAnomaliesV2FailureRateAutoDetectionArgs']]:
        """
        . Alert if the percentage of failing service calls increases by **both** the absolute and relative thresholds:
        """
        return pulumi.get(self, "auto_detection")

    @auto_detection.setter
    def auto_detection(self, value: Optional[pulumi.Input['ServiceAnomaliesV2FailureRateAutoDetectionArgs']]):
        pulumi.set(self, "auto_detection", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Detection mode for increases in failure rate
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)

    @property
    @pulumi.getter(name="fixedDetection")
    def fixed_detection(self) -> Optional[pulumi.Input['ServiceAnomaliesV2FailureRateFixedDetectionArgs']]:
        """
        . Alert if a given failure rate is exceeded during any 5-minute-period
        """
        return pulumi.get(self, "fixed_detection")

    @fixed_detection.setter
    def fixed_detection(self, value: Optional[pulumi.Input['ServiceAnomaliesV2FailureRateFixedDetectionArgs']]):
        pulumi.set(self, "fixed_detection", value)


@pulumi.input_type
class ServiceAnomaliesV2FailureRateAutoDetectionArgs:
    def __init__(__self__, *,
                 absolute_increase: pulumi.Input[float],
                 over_alerting_protection: pulumi.Input['ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtectionArgs'],
                 relative_increase: pulumi.Input[float]):
        pulumi.set(__self__, "absolute_increase", absolute_increase)
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "relative_increase", relative_increase)

    @property
    @pulumi.getter(name="absoluteIncrease")
    def absolute_increase(self) -> pulumi.Input[float]:
        return pulumi.get(self, "absolute_increase")

    @absolute_increase.setter
    def absolute_increase(self, value: pulumi.Input[float]):
        pulumi.set(self, "absolute_increase", value)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter(name="relativeIncrease")
    def relative_increase(self) -> pulumi.Input[float]:
        return pulumi.get(self, "relative_increase")

    @relative_increase.setter
    def relative_increase(self, value: pulumi.Input[float]):
        pulumi.set(self, "relative_increase", value)


@pulumi.input_type
class ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 minutes_abnormal_state: pulumi.Input[int],
                 requests_per_minute: pulumi.Input[float]):
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)
        pulumi.set(__self__, "requests_per_minute", requests_per_minute)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[int]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes_abnormal_state", value)

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "requests_per_minute")

    @requests_per_minute.setter
    def requests_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "requests_per_minute", value)


@pulumi.input_type
class ServiceAnomaliesV2FailureRateFixedDetectionArgs:
    def __init__(__self__, *,
                 over_alerting_protection: pulumi.Input['ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtectionArgs'],
                 sensitivity: pulumi.Input[str],
                 threshold: pulumi.Input[float]):
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "sensitivity", sensitivity)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 minutes_abnormal_state: pulumi.Input[int],
                 requests_per_minute: pulumi.Input[float]):
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)
        pulumi.set(__self__, "requests_per_minute", requests_per_minute)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[int]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes_abnormal_state", value)

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "requests_per_minute")

    @requests_per_minute.setter
    def requests_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "requests_per_minute", value)


@pulumi.input_type
class ServiceAnomaliesV2LoadDropsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 load_drop_percent: Optional[pulumi.Input[float]] = None,
                 minutes_abnormal_state: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Detect service load drops
        :param pulumi.Input[float] load_drop_percent: Threshold
        :param pulumi.Input[int] minutes_abnormal_state: Time span
        """
        pulumi.set(__self__, "enabled", enabled)
        if load_drop_percent is not None:
            pulumi.set(__self__, "load_drop_percent", load_drop_percent)
        if minutes_abnormal_state is not None:
            pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect service load drops
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="loadDropPercent")
    def load_drop_percent(self) -> Optional[pulumi.Input[float]]:
        """
        Threshold
        """
        return pulumi.get(self, "load_drop_percent")

    @load_drop_percent.setter
    def load_drop_percent(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "load_drop_percent", value)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> Optional[pulumi.Input[int]]:
        """
        Time span
        """
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes_abnormal_state", value)


@pulumi.input_type
class ServiceAnomaliesV2LoadSpikesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 load_spike_percent: Optional[pulumi.Input[float]] = None,
                 minutes_abnormal_state: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] enabled: Detect service load spikes
        :param pulumi.Input[float] load_spike_percent: Threshold
        :param pulumi.Input[int] minutes_abnormal_state: Time span
        """
        pulumi.set(__self__, "enabled", enabled)
        if load_spike_percent is not None:
            pulumi.set(__self__, "load_spike_percent", load_spike_percent)
        if minutes_abnormal_state is not None:
            pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect service load spikes
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="loadSpikePercent")
    def load_spike_percent(self) -> Optional[pulumi.Input[float]]:
        """
        Threshold
        """
        return pulumi.get(self, "load_spike_percent")

    @load_spike_percent.setter
    def load_spike_percent(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "load_spike_percent", value)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> Optional[pulumi.Input[int]]:
        """
        Time span
        """
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minutes_abnormal_state", value)


@pulumi.input_type
class ServiceAnomaliesV2ResponseTimeArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 auto_detection: Optional[pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None,
                 fixed_detection: Optional[pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Detect response time degradations
        :param pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionArgs'] auto_detection: No documentation available
        :param pulumi.Input[str] detection_mode: Detection mode for response time degradations
        :param pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionArgs'] fixed_detection: No documentation available
        """
        pulumi.set(__self__, "enabled", enabled)
        if auto_detection is not None:
            pulumi.set(__self__, "auto_detection", auto_detection)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if fixed_detection is not None:
            pulumi.set(__self__, "fixed_detection", fixed_detection)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Detect response time degradations
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="autoDetection")
    def auto_detection(self) -> Optional[pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionArgs']]:
        """
        No documentation available
        """
        return pulumi.get(self, "auto_detection")

    @auto_detection.setter
    def auto_detection(self, value: Optional[pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionArgs']]):
        pulumi.set(self, "auto_detection", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Detection mode for response time degradations
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)

    @property
    @pulumi.getter(name="fixedDetection")
    def fixed_detection(self) -> Optional[pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionArgs']]:
        """
        No documentation available
        """
        return pulumi.get(self, "fixed_detection")

    @fixed_detection.setter
    def fixed_detection(self, value: Optional[pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionArgs']]):
        pulumi.set(self, "fixed_detection", value)


@pulumi.input_type
class ServiceAnomaliesV2ResponseTimeAutoDetectionArgs:
    def __init__(__self__, *,
                 over_alerting_protection: pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtectionArgs'],
                 response_time_all: pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAllArgs'],
                 response_time_slowest: pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowestArgs']):
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "response_time_all", response_time_all)
        pulumi.set(__self__, "response_time_slowest", response_time_slowest)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter(name="responseTimeAll")
    def response_time_all(self) -> pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAllArgs']:
        return pulumi.get(self, "response_time_all")

    @response_time_all.setter
    def response_time_all(self, value: pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAllArgs']):
        pulumi.set(self, "response_time_all", value)

    @property
    @pulumi.getter(name="responseTimeSlowest")
    def response_time_slowest(self) -> pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowestArgs']:
        return pulumi.get(self, "response_time_slowest")

    @response_time_slowest.setter
    def response_time_slowest(self, value: pulumi.Input['ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowestArgs']):
        pulumi.set(self, "response_time_slowest", value)


@pulumi.input_type
class ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 minutes_abnormal_state: pulumi.Input[int],
                 requests_per_minute: pulumi.Input[float]):
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)
        pulumi.set(__self__, "requests_per_minute", requests_per_minute)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[int]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes_abnormal_state", value)

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "requests_per_minute")

    @requests_per_minute.setter
    def requests_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "requests_per_minute", value)


@pulumi.input_type
class ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAllArgs:
    def __init__(__self__, *,
                 degradation_milliseconds: pulumi.Input[float],
                 degradation_percent: pulumi.Input[float]):
        pulumi.set(__self__, "degradation_milliseconds", degradation_milliseconds)
        pulumi.set(__self__, "degradation_percent", degradation_percent)

    @property
    @pulumi.getter(name="degradationMilliseconds")
    def degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "degradation_milliseconds")

    @degradation_milliseconds.setter
    def degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "degradation_milliseconds", value)

    @property
    @pulumi.getter(name="degradationPercent")
    def degradation_percent(self) -> pulumi.Input[float]:
        return pulumi.get(self, "degradation_percent")

    @degradation_percent.setter
    def degradation_percent(self, value: pulumi.Input[float]):
        pulumi.set(self, "degradation_percent", value)


@pulumi.input_type
class ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowestArgs:
    def __init__(__self__, *,
                 slowest_degradation_milliseconds: pulumi.Input[float],
                 slowest_degradation_percent: pulumi.Input[float]):
        pulumi.set(__self__, "slowest_degradation_milliseconds", slowest_degradation_milliseconds)
        pulumi.set(__self__, "slowest_degradation_percent", slowest_degradation_percent)

    @property
    @pulumi.getter(name="slowestDegradationMilliseconds")
    def slowest_degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowest_degradation_milliseconds")

    @slowest_degradation_milliseconds.setter
    def slowest_degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowest_degradation_milliseconds", value)

    @property
    @pulumi.getter(name="slowestDegradationPercent")
    def slowest_degradation_percent(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowest_degradation_percent")

    @slowest_degradation_percent.setter
    def slowest_degradation_percent(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowest_degradation_percent", value)


@pulumi.input_type
class ServiceAnomaliesV2ResponseTimeFixedDetectionArgs:
    def __init__(__self__, *,
                 over_alerting_protection: pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtectionArgs'],
                 response_time_all: pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAllArgs'],
                 response_time_slowest: pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowestArgs'],
                 sensitivity: pulumi.Input[str]):
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "response_time_all", response_time_all)
        pulumi.set(__self__, "response_time_slowest", response_time_slowest)
        pulumi.set(__self__, "sensitivity", sensitivity)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter(name="responseTimeAll")
    def response_time_all(self) -> pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAllArgs']:
        return pulumi.get(self, "response_time_all")

    @response_time_all.setter
    def response_time_all(self, value: pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAllArgs']):
        pulumi.set(self, "response_time_all", value)

    @property
    @pulumi.getter(name="responseTimeSlowest")
    def response_time_slowest(self) -> pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowestArgs']:
        return pulumi.get(self, "response_time_slowest")

    @response_time_slowest.setter
    def response_time_slowest(self, value: pulumi.Input['ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowestArgs']):
        pulumi.set(self, "response_time_slowest", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)


@pulumi.input_type
class ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 minutes_abnormal_state: pulumi.Input[int],
                 requests_per_minute: pulumi.Input[float]):
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)
        pulumi.set(__self__, "requests_per_minute", requests_per_minute)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[int]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes_abnormal_state", value)

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "requests_per_minute")

    @requests_per_minute.setter
    def requests_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "requests_per_minute", value)


@pulumi.input_type
class ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAllArgs:
    def __init__(__self__, *,
                 degradation_milliseconds: pulumi.Input[float]):
        pulumi.set(__self__, "degradation_milliseconds", degradation_milliseconds)

    @property
    @pulumi.getter(name="degradationMilliseconds")
    def degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "degradation_milliseconds")

    @degradation_milliseconds.setter
    def degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "degradation_milliseconds", value)


@pulumi.input_type
class ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowestArgs:
    def __init__(__self__, *,
                 slowest_degradation_milliseconds: pulumi.Input[float]):
        pulumi.set(__self__, "slowest_degradation_milliseconds", slowest_degradation_milliseconds)

    @property
    @pulumi.getter(name="slowestDegradationMilliseconds")
    def slowest_degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowest_degradation_milliseconds")

    @slowest_degradation_milliseconds.setter
    def slowest_degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowest_degradation_milliseconds", value)


@pulumi.input_type
class ServiceExternalWebRequestConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestConditionsConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ServiceExternalWebRequestConditionsConditionArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 compare_operation_type: pulumi.Input[str],
                 frameworks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 int_value: Optional[pulumi.Input[int]] = None,
                 int_values: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ip_range_from: Optional[pulumi.Input[str]] = None,
                 ip_range_to: Optional[pulumi.Input[str]] = None,
                 tag_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "compare_operation_type", compare_operation_type)
        if frameworks is not None:
            pulumi.set(__self__, "frameworks", frameworks)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if int_values is not None:
            pulumi.set(__self__, "int_values", int_values)
        if ip_range_from is not None:
            pulumi.set(__self__, "ip_range_from", ip_range_from)
        if ip_range_to is not None:
            pulumi.set(__self__, "ip_range_to", ip_range_to)
        if tag_values is not None:
            pulumi.set(__self__, "tag_values", tag_values)
        if text_values is not None:
            pulumi.set(__self__, "text_values", text_values)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="compareOperationType")
    def compare_operation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compare_operation_type")

    @compare_operation_type.setter
    def compare_operation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "compare_operation_type", value)

    @property
    @pulumi.getter
    def frameworks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "frameworks")

    @frameworks.setter
    def frameworks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "frameworks", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="intValues")
    def int_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "int_values")

    @int_values.setter
    def int_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "int_values", value)

    @property
    @pulumi.getter(name="ipRangeFrom")
    def ip_range_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range_from")

    @ip_range_from.setter
    def ip_range_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range_from", value)

    @property
    @pulumi.getter(name="ipRangeTo")
    def ip_range_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range_to")

    @ip_range_to.setter
    def ip_range_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range_to", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_values", value)

    @property
    @pulumi.getter(name="textValues")
    def text_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "text_values")

    @text_values.setter
    def text_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "text_values", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdArgs'],
                 context_root: pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootArgs'],
                 port_for_service_id: pulumi.Input[bool],
                 public_domain_name: pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameArgs']):
        """
        :param pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdArgs'] application_id: Application identifier
        :param pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootArgs'] context_root: URL context root
        :param pulumi.Input[bool] port_for_service_id: Let the Port contribute to the Service Id
        :param pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameArgs'] public_domain_name: Public domain name
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "context_root", context_root)
        pulumi.set(__self__, "port_for_service_id", port_for_service_id)
        pulumi.set(__self__, "public_domain_name", public_domain_name)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdArgs']:
        """
        Application identifier
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdArgs']):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootArgs']:
        """
        URL context root
        """
        return pulumi.get(self, "context_root")

    @context_root.setter
    def context_root(self, value: pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootArgs']):
        pulumi.set(self, "context_root", value)

    @property
    @pulumi.getter(name="portForServiceId")
    def port_for_service_id(self) -> pulumi.Input[bool]:
        """
        Let the Port contribute to the Service Id
        """
        return pulumi.get(self, "port_for_service_id")

    @port_for_service_id.setter
    def port_for_service_id(self, value: pulumi.Input[bool]):
        pulumi.set(self, "port_for_service_id", value)

    @property
    @pulumi.getter(name="publicDomainName")
    def public_domain_name(self) -> pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameArgs']:
        """
        Public domain name
        """
        return pulumi.get(self, "public_domain_name")

    @public_domain_name.setter
    def public_domain_name(self, value: pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameArgs']):
        pulumi.set(self, "public_domain_name", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsApplicationIdArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 transformations: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 segment_count: Optional[pulumi.Input[int]] = None,
                 select_index: Optional[pulumi.Input[int]] = None,
                 split_delimiter: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 take_from_end: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if select_index is not None:
            pulumi.set(__self__, "select_index", select_index)
        if split_delimiter is not None:
            pulumi.set(__self__, "split_delimiter", split_delimiter)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if take_from_end is not None:
            pulumi.set(__self__, "take_from_end", take_from_end)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter(name="selectIndex")
    def select_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "select_index")

    @select_index.setter
    def select_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "select_index", value)

    @property
    @pulumi.getter(name="splitDelimiter")
    def split_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_delimiter")

    @split_delimiter.setter
    def split_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_delimiter", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="takeFromEnd")
    def take_from_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "take_from_end")

    @take_from_end.setter
    def take_from_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_from_end", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsContextRootArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 segment_count: Optional[pulumi.Input[int]] = None,
                 transformations: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsPublicDomainNameArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 copy_from_host_name: Optional[pulumi.Input[bool]] = None,
                 transformations: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if copy_from_host_name is not None:
            pulumi.set(__self__, "copy_from_host_name", copy_from_host_name)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter(name="copyFromHostName")
    def copy_from_host_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "copy_from_host_name")

    @copy_from_host_name.setter
    def copy_from_host_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "copy_from_host_name", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 segment_count: Optional[pulumi.Input[int]] = None,
                 select_index: Optional[pulumi.Input[int]] = None,
                 split_delimiter: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 take_from_end: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if select_index is not None:
            pulumi.set(__self__, "select_index", select_index)
        if split_delimiter is not None:
            pulumi.set(__self__, "split_delimiter", split_delimiter)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if take_from_end is not None:
            pulumi.set(__self__, "take_from_end", take_from_end)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter(name="selectIndex")
    def select_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "select_index")

    @select_index.setter
    def select_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "select_index", value)

    @property
    @pulumi.getter(name="splitDelimiter")
    def split_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_delimiter")

    @split_delimiter.setter
    def split_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_delimiter", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="takeFromEnd")
    def take_from_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "take_from_end")

    @take_from_end.setter
    def take_from_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_from_end", value)


@pulumi.input_type
class ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceExternalWebServiceConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebServiceConditionsConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebServiceConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebServiceConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ServiceExternalWebServiceConditionsConditionArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 compare_operation_type: pulumi.Input[str],
                 frameworks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 int_value: Optional[pulumi.Input[int]] = None,
                 int_values: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ip_range_from: Optional[pulumi.Input[str]] = None,
                 ip_range_to: Optional[pulumi.Input[str]] = None,
                 tag_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "compare_operation_type", compare_operation_type)
        if frameworks is not None:
            pulumi.set(__self__, "frameworks", frameworks)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if int_values is not None:
            pulumi.set(__self__, "int_values", int_values)
        if ip_range_from is not None:
            pulumi.set(__self__, "ip_range_from", ip_range_from)
        if ip_range_to is not None:
            pulumi.set(__self__, "ip_range_to", ip_range_to)
        if tag_values is not None:
            pulumi.set(__self__, "tag_values", tag_values)
        if text_values is not None:
            pulumi.set(__self__, "text_values", text_values)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="compareOperationType")
    def compare_operation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compare_operation_type")

    @compare_operation_type.setter
    def compare_operation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "compare_operation_type", value)

    @property
    @pulumi.getter
    def frameworks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "frameworks")

    @frameworks.setter
    def frameworks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "frameworks", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="intValues")
    def int_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "int_values")

    @int_values.setter
    def int_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "int_values", value)

    @property
    @pulumi.getter(name="ipRangeFrom")
    def ip_range_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range_from")

    @ip_range_from.setter
    def ip_range_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range_from", value)

    @property
    @pulumi.getter(name="ipRangeTo")
    def ip_range_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range_to")

    @ip_range_to.setter
    def ip_range_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range_to", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_values", value)

    @property
    @pulumi.getter(name="textValues")
    def text_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "text_values")

    @text_values.setter
    def text_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "text_values", value)


@pulumi.input_type
class ServiceExternalWebServiceIdContributorsArgs:
    def __init__(__self__, *,
                 detect_as_web_request_service: pulumi.Input[bool],
                 port_for_service_id: Optional[pulumi.Input[bool]] = None,
                 url_path: Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathArgs']] = None):
        """
        :param pulumi.Input[bool] detect_as_web_request_service: Detect the matching requests as web request services instead of web services.
        """
        pulumi.set(__self__, "detect_as_web_request_service", detect_as_web_request_service)
        if port_for_service_id is not None:
            pulumi.set(__self__, "port_for_service_id", port_for_service_id)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @property
    @pulumi.getter(name="detectAsWebRequestService")
    def detect_as_web_request_service(self) -> pulumi.Input[bool]:
        """
        Detect the matching requests as web request services instead of web services.
        """
        return pulumi.get(self, "detect_as_web_request_service")

    @detect_as_web_request_service.setter
    def detect_as_web_request_service(self, value: pulumi.Input[bool]):
        pulumi.set(self, "detect_as_web_request_service", value)

    @property
    @pulumi.getter(name="portForServiceId")
    def port_for_service_id(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "port_for_service_id")

    @port_for_service_id.setter
    def port_for_service_id(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "port_for_service_id", value)

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathArgs']]:
        return pulumi.get(self, "url_path")

    @url_path.setter
    def url_path(self, value: Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathArgs']]):
        pulumi.set(self, "url_path", value)


@pulumi.input_type
class ServiceExternalWebServiceIdContributorsUrlPathArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 transformations: Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 segment_count: Optional[pulumi.Input[int]] = None,
                 select_index: Optional[pulumi.Input[int]] = None,
                 split_delimiter: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 take_from_end: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if select_index is not None:
            pulumi.set(__self__, "select_index", select_index)
        if split_delimiter is not None:
            pulumi.set(__self__, "split_delimiter", split_delimiter)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if take_from_end is not None:
            pulumi.set(__self__, "take_from_end", take_from_end)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter(name="selectIndex")
    def select_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "select_index")

    @select_index.setter
    def select_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "select_index", value)

    @property
    @pulumi.getter(name="splitDelimiter")
    def split_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_delimiter")

    @split_delimiter.setter
    def split_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_delimiter", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="takeFromEnd")
    def take_from_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "take_from_end")

    @take_from_end.setter
    def take_from_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_from_end", value)


@pulumi.input_type
class ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceFailureExceptionRulesArgs:
    def __init__(__self__, *,
                 ignore_all_exceptions: pulumi.Input[bool],
                 ignore_span_failure_detection: pulumi.Input[bool],
                 custom_error_rules: Optional[pulumi.Input['ServiceFailureExceptionRulesCustomErrorRulesArgs']] = None,
                 custom_handled_exceptions: Optional[pulumi.Input['ServiceFailureExceptionRulesCustomHandledExceptionsArgs']] = None,
                 ignored_exceptions: Optional[pulumi.Input['ServiceFailureExceptionRulesIgnoredExceptionsArgs']] = None,
                 success_forcing_exceptions: Optional[pulumi.Input['ServiceFailureExceptionRulesSuccessForcingExceptionsArgs']] = None):
        """
        :param pulumi.Input[bool] ignore_all_exceptions: Ignore all exceptions
        :param pulumi.Input[bool] ignore_span_failure_detection: Ignore span failure detection
        :param pulumi.Input['ServiceFailureExceptionRulesCustomErrorRulesArgs'] custom_error_rules: Some custom error situations are only detectable via a return value or other means. To support such cases, [define a request attribute](https://dt-url.net/ys5k0p4y) that captures the required data. Then define a custom error rule that determines if the request has failed based on the value of the request attribute.
        :param pulumi.Input['ServiceFailureExceptionRulesCustomHandledExceptionsArgs'] custom_handled_exceptions: There may be situations where your application code handles exceptions gracefully in a manner that these failures aren't detected by Dynatrace. Use this setting to define specific gracefully-handled exceptions that should be treated as service failures.
        :param pulumi.Input['ServiceFailureExceptionRulesIgnoredExceptionsArgs'] ignored_exceptions: Some exceptions that are thrown by legacy or 3rd-party code indicate a specific response, not an error. Use this setting to instruct Dynatrace to treat such exceptions as non-failed requests.. If an exception matching any of the defined patterns occurs in a request, it will not be considered as a failure. Other exceptions occurring at the same request might still mark the request as failed.
        :param pulumi.Input['ServiceFailureExceptionRulesSuccessForcingExceptionsArgs'] success_forcing_exceptions: Define exceptions which indicate that a service call should not be considered as failed. E.g. an exception indicating that the client aborted the operation.. If an exception matching any of the defined patterns occurs on the entry node of the service, it will be considered successful. Compared to ignored exceptions, the request will be considered successful even if other exceptions occur in the same request.
        """
        pulumi.set(__self__, "ignore_all_exceptions", ignore_all_exceptions)
        pulumi.set(__self__, "ignore_span_failure_detection", ignore_span_failure_detection)
        if custom_error_rules is not None:
            pulumi.set(__self__, "custom_error_rules", custom_error_rules)
        if custom_handled_exceptions is not None:
            pulumi.set(__self__, "custom_handled_exceptions", custom_handled_exceptions)
        if ignored_exceptions is not None:
            pulumi.set(__self__, "ignored_exceptions", ignored_exceptions)
        if success_forcing_exceptions is not None:
            pulumi.set(__self__, "success_forcing_exceptions", success_forcing_exceptions)

    @property
    @pulumi.getter(name="ignoreAllExceptions")
    def ignore_all_exceptions(self) -> pulumi.Input[bool]:
        """
        Ignore all exceptions
        """
        return pulumi.get(self, "ignore_all_exceptions")

    @ignore_all_exceptions.setter
    def ignore_all_exceptions(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ignore_all_exceptions", value)

    @property
    @pulumi.getter(name="ignoreSpanFailureDetection")
    def ignore_span_failure_detection(self) -> pulumi.Input[bool]:
        """
        Ignore span failure detection
        """
        return pulumi.get(self, "ignore_span_failure_detection")

    @ignore_span_failure_detection.setter
    def ignore_span_failure_detection(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ignore_span_failure_detection", value)

    @property
    @pulumi.getter(name="customErrorRules")
    def custom_error_rules(self) -> Optional[pulumi.Input['ServiceFailureExceptionRulesCustomErrorRulesArgs']]:
        """
        Some custom error situations are only detectable via a return value or other means. To support such cases, [define a request attribute](https://dt-url.net/ys5k0p4y) that captures the required data. Then define a custom error rule that determines if the request has failed based on the value of the request attribute.
        """
        return pulumi.get(self, "custom_error_rules")

    @custom_error_rules.setter
    def custom_error_rules(self, value: Optional[pulumi.Input['ServiceFailureExceptionRulesCustomErrorRulesArgs']]):
        pulumi.set(self, "custom_error_rules", value)

    @property
    @pulumi.getter(name="customHandledExceptions")
    def custom_handled_exceptions(self) -> Optional[pulumi.Input['ServiceFailureExceptionRulesCustomHandledExceptionsArgs']]:
        """
        There may be situations where your application code handles exceptions gracefully in a manner that these failures aren't detected by Dynatrace. Use this setting to define specific gracefully-handled exceptions that should be treated as service failures.
        """
        return pulumi.get(self, "custom_handled_exceptions")

    @custom_handled_exceptions.setter
    def custom_handled_exceptions(self, value: Optional[pulumi.Input['ServiceFailureExceptionRulesCustomHandledExceptionsArgs']]):
        pulumi.set(self, "custom_handled_exceptions", value)

    @property
    @pulumi.getter(name="ignoredExceptions")
    def ignored_exceptions(self) -> Optional[pulumi.Input['ServiceFailureExceptionRulesIgnoredExceptionsArgs']]:
        """
        Some exceptions that are thrown by legacy or 3rd-party code indicate a specific response, not an error. Use this setting to instruct Dynatrace to treat such exceptions as non-failed requests.. If an exception matching any of the defined patterns occurs in a request, it will not be considered as a failure. Other exceptions occurring at the same request might still mark the request as failed.
        """
        return pulumi.get(self, "ignored_exceptions")

    @ignored_exceptions.setter
    def ignored_exceptions(self, value: Optional[pulumi.Input['ServiceFailureExceptionRulesIgnoredExceptionsArgs']]):
        pulumi.set(self, "ignored_exceptions", value)

    @property
    @pulumi.getter(name="successForcingExceptions")
    def success_forcing_exceptions(self) -> Optional[pulumi.Input['ServiceFailureExceptionRulesSuccessForcingExceptionsArgs']]:
        """
        Define exceptions which indicate that a service call should not be considered as failed. E.g. an exception indicating that the client aborted the operation.. If an exception matching any of the defined patterns occurs on the entry node of the service, it will be considered successful. Compared to ignored exceptions, the request will be considered successful even if other exceptions occur in the same request.
        """
        return pulumi.get(self, "success_forcing_exceptions")

    @success_forcing_exceptions.setter
    def success_forcing_exceptions(self, value: Optional[pulumi.Input['ServiceFailureExceptionRulesSuccessForcingExceptionsArgs']]):
        pulumi.set(self, "success_forcing_exceptions", value)


@pulumi.input_type
class ServiceFailureExceptionRulesCustomErrorRulesArgs:
    def __init__(__self__, *,
                 custom_error_rules: pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleArgs']]]):
        pulumi.set(__self__, "custom_error_rules", custom_error_rules)

    @property
    @pulumi.getter(name="customErrorRules")
    def custom_error_rules(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleArgs']]]:
        return pulumi.get(self, "custom_error_rules")

    @custom_error_rules.setter
    def custom_error_rules(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleArgs']]]):
        pulumi.set(self, "custom_error_rules", value)


@pulumi.input_type
class ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input['ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleConditionArgs'],
                 request_attribute: pulumi.Input[str]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "request_attribute", request_attribute)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleConditionArgs']:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleConditionArgs']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="requestAttribute")
    def request_attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "request_attribute")

    @request_attribute.setter
    def request_attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_attribute", value)


@pulumi.input_type
class ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleConditionArgs:
    def __init__(__self__, *,
                 compare_operation_type: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 int_value: Optional[pulumi.Input[int]] = None,
                 text_value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "compare_operation_type", compare_operation_type)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if double_value is not None:
            pulumi.set(__self__, "double_value", double_value)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if text_value is not None:
            pulumi.set(__self__, "text_value", text_value)

    @property
    @pulumi.getter(name="compareOperationType")
    def compare_operation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compare_operation_type")

    @compare_operation_type.setter
    def compare_operation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "compare_operation_type", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="textValue")
    def text_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_value")

    @text_value.setter
    def text_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_value", value)


@pulumi.input_type
class ServiceFailureExceptionRulesCustomHandledExceptionsArgs:
    def __init__(__self__, *,
                 custom_handled_exceptions: pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(__self__, "custom_handled_exceptions", custom_handled_exceptions)

    @property
    @pulumi.getter(name="customHandledExceptions")
    def custom_handled_exceptions(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledExceptionArgs']]]:
        return pulumi.get(self, "custom_handled_exceptions")

    @custom_handled_exceptions.setter
    def custom_handled_exceptions(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(self, "custom_handled_exceptions", value)


@pulumi.input_type
class ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledExceptionArgs:
    def __init__(__self__, *,
                 class_pattern: Optional[pulumi.Input[str]] = None,
                 message_pattern: Optional[pulumi.Input[str]] = None):
        if class_pattern is not None:
            pulumi.set(__self__, "class_pattern", class_pattern)
        if message_pattern is not None:
            pulumi.set(__self__, "message_pattern", message_pattern)

    @property
    @pulumi.getter(name="classPattern")
    def class_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_pattern")

    @class_pattern.setter
    def class_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_pattern", value)

    @property
    @pulumi.getter(name="messagePattern")
    def message_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_pattern")

    @message_pattern.setter
    def message_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_pattern", value)


@pulumi.input_type
class ServiceFailureExceptionRulesIgnoredExceptionsArgs:
    def __init__(__self__, *,
                 custom_handled_exceptions: pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(__self__, "custom_handled_exceptions", custom_handled_exceptions)

    @property
    @pulumi.getter(name="customHandledExceptions")
    def custom_handled_exceptions(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledExceptionArgs']]]:
        return pulumi.get(self, "custom_handled_exceptions")

    @custom_handled_exceptions.setter
    def custom_handled_exceptions(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(self, "custom_handled_exceptions", value)


@pulumi.input_type
class ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledExceptionArgs:
    def __init__(__self__, *,
                 class_pattern: Optional[pulumi.Input[str]] = None,
                 message_pattern: Optional[pulumi.Input[str]] = None):
        if class_pattern is not None:
            pulumi.set(__self__, "class_pattern", class_pattern)
        if message_pattern is not None:
            pulumi.set(__self__, "message_pattern", message_pattern)

    @property
    @pulumi.getter(name="classPattern")
    def class_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_pattern")

    @class_pattern.setter
    def class_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_pattern", value)

    @property
    @pulumi.getter(name="messagePattern")
    def message_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_pattern")

    @message_pattern.setter
    def message_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_pattern", value)


@pulumi.input_type
class ServiceFailureExceptionRulesSuccessForcingExceptionsArgs:
    def __init__(__self__, *,
                 custom_handled_exceptions: pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(__self__, "custom_handled_exceptions", custom_handled_exceptions)

    @property
    @pulumi.getter(name="customHandledExceptions")
    def custom_handled_exceptions(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledExceptionArgs']]]:
        return pulumi.get(self, "custom_handled_exceptions")

    @custom_handled_exceptions.setter
    def custom_handled_exceptions(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledExceptionArgs']]]):
        pulumi.set(self, "custom_handled_exceptions", value)


@pulumi.input_type
class ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledExceptionArgs:
    def __init__(__self__, *,
                 class_pattern: Optional[pulumi.Input[str]] = None,
                 message_pattern: Optional[pulumi.Input[str]] = None):
        if class_pattern is not None:
            pulumi.set(__self__, "class_pattern", class_pattern)
        if message_pattern is not None:
            pulumi.set(__self__, "message_pattern", message_pattern)

    @property
    @pulumi.getter(name="classPattern")
    def class_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_pattern")

    @class_pattern.setter
    def class_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_pattern", value)

    @property
    @pulumi.getter(name="messagePattern")
    def message_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_pattern")

    @message_pattern.setter
    def message_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_pattern", value)


@pulumi.input_type
class ServiceFullWebRequestConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestConditionsConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ServiceFullWebRequestConditionsConditionArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 compare_operation_type: pulumi.Input[str],
                 frameworks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 int_value: Optional[pulumi.Input[int]] = None,
                 int_values: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ip_range_from: Optional[pulumi.Input[str]] = None,
                 ip_range_to: Optional[pulumi.Input[str]] = None,
                 tag_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "compare_operation_type", compare_operation_type)
        if frameworks is not None:
            pulumi.set(__self__, "frameworks", frameworks)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if int_values is not None:
            pulumi.set(__self__, "int_values", int_values)
        if ip_range_from is not None:
            pulumi.set(__self__, "ip_range_from", ip_range_from)
        if ip_range_to is not None:
            pulumi.set(__self__, "ip_range_to", ip_range_to)
        if tag_values is not None:
            pulumi.set(__self__, "tag_values", tag_values)
        if text_values is not None:
            pulumi.set(__self__, "text_values", text_values)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="compareOperationType")
    def compare_operation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compare_operation_type")

    @compare_operation_type.setter
    def compare_operation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "compare_operation_type", value)

    @property
    @pulumi.getter
    def frameworks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "frameworks")

    @frameworks.setter
    def frameworks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "frameworks", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="intValues")
    def int_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "int_values")

    @int_values.setter
    def int_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "int_values", value)

    @property
    @pulumi.getter(name="ipRangeFrom")
    def ip_range_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range_from")

    @ip_range_from.setter
    def ip_range_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range_from", value)

    @property
    @pulumi.getter(name="ipRangeTo")
    def ip_range_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range_to")

    @ip_range_to.setter
    def ip_range_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range_to", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_values", value)

    @property
    @pulumi.getter(name="textValues")
    def text_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "text_values")

    @text_values.setter
    def text_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "text_values", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdArgs'],
                 context_root: pulumi.Input['ServiceFullWebRequestIdContributorsContextRootArgs'],
                 server_name: pulumi.Input['ServiceFullWebRequestIdContributorsServerNameArgs']):
        """
        :param pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdArgs'] application_id: Application identifier
        :param pulumi.Input['ServiceFullWebRequestIdContributorsContextRootArgs'] context_root: The context root is the first segment of the request URL after the Server name. For example, in the `www.dynatrace.com/support/help/dynatrace-api/` URL the context root is `/support`. The context root value can be found on the Service screen under **Properties and tags**.
        :param pulumi.Input['ServiceFullWebRequestIdContributorsServerNameArgs'] server_name: Server Name
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "context_root", context_root)
        pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdArgs']:
        """
        Application identifier
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdArgs']):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> pulumi.Input['ServiceFullWebRequestIdContributorsContextRootArgs']:
        """
        The context root is the first segment of the request URL after the Server name. For example, in the `www.dynatrace.com/support/help/dynatrace-api/` URL the context root is `/support`. The context root value can be found on the Service screen under **Properties and tags**.
        """
        return pulumi.get(self, "context_root")

    @context_root.setter
    def context_root(self, value: pulumi.Input['ServiceFullWebRequestIdContributorsContextRootArgs']):
        pulumi.set(self, "context_root", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> pulumi.Input['ServiceFullWebRequestIdContributorsServerNameArgs']:
        """
        Server Name
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: pulumi.Input['ServiceFullWebRequestIdContributorsServerNameArgs']):
        pulumi.set(self, "server_name", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsApplicationIdArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 transformations: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 segment_count: Optional[pulumi.Input[int]] = None,
                 select_index: Optional[pulumi.Input[int]] = None,
                 split_delimiter: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 take_from_end: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if select_index is not None:
            pulumi.set(__self__, "select_index", select_index)
        if split_delimiter is not None:
            pulumi.set(__self__, "split_delimiter", split_delimiter)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if take_from_end is not None:
            pulumi.set(__self__, "take_from_end", take_from_end)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter(name="selectIndex")
    def select_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "select_index")

    @select_index.setter
    def select_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "select_index", value)

    @property
    @pulumi.getter(name="splitDelimiter")
    def split_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_delimiter")

    @split_delimiter.setter
    def split_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_delimiter", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="takeFromEnd")
    def take_from_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "take_from_end")

    @take_from_end.setter
    def take_from_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_from_end", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsContextRootArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsContextRootServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 segment_count: Optional[pulumi.Input[int]] = None,
                 transformations: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsServerNameArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsServerNameServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 transformations: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 segment_count: Optional[pulumi.Input[int]] = None,
                 select_index: Optional[pulumi.Input[int]] = None,
                 split_delimiter: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 take_from_end: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if select_index is not None:
            pulumi.set(__self__, "select_index", select_index)
        if split_delimiter is not None:
            pulumi.set(__self__, "split_delimiter", split_delimiter)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if take_from_end is not None:
            pulumi.set(__self__, "take_from_end", take_from_end)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter(name="selectIndex")
    def select_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "select_index")

    @select_index.setter
    def select_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "select_index", value)

    @property
    @pulumi.getter(name="splitDelimiter")
    def split_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_delimiter")

    @split_delimiter.setter
    def split_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_delimiter", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="takeFromEnd")
    def take_from_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "take_from_end")

    @take_from_end.setter
    def take_from_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_from_end", value)


@pulumi.input_type
class ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceFullWebServiceConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceConditionsConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ServiceFullWebServiceConditionsConditionArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 compare_operation_type: pulumi.Input[str],
                 frameworks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 int_value: Optional[pulumi.Input[int]] = None,
                 int_values: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ip_range_from: Optional[pulumi.Input[str]] = None,
                 ip_range_to: Optional[pulumi.Input[str]] = None,
                 tag_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "compare_operation_type", compare_operation_type)
        if frameworks is not None:
            pulumi.set(__self__, "frameworks", frameworks)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if int_values is not None:
            pulumi.set(__self__, "int_values", int_values)
        if ip_range_from is not None:
            pulumi.set(__self__, "ip_range_from", ip_range_from)
        if ip_range_to is not None:
            pulumi.set(__self__, "ip_range_to", ip_range_to)
        if tag_values is not None:
            pulumi.set(__self__, "tag_values", tag_values)
        if text_values is not None:
            pulumi.set(__self__, "text_values", text_values)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="compareOperationType")
    def compare_operation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compare_operation_type")

    @compare_operation_type.setter
    def compare_operation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "compare_operation_type", value)

    @property
    @pulumi.getter
    def frameworks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "frameworks")

    @frameworks.setter
    def frameworks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "frameworks", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="intValues")
    def int_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "int_values")

    @int_values.setter
    def int_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "int_values", value)

    @property
    @pulumi.getter(name="ipRangeFrom")
    def ip_range_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range_from")

    @ip_range_from.setter
    def ip_range_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range_from", value)

    @property
    @pulumi.getter(name="ipRangeTo")
    def ip_range_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range_to")

    @ip_range_to.setter
    def ip_range_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range_to", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_values", value)

    @property
    @pulumi.getter(name="textValues")
    def text_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "text_values")

    @text_values.setter
    def text_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "text_values", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsArgs:
    def __init__(__self__, *,
                 detect_as_web_request_service: pulumi.Input[bool],
                 application_id: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdArgs']] = None,
                 context_root: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootArgs']] = None,
                 server_name: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameArgs']] = None,
                 web_service_name: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameArgs']] = None,
                 web_service_namespace: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceArgs']] = None):
        """
        :param pulumi.Input[bool] detect_as_web_request_service: Detect the matching requests as full web services (false) or web request services (true).
        """
        pulumi.set(__self__, "detect_as_web_request_service", detect_as_web_request_service)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if context_root is not None:
            pulumi.set(__self__, "context_root", context_root)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if web_service_name is not None:
            pulumi.set(__self__, "web_service_name", web_service_name)
        if web_service_namespace is not None:
            pulumi.set(__self__, "web_service_namespace", web_service_namespace)

    @property
    @pulumi.getter(name="detectAsWebRequestService")
    def detect_as_web_request_service(self) -> pulumi.Input[bool]:
        """
        Detect the matching requests as full web services (false) or web request services (true).
        """
        return pulumi.get(self, "detect_as_web_request_service")

    @detect_as_web_request_service.setter
    def detect_as_web_request_service(self, value: pulumi.Input[bool]):
        pulumi.set(self, "detect_as_web_request_service", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdArgs']]:
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdArgs']]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="contextRoot")
    def context_root(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootArgs']]:
        return pulumi.get(self, "context_root")

    @context_root.setter
    def context_root(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootArgs']]):
        pulumi.set(self, "context_root", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameArgs']]:
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameArgs']]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter(name="webServiceName")
    def web_service_name(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameArgs']]:
        return pulumi.get(self, "web_service_name")

    @web_service_name.setter
    def web_service_name(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameArgs']]):
        pulumi.set(self, "web_service_name", value)

    @property
    @pulumi.getter(name="webServiceNamespace")
    def web_service_namespace(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceArgs']]:
        return pulumi.get(self, "web_service_namespace")

    @web_service_namespace.setter
    def web_service_namespace(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceArgs']]):
        pulumi.set(self, "web_service_namespace", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsApplicationIdArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 transformations: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 segment_count: Optional[pulumi.Input[int]] = None,
                 select_index: Optional[pulumi.Input[int]] = None,
                 split_delimiter: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 take_from_end: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if select_index is not None:
            pulumi.set(__self__, "select_index", select_index)
        if split_delimiter is not None:
            pulumi.set(__self__, "split_delimiter", split_delimiter)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if take_from_end is not None:
            pulumi.set(__self__, "take_from_end", take_from_end)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter(name="selectIndex")
    def select_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "select_index")

    @select_index.setter
    def select_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "select_index", value)

    @property
    @pulumi.getter(name="splitDelimiter")
    def split_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_delimiter")

    @split_delimiter.setter
    def split_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_delimiter", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="takeFromEnd")
    def take_from_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "take_from_end")

    @take_from_end.setter
    def take_from_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_from_end", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsContextRootArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsContextRootServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 segment_count: Optional[pulumi.Input[int]] = None,
                 transformations: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsServerNameArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsServerNameServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 transformations: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 segment_count: Optional[pulumi.Input[int]] = None,
                 select_index: Optional[pulumi.Input[int]] = None,
                 split_delimiter: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 take_from_end: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if select_index is not None:
            pulumi.set(__self__, "select_index", select_index)
        if split_delimiter is not None:
            pulumi.set(__self__, "split_delimiter", split_delimiter)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if take_from_end is not None:
            pulumi.set(__self__, "take_from_end", take_from_end)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter(name="selectIndex")
    def select_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "select_index")

    @select_index.setter
    def select_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "select_index", value)

    @property
    @pulumi.getter(name="splitDelimiter")
    def split_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_delimiter")

    @split_delimiter.setter
    def split_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_delimiter", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="takeFromEnd")
    def take_from_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "take_from_end")

    @take_from_end.setter
    def take_from_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_from_end", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsWebServiceNameArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 transformations: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 segment_count: Optional[pulumi.Input[int]] = None,
                 select_index: Optional[pulumi.Input[int]] = None,
                 split_delimiter: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 take_from_end: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if select_index is not None:
            pulumi.set(__self__, "select_index", select_index)
        if split_delimiter is not None:
            pulumi.set(__self__, "split_delimiter", split_delimiter)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if take_from_end is not None:
            pulumi.set(__self__, "take_from_end", take_from_end)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter(name="selectIndex")
    def select_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "select_index")

    @select_index.setter
    def select_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "select_index", value)

    @property
    @pulumi.getter(name="splitDelimiter")
    def split_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_delimiter")

    @split_delimiter.setter
    def split_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_delimiter", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="takeFromEnd")
    def take_from_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "take_from_end")

    @take_from_end.setter
    def take_from_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_from_end", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsWebServiceNamespaceArgs:
    def __init__(__self__, *,
                 enable_id_contributor: pulumi.Input[bool],
                 service_id_contributor: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorArgs']] = None):
        pulumi.set(__self__, "enable_id_contributor", enable_id_contributor)
        if service_id_contributor is not None:
            pulumi.set(__self__, "service_id_contributor", service_id_contributor)

    @property
    @pulumi.getter(name="enableIdContributor")
    def enable_id_contributor(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_id_contributor")

    @enable_id_contributor.setter
    def enable_id_contributor(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_id_contributor", value)

    @property
    @pulumi.getter(name="serviceIdContributor")
    def service_id_contributor(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorArgs']]:
        return pulumi.get(self, "service_id_contributor")

    @service_id_contributor.setter
    def service_id_contributor(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorArgs']]):
        pulumi.set(self, "service_id_contributor", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorArgs:
    def __init__(__self__, *,
                 contribution_type: pulumi.Input[str],
                 transformations: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsArgs']] = None,
                 value_override: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverrideArgs']] = None):
        pulumi.set(__self__, "contribution_type", contribution_type)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)
        if value_override is not None:
            pulumi.set(__self__, "value_override", value_override)

    @property
    @pulumi.getter(name="contributionType")
    def contribution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contribution_type")

    @contribution_type.setter
    def contribution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "contribution_type", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsArgs']]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsArgs']]):
        pulumi.set(self, "transformations", value)

    @property
    @pulumi.getter(name="valueOverride")
    def value_override(self) -> Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverrideArgs']]:
        return pulumi.get(self, "value_override")

    @value_override.setter
    def value_override(self, value: Optional[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverrideArgs']]):
        pulumi.set(self, "value_override", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsArgs:
    def __init__(__self__, *,
                 transformations: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformationArgs']]]:
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformationArgs:
    def __init__(__self__, *,
                 transformation_type: pulumi.Input[str],
                 include_hex_numbers: Optional[pulumi.Input[bool]] = None,
                 min_digit_count: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 replacement_value: Optional[pulumi.Input[str]] = None,
                 segment_count: Optional[pulumi.Input[int]] = None,
                 select_index: Optional[pulumi.Input[int]] = None,
                 split_delimiter: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 take_from_end: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "transformation_type", transformation_type)
        if include_hex_numbers is not None:
            pulumi.set(__self__, "include_hex_numbers", include_hex_numbers)
        if min_digit_count is not None:
            pulumi.set(__self__, "min_digit_count", min_digit_count)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if replacement_value is not None:
            pulumi.set(__self__, "replacement_value", replacement_value)
        if segment_count is not None:
            pulumi.set(__self__, "segment_count", segment_count)
        if select_index is not None:
            pulumi.set(__self__, "select_index", select_index)
        if split_delimiter is not None:
            pulumi.set(__self__, "split_delimiter", split_delimiter)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if take_from_end is not None:
            pulumi.set(__self__, "take_from_end", take_from_end)

    @property
    @pulumi.getter(name="transformationType")
    def transformation_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transformation_type")

    @transformation_type.setter
    def transformation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "transformation_type", value)

    @property
    @pulumi.getter(name="includeHexNumbers")
    def include_hex_numbers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_hex_numbers")

    @include_hex_numbers.setter
    def include_hex_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_hex_numbers", value)

    @property
    @pulumi.getter(name="minDigitCount")
    def min_digit_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_digit_count")

    @min_digit_count.setter
    def min_digit_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_digit_count", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="replacementValue")
    def replacement_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement_value")

    @replacement_value.setter
    def replacement_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_value", value)

    @property
    @pulumi.getter(name="segmentCount")
    def segment_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "segment_count")

    @segment_count.setter
    def segment_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_count", value)

    @property
    @pulumi.getter(name="selectIndex")
    def select_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "select_index")

    @select_index.setter
    def select_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "select_index", value)

    @property
    @pulumi.getter(name="splitDelimiter")
    def split_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "split_delimiter")

    @split_delimiter.setter
    def split_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "split_delimiter", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="takeFromEnd")
    def take_from_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "take_from_end")

    @take_from_end.setter
    def take_from_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "take_from_end", value)


@pulumi.input_type
class ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverrideArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceHttpFailureBrokenLinksArgs:
    def __init__(__self__, *,
                 http404_not_found_failures: pulumi.Input[bool],
                 broken_link_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] http404_not_found_failures: Consider 404 HTTP response codes as failures
        :param pulumi.Input[Sequence[pulumi.Input[str]]] broken_link_domains: If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
        """
        pulumi.set(__self__, "http404_not_found_failures", http404_not_found_failures)
        if broken_link_domains is not None:
            pulumi.set(__self__, "broken_link_domains", broken_link_domains)

    @property
    @pulumi.getter(name="http404NotFoundFailures")
    def http404_not_found_failures(self) -> pulumi.Input[bool]:
        """
        Consider 404 HTTP response codes as failures
        """
        return pulumi.get(self, "http404_not_found_failures")

    @http404_not_found_failures.setter
    def http404_not_found_failures(self, value: pulumi.Input[bool]):
        pulumi.set(self, "http404_not_found_failures", value)

    @property
    @pulumi.getter(name="brokenLinkDomains")
    def broken_link_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
        """
        return pulumi.get(self, "broken_link_domains")

    @broken_link_domains.setter
    def broken_link_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "broken_link_domains", value)


@pulumi.input_type
class ServiceHttpFailureHttpResponseCodesArgs:
    def __init__(__self__, *,
                 client_side_errors: pulumi.Input[str],
                 fail_on_missing_response_code_client_side: pulumi.Input[bool],
                 fail_on_missing_response_code_server_side: pulumi.Input[bool],
                 server_side_errors: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_side_errors: HTTP response codes which indicate client side errors
        :param pulumi.Input[bool] fail_on_missing_response_code_client_side: Treat missing HTTP response code as client side error
        :param pulumi.Input[bool] fail_on_missing_response_code_server_side: Treat missing HTTP response code as server side errors
        :param pulumi.Input[str] server_side_errors: HTTP response codes which indicate an error on the server side
        """
        pulumi.set(__self__, "client_side_errors", client_side_errors)
        pulumi.set(__self__, "fail_on_missing_response_code_client_side", fail_on_missing_response_code_client_side)
        pulumi.set(__self__, "fail_on_missing_response_code_server_side", fail_on_missing_response_code_server_side)
        pulumi.set(__self__, "server_side_errors", server_side_errors)

    @property
    @pulumi.getter(name="clientSideErrors")
    def client_side_errors(self) -> pulumi.Input[str]:
        """
        HTTP response codes which indicate client side errors
        """
        return pulumi.get(self, "client_side_errors")

    @client_side_errors.setter
    def client_side_errors(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_side_errors", value)

    @property
    @pulumi.getter(name="failOnMissingResponseCodeClientSide")
    def fail_on_missing_response_code_client_side(self) -> pulumi.Input[bool]:
        """
        Treat missing HTTP response code as client side error
        """
        return pulumi.get(self, "fail_on_missing_response_code_client_side")

    @fail_on_missing_response_code_client_side.setter
    def fail_on_missing_response_code_client_side(self, value: pulumi.Input[bool]):
        pulumi.set(self, "fail_on_missing_response_code_client_side", value)

    @property
    @pulumi.getter(name="failOnMissingResponseCodeServerSide")
    def fail_on_missing_response_code_server_side(self) -> pulumi.Input[bool]:
        """
        Treat missing HTTP response code as server side errors
        """
        return pulumi.get(self, "fail_on_missing_response_code_server_side")

    @fail_on_missing_response_code_server_side.setter
    def fail_on_missing_response_code_server_side(self, value: pulumi.Input[bool]):
        pulumi.set(self, "fail_on_missing_response_code_server_side", value)

    @property
    @pulumi.getter(name="serverSideErrors")
    def server_side_errors(self) -> pulumi.Input[str]:
        """
        HTTP response codes which indicate an error on the server side
        """
        return pulumi.get(self, "server_side_errors")

    @server_side_errors.setter
    def server_side_errors(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_side_errors", value)


@pulumi.input_type
class ServiceNamingConditionArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionArgs']]]] = None):
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ServiceNamingConditionConditionArgs:
    def __init__(__self__, *,
                 application_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionApplicationTypeComparisonArgs']]]] = None,
                 application_types: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionApplicationTypeArgs']]]] = None,
                 azure_compute_mode_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureComputeModeComparisonArgs']]]] = None,
                 azure_compute_modes: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureComputeModeArgs']]]] = None,
                 azure_sku_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureSkuComparisionArgs']]]] = None,
                 azure_skus: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureSkusArgs']]]] = None,
                 base_comparison_basics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBaseComparisonBasicArgs']]]] = None,
                 base_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBaseConditionKeyArgs']]]] = None,
                 bitness_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBitnessComparisionArgs']]]] = None,
                 bitnesses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBitnessArgs']]]] = None,
                 cloud_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCloudTypeComparisonArgs']]]] = None,
                 cloud_types: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCloudTypeArgs']]]] = None,
                 comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionComparisonArgs']]]] = None,
                 custom_application_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomApplicationTypeComparisonArgs']]]] = None,
                 custom_application_types: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomApplicationTypeArgs']]]] = None,
                 custom_host_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataConditionKeyArgs']]]] = None,
                 custom_host_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataArgs']]]] = None,
                 custom_process_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataConditionKeyArgs']]]] = None,
                 custom_process_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataArgs']]]] = None,
                 database_topologies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDatabaseTopologyArgs']]]] = None,
                 database_topology_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDatabaseTopologyComparisonArgs']]]] = None,
                 dcrum_decoder_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDcrumDecoderComparisonArgs']]]] = None,
                 dcrum_decoders: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDcrumDecoderArgs']]]] = None,
                 entities: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionEntityArgs']]]] = None,
                 entity_id_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionEntityIdComparisonArgs']]]] = None,
                 host_teches: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionHostTechArgs']]]] = None,
                 hypervisor_type_comparisions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionHypervisorTypeComparisionArgs']]]] = None,
                 hypervisors: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionHypervisorArgs']]]] = None,
                 indexed_name_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedNameComparisonArgs']]]] = None,
                 indexed_names: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedNameArgs']]]] = None,
                 indexed_string_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedStringComparisonArgs']]]] = None,
                 indexed_strings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedStringArgs']]]] = None,
                 indexed_tag_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedTagComparisonArgs']]]] = None,
                 indexed_tags: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedTagArgs']]]] = None,
                 integer_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIntegerComparisonArgs']]]] = None,
                 integers: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIntegerArgs']]]] = None,
                 ipaddress_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIpaddressComparisonArgs']]]] = None,
                 ipaddresses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIpaddressArgs']]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionKeyArgs']]]] = None,
                 mobile_platform_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionMobilePlatformComparisonArgs']]]] = None,
                 mobile_platforms: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionMobilePlatformArgs']]]] = None,
                 os_arches: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOsArchArgs']]]] = None,
                 os_types: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOsTypeArgs']]]] = None,
                 osarchitecture_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOsarchitectureComparisonArgs']]]] = None,
                 ostype_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOstypeComparisonArgs']]]] = None,
                 paas_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionPaasTypeComparisonArgs']]]] = None,
                 paas_types: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionPaasTypeArgs']]]] = None,
                 process_metadata_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionProcessMetadataConditionKeyArgs']]]] = None,
                 process_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionProcessMetadataArgs']]]] = None,
                 service_topologies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTopologyArgs']]]] = None,
                 service_topology_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTopologyComparisonArgs']]]] = None,
                 service_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTypeComparisonArgs']]]] = None,
                 service_types: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTypeArgs']]]] = None,
                 simple_host_tech_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSimpleHostTechComparisonArgs']]]] = None,
                 simple_tech_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSimpleTechComparisonArgs']]]] = None,
                 string_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringComparisonArgs']]]] = None,
                 string_condition_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringConditionKeyArgs']]]] = None,
                 string_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringKeyArgs']]]] = None,
                 strings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringArgs']]]] = None,
                 synthetic_engine_type_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSyntheticEngineTypeComparisonArgs']]]] = None,
                 synthetic_engines: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSyntheticEngineArgs']]]] = None,
                 tag_comparisons: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionTagComparisonArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionTagArgs']]]] = None,
                 teches: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionTechArgs']]]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        if application_type_comparisons is not None:
            warnings.warn("""You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""application_type_comparisons is deprecated: You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.""")
        if application_type_comparisons is not None:
            pulumi.set(__self__, "application_type_comparisons", application_type_comparisons)
        if application_types is not None:
            pulumi.set(__self__, "application_types", application_types)
        if azure_compute_mode_comparisons is not None:
            pulumi.set(__self__, "azure_compute_mode_comparisons", azure_compute_mode_comparisons)
        if azure_compute_modes is not None:
            warnings.warn("""You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""azure_compute_modes is deprecated: You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.""")
        if azure_compute_modes is not None:
            pulumi.set(__self__, "azure_compute_modes", azure_compute_modes)
        if azure_sku_comparisions is not None:
            warnings.warn("""You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""azure_sku_comparisions is deprecated: You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.""")
        if azure_sku_comparisions is not None:
            pulumi.set(__self__, "azure_sku_comparisions", azure_sku_comparisions)
        if azure_skus is not None:
            pulumi.set(__self__, "azure_skus", azure_skus)
        if base_comparison_basics is not None:
            warnings.warn("""You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""base_comparison_basics is deprecated: You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.""")
        if base_comparison_basics is not None:
            pulumi.set(__self__, "base_comparison_basics", base_comparison_basics)
        if base_condition_keys is not None:
            warnings.warn("""'base_condition_key' is deprecated. You should use 'key'""", DeprecationWarning)
            pulumi.log.warn("""base_condition_keys is deprecated: 'base_condition_key' is deprecated. You should use 'key'""")
        if base_condition_keys is not None:
            pulumi.set(__self__, "base_condition_keys", base_condition_keys)
        if bitness_comparisions is not None:
            warnings.warn("""You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""bitness_comparisions is deprecated: You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.""")
        if bitness_comparisions is not None:
            pulumi.set(__self__, "bitness_comparisions", bitness_comparisions)
        if bitnesses is not None:
            pulumi.set(__self__, "bitnesses", bitnesses)
        if cloud_type_comparisons is not None:
            warnings.warn("""You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""cloud_type_comparisons is deprecated: You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.""")
        if cloud_type_comparisons is not None:
            pulumi.set(__self__, "cloud_type_comparisons", cloud_type_comparisons)
        if cloud_types is not None:
            pulumi.set(__self__, "cloud_types", cloud_types)
        if comparisons is not None:
            pulumi.set(__self__, "comparisons", comparisons)
        if custom_application_type_comparisons is not None:
            warnings.warn("""You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""custom_application_type_comparisons is deprecated: You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.""")
        if custom_application_type_comparisons is not None:
            pulumi.set(__self__, "custom_application_type_comparisons", custom_application_type_comparisons)
        if custom_application_types is not None:
            pulumi.set(__self__, "custom_application_types", custom_application_types)
        if custom_host_metadata_condition_keys is not None:
            warnings.warn("""'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'""", DeprecationWarning)
            pulumi.log.warn("""custom_host_metadata_condition_keys is deprecated: 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'""")
        if custom_host_metadata_condition_keys is not None:
            pulumi.set(__self__, "custom_host_metadata_condition_keys", custom_host_metadata_condition_keys)
        if custom_host_metadatas is not None:
            pulumi.set(__self__, "custom_host_metadatas", custom_host_metadatas)
        if custom_process_metadata_condition_keys is not None:
            warnings.warn("""'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'""", DeprecationWarning)
            pulumi.log.warn("""custom_process_metadata_condition_keys is deprecated: 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'""")
        if custom_process_metadata_condition_keys is not None:
            pulumi.set(__self__, "custom_process_metadata_condition_keys", custom_process_metadata_condition_keys)
        if custom_process_metadatas is not None:
            pulumi.set(__self__, "custom_process_metadatas", custom_process_metadatas)
        if database_topologies is not None:
            pulumi.set(__self__, "database_topologies", database_topologies)
        if database_topology_comparisons is not None:
            warnings.warn("""You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""database_topology_comparisons is deprecated: You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.""")
        if database_topology_comparisons is not None:
            pulumi.set(__self__, "database_topology_comparisons", database_topology_comparisons)
        if dcrum_decoder_comparisons is not None:
            warnings.warn("""You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""dcrum_decoder_comparisons is deprecated: You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.""")
        if dcrum_decoder_comparisons is not None:
            pulumi.set(__self__, "dcrum_decoder_comparisons", dcrum_decoder_comparisons)
        if dcrum_decoders is not None:
            pulumi.set(__self__, "dcrum_decoders", dcrum_decoders)
        if entities is not None:
            pulumi.set(__self__, "entities", entities)
        if entity_id_comparisons is not None:
            warnings.warn("""You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""entity_id_comparisons is deprecated: You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.""")
        if entity_id_comparisons is not None:
            pulumi.set(__self__, "entity_id_comparisons", entity_id_comparisons)
        if host_teches is not None:
            pulumi.set(__self__, "host_teches", host_teches)
        if hypervisor_type_comparisions is not None:
            warnings.warn("""`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead""", DeprecationWarning)
            pulumi.log.warn("""hypervisor_type_comparisions is deprecated: `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead""")
        if hypervisor_type_comparisions is not None:
            pulumi.set(__self__, "hypervisor_type_comparisions", hypervisor_type_comparisions)
        if hypervisors is not None:
            pulumi.set(__self__, "hypervisors", hypervisors)
        if indexed_name_comparisons is not None:
            warnings.warn("""You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_name_comparisons is deprecated: You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_name_comparisons is not None:
            pulumi.set(__self__, "indexed_name_comparisons", indexed_name_comparisons)
        if indexed_names is not None:
            pulumi.set(__self__, "indexed_names", indexed_names)
        if indexed_string_comparisons is not None:
            warnings.warn("""You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_string_comparisons is deprecated: You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_string_comparisons is not None:
            pulumi.set(__self__, "indexed_string_comparisons", indexed_string_comparisons)
        if indexed_strings is not None:
            pulumi.set(__self__, "indexed_strings", indexed_strings)
        if indexed_tag_comparisons is not None:
            warnings.warn("""You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""indexed_tag_comparisons is deprecated: You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.""")
        if indexed_tag_comparisons is not None:
            pulumi.set(__self__, "indexed_tag_comparisons", indexed_tag_comparisons)
        if indexed_tags is not None:
            pulumi.set(__self__, "indexed_tags", indexed_tags)
        if integer_comparisons is not None:
            warnings.warn("""You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""integer_comparisons is deprecated: You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.""")
        if integer_comparisons is not None:
            pulumi.set(__self__, "integer_comparisons", integer_comparisons)
        if integers is not None:
            pulumi.set(__self__, "integers", integers)
        if ipaddress_comparisons is not None:
            warnings.warn("""You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""ipaddress_comparisons is deprecated: You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.""")
        if ipaddress_comparisons is not None:
            pulumi.set(__self__, "ipaddress_comparisons", ipaddress_comparisons)
        if ipaddresses is not None:
            pulumi.set(__self__, "ipaddresses", ipaddresses)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if mobile_platform_comparisons is not None:
            warnings.warn("""You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""mobile_platform_comparisons is deprecated: You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.""")
        if mobile_platform_comparisons is not None:
            pulumi.set(__self__, "mobile_platform_comparisons", mobile_platform_comparisons)
        if mobile_platforms is not None:
            pulumi.set(__self__, "mobile_platforms", mobile_platforms)
        if os_arches is not None:
            pulumi.set(__self__, "os_arches", os_arches)
        if os_types is not None:
            pulumi.set(__self__, "os_types", os_types)
        if osarchitecture_comparisons is not None:
            warnings.warn("""You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""osarchitecture_comparisons is deprecated: You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.""")
        if osarchitecture_comparisons is not None:
            pulumi.set(__self__, "osarchitecture_comparisons", osarchitecture_comparisons)
        if ostype_comparisons is not None:
            warnings.warn("""You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""ostype_comparisons is deprecated: You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.""")
        if ostype_comparisons is not None:
            pulumi.set(__self__, "ostype_comparisons", ostype_comparisons)
        if paas_type_comparisons is not None:
            warnings.warn("""You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""paas_type_comparisons is deprecated: You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.""")
        if paas_type_comparisons is not None:
            pulumi.set(__self__, "paas_type_comparisons", paas_type_comparisons)
        if paas_types is not None:
            pulumi.set(__self__, "paas_types", paas_types)
        if process_metadata_condition_keys is not None:
            warnings.warn("""'process_metadata_condition_key' is deprecated. You should use 'process_metadata'""", DeprecationWarning)
            pulumi.log.warn("""process_metadata_condition_keys is deprecated: 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'""")
        if process_metadata_condition_keys is not None:
            pulumi.set(__self__, "process_metadata_condition_keys", process_metadata_condition_keys)
        if process_metadatas is not None:
            pulumi.set(__self__, "process_metadatas", process_metadatas)
        if service_topologies is not None:
            pulumi.set(__self__, "service_topologies", service_topologies)
        if service_topology_comparisons is not None:
            warnings.warn("""You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""service_topology_comparisons is deprecated: You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.""")
        if service_topology_comparisons is not None:
            pulumi.set(__self__, "service_topology_comparisons", service_topology_comparisons)
        if service_type_comparisons is not None:
            warnings.warn("""You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""service_type_comparisons is deprecated: You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.""")
        if service_type_comparisons is not None:
            pulumi.set(__self__, "service_type_comparisons", service_type_comparisons)
        if service_types is not None:
            pulumi.set(__self__, "service_types", service_types)
        if simple_host_tech_comparisons is not None:
            warnings.warn("""You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""simple_host_tech_comparisons is deprecated: You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.""")
        if simple_host_tech_comparisons is not None:
            pulumi.set(__self__, "simple_host_tech_comparisons", simple_host_tech_comparisons)
        if simple_tech_comparisons is not None:
            warnings.warn("""You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""simple_tech_comparisons is deprecated: You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.""")
        if simple_tech_comparisons is not None:
            pulumi.set(__self__, "simple_tech_comparisons", simple_tech_comparisons)
        if string_comparisons is not None:
            warnings.warn("""You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""string_comparisons is deprecated: You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.""")
        if string_comparisons is not None:
            pulumi.set(__self__, "string_comparisons", string_comparisons)
        if string_condition_keys is not None:
            warnings.warn("""'string_condition_key' is deprecated. You should use 'string_key'""", DeprecationWarning)
            pulumi.log.warn("""string_condition_keys is deprecated: 'string_condition_key' is deprecated. You should use 'string_key'""")
        if string_condition_keys is not None:
            pulumi.set(__self__, "string_condition_keys", string_condition_keys)
        if string_keys is not None:
            pulumi.set(__self__, "string_keys", string_keys)
        if strings is not None:
            pulumi.set(__self__, "strings", strings)
        if synthetic_engine_type_comparisons is not None:
            warnings.warn("""You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""synthetic_engine_type_comparisons is deprecated: You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.""")
        if synthetic_engine_type_comparisons is not None:
            pulumi.set(__self__, "synthetic_engine_type_comparisons", synthetic_engine_type_comparisons)
        if synthetic_engines is not None:
            pulumi.set(__self__, "synthetic_engines", synthetic_engines)
        if tag_comparisons is not None:
            warnings.warn("""You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.""", DeprecationWarning)
            pulumi.log.warn("""tag_comparisons is deprecated: You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.""")
        if tag_comparisons is not None:
            pulumi.set(__self__, "tag_comparisons", tag_comparisons)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if teches is not None:
            pulumi.set(__self__, "teches", teches)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter(name="applicationTypeComparisons")
    def application_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionApplicationTypeComparisonArgs']]]]:
        return pulumi.get(self, "application_type_comparisons")

    @application_type_comparisons.setter
    def application_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionApplicationTypeComparisonArgs']]]]):
        pulumi.set(self, "application_type_comparisons", value)

    @property
    @pulumi.getter(name="applicationTypes")
    def application_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionApplicationTypeArgs']]]]:
        return pulumi.get(self, "application_types")

    @application_types.setter
    def application_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionApplicationTypeArgs']]]]):
        pulumi.set(self, "application_types", value)

    @property
    @pulumi.getter(name="azureComputeModeComparisons")
    def azure_compute_mode_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureComputeModeComparisonArgs']]]]:
        return pulumi.get(self, "azure_compute_mode_comparisons")

    @azure_compute_mode_comparisons.setter
    def azure_compute_mode_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureComputeModeComparisonArgs']]]]):
        pulumi.set(self, "azure_compute_mode_comparisons", value)

    @property
    @pulumi.getter(name="azureComputeModes")
    def azure_compute_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureComputeModeArgs']]]]:
        return pulumi.get(self, "azure_compute_modes")

    @azure_compute_modes.setter
    def azure_compute_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureComputeModeArgs']]]]):
        pulumi.set(self, "azure_compute_modes", value)

    @property
    @pulumi.getter(name="azureSkuComparisions")
    def azure_sku_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureSkuComparisionArgs']]]]:
        return pulumi.get(self, "azure_sku_comparisions")

    @azure_sku_comparisions.setter
    def azure_sku_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureSkuComparisionArgs']]]]):
        pulumi.set(self, "azure_sku_comparisions", value)

    @property
    @pulumi.getter(name="azureSkus")
    def azure_skus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureSkusArgs']]]]:
        return pulumi.get(self, "azure_skus")

    @azure_skus.setter
    def azure_skus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionAzureSkusArgs']]]]):
        pulumi.set(self, "azure_skus", value)

    @property
    @pulumi.getter(name="baseComparisonBasics")
    def base_comparison_basics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBaseComparisonBasicArgs']]]]:
        return pulumi.get(self, "base_comparison_basics")

    @base_comparison_basics.setter
    def base_comparison_basics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBaseComparisonBasicArgs']]]]):
        pulumi.set(self, "base_comparison_basics", value)

    @property
    @pulumi.getter(name="baseConditionKeys")
    def base_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBaseConditionKeyArgs']]]]:
        return pulumi.get(self, "base_condition_keys")

    @base_condition_keys.setter
    def base_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBaseConditionKeyArgs']]]]):
        pulumi.set(self, "base_condition_keys", value)

    @property
    @pulumi.getter(name="bitnessComparisions")
    def bitness_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBitnessComparisionArgs']]]]:
        return pulumi.get(self, "bitness_comparisions")

    @bitness_comparisions.setter
    def bitness_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBitnessComparisionArgs']]]]):
        pulumi.set(self, "bitness_comparisions", value)

    @property
    @pulumi.getter
    def bitnesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBitnessArgs']]]]:
        return pulumi.get(self, "bitnesses")

    @bitnesses.setter
    def bitnesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionBitnessArgs']]]]):
        pulumi.set(self, "bitnesses", value)

    @property
    @pulumi.getter(name="cloudTypeComparisons")
    def cloud_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCloudTypeComparisonArgs']]]]:
        return pulumi.get(self, "cloud_type_comparisons")

    @cloud_type_comparisons.setter
    def cloud_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCloudTypeComparisonArgs']]]]):
        pulumi.set(self, "cloud_type_comparisons", value)

    @property
    @pulumi.getter(name="cloudTypes")
    def cloud_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCloudTypeArgs']]]]:
        return pulumi.get(self, "cloud_types")

    @cloud_types.setter
    def cloud_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCloudTypeArgs']]]]):
        pulumi.set(self, "cloud_types", value)

    @property
    @pulumi.getter
    def comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionComparisonArgs']]]]:
        return pulumi.get(self, "comparisons")

    @comparisons.setter
    def comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionComparisonArgs']]]]):
        pulumi.set(self, "comparisons", value)

    @property
    @pulumi.getter(name="customApplicationTypeComparisons")
    def custom_application_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomApplicationTypeComparisonArgs']]]]:
        return pulumi.get(self, "custom_application_type_comparisons")

    @custom_application_type_comparisons.setter
    def custom_application_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomApplicationTypeComparisonArgs']]]]):
        pulumi.set(self, "custom_application_type_comparisons", value)

    @property
    @pulumi.getter(name="customApplicationTypes")
    def custom_application_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomApplicationTypeArgs']]]]:
        return pulumi.get(self, "custom_application_types")

    @custom_application_types.setter
    def custom_application_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomApplicationTypeArgs']]]]):
        pulumi.set(self, "custom_application_types", value)

    @property
    @pulumi.getter(name="customHostMetadataConditionKeys")
    def custom_host_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "custom_host_metadata_condition_keys")

    @custom_host_metadata_condition_keys.setter
    def custom_host_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "custom_host_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="customHostMetadatas")
    def custom_host_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataArgs']]]]:
        return pulumi.get(self, "custom_host_metadatas")

    @custom_host_metadatas.setter
    def custom_host_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataArgs']]]]):
        pulumi.set(self, "custom_host_metadatas", value)

    @property
    @pulumi.getter(name="customProcessMetadataConditionKeys")
    def custom_process_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "custom_process_metadata_condition_keys")

    @custom_process_metadata_condition_keys.setter
    def custom_process_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "custom_process_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="customProcessMetadatas")
    def custom_process_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataArgs']]]]:
        return pulumi.get(self, "custom_process_metadatas")

    @custom_process_metadatas.setter
    def custom_process_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataArgs']]]]):
        pulumi.set(self, "custom_process_metadatas", value)

    @property
    @pulumi.getter(name="databaseTopologies")
    def database_topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDatabaseTopologyArgs']]]]:
        return pulumi.get(self, "database_topologies")

    @database_topologies.setter
    def database_topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDatabaseTopologyArgs']]]]):
        pulumi.set(self, "database_topologies", value)

    @property
    @pulumi.getter(name="databaseTopologyComparisons")
    def database_topology_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDatabaseTopologyComparisonArgs']]]]:
        return pulumi.get(self, "database_topology_comparisons")

    @database_topology_comparisons.setter
    def database_topology_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDatabaseTopologyComparisonArgs']]]]):
        pulumi.set(self, "database_topology_comparisons", value)

    @property
    @pulumi.getter(name="dcrumDecoderComparisons")
    def dcrum_decoder_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDcrumDecoderComparisonArgs']]]]:
        return pulumi.get(self, "dcrum_decoder_comparisons")

    @dcrum_decoder_comparisons.setter
    def dcrum_decoder_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDcrumDecoderComparisonArgs']]]]):
        pulumi.set(self, "dcrum_decoder_comparisons", value)

    @property
    @pulumi.getter(name="dcrumDecoders")
    def dcrum_decoders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDcrumDecoderArgs']]]]:
        return pulumi.get(self, "dcrum_decoders")

    @dcrum_decoders.setter
    def dcrum_decoders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionDcrumDecoderArgs']]]]):
        pulumi.set(self, "dcrum_decoders", value)

    @property
    @pulumi.getter
    def entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionEntityArgs']]]]:
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionEntityArgs']]]]):
        pulumi.set(self, "entities", value)

    @property
    @pulumi.getter(name="entityIdComparisons")
    def entity_id_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionEntityIdComparisonArgs']]]]:
        return pulumi.get(self, "entity_id_comparisons")

    @entity_id_comparisons.setter
    def entity_id_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionEntityIdComparisonArgs']]]]):
        pulumi.set(self, "entity_id_comparisons", value)

    @property
    @pulumi.getter(name="hostTeches")
    def host_teches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionHostTechArgs']]]]:
        return pulumi.get(self, "host_teches")

    @host_teches.setter
    def host_teches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionHostTechArgs']]]]):
        pulumi.set(self, "host_teches", value)

    @property
    @pulumi.getter(name="hypervisorTypeComparisions")
    def hypervisor_type_comparisions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionHypervisorTypeComparisionArgs']]]]:
        return pulumi.get(self, "hypervisor_type_comparisions")

    @hypervisor_type_comparisions.setter
    def hypervisor_type_comparisions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionHypervisorTypeComparisionArgs']]]]):
        pulumi.set(self, "hypervisor_type_comparisions", value)

    @property
    @pulumi.getter
    def hypervisors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionHypervisorArgs']]]]:
        return pulumi.get(self, "hypervisors")

    @hypervisors.setter
    def hypervisors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionHypervisorArgs']]]]):
        pulumi.set(self, "hypervisors", value)

    @property
    @pulumi.getter(name="indexedNameComparisons")
    def indexed_name_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedNameComparisonArgs']]]]:
        return pulumi.get(self, "indexed_name_comparisons")

    @indexed_name_comparisons.setter
    def indexed_name_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedNameComparisonArgs']]]]):
        pulumi.set(self, "indexed_name_comparisons", value)

    @property
    @pulumi.getter(name="indexedNames")
    def indexed_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedNameArgs']]]]:
        return pulumi.get(self, "indexed_names")

    @indexed_names.setter
    def indexed_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedNameArgs']]]]):
        pulumi.set(self, "indexed_names", value)

    @property
    @pulumi.getter(name="indexedStringComparisons")
    def indexed_string_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedStringComparisonArgs']]]]:
        return pulumi.get(self, "indexed_string_comparisons")

    @indexed_string_comparisons.setter
    def indexed_string_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedStringComparisonArgs']]]]):
        pulumi.set(self, "indexed_string_comparisons", value)

    @property
    @pulumi.getter(name="indexedStrings")
    def indexed_strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedStringArgs']]]]:
        return pulumi.get(self, "indexed_strings")

    @indexed_strings.setter
    def indexed_strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedStringArgs']]]]):
        pulumi.set(self, "indexed_strings", value)

    @property
    @pulumi.getter(name="indexedTagComparisons")
    def indexed_tag_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedTagComparisonArgs']]]]:
        return pulumi.get(self, "indexed_tag_comparisons")

    @indexed_tag_comparisons.setter
    def indexed_tag_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedTagComparisonArgs']]]]):
        pulumi.set(self, "indexed_tag_comparisons", value)

    @property
    @pulumi.getter(name="indexedTags")
    def indexed_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedTagArgs']]]]:
        return pulumi.get(self, "indexed_tags")

    @indexed_tags.setter
    def indexed_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIndexedTagArgs']]]]):
        pulumi.set(self, "indexed_tags", value)

    @property
    @pulumi.getter(name="integerComparisons")
    def integer_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIntegerComparisonArgs']]]]:
        return pulumi.get(self, "integer_comparisons")

    @integer_comparisons.setter
    def integer_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIntegerComparisonArgs']]]]):
        pulumi.set(self, "integer_comparisons", value)

    @property
    @pulumi.getter
    def integers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIntegerArgs']]]]:
        return pulumi.get(self, "integers")

    @integers.setter
    def integers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIntegerArgs']]]]):
        pulumi.set(self, "integers", value)

    @property
    @pulumi.getter(name="ipaddressComparisons")
    def ipaddress_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIpaddressComparisonArgs']]]]:
        return pulumi.get(self, "ipaddress_comparisons")

    @ipaddress_comparisons.setter
    def ipaddress_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIpaddressComparisonArgs']]]]):
        pulumi.set(self, "ipaddress_comparisons", value)

    @property
    @pulumi.getter
    def ipaddresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIpaddressArgs']]]]:
        return pulumi.get(self, "ipaddresses")

    @ipaddresses.setter
    def ipaddresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionIpaddressArgs']]]]):
        pulumi.set(self, "ipaddresses", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionKeyArgs']]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionKeyArgs']]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="mobilePlatformComparisons")
    def mobile_platform_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionMobilePlatformComparisonArgs']]]]:
        return pulumi.get(self, "mobile_platform_comparisons")

    @mobile_platform_comparisons.setter
    def mobile_platform_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionMobilePlatformComparisonArgs']]]]):
        pulumi.set(self, "mobile_platform_comparisons", value)

    @property
    @pulumi.getter(name="mobilePlatforms")
    def mobile_platforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionMobilePlatformArgs']]]]:
        return pulumi.get(self, "mobile_platforms")

    @mobile_platforms.setter
    def mobile_platforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionMobilePlatformArgs']]]]):
        pulumi.set(self, "mobile_platforms", value)

    @property
    @pulumi.getter(name="osArches")
    def os_arches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOsArchArgs']]]]:
        return pulumi.get(self, "os_arches")

    @os_arches.setter
    def os_arches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOsArchArgs']]]]):
        pulumi.set(self, "os_arches", value)

    @property
    @pulumi.getter(name="osTypes")
    def os_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOsTypeArgs']]]]:
        return pulumi.get(self, "os_types")

    @os_types.setter
    def os_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOsTypeArgs']]]]):
        pulumi.set(self, "os_types", value)

    @property
    @pulumi.getter(name="osarchitectureComparisons")
    def osarchitecture_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOsarchitectureComparisonArgs']]]]:
        return pulumi.get(self, "osarchitecture_comparisons")

    @osarchitecture_comparisons.setter
    def osarchitecture_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOsarchitectureComparisonArgs']]]]):
        pulumi.set(self, "osarchitecture_comparisons", value)

    @property
    @pulumi.getter(name="ostypeComparisons")
    def ostype_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOstypeComparisonArgs']]]]:
        return pulumi.get(self, "ostype_comparisons")

    @ostype_comparisons.setter
    def ostype_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionOstypeComparisonArgs']]]]):
        pulumi.set(self, "ostype_comparisons", value)

    @property
    @pulumi.getter(name="paasTypeComparisons")
    def paas_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionPaasTypeComparisonArgs']]]]:
        return pulumi.get(self, "paas_type_comparisons")

    @paas_type_comparisons.setter
    def paas_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionPaasTypeComparisonArgs']]]]):
        pulumi.set(self, "paas_type_comparisons", value)

    @property
    @pulumi.getter(name="paasTypes")
    def paas_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionPaasTypeArgs']]]]:
        return pulumi.get(self, "paas_types")

    @paas_types.setter
    def paas_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionPaasTypeArgs']]]]):
        pulumi.set(self, "paas_types", value)

    @property
    @pulumi.getter(name="processMetadataConditionKeys")
    def process_metadata_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionProcessMetadataConditionKeyArgs']]]]:
        return pulumi.get(self, "process_metadata_condition_keys")

    @process_metadata_condition_keys.setter
    def process_metadata_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionProcessMetadataConditionKeyArgs']]]]):
        pulumi.set(self, "process_metadata_condition_keys", value)

    @property
    @pulumi.getter(name="processMetadatas")
    def process_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionProcessMetadataArgs']]]]:
        return pulumi.get(self, "process_metadatas")

    @process_metadatas.setter
    def process_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionProcessMetadataArgs']]]]):
        pulumi.set(self, "process_metadatas", value)

    @property
    @pulumi.getter(name="serviceTopologies")
    def service_topologies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTopologyArgs']]]]:
        return pulumi.get(self, "service_topologies")

    @service_topologies.setter
    def service_topologies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTopologyArgs']]]]):
        pulumi.set(self, "service_topologies", value)

    @property
    @pulumi.getter(name="serviceTopologyComparisons")
    def service_topology_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTopologyComparisonArgs']]]]:
        return pulumi.get(self, "service_topology_comparisons")

    @service_topology_comparisons.setter
    def service_topology_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTopologyComparisonArgs']]]]):
        pulumi.set(self, "service_topology_comparisons", value)

    @property
    @pulumi.getter(name="serviceTypeComparisons")
    def service_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTypeComparisonArgs']]]]:
        return pulumi.get(self, "service_type_comparisons")

    @service_type_comparisons.setter
    def service_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTypeComparisonArgs']]]]):
        pulumi.set(self, "service_type_comparisons", value)

    @property
    @pulumi.getter(name="serviceTypes")
    def service_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTypeArgs']]]]:
        return pulumi.get(self, "service_types")

    @service_types.setter
    def service_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionServiceTypeArgs']]]]):
        pulumi.set(self, "service_types", value)

    @property
    @pulumi.getter(name="simpleHostTechComparisons")
    def simple_host_tech_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSimpleHostTechComparisonArgs']]]]:
        return pulumi.get(self, "simple_host_tech_comparisons")

    @simple_host_tech_comparisons.setter
    def simple_host_tech_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSimpleHostTechComparisonArgs']]]]):
        pulumi.set(self, "simple_host_tech_comparisons", value)

    @property
    @pulumi.getter(name="simpleTechComparisons")
    def simple_tech_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSimpleTechComparisonArgs']]]]:
        return pulumi.get(self, "simple_tech_comparisons")

    @simple_tech_comparisons.setter
    def simple_tech_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSimpleTechComparisonArgs']]]]):
        pulumi.set(self, "simple_tech_comparisons", value)

    @property
    @pulumi.getter(name="stringComparisons")
    def string_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringComparisonArgs']]]]:
        return pulumi.get(self, "string_comparisons")

    @string_comparisons.setter
    def string_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringComparisonArgs']]]]):
        pulumi.set(self, "string_comparisons", value)

    @property
    @pulumi.getter(name="stringConditionKeys")
    def string_condition_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringConditionKeyArgs']]]]:
        return pulumi.get(self, "string_condition_keys")

    @string_condition_keys.setter
    def string_condition_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringConditionKeyArgs']]]]):
        pulumi.set(self, "string_condition_keys", value)

    @property
    @pulumi.getter(name="stringKeys")
    def string_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringKeyArgs']]]]:
        return pulumi.get(self, "string_keys")

    @string_keys.setter
    def string_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringKeyArgs']]]]):
        pulumi.set(self, "string_keys", value)

    @property
    @pulumi.getter
    def strings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringArgs']]]]:
        return pulumi.get(self, "strings")

    @strings.setter
    def strings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionStringArgs']]]]):
        pulumi.set(self, "strings", value)

    @property
    @pulumi.getter(name="syntheticEngineTypeComparisons")
    def synthetic_engine_type_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSyntheticEngineTypeComparisonArgs']]]]:
        return pulumi.get(self, "synthetic_engine_type_comparisons")

    @synthetic_engine_type_comparisons.setter
    def synthetic_engine_type_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSyntheticEngineTypeComparisonArgs']]]]):
        pulumi.set(self, "synthetic_engine_type_comparisons", value)

    @property
    @pulumi.getter(name="syntheticEngines")
    def synthetic_engines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSyntheticEngineArgs']]]]:
        return pulumi.get(self, "synthetic_engines")

    @synthetic_engines.setter
    def synthetic_engines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionSyntheticEngineArgs']]]]):
        pulumi.set(self, "synthetic_engines", value)

    @property
    @pulumi.getter(name="tagComparisons")
    def tag_comparisons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionTagComparisonArgs']]]]:
        return pulumi.get(self, "tag_comparisons")

    @tag_comparisons.setter
    def tag_comparisons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionTagComparisonArgs']]]]):
        pulumi.set(self, "tag_comparisons", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def teches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionTechArgs']]]]:
        return pulumi.get(self, "teches")

    @teches.setter
    def teches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceNamingConditionConditionTechArgs']]]]):
        pulumi.set(self, "teches", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionApplicationTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionApplicationTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionAzureComputeModeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionAzureComputeModeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionAzureSkuComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionAzureSkusArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionBaseComparisonBasicArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionBaseConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionBitnessArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionBitnessComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionCloudTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionCloudTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionComparisonArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionCustomApplicationTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionCustomApplicationTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionCustomHostMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataDynamicKeyArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionCustomHostMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs'],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionCustomHostMetadataDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionCustomProcessMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataDynamicKeyArgs'],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionCustomProcessMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs'],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs']:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input['ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs']):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionCustomProcessMetadataDynamicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source", source)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionDatabaseTopologyArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionDatabaseTopologyComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionDcrumDecoderArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionDcrumDecoderComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionEntityArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionEntityIdComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionHostTechArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ServiceNamingConditionConditionHostTechValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ServiceNamingConditionConditionHostTechValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ServiceNamingConditionConditionHostTechValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionHostTechValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class ServiceNamingConditionConditionHypervisorArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionHypervisorTypeComparisionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIndexedNameArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIndexedNameComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIndexedStringArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIndexedStringComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIndexedTagArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ServiceNamingConditionConditionIndexedTagValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ServiceNamingConditionConditionIndexedTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ServiceNamingConditionConditionIndexedTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIndexedTagComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ServiceNamingConditionConditionIndexedTagComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ServiceNamingConditionConditionIndexedTagComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ServiceNamingConditionConditionIndexedTagComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIndexedTagComparisonValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIndexedTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIntegerArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIntegerComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIpaddressArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionIpaddressComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionMobilePlatformArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionMobilePlatformComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionOsArchArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionOsTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionOsarchitectureComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionOstypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionPaasTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionPaasTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionProcessMetadataArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionProcessMetadataConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionServiceTopologyArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionServiceTopologyComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionServiceTypeArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionServiceTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionSimpleHostTechComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ServiceNamingConditionConditionSimpleHostTechComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ServiceNamingConditionConditionSimpleHostTechComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ServiceNamingConditionConditionSimpleHostTechComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionSimpleHostTechComparisonValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class ServiceNamingConditionConditionSimpleTechComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ServiceNamingConditionConditionSimpleTechComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ServiceNamingConditionConditionSimpleTechComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ServiceNamingConditionConditionSimpleTechComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionSimpleTechComparisonValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class ServiceNamingConditionConditionStringArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionStringComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionStringConditionKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionStringKeyArgs:
    def __init__(__self__, *,
                 attribute: pulumi.Input[str],
                 dynamic_key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "dynamic_key", dynamic_key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)

    @property
    @pulumi.getter
    def attribute(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter(name="dynamicKey")
    def dynamic_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamic_key")

    @dynamic_key.setter
    def dynamic_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamic_key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)


@pulumi.input_type
class ServiceNamingConditionConditionSyntheticEngineArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionSyntheticEngineTypeComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionTagArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ServiceNamingConditionConditionTagValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ServiceNamingConditionConditionTagValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ServiceNamingConditionConditionTagValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionTagComparisonArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ServiceNamingConditionConditionTagComparisonValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if type is not None:
            warnings.warn("""The value of the attribute type is implicit, therefore shouldn't get specified""", DeprecationWarning)
            pulumi.log.warn("""type is deprecated: The value of the attribute type is implicit, therefore shouldn't get specified""")
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ServiceNamingConditionConditionTagComparisonValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ServiceNamingConditionConditionTagComparisonValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionTagComparisonValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionTagValueArgs:
    def __init__(__self__, *,
                 context: pulumi.Input[str],
                 key: pulumi.Input[str],
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Input[str]:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: pulumi.Input[str]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionTechArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 negate: Optional[pulumi.Input[bool]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ServiceNamingConditionConditionTechValueArgs']] = None):
        pulumi.set(__self__, "operator", operator)
        if negate is not None:
            pulumi.set(__self__, "negate", negate)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def negate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "negate")

    @negate.setter
    def negate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "negate", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ServiceNamingConditionConditionTechValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ServiceNamingConditionConditionTechValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ServiceNamingConditionConditionTechValueArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 unknowns: Optional[pulumi.Input[str]] = None,
                 verbatim_type: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unknowns is not None:
            pulumi.set(__self__, "unknowns", unknowns)
        if verbatim_type is not None:
            pulumi.set(__self__, "verbatim_type", verbatim_type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unknowns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unknowns")

    @unknowns.setter
    def unknowns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknowns", value)

    @property
    @pulumi.getter(name="verbatimType")
    def verbatim_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "verbatim_type")

    @verbatim_type.setter
    def verbatim_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verbatim_type", value)


@pulumi.input_type
class SessionReplayWebPrivacyMaskingPresetsArgs:
    def __init__(__self__, *,
                 playback_masking_preset: pulumi.Input[str],
                 recording_masking_preset: pulumi.Input[str],
                 playback_masking_allow_list_rules: Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesArgs']] = None,
                 playback_masking_block_list_rules: Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesArgs']] = None,
                 recording_masking_allow_list_rules: Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesArgs']] = None,
                 recording_masking_block_list_rules: Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesArgs']] = None):
        """
        :param pulumi.Input[str] playback_masking_preset: (Field has overlap with `ApplicationDataPrivacy`) Possible Values: `MASK_ALL`, `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`
        :param pulumi.Input[str] recording_masking_preset: (Field has overlap with `ApplicationDataPrivacy`) Possible Values: `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`, `MASK_ALL`
        :param pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesArgs'] playback_masking_allow_list_rules: (Field has overlap with `ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
        :param pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesArgs'] playback_masking_block_list_rules: (Field has overlap with `ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
        :param pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesArgs'] recording_masking_allow_list_rules: (Field has overlap with `ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
        :param pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesArgs'] recording_masking_block_list_rules: (Field has overlap with `ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
        """
        pulumi.set(__self__, "playback_masking_preset", playback_masking_preset)
        pulumi.set(__self__, "recording_masking_preset", recording_masking_preset)
        if playback_masking_allow_list_rules is not None:
            pulumi.set(__self__, "playback_masking_allow_list_rules", playback_masking_allow_list_rules)
        if playback_masking_block_list_rules is not None:
            pulumi.set(__self__, "playback_masking_block_list_rules", playback_masking_block_list_rules)
        if recording_masking_allow_list_rules is not None:
            pulumi.set(__self__, "recording_masking_allow_list_rules", recording_masking_allow_list_rules)
        if recording_masking_block_list_rules is not None:
            pulumi.set(__self__, "recording_masking_block_list_rules", recording_masking_block_list_rules)

    @property
    @pulumi.getter(name="playbackMaskingPreset")
    def playback_masking_preset(self) -> pulumi.Input[str]:
        """
        (Field has overlap with `ApplicationDataPrivacy`) Possible Values: `MASK_ALL`, `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`
        """
        return pulumi.get(self, "playback_masking_preset")

    @playback_masking_preset.setter
    def playback_masking_preset(self, value: pulumi.Input[str]):
        pulumi.set(self, "playback_masking_preset", value)

    @property
    @pulumi.getter(name="recordingMaskingPreset")
    def recording_masking_preset(self) -> pulumi.Input[str]:
        """
        (Field has overlap with `ApplicationDataPrivacy`) Possible Values: `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`, `MASK_ALL`
        """
        return pulumi.get(self, "recording_masking_preset")

    @recording_masking_preset.setter
    def recording_masking_preset(self, value: pulumi.Input[str]):
        pulumi.set(self, "recording_masking_preset", value)

    @property
    @pulumi.getter(name="playbackMaskingAllowListRules")
    def playback_masking_allow_list_rules(self) -> Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesArgs']]:
        """
        (Field has overlap with `ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
        """
        return pulumi.get(self, "playback_masking_allow_list_rules")

    @playback_masking_allow_list_rules.setter
    def playback_masking_allow_list_rules(self, value: Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesArgs']]):
        pulumi.set(self, "playback_masking_allow_list_rules", value)

    @property
    @pulumi.getter(name="playbackMaskingBlockListRules")
    def playback_masking_block_list_rules(self) -> Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesArgs']]:
        """
        (Field has overlap with `ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
        """
        return pulumi.get(self, "playback_masking_block_list_rules")

    @playback_masking_block_list_rules.setter
    def playback_masking_block_list_rules(self, value: Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesArgs']]):
        pulumi.set(self, "playback_masking_block_list_rules", value)

    @property
    @pulumi.getter(name="recordingMaskingAllowListRules")
    def recording_masking_allow_list_rules(self) -> Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesArgs']]:
        """
        (Field has overlap with `ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
        """
        return pulumi.get(self, "recording_masking_allow_list_rules")

    @recording_masking_allow_list_rules.setter
    def recording_masking_allow_list_rules(self, value: Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesArgs']]):
        pulumi.set(self, "recording_masking_allow_list_rules", value)

    @property
    @pulumi.getter(name="recordingMaskingBlockListRules")
    def recording_masking_block_list_rules(self) -> Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesArgs']]:
        """
        (Field has overlap with `ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
        """
        return pulumi.get(self, "recording_masking_block_list_rules")

    @recording_masking_block_list_rules.setter
    def recording_masking_block_list_rules(self, value: Optional[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesArgs']]):
        pulumi.set(self, "recording_masking_block_list_rules", value)


@pulumi.input_type
class SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesArgs:
    def __init__(__self__, *,
                 allow_list_rules: pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRuleArgs']]]):
        pulumi.set(__self__, "allow_list_rules", allow_list_rules)

    @property
    @pulumi.getter(name="allowListRules")
    def allow_list_rules(self) -> pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRuleArgs']]]:
        return pulumi.get(self, "allow_list_rules")

    @allow_list_rules.setter
    def allow_list_rules(self, value: pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRuleArgs']]]):
        pulumi.set(self, "allow_list_rules", value)


@pulumi.input_type
class SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRuleArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 attribute_expression: Optional[pulumi.Input[str]] = None,
                 css_expression: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "target", target)
        if attribute_expression is not None:
            pulumi.set(__self__, "attribute_expression", attribute_expression)
        if css_expression is not None:
            pulumi.set(__self__, "css_expression", css_expression)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="attributeExpression")
    def attribute_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_expression")

    @attribute_expression.setter
    def attribute_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_expression", value)

    @property
    @pulumi.getter(name="cssExpression")
    def css_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "css_expression")

    @css_expression.setter
    def css_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "css_expression", value)


@pulumi.input_type
class SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesArgs:
    def __init__(__self__, *,
                 block_list_rules: pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRuleArgs']]]):
        pulumi.set(__self__, "block_list_rules", block_list_rules)

    @property
    @pulumi.getter(name="blockListRules")
    def block_list_rules(self) -> pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRuleArgs']]]:
        return pulumi.get(self, "block_list_rules")

    @block_list_rules.setter
    def block_list_rules(self, value: pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRuleArgs']]]):
        pulumi.set(self, "block_list_rules", value)


@pulumi.input_type
class SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRuleArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 attribute_expression: Optional[pulumi.Input[str]] = None,
                 css_expression: Optional[pulumi.Input[str]] = None,
                 hide_user_interaction: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "target", target)
        if attribute_expression is not None:
            pulumi.set(__self__, "attribute_expression", attribute_expression)
        if css_expression is not None:
            pulumi.set(__self__, "css_expression", css_expression)
        if hide_user_interaction is not None:
            pulumi.set(__self__, "hide_user_interaction", hide_user_interaction)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="attributeExpression")
    def attribute_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_expression")

    @attribute_expression.setter
    def attribute_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_expression", value)

    @property
    @pulumi.getter(name="cssExpression")
    def css_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "css_expression")

    @css_expression.setter
    def css_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "css_expression", value)

    @property
    @pulumi.getter(name="hideUserInteraction")
    def hide_user_interaction(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_user_interaction")

    @hide_user_interaction.setter
    def hide_user_interaction(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_user_interaction", value)


@pulumi.input_type
class SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesArgs:
    def __init__(__self__, *,
                 allow_list_rules: pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRuleArgs']]]):
        pulumi.set(__self__, "allow_list_rules", allow_list_rules)

    @property
    @pulumi.getter(name="allowListRules")
    def allow_list_rules(self) -> pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRuleArgs']]]:
        return pulumi.get(self, "allow_list_rules")

    @allow_list_rules.setter
    def allow_list_rules(self, value: pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRuleArgs']]]):
        pulumi.set(self, "allow_list_rules", value)


@pulumi.input_type
class SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRuleArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 attribute_expression: Optional[pulumi.Input[str]] = None,
                 css_expression: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "target", target)
        if attribute_expression is not None:
            pulumi.set(__self__, "attribute_expression", attribute_expression)
        if css_expression is not None:
            pulumi.set(__self__, "css_expression", css_expression)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="attributeExpression")
    def attribute_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_expression")

    @attribute_expression.setter
    def attribute_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_expression", value)

    @property
    @pulumi.getter(name="cssExpression")
    def css_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "css_expression")

    @css_expression.setter
    def css_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "css_expression", value)


@pulumi.input_type
class SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesArgs:
    def __init__(__self__, *,
                 block_list_rules: pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRuleArgs']]]):
        pulumi.set(__self__, "block_list_rules", block_list_rules)

    @property
    @pulumi.getter(name="blockListRules")
    def block_list_rules(self) -> pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRuleArgs']]]:
        return pulumi.get(self, "block_list_rules")

    @block_list_rules.setter
    def block_list_rules(self, value: pulumi.Input[Sequence[pulumi.Input['SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRuleArgs']]]):
        pulumi.set(self, "block_list_rules", value)


@pulumi.input_type
class SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRuleArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 attribute_expression: Optional[pulumi.Input[str]] = None,
                 css_expression: Optional[pulumi.Input[str]] = None,
                 hide_user_interaction: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "target", target)
        if attribute_expression is not None:
            pulumi.set(__self__, "attribute_expression", attribute_expression)
        if css_expression is not None:
            pulumi.set(__self__, "css_expression", css_expression)
        if hide_user_interaction is not None:
            pulumi.set(__self__, "hide_user_interaction", hide_user_interaction)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="attributeExpression")
    def attribute_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_expression")

    @attribute_expression.setter
    def attribute_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_expression", value)

    @property
    @pulumi.getter(name="cssExpression")
    def css_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "css_expression")

    @css_expression.setter
    def css_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "css_expression", value)

    @property
    @pulumi.getter(name="hideUserInteraction")
    def hide_user_interaction(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hide_user_interaction")

    @hide_user_interaction.setter
    def hide_user_interaction(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_user_interaction", value)


@pulumi.input_type
class SloV2ErrorBudgetBurnRateArgs:
    def __init__(__self__, *,
                 burn_rate_visualization_enabled: pulumi.Input[bool],
                 fast_burn_threshold: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] burn_rate_visualization_enabled: Burn rate visualization enabled
        :param pulumi.Input[float] fast_burn_threshold: The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
        """
        pulumi.set(__self__, "burn_rate_visualization_enabled", burn_rate_visualization_enabled)
        if fast_burn_threshold is not None:
            pulumi.set(__self__, "fast_burn_threshold", fast_burn_threshold)

    @property
    @pulumi.getter(name="burnRateVisualizationEnabled")
    def burn_rate_visualization_enabled(self) -> pulumi.Input[bool]:
        """
        Burn rate visualization enabled
        """
        return pulumi.get(self, "burn_rate_visualization_enabled")

    @burn_rate_visualization_enabled.setter
    def burn_rate_visualization_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "burn_rate_visualization_enabled", value)

    @property
    @pulumi.getter(name="fastBurnThreshold")
    def fast_burn_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
        """
        return pulumi.get(self, "fast_burn_threshold")

    @fast_burn_threshold.setter
    def fast_burn_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "fast_burn_threshold", value)


@pulumi.input_type
class SpanCaptureRuleMatchesArgs:
    def __init__(__self__, *,
                 matches: pulumi.Input[Sequence[pulumi.Input['SpanCaptureRuleMatchesMatchArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SpanCaptureRuleMatchesMatchArgs']]] matches: Matching strategies for the Span
        """
        pulumi.set(__self__, "matches", matches)

    @property
    @pulumi.getter
    def matches(self) -> pulumi.Input[Sequence[pulumi.Input['SpanCaptureRuleMatchesMatchArgs']]]:
        """
        Matching strategies for the Span
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: pulumi.Input[Sequence[pulumi.Input['SpanCaptureRuleMatchesMatchArgs']]]):
        pulumi.set(self, "matches", value)


@pulumi.input_type
class SpanCaptureRuleMatchesMatchArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 source: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "source", source)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SpanContextPropagationMatchesArgs:
    def __init__(__self__, *,
                 matches: pulumi.Input[Sequence[pulumi.Input['SpanContextPropagationMatchesMatchArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SpanContextPropagationMatchesMatchArgs']]] matches: Matching strategies for the Span
        """
        pulumi.set(__self__, "matches", matches)

    @property
    @pulumi.getter
    def matches(self) -> pulumi.Input[Sequence[pulumi.Input['SpanContextPropagationMatchesMatchArgs']]]:
        """
        Matching strategies for the Span
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: pulumi.Input[Sequence[pulumi.Input['SpanContextPropagationMatchesMatchArgs']]]):
        pulumi.set(self, "matches", value)


@pulumi.input_type
class SpanContextPropagationMatchesMatchArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 source: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "source", source)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SpanEntryPointMatchesArgs:
    def __init__(__self__, *,
                 matches: pulumi.Input[Sequence[pulumi.Input['SpanEntryPointMatchesMatchArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SpanEntryPointMatchesMatchArgs']]] matches: Matching strategies for the Span
        """
        pulumi.set(__self__, "matches", matches)

    @property
    @pulumi.getter
    def matches(self) -> pulumi.Input[Sequence[pulumi.Input['SpanEntryPointMatchesMatchArgs']]]:
        """
        Matching strategies for the Span
        """
        return pulumi.get(self, "matches")

    @matches.setter
    def matches(self, value: pulumi.Input[Sequence[pulumi.Input['SpanEntryPointMatchesMatchArgs']]]):
        pulumi.set(self, "matches", value)


@pulumi.input_type
class SpanEntryPointMatchesMatchArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input[str],
                 source: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "source", source)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input[str]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class UpdateWindowsDailyRecurrenceArgs:
    def __init__(__self__, *,
                 every: pulumi.Input[int],
                 recurrence_range: pulumi.Input['UpdateWindowsDailyRecurrenceRecurrenceRangeArgs'],
                 update_time: pulumi.Input['UpdateWindowsDailyRecurrenceUpdateTimeArgs']):
        pulumi.set(__self__, "every", every)
        pulumi.set(__self__, "recurrence_range", recurrence_range)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def every(self) -> pulumi.Input[int]:
        return pulumi.get(self, "every")

    @every.setter
    def every(self, value: pulumi.Input[int]):
        pulumi.set(self, "every", value)

    @property
    @pulumi.getter(name="recurrenceRange")
    def recurrence_range(self) -> pulumi.Input['UpdateWindowsDailyRecurrenceRecurrenceRangeArgs']:
        return pulumi.get(self, "recurrence_range")

    @recurrence_range.setter
    def recurrence_range(self, value: pulumi.Input['UpdateWindowsDailyRecurrenceRecurrenceRangeArgs']):
        pulumi.set(self, "recurrence_range", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Input['UpdateWindowsDailyRecurrenceUpdateTimeArgs']:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: pulumi.Input['UpdateWindowsDailyRecurrenceUpdateTimeArgs']):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class UpdateWindowsDailyRecurrenceRecurrenceRangeArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[str],
                 start: pulumi.Input[str]):
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[str]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class UpdateWindowsDailyRecurrenceUpdateTimeArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 start_time: pulumi.Input[str],
                 time_zone: pulumi.Input[str]):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class UpdateWindowsMonthlyRecurrenceArgs:
    def __init__(__self__, *,
                 every: pulumi.Input[int],
                 recurrence_range: pulumi.Input['UpdateWindowsMonthlyRecurrenceRecurrenceRangeArgs'],
                 selected_month_day: pulumi.Input[int],
                 update_time: pulumi.Input['UpdateWindowsMonthlyRecurrenceUpdateTimeArgs']):
        pulumi.set(__self__, "every", every)
        pulumi.set(__self__, "recurrence_range", recurrence_range)
        pulumi.set(__self__, "selected_month_day", selected_month_day)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def every(self) -> pulumi.Input[int]:
        return pulumi.get(self, "every")

    @every.setter
    def every(self, value: pulumi.Input[int]):
        pulumi.set(self, "every", value)

    @property
    @pulumi.getter(name="recurrenceRange")
    def recurrence_range(self) -> pulumi.Input['UpdateWindowsMonthlyRecurrenceRecurrenceRangeArgs']:
        return pulumi.get(self, "recurrence_range")

    @recurrence_range.setter
    def recurrence_range(self, value: pulumi.Input['UpdateWindowsMonthlyRecurrenceRecurrenceRangeArgs']):
        pulumi.set(self, "recurrence_range", value)

    @property
    @pulumi.getter(name="selectedMonthDay")
    def selected_month_day(self) -> pulumi.Input[int]:
        return pulumi.get(self, "selected_month_day")

    @selected_month_day.setter
    def selected_month_day(self, value: pulumi.Input[int]):
        pulumi.set(self, "selected_month_day", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Input['UpdateWindowsMonthlyRecurrenceUpdateTimeArgs']:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: pulumi.Input['UpdateWindowsMonthlyRecurrenceUpdateTimeArgs']):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class UpdateWindowsMonthlyRecurrenceRecurrenceRangeArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[str],
                 start: pulumi.Input[str]):
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[str]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class UpdateWindowsMonthlyRecurrenceUpdateTimeArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 start_time: pulumi.Input[str],
                 time_zone: pulumi.Input[str]):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class UpdateWindowsOnceRecurrenceArgs:
    def __init__(__self__, *,
                 recurrence_range: pulumi.Input['UpdateWindowsOnceRecurrenceRecurrenceRangeArgs']):
        pulumi.set(__self__, "recurrence_range", recurrence_range)

    @property
    @pulumi.getter(name="recurrenceRange")
    def recurrence_range(self) -> pulumi.Input['UpdateWindowsOnceRecurrenceRecurrenceRangeArgs']:
        return pulumi.get(self, "recurrence_range")

    @recurrence_range.setter
    def recurrence_range(self, value: pulumi.Input['UpdateWindowsOnceRecurrenceRecurrenceRangeArgs']):
        pulumi.set(self, "recurrence_range", value)


@pulumi.input_type
class UpdateWindowsOnceRecurrenceRecurrenceRangeArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[str],
                 start: pulumi.Input[str]):
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[str]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class UpdateWindowsWeeklyRecurrenceArgs:
    def __init__(__self__, *,
                 every: pulumi.Input[int],
                 recurrence_range: pulumi.Input['UpdateWindowsWeeklyRecurrenceRecurrenceRangeArgs'],
                 selected_week_days: pulumi.Input['UpdateWindowsWeeklyRecurrenceSelectedWeekDaysArgs'],
                 update_time: pulumi.Input['UpdateWindowsWeeklyRecurrenceUpdateTimeArgs']):
        pulumi.set(__self__, "every", every)
        pulumi.set(__self__, "recurrence_range", recurrence_range)
        pulumi.set(__self__, "selected_week_days", selected_week_days)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def every(self) -> pulumi.Input[int]:
        return pulumi.get(self, "every")

    @every.setter
    def every(self, value: pulumi.Input[int]):
        pulumi.set(self, "every", value)

    @property
    @pulumi.getter(name="recurrenceRange")
    def recurrence_range(self) -> pulumi.Input['UpdateWindowsWeeklyRecurrenceRecurrenceRangeArgs']:
        return pulumi.get(self, "recurrence_range")

    @recurrence_range.setter
    def recurrence_range(self, value: pulumi.Input['UpdateWindowsWeeklyRecurrenceRecurrenceRangeArgs']):
        pulumi.set(self, "recurrence_range", value)

    @property
    @pulumi.getter(name="selectedWeekDays")
    def selected_week_days(self) -> pulumi.Input['UpdateWindowsWeeklyRecurrenceSelectedWeekDaysArgs']:
        return pulumi.get(self, "selected_week_days")

    @selected_week_days.setter
    def selected_week_days(self, value: pulumi.Input['UpdateWindowsWeeklyRecurrenceSelectedWeekDaysArgs']):
        pulumi.set(self, "selected_week_days", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Input['UpdateWindowsWeeklyRecurrenceUpdateTimeArgs']:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: pulumi.Input['UpdateWindowsWeeklyRecurrenceUpdateTimeArgs']):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class UpdateWindowsWeeklyRecurrenceRecurrenceRangeArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[str],
                 start: pulumi.Input[str]):
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[str]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class UpdateWindowsWeeklyRecurrenceSelectedWeekDaysArgs:
    def __init__(__self__, *,
                 friday: pulumi.Input[bool],
                 monday: pulumi.Input[bool],
                 saturday: pulumi.Input[bool],
                 sunday: pulumi.Input[bool],
                 thursday: pulumi.Input[bool],
                 tuesday: pulumi.Input[bool],
                 wednesday: pulumi.Input[bool]):
        pulumi.set(__self__, "friday", friday)
        pulumi.set(__self__, "monday", monday)
        pulumi.set(__self__, "saturday", saturday)
        pulumi.set(__self__, "sunday", sunday)
        pulumi.set(__self__, "thursday", thursday)
        pulumi.set(__self__, "tuesday", tuesday)
        pulumi.set(__self__, "wednesday", wednesday)

    @property
    @pulumi.getter
    def friday(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "friday")

    @friday.setter
    def friday(self, value: pulumi.Input[bool]):
        pulumi.set(self, "friday", value)

    @property
    @pulumi.getter
    def monday(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "monday")

    @monday.setter
    def monday(self, value: pulumi.Input[bool]):
        pulumi.set(self, "monday", value)

    @property
    @pulumi.getter
    def saturday(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "saturday")

    @saturday.setter
    def saturday(self, value: pulumi.Input[bool]):
        pulumi.set(self, "saturday", value)

    @property
    @pulumi.getter
    def sunday(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "sunday")

    @sunday.setter
    def sunday(self, value: pulumi.Input[bool]):
        pulumi.set(self, "sunday", value)

    @property
    @pulumi.getter
    def thursday(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "thursday")

    @thursday.setter
    def thursday(self, value: pulumi.Input[bool]):
        pulumi.set(self, "thursday", value)

    @property
    @pulumi.getter
    def tuesday(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "tuesday")

    @tuesday.setter
    def tuesday(self, value: pulumi.Input[bool]):
        pulumi.set(self, "tuesday", value)

    @property
    @pulumi.getter
    def wednesday(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "wednesday")

    @wednesday.setter
    def wednesday(self, value: pulumi.Input[bool]):
        pulumi.set(self, "wednesday", value)


@pulumi.input_type
class UpdateWindowsWeeklyRecurrenceUpdateTimeArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 start_time: pulumi.Input[str],
                 time_zone: pulumi.Input[str]):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class UserActionMetricsFiltersArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['UserActionMetricsFiltersFilterArgs']]]):
        pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['UserActionMetricsFiltersFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['UserActionMetricsFiltersFilterArgs']]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class UserActionMetricsFiltersFilterArgs:
    def __init__(__self__, *,
                 field_name: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] value: Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user actions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user action field is extracted.
        """
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_ins is not None:
            pulumi.set(__self__, "value_ins", value_ins)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_name", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user actions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user action field is extracted.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueIns")
    def value_ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "value_ins")

    @value_ins.setter
    def value_ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value_ins", value)


@pulumi.input_type
class UserActionMetricsValueArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 field_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Possible Values: `COUNTER`, `FIELD`
        :param pulumi.Input[str] field_name: Field name
        """
        pulumi.set(__self__, "type", type)
        if field_name is not None:
            pulumi.set(__self__, "field_name", field_name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Possible Values: `COUNTER`, `FIELD`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name
        """
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_name", value)


@pulumi.input_type
class UserGroupPermissionsArgs:
    def __init__(__self__, *,
                 grants: pulumi.Input[Sequence[pulumi.Input['UserGroupPermissionsGrantArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['UserGroupPermissionsGrantArgs']]] grants: A permission granted to one or multiple environments
        """
        pulumi.set(__self__, "grants", grants)

    @property
    @pulumi.getter
    def grants(self) -> pulumi.Input[Sequence[pulumi.Input['UserGroupPermissionsGrantArgs']]]:
        """
        A permission granted to one or multiple environments
        """
        return pulumi.get(self, "grants")

    @grants.setter
    def grants(self, value: pulumi.Input[Sequence[pulumi.Input['UserGroupPermissionsGrantArgs']]]):
        pulumi.set(self, "grants", value)


@pulumi.input_type
class UserGroupPermissionsGrantArgs:
    def __init__(__self__, *,
                 permission: pulumi.Input[str],
                 environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "permission", permission)
        if environments is not None:
            pulumi.set(__self__, "environments", environments)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter
    def environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environments")

    @environments.setter
    def environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environments", value)


@pulumi.input_type
class UserSessionMetricsFiltersArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['UserSessionMetricsFiltersFilterArgs']]]):
        pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['UserSessionMetricsFiltersFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['UserSessionMetricsFiltersFilterArgs']]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class UserSessionMetricsFiltersFilterArgs:
    def __init__(__self__, *,
                 field_name: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] value: Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
        """
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_ins is not None:
            pulumi.set(__self__, "value_ins", value_ins)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_name", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user sessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user session field is extracted.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueIns")
    def value_ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "value_ins")

    @value_ins.setter
    def value_ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value_ins", value)


@pulumi.input_type
class UserSessionMetricsValueArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 field_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Possible Values: `COUNTER`, `FIELD`
        :param pulumi.Input[str] field_name: Field name
        """
        pulumi.set(__self__, "type", type)
        if field_name is not None:
            pulumi.set(__self__, "field_name", field_name)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Possible Values: `COUNTER`, `FIELD`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> Optional[pulumi.Input[str]]:
        """
        Field name
        """
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_name", value)


@pulumi.input_type
class VmwareAnomaliesDroppedPacketsDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['VmwareAnomaliesDroppedPacketsDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['VmwareAnomaliesDroppedPacketsDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['VmwareAnomaliesDroppedPacketsDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['VmwareAnomaliesDroppedPacketsDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class VmwareAnomaliesDroppedPacketsDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 dropped_packets_per_second: pulumi.Input[int]):
        pulumi.set(__self__, "dropped_packets_per_second", dropped_packets_per_second)

    @property
    @pulumi.getter(name="droppedPacketsPerSecond")
    def dropped_packets_per_second(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dropped_packets_per_second")

    @dropped_packets_per_second.setter
    def dropped_packets_per_second(self, value: pulumi.Input[int]):
        pulumi.set(self, "dropped_packets_per_second", value)


@pulumi.input_type
class VmwareAnomaliesEsxiHighCpuDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['VmwareAnomaliesEsxiHighCpuDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['VmwareAnomaliesEsxiHighCpuDetectionCustomThresholdsArgs'] custom_thresholds: Alert if **all three** conditions are met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['VmwareAnomaliesEsxiHighCpuDetectionCustomThresholdsArgs']]:
        """
        Alert if **all three** conditions are met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['VmwareAnomaliesEsxiHighCpuDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class VmwareAnomaliesEsxiHighCpuDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 cpu_peak_percentage: pulumi.Input[int],
                 cpu_usage_percentage: pulumi.Input[int],
                 vm_cpu_ready_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "cpu_peak_percentage", cpu_peak_percentage)
        pulumi.set(__self__, "cpu_usage_percentage", cpu_usage_percentage)
        pulumi.set(__self__, "vm_cpu_ready_percentage", vm_cpu_ready_percentage)

    @property
    @pulumi.getter(name="cpuPeakPercentage")
    def cpu_peak_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cpu_peak_percentage")

    @cpu_peak_percentage.setter
    def cpu_peak_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu_peak_percentage", value)

    @property
    @pulumi.getter(name="cpuUsagePercentage")
    def cpu_usage_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cpu_usage_percentage")

    @cpu_usage_percentage.setter
    def cpu_usage_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu_usage_percentage", value)

    @property
    @pulumi.getter(name="vmCpuReadyPercentage")
    def vm_cpu_ready_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "vm_cpu_ready_percentage")

    @vm_cpu_ready_percentage.setter
    def vm_cpu_ready_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "vm_cpu_ready_percentage", value)


@pulumi.input_type
class VmwareAnomaliesEsxiHighMemoryDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 compression_decompression_rate: pulumi.Input[float]):
        pulumi.set(__self__, "compression_decompression_rate", compression_decompression_rate)

    @property
    @pulumi.getter(name="compressionDecompressionRate")
    def compression_decompression_rate(self) -> pulumi.Input[float]:
        return pulumi.get(self, "compression_decompression_rate")

    @compression_decompression_rate.setter
    def compression_decompression_rate(self, value: pulumi.Input[float]):
        pulumi.set(self, "compression_decompression_rate", value)


@pulumi.input_type
class VmwareAnomaliesGuestCpuLimitDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['VmwareAnomaliesGuestCpuLimitDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['VmwareAnomaliesGuestCpuLimitDetectionCustomThresholdsArgs'] custom_thresholds: Alert if **all three** conditions are met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['VmwareAnomaliesGuestCpuLimitDetectionCustomThresholdsArgs']]:
        """
        Alert if **all three** conditions are met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['VmwareAnomaliesGuestCpuLimitDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class VmwareAnomaliesGuestCpuLimitDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 host_cpu_usage_percentage: pulumi.Input[int],
                 vm_cpu_ready_percentage: pulumi.Input[int],
                 vm_cpu_usage_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "host_cpu_usage_percentage", host_cpu_usage_percentage)
        pulumi.set(__self__, "vm_cpu_ready_percentage", vm_cpu_ready_percentage)
        pulumi.set(__self__, "vm_cpu_usage_percentage", vm_cpu_usage_percentage)

    @property
    @pulumi.getter(name="hostCpuUsagePercentage")
    def host_cpu_usage_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "host_cpu_usage_percentage")

    @host_cpu_usage_percentage.setter
    def host_cpu_usage_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "host_cpu_usage_percentage", value)

    @property
    @pulumi.getter(name="vmCpuReadyPercentage")
    def vm_cpu_ready_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "vm_cpu_ready_percentage")

    @vm_cpu_ready_percentage.setter
    def vm_cpu_ready_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "vm_cpu_ready_percentage", value)

    @property
    @pulumi.getter(name="vmCpuUsagePercentage")
    def vm_cpu_usage_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "vm_cpu_usage_percentage")

    @vm_cpu_usage_percentage.setter
    def vm_cpu_usage_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "vm_cpu_usage_percentage", value)


@pulumi.input_type
class VmwareAnomaliesLowDatastoreSpaceDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 1 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 1 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 free_space_percentage: pulumi.Input[int]):
        pulumi.set(__self__, "free_space_percentage", free_space_percentage)

    @property
    @pulumi.getter(name="freeSpacePercentage")
    def free_space_percentage(self) -> pulumi.Input[int]:
        return pulumi.get(self, "free_space_percentage")

    @free_space_percentage.setter
    def free_space_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "free_space_percentage", value)


@pulumi.input_type
class VmwareAnomaliesOverloadedStorageDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['VmwareAnomaliesOverloadedStorageDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['VmwareAnomaliesOverloadedStorageDetectionCustomThresholdsArgs'] custom_thresholds: Alert if the condition is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['VmwareAnomaliesOverloadedStorageDetectionCustomThresholdsArgs']]:
        """
        Alert if the condition is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['VmwareAnomaliesOverloadedStorageDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class VmwareAnomaliesOverloadedStorageDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 command_aborts_number: pulumi.Input[int]):
        pulumi.set(__self__, "command_aborts_number", command_aborts_number)

    @property
    @pulumi.getter(name="commandAbortsNumber")
    def command_aborts_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "command_aborts_number")

    @command_aborts_number.setter
    def command_aborts_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "command_aborts_number", value)


@pulumi.input_type
class VmwareAnomaliesSlowPhysicalStorageDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholdsArgs'] custom_thresholds: Alert if **any** condition is met in 4 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholdsArgs']]:
        """
        Alert if **any** condition is met in 4 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 avg_read_write_latency: pulumi.Input[int],
                 peak_read_write_latency: pulumi.Input[int]):
        pulumi.set(__self__, "avg_read_write_latency", avg_read_write_latency)
        pulumi.set(__self__, "peak_read_write_latency", peak_read_write_latency)

    @property
    @pulumi.getter(name="avgReadWriteLatency")
    def avg_read_write_latency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "avg_read_write_latency")

    @avg_read_write_latency.setter
    def avg_read_write_latency(self, value: pulumi.Input[int]):
        pulumi.set(self, "avg_read_write_latency", value)

    @property
    @pulumi.getter(name="peakReadWriteLatency")
    def peak_read_write_latency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "peak_read_write_latency")

    @peak_read_write_latency.setter
    def peak_read_write_latency(self, value: pulumi.Input[int]):
        pulumi.set(self, "peak_read_write_latency", value)


@pulumi.input_type
class VmwareAnomaliesUndersizedStorageDetectionArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 custom_thresholds: Optional[pulumi.Input['VmwareAnomaliesUndersizedStorageDetectionCustomThresholdsArgs']] = None,
                 detection_mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['VmwareAnomaliesUndersizedStorageDetectionCustomThresholdsArgs'] custom_thresholds: Alert if **any** condition is met in 3 out of 5 samples
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Custom`
        """
        pulumi.set(__self__, "enabled", enabled)
        if custom_thresholds is not None:
            pulumi.set(__self__, "custom_thresholds", custom_thresholds)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="customThresholds")
    def custom_thresholds(self) -> Optional[pulumi.Input['VmwareAnomaliesUndersizedStorageDetectionCustomThresholdsArgs']]:
        """
        Alert if **any** condition is met in 3 out of 5 samples
        """
        return pulumi.get(self, "custom_thresholds")

    @custom_thresholds.setter
    def custom_thresholds(self, value: Optional[pulumi.Input['VmwareAnomaliesUndersizedStorageDetectionCustomThresholdsArgs']]):
        pulumi.set(self, "custom_thresholds", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Custom`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)


@pulumi.input_type
class VmwareAnomaliesUndersizedStorageDetectionCustomThresholdsArgs:
    def __init__(__self__, *,
                 average_queue_command_latency: pulumi.Input[int],
                 peak_queue_command_latency: pulumi.Input[int]):
        pulumi.set(__self__, "average_queue_command_latency", average_queue_command_latency)
        pulumi.set(__self__, "peak_queue_command_latency", peak_queue_command_latency)

    @property
    @pulumi.getter(name="averageQueueCommandLatency")
    def average_queue_command_latency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "average_queue_command_latency")

    @average_queue_command_latency.setter
    def average_queue_command_latency(self, value: pulumi.Input[int]):
        pulumi.set(self, "average_queue_command_latency", value)

    @property
    @pulumi.getter(name="peakQueueCommandLatency")
    def peak_queue_command_latency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "peak_queue_command_latency")

    @peak_queue_command_latency.setter
    def peak_queue_command_latency(self, value: pulumi.Input[int]):
        pulumi.set(self, "peak_queue_command_latency", value)


@pulumi.input_type
class WebAppAnomaliesErrorRateArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 error_rate_auto: Optional[pulumi.Input['WebAppAnomaliesErrorRateErrorRateAutoArgs']] = None,
                 error_rate_detection_mode: Optional[pulumi.Input[str]] = None,
                 error_rate_fixed: Optional[pulumi.Input['WebAppAnomaliesErrorRateErrorRateFixedArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['WebAppAnomaliesErrorRateErrorRateAutoArgs'] error_rate_auto: Alert if the percentage of failing user actions increases by **both** the absolute and relative thresholds:
        :param pulumi.Input[str] error_rate_detection_mode: Possible Values: `Auto`, `Fixed`
        :param pulumi.Input['WebAppAnomaliesErrorRateErrorRateFixedArgs'] error_rate_fixed: no documentation available
        """
        pulumi.set(__self__, "enabled", enabled)
        if error_rate_auto is not None:
            pulumi.set(__self__, "error_rate_auto", error_rate_auto)
        if error_rate_detection_mode is not None:
            pulumi.set(__self__, "error_rate_detection_mode", error_rate_detection_mode)
        if error_rate_fixed is not None:
            pulumi.set(__self__, "error_rate_fixed", error_rate_fixed)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="errorRateAuto")
    def error_rate_auto(self) -> Optional[pulumi.Input['WebAppAnomaliesErrorRateErrorRateAutoArgs']]:
        """
        Alert if the percentage of failing user actions increases by **both** the absolute and relative thresholds:
        """
        return pulumi.get(self, "error_rate_auto")

    @error_rate_auto.setter
    def error_rate_auto(self, value: Optional[pulumi.Input['WebAppAnomaliesErrorRateErrorRateAutoArgs']]):
        pulumi.set(self, "error_rate_auto", value)

    @property
    @pulumi.getter(name="errorRateDetectionMode")
    def error_rate_detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Fixed`
        """
        return pulumi.get(self, "error_rate_detection_mode")

    @error_rate_detection_mode.setter
    def error_rate_detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_rate_detection_mode", value)

    @property
    @pulumi.getter(name="errorRateFixed")
    def error_rate_fixed(self) -> Optional[pulumi.Input['WebAppAnomaliesErrorRateErrorRateFixedArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "error_rate_fixed")

    @error_rate_fixed.setter
    def error_rate_fixed(self, value: Optional[pulumi.Input['WebAppAnomaliesErrorRateErrorRateFixedArgs']]):
        pulumi.set(self, "error_rate_fixed", value)


@pulumi.input_type
class WebAppAnomaliesErrorRateErrorRateAutoArgs:
    def __init__(__self__, *,
                 absolute_increase: pulumi.Input[float],
                 over_alerting_protection: pulumi.Input['WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtectionArgs'],
                 relative_increase: pulumi.Input[float]):
        pulumi.set(__self__, "absolute_increase", absolute_increase)
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "relative_increase", relative_increase)

    @property
    @pulumi.getter(name="absoluteIncrease")
    def absolute_increase(self) -> pulumi.Input[float]:
        return pulumi.get(self, "absolute_increase")

    @absolute_increase.setter
    def absolute_increase(self, value: pulumi.Input[float]):
        pulumi.set(self, "absolute_increase", value)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter(name="relativeIncrease")
    def relative_increase(self) -> pulumi.Input[float]:
        return pulumi.get(self, "relative_increase")

    @relative_increase.setter
    def relative_increase(self, value: pulumi.Input[float]):
        pulumi.set(self, "relative_increase", value)


@pulumi.input_type
class WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 actions_per_minute: pulumi.Input[float],
                 minutes_abnormal_state: pulumi.Input[float]):
        pulumi.set(__self__, "actions_per_minute", actions_per_minute)
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)

    @property
    @pulumi.getter(name="actionsPerMinute")
    def actions_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "actions_per_minute")

    @actions_per_minute.setter
    def actions_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "actions_per_minute", value)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[float]):
        pulumi.set(self, "minutes_abnormal_state", value)


@pulumi.input_type
class WebAppAnomaliesErrorRateErrorRateFixedArgs:
    def __init__(__self__, *,
                 error_rate_req_per_min: pulumi.Input[float],
                 error_rate_sensitivity: pulumi.Input[str],
                 max_failure_rate_increase: pulumi.Input[float],
                 minutes_abnormal_state: pulumi.Input[float]):
        pulumi.set(__self__, "error_rate_req_per_min", error_rate_req_per_min)
        pulumi.set(__self__, "error_rate_sensitivity", error_rate_sensitivity)
        pulumi.set(__self__, "max_failure_rate_increase", max_failure_rate_increase)
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)

    @property
    @pulumi.getter(name="errorRateReqPerMin")
    def error_rate_req_per_min(self) -> pulumi.Input[float]:
        return pulumi.get(self, "error_rate_req_per_min")

    @error_rate_req_per_min.setter
    def error_rate_req_per_min(self, value: pulumi.Input[float]):
        pulumi.set(self, "error_rate_req_per_min", value)

    @property
    @pulumi.getter(name="errorRateSensitivity")
    def error_rate_sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "error_rate_sensitivity")

    @error_rate_sensitivity.setter
    def error_rate_sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "error_rate_sensitivity", value)

    @property
    @pulumi.getter(name="maxFailureRateIncrease")
    def max_failure_rate_increase(self) -> pulumi.Input[float]:
        return pulumi.get(self, "max_failure_rate_increase")

    @max_failure_rate_increase.setter
    def max_failure_rate_increase(self, value: pulumi.Input[float]):
        pulumi.set(self, "max_failure_rate_increase", value)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[float]):
        pulumi.set(self, "minutes_abnormal_state", value)


@pulumi.input_type
class WebAppAnomaliesResponseTimeArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 detection_mode: Optional[pulumi.Input[str]] = None,
                 response_time_auto: Optional[pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoArgs']] = None,
                 response_time_fixed: Optional[pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input[str] detection_mode: Possible Values: `Auto`, `Fixed`
        :param pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoArgs'] response_time_auto: no documentation available
        :param pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedArgs'] response_time_fixed: no documentation available
        """
        pulumi.set(__self__, "enabled", enabled)
        if detection_mode is not None:
            pulumi.set(__self__, "detection_mode", detection_mode)
        if response_time_auto is not None:
            pulumi.set(__self__, "response_time_auto", response_time_auto)
        if response_time_fixed is not None:
            pulumi.set(__self__, "response_time_fixed", response_time_fixed)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="detectionMode")
    def detection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Possible Values: `Auto`, `Fixed`
        """
        return pulumi.get(self, "detection_mode")

    @detection_mode.setter
    def detection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_mode", value)

    @property
    @pulumi.getter(name="responseTimeAuto")
    def response_time_auto(self) -> Optional[pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "response_time_auto")

    @response_time_auto.setter
    def response_time_auto(self, value: Optional[pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoArgs']]):
        pulumi.set(self, "response_time_auto", value)

    @property
    @pulumi.getter(name="responseTimeFixed")
    def response_time_fixed(self) -> Optional[pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedArgs']]:
        """
        no documentation available
        """
        return pulumi.get(self, "response_time_fixed")

    @response_time_fixed.setter
    def response_time_fixed(self, value: Optional[pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedArgs']]):
        pulumi.set(self, "response_time_fixed", value)


@pulumi.input_type
class WebAppAnomaliesResponseTimeResponseTimeAutoArgs:
    def __init__(__self__, *,
                 over_alerting_protection: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtectionArgs'],
                 response_time_all: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAllArgs'],
                 response_time_slowest: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowestArgs']):
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "response_time_all", response_time_all)
        pulumi.set(__self__, "response_time_slowest", response_time_slowest)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter(name="responseTimeAll")
    def response_time_all(self) -> pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAllArgs']:
        return pulumi.get(self, "response_time_all")

    @response_time_all.setter
    def response_time_all(self, value: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAllArgs']):
        pulumi.set(self, "response_time_all", value)

    @property
    @pulumi.getter(name="responseTimeSlowest")
    def response_time_slowest(self) -> pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowestArgs']:
        return pulumi.get(self, "response_time_slowest")

    @response_time_slowest.setter
    def response_time_slowest(self, value: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowestArgs']):
        pulumi.set(self, "response_time_slowest", value)


@pulumi.input_type
class WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 actions_per_minute: pulumi.Input[float],
                 minutes_abnormal_state: pulumi.Input[float]):
        pulumi.set(__self__, "actions_per_minute", actions_per_minute)
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)

    @property
    @pulumi.getter(name="actionsPerMinute")
    def actions_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "actions_per_minute")

    @actions_per_minute.setter
    def actions_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "actions_per_minute", value)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[float]):
        pulumi.set(self, "minutes_abnormal_state", value)


@pulumi.input_type
class WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAllArgs:
    def __init__(__self__, *,
                 degradation_milliseconds: pulumi.Input[float],
                 degradation_percent: pulumi.Input[float]):
        pulumi.set(__self__, "degradation_milliseconds", degradation_milliseconds)
        pulumi.set(__self__, "degradation_percent", degradation_percent)

    @property
    @pulumi.getter(name="degradationMilliseconds")
    def degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "degradation_milliseconds")

    @degradation_milliseconds.setter
    def degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "degradation_milliseconds", value)

    @property
    @pulumi.getter(name="degradationPercent")
    def degradation_percent(self) -> pulumi.Input[float]:
        return pulumi.get(self, "degradation_percent")

    @degradation_percent.setter
    def degradation_percent(self, value: pulumi.Input[float]):
        pulumi.set(self, "degradation_percent", value)


@pulumi.input_type
class WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowestArgs:
    def __init__(__self__, *,
                 slowest_degradation_milliseconds: pulumi.Input[float],
                 slowest_degradation_percent: pulumi.Input[float]):
        pulumi.set(__self__, "slowest_degradation_milliseconds", slowest_degradation_milliseconds)
        pulumi.set(__self__, "slowest_degradation_percent", slowest_degradation_percent)

    @property
    @pulumi.getter(name="slowestDegradationMilliseconds")
    def slowest_degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowest_degradation_milliseconds")

    @slowest_degradation_milliseconds.setter
    def slowest_degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowest_degradation_milliseconds", value)

    @property
    @pulumi.getter(name="slowestDegradationPercent")
    def slowest_degradation_percent(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowest_degradation_percent")

    @slowest_degradation_percent.setter
    def slowest_degradation_percent(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowest_degradation_percent", value)


@pulumi.input_type
class WebAppAnomaliesResponseTimeResponseTimeFixedArgs:
    def __init__(__self__, *,
                 over_alerting_protection: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtectionArgs'],
                 response_time_all: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAllArgs'],
                 response_time_slowest: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowestArgs'],
                 sensitivity: pulumi.Input[str]):
        pulumi.set(__self__, "over_alerting_protection", over_alerting_protection)
        pulumi.set(__self__, "response_time_all", response_time_all)
        pulumi.set(__self__, "response_time_slowest", response_time_slowest)
        pulumi.set(__self__, "sensitivity", sensitivity)

    @property
    @pulumi.getter(name="overAlertingProtection")
    def over_alerting_protection(self) -> pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtectionArgs']:
        return pulumi.get(self, "over_alerting_protection")

    @over_alerting_protection.setter
    def over_alerting_protection(self, value: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtectionArgs']):
        pulumi.set(self, "over_alerting_protection", value)

    @property
    @pulumi.getter(name="responseTimeAll")
    def response_time_all(self) -> pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAllArgs']:
        return pulumi.get(self, "response_time_all")

    @response_time_all.setter
    def response_time_all(self, value: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAllArgs']):
        pulumi.set(self, "response_time_all", value)

    @property
    @pulumi.getter(name="responseTimeSlowest")
    def response_time_slowest(self) -> pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowestArgs']:
        return pulumi.get(self, "response_time_slowest")

    @response_time_slowest.setter
    def response_time_slowest(self, value: pulumi.Input['WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowestArgs']):
        pulumi.set(self, "response_time_slowest", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitivity", value)


@pulumi.input_type
class WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtectionArgs:
    def __init__(__self__, *,
                 actions_per_minute: pulumi.Input[float],
                 minutes_abnormal_state: pulumi.Input[float]):
        pulumi.set(__self__, "actions_per_minute", actions_per_minute)
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)

    @property
    @pulumi.getter(name="actionsPerMinute")
    def actions_per_minute(self) -> pulumi.Input[float]:
        return pulumi.get(self, "actions_per_minute")

    @actions_per_minute.setter
    def actions_per_minute(self, value: pulumi.Input[float]):
        pulumi.set(self, "actions_per_minute", value)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[float]):
        pulumi.set(self, "minutes_abnormal_state", value)


@pulumi.input_type
class WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAllArgs:
    def __init__(__self__, *,
                 degradation_milliseconds: pulumi.Input[float]):
        pulumi.set(__self__, "degradation_milliseconds", degradation_milliseconds)

    @property
    @pulumi.getter(name="degradationMilliseconds")
    def degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "degradation_milliseconds")

    @degradation_milliseconds.setter
    def degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "degradation_milliseconds", value)


@pulumi.input_type
class WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowestArgs:
    def __init__(__self__, *,
                 slowest_degradation_milliseconds: pulumi.Input[float]):
        pulumi.set(__self__, "slowest_degradation_milliseconds", slowest_degradation_milliseconds)

    @property
    @pulumi.getter(name="slowestDegradationMilliseconds")
    def slowest_degradation_milliseconds(self) -> pulumi.Input[float]:
        return pulumi.get(self, "slowest_degradation_milliseconds")

    @slowest_degradation_milliseconds.setter
    def slowest_degradation_milliseconds(self, value: pulumi.Input[float]):
        pulumi.set(self, "slowest_degradation_milliseconds", value)


@pulumi.input_type
class WebAppAnomaliesTrafficDropsArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 traffic_drops: Optional[pulumi.Input['WebAppAnomaliesTrafficDropsTrafficDropsArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['WebAppAnomaliesTrafficDropsTrafficDropsArgs'] traffic_drops: Dynatrace learns your typical application traffic over an observation period of one week.
        """
        pulumi.set(__self__, "enabled", enabled)
        if traffic_drops is not None:
            pulumi.set(__self__, "traffic_drops", traffic_drops)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="trafficDrops")
    def traffic_drops(self) -> Optional[pulumi.Input['WebAppAnomaliesTrafficDropsTrafficDropsArgs']]:
        """
        Dynatrace learns your typical application traffic over an observation period of one week.
        """
        return pulumi.get(self, "traffic_drops")

    @traffic_drops.setter
    def traffic_drops(self, value: Optional[pulumi.Input['WebAppAnomaliesTrafficDropsTrafficDropsArgs']]):
        pulumi.set(self, "traffic_drops", value)


@pulumi.input_type
class WebAppAnomaliesTrafficDropsTrafficDropsArgs:
    def __init__(__self__, *,
                 abnormal_state_abnormal_state: pulumi.Input[float],
                 traffic_drop_percentage: pulumi.Input[float]):
        pulumi.set(__self__, "abnormal_state_abnormal_state", abnormal_state_abnormal_state)
        pulumi.set(__self__, "traffic_drop_percentage", traffic_drop_percentage)

    @property
    @pulumi.getter(name="abnormalStateAbnormalState")
    def abnormal_state_abnormal_state(self) -> pulumi.Input[float]:
        return pulumi.get(self, "abnormal_state_abnormal_state")

    @abnormal_state_abnormal_state.setter
    def abnormal_state_abnormal_state(self, value: pulumi.Input[float]):
        pulumi.set(self, "abnormal_state_abnormal_state", value)

    @property
    @pulumi.getter(name="trafficDropPercentage")
    def traffic_drop_percentage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "traffic_drop_percentage")

    @traffic_drop_percentage.setter
    def traffic_drop_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "traffic_drop_percentage", value)


@pulumi.input_type
class WebAppAnomaliesTrafficSpikesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 traffic_spikes: Optional[pulumi.Input['WebAppAnomaliesTrafficSpikesTrafficSpikesArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: This setting is enabled (`true`) or disabled (`false`)
        :param pulumi.Input['WebAppAnomaliesTrafficSpikesTrafficSpikesArgs'] traffic_spikes: Dynatrace learns your typical application traffic over an observation period of one week.
        """
        pulumi.set(__self__, "enabled", enabled)
        if traffic_spikes is not None:
            pulumi.set(__self__, "traffic_spikes", traffic_spikes)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="trafficSpikes")
    def traffic_spikes(self) -> Optional[pulumi.Input['WebAppAnomaliesTrafficSpikesTrafficSpikesArgs']]:
        """
        Dynatrace learns your typical application traffic over an observation period of one week.
        """
        return pulumi.get(self, "traffic_spikes")

    @traffic_spikes.setter
    def traffic_spikes(self, value: Optional[pulumi.Input['WebAppAnomaliesTrafficSpikesTrafficSpikesArgs']]):
        pulumi.set(self, "traffic_spikes", value)


@pulumi.input_type
class WebAppAnomaliesTrafficSpikesTrafficSpikesArgs:
    def __init__(__self__, *,
                 minutes_abnormal_state: pulumi.Input[float],
                 traffic_spike_percentage: pulumi.Input[float]):
        pulumi.set(__self__, "minutes_abnormal_state", minutes_abnormal_state)
        pulumi.set(__self__, "traffic_spike_percentage", traffic_spike_percentage)

    @property
    @pulumi.getter(name="minutesAbnormalState")
    def minutes_abnormal_state(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minutes_abnormal_state")

    @minutes_abnormal_state.setter
    def minutes_abnormal_state(self, value: pulumi.Input[float]):
        pulumi.set(self, "minutes_abnormal_state", value)

    @property
    @pulumi.getter(name="trafficSpikePercentage")
    def traffic_spike_percentage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "traffic_spike_percentage")

    @traffic_spike_percentage.setter
    def traffic_spike_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "traffic_spike_percentage", value)


@pulumi.input_type
class WebAppCustomErrorsErrorRulesArgs:
    def __init__(__self__, *,
                 error_rules: pulumi.Input[Sequence[pulumi.Input['WebAppCustomErrorsErrorRulesErrorRuleArgs']]]):
        pulumi.set(__self__, "error_rules", error_rules)

    @property
    @pulumi.getter(name="errorRules")
    def error_rules(self) -> pulumi.Input[Sequence[pulumi.Input['WebAppCustomErrorsErrorRulesErrorRuleArgs']]]:
        return pulumi.get(self, "error_rules")

    @error_rules.setter
    def error_rules(self, value: pulumi.Input[Sequence[pulumi.Input['WebAppCustomErrorsErrorRulesErrorRuleArgs']]]):
        pulumi.set(self, "error_rules", value)


@pulumi.input_type
class WebAppCustomErrorsErrorRulesErrorRuleArgs:
    def __init__(__self__, *,
                 capture_settings: pulumi.Input['WebAppCustomErrorsErrorRulesErrorRuleCaptureSettingsArgs'],
                 key_matcher: pulumi.Input[str],
                 value_matcher: pulumi.Input[str],
                 key_pattern: Optional[pulumi.Input[str]] = None,
                 value_pattern: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "capture_settings", capture_settings)
        pulumi.set(__self__, "key_matcher", key_matcher)
        pulumi.set(__self__, "value_matcher", value_matcher)
        if key_pattern is not None:
            pulumi.set(__self__, "key_pattern", key_pattern)
        if value_pattern is not None:
            pulumi.set(__self__, "value_pattern", value_pattern)

    @property
    @pulumi.getter(name="captureSettings")
    def capture_settings(self) -> pulumi.Input['WebAppCustomErrorsErrorRulesErrorRuleCaptureSettingsArgs']:
        return pulumi.get(self, "capture_settings")

    @capture_settings.setter
    def capture_settings(self, value: pulumi.Input['WebAppCustomErrorsErrorRulesErrorRuleCaptureSettingsArgs']):
        pulumi.set(self, "capture_settings", value)

    @property
    @pulumi.getter(name="keyMatcher")
    def key_matcher(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key_matcher")

    @key_matcher.setter
    def key_matcher(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_matcher", value)

    @property
    @pulumi.getter(name="valueMatcher")
    def value_matcher(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value_matcher")

    @value_matcher.setter
    def value_matcher(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_matcher", value)

    @property
    @pulumi.getter(name="keyPattern")
    def key_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_pattern")

    @key_pattern.setter
    def key_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_pattern", value)

    @property
    @pulumi.getter(name="valuePattern")
    def value_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_pattern")

    @value_pattern.setter
    def value_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_pattern", value)


@pulumi.input_type
class WebAppCustomErrorsErrorRulesErrorRuleCaptureSettingsArgs:
    def __init__(__self__, *,
                 capture: pulumi.Input[bool],
                 consider_for_ai: Optional[pulumi.Input[bool]] = None,
                 impact_apdex: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "capture", capture)
        if consider_for_ai is not None:
            pulumi.set(__self__, "consider_for_ai", consider_for_ai)
        if impact_apdex is not None:
            pulumi.set(__self__, "impact_apdex", impact_apdex)

    @property
    @pulumi.getter
    def capture(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "capture")

    @capture.setter
    def capture(self, value: pulumi.Input[bool]):
        pulumi.set(self, "capture", value)

    @property
    @pulumi.getter(name="considerForAi")
    def consider_for_ai(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "consider_for_ai")

    @consider_for_ai.setter
    def consider_for_ai(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consider_for_ai", value)

    @property
    @pulumi.getter(name="impactApdex")
    def impact_apdex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impact_apdex")

    @impact_apdex.setter
    def impact_apdex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impact_apdex", value)


@pulumi.input_type
class WebAppEnablementRumArgs:
    def __init__(__self__, *,
                 cost_and_traffic_control: pulumi.Input[int],
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[int] cost_and_traffic_control: (Field has overlap with `WebApplication`) Percentage of user sessions captured and analyzed
        :param pulumi.Input[bool] enabled: (Field has overlap with `WebApplication`) This setting is enabled (`true`) or disabled (`false`)
        """
        pulumi.set(__self__, "cost_and_traffic_control", cost_and_traffic_control)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="costAndTrafficControl")
    def cost_and_traffic_control(self) -> pulumi.Input[int]:
        """
        (Field has overlap with `WebApplication`) Percentage of user sessions captured and analyzed
        """
        return pulumi.get(self, "cost_and_traffic_control")

    @cost_and_traffic_control.setter
    def cost_and_traffic_control(self, value: pulumi.Input[int]):
        pulumi.set(self, "cost_and_traffic_control", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        (Field has overlap with `WebApplication`) This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class WebAppEnablementSessionReplayArgs:
    def __init__(__self__, *,
                 cost_and_traffic_control: pulumi.Input[int],
                 enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[int] cost_and_traffic_control: (Field has overlap with `WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
        :param pulumi.Input[bool] enabled: (Field has overlap with `WebApplication`) This setting is enabled (`true`) or disabled (`false`)
        """
        pulumi.set(__self__, "cost_and_traffic_control", cost_and_traffic_control)
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="costAndTrafficControl")
    def cost_and_traffic_control(self) -> pulumi.Input[int]:
        """
        (Field has overlap with `WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
        """
        return pulumi.get(self, "cost_and_traffic_control")

    @cost_and_traffic_control.setter
    def cost_and_traffic_control(self, value: pulumi.Input[int]):
        pulumi.set(self, "cost_and_traffic_control", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        (Field has overlap with `WebApplication`) This setting is enabled (`true`) or disabled (`false`)
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class WebAppRequestErrorsErrorRulesArgs:
    def __init__(__self__, *,
                 error_rules: pulumi.Input[Sequence[pulumi.Input['WebAppRequestErrorsErrorRulesErrorRuleArgs']]]):
        pulumi.set(__self__, "error_rules", error_rules)

    @property
    @pulumi.getter(name="errorRules")
    def error_rules(self) -> pulumi.Input[Sequence[pulumi.Input['WebAppRequestErrorsErrorRulesErrorRuleArgs']]]:
        return pulumi.get(self, "error_rules")

    @error_rules.setter
    def error_rules(self, value: pulumi.Input[Sequence[pulumi.Input['WebAppRequestErrorsErrorRulesErrorRuleArgs']]]):
        pulumi.set(self, "error_rules", value)


@pulumi.input_type
class WebAppRequestErrorsErrorRulesErrorRuleArgs:
    def __init__(__self__, *,
                 capture_settings: pulumi.Input['WebAppRequestErrorsErrorRulesErrorRuleCaptureSettingsArgs'],
                 consider_csp_violations: pulumi.Input[bool],
                 consider_failed_images: pulumi.Input[bool],
                 filter_settings: pulumi.Input['WebAppRequestErrorsErrorRulesErrorRuleFilterSettingsArgs'],
                 error_codes: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "capture_settings", capture_settings)
        pulumi.set(__self__, "consider_csp_violations", consider_csp_violations)
        pulumi.set(__self__, "consider_failed_images", consider_failed_images)
        pulumi.set(__self__, "filter_settings", filter_settings)
        if error_codes is not None:
            pulumi.set(__self__, "error_codes", error_codes)

    @property
    @pulumi.getter(name="captureSettings")
    def capture_settings(self) -> pulumi.Input['WebAppRequestErrorsErrorRulesErrorRuleCaptureSettingsArgs']:
        return pulumi.get(self, "capture_settings")

    @capture_settings.setter
    def capture_settings(self, value: pulumi.Input['WebAppRequestErrorsErrorRulesErrorRuleCaptureSettingsArgs']):
        pulumi.set(self, "capture_settings", value)

    @property
    @pulumi.getter(name="considerCspViolations")
    def consider_csp_violations(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "consider_csp_violations")

    @consider_csp_violations.setter
    def consider_csp_violations(self, value: pulumi.Input[bool]):
        pulumi.set(self, "consider_csp_violations", value)

    @property
    @pulumi.getter(name="considerFailedImages")
    def consider_failed_images(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "consider_failed_images")

    @consider_failed_images.setter
    def consider_failed_images(self, value: pulumi.Input[bool]):
        pulumi.set(self, "consider_failed_images", value)

    @property
    @pulumi.getter(name="filterSettings")
    def filter_settings(self) -> pulumi.Input['WebAppRequestErrorsErrorRulesErrorRuleFilterSettingsArgs']:
        return pulumi.get(self, "filter_settings")

    @filter_settings.setter
    def filter_settings(self, value: pulumi.Input['WebAppRequestErrorsErrorRulesErrorRuleFilterSettingsArgs']):
        pulumi.set(self, "filter_settings", value)

    @property
    @pulumi.getter(name="errorCodes")
    def error_codes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_codes")

    @error_codes.setter
    def error_codes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_codes", value)


@pulumi.input_type
class WebAppRequestErrorsErrorRulesErrorRuleCaptureSettingsArgs:
    def __init__(__self__, *,
                 capture: pulumi.Input[bool],
                 consider_for_ai: Optional[pulumi.Input[bool]] = None,
                 impact_apdex: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "capture", capture)
        if consider_for_ai is not None:
            pulumi.set(__self__, "consider_for_ai", consider_for_ai)
        if impact_apdex is not None:
            pulumi.set(__self__, "impact_apdex", impact_apdex)

    @property
    @pulumi.getter
    def capture(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "capture")

    @capture.setter
    def capture(self, value: pulumi.Input[bool]):
        pulumi.set(self, "capture", value)

    @property
    @pulumi.getter(name="considerForAi")
    def consider_for_ai(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "consider_for_ai")

    @consider_for_ai.setter
    def consider_for_ai(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consider_for_ai", value)

    @property
    @pulumi.getter(name="impactApdex")
    def impact_apdex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "impact_apdex")

    @impact_apdex.setter
    def impact_apdex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "impact_apdex", value)


@pulumi.input_type
class WebAppRequestErrorsErrorRulesErrorRuleFilterSettingsArgs:
    def __init__(__self__, *,
                 filter: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WebApplicationConversionGoalsArgs:
    def __init__(__self__, *,
                 goals: pulumi.Input[Sequence[pulumi.Input['WebApplicationConversionGoalsGoalArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationConversionGoalsGoalArgs']]] goals: A conversion goal of the application
        """
        pulumi.set(__self__, "goals", goals)

    @property
    @pulumi.getter
    def goals(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationConversionGoalsGoalArgs']]]:
        """
        A conversion goal of the application
        """
        return pulumi.get(self, "goals")

    @goals.setter
    def goals(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationConversionGoalsGoalArgs']]]):
        pulumi.set(self, "goals", value)


@pulumi.input_type
class WebApplicationConversionGoalsGoalArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 destination: Optional[pulumi.Input['WebApplicationConversionGoalsGoalDestinationArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_action: Optional[pulumi.Input['WebApplicationConversionGoalsGoalUserActionArgs']] = None,
                 visit_duration: Optional[pulumi.Input['WebApplicationConversionGoalsGoalVisitDurationArgs']] = None,
                 visit_num_action: Optional[pulumi.Input['WebApplicationConversionGoalsGoalVisitNumActionArgs']] = None):
        """
        :param pulumi.Input[str] name: The name of the web application, displayed in the UI
        :param pulumi.Input[str] id: The ID of this resource.
        :param pulumi.Input[str] type: The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        """
        pulumi.set(__self__, "name", name)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_action is not None:
            pulumi.set(__self__, "user_action", user_action)
        if visit_duration is not None:
            pulumi.set(__self__, "visit_duration", visit_duration)
        if visit_num_action is not None:
            pulumi.set(__self__, "visit_num_action", visit_num_action)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the web application, displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input['WebApplicationConversionGoalsGoalDestinationArgs']]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input['WebApplicationConversionGoalsGoalDestinationArgs']]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAction")
    def user_action(self) -> Optional[pulumi.Input['WebApplicationConversionGoalsGoalUserActionArgs']]:
        return pulumi.get(self, "user_action")

    @user_action.setter
    def user_action(self, value: Optional[pulumi.Input['WebApplicationConversionGoalsGoalUserActionArgs']]):
        pulumi.set(self, "user_action", value)

    @property
    @pulumi.getter(name="visitDuration")
    def visit_duration(self) -> Optional[pulumi.Input['WebApplicationConversionGoalsGoalVisitDurationArgs']]:
        return pulumi.get(self, "visit_duration")

    @visit_duration.setter
    def visit_duration(self, value: Optional[pulumi.Input['WebApplicationConversionGoalsGoalVisitDurationArgs']]):
        pulumi.set(self, "visit_duration", value)

    @property
    @pulumi.getter(name="visitNumAction")
    def visit_num_action(self) -> Optional[pulumi.Input['WebApplicationConversionGoalsGoalVisitNumActionArgs']]:
        return pulumi.get(self, "visit_num_action")

    @visit_num_action.setter
    def visit_num_action(self, value: Optional[pulumi.Input['WebApplicationConversionGoalsGoalVisitNumActionArgs']]):
        pulumi.set(self, "visit_num_action", value)


@pulumi.input_type
class WebApplicationConversionGoalsGoalDestinationArgs:
    def __init__(__self__, *,
                 url_or_path: pulumi.Input[str],
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 match_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "url_or_path", url_or_path)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="urlOrPath")
    def url_or_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url_or_path")

    @url_or_path.setter
    def url_or_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "url_or_path", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_type", value)


@pulumi.input_type
class WebApplicationConversionGoalsGoalUserActionArgs:
    def __init__(__self__, *,
                 action_type: Optional[pulumi.Input[str]] = None,
                 case_sensitive: Optional[pulumi.Input[bool]] = None,
                 match_entity: Optional[pulumi.Input[str]] = None,
                 match_type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if case_sensitive is not None:
            pulumi.set(__self__, "case_sensitive", case_sensitive)
        if match_entity is not None:
            pulumi.set(__self__, "match_entity", match_entity)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="matchEntity")
    def match_entity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_entity")

    @match_entity.setter
    def match_entity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_entity", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WebApplicationConversionGoalsGoalVisitDurationArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int]):
        pulumi.set(__self__, "duration", duration)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)


@pulumi.input_type
class WebApplicationConversionGoalsGoalVisitNumActionArgs:
    def __init__(__self__, *,
                 num_user_actions: Optional[pulumi.Input[int]] = None):
        if num_user_actions is not None:
            pulumi.set(__self__, "num_user_actions", num_user_actions)

    @property
    @pulumi.getter(name="numUserActions")
    def num_user_actions(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "num_user_actions")

    @num_user_actions.setter
    def num_user_actions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_user_actions", value)


@pulumi.input_type
class WebApplicationCustomActionApdexSettingsArgs:
    def __init__(__self__, *,
                 frustrating_fallback_threshold: Optional[pulumi.Input[int]] = None,
                 frustrating_threshold: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 tolerated_fallback_threshold: Optional[pulumi.Input[int]] = None,
                 tolerated_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] frustrating_fallback_threshold: Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
        :param pulumi.Input[int] frustrating_threshold: Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
        :param pulumi.Input[int] threshold: no documentation available
        :param pulumi.Input[int] tolerated_fallback_threshold: Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
        :param pulumi.Input[int] tolerated_threshold: Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
        """
        if frustrating_fallback_threshold is not None:
            pulumi.set(__self__, "frustrating_fallback_threshold", frustrating_fallback_threshold)
        if frustrating_threshold is not None:
            pulumi.set(__self__, "frustrating_threshold", frustrating_threshold)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if tolerated_fallback_threshold is not None:
            pulumi.set(__self__, "tolerated_fallback_threshold", tolerated_fallback_threshold)
        if tolerated_threshold is not None:
            pulumi.set(__self__, "tolerated_threshold", tolerated_threshold)

    @property
    @pulumi.getter(name="frustratingFallbackThreshold")
    def frustrating_fallback_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
        """
        return pulumi.get(self, "frustrating_fallback_threshold")

    @frustrating_fallback_threshold.setter
    def frustrating_fallback_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frustrating_fallback_threshold", value)

    @property
    @pulumi.getter(name="frustratingThreshold")
    def frustrating_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
        """
        return pulumi.get(self, "frustrating_threshold")

    @frustrating_threshold.setter
    def frustrating_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frustrating_threshold", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        no documentation available
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter(name="toleratedFallbackThreshold")
    def tolerated_fallback_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
        """
        return pulumi.get(self, "tolerated_fallback_threshold")

    @tolerated_fallback_threshold.setter
    def tolerated_fallback_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerated_fallback_threshold", value)

    @property
    @pulumi.getter(name="toleratedThreshold")
    def tolerated_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
        """
        return pulumi.get(self, "tolerated_threshold")

    @tolerated_threshold.setter
    def tolerated_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerated_threshold", value)


@pulumi.input_type
class WebApplicationKeyUserActionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input['WebApplicationKeyUserActionActionArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationKeyUserActionActionArgs']]] actions: Configuration of the key user action
        """
        pulumi.set(__self__, "actions", actions)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationKeyUserActionActionArgs']]]:
        """
        Configuration of the key user action
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationKeyUserActionActionArgs']]]):
        pulumi.set(self, "actions", value)


@pulumi.input_type
class WebApplicationKeyUserActionActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 domain: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the web application, displayed in the UI
        :param pulumi.Input[str] type: The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the web application, displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class WebApplicationLoadActionApdexSettingsArgs:
    def __init__(__self__, *,
                 frustrating_fallback_threshold: Optional[pulumi.Input[int]] = None,
                 frustrating_threshold: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 tolerated_fallback_threshold: Optional[pulumi.Input[int]] = None,
                 tolerated_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] frustrating_fallback_threshold: Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
        :param pulumi.Input[int] frustrating_threshold: Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
        :param pulumi.Input[int] threshold: no documentation available
        :param pulumi.Input[int] tolerated_fallback_threshold: Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
        :param pulumi.Input[int] tolerated_threshold: Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
        """
        if frustrating_fallback_threshold is not None:
            pulumi.set(__self__, "frustrating_fallback_threshold", frustrating_fallback_threshold)
        if frustrating_threshold is not None:
            pulumi.set(__self__, "frustrating_threshold", frustrating_threshold)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if tolerated_fallback_threshold is not None:
            pulumi.set(__self__, "tolerated_fallback_threshold", tolerated_fallback_threshold)
        if tolerated_threshold is not None:
            pulumi.set(__self__, "tolerated_threshold", tolerated_threshold)

    @property
    @pulumi.getter(name="frustratingFallbackThreshold")
    def frustrating_fallback_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
        """
        return pulumi.get(self, "frustrating_fallback_threshold")

    @frustrating_fallback_threshold.setter
    def frustrating_fallback_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frustrating_fallback_threshold", value)

    @property
    @pulumi.getter(name="frustratingThreshold")
    def frustrating_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
        """
        return pulumi.get(self, "frustrating_threshold")

    @frustrating_threshold.setter
    def frustrating_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frustrating_threshold", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        no documentation available
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter(name="toleratedFallbackThreshold")
    def tolerated_fallback_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
        """
        return pulumi.get(self, "tolerated_fallback_threshold")

    @tolerated_fallback_threshold.setter
    def tolerated_fallback_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerated_fallback_threshold", value)

    @property
    @pulumi.getter(name="toleratedThreshold")
    def tolerated_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
        """
        return pulumi.get(self, "tolerated_threshold")

    @tolerated_threshold.setter
    def tolerated_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerated_threshold", value)


@pulumi.input_type
class WebApplicationMetaDataCaptureSettingsArgs:
    def __init__(__self__, *,
                 captures: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationMetaDataCaptureSettingsCaptureArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationMetaDataCaptureSettingsCaptureArgs']]] captures: Java script agent meta data capture settings
        """
        if captures is not None:
            pulumi.set(__self__, "captures", captures)

    @property
    @pulumi.getter
    def captures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationMetaDataCaptureSettingsCaptureArgs']]]]:
        """
        Java script agent meta data capture settings
        """
        return pulumi.get(self, "captures")

    @captures.setter
    def captures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationMetaDataCaptureSettingsCaptureArgs']]]]):
        pulumi.set(self, "captures", value)


@pulumi.input_type
class WebApplicationMetaDataCaptureSettingsCaptureArgs:
    def __init__(__self__, *,
                 capturing_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 public_metadata: Optional[pulumi.Input[bool]] = None,
                 unique_id: Optional[pulumi.Input[int]] = None,
                 use_last_value: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: The name of the web application, displayed in the UI
        :param pulumi.Input[str] type: The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        """
        pulumi.set(__self__, "capturing_name", capturing_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if public_metadata is not None:
            pulumi.set(__self__, "public_metadata", public_metadata)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)
        if use_last_value is not None:
            pulumi.set(__self__, "use_last_value", use_last_value)

    @property
    @pulumi.getter(name="capturingName")
    def capturing_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "capturing_name")

    @capturing_name.setter
    def capturing_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "capturing_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the web application, displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicMetadata")
    def public_metadata(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "public_metadata")

    @public_metadata.setter
    def public_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_metadata", value)

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unique_id")

    @unique_id.setter
    def unique_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unique_id", value)

    @property
    @pulumi.getter(name="useLastValue")
    def use_last_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_last_value")

    @use_last_value.setter
    def use_last_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_last_value", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsArgs:
    def __init__(__self__, *,
                 content_capture: pulumi.Input['WebApplicationMonitoringSettingsContentCaptureArgs'],
                 injection_mode: pulumi.Input[str],
                 add_cross_origin_anonymous_attribute: Optional[pulumi.Input[bool]] = None,
                 advanced_javascript_tag_settings: Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsArgs']] = None,
                 angular_package_name: Optional[pulumi.Input[str]] = None,
                 browser_restriction_settings: Optional[pulumi.Input['WebApplicationMonitoringSettingsBrowserRestrictionSettingsArgs']] = None,
                 cache_control_header_optimizations: Optional[pulumi.Input[bool]] = None,
                 cookie_placement_domain: Optional[pulumi.Input[str]] = None,
                 correlation_header_inclusion_regex: Optional[pulumi.Input[str]] = None,
                 custom_configuration_properties: Optional[pulumi.Input[str]] = None,
                 exclude_xhr_regex: Optional[pulumi.Input[str]] = None,
                 fetch_requests: Optional[pulumi.Input[bool]] = None,
                 ip_address_restriction_settings: Optional[pulumi.Input['WebApplicationMonitoringSettingsIpAddressRestrictionSettingsArgs']] = None,
                 javascript_framework_support: Optional[pulumi.Input['WebApplicationMonitoringSettingsJavascriptFrameworkSupportArgs']] = None,
                 javascript_injection_rules: Optional[pulumi.Input['WebApplicationMonitoringSettingsJavascriptInjectionRulesArgs']] = None,
                 library_file_location: Optional[pulumi.Input[str]] = None,
                 monitoring_data_path: Optional[pulumi.Input[str]] = None,
                 script_tag_cache_duration_in_hours: Optional[pulumi.Input[int]] = None,
                 secure_cookie_attribute: Optional[pulumi.Input[bool]] = None,
                 server_request_path_id: Optional[pulumi.Input[str]] = None,
                 xml_http_request: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['WebApplicationMonitoringSettingsContentCaptureArgs'] content_capture: Settings for content capture
        :param pulumi.Input[str] injection_mode: Possible valures are `CODE_SNIPPET`, `CODE_SNIPPET_ASYNC`, `INLINE_CODE` and `JAVASCRIPT_TAG`.
        :param pulumi.Input[bool] add_cross_origin_anonymous_attribute: Add the cross origin = anonymous attribute to capture JavaScript error messages and W3C resource timings
        :param pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsArgs'] advanced_javascript_tag_settings: Advanced JavaScript tag settings
        :param pulumi.Input[str] angular_package_name: The name of the angular package
        :param pulumi.Input['WebApplicationMonitoringSettingsBrowserRestrictionSettingsArgs'] browser_restriction_settings: Settings for restricting certain browser type, version, platform and, comparator. It also restricts the mode
        :param pulumi.Input[bool] cache_control_header_optimizations: Optimize the value of cache control headers for use with Dynatrace real user monitoring enabled/disabled
        :param pulumi.Input[str] cookie_placement_domain: Domain for cookie placement. Maximum 150 characters.
        :param pulumi.Input[str] correlation_header_inclusion_regex: To enable RUM for XHR calls to AWS Lambda, define a regular expression matching these calls, Dynatrace can then automatically add a custom header (`x-dtc`) to each such request to the respective endpoints in AWS.
        """
        pulumi.set(__self__, "content_capture", content_capture)
        pulumi.set(__self__, "injection_mode", injection_mode)
        if add_cross_origin_anonymous_attribute is not None:
            pulumi.set(__self__, "add_cross_origin_anonymous_attribute", add_cross_origin_anonymous_attribute)
        if advanced_javascript_tag_settings is not None:
            pulumi.set(__self__, "advanced_javascript_tag_settings", advanced_javascript_tag_settings)
        if angular_package_name is not None:
            pulumi.set(__self__, "angular_package_name", angular_package_name)
        if browser_restriction_settings is not None:
            pulumi.set(__self__, "browser_restriction_settings", browser_restriction_settings)
        if cache_control_header_optimizations is not None:
            pulumi.set(__self__, "cache_control_header_optimizations", cache_control_header_optimizations)
        if cookie_placement_domain is not None:
            pulumi.set(__self__, "cookie_placement_domain", cookie_placement_domain)
        if correlation_header_inclusion_regex is not None:
            pulumi.set(__self__, "correlation_header_inclusion_regex", correlation_header_inclusion_regex)
        if custom_configuration_properties is not None:
            pulumi.set(__self__, "custom_configuration_properties", custom_configuration_properties)
        if exclude_xhr_regex is not None:
            pulumi.set(__self__, "exclude_xhr_regex", exclude_xhr_regex)
        if fetch_requests is not None:
            pulumi.set(__self__, "fetch_requests", fetch_requests)
        if ip_address_restriction_settings is not None:
            pulumi.set(__self__, "ip_address_restriction_settings", ip_address_restriction_settings)
        if javascript_framework_support is not None:
            pulumi.set(__self__, "javascript_framework_support", javascript_framework_support)
        if javascript_injection_rules is not None:
            pulumi.set(__self__, "javascript_injection_rules", javascript_injection_rules)
        if library_file_location is not None:
            pulumi.set(__self__, "library_file_location", library_file_location)
        if monitoring_data_path is not None:
            pulumi.set(__self__, "monitoring_data_path", monitoring_data_path)
        if script_tag_cache_duration_in_hours is not None:
            pulumi.set(__self__, "script_tag_cache_duration_in_hours", script_tag_cache_duration_in_hours)
        if secure_cookie_attribute is not None:
            pulumi.set(__self__, "secure_cookie_attribute", secure_cookie_attribute)
        if server_request_path_id is not None:
            pulumi.set(__self__, "server_request_path_id", server_request_path_id)
        if xml_http_request is not None:
            pulumi.set(__self__, "xml_http_request", xml_http_request)

    @property
    @pulumi.getter(name="contentCapture")
    def content_capture(self) -> pulumi.Input['WebApplicationMonitoringSettingsContentCaptureArgs']:
        """
        Settings for content capture
        """
        return pulumi.get(self, "content_capture")

    @content_capture.setter
    def content_capture(self, value: pulumi.Input['WebApplicationMonitoringSettingsContentCaptureArgs']):
        pulumi.set(self, "content_capture", value)

    @property
    @pulumi.getter(name="injectionMode")
    def injection_mode(self) -> pulumi.Input[str]:
        """
        Possible valures are `CODE_SNIPPET`, `CODE_SNIPPET_ASYNC`, `INLINE_CODE` and `JAVASCRIPT_TAG`.
        """
        return pulumi.get(self, "injection_mode")

    @injection_mode.setter
    def injection_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "injection_mode", value)

    @property
    @pulumi.getter(name="addCrossOriginAnonymousAttribute")
    def add_cross_origin_anonymous_attribute(self) -> Optional[pulumi.Input[bool]]:
        """
        Add the cross origin = anonymous attribute to capture JavaScript error messages and W3C resource timings
        """
        return pulumi.get(self, "add_cross_origin_anonymous_attribute")

    @add_cross_origin_anonymous_attribute.setter
    def add_cross_origin_anonymous_attribute(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_cross_origin_anonymous_attribute", value)

    @property
    @pulumi.getter(name="advancedJavascriptTagSettings")
    def advanced_javascript_tag_settings(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsArgs']]:
        """
        Advanced JavaScript tag settings
        """
        return pulumi.get(self, "advanced_javascript_tag_settings")

    @advanced_javascript_tag_settings.setter
    def advanced_javascript_tag_settings(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsArgs']]):
        pulumi.set(self, "advanced_javascript_tag_settings", value)

    @property
    @pulumi.getter(name="angularPackageName")
    def angular_package_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the angular package
        """
        return pulumi.get(self, "angular_package_name")

    @angular_package_name.setter
    def angular_package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "angular_package_name", value)

    @property
    @pulumi.getter(name="browserRestrictionSettings")
    def browser_restriction_settings(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsBrowserRestrictionSettingsArgs']]:
        """
        Settings for restricting certain browser type, version, platform and, comparator. It also restricts the mode
        """
        return pulumi.get(self, "browser_restriction_settings")

    @browser_restriction_settings.setter
    def browser_restriction_settings(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsBrowserRestrictionSettingsArgs']]):
        pulumi.set(self, "browser_restriction_settings", value)

    @property
    @pulumi.getter(name="cacheControlHeaderOptimizations")
    def cache_control_header_optimizations(self) -> Optional[pulumi.Input[bool]]:
        """
        Optimize the value of cache control headers for use with Dynatrace real user monitoring enabled/disabled
        """
        return pulumi.get(self, "cache_control_header_optimizations")

    @cache_control_header_optimizations.setter
    def cache_control_header_optimizations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cache_control_header_optimizations", value)

    @property
    @pulumi.getter(name="cookiePlacementDomain")
    def cookie_placement_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain for cookie placement. Maximum 150 characters.
        """
        return pulumi.get(self, "cookie_placement_domain")

    @cookie_placement_domain.setter
    def cookie_placement_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_placement_domain", value)

    @property
    @pulumi.getter(name="correlationHeaderInclusionRegex")
    def correlation_header_inclusion_regex(self) -> Optional[pulumi.Input[str]]:
        """
        To enable RUM for XHR calls to AWS Lambda, define a regular expression matching these calls, Dynatrace can then automatically add a custom header (`x-dtc`) to each such request to the respective endpoints in AWS.
        """
        return pulumi.get(self, "correlation_header_inclusion_regex")

    @correlation_header_inclusion_regex.setter
    def correlation_header_inclusion_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "correlation_header_inclusion_regex", value)

    @property
    @pulumi.getter(name="customConfigurationProperties")
    def custom_configuration_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_configuration_properties")

    @custom_configuration_properties.setter
    def custom_configuration_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_configuration_properties", value)

    @property
    @pulumi.getter(name="excludeXhrRegex")
    def exclude_xhr_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_xhr_regex")

    @exclude_xhr_regex.setter
    def exclude_xhr_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_xhr_regex", value)

    @property
    @pulumi.getter(name="fetchRequests")
    def fetch_requests(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fetch_requests")

    @fetch_requests.setter
    def fetch_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_requests", value)

    @property
    @pulumi.getter(name="ipAddressRestrictionSettings")
    def ip_address_restriction_settings(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsIpAddressRestrictionSettingsArgs']]:
        return pulumi.get(self, "ip_address_restriction_settings")

    @ip_address_restriction_settings.setter
    def ip_address_restriction_settings(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsIpAddressRestrictionSettingsArgs']]):
        pulumi.set(self, "ip_address_restriction_settings", value)

    @property
    @pulumi.getter(name="javascriptFrameworkSupport")
    def javascript_framework_support(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsJavascriptFrameworkSupportArgs']]:
        return pulumi.get(self, "javascript_framework_support")

    @javascript_framework_support.setter
    def javascript_framework_support(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsJavascriptFrameworkSupportArgs']]):
        pulumi.set(self, "javascript_framework_support", value)

    @property
    @pulumi.getter(name="javascriptInjectionRules")
    def javascript_injection_rules(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsJavascriptInjectionRulesArgs']]:
        return pulumi.get(self, "javascript_injection_rules")

    @javascript_injection_rules.setter
    def javascript_injection_rules(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsJavascriptInjectionRulesArgs']]):
        pulumi.set(self, "javascript_injection_rules", value)

    @property
    @pulumi.getter(name="libraryFileLocation")
    def library_file_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "library_file_location")

    @library_file_location.setter
    def library_file_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "library_file_location", value)

    @property
    @pulumi.getter(name="monitoringDataPath")
    def monitoring_data_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitoring_data_path")

    @monitoring_data_path.setter
    def monitoring_data_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitoring_data_path", value)

    @property
    @pulumi.getter(name="scriptTagCacheDurationInHours")
    def script_tag_cache_duration_in_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "script_tag_cache_duration_in_hours")

    @script_tag_cache_duration_in_hours.setter
    def script_tag_cache_duration_in_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "script_tag_cache_duration_in_hours", value)

    @property
    @pulumi.getter(name="secureCookieAttribute")
    def secure_cookie_attribute(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure_cookie_attribute")

    @secure_cookie_attribute.setter
    def secure_cookie_attribute(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure_cookie_attribute", value)

    @property
    @pulumi.getter(name="serverRequestPathId")
    def server_request_path_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_request_path_id")

    @server_request_path_id.setter
    def server_request_path_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_request_path_id", value)

    @property
    @pulumi.getter(name="xmlHttpRequest")
    def xml_http_request(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "xml_http_request")

    @xml_http_request.setter
    def xml_http_request(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "xml_http_request", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsArgs:
    def __init__(__self__, *,
                 max_action_name_length: pulumi.Input[int],
                 max_errors_to_capture: pulumi.Input[int],
                 additional_event_handlers: Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs']] = None,
                 event_wrapper_settings: Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettingsArgs']] = None,
                 global_event_capture_settings: Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettingsArgs']] = None,
                 instrument_unsupported_ajax_frameworks: Optional[pulumi.Input[bool]] = None,
                 special_characters_to_escape: Optional[pulumi.Input[str]] = None,
                 sync_beacon_firefox: Optional[pulumi.Input[bool]] = None,
                 sync_beacon_internet_explorer: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "max_action_name_length", max_action_name_length)
        pulumi.set(__self__, "max_errors_to_capture", max_errors_to_capture)
        if additional_event_handlers is not None:
            pulumi.set(__self__, "additional_event_handlers", additional_event_handlers)
        if event_wrapper_settings is not None:
            pulumi.set(__self__, "event_wrapper_settings", event_wrapper_settings)
        if global_event_capture_settings is not None:
            pulumi.set(__self__, "global_event_capture_settings", global_event_capture_settings)
        if instrument_unsupported_ajax_frameworks is not None:
            pulumi.set(__self__, "instrument_unsupported_ajax_frameworks", instrument_unsupported_ajax_frameworks)
        if special_characters_to_escape is not None:
            pulumi.set(__self__, "special_characters_to_escape", special_characters_to_escape)
        if sync_beacon_firefox is not None:
            pulumi.set(__self__, "sync_beacon_firefox", sync_beacon_firefox)
        if sync_beacon_internet_explorer is not None:
            pulumi.set(__self__, "sync_beacon_internet_explorer", sync_beacon_internet_explorer)

    @property
    @pulumi.getter(name="maxActionNameLength")
    def max_action_name_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_action_name_length")

    @max_action_name_length.setter
    def max_action_name_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_action_name_length", value)

    @property
    @pulumi.getter(name="maxErrorsToCapture")
    def max_errors_to_capture(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_errors_to_capture")

    @max_errors_to_capture.setter
    def max_errors_to_capture(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_errors_to_capture", value)

    @property
    @pulumi.getter(name="additionalEventHandlers")
    def additional_event_handlers(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs']]:
        return pulumi.get(self, "additional_event_handlers")

    @additional_event_handlers.setter
    def additional_event_handlers(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs']]):
        pulumi.set(self, "additional_event_handlers", value)

    @property
    @pulumi.getter(name="eventWrapperSettings")
    def event_wrapper_settings(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettingsArgs']]:
        return pulumi.get(self, "event_wrapper_settings")

    @event_wrapper_settings.setter
    def event_wrapper_settings(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettingsArgs']]):
        pulumi.set(self, "event_wrapper_settings", value)

    @property
    @pulumi.getter(name="globalEventCaptureSettings")
    def global_event_capture_settings(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettingsArgs']]:
        return pulumi.get(self, "global_event_capture_settings")

    @global_event_capture_settings.setter
    def global_event_capture_settings(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettingsArgs']]):
        pulumi.set(self, "global_event_capture_settings", value)

    @property
    @pulumi.getter(name="instrumentUnsupportedAjaxFrameworks")
    def instrument_unsupported_ajax_frameworks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "instrument_unsupported_ajax_frameworks")

    @instrument_unsupported_ajax_frameworks.setter
    def instrument_unsupported_ajax_frameworks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "instrument_unsupported_ajax_frameworks", value)

    @property
    @pulumi.getter(name="specialCharactersToEscape")
    def special_characters_to_escape(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "special_characters_to_escape")

    @special_characters_to_escape.setter
    def special_characters_to_escape(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "special_characters_to_escape", value)

    @property
    @pulumi.getter(name="syncBeaconFirefox")
    def sync_beacon_firefox(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sync_beacon_firefox")

    @sync_beacon_firefox.setter
    def sync_beacon_firefox(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_beacon_firefox", value)

    @property
    @pulumi.getter(name="syncBeaconInternetExplorer")
    def sync_beacon_internet_explorer(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sync_beacon_internet_explorer")

    @sync_beacon_internet_explorer.setter
    def sync_beacon_internet_explorer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_beacon_internet_explorer", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlersArgs:
    def __init__(__self__, *,
                 max_dom_nodes: pulumi.Input[int],
                 blur: Optional[pulumi.Input[bool]] = None,
                 change: Optional[pulumi.Input[bool]] = None,
                 click: Optional[pulumi.Input[bool]] = None,
                 mouseup: Optional[pulumi.Input[bool]] = None,
                 to_string_method: Optional[pulumi.Input[bool]] = None,
                 use_mouse_up_event_for_clicks: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "max_dom_nodes", max_dom_nodes)
        if blur is not None:
            pulumi.set(__self__, "blur", blur)
        if change is not None:
            pulumi.set(__self__, "change", change)
        if click is not None:
            pulumi.set(__self__, "click", click)
        if mouseup is not None:
            pulumi.set(__self__, "mouseup", mouseup)
        if to_string_method is not None:
            pulumi.set(__self__, "to_string_method", to_string_method)
        if use_mouse_up_event_for_clicks is not None:
            pulumi.set(__self__, "use_mouse_up_event_for_clicks", use_mouse_up_event_for_clicks)

    @property
    @pulumi.getter(name="maxDomNodes")
    def max_dom_nodes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_dom_nodes")

    @max_dom_nodes.setter
    def max_dom_nodes(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_dom_nodes", value)

    @property
    @pulumi.getter
    def blur(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blur")

    @blur.setter
    def blur(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blur", value)

    @property
    @pulumi.getter
    def change(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "change")

    @change.setter
    def change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "change", value)

    @property
    @pulumi.getter
    def click(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "click")

    @click.setter
    def click(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "click", value)

    @property
    @pulumi.getter
    def mouseup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mouseup")

    @mouseup.setter
    def mouseup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mouseup", value)

    @property
    @pulumi.getter(name="toStringMethod")
    def to_string_method(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "to_string_method")

    @to_string_method.setter
    def to_string_method(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "to_string_method", value)

    @property
    @pulumi.getter(name="useMouseUpEventForClicks")
    def use_mouse_up_event_for_clicks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_mouse_up_event_for_clicks")

    @use_mouse_up_event_for_clicks.setter
    def use_mouse_up_event_for_clicks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mouse_up_event_for_clicks", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettingsArgs:
    def __init__(__self__, *,
                 blur: Optional[pulumi.Input[bool]] = None,
                 change: Optional[pulumi.Input[bool]] = None,
                 click: Optional[pulumi.Input[bool]] = None,
                 mouseup: Optional[pulumi.Input[bool]] = None,
                 touch_end: Optional[pulumi.Input[bool]] = None,
                 touch_start: Optional[pulumi.Input[bool]] = None):
        if blur is not None:
            pulumi.set(__self__, "blur", blur)
        if change is not None:
            pulumi.set(__self__, "change", change)
        if click is not None:
            pulumi.set(__self__, "click", click)
        if mouseup is not None:
            pulumi.set(__self__, "mouseup", mouseup)
        if touch_end is not None:
            pulumi.set(__self__, "touch_end", touch_end)
        if touch_start is not None:
            pulumi.set(__self__, "touch_start", touch_start)

    @property
    @pulumi.getter
    def blur(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "blur")

    @blur.setter
    def blur(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "blur", value)

    @property
    @pulumi.getter
    def change(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "change")

    @change.setter
    def change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "change", value)

    @property
    @pulumi.getter
    def click(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "click")

    @click.setter
    def click(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "click", value)

    @property
    @pulumi.getter
    def mouseup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mouseup")

    @mouseup.setter
    def mouseup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mouseup", value)

    @property
    @pulumi.getter(name="touchEnd")
    def touch_end(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "touch_end")

    @touch_end.setter
    def touch_end(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "touch_end", value)

    @property
    @pulumi.getter(name="touchStart")
    def touch_start(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "touch_start")

    @touch_start.setter
    def touch_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "touch_start", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettingsArgs:
    def __init__(__self__, *,
                 additional_event_captured_as_user_input: Optional[pulumi.Input[str]] = None,
                 click: Optional[pulumi.Input[bool]] = None,
                 doubleclick: Optional[pulumi.Input[bool]] = None,
                 keydown: Optional[pulumi.Input[bool]] = None,
                 keyup: Optional[pulumi.Input[bool]] = None,
                 mousedown: Optional[pulumi.Input[bool]] = None,
                 mouseup: Optional[pulumi.Input[bool]] = None,
                 scroll: Optional[pulumi.Input[bool]] = None):
        if additional_event_captured_as_user_input is not None:
            pulumi.set(__self__, "additional_event_captured_as_user_input", additional_event_captured_as_user_input)
        if click is not None:
            pulumi.set(__self__, "click", click)
        if doubleclick is not None:
            pulumi.set(__self__, "doubleclick", doubleclick)
        if keydown is not None:
            pulumi.set(__self__, "keydown", keydown)
        if keyup is not None:
            pulumi.set(__self__, "keyup", keyup)
        if mousedown is not None:
            pulumi.set(__self__, "mousedown", mousedown)
        if mouseup is not None:
            pulumi.set(__self__, "mouseup", mouseup)
        if scroll is not None:
            pulumi.set(__self__, "scroll", scroll)

    @property
    @pulumi.getter(name="additionalEventCapturedAsUserInput")
    def additional_event_captured_as_user_input(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_event_captured_as_user_input")

    @additional_event_captured_as_user_input.setter
    def additional_event_captured_as_user_input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_event_captured_as_user_input", value)

    @property
    @pulumi.getter
    def click(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "click")

    @click.setter
    def click(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "click", value)

    @property
    @pulumi.getter
    def doubleclick(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "doubleclick")

    @doubleclick.setter
    def doubleclick(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "doubleclick", value)

    @property
    @pulumi.getter
    def keydown(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keydown")

    @keydown.setter
    def keydown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keydown", value)

    @property
    @pulumi.getter
    def keyup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keyup")

    @keyup.setter
    def keyup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keyup", value)

    @property
    @pulumi.getter
    def mousedown(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mousedown")

    @mousedown.setter
    def mousedown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mousedown", value)

    @property
    @pulumi.getter
    def mouseup(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mouseup")

    @mouseup.setter
    def mouseup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mouseup", value)

    @property
    @pulumi.getter
    def scroll(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scroll")

    @scroll.setter
    def scroll(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scroll", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsBrowserRestrictionSettingsArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 restrictions: Optional[pulumi.Input['WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsArgs']] = None):
        pulumi.set(__self__, "mode", mode)
        if restrictions is not None:
            pulumi.set(__self__, "restrictions", restrictions)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def restrictions(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsArgs']]:
        return pulumi.get(self, "restrictions")

    @restrictions.setter
    def restrictions(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsArgs']]):
        pulumi.set(self, "restrictions", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsArgs:
    def __init__(__self__, *,
                 restrictions: pulumi.Input[Sequence[pulumi.Input['WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestrictionArgs']]]):
        pulumi.set(__self__, "restrictions", restrictions)

    @property
    @pulumi.getter
    def restrictions(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestrictionArgs']]]:
        return pulumi.get(self, "restrictions")

    @restrictions.setter
    def restrictions(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestrictionArgs']]]):
        pulumi.set(self, "restrictions", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestrictionArgs:
    def __init__(__self__, *,
                 browser_type: pulumi.Input[str],
                 browser_version: Optional[pulumi.Input[str]] = None,
                 comparator: Optional[pulumi.Input[str]] = None,
                 platform: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "browser_type", browser_type)
        if browser_version is not None:
            pulumi.set(__self__, "browser_version", browser_version)
        if comparator is not None:
            pulumi.set(__self__, "comparator", comparator)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)

    @property
    @pulumi.getter(name="browserType")
    def browser_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "browser_type")

    @browser_type.setter
    def browser_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "browser_type", value)

    @property
    @pulumi.getter(name="browserVersion")
    def browser_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "browser_version")

    @browser_version.setter
    def browser_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "browser_version", value)

    @property
    @pulumi.getter
    def comparator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsContentCaptureArgs:
    def __init__(__self__, *,
                 javascript_errors: Optional[pulumi.Input[bool]] = None,
                 resource_timing_settings: Optional[pulumi.Input['WebApplicationMonitoringSettingsContentCaptureResourceTimingSettingsArgs']] = None,
                 timeout_settings: Optional[pulumi.Input['WebApplicationMonitoringSettingsContentCaptureTimeoutSettingsArgs']] = None,
                 visually_complete_and_speed_index: Optional[pulumi.Input[bool]] = None,
                 visually_complete_settings: Optional[pulumi.Input['WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettingsArgs']] = None):
        if javascript_errors is not None:
            pulumi.set(__self__, "javascript_errors", javascript_errors)
        if resource_timing_settings is not None:
            pulumi.set(__self__, "resource_timing_settings", resource_timing_settings)
        if timeout_settings is not None:
            pulumi.set(__self__, "timeout_settings", timeout_settings)
        if visually_complete_and_speed_index is not None:
            pulumi.set(__self__, "visually_complete_and_speed_index", visually_complete_and_speed_index)
        if visually_complete_settings is not None:
            pulumi.set(__self__, "visually_complete_settings", visually_complete_settings)

    @property
    @pulumi.getter(name="javascriptErrors")
    def javascript_errors(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "javascript_errors")

    @javascript_errors.setter
    def javascript_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "javascript_errors", value)

    @property
    @pulumi.getter(name="resourceTimingSettings")
    def resource_timing_settings(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsContentCaptureResourceTimingSettingsArgs']]:
        return pulumi.get(self, "resource_timing_settings")

    @resource_timing_settings.setter
    def resource_timing_settings(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsContentCaptureResourceTimingSettingsArgs']]):
        pulumi.set(self, "resource_timing_settings", value)

    @property
    @pulumi.getter(name="timeoutSettings")
    def timeout_settings(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsContentCaptureTimeoutSettingsArgs']]:
        return pulumi.get(self, "timeout_settings")

    @timeout_settings.setter
    def timeout_settings(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsContentCaptureTimeoutSettingsArgs']]):
        pulumi.set(self, "timeout_settings", value)

    @property
    @pulumi.getter(name="visuallyCompleteAndSpeedIndex")
    def visually_complete_and_speed_index(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "visually_complete_and_speed_index")

    @visually_complete_and_speed_index.setter
    def visually_complete_and_speed_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "visually_complete_and_speed_index", value)

    @property
    @pulumi.getter(name="visuallyCompleteSettings")
    def visually_complete_settings(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettingsArgs']]:
        return pulumi.get(self, "visually_complete_settings")

    @visually_complete_settings.setter
    def visually_complete_settings(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettingsArgs']]):
        pulumi.set(self, "visually_complete_settings", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsContentCaptureResourceTimingSettingsArgs:
    def __init__(__self__, *,
                 instrumentation_delay: pulumi.Input[int],
                 non_w3c_resource_timings: Optional[pulumi.Input[bool]] = None,
                 resource_timing_capture_type: Optional[pulumi.Input[str]] = None,
                 resource_timings_domain_limit: Optional[pulumi.Input[int]] = None,
                 w3c_resource_timings: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "instrumentation_delay", instrumentation_delay)
        if non_w3c_resource_timings is not None:
            pulumi.set(__self__, "non_w3c_resource_timings", non_w3c_resource_timings)
        if resource_timing_capture_type is not None:
            pulumi.set(__self__, "resource_timing_capture_type", resource_timing_capture_type)
        if resource_timings_domain_limit is not None:
            pulumi.set(__self__, "resource_timings_domain_limit", resource_timings_domain_limit)
        if w3c_resource_timings is not None:
            pulumi.set(__self__, "w3c_resource_timings", w3c_resource_timings)

    @property
    @pulumi.getter(name="instrumentationDelay")
    def instrumentation_delay(self) -> pulumi.Input[int]:
        return pulumi.get(self, "instrumentation_delay")

    @instrumentation_delay.setter
    def instrumentation_delay(self, value: pulumi.Input[int]):
        pulumi.set(self, "instrumentation_delay", value)

    @property
    @pulumi.getter(name="nonW3cResourceTimings")
    def non_w3c_resource_timings(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "non_w3c_resource_timings")

    @non_w3c_resource_timings.setter
    def non_w3c_resource_timings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "non_w3c_resource_timings", value)

    @property
    @pulumi.getter(name="resourceTimingCaptureType")
    def resource_timing_capture_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_timing_capture_type")

    @resource_timing_capture_type.setter
    def resource_timing_capture_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_timing_capture_type", value)

    @property
    @pulumi.getter(name="resourceTimingsDomainLimit")
    def resource_timings_domain_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "resource_timings_domain_limit")

    @resource_timings_domain_limit.setter
    def resource_timings_domain_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resource_timings_domain_limit", value)

    @property
    @pulumi.getter(name="w3cResourceTimings")
    def w3c_resource_timings(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "w3c_resource_timings")

    @w3c_resource_timings.setter
    def w3c_resource_timings(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "w3c_resource_timings", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsContentCaptureTimeoutSettingsArgs:
    def __init__(__self__, *,
                 temporary_action_limit: pulumi.Input[int],
                 temporary_action_total_timeout: pulumi.Input[int],
                 timed_action_support: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "temporary_action_limit", temporary_action_limit)
        pulumi.set(__self__, "temporary_action_total_timeout", temporary_action_total_timeout)
        if timed_action_support is not None:
            pulumi.set(__self__, "timed_action_support", timed_action_support)

    @property
    @pulumi.getter(name="temporaryActionLimit")
    def temporary_action_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "temporary_action_limit")

    @temporary_action_limit.setter
    def temporary_action_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "temporary_action_limit", value)

    @property
    @pulumi.getter(name="temporaryActionTotalTimeout")
    def temporary_action_total_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "temporary_action_total_timeout")

    @temporary_action_total_timeout.setter
    def temporary_action_total_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "temporary_action_total_timeout", value)

    @property
    @pulumi.getter(name="timedActionSupport")
    def timed_action_support(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "timed_action_support")

    @timed_action_support.setter
    def timed_action_support(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timed_action_support", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettingsArgs:
    def __init__(__self__, *,
                 exclude_url_regex: Optional[pulumi.Input[str]] = None,
                 ignored_mutations_list: Optional[pulumi.Input[str]] = None,
                 inactivity_timeout: Optional[pulumi.Input[int]] = None,
                 mutation_timeout: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None):
        if exclude_url_regex is not None:
            pulumi.set(__self__, "exclude_url_regex", exclude_url_regex)
        if ignored_mutations_list is not None:
            pulumi.set(__self__, "ignored_mutations_list", ignored_mutations_list)
        if inactivity_timeout is not None:
            pulumi.set(__self__, "inactivity_timeout", inactivity_timeout)
        if mutation_timeout is not None:
            pulumi.set(__self__, "mutation_timeout", mutation_timeout)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="excludeUrlRegex")
    def exclude_url_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_url_regex")

    @exclude_url_regex.setter
    def exclude_url_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_url_regex", value)

    @property
    @pulumi.getter(name="ignoredMutationsList")
    def ignored_mutations_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignored_mutations_list")

    @ignored_mutations_list.setter
    def ignored_mutations_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignored_mutations_list", value)

    @property
    @pulumi.getter(name="inactivityTimeout")
    def inactivity_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "inactivity_timeout")

    @inactivity_timeout.setter
    def inactivity_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactivity_timeout", value)

    @property
    @pulumi.getter(name="mutationTimeout")
    def mutation_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mutation_timeout")

    @mutation_timeout.setter
    def mutation_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mutation_timeout", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsIpAddressRestrictionSettingsArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 restrictions: Optional[pulumi.Input['WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsArgs']] = None):
        pulumi.set(__self__, "mode", mode)
        if restrictions is not None:
            pulumi.set(__self__, "restrictions", restrictions)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def restrictions(self) -> Optional[pulumi.Input['WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsArgs']]:
        return pulumi.get(self, "restrictions")

    @restrictions.setter
    def restrictions(self, value: Optional[pulumi.Input['WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsArgs']]):
        pulumi.set(self, "restrictions", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsArgs:
    def __init__(__self__, *,
                 ranges: pulumi.Input[Sequence[pulumi.Input['WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRangeArgs']]]):
        pulumi.set(__self__, "ranges", ranges)

    @property
    @pulumi.getter
    def ranges(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRangeArgs']]]:
        return pulumi.get(self, "ranges")

    @ranges.setter
    def ranges(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRangeArgs']]]):
        pulumi.set(self, "ranges", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRangeArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 address_to: Optional[pulumi.Input[str]] = None,
                 subnet_mask: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "address", address)
        if address_to is not None:
            pulumi.set(__self__, "address_to", address_to)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="addressTo")
    def address_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address_to")

    @address_to.setter
    def address_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address_to", value)

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subnet_mask", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsJavascriptFrameworkSupportArgs:
    def __init__(__self__, *,
                 active_x_object: Optional[pulumi.Input[bool]] = None,
                 angular: Optional[pulumi.Input[bool]] = None,
                 dojo: Optional[pulumi.Input[bool]] = None,
                 extjs: Optional[pulumi.Input[bool]] = None,
                 icefaces: Optional[pulumi.Input[bool]] = None,
                 jquery: Optional[pulumi.Input[bool]] = None,
                 moo_tools: Optional[pulumi.Input[bool]] = None,
                 prototype: Optional[pulumi.Input[bool]] = None):
        if active_x_object is not None:
            pulumi.set(__self__, "active_x_object", active_x_object)
        if angular is not None:
            pulumi.set(__self__, "angular", angular)
        if dojo is not None:
            pulumi.set(__self__, "dojo", dojo)
        if extjs is not None:
            pulumi.set(__self__, "extjs", extjs)
        if icefaces is not None:
            pulumi.set(__self__, "icefaces", icefaces)
        if jquery is not None:
            pulumi.set(__self__, "jquery", jquery)
        if moo_tools is not None:
            pulumi.set(__self__, "moo_tools", moo_tools)
        if prototype is not None:
            pulumi.set(__self__, "prototype", prototype)

    @property
    @pulumi.getter(name="activeXObject")
    def active_x_object(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "active_x_object")

    @active_x_object.setter
    def active_x_object(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active_x_object", value)

    @property
    @pulumi.getter
    def angular(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "angular")

    @angular.setter
    def angular(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "angular", value)

    @property
    @pulumi.getter
    def dojo(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dojo")

    @dojo.setter
    def dojo(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dojo", value)

    @property
    @pulumi.getter
    def extjs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "extjs")

    @extjs.setter
    def extjs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extjs", value)

    @property
    @pulumi.getter
    def icefaces(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "icefaces")

    @icefaces.setter
    def icefaces(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "icefaces", value)

    @property
    @pulumi.getter
    def jquery(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "jquery")

    @jquery.setter
    def jquery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "jquery", value)

    @property
    @pulumi.getter(name="mooTools")
    def moo_tools(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "moo_tools")

    @moo_tools.setter
    def moo_tools(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "moo_tools", value)

    @property
    @pulumi.getter
    def prototype(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prototype")

    @prototype.setter
    def prototype(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prototype", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsJavascriptInjectionRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['WebApplicationMonitoringSettingsJavascriptInjectionRulesRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationMonitoringSettingsJavascriptInjectionRulesRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationMonitoringSettingsJavascriptInjectionRulesRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class WebApplicationMonitoringSettingsJavascriptInjectionRulesRuleArgs:
    def __init__(__self__, *,
                 rule: pulumi.Input[str],
                 url_operator: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 html_pattern: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 url_pattern: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "rule", rule)
        pulumi.set(__self__, "url_operator", url_operator)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if html_pattern is not None:
            pulumi.set(__self__, "html_pattern", html_pattern)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if url_pattern is not None:
            pulumi.set(__self__, "url_pattern", url_pattern)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="urlOperator")
    def url_operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url_operator")

    @url_operator.setter
    def url_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "url_operator", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="htmlPattern")
    def html_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "html_pattern")

    @html_pattern.setter
    def html_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html_pattern", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="urlPattern")
    def url_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_pattern")

    @url_pattern.setter
    def url_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_pattern", value)


@pulumi.input_type
class WebApplicationSessionReplayConfigArgs:
    def __init__(__self__, *,
                 cost_control_percentage: pulumi.Input[int],
                 css_resource_capturing_exclusion_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_css_resource_capturing: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] cost_control_percentage: (Field has overlap with `WebAppEnablement`) Session replay sampling rating in percent
        :param pulumi.Input[Sequence[pulumi.Input[str]]] css_resource_capturing_exclusion_rules: (Field has overlap with `SessionReplayResourceCapture`) A list of URLs to be excluded from CSS resource capturing
        :param pulumi.Input[bool] enable_css_resource_capturing: (Field has overlap with `SessionReplayResourceCapture`) Capture (`true`) or don't capture (`false`) CSS resources from the session
        :param pulumi.Input[bool] enabled: (Field has overlap with `WebAppEnablement`) SessionReplay Enabled/Disabled
        """
        pulumi.set(__self__, "cost_control_percentage", cost_control_percentage)
        if css_resource_capturing_exclusion_rules is not None:
            pulumi.set(__self__, "css_resource_capturing_exclusion_rules", css_resource_capturing_exclusion_rules)
        if enable_css_resource_capturing is not None:
            pulumi.set(__self__, "enable_css_resource_capturing", enable_css_resource_capturing)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="costControlPercentage")
    def cost_control_percentage(self) -> pulumi.Input[int]:
        """
        (Field has overlap with `WebAppEnablement`) Session replay sampling rating in percent
        """
        return pulumi.get(self, "cost_control_percentage")

    @cost_control_percentage.setter
    def cost_control_percentage(self, value: pulumi.Input[int]):
        pulumi.set(self, "cost_control_percentage", value)

    @property
    @pulumi.getter(name="cssResourceCapturingExclusionRules")
    def css_resource_capturing_exclusion_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Field has overlap with `SessionReplayResourceCapture`) A list of URLs to be excluded from CSS resource capturing
        """
        return pulumi.get(self, "css_resource_capturing_exclusion_rules")

    @css_resource_capturing_exclusion_rules.setter
    def css_resource_capturing_exclusion_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "css_resource_capturing_exclusion_rules", value)

    @property
    @pulumi.getter(name="enableCssResourceCapturing")
    def enable_css_resource_capturing(self) -> Optional[pulumi.Input[bool]]:
        """
        (Field has overlap with `SessionReplayResourceCapture`) Capture (`true`) or don't capture (`false`) CSS resources from the session
        """
        return pulumi.get(self, "enable_css_resource_capturing")

    @enable_css_resource_capturing.setter
    def enable_css_resource_capturing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_css_resource_capturing", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Field has overlap with `WebAppEnablement`) SessionReplay Enabled/Disabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class WebApplicationUserActionAndSessionPropertiesArgs:
    def __init__(__self__, *,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionAndSessionPropertiesPropertyArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionAndSessionPropertiesPropertyArgs']]] properties: User action and session properties settings
        """
        if properties is not None:
            pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionAndSessionPropertiesPropertyArgs']]]]:
        """
        User action and session properties settings
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionAndSessionPropertiesPropertyArgs']]]]):
        pulumi.set(self, "properties", value)


@pulumi.input_type
class WebApplicationUserActionAndSessionPropertiesPropertyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 key: pulumi.Input[str],
                 origin: pulumi.Input[str],
                 type: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 cleanup_rule: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 long_string_length: Optional[pulumi.Input[int]] = None,
                 metadata_id: Optional[pulumi.Input[int]] = None,
                 server_side_request_attribute: Optional[pulumi.Input[str]] = None,
                 store_as_session_property: Optional[pulumi.Input[bool]] = None,
                 store_as_user_action_property: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] id: The ID of this resource.
        :param pulumi.Input[str] type: The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "type", type)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if cleanup_rule is not None:
            pulumi.set(__self__, "cleanup_rule", cleanup_rule)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if long_string_length is not None:
            pulumi.set(__self__, "long_string_length", long_string_length)
        if metadata_id is not None:
            pulumi.set(__self__, "metadata_id", metadata_id)
        if server_side_request_attribute is not None:
            pulumi.set(__self__, "server_side_request_attribute", server_side_request_attribute)
        if store_as_session_property is not None:
            pulumi.set(__self__, "store_as_session_property", store_as_session_property)
        if store_as_user_action_property is not None:
            pulumi.set(__self__, "store_as_user_action_property", store_as_user_action_property)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Input[str]:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="cleanupRule")
    def cleanup_rule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cleanup_rule")

    @cleanup_rule.setter
    def cleanup_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cleanup_rule", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="longStringLength")
    def long_string_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "long_string_length")

    @long_string_length.setter
    def long_string_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "long_string_length", value)

    @property
    @pulumi.getter(name="metadataId")
    def metadata_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metadata_id")

    @metadata_id.setter
    def metadata_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_id", value)

    @property
    @pulumi.getter(name="serverSideRequestAttribute")
    def server_side_request_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_side_request_attribute")

    @server_side_request_attribute.setter
    def server_side_request_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_request_attribute", value)

    @property
    @pulumi.getter(name="storeAsSessionProperty")
    def store_as_session_property(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "store_as_session_property")

    @store_as_session_property.setter
    def store_as_session_property(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_as_session_property", value)

    @property
    @pulumi.getter(name="storeAsUserActionProperty")
    def store_as_user_action_property(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "store_as_user_action_property")

    @store_as_user_action_property.setter
    def store_as_user_action_property(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "store_as_user_action_property", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsArgs:
    def __init__(__self__, *,
                 custom_action_naming_rules: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs']] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 load_action_naming_rules: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs']] = None,
                 placeholders: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersArgs']] = None,
                 query_parameter_cleanups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 split_user_actions_by_domain: Optional[pulumi.Input[bool]] = None,
                 use_first_detected_load_action: Optional[pulumi.Input[bool]] = None,
                 xhr_action_naming_rules: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs']] = None):
        """
        :param pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs'] custom_action_naming_rules: User action naming rules for custom actions
        :param pulumi.Input[bool] ignore_case: Case insensitive naming
        :param pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs'] load_action_naming_rules: User action naming rules for loading actions
        :param pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersArgs'] placeholders: User action placeholders
        :param pulumi.Input[Sequence[pulumi.Input[str]]] query_parameter_cleanups: User action naming rules for custom actions
        :param pulumi.Input[bool] split_user_actions_by_domain: Deactivate this setting if different domains should not result in separate user actions
        :param pulumi.Input[bool] use_first_detected_load_action: First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
        :param pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs'] xhr_action_naming_rules: User action naming rules for XHR actions
        """
        if custom_action_naming_rules is not None:
            pulumi.set(__self__, "custom_action_naming_rules", custom_action_naming_rules)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if load_action_naming_rules is not None:
            pulumi.set(__self__, "load_action_naming_rules", load_action_naming_rules)
        if placeholders is not None:
            pulumi.set(__self__, "placeholders", placeholders)
        if query_parameter_cleanups is not None:
            pulumi.set(__self__, "query_parameter_cleanups", query_parameter_cleanups)
        if split_user_actions_by_domain is not None:
            pulumi.set(__self__, "split_user_actions_by_domain", split_user_actions_by_domain)
        if use_first_detected_load_action is not None:
            pulumi.set(__self__, "use_first_detected_load_action", use_first_detected_load_action)
        if xhr_action_naming_rules is not None:
            pulumi.set(__self__, "xhr_action_naming_rules", xhr_action_naming_rules)

    @property
    @pulumi.getter(name="customActionNamingRules")
    def custom_action_naming_rules(self) -> Optional[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs']]:
        """
        User action naming rules for custom actions
        """
        return pulumi.get(self, "custom_action_naming_rules")

    @custom_action_naming_rules.setter
    def custom_action_naming_rules(self, value: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs']]):
        pulumi.set(self, "custom_action_naming_rules", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        Case insensitive naming
        """
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="loadActionNamingRules")
    def load_action_naming_rules(self) -> Optional[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs']]:
        """
        User action naming rules for loading actions
        """
        return pulumi.get(self, "load_action_naming_rules")

    @load_action_naming_rules.setter
    def load_action_naming_rules(self, value: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs']]):
        pulumi.set(self, "load_action_naming_rules", value)

    @property
    @pulumi.getter
    def placeholders(self) -> Optional[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersArgs']]:
        """
        User action placeholders
        """
        return pulumi.get(self, "placeholders")

    @placeholders.setter
    def placeholders(self, value: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersArgs']]):
        pulumi.set(self, "placeholders", value)

    @property
    @pulumi.getter(name="queryParameterCleanups")
    def query_parameter_cleanups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        User action naming rules for custom actions
        """
        return pulumi.get(self, "query_parameter_cleanups")

    @query_parameter_cleanups.setter
    def query_parameter_cleanups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "query_parameter_cleanups", value)

    @property
    @pulumi.getter(name="splitUserActionsByDomain")
    def split_user_actions_by_domain(self) -> Optional[pulumi.Input[bool]]:
        """
        Deactivate this setting if different domains should not result in separate user actions
        """
        return pulumi.get(self, "split_user_actions_by_domain")

    @split_user_actions_by_domain.setter
    def split_user_actions_by_domain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "split_user_actions_by_domain", value)

    @property
    @pulumi.getter(name="useFirstDetectedLoadAction")
    def use_first_detected_load_action(self) -> Optional[pulumi.Input[bool]]:
        """
        First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
        """
        return pulumi.get(self, "use_first_detected_load_action")

    @use_first_detected_load_action.setter
    def use_first_detected_load_action(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_first_detected_load_action", value)

    @property
    @pulumi.getter(name="xhrActionNamingRules")
    def xhr_action_naming_rules(self) -> Optional[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs']]:
        """
        User action naming rules for XHR actions
        """
        return pulumi.get(self, "xhr_action_naming_rules")

    @xhr_action_naming_rules.setter
    def xhr_action_naming_rules(self, value: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs']]):
        pulumi.set(self, "xhr_action_naming_rules", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsCustomActionNamingRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleArgs:
    def __init__(__self__, *,
                 template: pulumi.Input[str],
                 conditions: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsArgs']] = None,
                 use_or_conditions: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "template", template)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if use_or_conditions is not None:
            pulumi.set(__self__, "use_or_conditions", use_or_conditions)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[str]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsArgs']]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsArgs']]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="useOrConditions")
    def use_or_conditions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_or_conditions")

    @use_or_conditions.setter
    def use_or_conditions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_or_conditions", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsConditionArgs:
    def __init__(__self__, *,
                 operand1: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 operand2: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operand1", operand1)
        pulumi.set(__self__, "operator", operator)
        if operand2 is not None:
            pulumi.set(__self__, "operand2", operand2)

    @property
    @pulumi.getter
    def operand1(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operand1")

    @operand1.setter
    def operand1(self, value: pulumi.Input[str]):
        pulumi.set(self, "operand1", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def operand2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operand2")

    @operand2.setter
    def operand2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operand2", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsLoadActionNamingRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleArgs:
    def __init__(__self__, *,
                 template: pulumi.Input[str],
                 conditions: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsArgs']] = None,
                 use_or_conditions: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "template", template)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if use_or_conditions is not None:
            pulumi.set(__self__, "use_or_conditions", use_or_conditions)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[str]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsArgs']]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsArgs']]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="useOrConditions")
    def use_or_conditions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_or_conditions")

    @use_or_conditions.setter
    def use_or_conditions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_or_conditions", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsConditionArgs:
    def __init__(__self__, *,
                 operand1: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 operand2: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operand1", operand1)
        pulumi.set(__self__, "operator", operator)
        if operand2 is not None:
            pulumi.set(__self__, "operand2", operand2)

    @property
    @pulumi.getter
    def operand1(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operand1")

    @operand1.setter
    def operand1(self, value: pulumi.Input[str]):
        pulumi.set(self, "operand1", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def operand2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operand2")

    @operand2.setter
    def operand2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operand2", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsPlaceholdersArgs:
    def __init__(__self__, *,
                 placeholders: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderArgs']]]):
        pulumi.set(__self__, "placeholders", placeholders)

    @property
    @pulumi.getter
    def placeholders(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderArgs']]]:
        return pulumi.get(self, "placeholders")

    @placeholders.setter
    def placeholders(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderArgs']]]):
        pulumi.set(self, "placeholders", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderArgs:
    def __init__(__self__, *,
                 input: pulumi.Input[str],
                 name: pulumi.Input[str],
                 processing_part: pulumi.Input[str],
                 metadata_id: Optional[pulumi.Input[int]] = None,
                 processing_steps: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsArgs']] = None,
                 use_guessed_element_identifier: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: The name of the web application, displayed in the UI
        """
        pulumi.set(__self__, "input", input)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "processing_part", processing_part)
        if metadata_id is not None:
            pulumi.set(__self__, "metadata_id", metadata_id)
        if processing_steps is not None:
            pulumi.set(__self__, "processing_steps", processing_steps)
        if use_guessed_element_identifier is not None:
            pulumi.set(__self__, "use_guessed_element_identifier", use_guessed_element_identifier)

    @property
    @pulumi.getter
    def input(self) -> pulumi.Input[str]:
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: pulumi.Input[str]):
        pulumi.set(self, "input", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the web application, displayed in the UI
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="processingPart")
    def processing_part(self) -> pulumi.Input[str]:
        return pulumi.get(self, "processing_part")

    @processing_part.setter
    def processing_part(self, value: pulumi.Input[str]):
        pulumi.set(self, "processing_part", value)

    @property
    @pulumi.getter(name="metadataId")
    def metadata_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metadata_id")

    @metadata_id.setter
    def metadata_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_id", value)

    @property
    @pulumi.getter(name="processingSteps")
    def processing_steps(self) -> Optional[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsArgs']]:
        return pulumi.get(self, "processing_steps")

    @processing_steps.setter
    def processing_steps(self, value: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsArgs']]):
        pulumi.set(self, "processing_steps", value)

    @property
    @pulumi.getter(name="useGuessedElementIdentifier")
    def use_guessed_element_identifier(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_guessed_element_identifier")

    @use_guessed_element_identifier.setter
    def use_guessed_element_identifier(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_guessed_element_identifier", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsArgs:
    def __init__(__self__, *,
                 steps: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStepArgs']]]):
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStepArgs']]]:
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStepArgs']]]):
        pulumi.set(self, "steps", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStepArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 fallback_to_input: Optional[pulumi.Input[bool]] = None,
                 pattern_after: Optional[pulumi.Input[str]] = None,
                 pattern_after_search_type: Optional[pulumi.Input[str]] = None,
                 pattern_before: Optional[pulumi.Input[str]] = None,
                 pattern_before_search_type: Optional[pulumi.Input[str]] = None,
                 pattern_to_replace: Optional[pulumi.Input[str]] = None,
                 regular_expression: Optional[pulumi.Input[str]] = None,
                 replacement: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        """
        pulumi.set(__self__, "type", type)
        if fallback_to_input is not None:
            pulumi.set(__self__, "fallback_to_input", fallback_to_input)
        if pattern_after is not None:
            pulumi.set(__self__, "pattern_after", pattern_after)
        if pattern_after_search_type is not None:
            pulumi.set(__self__, "pattern_after_search_type", pattern_after_search_type)
        if pattern_before is not None:
            pulumi.set(__self__, "pattern_before", pattern_before)
        if pattern_before_search_type is not None:
            pulumi.set(__self__, "pattern_before_search_type", pattern_before_search_type)
        if pattern_to_replace is not None:
            pulumi.set(__self__, "pattern_to_replace", pattern_to_replace)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replacement is not None:
            pulumi.set(__self__, "replacement", replacement)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and `MANUALLY_INJECTED`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="fallbackToInput")
    def fallback_to_input(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fallback_to_input")

    @fallback_to_input.setter
    def fallback_to_input(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fallback_to_input", value)

    @property
    @pulumi.getter(name="patternAfter")
    def pattern_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_after")

    @pattern_after.setter
    def pattern_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_after", value)

    @property
    @pulumi.getter(name="patternAfterSearchType")
    def pattern_after_search_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_after_search_type")

    @pattern_after_search_type.setter
    def pattern_after_search_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_after_search_type", value)

    @property
    @pulumi.getter(name="patternBefore")
    def pattern_before(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_before")

    @pattern_before.setter
    def pattern_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_before", value)

    @property
    @pulumi.getter(name="patternBeforeSearchType")
    def pattern_before_search_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_before_search_type")

    @pattern_before_search_type.setter
    def pattern_before_search_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_before_search_type", value)

    @property
    @pulumi.getter(name="patternToReplace")
    def pattern_to_replace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_to_replace")

    @pattern_to_replace.setter
    def pattern_to_replace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_to_replace", value)

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regular_expression")

    @regular_expression.setter
    def regular_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regular_expression", value)

    @property
    @pulumi.getter
    def replacement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replacement")

    @replacement.setter
    def replacement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsXhrActionNamingRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleArgs']]]):
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleArgs:
    def __init__(__self__, *,
                 template: pulumi.Input[str],
                 conditions: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsArgs']] = None,
                 use_or_conditions: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "template", template)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if use_or_conditions is not None:
            pulumi.set(__self__, "use_or_conditions", use_or_conditions)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[str]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsArgs']]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsArgs']]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="useOrConditions")
    def use_or_conditions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_or_conditions")

    @use_or_conditions.setter
    def use_or_conditions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_or_conditions", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsConditionArgs']]]):
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsConditionArgs']]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsConditionArgs']]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsConditionArgs:
    def __init__(__self__, *,
                 operand1: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 operand2: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operand1", operand1)
        pulumi.set(__self__, "operator", operator)
        if operand2 is not None:
            pulumi.set(__self__, "operand2", operand2)

    @property
    @pulumi.getter
    def operand1(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operand1")

    @operand1.setter
    def operand1(self, value: pulumi.Input[str]):
        pulumi.set(self, "operand1", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def operand2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operand2")

    @operand2.setter
    def operand2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operand2", value)


@pulumi.input_type
class WebApplicationUserTagsArgs:
    def __init__(__self__, *,
                 tags: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserTagsTagArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WebApplicationUserTagsTagArgs']]] tags: User tag settings
        """
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Sequence[pulumi.Input['WebApplicationUserTagsTagArgs']]]:
        """
        User tag settings
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Sequence[pulumi.Input['WebApplicationUserTagsTagArgs']]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class WebApplicationUserTagsTagArgs:
    def __init__(__self__, *,
                 cleanup_rule: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 metadata_id: Optional[pulumi.Input[int]] = None,
                 server_side_request_attribute: Optional[pulumi.Input[str]] = None,
                 unique_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: The ID of this resource.
        """
        if cleanup_rule is not None:
            pulumi.set(__self__, "cleanup_rule", cleanup_rule)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if metadata_id is not None:
            pulumi.set(__self__, "metadata_id", metadata_id)
        if server_side_request_attribute is not None:
            pulumi.set(__self__, "server_side_request_attribute", server_side_request_attribute)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="cleanupRule")
    def cleanup_rule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cleanup_rule")

    @cleanup_rule.setter
    def cleanup_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cleanup_rule", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="metadataId")
    def metadata_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metadata_id")

    @metadata_id.setter
    def metadata_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_id", value)

    @property
    @pulumi.getter(name="serverSideRequestAttribute")
    def server_side_request_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_side_request_attribute")

    @server_side_request_attribute.setter
    def server_side_request_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_side_request_attribute", value)

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unique_id")

    @unique_id.setter
    def unique_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unique_id", value)


@pulumi.input_type
class WebApplicationWaterfallSettingsArgs:
    def __init__(__self__, *,
                 resource_browser_caching_threshold: pulumi.Input[int],
                 resources_threshold: pulumi.Input[int],
                 slow_cnd_resources_threshold: pulumi.Input[int],
                 slow_first_party_resources_threshold: pulumi.Input[int],
                 slow_third_party_resources_threshold: pulumi.Input[int],
                 speed_index_visually_complete_ratio_threshold: pulumi.Input[int],
                 uncompressed_resources_threshold: pulumi.Input[int]):
        """
        :param pulumi.Input[int] resource_browser_caching_threshold: Warn about resources with a lower browser cache rate above *X*%. Values between 1 and 100 are allowed.
        :param pulumi.Input[int] resources_threshold: Warn about resources larger than *X* bytes. Values between 0 and 99999000 are allowed.
        :param pulumi.Input[int] slow_cnd_resources_threshold: Warn about slow CDN resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
        :param pulumi.Input[int] slow_first_party_resources_threshold: Warn about slow 1st party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
        :param pulumi.Input[int] slow_third_party_resources_threshold: Warn about slow 3rd party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
        :param pulumi.Input[int] speed_index_visually_complete_ratio_threshold: Warn if Speed index exceeds *X* % of Visually complete. Values between 1 and 99 are allowed.
        :param pulumi.Input[int] uncompressed_resources_threshold: Warn about uncompressed resources larger than *X* bytes. Values between 0 and 99999 are allowed.
        """
        pulumi.set(__self__, "resource_browser_caching_threshold", resource_browser_caching_threshold)
        pulumi.set(__self__, "resources_threshold", resources_threshold)
        pulumi.set(__self__, "slow_cnd_resources_threshold", slow_cnd_resources_threshold)
        pulumi.set(__self__, "slow_first_party_resources_threshold", slow_first_party_resources_threshold)
        pulumi.set(__self__, "slow_third_party_resources_threshold", slow_third_party_resources_threshold)
        pulumi.set(__self__, "speed_index_visually_complete_ratio_threshold", speed_index_visually_complete_ratio_threshold)
        pulumi.set(__self__, "uncompressed_resources_threshold", uncompressed_resources_threshold)

    @property
    @pulumi.getter(name="resourceBrowserCachingThreshold")
    def resource_browser_caching_threshold(self) -> pulumi.Input[int]:
        """
        Warn about resources with a lower browser cache rate above *X*%. Values between 1 and 100 are allowed.
        """
        return pulumi.get(self, "resource_browser_caching_threshold")

    @resource_browser_caching_threshold.setter
    def resource_browser_caching_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "resource_browser_caching_threshold", value)

    @property
    @pulumi.getter(name="resourcesThreshold")
    def resources_threshold(self) -> pulumi.Input[int]:
        """
        Warn about resources larger than *X* bytes. Values between 0 and 99999000 are allowed.
        """
        return pulumi.get(self, "resources_threshold")

    @resources_threshold.setter
    def resources_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "resources_threshold", value)

    @property
    @pulumi.getter(name="slowCndResourcesThreshold")
    def slow_cnd_resources_threshold(self) -> pulumi.Input[int]:
        """
        Warn about slow CDN resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
        """
        return pulumi.get(self, "slow_cnd_resources_threshold")

    @slow_cnd_resources_threshold.setter
    def slow_cnd_resources_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "slow_cnd_resources_threshold", value)

    @property
    @pulumi.getter(name="slowFirstPartyResourcesThreshold")
    def slow_first_party_resources_threshold(self) -> pulumi.Input[int]:
        """
        Warn about slow 1st party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
        """
        return pulumi.get(self, "slow_first_party_resources_threshold")

    @slow_first_party_resources_threshold.setter
    def slow_first_party_resources_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "slow_first_party_resources_threshold", value)

    @property
    @pulumi.getter(name="slowThirdPartyResourcesThreshold")
    def slow_third_party_resources_threshold(self) -> pulumi.Input[int]:
        """
        Warn about slow 3rd party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
        """
        return pulumi.get(self, "slow_third_party_resources_threshold")

    @slow_third_party_resources_threshold.setter
    def slow_third_party_resources_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "slow_third_party_resources_threshold", value)

    @property
    @pulumi.getter(name="speedIndexVisuallyCompleteRatioThreshold")
    def speed_index_visually_complete_ratio_threshold(self) -> pulumi.Input[int]:
        """
        Warn if Speed index exceeds *X* % of Visually complete. Values between 1 and 99 are allowed.
        """
        return pulumi.get(self, "speed_index_visually_complete_ratio_threshold")

    @speed_index_visually_complete_ratio_threshold.setter
    def speed_index_visually_complete_ratio_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "speed_index_visually_complete_ratio_threshold", value)

    @property
    @pulumi.getter(name="uncompressedResourcesThreshold")
    def uncompressed_resources_threshold(self) -> pulumi.Input[int]:
        """
        Warn about uncompressed resources larger than *X* bytes. Values between 0 and 99999 are allowed.
        """
        return pulumi.get(self, "uncompressed_resources_threshold")

    @uncompressed_resources_threshold.setter
    def uncompressed_resources_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "uncompressed_resources_threshold", value)


@pulumi.input_type
class WebApplicationXhrActionApdexSettingsArgs:
    def __init__(__self__, *,
                 frustrating_fallback_threshold: Optional[pulumi.Input[int]] = None,
                 frustrating_threshold: Optional[pulumi.Input[int]] = None,
                 threshold: Optional[pulumi.Input[int]] = None,
                 tolerated_fallback_threshold: Optional[pulumi.Input[int]] = None,
                 tolerated_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] frustrating_fallback_threshold: Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
        :param pulumi.Input[int] frustrating_threshold: Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
        :param pulumi.Input[int] threshold: no documentation available
        :param pulumi.Input[int] tolerated_fallback_threshold: Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
        :param pulumi.Input[int] tolerated_threshold: Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
        """
        if frustrating_fallback_threshold is not None:
            pulumi.set(__self__, "frustrating_fallback_threshold", frustrating_fallback_threshold)
        if frustrating_threshold is not None:
            pulumi.set(__self__, "frustrating_threshold", frustrating_threshold)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)
        if tolerated_fallback_threshold is not None:
            pulumi.set(__self__, "tolerated_fallback_threshold", tolerated_fallback_threshold)
        if tolerated_threshold is not None:
            pulumi.set(__self__, "tolerated_threshold", tolerated_threshold)

    @property
    @pulumi.getter(name="frustratingFallbackThreshold")
    def frustrating_fallback_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
        """
        return pulumi.get(self, "frustrating_fallback_threshold")

    @frustrating_fallback_threshold.setter
    def frustrating_fallback_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frustrating_fallback_threshold", value)

    @property
    @pulumi.getter(name="frustratingThreshold")
    def frustrating_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
        """
        return pulumi.get(self, "frustrating_threshold")

    @frustrating_threshold.setter
    def frustrating_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frustrating_threshold", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[int]]:
        """
        no documentation available
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter(name="toleratedFallbackThreshold")
    def tolerated_fallback_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
        """
        return pulumi.get(self, "tolerated_fallback_threshold")

    @tolerated_fallback_threshold.setter
    def tolerated_fallback_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerated_fallback_threshold", value)

    @property
    @pulumi.getter(name="toleratedThreshold")
    def tolerated_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
        """
        return pulumi.get(self, "tolerated_threshold")

    @tolerated_threshold.setter
    def tolerated_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerated_threshold", value)


@pulumi.input_type
class WebhookNotificationHeadersArgs:
    def __init__(__self__, *,
                 headers: pulumi.Input[Sequence[pulumi.Input['WebhookNotificationHeadersHeaderArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WebhookNotificationHeadersHeaderArgs']]] headers: An additional HTTP Header to include when sending requests
        """
        pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Input[Sequence[pulumi.Input['WebhookNotificationHeadersHeaderArgs']]]:
        """
        An additional HTTP Header to include when sending requests
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: pulumi.Input[Sequence[pulumi.Input['WebhookNotificationHeadersHeaderArgs']]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class WebhookNotificationHeadersHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 secret_value: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the notification configuration
        """
        pulumi.set(__self__, "name", name)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class XmattersNotificationHeadersArgs:
    def __init__(__self__, *,
                 headers: pulumi.Input[Sequence[pulumi.Input['XmattersNotificationHeadersHeaderArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['XmattersNotificationHeadersHeaderArgs']]] headers: An additional HTTP Header to include when sending requests
        """
        pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Input[Sequence[pulumi.Input['XmattersNotificationHeadersHeaderArgs']]]:
        """
        An additional HTTP Header to include when sending requests
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: pulumi.Input[Sequence[pulumi.Input['XmattersNotificationHeadersHeaderArgs']]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class XmattersNotificationHeadersHeaderArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 secret_value: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the notification configuration
        """
        pulumi.set(__self__, "name", name)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the notification configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetEntitiesEntitiesArgs:
    def __init__(__self__, *,
                 entities: Optional[Sequence['GetEntitiesEntitiesEntityArgs']] = None):
        """
        :param Sequence['GetEntitiesEntitiesEntityArgs'] entities: A list of monitored entities.
        """
        if entities is not None:
            pulumi.set(__self__, "entities", entities)

    @property
    @pulumi.getter
    def entities(self) -> Optional[Sequence['GetEntitiesEntitiesEntityArgs']]:
        """
        A list of monitored entities.
        """
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: Optional[Sequence['GetEntitiesEntitiesEntityArgs']]):
        pulumi.set(self, "entities", value)


@pulumi.input_type
class GetEntitiesEntitiesEntityArgs:
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 entity_id: Optional[str] = None,
                 tags: Optional[Sequence['GetEntitiesEntitiesEntityTagArgs']] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[str]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['GetEntitiesEntitiesEntityTagArgs']]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[Sequence['GetEntitiesEntitiesEntityTagArgs']]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GetEntitiesEntitiesEntityTagArgs:
    def __init__(__self__, *,
                 tags: Optional[Sequence['GetEntitiesEntitiesEntityTagTagArgs']] = None):
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['GetEntitiesEntitiesEntityTagTagArgs']]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[Sequence['GetEntitiesEntitiesEntityTagTagArgs']]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class GetEntitiesEntitiesEntityTagTagArgs:
    def __init__(__self__, *,
                 context: str,
                 key: str,
                 string_representation: Optional[str] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "key", key)
        if string_representation is not None:
            pulumi.set(__self__, "string_representation", string_representation)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def context(self) -> str:
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: str):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="stringRepresentation")
    def string_representation(self) -> Optional[str]:
        return pulumi.get(self, "string_representation")

    @string_representation.setter
    def string_representation(self, value: Optional[str]):
        pulumi.set(self, "string_representation", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetSyntheticLocationsLocationsArgs:
    def __init__(__self__, *,
                 cloud_platform: str,
                 ips: Sequence[str],
                 stage: str,
                 status: str,
                 entity_id: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str cloud_platform: The cloud provider where the location is hosted.
        """
        pulumi.set(__self__, "cloud_platform", cloud_platform)
        pulumi.set(__self__, "ips", ips)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "status", status)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cloudPlatform")
    def cloud_platform(self) -> str:
        """
        The cloud provider where the location is hosted.
        """
        return pulumi.get(self, "cloud_platform")

    @cloud_platform.setter
    def cloud_platform(self, value: str):
        pulumi.set(self, "cloud_platform", value)

    @property
    @pulumi.getter
    def ips(self) -> Sequence[str]:
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Sequence[str]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter
    def stage(self) -> str:
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: str):
        pulumi.set(self, "stage", value)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: str):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[str]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


