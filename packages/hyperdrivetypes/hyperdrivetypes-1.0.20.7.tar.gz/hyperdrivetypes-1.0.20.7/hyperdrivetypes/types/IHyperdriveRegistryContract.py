"""A web3.py Contract class for the IHyperdriveRegistry contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import dataclass_to_tuple, rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from . import IHyperdriveRegistryTypes as IHyperdriveRegistry

structs = {
    "IHyperdriveRegistry.FactoryInfo": IHyperdriveRegistry.FactoryInfo,
    "IHyperdriveRegistry.FactoryInfoWithMetadata": IHyperdriveRegistry.FactoryInfoWithMetadata,
    "IHyperdriveRegistry.InstanceInfo": IHyperdriveRegistry.InstanceInfo,
    "IHyperdriveRegistry.InstanceInfoWithMetadata": IHyperdriveRegistry.InstanceInfoWithMetadata,
}


class IHyperdriveRegistryGetFactoriesInRangeContractFunction(ContractFunction):
    """ContractFunction for the getFactoriesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> IHyperdriveRegistryGetFactoriesInRangeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveRegistryGetFactoryAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getFactoryAtIndex method."""

    def __call__(self, index: int) -> IHyperdriveRegistryGetFactoryAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveRegistryGetFactoryInfoContractFunction(ContractFunction):
    """ContractFunction for the getFactoryInfo method."""

    def __call__(self, factory: str) -> IHyperdriveRegistryGetFactoryInfoContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> IHyperdriveRegistry.FactoryInfo:
        """returns IHyperdriveRegistry.FactoryInfo."""
        # Define the expected return types from the smart contract call

        return_types = IHyperdriveRegistry.FactoryInfo

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            IHyperdriveRegistry.FactoryInfo,
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveRegistryGetFactoryInfoWithMetadataContractFunction(
    ContractFunction
):
    """ContractFunction for the getFactoryInfoWithMetadata method."""

    def __call__(self, factory: str) -> IHyperdriveRegistryGetFactoryInfoWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> IHyperdriveRegistry.FactoryInfoWithMetadata:
        """returns IHyperdriveRegistry.FactoryInfoWithMetadata."""
        # Define the expected return types from the smart contract call

        return_types = IHyperdriveRegistry.FactoryInfoWithMetadata

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            IHyperdriveRegistry.FactoryInfoWithMetadata,
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveRegistryGetFactoryInfosContractFunction(ContractFunction):
    """ContractFunction for the getFactoryInfos method."""

    def __call__(self, factories: list[str]) -> IHyperdriveRegistryGetFactoryInfosContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factories))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[IHyperdriveRegistry.FactoryInfo]:
        """returns list[IHyperdriveRegistry.FactoryInfo]."""
        # Define the expected return types from the smart contract call

        return_types = list[IHyperdriveRegistry.FactoryInfo]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[IHyperdriveRegistry.FactoryInfo],
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveRegistryGetFactoryInfosWithMetadataContractFunction(
    ContractFunction
):
    """ContractFunction for the getFactoryInfosWithMetadata method."""

    def __call__(self, factories: list[str]) -> IHyperdriveRegistryGetFactoryInfosWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factories))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[IHyperdriveRegistry.FactoryInfoWithMetadata]:
        """returns list[IHyperdriveRegistry.FactoryInfoWithMetadata]."""
        # Define the expected return types from the smart contract call

        return_types = list[IHyperdriveRegistry.FactoryInfoWithMetadata]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[IHyperdriveRegistry.FactoryInfoWithMetadata],
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveRegistryGetInstanceAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getInstanceAtIndex method."""

    def __call__(self, index: int) -> IHyperdriveRegistryGetInstanceAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveRegistryGetInstanceInfoContractFunction(ContractFunction):
    """ContractFunction for the getInstanceInfo method."""

    def __call__(self, instance: str) -> IHyperdriveRegistryGetInstanceInfoContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> IHyperdriveRegistry.InstanceInfo:
        """returns IHyperdriveRegistry.InstanceInfo."""
        # Define the expected return types from the smart contract call

        return_types = IHyperdriveRegistry.InstanceInfo

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            IHyperdriveRegistry.InstanceInfo,
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveRegistryGetInstanceInfoWithMetadataContractFunction(
    ContractFunction
):
    """ContractFunction for the getInstanceInfoWithMetadata method."""

    def __call__(self, instance: str) -> IHyperdriveRegistryGetInstanceInfoWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> IHyperdriveRegistry.InstanceInfoWithMetadata:
        """returns IHyperdriveRegistry.InstanceInfoWithMetadata."""
        # Define the expected return types from the smart contract call

        return_types = IHyperdriveRegistry.InstanceInfoWithMetadata

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            IHyperdriveRegistry.InstanceInfoWithMetadata,
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveRegistryGetInstanceInfosContractFunction(ContractFunction):
    """ContractFunction for the getInstanceInfos method."""

    def __call__(self, instances: list[str]) -> IHyperdriveRegistryGetInstanceInfosContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instances))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[IHyperdriveRegistry.InstanceInfo]:
        """returns list[IHyperdriveRegistry.InstanceInfo]."""
        # Define the expected return types from the smart contract call

        return_types = list[IHyperdriveRegistry.InstanceInfo]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[IHyperdriveRegistry.InstanceInfo],
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveRegistryGetInstanceInfosWithMetadataContractFunction(
    ContractFunction
):
    """ContractFunction for the getInstanceInfosWithMetadata method."""

    def __call__(self, instances: list[str]) -> IHyperdriveRegistryGetInstanceInfosWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instances))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[IHyperdriveRegistry.InstanceInfoWithMetadata]:
        """returns list[IHyperdriveRegistry.InstanceInfoWithMetadata]."""
        # Define the expected return types from the smart contract call

        return_types = list[IHyperdriveRegistry.InstanceInfoWithMetadata]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[IHyperdriveRegistry.InstanceInfoWithMetadata],
            rename_returned_types(structs, return_types, raw_values),
        )


class IHyperdriveRegistryGetInstancesInRangeContractFunction(ContractFunction):
    """ContractFunction for the getInstancesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> IHyperdriveRegistryGetInstancesInRangeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveRegistryGetNumberOfFactoriesContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfFactories method."""

    def __call__(self) -> IHyperdriveRegistryGetNumberOfFactoriesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveRegistryGetNumberOfInstancesContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfInstances method."""

    def __call__(self) -> IHyperdriveRegistryGetNumberOfInstancesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveRegistryKindContractFunction(ContractFunction):
    """ContractFunction for the kind method."""

    def __call__(self) -> IHyperdriveRegistryKindContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveRegistryNameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self) -> IHyperdriveRegistryNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveRegistryVersionContractFunction(ContractFunction):
    """ContractFunction for the version method."""

    def __call__(self) -> IHyperdriveRegistryVersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveRegistryContractFunctions(ContractFunctions):
    """ContractFunctions for the IHyperdriveRegistry contract."""

    getFactoriesInRange: IHyperdriveRegistryGetFactoriesInRangeContractFunction

    getFactoryAtIndex: IHyperdriveRegistryGetFactoryAtIndexContractFunction

    getFactoryInfo: IHyperdriveRegistryGetFactoryInfoContractFunction

    getFactoryInfoWithMetadata: (
        IHyperdriveRegistryGetFactoryInfoWithMetadataContractFunction
    )

    getFactoryInfos: IHyperdriveRegistryGetFactoryInfosContractFunction

    getFactoryInfosWithMetadata: (
        IHyperdriveRegistryGetFactoryInfosWithMetadataContractFunction
    )

    getInstanceAtIndex: IHyperdriveRegistryGetInstanceAtIndexContractFunction

    getInstanceInfo: IHyperdriveRegistryGetInstanceInfoContractFunction

    getInstanceInfoWithMetadata: (
        IHyperdriveRegistryGetInstanceInfoWithMetadataContractFunction
    )

    getInstanceInfos: IHyperdriveRegistryGetInstanceInfosContractFunction

    getInstanceInfosWithMetadata: (
        IHyperdriveRegistryGetInstanceInfosWithMetadataContractFunction
    )

    getInstancesInRange: IHyperdriveRegistryGetInstancesInRangeContractFunction

    getNumberOfFactories: (
        IHyperdriveRegistryGetNumberOfFactoriesContractFunction
    )

    getNumberOfInstances: (
        IHyperdriveRegistryGetNumberOfInstancesContractFunction
    )

    kind: IHyperdriveRegistryKindContractFunction

    name: IHyperdriveRegistryNameContractFunction

    version: IHyperdriveRegistryVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.getFactoriesInRange = (
            IHyperdriveRegistryGetFactoriesInRangeContractFunction.factory(
                "getFactoriesInRange",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getFactoriesInRange",
            )
        )
        self.getFactoryAtIndex = (
            IHyperdriveRegistryGetFactoryAtIndexContractFunction.factory(
                "getFactoryAtIndex",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getFactoryAtIndex",
            )
        )
        self.getFactoryInfo = (
            IHyperdriveRegistryGetFactoryInfoContractFunction.factory(
                "getFactoryInfo",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getFactoryInfo",
            )
        )
        self.getFactoryInfoWithMetadata = IHyperdriveRegistryGetFactoryInfoWithMetadataContractFunction.factory(
            "getFactoryInfoWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getFactoryInfoWithMetadata",
        )
        self.getFactoryInfos = (
            IHyperdriveRegistryGetFactoryInfosContractFunction.factory(
                "getFactoryInfos",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getFactoryInfos",
            )
        )
        self.getFactoryInfosWithMetadata = IHyperdriveRegistryGetFactoryInfosWithMetadataContractFunction.factory(
            "getFactoryInfosWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getFactoryInfosWithMetadata",
        )
        self.getInstanceAtIndex = (
            IHyperdriveRegistryGetInstanceAtIndexContractFunction.factory(
                "getInstanceAtIndex",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getInstanceAtIndex",
            )
        )
        self.getInstanceInfo = (
            IHyperdriveRegistryGetInstanceInfoContractFunction.factory(
                "getInstanceInfo",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getInstanceInfo",
            )
        )
        self.getInstanceInfoWithMetadata = IHyperdriveRegistryGetInstanceInfoWithMetadataContractFunction.factory(
            "getInstanceInfoWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getInstanceInfoWithMetadata",
        )
        self.getInstanceInfos = (
            IHyperdriveRegistryGetInstanceInfosContractFunction.factory(
                "getInstanceInfos",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getInstanceInfos",
            )
        )
        self.getInstanceInfosWithMetadata = IHyperdriveRegistryGetInstanceInfosWithMetadataContractFunction.factory(
            "getInstanceInfosWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getInstanceInfosWithMetadata",
        )
        self.getInstancesInRange = (
            IHyperdriveRegistryGetInstancesInRangeContractFunction.factory(
                "getInstancesInRange",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getInstancesInRange",
            )
        )
        self.getNumberOfFactories = (
            IHyperdriveRegistryGetNumberOfFactoriesContractFunction.factory(
                "getNumberOfFactories",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getNumberOfFactories",
            )
        )
        self.getNumberOfInstances = (
            IHyperdriveRegistryGetNumberOfInstancesContractFunction.factory(
                "getNumberOfInstances",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getNumberOfInstances",
            )
        )
        self.kind = IHyperdriveRegistryKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="kind",
        )
        self.name = IHyperdriveRegistryNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="name",
        )
        self.version = IHyperdriveRegistryVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="version",
        )


ihyperdriveregistry_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "getFactoriesInRange",
            "inputs": [
                {
                    "name": "_startIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_endIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "address[]", "internalType": "address[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryAtIndex",
            "inputs": [
                {"name": "_index", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfo",
            "inputs": [
                {
                    "name": "_factory",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfo",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        }
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfoWithMetadata",
            "inputs": [
                {
                    "name": "_factory",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfoWithMetadata",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "kind",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "internalType": "string",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfos",
            "inputs": [
                {
                    "name": "__factories",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfo[]",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        }
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfosWithMetadata",
            "inputs": [
                {
                    "name": "__factories",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfoWithMetadata[]",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "kind",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "internalType": "string",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceAtIndex",
            "inputs": [
                {"name": "_index", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfo",
            "inputs": [
                {
                    "name": "_instance",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfo",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "factory",
                            "type": "address",
                            "internalType": "address",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfoWithMetadata",
            "inputs": [
                {
                    "name": "_instance",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfoWithMetadata",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "factory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "kind",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "internalType": "string",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfos",
            "inputs": [
                {
                    "name": "__instances",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfo[]",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "factory",
                            "type": "address",
                            "internalType": "address",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfosWithMetadata",
            "inputs": [
                {
                    "name": "__instances",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfoWithMetadata[]",
                    "components": [
                        {
                            "name": "data",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "factory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "kind",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "version",
                            "type": "string",
                            "internalType": "string",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstancesInRange",
            "inputs": [
                {
                    "name": "_startIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_endIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "address[]", "internalType": "address[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfFactories",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfInstances",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
    ],
)


class IHyperdriveRegistryContract(Contract):
    """A web3.py Contract class for the IHyperdriveRegistry contract."""

    abi: ABI = ihyperdriveregistry_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IHyperdriveRegistryContractFunctions(ihyperdriveregistry_abi, self.w3, address)  # type: ignore

    functions: IHyperdriveRegistryContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IHyperdriveRegistryContractFunctions(
            ihyperdriveregistry_abi, w3, None
        )

        return contract
