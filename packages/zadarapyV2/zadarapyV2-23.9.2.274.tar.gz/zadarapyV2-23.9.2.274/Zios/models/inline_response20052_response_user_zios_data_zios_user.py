# coding: utf-8

"""
    Zadara VPSA Object Storage REST API

    # Overview  This document outlines the methods available for administrating your VPSA&#174; Object Storage. The API supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or through the X-Access-Key header. Alternately, you can use the username and password parameters for authentication, but we do not recommend this method for anything other than possibly retrieving an API key.  By default , all operations are allowed only to VPSA Object Storage admin. Some actions are allowed by an account admin and they will be marked on the action's header  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some time to complete. When using the API, this can cause some actions, such as adding drives to storage policy, to be undesirably asynchronous. You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Metering API  Metering information can be retrieved using the VPSA Object Storage API for the following components:  - Accounts - Users - Drives - Virtual Controllers - Load Balancer Groups - Storage Policies  Metering information returned by the API is subject to the following constraints:  - 10 seconds interval - 1 hour range - 1 minute interval - 1 day range - 1 hour interval - 30 days range  Values outside the accepted range will be returned as 0.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Zios.configuration import Configuration


class InlineResponse20052ResponseUserZiosDataZiosUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_name': 'str',
        'id': 'str',
        'token': 'str',
        'token_expire_at': 'str',
        's3_access_key': 'str',
        's3_secret_key': 'str',
        'public_url': 'str',
        'roles': 'list[InlineResponse20049ResponseZiosDataZiosUserRoles]'
    }

    attribute_map = {
        'account_id': 'account_id',
        'account_name': 'account_name',
        'id': 'id',
        'token': 'token',
        'token_expire_at': 'token_expire_at',
        's3_access_key': 's3_access_key',
        's3_secret_key': 's3_secret_key',
        'public_url': 'public_url',
        'roles': 'roles'
    }

    def __init__(self, account_id=None, account_name=None, id=None, token=None, token_expire_at=None, s3_access_key=None, s3_secret_key=None, public_url=None, roles=None, _configuration=None):  # noqa: E501
        """InlineResponse20052ResponseUserZiosDataZiosUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._account_name = None
        self._id = None
        self._token = None
        self._token_expire_at = None
        self._s3_access_key = None
        self._s3_secret_key = None
        self._public_url = None
        self._roles = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if account_name is not None:
            self.account_name = account_name
        if id is not None:
            self.id = id
        if token is not None:
            self.token = token
        if token_expire_at is not None:
            self.token_expire_at = token_expire_at
        if s3_access_key is not None:
            self.s3_access_key = s3_access_key
        if s3_secret_key is not None:
            self.s3_secret_key = s3_secret_key
        if public_url is not None:
            self.public_url = public_url
        if roles is not None:
            self.roles = roles

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501


        :return: The account_id of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse20052ResponseUserZiosDataZiosUser.


        :param account_id: The account_id of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501


        :return: The account_name of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this InlineResponse20052ResponseUserZiosDataZiosUser.


        :param account_name: The account_name of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def id(self):
        """Gets the id of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501


        :return: The id of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20052ResponseUserZiosDataZiosUser.


        :param id: The id of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def token(self):
        """Gets the token of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501


        :return: The token of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this InlineResponse20052ResponseUserZiosDataZiosUser.


        :param token: The token of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def token_expire_at(self):
        """Gets the token_expire_at of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501


        :return: The token_expire_at of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :rtype: str
        """
        return self._token_expire_at

    @token_expire_at.setter
    def token_expire_at(self, token_expire_at):
        """Sets the token_expire_at of this InlineResponse20052ResponseUserZiosDataZiosUser.


        :param token_expire_at: The token_expire_at of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :type: str
        """

        self._token_expire_at = token_expire_at

    @property
    def s3_access_key(self):
        """Gets the s3_access_key of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501


        :return: The s3_access_key of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :rtype: str
        """
        return self._s3_access_key

    @s3_access_key.setter
    def s3_access_key(self, s3_access_key):
        """Sets the s3_access_key of this InlineResponse20052ResponseUserZiosDataZiosUser.


        :param s3_access_key: The s3_access_key of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :type: str
        """

        self._s3_access_key = s3_access_key

    @property
    def s3_secret_key(self):
        """Gets the s3_secret_key of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501


        :return: The s3_secret_key of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :rtype: str
        """
        return self._s3_secret_key

    @s3_secret_key.setter
    def s3_secret_key(self, s3_secret_key):
        """Sets the s3_secret_key of this InlineResponse20052ResponseUserZiosDataZiosUser.


        :param s3_secret_key: The s3_secret_key of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :type: str
        """

        self._s3_secret_key = s3_secret_key

    @property
    def public_url(self):
        """Gets the public_url of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501


        :return: The public_url of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :rtype: str
        """
        return self._public_url

    @public_url.setter
    def public_url(self, public_url):
        """Sets the public_url of this InlineResponse20052ResponseUserZiosDataZiosUser.


        :param public_url: The public_url of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :type: str
        """

        self._public_url = public_url

    @property
    def roles(self):
        """Gets the roles of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501


        :return: The roles of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :rtype: list[InlineResponse20049ResponseZiosDataZiosUserRoles]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this InlineResponse20052ResponseUserZiosDataZiosUser.


        :param roles: The roles of this InlineResponse20052ResponseUserZiosDataZiosUser.  # noqa: E501
        :type: list[InlineResponse20049ResponseZiosDataZiosUserRoles]
        """

        self._roles = roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20052ResponseUserZiosDataZiosUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20052ResponseUserZiosDataZiosUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20052ResponseUserZiosDataZiosUser):
            return True

        return self.to_dict() != other.to_dict()
