# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class CreateNasUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'nfs_uid': 'int',
        'password': 'str',
        'groupname': 'str'
    }

    attribute_map = {
        'username': 'username',
        'nfs_uid': 'nfs_uid',
        'password': 'password',
        'groupname': 'groupname'
    }

    def __init__(self, username=None, nfs_uid=None, password=None, groupname=None, _configuration=None):  # noqa: E501
        """CreateNasUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._username = None
        self._nfs_uid = None
        self._password = None
        self._groupname = None
        self.discriminator = None

        self.username = username
        if nfs_uid is not None:
            self.nfs_uid = nfs_uid
        if password is not None:
            self.password = password
        if groupname is not None:
            self.groupname = groupname

    @property
    def username(self):
        """Gets the username of this CreateNasUser.  # noqa: E501


        :return: The username of this CreateNasUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateNasUser.


        :param username: The username of this CreateNasUser.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def nfs_uid(self):
        """Gets the nfs_uid of this CreateNasUser.  # noqa: E501

        NFS user id  # noqa: E501

        :return: The nfs_uid of this CreateNasUser.  # noqa: E501
        :rtype: int
        """
        return self._nfs_uid

    @nfs_uid.setter
    def nfs_uid(self, nfs_uid):
        """Sets the nfs_uid of this CreateNasUser.

        NFS user id  # noqa: E501

        :param nfs_uid: The nfs_uid of this CreateNasUser.  # noqa: E501
        :type: int
        """

        self._nfs_uid = nfs_uid

    @property
    def password(self):
        """Gets the password of this CreateNasUser.  # noqa: E501

        SMB password.  # noqa: E501

        :return: The password of this CreateNasUser.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateNasUser.

        SMB password.  # noqa: E501

        :param password: The password of this CreateNasUser.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def groupname(self):
        """Gets the groupname of this CreateNasUser.  # noqa: E501


        :return: The groupname of this CreateNasUser.  # noqa: E501
        :rtype: str
        """
        return self._groupname

    @groupname.setter
    def groupname(self, groupname):
        """Sets the groupname of this CreateNasUser.


        :param groupname: The groupname of this CreateNasUser.  # noqa: E501
        :type: str
        """

        self._groupname = groupname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateNasUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateNasUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateNasUser):
            return True

        return self.to_dict() != other.to_dict()
