# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class AddDrives(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drive_type': 'str',
        'quantity': 'int',
        'skip_validation': 'bool'
    }

    attribute_map = {
        'drive_type': 'drive_type',
        'quantity': 'quantity',
        'skip_validation': 'skip_validation'
    }

    def __init__(self, drive_type=None, quantity=None, skip_validation=None, _configuration=None):  # noqa: E501
        """AddDrives - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._drive_type = None
        self._quantity = None
        self._skip_validation = None
        self.discriminator = None

        self.drive_type = drive_type
        self.quantity = quantity
        self.skip_validation = skip_validation

    @property
    def drive_type(self):
        """Gets the drive_type of this AddDrives.  # noqa: E501

        Drive type internal name  # noqa: E501

        :return: The drive_type of this AddDrives.  # noqa: E501
        :rtype: str
        """
        return self._drive_type

    @drive_type.setter
    def drive_type(self, drive_type):
        """Sets the drive_type of this AddDrives.

        Drive type internal name  # noqa: E501

        :param drive_type: The drive_type of this AddDrives.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and drive_type is None:
            raise ValueError("Invalid value for `drive_type`, must not be `None`")  # noqa: E501

        self._drive_type = drive_type

    @property
    def quantity(self):
        """Gets the quantity of this AddDrives.  # noqa: E501

        Number of drives to add  # noqa: E501

        :return: The quantity of this AddDrives.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AddDrives.

        Number of drives to add  # noqa: E501

        :param quantity: The quantity of this AddDrives.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def skip_validation(self):
        """Gets the skip_validation of this AddDrives.  # noqa: E501

        Skips maximum drive validation. Use for admin only. Please notice that exceeding the number of drives allowed will waive the support for the VPSA  # noqa: E501

        :return: The skip_validation of this AddDrives.  # noqa: E501
        :rtype: bool
        """
        return self._skip_validation

    @skip_validation.setter
    def skip_validation(self, skip_validation):
        """Sets the skip_validation of this AddDrives.

        Skips maximum drive validation. Use for admin only. Please notice that exceeding the number of drives allowed will waive the support for the VPSA  # noqa: E501

        :param skip_validation: The skip_validation of this AddDrives.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and skip_validation is None:
            raise ValueError("Invalid value for `skip_validation`, must not be `None`")  # noqa: E501

        self._skip_validation = skip_validation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddDrives, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddDrives):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddDrives):
            return True

        return self.to_dict() != other.to_dict()
