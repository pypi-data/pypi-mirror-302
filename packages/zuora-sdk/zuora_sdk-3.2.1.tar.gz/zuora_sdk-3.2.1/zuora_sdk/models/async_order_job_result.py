# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2024-05-20
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.async_order_result_subscriptions import AsyncOrderResultSubscriptions
from zuora_sdk.models.create_order_response_order_line_items import CreateOrderResponseOrderLineItems
from zuora_sdk.models.create_order_response_ramps import CreateOrderResponseRamps
from zuora_sdk.models.failed_reason import FailedReason
from typing import Optional, Set
from typing_extensions import Self

class AsyncOrderJobResult(BaseModel):
    """
    **Note:** The schema of the `result` nested field is the same as the response body schema of either the [\"Create an order\"](https://www.zuora.com/developer/api-references/api/operation/Post_Order) or the [\"Preview an order\"](https://www.zuora.com/developer/api-references/api/operation/Post_PreviewOrder) operation, depending on the purpose of the job.  The following schema for the nested `result` field is defined as the response body schema of \"Create an order\". See [Preview an Order](https://www.zuora.com/developer/api-references/api/operation/Post_PreviewOrder) for the response body schema of \"Preview an order\".  
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    process_id: Optional[StrictStr] = Field(default=None, description="The Id of the process that handle the operation. ", alias="processId")
    request_id: Optional[StrictStr] = Field(default=None, description="Unique request identifier. If you need to contact us about a specific request, providing the request identifier will ensure the fastest possible resolution. ", alias="requestId")
    reasons: Optional[List[FailedReason]] = None
    success: Optional[StrictBool] = Field(default=None, description="Indicates whether the call succeeded. ")
    account_id: Optional[StrictStr] = Field(default=None, description="The account ID for the order. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.", alias="accountId")
    account_number: Optional[StrictStr] = Field(default=None, description="The account number for the order.", alias="accountNumber")
    credit_memo_ids: Optional[List[StrictStr]] = Field(default=None, description="An array of the credit memo IDs that are generated in the \"Create an order asynchronously\" operation. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.", alias="creditMemoIds")
    credit_memo_numbers: Optional[List[StrictStr]] = Field(default=None, description="An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.", alias="creditMemoNumbers")
    invoice_id: Optional[StrictStr] = Field(default=None, description="An array of the invoice IDs that are generated in the \"Create an order asynchronously\" operation. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.", alias="invoiceId")
    invoice_numbers: Optional[List[StrictStr]] = Field(default=None, description="An array of the invoice numbers generated in this order request. Normally it includes one invoice number only, but can include multiple items when a subscription was tagged as invoice separately.", alias="invoiceNumbers")
    order_id: Optional[StrictStr] = Field(default=None, description="The ID of the order created. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.", alias="orderId")
    order_line_items: Optional[List[CreateOrderResponseOrderLineItems]] = Field(default=None, alias="orderLineItems")
    order_number: Optional[StrictStr] = Field(default=None, description="The order number of the order created.", alias="orderNumber")
    paid_amount: Optional[StrictStr] = Field(default=None, description="The total amount collected in this order request.", alias="paidAmount")
    payment_id: Optional[StrictStr] = Field(default=None, description="The ID of the payment that is collected in the \"Create an order asynchronously\" operation. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.", alias="paymentId")
    payment_number: Optional[StrictStr] = Field(default=None, description="The payment number that collected in this order request.", alias="paymentNumber")
    ramps: Optional[List[CreateOrderResponseRamps]] = Field(default=None, description="**Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.  The ramp definitions created by this order request. ")
    status: Optional[StrictStr] = Field(default=None, description="Status of the order. `Pending` is only applicable for an order that contains a `CreateSubscription` order action.")
    subscription_ids: Optional[List[StrictStr]] = Field(default=None, description="Container for the IDs of the subscriptions in the order. This field is returned only when the `returnIds` query parameter in the \"Create an order asynchronously\" operation is set to `true`.", alias="subscriptionIds")
    subscription_numbers: Optional[List[StrictStr]] = Field(default=None, description="**Note:** This field is in Zuora REST API version control. Supported minor versions are 222.4 or earlier. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.  Container for the subscription numbers of the subscriptions in an order. ", alias="subscriptionNumbers")
    subscriptions: Optional[List[AsyncOrderResultSubscriptions]] = Field(default=None, description="**Note:** This field is in Zuora REST API version control. Supported minor versions are 223.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.  Container for the subscription numbers and statuses in an order. ")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["processId", "requestId", "reasons", "success", "accountId", "accountNumber", "creditMemoIds", "creditMemoNumbers", "invoiceId", "invoiceNumbers", "orderId", "orderLineItems", "orderNumber", "paidAmount", "paymentId", "paymentNumber", "ramps", "status", "subscriptionIds", "subscriptionNumbers", "subscriptions"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Draft', 'Pending', 'Completed']):
            raise ValueError("must be one of enum values ('Draft', 'Pending', 'Completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AsyncOrderJobResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item_reasons in self.reasons:
                if _item_reasons:
                    _items.append(_item_reasons.to_dict())
            _dict['reasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_line_items (list)
        _items = []
        if self.order_line_items:
            for _item_order_line_items in self.order_line_items:
                if _item_order_line_items:
                    _items.append(_item_order_line_items.to_dict())
            _dict['orderLineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ramps (list)
        _items = []
        if self.ramps:
            for _item_ramps in self.ramps:
                if _item_ramps:
                    _items.append(_item_ramps.to_dict())
            _dict['ramps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item_subscriptions in self.subscriptions:
                if _item_subscriptions:
                    _items.append(_item_subscriptions.to_dict())
            _dict['subscriptions'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AsyncOrderJobResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "processId": obj.get("processId"),
            "requestId": obj.get("requestId"),
            "reasons": [FailedReason.from_dict(_item) for _item in obj["reasons"]] if obj.get("reasons") is not None else None,
            "success": obj.get("success"),
            "accountId": obj.get("accountId"),
            "accountNumber": obj.get("accountNumber"),
            "creditMemoIds": obj.get("creditMemoIds"),
            "creditMemoNumbers": obj.get("creditMemoNumbers"),
            "invoiceId": obj.get("invoiceId"),
            "invoiceNumbers": obj.get("invoiceNumbers"),
            "orderId": obj.get("orderId"),
            "orderLineItems": [CreateOrderResponseOrderLineItems.from_dict(_item) for _item in obj["orderLineItems"]] if obj.get("orderLineItems") is not None else None,
            "orderNumber": obj.get("orderNumber"),
            "paidAmount": obj.get("paidAmount"),
            "paymentId": obj.get("paymentId"),
            "paymentNumber": obj.get("paymentNumber"),
            "ramps": [CreateOrderResponseRamps.from_dict(_item) for _item in obj["ramps"]] if obj.get("ramps") is not None else None,
            "status": obj.get("status"),
            "subscriptionIds": obj.get("subscriptionIds"),
            "subscriptionNumbers": obj.get("subscriptionNumbers"),
            "subscriptions": [AsyncOrderResultSubscriptions.from_dict(_item) for _item in obj["subscriptions"]] if obj.get("subscriptions") is not None else None
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
