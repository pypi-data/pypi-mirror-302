from typing import Final

from scipy._typing import Untyped
from scipy.sparse.linalg._interface import LinearOperator

__all__ = ["expm", "inv", "matrix_power"]

UPPER_TRIANGULAR: Final = "upper_triangular"

def inv(A) -> Untyped: ...

class MatrixPowerOperator(LinearOperator):
    def __init__(self, A, p, structure: Untyped | None = None): ...

class ProductOperator(LinearOperator):
    def __init__(self, *args, **kwargs) -> None: ...

class _ExpmPadeHelper:
    A: Untyped
    ident: Untyped
    structure: Untyped
    use_exact_onenorm: Untyped
    def __init__(self, A, structure: Untyped | None = None, use_exact_onenorm: bool = False): ...
    @property
    def A2(self) -> Untyped: ...
    @property
    def A4(self) -> Untyped: ...
    @property
    def A6(self) -> Untyped: ...
    @property
    def A8(self) -> Untyped: ...
    @property
    def A10(self) -> Untyped: ...
    @property
    def d4_tight(self) -> Untyped: ...
    @property
    def d6_tight(self) -> Untyped: ...
    @property
    def d8_tight(self) -> Untyped: ...
    @property
    def d10_tight(self) -> Untyped: ...
    @property
    def d4_loose(self) -> Untyped: ...
    @property
    def d6_loose(self) -> Untyped: ...
    @property
    def d8_loose(self) -> Untyped: ...
    @property
    def d10_loose(self) -> Untyped: ...
    def pade3(self) -> Untyped: ...
    def pade5(self) -> Untyped: ...
    def pade7(self) -> Untyped: ...
    def pade9(self) -> Untyped: ...
    def pade13_scaled(self, s) -> Untyped: ...

def expm(A) -> Untyped: ...
def matrix_power(A, power) -> Untyped: ...
