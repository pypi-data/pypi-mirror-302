"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import senren.feature_store.v1.registry_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class RegistryServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Plan: grpc.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.PlanRequest,
        senren.feature_store.v1.registry_pb2.PlanResponse,
    ]

    Apply: grpc.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.ApplyRequest,
        senren.feature_store.v1.registry_pb2.ApplyResponse,
    ]

    Destroy: grpc.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.DestroyRequest,
        senren.feature_store.v1.registry_pb2.DestroyResponse,
    ]

    GetState: grpc.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.GetStateRequest,
        senren.feature_store.v1.registry_pb2.GetStateResponse,
    ]

    RegisterMaterializationRun: grpc.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.RegisterMaterializationRunRequest,
        senren.feature_store.v1.registry_pb2.RegisterMaterializationRunResponse,
    ]

    RegisterMaterializationEvent: grpc.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.RegisterMaterializationEventRequest,
        senren.feature_store.v1.registry_pb2.RegisterMaterializationEventResponse,
    ]

class RegistryServiceAsyncStub:
    Plan: grpc.aio.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.PlanRequest,
        senren.feature_store.v1.registry_pb2.PlanResponse,
    ]

    Apply: grpc.aio.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.ApplyRequest,
        senren.feature_store.v1.registry_pb2.ApplyResponse,
    ]

    Destroy: grpc.aio.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.DestroyRequest,
        senren.feature_store.v1.registry_pb2.DestroyResponse,
    ]

    GetState: grpc.aio.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.GetStateRequest,
        senren.feature_store.v1.registry_pb2.GetStateResponse,
    ]

    RegisterMaterializationRun: grpc.aio.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.RegisterMaterializationRunRequest,
        senren.feature_store.v1.registry_pb2.RegisterMaterializationRunResponse,
    ]

    RegisterMaterializationEvent: grpc.aio.UnaryUnaryMultiCallable[
        senren.feature_store.v1.registry_pb2.RegisterMaterializationEventRequest,
        senren.feature_store.v1.registry_pb2.RegisterMaterializationEventResponse,
    ]

class RegistryServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Plan(
        self,
        request: senren.feature_store.v1.registry_pb2.PlanRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        senren.feature_store.v1.registry_pb2.PlanResponse,
        collections.abc.Awaitable[senren.feature_store.v1.registry_pb2.PlanResponse],
    ]: ...
    @abc.abstractmethod
    def Apply(
        self,
        request: senren.feature_store.v1.registry_pb2.ApplyRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        senren.feature_store.v1.registry_pb2.ApplyResponse,
        collections.abc.Awaitable[senren.feature_store.v1.registry_pb2.ApplyResponse],
    ]: ...
    @abc.abstractmethod
    def Destroy(
        self,
        request: senren.feature_store.v1.registry_pb2.DestroyRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        senren.feature_store.v1.registry_pb2.DestroyResponse,
        collections.abc.Awaitable[senren.feature_store.v1.registry_pb2.DestroyResponse],
    ]: ...
    @abc.abstractmethod
    def GetState(
        self,
        request: senren.feature_store.v1.registry_pb2.GetStateRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        senren.feature_store.v1.registry_pb2.GetStateResponse,
        collections.abc.Awaitable[senren.feature_store.v1.registry_pb2.GetStateResponse],
    ]: ...
    @abc.abstractmethod
    def RegisterMaterializationRun(
        self,
        request: senren.feature_store.v1.registry_pb2.RegisterMaterializationRunRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        senren.feature_store.v1.registry_pb2.RegisterMaterializationRunResponse,
        collections.abc.Awaitable[senren.feature_store.v1.registry_pb2.RegisterMaterializationRunResponse],
    ]: ...
    @abc.abstractmethod
    def RegisterMaterializationEvent(
        self,
        request: senren.feature_store.v1.registry_pb2.RegisterMaterializationEventRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        senren.feature_store.v1.registry_pb2.RegisterMaterializationEventResponse,
        collections.abc.Awaitable[senren.feature_store.v1.registry_pb2.RegisterMaterializationEventResponse],
    ]: ...

def add_RegistryServiceServicer_to_server(
    servicer: RegistryServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
