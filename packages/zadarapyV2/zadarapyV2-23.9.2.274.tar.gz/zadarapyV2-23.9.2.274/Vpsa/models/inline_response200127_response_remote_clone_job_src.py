# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200127ResponseRemoteCloneJobSrc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'str',
        'vpsa_display_name': 'str',
        'vpsa_uuid': 'str',
        'snap_display_name': 'str',
        'snap_name': 'str',
        'volume_name': 'str',
        'volume_display_name': 'str'
    }

    attribute_map = {
        'provider': 'provider',
        'vpsa_display_name': 'vpsa_display_name',
        'vpsa_uuid': 'vpsa_uuid',
        'snap_display_name': 'snap_display_name',
        'snap_name': 'snap_name',
        'volume_name': 'volume_name',
        'volume_display_name': 'volume_display_name'
    }

    def __init__(self, provider=None, vpsa_display_name=None, vpsa_uuid=None, snap_display_name=None, snap_name=None, volume_name=None, volume_display_name=None, _configuration=None):  # noqa: E501
        """InlineResponse200127ResponseRemoteCloneJobSrc - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._provider = None
        self._vpsa_display_name = None
        self._vpsa_uuid = None
        self._snap_display_name = None
        self._snap_name = None
        self._volume_name = None
        self._volume_display_name = None
        self.discriminator = None

        if provider is not None:
            self.provider = provider
        if vpsa_display_name is not None:
            self.vpsa_display_name = vpsa_display_name
        if vpsa_uuid is not None:
            self.vpsa_uuid = vpsa_uuid
        if snap_display_name is not None:
            self.snap_display_name = snap_display_name
        if snap_name is not None:
            self.snap_name = snap_name
        if volume_name is not None:
            self.volume_name = volume_name
        if volume_display_name is not None:
            self.volume_display_name = volume_display_name

    @property
    def provider(self):
        """Gets the provider of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501


        :return: The provider of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this InlineResponse200127ResponseRemoteCloneJobSrc.


        :param provider: The provider of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def vpsa_display_name(self):
        """Gets the vpsa_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501


        :return: The vpsa_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_display_name

    @vpsa_display_name.setter
    def vpsa_display_name(self, vpsa_display_name):
        """Sets the vpsa_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.


        :param vpsa_display_name: The vpsa_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :type: str
        """

        self._vpsa_display_name = vpsa_display_name

    @property
    def vpsa_uuid(self):
        """Gets the vpsa_uuid of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501


        :return: The vpsa_uuid of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_uuid

    @vpsa_uuid.setter
    def vpsa_uuid(self, vpsa_uuid):
        """Sets the vpsa_uuid of this InlineResponse200127ResponseRemoteCloneJobSrc.


        :param vpsa_uuid: The vpsa_uuid of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :type: str
        """

        self._vpsa_uuid = vpsa_uuid

    @property
    def snap_display_name(self):
        """Gets the snap_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501


        :return: The snap_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :rtype: str
        """
        return self._snap_display_name

    @snap_display_name.setter
    def snap_display_name(self, snap_display_name):
        """Sets the snap_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.


        :param snap_display_name: The snap_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :type: str
        """

        self._snap_display_name = snap_display_name

    @property
    def snap_name(self):
        """Gets the snap_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501


        :return: The snap_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :rtype: str
        """
        return self._snap_name

    @snap_name.setter
    def snap_name(self, snap_name):
        """Sets the snap_name of this InlineResponse200127ResponseRemoteCloneJobSrc.


        :param snap_name: The snap_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :type: str
        """

        self._snap_name = snap_name

    @property
    def volume_name(self):
        """Gets the volume_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501


        :return: The volume_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """Sets the volume_name of this InlineResponse200127ResponseRemoteCloneJobSrc.


        :param volume_name: The volume_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :type: str
        """

        self._volume_name = volume_name

    @property
    def volume_display_name(self):
        """Gets the volume_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501


        :return: The volume_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :rtype: str
        """
        return self._volume_display_name

    @volume_display_name.setter
    def volume_display_name(self, volume_display_name):
        """Sets the volume_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.


        :param volume_display_name: The volume_display_name of this InlineResponse200127ResponseRemoteCloneJobSrc.  # noqa: E501
        :type: str
        """

        self._volume_display_name = volume_display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200127ResponseRemoteCloneJobSrc, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200127ResponseRemoteCloneJobSrc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200127ResponseRemoteCloneJobSrc):
            return True

        return self.to_dict() != other.to_dict()
