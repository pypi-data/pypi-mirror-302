# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from CommandCenter.api_client import ApiClient


class CloudSettingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_cloud_control_ip_whitelisting_entries(self, cloud_name, add_cloud_control_ip_whitelisting_entries, **kwargs):  # noqa: E501
        """add_cloud_control_ip_whitelisting_entries  # noqa: E501

        Add Cloud Control IP Whitelisting entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cloud_control_ip_whitelisting_entries(cloud_name, add_cloud_control_ip_whitelisting_entries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param AddCloudControlIpWhitelistingEntries add_cloud_control_ip_whitelisting_entries: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_cloud_control_ip_whitelisting_entries_with_http_info(cloud_name, add_cloud_control_ip_whitelisting_entries, **kwargs)  # noqa: E501
        else:
            (data) = self.add_cloud_control_ip_whitelisting_entries_with_http_info(cloud_name, add_cloud_control_ip_whitelisting_entries, **kwargs)  # noqa: E501
            return data

    def add_cloud_control_ip_whitelisting_entries_with_http_info(self, cloud_name, add_cloud_control_ip_whitelisting_entries, **kwargs):  # noqa: E501
        """add_cloud_control_ip_whitelisting_entries  # noqa: E501

        Add Cloud Control IP Whitelisting entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cloud_control_ip_whitelisting_entries_with_http_info(cloud_name, add_cloud_control_ip_whitelisting_entries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param AddCloudControlIpWhitelistingEntries add_cloud_control_ip_whitelisting_entries: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'add_cloud_control_ip_whitelisting_entries']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_cloud_control_ip_whitelisting_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `add_cloud_control_ip_whitelisting_entries`")  # noqa: E501
        # verify the required parameter 'add_cloud_control_ip_whitelisting_entries' is set
        if self.api_client.client_side_validation and ('add_cloud_control_ip_whitelisting_entries' not in params or
                                                       params['add_cloud_control_ip_whitelisting_entries'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `add_cloud_control_ip_whitelisting_entries` when calling `add_cloud_control_ip_whitelisting_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_cloud_control_ip_whitelisting_entries' in params:
            body_params = params['add_cloud_control_ip_whitelisting_entries']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/add_cloud_control_ip_whitelisting_entries.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_endpoint(self, cloud_name, create_endpoint, **kwargs):  # noqa: E501
        """create_endpoint  # noqa: E501

        Creates a new cloud upload endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_endpoint(cloud_name, create_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param CreateEndpoint create_endpoint: (required)
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_endpoint_with_http_info(cloud_name, create_endpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.create_endpoint_with_http_info(cloud_name, create_endpoint, **kwargs)  # noqa: E501
            return data

    def create_endpoint_with_http_info(self, cloud_name, create_endpoint, **kwargs):  # noqa: E501
        """create_endpoint  # noqa: E501

        Creates a new cloud upload endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_endpoint_with_http_info(cloud_name, create_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param CreateEndpoint create_endpoint: (required)
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'create_endpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `create_endpoint`")  # noqa: E501
        # verify the required parameter 'create_endpoint' is set
        if self.api_client.client_side_validation and ('create_endpoint' not in params or
                                                       params['create_endpoint'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_endpoint` when calling `create_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_endpoint' in params:
            body_params = params['create_endpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/endpoints.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20065',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_endpoints_config(self, cloud_name, create_endpoints_config, **kwargs):  # noqa: E501
        """create_endpoints_config  # noqa: E501

        Creates cloud endpoints configurations for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_endpoints_config(cloud_name, create_endpoints_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param CreateEndpointsConfig create_endpoints_config: (required)
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_endpoints_config_with_http_info(cloud_name, create_endpoints_config, **kwargs)  # noqa: E501
        else:
            (data) = self.create_endpoints_config_with_http_info(cloud_name, create_endpoints_config, **kwargs)  # noqa: E501
            return data

    def create_endpoints_config_with_http_info(self, cloud_name, create_endpoints_config, **kwargs):  # noqa: E501
        """create_endpoints_config  # noqa: E501

        Creates cloud endpoints configurations for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_endpoints_config_with_http_info(cloud_name, create_endpoints_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param CreateEndpointsConfig create_endpoints_config: (required)
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'create_endpoints_config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_endpoints_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `create_endpoints_config`")  # noqa: E501
        # verify the required parameter 'create_endpoints_config' is set
        if self.api_client.client_side_validation and ('create_endpoints_config' not in params or
                                                       params['create_endpoints_config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_endpoints_config` when calling `create_endpoints_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_endpoints_config' in params:
            body_params = params['create_endpoints_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/endpoints_config.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20069',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_generic_zconfig_key(self, cloud_name, create_generic_zconfig_key, **kwargs):  # noqa: E501
        """create_generic_zconfig_key  # noqa: E501

        Create Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_generic_zconfig_key(cloud_name, create_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param CreateGenericZconfigKey create_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_generic_zconfig_key_with_http_info(cloud_name, create_generic_zconfig_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_generic_zconfig_key_with_http_info(cloud_name, create_generic_zconfig_key, **kwargs)  # noqa: E501
            return data

    def create_generic_zconfig_key_with_http_info(self, cloud_name, create_generic_zconfig_key, **kwargs):  # noqa: E501
        """create_generic_zconfig_key  # noqa: E501

        Create Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_generic_zconfig_key_with_http_info(cloud_name, create_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param CreateGenericZconfigKey create_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'create_generic_zconfig_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_generic_zconfig_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `create_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'create_generic_zconfig_key' is set
        if self.api_client.client_side_validation and ('create_generic_zconfig_key' not in params or
                                                       params['create_generic_zconfig_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_generic_zconfig_key` when calling `create_generic_zconfig_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_generic_zconfig_key' in params:
            body_params = params['create_generic_zconfig_key']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/generic_zconfig_keys.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_vpsa_generic_zconfig_key(self, cloud_name, id, create_vpsa_generic_zconfig_key, **kwargs):  # noqa: E501
        """create_vpsa_generic_zconfig_key  # noqa: E501

        Create VPSA Zadara Configuration Key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vpsa_generic_zconfig_key(cloud_name, id, create_vpsa_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA 'id' or 'internal-name' value as returned by get_all_vpsas. (required)
        :param CreateVpsaGenericZconfigKey create_vpsa_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_vpsa_generic_zconfig_key_with_http_info(cloud_name, id, create_vpsa_generic_zconfig_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_vpsa_generic_zconfig_key_with_http_info(cloud_name, id, create_vpsa_generic_zconfig_key, **kwargs)  # noqa: E501
            return data

    def create_vpsa_generic_zconfig_key_with_http_info(self, cloud_name, id, create_vpsa_generic_zconfig_key, **kwargs):  # noqa: E501
        """create_vpsa_generic_zconfig_key  # noqa: E501

        Create VPSA Zadara Configuration Key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_vpsa_generic_zconfig_key_with_http_info(cloud_name, id, create_vpsa_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA 'id' or 'internal-name' value as returned by get_all_vpsas. (required)
        :param CreateVpsaGenericZconfigKey create_vpsa_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'create_vpsa_generic_zconfig_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vpsa_generic_zconfig_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `create_vpsa_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_vpsa_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'create_vpsa_generic_zconfig_key' is set
        if self.api_client.client_side_validation and ('create_vpsa_generic_zconfig_key' not in params or
                                                       params['create_vpsa_generic_zconfig_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_vpsa_generic_zconfig_key` when calling `create_vpsa_generic_zconfig_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_vpsa_generic_zconfig_key' in params:
            body_params = params['create_vpsa_generic_zconfig_key']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/vpsas/{id}/generic_zconfig_keys.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_zios_generic_zconfig_key(self, cloud_name, id, create_zios_generic_zconfig_key, **kwargs):  # noqa: E501
        """create_zios_generic_zconfig_key  # noqa: E501

        Create VPSA Object Storage Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_zios_generic_zconfig_key(cloud_name, id, create_zios_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA Object Storage 'id' or 'internal-name' value as returned by get_all_zioses. (required)
        :param CreateZiosGenericZconfigKey create_zios_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_zios_generic_zconfig_key_with_http_info(cloud_name, id, create_zios_generic_zconfig_key, **kwargs)  # noqa: E501
        else:
            (data) = self.create_zios_generic_zconfig_key_with_http_info(cloud_name, id, create_zios_generic_zconfig_key, **kwargs)  # noqa: E501
            return data

    def create_zios_generic_zconfig_key_with_http_info(self, cloud_name, id, create_zios_generic_zconfig_key, **kwargs):  # noqa: E501
        """create_zios_generic_zconfig_key  # noqa: E501

        Create VPSA Object Storage Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_zios_generic_zconfig_key_with_http_info(cloud_name, id, create_zios_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA Object Storage 'id' or 'internal-name' value as returned by get_all_zioses. (required)
        :param CreateZiosGenericZconfigKey create_zios_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'create_zios_generic_zconfig_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_zios_generic_zconfig_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `create_zios_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_zios_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'create_zios_generic_zconfig_key' is set
        if self.api_client.client_side_validation and ('create_zios_generic_zconfig_key' not in params or
                                                       params['create_zios_generic_zconfig_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `create_zios_generic_zconfig_key` when calling `create_zios_generic_zconfig_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_zios_generic_zconfig_key' in params:
            body_params = params['create_zios_generic_zconfig_key']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/generic_zconfig_keys.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cloud_control_ip_whitelisting_entries(self, cloud_name, delete_cloud_control_ip_whitelisting_entries, **kwargs):  # noqa: E501
        """delete_cloud_control_ip_whitelisting_entries  # noqa: E501

        Delete Cloud Control IP Whitelisting entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloud_control_ip_whitelisting_entries(cloud_name, delete_cloud_control_ip_whitelisting_entries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param DeleteCloudControlIpWhitelistingEntries delete_cloud_control_ip_whitelisting_entries: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cloud_control_ip_whitelisting_entries_with_http_info(cloud_name, delete_cloud_control_ip_whitelisting_entries, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cloud_control_ip_whitelisting_entries_with_http_info(cloud_name, delete_cloud_control_ip_whitelisting_entries, **kwargs)  # noqa: E501
            return data

    def delete_cloud_control_ip_whitelisting_entries_with_http_info(self, cloud_name, delete_cloud_control_ip_whitelisting_entries, **kwargs):  # noqa: E501
        """delete_cloud_control_ip_whitelisting_entries  # noqa: E501

        Delete Cloud Control IP Whitelisting entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloud_control_ip_whitelisting_entries_with_http_info(cloud_name, delete_cloud_control_ip_whitelisting_entries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param DeleteCloudControlIpWhitelistingEntries delete_cloud_control_ip_whitelisting_entries: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'delete_cloud_control_ip_whitelisting_entries']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cloud_control_ip_whitelisting_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `delete_cloud_control_ip_whitelisting_entries`")  # noqa: E501
        # verify the required parameter 'delete_cloud_control_ip_whitelisting_entries' is set
        if self.api_client.client_side_validation and ('delete_cloud_control_ip_whitelisting_entries' not in params or
                                                       params['delete_cloud_control_ip_whitelisting_entries'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delete_cloud_control_ip_whitelisting_entries` when calling `delete_cloud_control_ip_whitelisting_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_cloud_control_ip_whitelisting_entries' in params:
            body_params = params['delete_cloud_control_ip_whitelisting_entries']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/delete_cloud_control_ip_whitelisting_entries.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_endpoint(self, cloud_name, delete_endpoint, **kwargs):  # noqa: E501
        """delete_endpoint  # noqa: E501

        Deletes an existing cloud upload endpoint. Make sure no VPSA Storage Array or VPSA Object Storage are using the cloud endpoint in their upload endpoints configurations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_endpoint(cloud_name, delete_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param DeleteEndpoint delete_endpoint: (required)
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_endpoint_with_http_info(cloud_name, delete_endpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_endpoint_with_http_info(cloud_name, delete_endpoint, **kwargs)  # noqa: E501
            return data

    def delete_endpoint_with_http_info(self, cloud_name, delete_endpoint, **kwargs):  # noqa: E501
        """delete_endpoint  # noqa: E501

        Deletes an existing cloud upload endpoint. Make sure no VPSA Storage Array or VPSA Object Storage are using the cloud endpoint in their upload endpoints configurations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_endpoint_with_http_info(cloud_name, delete_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param DeleteEndpoint delete_endpoint: (required)
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'delete_endpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `delete_endpoint`")  # noqa: E501
        # verify the required parameter 'delete_endpoint' is set
        if self.api_client.client_side_validation and ('delete_endpoint' not in params or
                                                       params['delete_endpoint'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delete_endpoint` when calling `delete_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_endpoint' in params:
            body_params = params['delete_endpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/endpoints.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20066',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_endpoints_config(self, cloud_name, delete_endpoints_config, **kwargs):  # noqa: E501
        """delete_endpoints_config  # noqa: E501

        Deletes an existing cloud endpoint configuration for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_endpoints_config(cloud_name, delete_endpoints_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param DeleteEndpointsConfig delete_endpoints_config: (required)
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_endpoints_config_with_http_info(cloud_name, delete_endpoints_config, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_endpoints_config_with_http_info(cloud_name, delete_endpoints_config, **kwargs)  # noqa: E501
            return data

    def delete_endpoints_config_with_http_info(self, cloud_name, delete_endpoints_config, **kwargs):  # noqa: E501
        """delete_endpoints_config  # noqa: E501

        Deletes an existing cloud endpoint configuration for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_endpoints_config_with_http_info(cloud_name, delete_endpoints_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param DeleteEndpointsConfig delete_endpoints_config: (required)
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'delete_endpoints_config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_endpoints_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `delete_endpoints_config`")  # noqa: E501
        # verify the required parameter 'delete_endpoints_config' is set
        if self.api_client.client_side_validation and ('delete_endpoints_config' not in params or
                                                       params['delete_endpoints_config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delete_endpoints_config` when calling `delete_endpoints_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_endpoints_config' in params:
            body_params = params['delete_endpoints_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/endpoints_config.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20070',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_generic_zconfig_key(self, cloud_name, delete_generic_zconfig_key, **kwargs):  # noqa: E501
        """delete_generic_zconfig_key  # noqa: E501

        Delete Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_generic_zconfig_key(cloud_name, delete_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param DeleteGenericZconfigKey delete_generic_zconfig_key: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_generic_zconfig_key_with_http_info(cloud_name, delete_generic_zconfig_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_generic_zconfig_key_with_http_info(cloud_name, delete_generic_zconfig_key, **kwargs)  # noqa: E501
            return data

    def delete_generic_zconfig_key_with_http_info(self, cloud_name, delete_generic_zconfig_key, **kwargs):  # noqa: E501
        """delete_generic_zconfig_key  # noqa: E501

        Delete Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_generic_zconfig_key_with_http_info(cloud_name, delete_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param DeleteGenericZconfigKey delete_generic_zconfig_key: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'delete_generic_zconfig_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_generic_zconfig_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `delete_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'delete_generic_zconfig_key' is set
        if self.api_client.client_side_validation and ('delete_generic_zconfig_key' not in params or
                                                       params['delete_generic_zconfig_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delete_generic_zconfig_key` when calling `delete_generic_zconfig_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_generic_zconfig_key' in params:
            body_params = params['delete_generic_zconfig_key']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/generic_zconfig_keys.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ticket_settings(self, cloud_name, set_ticket_settings, **kwargs):  # noqa: E501
        """delete_ticket_settings  # noqa: E501

        Delete support ticket settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ticket_settings(cloud_name, set_ticket_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetTicketSettings1 set_ticket_settings: (required)
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ticket_settings_with_http_info(cloud_name, set_ticket_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ticket_settings_with_http_info(cloud_name, set_ticket_settings, **kwargs)  # noqa: E501
            return data

    def delete_ticket_settings_with_http_info(self, cloud_name, set_ticket_settings, **kwargs):  # noqa: E501
        """delete_ticket_settings  # noqa: E501

        Delete support ticket settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ticket_settings_with_http_info(cloud_name, set_ticket_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetTicketSettings1 set_ticket_settings: (required)
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'set_ticket_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ticket_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `delete_ticket_settings`")  # noqa: E501
        # verify the required parameter 'set_ticket_settings' is set
        if self.api_client.client_side_validation and ('set_ticket_settings' not in params or
                                                       params['set_ticket_settings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_ticket_settings` when calling `delete_ticket_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_ticket_settings' in params:
            body_params = params['set_ticket_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/delete_ticket_settings.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_vpsa_generic_zconfig_key(self, cloud_name, id, delete_vpsa_generic_zconfig_key, **kwargs):  # noqa: E501
        """delete_vpsa_generic_zconfig_key  # noqa: E501

        Delete VPSA Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vpsa_generic_zconfig_key(cloud_name, id, delete_vpsa_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA 'id' or 'internal-name' value as returned by get_all_vpsas. (required)
        :param DeleteVpsaGenericZconfigKey delete_vpsa_generic_zconfig_key: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_vpsa_generic_zconfig_key_with_http_info(cloud_name, id, delete_vpsa_generic_zconfig_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_vpsa_generic_zconfig_key_with_http_info(cloud_name, id, delete_vpsa_generic_zconfig_key, **kwargs)  # noqa: E501
            return data

    def delete_vpsa_generic_zconfig_key_with_http_info(self, cloud_name, id, delete_vpsa_generic_zconfig_key, **kwargs):  # noqa: E501
        """delete_vpsa_generic_zconfig_key  # noqa: E501

        Delete VPSA Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_vpsa_generic_zconfig_key_with_http_info(cloud_name, id, delete_vpsa_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA 'id' or 'internal-name' value as returned by get_all_vpsas. (required)
        :param DeleteVpsaGenericZconfigKey delete_vpsa_generic_zconfig_key: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'delete_vpsa_generic_zconfig_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vpsa_generic_zconfig_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `delete_vpsa_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_vpsa_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'delete_vpsa_generic_zconfig_key' is set
        if self.api_client.client_side_validation and ('delete_vpsa_generic_zconfig_key' not in params or
                                                       params['delete_vpsa_generic_zconfig_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delete_vpsa_generic_zconfig_key` when calling `delete_vpsa_generic_zconfig_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_vpsa_generic_zconfig_key' in params:
            body_params = params['delete_vpsa_generic_zconfig_key']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/vpsas/{id}/generic_zconfig_keys.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_zios_generic_zconfig_key(self, cloud_name, id, delete_zios_generic_zconfig_key, **kwargs):  # noqa: E501
        """delete_zios_generic_zconfig_key  # noqa: E501

        Delete VPSA Object Storage Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_zios_generic_zconfig_key(cloud_name, id, delete_zios_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA Object Storage 'id' or 'internal-name' value as returned by get_all_zioses. (required)
        :param DeleteZiosGenericZconfigKey delete_zios_generic_zconfig_key: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_zios_generic_zconfig_key_with_http_info(cloud_name, id, delete_zios_generic_zconfig_key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_zios_generic_zconfig_key_with_http_info(cloud_name, id, delete_zios_generic_zconfig_key, **kwargs)  # noqa: E501
            return data

    def delete_zios_generic_zconfig_key_with_http_info(self, cloud_name, id, delete_zios_generic_zconfig_key, **kwargs):  # noqa: E501
        """delete_zios_generic_zconfig_key  # noqa: E501

        Delete VPSA Object Storage Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_zios_generic_zconfig_key_with_http_info(cloud_name, id, delete_zios_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA Object Storage 'id' or 'internal-name' value as returned by get_all_zioses. (required)
        :param DeleteZiosGenericZconfigKey delete_zios_generic_zconfig_key: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'delete_zios_generic_zconfig_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_zios_generic_zconfig_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `delete_zios_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_zios_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'delete_zios_generic_zconfig_key' is set
        if self.api_client.client_side_validation and ('delete_zios_generic_zconfig_key' not in params or
                                                       params['delete_zios_generic_zconfig_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `delete_zios_generic_zconfig_key` when calling `delete_zios_generic_zconfig_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'delete_zios_generic_zconfig_key' in params:
            body_params = params['delete_zios_generic_zconfig_key']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/generic_zconfig_keys.json', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable_cloud_control_ip_whitelisting(self, cloud_name, **kwargs):  # noqa: E501
        """disable_cloud_control_ip_whitelisting  # noqa: E501

        Disable Cloud Control IP Whitelisting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_cloud_control_ip_whitelisting(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_cloud_control_ip_whitelisting_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.disable_cloud_control_ip_whitelisting_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def disable_cloud_control_ip_whitelisting_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """disable_cloud_control_ip_whitelisting  # noqa: E501

        Disable Cloud Control IP Whitelisting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_cloud_control_ip_whitelisting_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_cloud_control_ip_whitelisting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `disable_cloud_control_ip_whitelisting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/disable_cloud_control_ip_whitelisting.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable_cloud_control_ip_whitelisting(self, cloud_name, **kwargs):  # noqa: E501
        """enable_cloud_control_ip_whitelisting  # noqa: E501

        Enable Cloud Control IP Whitelisting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_cloud_control_ip_whitelisting(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enable_cloud_control_ip_whitelisting_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.enable_cloud_control_ip_whitelisting_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def enable_cloud_control_ip_whitelisting_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """enable_cloud_control_ip_whitelisting  # noqa: E501

        Enable Cloud Control IP Whitelisting  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_cloud_control_ip_whitelisting_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_cloud_control_ip_whitelisting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `enable_cloud_control_ip_whitelisting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/enable_cloud_control_ip_whitelisting.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cloud_control_ip_whitelist_entries(self, cloud_name, **kwargs):  # noqa: E501
        """get_cloud_control_ip_whitelist_entries  # noqa: E501

        Gets Cloud Control IP Whitelist entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_control_ip_whitelist_entries(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cloud_control_ip_whitelist_entries_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_control_ip_whitelist_entries_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def get_cloud_control_ip_whitelist_entries_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """get_cloud_control_ip_whitelist_entries  # noqa: E501

        Gets Cloud Control IP Whitelist entries  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_control_ip_whitelist_entries_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_control_ip_whitelist_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_cloud_control_ip_whitelist_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/cloud_control_ip_whitelist_entries.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20072',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cloud_control_ip_whitelist_status(self, cloud_name, **kwargs):  # noqa: E501
        """get_cloud_control_ip_whitelist_status  # noqa: E501

        Gets Cloud Control IP Whitelisting status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_control_ip_whitelist_status(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cloud_control_ip_whitelist_status_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_control_ip_whitelist_status_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def get_cloud_control_ip_whitelist_status_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """get_cloud_control_ip_whitelist_status  # noqa: E501

        Gets Cloud Control IP Whitelisting status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_control_ip_whitelist_status_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_control_ip_whitelist_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_cloud_control_ip_whitelist_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/cloud_control_ip_whitelist_status.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cloud_settings(self, cloud_name, **kwargs):  # noqa: E501
        """get_cloud_settings  # noqa: E501

        Get cloud settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_settings(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cloud_settings_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_settings_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def get_cloud_settings_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """get_cloud_settings  # noqa: E501

        Get cloud settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_settings_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20055
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_cloud_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20055',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_endpoints(self, cloud_name, **kwargs):  # noqa: E501
        """get_endpoints  # noqa: E501

        Gets all cloud upload endpoints including default endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoints(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param list[str] methods_requested: Upload methods requested
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_endpoints_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_endpoints_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def get_endpoints_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """get_endpoints  # noqa: E501

        Gets all cloud upload endpoints including default endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoints_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param list[str] methods_requested: Upload methods requested
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'methods_requested']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_endpoints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_endpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []
        if 'methods_requested' in params:
            query_params.append(('methods_requested', params['methods_requested']))  # noqa: E501
            collection_formats['methods_requested'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/endpoints.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20063',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_endpoints_config(self, cloud_name, types, **kwargs):  # noqa: E501
        """get_endpoints_config  # noqa: E501

        Gets cloud endpoint configs by upload types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoints_config(cloud_name, types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param list[str] types: Upload types (required)
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_endpoints_config_with_http_info(cloud_name, types, **kwargs)  # noqa: E501
        else:
            (data) = self.get_endpoints_config_with_http_info(cloud_name, types, **kwargs)  # noqa: E501
            return data

    def get_endpoints_config_with_http_info(self, cloud_name, types, **kwargs):  # noqa: E501
        """get_endpoints_config  # noqa: E501

        Gets cloud endpoint configs by upload types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoints_config_with_http_info(cloud_name, types, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param list[str] types: Upload types (required)
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_endpoints_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_endpoints_config`")  # noqa: E501
        # verify the required parameter 'types' is set
        if self.api_client.client_side_validation and ('types' not in params or
                                                       params['types'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `types` when calling `get_endpoints_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []
        if 'types' in params:
            query_params.append(('types', params['types']))  # noqa: E501
            collection_formats['types'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/endpoints_config.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20067',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_generic_zconfig_keys(self, cloud_name, **kwargs):  # noqa: E501
        """get_generic_zconfig_keys  # noqa: E501

        Get Cloud Global Generic Configuration Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generic_zconfig_keys(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_generic_zconfig_keys_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_generic_zconfig_keys_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def get_generic_zconfig_keys_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """get_generic_zconfig_keys  # noqa: E501

        Get Cloud Global Generic Configuration Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generic_zconfig_keys_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_generic_zconfig_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_generic_zconfig_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/generic_zconfig_keys.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20076',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_log_level(self, cloud_name, **kwargs):  # noqa: E501
        """get_log_level  # noqa: E501

        Get log level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_log_level(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_log_level_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_log_level_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def get_log_level_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """get_log_level  # noqa: E501

        Get log level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_log_level_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_log_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_log_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/log_level.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20074',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_remote_support_access(self, cloud_name, **kwargs):  # noqa: E501
        """get_remote_support_access  # noqa: E501

        Get Remote Support Access State  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_remote_support_access(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_remote_support_access_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_remote_support_access_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def get_remote_support_access_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """get_remote_support_access  # noqa: E501

        Get Remote Support Access State  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_remote_support_access_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_remote_support_access" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_remote_support_access`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/remote_support_access.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20075',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tickets_settings(self, cloud_name, **kwargs):  # noqa: E501
        """get_tickets_settings  # noqa: E501

        Gets all support tickets settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tickets_settings(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tickets_settings_with_http_info(cloud_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tickets_settings_with_http_info(cloud_name, **kwargs)  # noqa: E501
            return data

    def get_tickets_settings_with_http_info(self, cloud_name, **kwargs):  # noqa: E501
        """get_tickets_settings  # noqa: E501

        Gets all support tickets settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tickets_settings_with_http_info(cloud_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tickets_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_tickets_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/get_tickets_settings.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20060',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vpsa_generic_zconfig_keys(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_vpsa_generic_zconfig_keys  # noqa: E501

        Get VPSA Generic Configuration Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpsa_generic_zconfig_keys(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA 'id' or 'internal-name' value as returned by get_all_vpsas. (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vpsa_generic_zconfig_keys_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vpsa_generic_zconfig_keys_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def get_vpsa_generic_zconfig_keys_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_vpsa_generic_zconfig_keys  # noqa: E501

        Get VPSA Generic Configuration Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vpsa_generic_zconfig_keys_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA 'id' or 'internal-name' value as returned by get_all_vpsas. (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vpsa_generic_zconfig_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_vpsa_generic_zconfig_keys`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_vpsa_generic_zconfig_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/vpsas/{id}/generic_zconfig_keys.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20076',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_zios_generic_zconfig_keys(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_zios_generic_zconfig_keys  # noqa: E501

        Get VPSA Object Storage Generic Configuration Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zios_generic_zconfig_keys(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA Object Storage 'id' or 'internal-name' value as returned by get_all_zioses. (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_zios_generic_zconfig_keys_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_zios_generic_zconfig_keys_with_http_info(cloud_name, id, **kwargs)  # noqa: E501
            return data

    def get_zios_generic_zconfig_keys_with_http_info(self, cloud_name, id, **kwargs):  # noqa: E501
        """get_zios_generic_zconfig_keys  # noqa: E501

        Get VPSA Object Storage Generic Configuration Keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_zios_generic_zconfig_keys_with_http_info(cloud_name, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA Object Storage 'id' or 'internal-name' value as returned by get_all_zioses. (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_zios_generic_zconfig_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `get_zios_generic_zconfig_keys`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_zios_generic_zconfig_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/generic_zconfig_keys.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20076',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_automatic_drive_replacement(self, cloud_name, set_automatic_drive_replacement, **kwargs):  # noqa: E501
        """set_automatic_drive_replacement  # noqa: E501

        set automatic drive replacement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_automatic_drive_replacement(cloud_name, set_automatic_drive_replacement, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetAutomaticDriveReplacement set_automatic_drive_replacement: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_automatic_drive_replacement_with_http_info(cloud_name, set_automatic_drive_replacement, **kwargs)  # noqa: E501
        else:
            (data) = self.set_automatic_drive_replacement_with_http_info(cloud_name, set_automatic_drive_replacement, **kwargs)  # noqa: E501
            return data

    def set_automatic_drive_replacement_with_http_info(self, cloud_name, set_automatic_drive_replacement, **kwargs):  # noqa: E501
        """set_automatic_drive_replacement  # noqa: E501

        set automatic drive replacement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_automatic_drive_replacement_with_http_info(cloud_name, set_automatic_drive_replacement, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetAutomaticDriveReplacement set_automatic_drive_replacement: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'set_automatic_drive_replacement']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_automatic_drive_replacement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_automatic_drive_replacement`")  # noqa: E501
        # verify the required parameter 'set_automatic_drive_replacement' is set
        if self.api_client.client_side_validation and ('set_automatic_drive_replacement' not in params or
                                                       params['set_automatic_drive_replacement'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_automatic_drive_replacement` when calling `set_automatic_drive_replacement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_automatic_drive_replacement' in params:
            body_params = params['set_automatic_drive_replacement']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/automatic_drive_replacement.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_ccvm_cert(self, cloud_name, files_ccvm_key, files_ccvm_certificate, **kwargs):  # noqa: E501
        """set_ccvm_cert  # noqa: E501

        Set CCVM custom certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_ccvm_cert(cloud_name, files_ccvm_key, files_ccvm_certificate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param file files_ccvm_key: (required)
        :param file files_ccvm_certificate: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_ccvm_cert_with_http_info(cloud_name, files_ccvm_key, files_ccvm_certificate, **kwargs)  # noqa: E501
        else:
            (data) = self.set_ccvm_cert_with_http_info(cloud_name, files_ccvm_key, files_ccvm_certificate, **kwargs)  # noqa: E501
            return data

    def set_ccvm_cert_with_http_info(self, cloud_name, files_ccvm_key, files_ccvm_certificate, **kwargs):  # noqa: E501
        """set_ccvm_cert  # noqa: E501

        Set CCVM custom certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_ccvm_cert_with_http_info(cloud_name, files_ccvm_key, files_ccvm_certificate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param file files_ccvm_key: (required)
        :param file files_ccvm_certificate: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'files_ccvm_key', 'files_ccvm_certificate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_ccvm_cert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_ccvm_cert`")  # noqa: E501
        # verify the required parameter 'files_ccvm_key' is set
        if self.api_client.client_side_validation and ('files_ccvm_key' not in params or
                                                       params['files_ccvm_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `files_ccvm_key` when calling `set_ccvm_cert`")  # noqa: E501
        # verify the required parameter 'files_ccvm_certificate' is set
        if self.api_client.client_side_validation and ('files_ccvm_certificate' not in params or
                                                       params['files_ccvm_certificate'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `files_ccvm_certificate` when calling `set_ccvm_cert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'files_ccvm_key' in params:
            local_var_files['files[ccvm_key]'] = params['files_ccvm_key']  # noqa: E501
        if 'files_ccvm_certificate' in params:
            local_var_files['files[ccvm_certificate]'] = params['files_ccvm_certificate']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/ccvm_cert.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_ccvm_default_engine(self, cloud_name, set_ccvm_default_engine, **kwargs):  # noqa: E501
        """set_ccvm_default_engine  # noqa: E501

        Sets the default CCVM Engine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_ccvm_default_engine(cloud_name, set_ccvm_default_engine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetCcvmDefaultEngine set_ccvm_default_engine: (required)
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_ccvm_default_engine_with_http_info(cloud_name, set_ccvm_default_engine, **kwargs)  # noqa: E501
        else:
            (data) = self.set_ccvm_default_engine_with_http_info(cloud_name, set_ccvm_default_engine, **kwargs)  # noqa: E501
            return data

    def set_ccvm_default_engine_with_http_info(self, cloud_name, set_ccvm_default_engine, **kwargs):  # noqa: E501
        """set_ccvm_default_engine  # noqa: E501

        Sets the default CCVM Engine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_ccvm_default_engine_with_http_info(cloud_name, set_ccvm_default_engine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetCcvmDefaultEngine set_ccvm_default_engine: (required)
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'set_ccvm_default_engine']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_ccvm_default_engine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_ccvm_default_engine`")  # noqa: E501
        # verify the required parameter 'set_ccvm_default_engine' is set
        if self.api_client.client_side_validation and ('set_ccvm_default_engine' not in params or
                                                       params['set_ccvm_default_engine'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_ccvm_default_engine` when calling `set_ccvm_default_engine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_ccvm_default_engine' in params:
            body_params = params['set_ccvm_default_engine']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/set_ccvm_default_engine.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20056',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_mount_capacity_alert_threshold(self, cloud_name, set_remote_region_backend_protocol, **kwargs):  # noqa: E501
        """set_mount_capacity_alert_threshold  # noqa: E501

        Sets the mount capacity alert threshold. (Default: 30GiB)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_mount_capacity_alert_threshold(cloud_name, set_remote_region_backend_protocol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetRemoteRegionBackendProtocol1 set_remote_region_backend_protocol: (required)
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_mount_capacity_alert_threshold_with_http_info(cloud_name, set_remote_region_backend_protocol, **kwargs)  # noqa: E501
        else:
            (data) = self.set_mount_capacity_alert_threshold_with_http_info(cloud_name, set_remote_region_backend_protocol, **kwargs)  # noqa: E501
            return data

    def set_mount_capacity_alert_threshold_with_http_info(self, cloud_name, set_remote_region_backend_protocol, **kwargs):  # noqa: E501
        """set_mount_capacity_alert_threshold  # noqa: E501

        Sets the mount capacity alert threshold. (Default: 30GiB)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_mount_capacity_alert_threshold_with_http_info(cloud_name, set_remote_region_backend_protocol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetRemoteRegionBackendProtocol1 set_remote_region_backend_protocol: (required)
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'set_remote_region_backend_protocol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_mount_capacity_alert_threshold" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_mount_capacity_alert_threshold`")  # noqa: E501
        # verify the required parameter 'set_remote_region_backend_protocol' is set
        if self.api_client.client_side_validation and ('set_remote_region_backend_protocol' not in params or
                                                       params['set_remote_region_backend_protocol'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_remote_region_backend_protocol` when calling `set_mount_capacity_alert_threshold`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_remote_region_backend_protocol' in params:
            body_params = params['set_remote_region_backend_protocol']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/set_mount_capacity_alert_threshold.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20058',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_remote_region_backend_protocol(self, cloud_name, set_remote_region_backend_protocol, **kwargs):  # noqa: E501
        """set_remote_region_backend_protocol  # noqa: E501

        Sets the protocol for remote region backend. (Default: iSER)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_remote_region_backend_protocol(cloud_name, set_remote_region_backend_protocol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetRemoteRegionBackendProtocol set_remote_region_backend_protocol: (required)
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_remote_region_backend_protocol_with_http_info(cloud_name, set_remote_region_backend_protocol, **kwargs)  # noqa: E501
        else:
            (data) = self.set_remote_region_backend_protocol_with_http_info(cloud_name, set_remote_region_backend_protocol, **kwargs)  # noqa: E501
            return data

    def set_remote_region_backend_protocol_with_http_info(self, cloud_name, set_remote_region_backend_protocol, **kwargs):  # noqa: E501
        """set_remote_region_backend_protocol  # noqa: E501

        Sets the protocol for remote region backend. (Default: iSER)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_remote_region_backend_protocol_with_http_info(cloud_name, set_remote_region_backend_protocol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetRemoteRegionBackendProtocol set_remote_region_backend_protocol: (required)
        :return: InlineResponse20057
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'set_remote_region_backend_protocol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_remote_region_backend_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_remote_region_backend_protocol`")  # noqa: E501
        # verify the required parameter 'set_remote_region_backend_protocol' is set
        if self.api_client.client_side_validation and ('set_remote_region_backend_protocol' not in params or
                                                       params['set_remote_region_backend_protocol'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_remote_region_backend_protocol` when calling `set_remote_region_backend_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_remote_region_backend_protocol' in params:
            body_params = params['set_remote_region_backend_protocol']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/set_remote_region_backend_protocol.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20057',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_remote_support_access(self, cloud_name, set_remote_support_access, **kwargs):  # noqa: E501
        """set_remote_support_access  # noqa: E501

        Set Remote Support Access State  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_remote_support_access(cloud_name, set_remote_support_access, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetRemoteSupportAccess set_remote_support_access: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_remote_support_access_with_http_info(cloud_name, set_remote_support_access, **kwargs)  # noqa: E501
        else:
            (data) = self.set_remote_support_access_with_http_info(cloud_name, set_remote_support_access, **kwargs)  # noqa: E501
            return data

    def set_remote_support_access_with_http_info(self, cloud_name, set_remote_support_access, **kwargs):  # noqa: E501
        """set_remote_support_access  # noqa: E501

        Set Remote Support Access State  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_remote_support_access_with_http_info(cloud_name, set_remote_support_access, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetRemoteSupportAccess set_remote_support_access: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'set_remote_support_access']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_remote_support_access" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_remote_support_access`")  # noqa: E501
        # verify the required parameter 'set_remote_support_access' is set
        if self.api_client.client_side_validation and ('set_remote_support_access' not in params or
                                                       params['set_remote_support_access'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_remote_support_access` when calling `set_remote_support_access`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_remote_support_access' in params:
            body_params = params['set_remote_support_access']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/remote_support_access.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_snmp(self, cloud_name, set_snmp, **kwargs):  # noqa: E501
        """set_snmp  # noqa: E501

        Sets SNMP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_snmp(cloud_name, set_snmp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetSnmp set_snmp: (required)
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_snmp_with_http_info(cloud_name, set_snmp, **kwargs)  # noqa: E501
        else:
            (data) = self.set_snmp_with_http_info(cloud_name, set_snmp, **kwargs)  # noqa: E501
            return data

    def set_snmp_with_http_info(self, cloud_name, set_snmp, **kwargs):  # noqa: E501
        """set_snmp  # noqa: E501

        Sets SNMP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_snmp_with_http_info(cloud_name, set_snmp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetSnmp set_snmp: (required)
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'set_snmp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_snmp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_snmp`")  # noqa: E501
        # verify the required parameter 'set_snmp' is set
        if self.api_client.client_side_validation and ('set_snmp' not in params or
                                                       params['set_snmp'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_snmp` when calling `set_snmp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_snmp' in params:
            body_params = params['set_snmp']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/set_snmp.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_ticket_settings(self, cloud_name, set_ticket_settings, **kwargs):  # noqa: E501
        """set_ticket_settings  # noqa: E501

        Create/edit support ticket settings. Overrides all previous ticket settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_ticket_settings(cloud_name, set_ticket_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetTicketSettings set_ticket_settings: (required)
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_ticket_settings_with_http_info(cloud_name, set_ticket_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.set_ticket_settings_with_http_info(cloud_name, set_ticket_settings, **kwargs)  # noqa: E501
            return data

    def set_ticket_settings_with_http_info(self, cloud_name, set_ticket_settings, **kwargs):  # noqa: E501
        """set_ticket_settings  # noqa: E501

        Create/edit support ticket settings. Overrides all previous ticket settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_ticket_settings_with_http_info(cloud_name, set_ticket_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetTicketSettings set_ticket_settings: (required)
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'set_ticket_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_ticket_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_ticket_settings`")  # noqa: E501
        # verify the required parameter 'set_ticket_settings' is set
        if self.api_client.client_side_validation and ('set_ticket_settings' not in params or
                                                       params['set_ticket_settings'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_ticket_settings` when calling `set_ticket_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_ticket_settings' in params:
            body_params = params['set_ticket_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/set_ticket_settings.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20061',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_vpsa_cert(self, cloud_name, files_ssl_key, files_ssl_crt, **kwargs):  # noqa: E501
        """set_vpsa_cert  # noqa: E501

        Update VPSAs Certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_vpsa_cert(cloud_name, files_ssl_key, files_ssl_crt, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param file files_ssl_key: Key file (required)
        :param file files_ssl_crt: Crt file (required)
        :param str type: Type of vpsa (default - storage array)
        :param bool ssl_update_certificate_on_all_vpsas:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_vpsa_cert_with_http_info(cloud_name, files_ssl_key, files_ssl_crt, **kwargs)  # noqa: E501
        else:
            (data) = self.set_vpsa_cert_with_http_info(cloud_name, files_ssl_key, files_ssl_crt, **kwargs)  # noqa: E501
            return data

    def set_vpsa_cert_with_http_info(self, cloud_name, files_ssl_key, files_ssl_crt, **kwargs):  # noqa: E501
        """set_vpsa_cert  # noqa: E501

        Update VPSAs Certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_vpsa_cert_with_http_info(cloud_name, files_ssl_key, files_ssl_crt, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param file files_ssl_key: Key file (required)
        :param file files_ssl_crt: Crt file (required)
        :param str type: Type of vpsa (default - storage array)
        :param bool ssl_update_certificate_on_all_vpsas:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'files_ssl_key', 'files_ssl_crt', 'type', 'ssl_update_certificate_on_all_vpsas']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_vpsa_cert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_vpsa_cert`")  # noqa: E501
        # verify the required parameter 'files_ssl_key' is set
        if self.api_client.client_side_validation and ('files_ssl_key' not in params or
                                                       params['files_ssl_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `files_ssl_key` when calling `set_vpsa_cert`")  # noqa: E501
        # verify the required parameter 'files_ssl_crt' is set
        if self.api_client.client_side_validation and ('files_ssl_crt' not in params or
                                                       params['files_ssl_crt'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `files_ssl_crt` when calling `set_vpsa_cert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'files_ssl_key' in params:
            local_var_files['files[ssl_key]'] = params['files_ssl_key']  # noqa: E501
        if 'files_ssl_crt' in params:
            local_var_files['files[ssl_crt]'] = params['files_ssl_crt']  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'ssl_update_certificate_on_all_vpsas' in params:
            form_params.append(('ssl_update_certificate_on_all_vpsas', params['ssl_update_certificate_on_all_vpsas']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/vpsa_cert.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_vpsa_recycle_bin(self, cloud_name, set_vpsa_recycle_bin, **kwargs):  # noqa: E501
        """set_vpsa_recycle_bin  # noqa: E501

        Sets the amount of days in which a VPSA will stay in recycle bin before purging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_vpsa_recycle_bin(cloud_name, set_vpsa_recycle_bin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetVpsaRecycleBin set_vpsa_recycle_bin: (required)
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_vpsa_recycle_bin_with_http_info(cloud_name, set_vpsa_recycle_bin, **kwargs)  # noqa: E501
        else:
            (data) = self.set_vpsa_recycle_bin_with_http_info(cloud_name, set_vpsa_recycle_bin, **kwargs)  # noqa: E501
            return data

    def set_vpsa_recycle_bin_with_http_info(self, cloud_name, set_vpsa_recycle_bin, **kwargs):  # noqa: E501
        """set_vpsa_recycle_bin  # noqa: E501

        Sets the amount of days in which a VPSA will stay in recycle bin before purging.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_vpsa_recycle_bin_with_http_info(cloud_name, set_vpsa_recycle_bin, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param SetVpsaRecycleBin set_vpsa_recycle_bin: (required)
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'set_vpsa_recycle_bin']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_vpsa_recycle_bin" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_vpsa_recycle_bin`")  # noqa: E501
        # verify the required parameter 'set_vpsa_recycle_bin' is set
        if self.api_client.client_side_validation and ('set_vpsa_recycle_bin' not in params or
                                                       params['set_vpsa_recycle_bin'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_vpsa_recycle_bin` when calling `set_vpsa_recycle_bin`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_vpsa_recycle_bin' in params:
            body_params = params['set_vpsa_recycle_bin']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/vpsa_recycle_bin.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20073',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_zadara_cert(self, cloud_name, files_ssl_key, files_ssl_crt, **kwargs):  # noqa: E501
        """set_zadara_cert  # noqa: E501

        Update zadarastorage.com certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_zadara_cert(cloud_name, files_ssl_key, files_ssl_crt, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param file files_ssl_key: Key file (required)
        :param file files_ssl_crt: Crt file (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_zadara_cert_with_http_info(cloud_name, files_ssl_key, files_ssl_crt, **kwargs)  # noqa: E501
        else:
            (data) = self.set_zadara_cert_with_http_info(cloud_name, files_ssl_key, files_ssl_crt, **kwargs)  # noqa: E501
            return data

    def set_zadara_cert_with_http_info(self, cloud_name, files_ssl_key, files_ssl_crt, **kwargs):  # noqa: E501
        """set_zadara_cert  # noqa: E501

        Update zadarastorage.com certificate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_zadara_cert_with_http_info(cloud_name, files_ssl_key, files_ssl_crt, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param file files_ssl_key: Key file (required)
        :param file files_ssl_crt: Crt file (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'files_ssl_key', 'files_ssl_crt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_zadara_cert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `set_zadara_cert`")  # noqa: E501
        # verify the required parameter 'files_ssl_key' is set
        if self.api_client.client_side_validation and ('files_ssl_key' not in params or
                                                       params['files_ssl_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `files_ssl_key` when calling `set_zadara_cert`")  # noqa: E501
        # verify the required parameter 'files_ssl_crt' is set
        if self.api_client.client_side_validation and ('files_ssl_crt' not in params or
                                                       params['files_ssl_crt'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `files_ssl_crt` when calling `set_zadara_cert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'files_ssl_key' in params:
            local_var_files['files[ssl_key]'] = params['files_ssl_key']  # noqa: E501
        if 'files_ssl_crt' in params:
            local_var_files['files[ssl_crt]'] = params['files_ssl_crt']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/zadara_cert.json', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cloud_control_ip_whitelisting_entries(self, cloud_name, update_cloud_control_ip_whitelisting_entries, **kwargs):  # noqa: E501
        """update_cloud_control_ip_whitelisting_entries  # noqa: E501

        Update Cloud Control IP Whitelisting entries. Deletes existing entries and creates new ones with a different ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cloud_control_ip_whitelisting_entries(cloud_name, update_cloud_control_ip_whitelisting_entries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param UpdateCloudControlIpWhitelistingEntries update_cloud_control_ip_whitelisting_entries: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cloud_control_ip_whitelisting_entries_with_http_info(cloud_name, update_cloud_control_ip_whitelisting_entries, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cloud_control_ip_whitelisting_entries_with_http_info(cloud_name, update_cloud_control_ip_whitelisting_entries, **kwargs)  # noqa: E501
            return data

    def update_cloud_control_ip_whitelisting_entries_with_http_info(self, cloud_name, update_cloud_control_ip_whitelisting_entries, **kwargs):  # noqa: E501
        """update_cloud_control_ip_whitelisting_entries  # noqa: E501

        Update Cloud Control IP Whitelisting entries. Deletes existing entries and creates new ones with a different ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cloud_control_ip_whitelisting_entries_with_http_info(cloud_name, update_cloud_control_ip_whitelisting_entries, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param UpdateCloudControlIpWhitelistingEntries update_cloud_control_ip_whitelisting_entries: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'update_cloud_control_ip_whitelisting_entries']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cloud_control_ip_whitelisting_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `update_cloud_control_ip_whitelisting_entries`")  # noqa: E501
        # verify the required parameter 'update_cloud_control_ip_whitelisting_entries' is set
        if self.api_client.client_side_validation and ('update_cloud_control_ip_whitelisting_entries' not in params or
                                                       params['update_cloud_control_ip_whitelisting_entries'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_cloud_control_ip_whitelisting_entries` when calling `update_cloud_control_ip_whitelisting_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_cloud_control_ip_whitelisting_entries' in params:
            body_params = params['update_cloud_control_ip_whitelisting_entries']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/update_cloud_control_ip_whitelisting_entries.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_endpoint(self, cloud_name, update_endpoint, **kwargs):  # noqa: E501
        """update_endpoint  # noqa: E501

        Updates an existing cloud upload endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_endpoint(cloud_name, update_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param UpdateEndpoint update_endpoint: (required)
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_endpoint_with_http_info(cloud_name, update_endpoint, **kwargs)  # noqa: E501
        else:
            (data) = self.update_endpoint_with_http_info(cloud_name, update_endpoint, **kwargs)  # noqa: E501
            return data

    def update_endpoint_with_http_info(self, cloud_name, update_endpoint, **kwargs):  # noqa: E501
        """update_endpoint  # noqa: E501

        Updates an existing cloud upload endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_endpoint_with_http_info(cloud_name, update_endpoint, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param UpdateEndpoint update_endpoint: (required)
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'update_endpoint']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `update_endpoint`")  # noqa: E501
        # verify the required parameter 'update_endpoint' is set
        if self.api_client.client_side_validation and ('update_endpoint' not in params or
                                                       params['update_endpoint'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_endpoint` when calling `update_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_endpoint' in params:
            body_params = params['update_endpoint']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/endpoints.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20064',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_endpoints_config(self, cloud_name, update_endpoints_config, **kwargs):  # noqa: E501
        """update_endpoints_config  # noqa: E501

        Adds more cloud endpoints configurations for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_endpoints_config(cloud_name, update_endpoints_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param UpdateEndpointsConfig update_endpoints_config: (required)
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_endpoints_config_with_http_info(cloud_name, update_endpoints_config, **kwargs)  # noqa: E501
        else:
            (data) = self.update_endpoints_config_with_http_info(cloud_name, update_endpoints_config, **kwargs)  # noqa: E501
            return data

    def update_endpoints_config_with_http_info(self, cloud_name, update_endpoints_config, **kwargs):  # noqa: E501
        """update_endpoints_config  # noqa: E501

        Adds more cloud endpoints configurations for upload type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_endpoints_config_with_http_info(cloud_name, update_endpoints_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param UpdateEndpointsConfig update_endpoints_config: (required)
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'update_endpoints_config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_endpoints_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `update_endpoints_config`")  # noqa: E501
        # verify the required parameter 'update_endpoints_config' is set
        if self.api_client.client_side_validation and ('update_endpoints_config' not in params or
                                                       params['update_endpoints_config'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_endpoints_config` when calling `update_endpoints_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_endpoints_config' in params:
            body_params = params['update_endpoints_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/endpoints_config.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20068',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_generic_zconfig_key(self, cloud_name, update_generic_zconfig_key, **kwargs):  # noqa: E501
        """update_generic_zconfig_key  # noqa: E501

        Update Zadara Configuration Key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_generic_zconfig_key(cloud_name, update_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param UpdateGenericZconfigKey update_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_generic_zconfig_key_with_http_info(cloud_name, update_generic_zconfig_key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_generic_zconfig_key_with_http_info(cloud_name, update_generic_zconfig_key, **kwargs)  # noqa: E501
            return data

    def update_generic_zconfig_key_with_http_info(self, cloud_name, update_generic_zconfig_key, **kwargs):  # noqa: E501
        """update_generic_zconfig_key  # noqa: E501

        Update Zadara Configuration Key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_generic_zconfig_key_with_http_info(cloud_name, update_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param UpdateGenericZconfigKey update_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'update_generic_zconfig_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_generic_zconfig_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `update_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'update_generic_zconfig_key' is set
        if self.api_client.client_side_validation and ('update_generic_zconfig_key' not in params or
                                                       params['update_generic_zconfig_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_generic_zconfig_key` when calling `update_generic_zconfig_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_generic_zconfig_key' in params:
            body_params = params['update_generic_zconfig_key']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/settings/generic_zconfig_keys.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_vpsa_generic_zconfig_key(self, cloud_name, id, update_vpsa_generic_zconfig_key, **kwargs):  # noqa: E501
        """update_vpsa_generic_zconfig_key  # noqa: E501

        Update VPSA Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vpsa_generic_zconfig_key(cloud_name, id, update_vpsa_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA 'id' or 'internal-name' value as returned by get_all_vpsas. (required)
        :param UpdateVpsaGenericZconfigKey update_vpsa_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_vpsa_generic_zconfig_key_with_http_info(cloud_name, id, update_vpsa_generic_zconfig_key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_vpsa_generic_zconfig_key_with_http_info(cloud_name, id, update_vpsa_generic_zconfig_key, **kwargs)  # noqa: E501
            return data

    def update_vpsa_generic_zconfig_key_with_http_info(self, cloud_name, id, update_vpsa_generic_zconfig_key, **kwargs):  # noqa: E501
        """update_vpsa_generic_zconfig_key  # noqa: E501

        Update VPSA Zadara Configuration Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_vpsa_generic_zconfig_key_with_http_info(cloud_name, id, update_vpsa_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA 'id' or 'internal-name' value as returned by get_all_vpsas. (required)
        :param UpdateVpsaGenericZconfigKey update_vpsa_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'update_vpsa_generic_zconfig_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vpsa_generic_zconfig_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `update_vpsa_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_vpsa_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'update_vpsa_generic_zconfig_key' is set
        if self.api_client.client_side_validation and ('update_vpsa_generic_zconfig_key' not in params or
                                                       params['update_vpsa_generic_zconfig_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_vpsa_generic_zconfig_key` when calling `update_vpsa_generic_zconfig_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_vpsa_generic_zconfig_key' in params:
            body_params = params['update_vpsa_generic_zconfig_key']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/vpsas/{id}/generic_zconfig_keys.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_zios_generic_zconfig_key(self, cloud_name, id, update_zios_generic_zconfig_key, **kwargs):  # noqa: E501
        """update_zios_generic_zconfig_key  # noqa: E501

        Update VPSA Object Storage Zadara Configuration Key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_zios_generic_zconfig_key(cloud_name, id, update_zios_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA Object Storage 'id' or 'internal-name' value as returned by get_all_zioses. (required)
        :param UpdateZiosGenericZconfigKey update_zios_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_zios_generic_zconfig_key_with_http_info(cloud_name, id, update_zios_generic_zconfig_key, **kwargs)  # noqa: E501
        else:
            (data) = self.update_zios_generic_zconfig_key_with_http_info(cloud_name, id, update_zios_generic_zconfig_key, **kwargs)  # noqa: E501
            return data

    def update_zios_generic_zconfig_key_with_http_info(self, cloud_name, id, update_zios_generic_zconfig_key, **kwargs):  # noqa: E501
        """update_zios_generic_zconfig_key  # noqa: E501

        Update VPSA Object Storage Zadara Configuration Key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_zios_generic_zconfig_key_with_http_info(cloud_name, id, update_zios_generic_zconfig_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cloud_name: (required)
        :param int id: The VPSA Object Storage 'id' or 'internal-name' value as returned by get_all_zioses. (required)
        :param UpdateZiosGenericZconfigKey update_zios_generic_zconfig_key: (required)
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cloud_name', 'id', 'update_zios_generic_zconfig_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_zios_generic_zconfig_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cloud_name' is set
        if self.api_client.client_side_validation and ('cloud_name' not in params or
                                                       params['cloud_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cloud_name` when calling `update_zios_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_zios_generic_zconfig_key`")  # noqa: E501
        # verify the required parameter 'update_zios_generic_zconfig_key' is set
        if self.api_client.client_side_validation and ('update_zios_generic_zconfig_key' not in params or
                                                       params['update_zios_generic_zconfig_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `update_zios_generic_zconfig_key` when calling `update_zios_generic_zconfig_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cloud_name' in params:
            path_params['cloud_name'] = params['cloud_name']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_zios_generic_zconfig_key' in params:
            body_params = params['update_zios_generic_zconfig_key']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/clouds/{cloud_name}/zioses/{id}/generic_zconfig_keys.json', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
