# coding: utf-8

"""
    Zadara VPSA Object Storage REST API

    # Overview  This document outlines the methods available for administrating your VPSA&#174; Object Storage. The API supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or through the X-Access-Key header. Alternately, you can use the username and password parameters for authentication, but we do not recommend this method for anything other than possibly retrieving an API key.  By default , all operations are allowed only to VPSA Object Storage admin. Some actions are allowed by an account admin and they will be marked on the action's header  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some time to complete. When using the API, this can cause some actions, such as adding drives to storage policy, to be undesirably asynchronous. You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Metering API  Metering information can be retrieved using the VPSA Object Storage API for the following components:  - Accounts - Users - Drives - Virtual Controllers - Load Balancer Groups - Storage Policies  Metering information returned by the API is subject to the following constraints:  - 10 seconds interval - 1 hour range - 1 minute interval - 1 day range - 1 hour interval - 30 days range  Values outside the accepted range will be returned as 0.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Zios.configuration import Configuration


class InlineResponse20051ResponseUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'update_time': 'str',
        'name': 'str',
        'username': 'str',
        'links': 'str',
        's3_secret_key': 'str',
        'enabled': 'str',
        'account_id': 'str',
        'domain_id': 'str',
        'create_time': 'str',
        's3_access_key': 'str',
        'init_password_changed': 'str',
        'role_list': 'list[str]',
        'project_id': 'str',
        'is_system_user': 'str',
        'id': 'str',
        'password_expires_at': 'str',
        'notify_on_events': 'bool',
        'notification_severity': 'int',
        'primary': 'str',
        'email': 'str',
        'display_timezone': 'str',
        'locked': 'str'
    }

    attribute_map = {
        'account_name': 'account_name',
        'update_time': 'update_time',
        'name': 'name',
        'username': 'username',
        'links': 'links',
        's3_secret_key': 's3_secret_key',
        'enabled': 'enabled',
        'account_id': 'account_id',
        'domain_id': 'domain_id',
        'create_time': 'create_time',
        's3_access_key': 's3_access_key',
        'init_password_changed': 'init_password_changed',
        'role_list': 'role_list',
        'project_id': 'project_id',
        'is_system_user': 'is_system_user',
        'id': 'id',
        'password_expires_at': 'password_expires_at',
        'notify_on_events': 'notify_on_events',
        'notification_severity': 'notification_severity',
        'primary': 'primary',
        'email': 'email',
        'display_timezone': 'display_timezone',
        'locked': 'locked'
    }

    def __init__(self, account_name=None, update_time=None, name=None, username=None, links=None, s3_secret_key=None, enabled=None, account_id=None, domain_id=None, create_time=None, s3_access_key=None, init_password_changed=None, role_list=None, project_id=None, is_system_user=None, id=None, password_expires_at=None, notify_on_events=None, notification_severity=None, primary=None, email=None, display_timezone=None, locked=None, _configuration=None):  # noqa: E501
        """InlineResponse20051ResponseUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_name = None
        self._update_time = None
        self._name = None
        self._username = None
        self._links = None
        self._s3_secret_key = None
        self._enabled = None
        self._account_id = None
        self._domain_id = None
        self._create_time = None
        self._s3_access_key = None
        self._init_password_changed = None
        self._role_list = None
        self._project_id = None
        self._is_system_user = None
        self._id = None
        self._password_expires_at = None
        self._notify_on_events = None
        self._notification_severity = None
        self._primary = None
        self._email = None
        self._display_timezone = None
        self._locked = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        if update_time is not None:
            self.update_time = update_time
        if name is not None:
            self.name = name
        if username is not None:
            self.username = username
        if links is not None:
            self.links = links
        if s3_secret_key is not None:
            self.s3_secret_key = s3_secret_key
        if enabled is not None:
            self.enabled = enabled
        if account_id is not None:
            self.account_id = account_id
        if domain_id is not None:
            self.domain_id = domain_id
        if create_time is not None:
            self.create_time = create_time
        if s3_access_key is not None:
            self.s3_access_key = s3_access_key
        if init_password_changed is not None:
            self.init_password_changed = init_password_changed
        if role_list is not None:
            self.role_list = role_list
        if project_id is not None:
            self.project_id = project_id
        if is_system_user is not None:
            self.is_system_user = is_system_user
        if id is not None:
            self.id = id
        if password_expires_at is not None:
            self.password_expires_at = password_expires_at
        if notify_on_events is not None:
            self.notify_on_events = notify_on_events
        if notification_severity is not None:
            self.notification_severity = notification_severity
        if primary is not None:
            self.primary = primary
        if email is not None:
            self.email = email
        if display_timezone is not None:
            self.display_timezone = display_timezone
        if locked is not None:
            self.locked = locked

    @property
    def account_name(self):
        """Gets the account_name of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The account_name of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this InlineResponse20051ResponseUser.


        :param account_name: The account_name of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def update_time(self):
        """Gets the update_time of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The update_time of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InlineResponse20051ResponseUser.


        :param update_time: The update_time of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def name(self):
        """Gets the name of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The name of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20051ResponseUser.


        :param name: The name of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The username of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InlineResponse20051ResponseUser.


        :param username: The username of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def links(self):
        """Gets the links of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The links of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InlineResponse20051ResponseUser.


        :param links: The links of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._links = links

    @property
    def s3_secret_key(self):
        """Gets the s3_secret_key of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The s3_secret_key of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._s3_secret_key

    @s3_secret_key.setter
    def s3_secret_key(self, s3_secret_key):
        """Sets the s3_secret_key of this InlineResponse20051ResponseUser.


        :param s3_secret_key: The s3_secret_key of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._s3_secret_key = s3_secret_key

    @property
    def enabled(self):
        """Gets the enabled of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The enabled of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineResponse20051ResponseUser.


        :param enabled: The enabled of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def account_id(self):
        """Gets the account_id of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The account_id of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InlineResponse20051ResponseUser.


        :param account_id: The account_id of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def domain_id(self):
        """Gets the domain_id of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The domain_id of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this InlineResponse20051ResponseUser.


        :param domain_id: The domain_id of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._domain_id = domain_id

    @property
    def create_time(self):
        """Gets the create_time of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The create_time of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InlineResponse20051ResponseUser.


        :param create_time: The create_time of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def s3_access_key(self):
        """Gets the s3_access_key of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The s3_access_key of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._s3_access_key

    @s3_access_key.setter
    def s3_access_key(self, s3_access_key):
        """Sets the s3_access_key of this InlineResponse20051ResponseUser.


        :param s3_access_key: The s3_access_key of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._s3_access_key = s3_access_key

    @property
    def init_password_changed(self):
        """Gets the init_password_changed of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The init_password_changed of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._init_password_changed

    @init_password_changed.setter
    def init_password_changed(self, init_password_changed):
        """Sets the init_password_changed of this InlineResponse20051ResponseUser.


        :param init_password_changed: The init_password_changed of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._init_password_changed = init_password_changed

    @property
    def role_list(self):
        """Gets the role_list of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The role_list of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._role_list

    @role_list.setter
    def role_list(self, role_list):
        """Sets the role_list of this InlineResponse20051ResponseUser.


        :param role_list: The role_list of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: list[str]
        """

        self._role_list = role_list

    @property
    def project_id(self):
        """Gets the project_id of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The project_id of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this InlineResponse20051ResponseUser.


        :param project_id: The project_id of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def is_system_user(self):
        """Gets the is_system_user of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The is_system_user of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._is_system_user

    @is_system_user.setter
    def is_system_user(self, is_system_user):
        """Sets the is_system_user of this InlineResponse20051ResponseUser.


        :param is_system_user: The is_system_user of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._is_system_user = is_system_user

    @property
    def id(self):
        """Gets the id of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The id of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20051ResponseUser.


        :param id: The id of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def password_expires_at(self):
        """Gets the password_expires_at of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The password_expires_at of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._password_expires_at

    @password_expires_at.setter
    def password_expires_at(self, password_expires_at):
        """Sets the password_expires_at of this InlineResponse20051ResponseUser.


        :param password_expires_at: The password_expires_at of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._password_expires_at = password_expires_at

    @property
    def notify_on_events(self):
        """Gets the notify_on_events of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The notify_on_events of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: bool
        """
        return self._notify_on_events

    @notify_on_events.setter
    def notify_on_events(self, notify_on_events):
        """Sets the notify_on_events of this InlineResponse20051ResponseUser.


        :param notify_on_events: The notify_on_events of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: bool
        """

        self._notify_on_events = notify_on_events

    @property
    def notification_severity(self):
        """Gets the notification_severity of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The notification_severity of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: int
        """
        return self._notification_severity

    @notification_severity.setter
    def notification_severity(self, notification_severity):
        """Sets the notification_severity of this InlineResponse20051ResponseUser.


        :param notification_severity: The notification_severity of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: int
        """

        self._notification_severity = notification_severity

    @property
    def primary(self):
        """Gets the primary of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The primary of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this InlineResponse20051ResponseUser.


        :param primary: The primary of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._primary = primary

    @property
    def email(self):
        """Gets the email of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The email of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20051ResponseUser.


        :param email: The email of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def display_timezone(self):
        """Gets the display_timezone of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The display_timezone of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._display_timezone

    @display_timezone.setter
    def display_timezone(self, display_timezone):
        """Sets the display_timezone of this InlineResponse20051ResponseUser.


        :param display_timezone: The display_timezone of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._display_timezone = display_timezone

    @property
    def locked(self):
        """Gets the locked of this InlineResponse20051ResponseUser.  # noqa: E501


        :return: The locked of this InlineResponse20051ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this InlineResponse20051ResponseUser.


        :param locked: The locked of this InlineResponse20051ResponseUser.  # noqa: E501
        :type: str
        """

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20051ResponseUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20051ResponseUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20051ResponseUser):
            return True

        return self.to_dict() != other.to_dict()
