# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class AddStoragePolicyToVpsaObjectStorage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'storage_policy_type': 'int',
        'drives': 'VpsasvpsaIdstoragePolicyJsonDrives'
    }

    attribute_map = {
        'name': 'name',
        'storage_policy_type': 'storage_policy_type',
        'drives': 'drives'
    }

    def __init__(self, name=None, storage_policy_type=None, drives=None, _configuration=None):  # noqa: E501
        """AddStoragePolicyToVpsaObjectStorage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._storage_policy_type = None
        self._drives = None
        self.discriminator = None

        self.name = name
        self.storage_policy_type = storage_policy_type
        self.drives = drives

    @property
    def name(self):
        """Gets the name of this AddStoragePolicyToVpsaObjectStorage.  # noqa: E501

        Storage Policy Name.  # noqa: E501

        :return: The name of this AddStoragePolicyToVpsaObjectStorage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddStoragePolicyToVpsaObjectStorage.

        Storage Policy Name.  # noqa: E501

        :param name: The name of this AddStoragePolicyToVpsaObjectStorage.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def storage_policy_type(self):
        """Gets the storage_policy_type of this AddStoragePolicyToVpsaObjectStorage.  # noqa: E501

        Storage Policy Type Id.  # noqa: E501

        :return: The storage_policy_type of this AddStoragePolicyToVpsaObjectStorage.  # noqa: E501
        :rtype: int
        """
        return self._storage_policy_type

    @storage_policy_type.setter
    def storage_policy_type(self, storage_policy_type):
        """Sets the storage_policy_type of this AddStoragePolicyToVpsaObjectStorage.

        Storage Policy Type Id.  # noqa: E501

        :param storage_policy_type: The storage_policy_type of this AddStoragePolicyToVpsaObjectStorage.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and storage_policy_type is None:
            raise ValueError("Invalid value for `storage_policy_type`, must not be `None`")  # noqa: E501

        self._storage_policy_type = storage_policy_type

    @property
    def drives(self):
        """Gets the drives of this AddStoragePolicyToVpsaObjectStorage.  # noqa: E501


        :return: The drives of this AddStoragePolicyToVpsaObjectStorage.  # noqa: E501
        :rtype: VpsasvpsaIdstoragePolicyJsonDrives
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this AddStoragePolicyToVpsaObjectStorage.


        :param drives: The drives of this AddStoragePolicyToVpsaObjectStorage.  # noqa: E501
        :type: VpsasvpsaIdstoragePolicyJsonDrives
        """
        if self._configuration.client_side_validation and drives is None:
            raise ValueError("Invalid value for `drives`, must not be `None`")  # noqa: E501

        self._drives = drives

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddStoragePolicyToVpsaObjectStorage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddStoragePolicyToVpsaObjectStorage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddStoragePolicyToVpsaObjectStorage):
            return True

        return self.to_dict() != other.to_dict()
