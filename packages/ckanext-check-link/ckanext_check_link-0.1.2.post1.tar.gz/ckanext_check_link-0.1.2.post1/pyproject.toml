[build-system]
requires = [ "setuptools",]
build-backend = "setuptools.build_meta"

[project]
name = "ckanext-check-link"
version = "0.1.2.post1"
description = "Resource URL checker"
classifiers = [ "Development Status :: 4 - Beta", "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.11",]
keywords = [ "CKAN",]
dependencies = [ "check-link~=0.0.10", "typing-extensions", "ckanext-toolbelt",]
authors = [
    {name = "DataShades", email = "datashades@linkdigital.com.au"},
    {name = "Sergey Motornyuk", email = "sergey.motornyuk@linkdigital.com.au"},
]
maintainers = [
    {name = "DataShades", email = "datashades@linkdigital.com.au"},
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.license]
text = "AGPL"

[project.urls]
Homepage = "https://github.com/DataShades/ckanext-check-link"

[project.optional-dependencies]

[project.entry-points."ckan.plugins"]
check_link = "ckanext.check_link.plugin:CheckLinkPlugin"

[project.entry-points."babel.extractors"]
ckan = "ckan.lib.extract:extract_ckan"

[tool.setuptools.packages]
find = {}

[tool.black]
# line-length = 88
# preview = true

[tool.ruff]
target-version = "py38"
select = [
       # "B",  # likely bugs and design problems
       # "BLE",  # do not catch blind exception
       # "C40",  # better list/set/dict comprehensions
       # "C90",  # check McCabe complexity
       # "COM",  # trailing commas
       "E",  # pycodestyle error
       # "W",  # pycodestyle warning
       "F",  # pyflakes
       # "G",  # format strings for logging statements
       # "N",  # naming conventions
       # "PL",  # pylint
       # "PT",  # pytest style
       # "PIE",  # misc lints
       # "Q",  # preferred quoting style
       # "RET",  # improvements for return statements
       # "RSE",  # improvements for rise statements
       # "S",  # security testing
       # "SIM",  # simplify code
       # "T10",  # debugging statements
       # "T20",  # print statements
       # "TID",  # tidier imports
       # "TRY",  # better exceptions
       # "UP",  # upgrade syntax for newer versions of the language
]
ignore = [
       # "PT004", # fixture does not return anything, add leading underscore: violated by clean_db
       # "PLC1901", # simplify comparison to empty string: violated by SQLAlchemy filters
       "E712", # SQLAlchemy comparision to False
]

[tool.ruff.per-file-ignores]
"ckanext/check-link/tests*" = [
                         "S",  # security testing
                         "PLR2004" # magic value used in comparison
]

[tool.isort]
known_ckan = "ckan"
known_ckanext = "ckanext"
known_self = "ckanext.check-link"
sections = "FUTURE,STDLIB,FIRSTPARTY,THIRDPARTY,CKAN,CKANEXT,SELF,LOCALFOLDER"
profile = "black"

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "--ckan-ini test.ini"
filterwarnings = [
               "ignore::sqlalchemy.exc.SADeprecationWarning",
               "ignore::sqlalchemy.exc.SAWarning",
               "ignore::DeprecationWarning",
]

[tool.pyright]
pythonVersion = "3.8"
include = ["ckanext"]
exclude = [
    "**/test*",
    "**/migration",
]
strict = []

strictParameterNoneValue = true

# Check the meaning of rules here
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
reportFunctionMemberAccess = true # non-standard member accesses for functions
reportMissingImports = true
reportMissingModuleSource = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false # Context won't work with this rule
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true
reportUntypedFunctionDecorator = false
reportUnknownParameterType = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnknownVariableType = true
reportUntypedBaseClass = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportUnusedCallResult = false # allow function calls for side-effect only
useLibraryCodeForTypes = true
reportGeneralTypeIssues = true
reportPropertyTypeMismatch = true
reportWildcardImportFromLibrary = true
reportUntypedClassDecorator = false
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportPrivateImportUsage = true
reportInconsistentConstructor = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportMissingParameterType = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.0.1"
tag_format = "v$version"
version_files = ["setup.cfg:version", "setup.py:version"]
major_version_zero = true
changelog_incremental = true
