# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class RemoteVpsaFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wan_optimization': 'str',
        'manual_snaps': 'str',
        'reconnect_policies': 'str',
        'archival_pool': 'str',
        'remote_clone': 'str',
        'inherit_src_id': 'str',
        'four_mb_chunk_size': 'str',
        'extended_xcopy': 'str',
        'afa': 'str'
    }

    attribute_map = {
        'wan_optimization': 'wan_optimization',
        'manual_snaps': 'manual_snaps',
        'reconnect_policies': 'reconnect_policies',
        'archival_pool': 'archival_pool',
        'remote_clone': 'remote_clone',
        'inherit_src_id': 'inherit_src_id',
        'four_mb_chunk_size': 'four_mb_chunk_size',
        'extended_xcopy': 'extended_xcopy',
        'afa': 'afa'
    }

    def __init__(self, wan_optimization=None, manual_snaps=None, reconnect_policies=None, archival_pool=None, remote_clone=None, inherit_src_id=None, four_mb_chunk_size=None, extended_xcopy=None, afa=None, _configuration=None):  # noqa: E501
        """RemoteVpsaFeatures - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._wan_optimization = None
        self._manual_snaps = None
        self._reconnect_policies = None
        self._archival_pool = None
        self._remote_clone = None
        self._inherit_src_id = None
        self._four_mb_chunk_size = None
        self._extended_xcopy = None
        self._afa = None
        self.discriminator = None

        if wan_optimization is not None:
            self.wan_optimization = wan_optimization
        if manual_snaps is not None:
            self.manual_snaps = manual_snaps
        if reconnect_policies is not None:
            self.reconnect_policies = reconnect_policies
        if archival_pool is not None:
            self.archival_pool = archival_pool
        if remote_clone is not None:
            self.remote_clone = remote_clone
        if inherit_src_id is not None:
            self.inherit_src_id = inherit_src_id
        if four_mb_chunk_size is not None:
            self.four_mb_chunk_size = four_mb_chunk_size
        if extended_xcopy is not None:
            self.extended_xcopy = extended_xcopy
        if afa is not None:
            self.afa = afa

    @property
    def wan_optimization(self):
        """Gets the wan_optimization of this RemoteVpsaFeatures.  # noqa: E501


        :return: The wan_optimization of this RemoteVpsaFeatures.  # noqa: E501
        :rtype: str
        """
        return self._wan_optimization

    @wan_optimization.setter
    def wan_optimization(self, wan_optimization):
        """Sets the wan_optimization of this RemoteVpsaFeatures.


        :param wan_optimization: The wan_optimization of this RemoteVpsaFeatures.  # noqa: E501
        :type: str
        """

        self._wan_optimization = wan_optimization

    @property
    def manual_snaps(self):
        """Gets the manual_snaps of this RemoteVpsaFeatures.  # noqa: E501


        :return: The manual_snaps of this RemoteVpsaFeatures.  # noqa: E501
        :rtype: str
        """
        return self._manual_snaps

    @manual_snaps.setter
    def manual_snaps(self, manual_snaps):
        """Sets the manual_snaps of this RemoteVpsaFeatures.


        :param manual_snaps: The manual_snaps of this RemoteVpsaFeatures.  # noqa: E501
        :type: str
        """

        self._manual_snaps = manual_snaps

    @property
    def reconnect_policies(self):
        """Gets the reconnect_policies of this RemoteVpsaFeatures.  # noqa: E501


        :return: The reconnect_policies of this RemoteVpsaFeatures.  # noqa: E501
        :rtype: str
        """
        return self._reconnect_policies

    @reconnect_policies.setter
    def reconnect_policies(self, reconnect_policies):
        """Sets the reconnect_policies of this RemoteVpsaFeatures.


        :param reconnect_policies: The reconnect_policies of this RemoteVpsaFeatures.  # noqa: E501
        :type: str
        """

        self._reconnect_policies = reconnect_policies

    @property
    def archival_pool(self):
        """Gets the archival_pool of this RemoteVpsaFeatures.  # noqa: E501


        :return: The archival_pool of this RemoteVpsaFeatures.  # noqa: E501
        :rtype: str
        """
        return self._archival_pool

    @archival_pool.setter
    def archival_pool(self, archival_pool):
        """Sets the archival_pool of this RemoteVpsaFeatures.


        :param archival_pool: The archival_pool of this RemoteVpsaFeatures.  # noqa: E501
        :type: str
        """

        self._archival_pool = archival_pool

    @property
    def remote_clone(self):
        """Gets the remote_clone of this RemoteVpsaFeatures.  # noqa: E501


        :return: The remote_clone of this RemoteVpsaFeatures.  # noqa: E501
        :rtype: str
        """
        return self._remote_clone

    @remote_clone.setter
    def remote_clone(self, remote_clone):
        """Sets the remote_clone of this RemoteVpsaFeatures.


        :param remote_clone: The remote_clone of this RemoteVpsaFeatures.  # noqa: E501
        :type: str
        """

        self._remote_clone = remote_clone

    @property
    def inherit_src_id(self):
        """Gets the inherit_src_id of this RemoteVpsaFeatures.  # noqa: E501


        :return: The inherit_src_id of this RemoteVpsaFeatures.  # noqa: E501
        :rtype: str
        """
        return self._inherit_src_id

    @inherit_src_id.setter
    def inherit_src_id(self, inherit_src_id):
        """Sets the inherit_src_id of this RemoteVpsaFeatures.


        :param inherit_src_id: The inherit_src_id of this RemoteVpsaFeatures.  # noqa: E501
        :type: str
        """

        self._inherit_src_id = inherit_src_id

    @property
    def four_mb_chunk_size(self):
        """Gets the four_mb_chunk_size of this RemoteVpsaFeatures.  # noqa: E501


        :return: The four_mb_chunk_size of this RemoteVpsaFeatures.  # noqa: E501
        :rtype: str
        """
        return self._four_mb_chunk_size

    @four_mb_chunk_size.setter
    def four_mb_chunk_size(self, four_mb_chunk_size):
        """Sets the four_mb_chunk_size of this RemoteVpsaFeatures.


        :param four_mb_chunk_size: The four_mb_chunk_size of this RemoteVpsaFeatures.  # noqa: E501
        :type: str
        """

        self._four_mb_chunk_size = four_mb_chunk_size

    @property
    def extended_xcopy(self):
        """Gets the extended_xcopy of this RemoteVpsaFeatures.  # noqa: E501


        :return: The extended_xcopy of this RemoteVpsaFeatures.  # noqa: E501
        :rtype: str
        """
        return self._extended_xcopy

    @extended_xcopy.setter
    def extended_xcopy(self, extended_xcopy):
        """Sets the extended_xcopy of this RemoteVpsaFeatures.


        :param extended_xcopy: The extended_xcopy of this RemoteVpsaFeatures.  # noqa: E501
        :type: str
        """

        self._extended_xcopy = extended_xcopy

    @property
    def afa(self):
        """Gets the afa of this RemoteVpsaFeatures.  # noqa: E501


        :return: The afa of this RemoteVpsaFeatures.  # noqa: E501
        :rtype: str
        """
        return self._afa

    @afa.setter
    def afa(self, afa):
        """Sets the afa of this RemoteVpsaFeatures.


        :param afa: The afa of this RemoteVpsaFeatures.  # noqa: E501
        :type: str
        """

        self._afa = afa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteVpsaFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteVpsaFeatures):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RemoteVpsaFeatures):
            return True

        return self.to_dict() != other.to_dict()
