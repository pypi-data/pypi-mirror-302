# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class EditActiveDirectory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'realm_kdc_servers': 'list[str]',
        'dns': 'str',
        'dns_lookup_realm': 'str',
        'dns_lookup_kdc': 'str',
        'add_to_ignored_domains': 'list[str]',
        'remove_from_ignored_domains': 'list[str]'
    }

    attribute_map = {
        'realm_kdc_servers': 'realm_kdc_servers',
        'dns': 'dns',
        'dns_lookup_realm': 'dns_lookup_realm',
        'dns_lookup_kdc': 'dns_lookup_kdc',
        'add_to_ignored_domains': 'add_to_ignored_domains',
        'remove_from_ignored_domains': 'remove_from_ignored_domains'
    }

    def __init__(self, realm_kdc_servers=None, dns=None, dns_lookup_realm=None, dns_lookup_kdc=None, add_to_ignored_domains=None, remove_from_ignored_domains=None, _configuration=None):  # noqa: E501
        """EditActiveDirectory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._realm_kdc_servers = None
        self._dns = None
        self._dns_lookup_realm = None
        self._dns_lookup_kdc = None
        self._add_to_ignored_domains = None
        self._remove_from_ignored_domains = None
        self.discriminator = None

        if realm_kdc_servers is not None:
            self.realm_kdc_servers = realm_kdc_servers
        self.dns = dns
        if dns_lookup_realm is not None:
            self.dns_lookup_realm = dns_lookup_realm
        if dns_lookup_kdc is not None:
            self.dns_lookup_kdc = dns_lookup_kdc
        if add_to_ignored_domains is not None:
            self.add_to_ignored_domains = add_to_ignored_domains
        if remove_from_ignored_domains is not None:
            self.remove_from_ignored_domains = remove_from_ignored_domains

    @property
    def realm_kdc_servers(self):
        """Gets the realm_kdc_servers of this EditActiveDirectory.  # noqa: E501

        Set realm kdc servers  # noqa: E501

        :return: The realm_kdc_servers of this EditActiveDirectory.  # noqa: E501
        :rtype: list[str]
        """
        return self._realm_kdc_servers

    @realm_kdc_servers.setter
    def realm_kdc_servers(self, realm_kdc_servers):
        """Sets the realm_kdc_servers of this EditActiveDirectory.

        Set realm kdc servers  # noqa: E501

        :param realm_kdc_servers: The realm_kdc_servers of this EditActiveDirectory.  # noqa: E501
        :type: list[str]
        """

        self._realm_kdc_servers = realm_kdc_servers

    @property
    def dns(self):
        """Gets the dns of this EditActiveDirectory.  # noqa: E501

        The DNS IP(s). (use array to pass multiple)  # noqa: E501

        :return: The dns of this EditActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this EditActiveDirectory.

        The DNS IP(s). (use array to pass multiple)  # noqa: E501

        :param dns: The dns of this EditActiveDirectory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and dns is None:
            raise ValueError("Invalid value for `dns`, must not be `None`")  # noqa: E501

        self._dns = dns

    @property
    def dns_lookup_realm(self):
        """Gets the dns_lookup_realm of this EditActiveDirectory.  # noqa: E501

        Set auto realm lookup  # noqa: E501

        :return: The dns_lookup_realm of this EditActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._dns_lookup_realm

    @dns_lookup_realm.setter
    def dns_lookup_realm(self, dns_lookup_realm):
        """Sets the dns_lookup_realm of this EditActiveDirectory.

        Set auto realm lookup  # noqa: E501

        :param dns_lookup_realm: The dns_lookup_realm of this EditActiveDirectory.  # noqa: E501
        :type: str
        """

        self._dns_lookup_realm = dns_lookup_realm

    @property
    def dns_lookup_kdc(self):
        """Gets the dns_lookup_kdc of this EditActiveDirectory.  # noqa: E501

        Set auto realm kdc lookup  # noqa: E501

        :return: The dns_lookup_kdc of this EditActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._dns_lookup_kdc

    @dns_lookup_kdc.setter
    def dns_lookup_kdc(self, dns_lookup_kdc):
        """Sets the dns_lookup_kdc of this EditActiveDirectory.

        Set auto realm kdc lookup  # noqa: E501

        :param dns_lookup_kdc: The dns_lookup_kdc of this EditActiveDirectory.  # noqa: E501
        :type: str
        """

        self._dns_lookup_kdc = dns_lookup_kdc

    @property
    def add_to_ignored_domains(self):
        """Gets the add_to_ignored_domains of this EditActiveDirectory.  # noqa: E501

        Add domains to ignored domains. domain NetBIOS name should be used as input.  # noqa: E501

        :return: The add_to_ignored_domains of this EditActiveDirectory.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_to_ignored_domains

    @add_to_ignored_domains.setter
    def add_to_ignored_domains(self, add_to_ignored_domains):
        """Sets the add_to_ignored_domains of this EditActiveDirectory.

        Add domains to ignored domains. domain NetBIOS name should be used as input.  # noqa: E501

        :param add_to_ignored_domains: The add_to_ignored_domains of this EditActiveDirectory.  # noqa: E501
        :type: list[str]
        """

        self._add_to_ignored_domains = add_to_ignored_domains

    @property
    def remove_from_ignored_domains(self):
        """Gets the remove_from_ignored_domains of this EditActiveDirectory.  # noqa: E501

        Remove domains from ignored domains. domain NetBIOS name should be used as input.  # noqa: E501

        :return: The remove_from_ignored_domains of this EditActiveDirectory.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_from_ignored_domains

    @remove_from_ignored_domains.setter
    def remove_from_ignored_domains(self, remove_from_ignored_domains):
        """Sets the remove_from_ignored_domains of this EditActiveDirectory.

        Remove domains from ignored domains. domain NetBIOS name should be used as input.  # noqa: E501

        :param remove_from_ignored_domains: The remove_from_ignored_domains of this EditActiveDirectory.  # noqa: E501
        :type: list[str]
        """

        self._remove_from_ignored_domains = remove_from_ignored_domains

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditActiveDirectory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditActiveDirectory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EditActiveDirectory):
            return True

        return self.to_dict() != other.to_dict()
