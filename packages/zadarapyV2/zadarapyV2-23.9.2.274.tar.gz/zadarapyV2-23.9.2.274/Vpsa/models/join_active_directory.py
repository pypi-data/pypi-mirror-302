# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class JoinActiveDirectory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'force': 'str',
        'username': 'str',
        'adserver': 'str',
        'password': 'str',
        'realm': 'str',
        'workgroup': 'str',
        'dns': 'str',
        'uid_range_low': 'str',
        'uid_range_high': 'str'
    }

    attribute_map = {
        'force': 'force',
        'username': 'username',
        'adserver': 'adserver',
        'password': 'password',
        'realm': 'realm',
        'workgroup': 'workgroup',
        'dns': 'dns',
        'uid_range_low': 'uid_range_low',
        'uid_range_high': 'uid_range_high'
    }

    def __init__(self, force=None, username=None, adserver=None, password=None, realm=None, workgroup=None, dns=None, uid_range_low=None, uid_range_high=None, _configuration=None):  # noqa: E501
        """JoinActiveDirectory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._force = None
        self._username = None
        self._adserver = None
        self._password = None
        self._realm = None
        self._workgroup = None
        self._dns = None
        self._uid_range_low = None
        self._uid_range_high = None
        self.discriminator = None

        if force is not None:
            self.force = force
        self.username = username
        if adserver is not None:
            self.adserver = adserver
        self.password = password
        self.realm = realm
        self.workgroup = workgroup
        self.dns = dns
        if uid_range_low is not None:
            self.uid_range_low = uid_range_low
        if uid_range_high is not None:
            self.uid_range_high = uid_range_high

    @property
    def force(self):
        """Gets the force of this JoinActiveDirectory.  # noqa: E501

        Force Active Directory Domain join  # noqa: E501

        :return: The force of this JoinActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this JoinActiveDirectory.

        Force Active Directory Domain join  # noqa: E501

        :param force: The force of this JoinActiveDirectory.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                force not in allowed_values):
            raise ValueError(
                "Invalid value for `force` ({0}), must be one of {1}"  # noqa: E501
                .format(force, allowed_values)
            )

        self._force = force

    @property
    def username(self):
        """Gets the username of this JoinActiveDirectory.  # noqa: E501

        The domain user name  # noqa: E501

        :return: The username of this JoinActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this JoinActiveDirectory.

        The domain user name  # noqa: E501

        :param username: The username of this JoinActiveDirectory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def adserver(self):
        """Gets the adserver of this JoinActiveDirectory.  # noqa: E501


        :return: The adserver of this JoinActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._adserver

    @adserver.setter
    def adserver(self, adserver):
        """Sets the adserver of this JoinActiveDirectory.


        :param adserver: The adserver of this JoinActiveDirectory.  # noqa: E501
        :type: str
        """

        self._adserver = adserver

    @property
    def password(self):
        """Gets the password of this JoinActiveDirectory.  # noqa: E501

        The domain user name  # noqa: E501

        :return: The password of this JoinActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this JoinActiveDirectory.

        The domain user name  # noqa: E501

        :param password: The password of this JoinActiveDirectory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def realm(self):
        """Gets the realm of this JoinActiveDirectory.  # noqa: E501

        The domain name.  # noqa: E501

        :return: The realm of this JoinActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this JoinActiveDirectory.

        The domain name.  # noqa: E501

        :param realm: The realm of this JoinActiveDirectory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and realm is None:
            raise ValueError("Invalid value for `realm`, must not be `None`")  # noqa: E501

        self._realm = realm

    @property
    def workgroup(self):
        """Gets the workgroup of this JoinActiveDirectory.  # noqa: E501

        The domain NetBIOS name.  # noqa: E501

        :return: The workgroup of this JoinActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._workgroup

    @workgroup.setter
    def workgroup(self, workgroup):
        """Sets the workgroup of this JoinActiveDirectory.

        The domain NetBIOS name.  # noqa: E501

        :param workgroup: The workgroup of this JoinActiveDirectory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and workgroup is None:
            raise ValueError("Invalid value for `workgroup`, must not be `None`")  # noqa: E501

        self._workgroup = workgroup

    @property
    def dns(self):
        """Gets the dns of this JoinActiveDirectory.  # noqa: E501

        The DNS IP(s). (use array to pass multiple)  # noqa: E501

        :return: The dns of this JoinActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this JoinActiveDirectory.

        The DNS IP(s). (use array to pass multiple)  # noqa: E501

        :param dns: The dns of this JoinActiveDirectory.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and dns is None:
            raise ValueError("Invalid value for `dns`, must not be `None`")  # noqa: E501

        self._dns = dns

    @property
    def uid_range_low(self):
        """Gets the uid_range_low of this JoinActiveDirectory.  # noqa: E501


        :return: The uid_range_low of this JoinActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._uid_range_low

    @uid_range_low.setter
    def uid_range_low(self, uid_range_low):
        """Sets the uid_range_low of this JoinActiveDirectory.


        :param uid_range_low: The uid_range_low of this JoinActiveDirectory.  # noqa: E501
        :type: str
        """

        self._uid_range_low = uid_range_low

    @property
    def uid_range_high(self):
        """Gets the uid_range_high of this JoinActiveDirectory.  # noqa: E501


        :return: The uid_range_high of this JoinActiveDirectory.  # noqa: E501
        :rtype: str
        """
        return self._uid_range_high

    @uid_range_high.setter
    def uid_range_high(self, uid_range_high):
        """Sets the uid_range_high of this JoinActiveDirectory.


        :param uid_range_high: The uid_range_high of this JoinActiveDirectory.  # noqa: E501
        :type: str
        """

        self._uid_range_high = uid_range_high

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JoinActiveDirectory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JoinActiveDirectory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JoinActiveDirectory):
            return True

        return self.to_dict() != other.to_dict()
