import numpy as np
from ._asm import NSQCommand, QInsEnvelope, QInsFrame
from typing import Iterable, TypeVar

__all__ = ['Frame', 'Envelope', 'Int', 'Var', 'wait_for_trigger', 'ins_envelope', 'ins_frame', 'evlp_gaussian', 'evlp_square', 'evlp_cospulse', 'inc_phase', 'inc_frequency', 'reset_frame', 'play_wave', 'wait', 'capture']

Frame = TypeVar('Frame', bound=QInsFrame)
Envelope = TypeVar('Envelope', bound=QInsEnvelope)
Placeholder = TypeVar('Placeholder', bound=NSQCommand)
Var = TypeVar('Var')
Int = TypeVar('Int')
Uint = TypeVar('Uint')
Float = TypeVar('Float')

def ins_frame(freq: float, phase: float, *, idx: int = None) -> QInsFrame: ...
def ins_envelope(envelope: np.ndarray) -> QInsEnvelope: ...
def evlp_gaussian(width: float, srate: float = 8000000000.0) -> QInsEnvelope: ...
def evlp_cospulse(width: float, srate: float = 8000000000.0) -> QInsEnvelope: ...
def evlp_square(width: float, srate: float = 8000000000.0) -> QInsEnvelope: ...
def reset_frame(frame_list: Iterable[Frame] = ...) -> Placeholder: ...
def wait_for_trigger() -> Placeholder: ...
def inc_phase(frame_list: Iterable[Frame], phase: float) -> Placeholder: ...
def inc_frequency(frame_list: Iterable[Frame], freq: float) -> Placeholder: ...
def play_wave(envelope: QInsEnvelope, frame: QInsFrame, amp: int = 1, freq: int = 0, phase: int = 0) -> Placeholder: ...
def wait(width) -> Placeholder: ...
def capture(freq_list, acq_width: float, delay_width: float, play_width: float, raw_data_store: bool, iq_data_store: bool, judge_data_store: bool, double_fre_mode: bool) -> Int: ...
