# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse20088Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'status': 'int',
        'count': 'int',
        'min_resync_speed_default': 'int',
        'max_resync_speed_default': 'int',
        'raid_groups': 'list[InlineResponse20088ResponseRaidGroups]'
    }

    attribute_map = {
        'message': 'message',
        'status': 'status',
        'count': 'count',
        'min_resync_speed_default': 'min_resync_speed_default',
        'max_resync_speed_default': 'max_resync_speed_default',
        'raid_groups': 'raid_groups'
    }

    def __init__(self, message=None, status=None, count=None, min_resync_speed_default=None, max_resync_speed_default=None, raid_groups=None, _configuration=None):  # noqa: E501
        """InlineResponse20088Response - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._status = None
        self._count = None
        self._min_resync_speed_default = None
        self._max_resync_speed_default = None
        self._raid_groups = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if status is not None:
            self.status = status
        if count is not None:
            self.count = count
        if min_resync_speed_default is not None:
            self.min_resync_speed_default = min_resync_speed_default
        if max_resync_speed_default is not None:
            self.max_resync_speed_default = max_resync_speed_default
        if raid_groups is not None:
            self.raid_groups = raid_groups

    @property
    def message(self):
        """Gets the message of this InlineResponse20088Response.  # noqa: E501


        :return: The message of this InlineResponse20088Response.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse20088Response.


        :param message: The message of this InlineResponse20088Response.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this InlineResponse20088Response.  # noqa: E501


        :return: The status of this InlineResponse20088Response.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20088Response.


        :param status: The status of this InlineResponse20088Response.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def count(self):
        """Gets the count of this InlineResponse20088Response.  # noqa: E501


        :return: The count of this InlineResponse20088Response.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InlineResponse20088Response.


        :param count: The count of this InlineResponse20088Response.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def min_resync_speed_default(self):
        """Gets the min_resync_speed_default of this InlineResponse20088Response.  # noqa: E501


        :return: The min_resync_speed_default of this InlineResponse20088Response.  # noqa: E501
        :rtype: int
        """
        return self._min_resync_speed_default

    @min_resync_speed_default.setter
    def min_resync_speed_default(self, min_resync_speed_default):
        """Sets the min_resync_speed_default of this InlineResponse20088Response.


        :param min_resync_speed_default: The min_resync_speed_default of this InlineResponse20088Response.  # noqa: E501
        :type: int
        """

        self._min_resync_speed_default = min_resync_speed_default

    @property
    def max_resync_speed_default(self):
        """Gets the max_resync_speed_default of this InlineResponse20088Response.  # noqa: E501


        :return: The max_resync_speed_default of this InlineResponse20088Response.  # noqa: E501
        :rtype: int
        """
        return self._max_resync_speed_default

    @max_resync_speed_default.setter
    def max_resync_speed_default(self, max_resync_speed_default):
        """Sets the max_resync_speed_default of this InlineResponse20088Response.


        :param max_resync_speed_default: The max_resync_speed_default of this InlineResponse20088Response.  # noqa: E501
        :type: int
        """

        self._max_resync_speed_default = max_resync_speed_default

    @property
    def raid_groups(self):
        """Gets the raid_groups of this InlineResponse20088Response.  # noqa: E501


        :return: The raid_groups of this InlineResponse20088Response.  # noqa: E501
        :rtype: list[InlineResponse20088ResponseRaidGroups]
        """
        return self._raid_groups

    @raid_groups.setter
    def raid_groups(self, raid_groups):
        """Sets the raid_groups of this InlineResponse20088Response.


        :param raid_groups: The raid_groups of this InlineResponse20088Response.  # noqa: E501
        :type: list[InlineResponse20088ResponseRaidGroups]
        """

        self._raid_groups = raid_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20088Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20088Response):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20088Response):
            return True

        return self.to_dict() != other.to_dict()
