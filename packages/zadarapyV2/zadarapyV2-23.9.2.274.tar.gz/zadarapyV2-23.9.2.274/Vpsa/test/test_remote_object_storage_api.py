# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import Vpsa
from Vpsa.api.remote_object_storage_api import RemoteObjectStorageApi  # noqa: E501
from Vpsa.rest import ApiException


class TestRemoteObjectStorageApi(unittest.TestCase):
    """RemoteObjectStorageApi unit test stubs"""

    def setUp(self):
        self.api = Vpsa.api.remote_object_storage_api.RemoteObjectStorageApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_backup_jobs_rate_limit(self):
        """Test case for backup_jobs_rate_limit

        """
        pass

    def test_backup_jobs_update_compression(self):
        """Test case for backup_jobs_update_compression

        """
        pass

    def test_break_ros_backup_job(self):
        """Test case for break_ros_backup_job

        """
        pass

    def test_break_ros_restore_job(self):
        """Test case for break_ros_restore_job

        """
        pass

    def test_change_ros_restore_job_mode(self):
        """Test case for change_ros_restore_job_mode

        """
        pass

    def test_create_ros_backup_job(self):
        """Test case for create_ros_backup_job

        """
        pass

    def test_create_ros_destination(self):
        """Test case for create_ros_destination

        """
        pass

    def test_create_ros_restore_job(self):
        """Test case for create_ros_restore_job

        """
        pass

    def test_get_all_ros_backup_jobs(self):
        """Test case for get_all_ros_backup_jobs

        """
        pass

    def test_get_all_ros_destination_backup_jobs(self):
        """Test case for get_all_ros_destination_backup_jobs

        """
        pass

    def test_get_all_ros_destination_restore_jobs(self):
        """Test case for get_all_ros_destination_restore_jobs

        """
        pass

    def test_get_all_ros_destinations(self):
        """Test case for get_all_ros_destinations

        """
        pass

    def test_get_all_ros_restore_jobs(self):
        """Test case for get_all_ros_restore_jobs

        """
        pass

    def test_get_ros_backup_job(self):
        """Test case for get_ros_backup_job

        """
        pass

    def test_get_ros_backup_job_performance(self):
        """Test case for get_ros_backup_job_performance

        """
        pass

    def test_get_ros_destination(self):
        """Test case for get_ros_destination

        """
        pass

    def test_get_ros_restore_job(self):
        """Test case for get_ros_restore_job

        """
        pass

    def test_get_ros_restore_job_performance(self):
        """Test case for get_ros_restore_job_performance

        """
        pass

    def test_pause_ros_backup_job(self):
        """Test case for pause_ros_backup_job

        """
        pass

    def test_pause_ros_restore_job(self):
        """Test case for pause_ros_restore_job

        """
        pass

    def test_remove_ros_destination(self):
        """Test case for remove_ros_destination

        """
        pass

    def test_replace_ros_backup_job_snapshot_policy(self):
        """Test case for replace_ros_backup_job_snapshot_policy

        """
        pass

    def test_resume_ros_backup_job(self):
        """Test case for resume_ros_backup_job

        """
        pass

    def test_resume_ros_restore_job(self):
        """Test case for resume_ros_restore_job

        """
        pass

    def test_set_obs_backup_job_class(self):
        """Test case for set_obs_backup_job_class

        """
        pass

    def test_update_ros_destination(self):
        """Test case for update_ros_destination

        """
        pass


if __name__ == '__main__':
    unittest.main()
