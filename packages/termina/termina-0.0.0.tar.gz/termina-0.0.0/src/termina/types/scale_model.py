# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .band_response import BandResponse


class ScaleModel(pydantic_v1.BaseModel):
    raw_data: typing.List[typing.Dict[str, float]] = pydantic_v1.Field()
    """
    Raw data points used to generate the scaling model. Dictionary of the two metrics, x then y.
    """

    pred: typing.List[typing.Dict[str, float]] = pydantic_v1.Field()
    """
    Predicted center trend line of the scaling model. Dictioary of the two metrics, x then y.
    """

    bands: typing.List[BandResponse] = pydantic_v1.Field()
    """
    Bands representing the range of the scaling model.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
