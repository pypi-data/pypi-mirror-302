# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class EditComment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'severity': 'str',
        'pin_to_dashboard': 'bool'
    }

    attribute_map = {
        'content': 'content',
        'severity': 'severity',
        'pin_to_dashboard': 'pin_to_dashboard'
    }

    def __init__(self, content=None, severity=None, pin_to_dashboard=None, _configuration=None):  # noqa: E501
        """EditComment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._content = None
        self._severity = None
        self._pin_to_dashboard = None
        self.discriminator = None

        if content is not None:
            self.content = content
        if severity is not None:
            self.severity = severity
        if pin_to_dashboard is not None:
            self.pin_to_dashboard = pin_to_dashboard

    @property
    def content(self):
        """Gets the content of this EditComment.  # noqa: E501


        :return: The content of this EditComment.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this EditComment.


        :param content: The content of this EditComment.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def severity(self):
        """Gets the severity of this EditComment.  # noqa: E501


        :return: The severity of this EditComment.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EditComment.


        :param severity: The severity of this EditComment.  # noqa: E501
        :type: str
        """
        allowed_values = ["low", "medium", "high", "critical"]  # noqa: E501
        if (self._configuration.client_side_validation and
                severity not in allowed_values):
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def pin_to_dashboard(self):
        """Gets the pin_to_dashboard of this EditComment.  # noqa: E501

        Pin comment to dashboard. Cloud type comment is automatically pinned to dashboard.  # noqa: E501

        :return: The pin_to_dashboard of this EditComment.  # noqa: E501
        :rtype: bool
        """
        return self._pin_to_dashboard

    @pin_to_dashboard.setter
    def pin_to_dashboard(self, pin_to_dashboard):
        """Sets the pin_to_dashboard of this EditComment.

        Pin comment to dashboard. Cloud type comment is automatically pinned to dashboard.  # noqa: E501

        :param pin_to_dashboard: The pin_to_dashboard of this EditComment.  # noqa: E501
        :type: bool
        """

        self._pin_to_dashboard = pin_to_dashboard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditComment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditComment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EditComment):
            return True

        return self.to_dict() != other.to_dict()
