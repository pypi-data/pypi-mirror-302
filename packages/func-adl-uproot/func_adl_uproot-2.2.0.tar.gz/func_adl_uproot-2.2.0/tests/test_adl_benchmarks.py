import numpy as np

from func_adl_uproot import UprootDataset


ds = UprootDataset('tests/Run2012B_SingleMu_1000.root', 'Events')

expected_1 = np.array(
    [
        [0.00e00, 2.00e01, 3.46e02],
        [2.00e01, 4.00e01, 4.27e02],
        [4.00e01, 6.00e01, 1.96e02],
        [6.00e01, 8.00e01, 2.50e01],
        [8.00e01, 1.00e02, 1.00e00],
        [1.00e02, 1.20e02, 4.00e00],
        [1.20e02, 1.40e02, 1.00e00],
        [1.40e02, 1.60e02, 0.00e00],
        [1.60e02, 1.80e02, 0.00e00],
        [1.80e02, 2.00e02, 0.00e00],
        [2.00e02, 2.20e02, 0.00e00],
        [2.20e02, 2.40e02, 0.00e00],
        [2.40e02, 2.60e02, 0.00e00],
        [2.60e02, 2.80e02, 0.00e00],
        [2.80e02, 3.00e02, 0.00e00],
        [3.00e02, 3.20e02, 0.00e00],
        [3.20e02, 3.40e02, 0.00e00],
        [3.40e02, 3.60e02, 0.00e00],
        [3.60e02, 3.80e02, 0.00e00],
        [3.80e02, 4.00e02, 0.00e00],
        [4.00e02, 4.20e02, 0.00e00],
        [4.20e02, 4.40e02, 0.00e00],
        [4.40e02, 4.60e02, 0.00e00],
        [4.60e02, 4.80e02, 0.00e00],
        [4.80e02, 5.00e02, 0.00e00],
        [5.00e02, 5.20e02, 0.00e00],
        [5.20e02, 5.40e02, 0.00e00],
        [5.40e02, 5.60e02, 0.00e00],
        [5.60e02, 5.80e02, 0.00e00],
        [5.80e02, 6.00e02, 0.00e00],
        [6.00e02, 6.20e02, 0.00e00],
        [6.20e02, 6.40e02, 0.00e00],
        [6.40e02, 6.60e02, 0.00e00],
        [6.60e02, 6.80e02, 0.00e00],
        [6.80e02, 7.00e02, 0.00e00],
        [7.00e02, 7.20e02, 0.00e00],
        [7.20e02, 7.40e02, 0.00e00],
        [7.40e02, 7.60e02, 0.00e00],
        [7.60e02, 7.80e02, 0.00e00],
        [7.80e02, 8.00e02, 0.00e00],
        [8.00e02, 8.20e02, 0.00e00],
        [8.20e02, 8.40e02, 0.00e00],
        [8.40e02, 8.60e02, 0.00e00],
        [8.60e02, 8.80e02, 0.00e00],
        [8.80e02, 9.00e02, 0.00e00],
        [9.00e02, 9.20e02, 0.00e00],
        [9.20e02, 9.40e02, 0.00e00],
        [9.40e02, 9.60e02, 0.00e00],
        [9.60e02, 9.80e02, 0.00e00],
        [9.80e02, 1.00e03, 0.00e00],
        [1.00e03, 1.02e03, 0.00e00],
        [1.02e03, 1.04e03, 0.00e00],
        [1.04e03, 1.06e03, 0.00e00],
        [1.06e03, 1.08e03, 0.00e00],
        [1.08e03, 1.10e03, 0.00e00],
        [1.10e03, 1.12e03, 0.00e00],
        [1.12e03, 1.14e03, 0.00e00],
        [1.14e03, 1.16e03, 0.00e00],
        [1.16e03, 1.18e03, 0.00e00],
        [1.18e03, 1.20e03, 0.00e00],
        [1.20e03, 1.22e03, 0.00e00],
        [1.22e03, 1.24e03, 0.00e00],
        [1.24e03, 1.26e03, 0.00e00],
        [1.26e03, 1.28e03, 0.00e00],
        [1.28e03, 1.30e03, 0.00e00],
        [1.30e03, 1.32e03, 0.00e00],
        [1.32e03, 1.34e03, 0.00e00],
        [1.34e03, 1.36e03, 0.00e00],
        [1.36e03, 1.38e03, 0.00e00],
        [1.38e03, 1.40e03, 0.00e00],
        [1.40e03, 1.42e03, 0.00e00],
        [1.42e03, 1.44e03, 0.00e00],
        [1.44e03, 1.46e03, 0.00e00],
        [1.46e03, 1.48e03, 0.00e00],
        [1.48e03, 1.50e03, 0.00e00],
        [1.50e03, 1.52e03, 0.00e00],
        [1.52e03, 1.54e03, 0.00e00],
        [1.54e03, 1.56e03, 0.00e00],
        [1.56e03, 1.58e03, 0.00e00],
        [1.58e03, 1.60e03, 0.00e00],
        [1.60e03, 1.62e03, 0.00e00],
        [1.62e03, 1.64e03, 0.00e00],
        [1.64e03, 1.66e03, 0.00e00],
        [1.66e03, 1.68e03, 0.00e00],
        [1.68e03, 1.70e03, 0.00e00],
        [1.70e03, 1.72e03, 0.00e00],
        [1.72e03, 1.74e03, 0.00e00],
        [1.74e03, 1.76e03, 0.00e00],
        [1.76e03, 1.78e03, 0.00e00],
        [1.78e03, 1.80e03, 0.00e00],
        [1.80e03, 1.82e03, 0.00e00],
        [1.82e03, 1.84e03, 0.00e00],
        [1.84e03, 1.86e03, 0.00e00],
        [1.86e03, 1.88e03, 0.00e00],
        [1.88e03, 1.90e03, 0.00e00],
        [1.90e03, 1.92e03, 0.00e00],
        [1.92e03, 1.94e03, 0.00e00],
        [1.94e03, 1.96e03, 0.00e00],
        [1.96e03, 1.98e03, 0.00e00],
        [1.98e03, 2.00e03, 0.00e00],
    ]
)

expected_2 = np.array(
    [
        [15.0, 15.44999981, 96.0],
        [15.44999981, 15.89999962, 76.0],
        [15.89999962, 16.35000038, 55.0],
        [16.35000038, 16.79999924, 66.0],
        [16.79999924, 17.25, 59.0],
        [17.25, 17.70000076, 52.0],
        [17.70000076, 18.14999962, 39.0],
        [18.14999962, 18.60000038, 59.0],
        [18.60000038, 19.04999924, 44.0],
        [19.04999924, 19.5, 40.0],
        [19.5, 19.95000076, 30.0],
        [19.95000076, 20.39999962, 25.0],
        [20.39999962, 20.85000038, 27.0],
        [20.85000038, 21.29999924, 35.0],
        [21.29999924, 21.75, 28.0],
        [21.75, 22.20000076, 19.0],
        [22.20000076, 22.64999962, 26.0],
        [22.64999962, 23.10000038, 18.0],
        [23.10000038, 23.54999924, 27.0],
        [23.54999924, 24.0, 19.0],
        [24.0, 24.45000076, 16.0],
        [24.45000076, 24.89999962, 20.0],
        [24.89999962, 25.35000038, 23.0],
        [25.35000038, 25.79999924, 17.0],
        [25.79999924, 26.25, 12.0],
        [26.25, 26.70000076, 22.0],
        [26.70000076, 27.14999962, 13.0],
        [27.14999962, 27.60000038, 19.0],
        [27.60000038, 28.04999924, 16.0],
        [28.04999924, 28.5, 14.0],
        [28.5, 28.95000076, 12.0],
        [28.95000076, 29.39999962, 10.0],
        [29.39999962, 29.85000038, 9.0],
        [29.85000038, 30.29999924, 16.0],
        [30.29999924, 30.75, 15.0],
        [30.75, 31.20000076, 13.0],
        [31.20000076, 31.64999962, 16.0],
        [31.64999962, 32.09999847, 12.0],
        [32.09999847, 32.54999924, 9.0],
        [32.54999924, 33.0, 9.0],
        [33.0, 33.45000076, 15.0],
        [33.45000076, 33.90000153, 17.0],
        [33.90000153, 34.34999847, 6.0],
        [34.34999847, 34.79999924, 2.0],
        [34.79999924, 35.25, 7.0],
        [35.25, 35.70000076, 6.0],
        [35.70000076, 36.15000153, 5.0],
        [36.15000153, 36.59999847, 8.0],
        [36.59999847, 37.04999924, 12.0],
        [37.04999924, 37.5, 7.0],
        [37.5, 37.95000076, 8.0],
        [37.95000076, 38.40000153, 9.0],
        [38.40000153, 38.84999847, 9.0],
        [38.84999847, 39.29999924, 6.0],
        [39.29999924, 39.75, 13.0],
        [39.75, 40.20000076, 6.0],
        [40.20000076, 40.65000153, 9.0],
        [40.65000153, 41.09999847, 12.0],
        [41.09999847, 41.54999924, 7.0],
        [41.54999924, 42.0, 2.0],
        [42.0, 42.45000076, 6.0],
        [42.45000076, 42.90000153, 6.0],
        [42.90000153, 43.34999847, 10.0],
        [43.34999847, 43.79999924, 3.0],
        [43.79999924, 44.25, 11.0],
        [44.25, 44.70000076, 3.0],
        [44.70000076, 45.15000153, 6.0],
        [45.15000153, 45.59999847, 5.0],
        [45.59999847, 46.04999924, 5.0],
        [46.04999924, 46.5, 6.0],
        [46.5, 46.95000076, 6.0],
        [46.95000076, 47.40000153, 7.0],
        [47.40000153, 47.84999847, 3.0],
        [47.84999847, 48.29999924, 2.0],
        [48.29999924, 48.75, 5.0],
        [48.75, 49.20000076, 9.0],
        [49.20000076, 49.65000153, 3.0],
        [49.65000153, 50.09999847, 3.0],
        [50.09999847, 50.54999924, 7.0],
        [50.54999924, 51.0, 3.0],
        [51.0, 51.45000076, 8.0],
        [51.45000076, 51.90000153, 7.0],
        [51.90000153, 52.34999847, 5.0],
        [52.34999847, 52.79999924, 5.0],
        [52.79999924, 53.25, 4.0],
        [53.25, 53.70000076, 5.0],
        [53.70000076, 54.15000153, 4.0],
        [54.15000153, 54.59999847, 6.0],
        [54.59999847, 55.04999924, 5.0],
        [55.04999924, 55.5, 1.0],
        [55.5, 55.95000076, 4.0],
        [55.95000076, 56.40000153, 3.0],
        [56.40000153, 56.84999847, 2.0],
        [56.84999847, 57.29999924, 6.0],
        [57.29999924, 57.75, 4.0],
        [57.75, 58.20000076, 4.0],
        [58.20000076, 58.65000153, 1.0],
        [58.65000153, 59.09999847, 3.0],
        [59.09999847, 59.54999924, 2.0],
        [59.54999924, 60.0, 4.0],
    ]
)

expected_3 = np.array(
    [
        [15.0, 15.44999981, 24.0],
        [15.44999981, 15.89999962, 19.0],
        [15.89999962, 16.35000038, 20.0],
        [16.35000038, 16.79999924, 20.0],
        [16.79999924, 17.25, 14.0],
        [17.25, 17.70000076, 19.0],
        [17.70000076, 18.14999962, 6.0],
        [18.14999962, 18.60000038, 19.0],
        [18.60000038, 19.04999924, 11.0],
        [19.04999924, 19.5, 17.0],
        [19.5, 19.95000076, 11.0],
        [19.95000076, 20.39999962, 11.0],
        [20.39999962, 20.85000038, 9.0],
        [20.85000038, 21.29999924, 5.0],
        [21.29999924, 21.75, 10.0],
        [21.75, 22.20000076, 11.0],
        [22.20000076, 22.64999962, 12.0],
        [22.64999962, 23.10000038, 4.0],
        [23.10000038, 23.54999924, 7.0],
        [23.54999924, 24.0, 6.0],
        [24.0, 24.45000076, 6.0],
        [24.45000076, 24.89999962, 9.0],
        [24.89999962, 25.35000038, 5.0],
        [25.35000038, 25.79999924, 8.0],
        [25.79999924, 26.25, 3.0],
        [26.25, 26.70000076, 9.0],
        [26.70000076, 27.14999962, 4.0],
        [27.14999962, 27.60000038, 10.0],
        [27.60000038, 28.04999924, 5.0],
        [28.04999924, 28.5, 6.0],
        [28.5, 28.95000076, 6.0],
        [28.95000076, 29.39999962, 5.0],
        [29.39999962, 29.85000038, 4.0],
        [29.85000038, 30.29999924, 9.0],
        [30.29999924, 30.75, 5.0],
        [30.75, 31.20000076, 2.0],
        [31.20000076, 31.64999962, 11.0],
        [31.64999962, 32.09999847, 8.0],
        [32.09999847, 32.54999924, 2.0],
        [32.54999924, 33.0, 5.0],
        [33.0, 33.45000076, 8.0],
        [33.45000076, 33.90000153, 11.0],
        [33.90000153, 34.34999847, 2.0],
        [34.34999847, 34.79999924, 1.0],
        [34.79999924, 35.25, 2.0],
        [35.25, 35.70000076, 2.0],
        [35.70000076, 36.15000153, 0.0],
        [36.15000153, 36.59999847, 3.0],
        [36.59999847, 37.04999924, 6.0],
        [37.04999924, 37.5, 4.0],
        [37.5, 37.95000076, 2.0],
        [37.95000076, 38.40000153, 2.0],
        [38.40000153, 38.84999847, 6.0],
        [38.84999847, 39.29999924, 2.0],
        [39.29999924, 39.75, 9.0],
        [39.75, 40.20000076, 4.0],
        [40.20000076, 40.65000153, 4.0],
        [40.65000153, 41.09999847, 8.0],
        [41.09999847, 41.54999924, 4.0],
        [41.54999924, 42.0, 1.0],
        [42.0, 42.45000076, 3.0],
        [42.45000076, 42.90000153, 3.0],
        [42.90000153, 43.34999847, 5.0],
        [43.34999847, 43.79999924, 0.0],
        [43.79999924, 44.25, 5.0],
        [44.25, 44.70000076, 2.0],
        [44.70000076, 45.15000153, 2.0],
        [45.15000153, 45.59999847, 2.0],
        [45.59999847, 46.04999924, 3.0],
        [46.04999924, 46.5, 3.0],
        [46.5, 46.95000076, 1.0],
        [46.95000076, 47.40000153, 5.0],
        [47.40000153, 47.84999847, 1.0],
        [47.84999847, 48.29999924, 1.0],
        [48.29999924, 48.75, 1.0],
        [48.75, 49.20000076, 5.0],
        [49.20000076, 49.65000153, 0.0],
        [49.65000153, 50.09999847, 2.0],
        [50.09999847, 50.54999924, 3.0],
        [50.54999924, 51.0, 3.0],
        [51.0, 51.45000076, 3.0],
        [51.45000076, 51.90000153, 6.0],
        [51.90000153, 52.34999847, 3.0],
        [52.34999847, 52.79999924, 3.0],
        [52.79999924, 53.25, 2.0],
        [53.25, 53.70000076, 2.0],
        [53.70000076, 54.15000153, 1.0],
        [54.15000153, 54.59999847, 3.0],
        [54.59999847, 55.04999924, 2.0],
        [55.04999924, 55.5, 1.0],
        [55.5, 55.95000076, 2.0],
        [55.95000076, 56.40000153, 3.0],
        [56.40000153, 56.84999847, 2.0],
        [56.84999847, 57.29999924, 5.0],
        [57.29999924, 57.75, 1.0],
        [57.75, 58.20000076, 2.0],
        [58.20000076, 58.65000153, 1.0],
        [58.65000153, 59.09999847, 3.0],
        [59.09999847, 59.54999924, 1.0],
        [59.54999924, 60.0, 1.0],
    ]
)

expected_4 = np.array(
    [
        [0.00e00, 2.00e01, 3.80e01],
        [2.00e01, 4.00e01, 5.20e01],
        [4.00e01, 6.00e01, 2.20e01],
        [6.00e01, 8.00e01, 1.00e00],
        [8.00e01, 1.00e02, 0.00e00],
        [1.00e02, 1.20e02, 2.00e00],
        [1.20e02, 1.40e02, 1.00e00],
        [1.40e02, 1.60e02, 0.00e00],
        [1.60e02, 1.80e02, 0.00e00],
        [1.80e02, 2.00e02, 0.00e00],
        [2.00e02, 2.20e02, 0.00e00],
        [2.20e02, 2.40e02, 0.00e00],
        [2.40e02, 2.60e02, 0.00e00],
        [2.60e02, 2.80e02, 0.00e00],
        [2.80e02, 3.00e02, 0.00e00],
        [3.00e02, 3.20e02, 0.00e00],
        [3.20e02, 3.40e02, 0.00e00],
        [3.40e02, 3.60e02, 0.00e00],
        [3.60e02, 3.80e02, 0.00e00],
        [3.80e02, 4.00e02, 0.00e00],
        [4.00e02, 4.20e02, 0.00e00],
        [4.20e02, 4.40e02, 0.00e00],
        [4.40e02, 4.60e02, 0.00e00],
        [4.60e02, 4.80e02, 0.00e00],
        [4.80e02, 5.00e02, 0.00e00],
        [5.00e02, 5.20e02, 0.00e00],
        [5.20e02, 5.40e02, 0.00e00],
        [5.40e02, 5.60e02, 0.00e00],
        [5.60e02, 5.80e02, 0.00e00],
        [5.80e02, 6.00e02, 0.00e00],
        [6.00e02, 6.20e02, 0.00e00],
        [6.20e02, 6.40e02, 0.00e00],
        [6.40e02, 6.60e02, 0.00e00],
        [6.60e02, 6.80e02, 0.00e00],
        [6.80e02, 7.00e02, 0.00e00],
        [7.00e02, 7.20e02, 0.00e00],
        [7.20e02, 7.40e02, 0.00e00],
        [7.40e02, 7.60e02, 0.00e00],
        [7.60e02, 7.80e02, 0.00e00],
        [7.80e02, 8.00e02, 0.00e00],
        [8.00e02, 8.20e02, 0.00e00],
        [8.20e02, 8.40e02, 0.00e00],
        [8.40e02, 8.60e02, 0.00e00],
        [8.60e02, 8.80e02, 0.00e00],
        [8.80e02, 9.00e02, 0.00e00],
        [9.00e02, 9.20e02, 0.00e00],
        [9.20e02, 9.40e02, 0.00e00],
        [9.40e02, 9.60e02, 0.00e00],
        [9.60e02, 9.80e02, 0.00e00],
        [9.80e02, 1.00e03, 0.00e00],
        [1.00e03, 1.02e03, 0.00e00],
        [1.02e03, 1.04e03, 0.00e00],
        [1.04e03, 1.06e03, 0.00e00],
        [1.06e03, 1.08e03, 0.00e00],
        [1.08e03, 1.10e03, 0.00e00],
        [1.10e03, 1.12e03, 0.00e00],
        [1.12e03, 1.14e03, 0.00e00],
        [1.14e03, 1.16e03, 0.00e00],
        [1.16e03, 1.18e03, 0.00e00],
        [1.18e03, 1.20e03, 0.00e00],
        [1.20e03, 1.22e03, 0.00e00],
        [1.22e03, 1.24e03, 0.00e00],
        [1.24e03, 1.26e03, 0.00e00],
        [1.26e03, 1.28e03, 0.00e00],
        [1.28e03, 1.30e03, 0.00e00],
        [1.30e03, 1.32e03, 0.00e00],
        [1.32e03, 1.34e03, 0.00e00],
        [1.34e03, 1.36e03, 0.00e00],
        [1.36e03, 1.38e03, 0.00e00],
        [1.38e03, 1.40e03, 0.00e00],
        [1.40e03, 1.42e03, 0.00e00],
        [1.42e03, 1.44e03, 0.00e00],
        [1.44e03, 1.46e03, 0.00e00],
        [1.46e03, 1.48e03, 0.00e00],
        [1.48e03, 1.50e03, 0.00e00],
        [1.50e03, 1.52e03, 0.00e00],
        [1.52e03, 1.54e03, 0.00e00],
        [1.54e03, 1.56e03, 0.00e00],
        [1.56e03, 1.58e03, 0.00e00],
        [1.58e03, 1.60e03, 0.00e00],
        [1.60e03, 1.62e03, 0.00e00],
        [1.62e03, 1.64e03, 0.00e00],
        [1.64e03, 1.66e03, 0.00e00],
        [1.66e03, 1.68e03, 0.00e00],
        [1.68e03, 1.70e03, 0.00e00],
        [1.70e03, 1.72e03, 0.00e00],
        [1.72e03, 1.74e03, 0.00e00],
        [1.74e03, 1.76e03, 0.00e00],
        [1.76e03, 1.78e03, 0.00e00],
        [1.78e03, 1.80e03, 0.00e00],
        [1.80e03, 1.82e03, 0.00e00],
        [1.82e03, 1.84e03, 0.00e00],
        [1.84e03, 1.86e03, 0.00e00],
        [1.86e03, 1.88e03, 0.00e00],
        [1.88e03, 1.90e03, 0.00e00],
        [1.90e03, 1.92e03, 0.00e00],
        [1.92e03, 1.94e03, 0.00e00],
        [1.94e03, 1.96e03, 0.00e00],
        [1.96e03, 1.98e03, 0.00e00],
        [1.98e03, 2.00e03, 0.00e00],
    ]
)

expected_5 = np.array(
    [
        [0.00e00, 2.00e01, 3.90e01],
        [2.00e01, 4.00e01, 1.50e01],
        [4.00e01, 6.00e01, 2.00e00],
        [6.00e01, 8.00e01, 1.00e00],
        [8.00e01, 1.00e02, 0.00e00],
        [1.00e02, 1.20e02, 0.00e00],
        [1.20e02, 1.40e02, 0.00e00],
        [1.40e02, 1.60e02, 0.00e00],
        [1.60e02, 1.80e02, 0.00e00],
        [1.80e02, 2.00e02, 0.00e00],
        [2.00e02, 2.20e02, 0.00e00],
        [2.20e02, 2.40e02, 0.00e00],
        [2.40e02, 2.60e02, 0.00e00],
        [2.60e02, 2.80e02, 0.00e00],
        [2.80e02, 3.00e02, 0.00e00],
        [3.00e02, 3.20e02, 0.00e00],
        [3.20e02, 3.40e02, 0.00e00],
        [3.40e02, 3.60e02, 0.00e00],
        [3.60e02, 3.80e02, 0.00e00],
        [3.80e02, 4.00e02, 0.00e00],
        [4.00e02, 4.20e02, 0.00e00],
        [4.20e02, 4.40e02, 0.00e00],
        [4.40e02, 4.60e02, 0.00e00],
        [4.60e02, 4.80e02, 0.00e00],
        [4.80e02, 5.00e02, 0.00e00],
        [5.00e02, 5.20e02, 0.00e00],
        [5.20e02, 5.40e02, 0.00e00],
        [5.40e02, 5.60e02, 0.00e00],
        [5.60e02, 5.80e02, 0.00e00],
        [5.80e02, 6.00e02, 0.00e00],
        [6.00e02, 6.20e02, 0.00e00],
        [6.20e02, 6.40e02, 0.00e00],
        [6.40e02, 6.60e02, 0.00e00],
        [6.60e02, 6.80e02, 0.00e00],
        [6.80e02, 7.00e02, 0.00e00],
        [7.00e02, 7.20e02, 0.00e00],
        [7.20e02, 7.40e02, 0.00e00],
        [7.40e02, 7.60e02, 0.00e00],
        [7.60e02, 7.80e02, 0.00e00],
        [7.80e02, 8.00e02, 0.00e00],
        [8.00e02, 8.20e02, 0.00e00],
        [8.20e02, 8.40e02, 0.00e00],
        [8.40e02, 8.60e02, 0.00e00],
        [8.60e02, 8.80e02, 0.00e00],
        [8.80e02, 9.00e02, 0.00e00],
        [9.00e02, 9.20e02, 0.00e00],
        [9.20e02, 9.40e02, 0.00e00],
        [9.40e02, 9.60e02, 0.00e00],
        [9.60e02, 9.80e02, 0.00e00],
        [9.80e02, 1.00e03, 0.00e00],
        [1.00e03, 1.02e03, 0.00e00],
        [1.02e03, 1.04e03, 0.00e00],
        [1.04e03, 1.06e03, 0.00e00],
        [1.06e03, 1.08e03, 0.00e00],
        [1.08e03, 1.10e03, 0.00e00],
        [1.10e03, 1.12e03, 0.00e00],
        [1.12e03, 1.14e03, 0.00e00],
        [1.14e03, 1.16e03, 0.00e00],
        [1.16e03, 1.18e03, 0.00e00],
        [1.18e03, 1.20e03, 0.00e00],
        [1.20e03, 1.22e03, 0.00e00],
        [1.22e03, 1.24e03, 0.00e00],
        [1.24e03, 1.26e03, 0.00e00],
        [1.26e03, 1.28e03, 0.00e00],
        [1.28e03, 1.30e03, 0.00e00],
        [1.30e03, 1.32e03, 0.00e00],
        [1.32e03, 1.34e03, 0.00e00],
        [1.34e03, 1.36e03, 0.00e00],
        [1.36e03, 1.38e03, 0.00e00],
        [1.38e03, 1.40e03, 0.00e00],
        [1.40e03, 1.42e03, 0.00e00],
        [1.42e03, 1.44e03, 0.00e00],
        [1.44e03, 1.46e03, 0.00e00],
        [1.46e03, 1.48e03, 0.00e00],
        [1.48e03, 1.50e03, 0.00e00],
        [1.50e03, 1.52e03, 0.00e00],
        [1.52e03, 1.54e03, 0.00e00],
        [1.54e03, 1.56e03, 0.00e00],
        [1.56e03, 1.58e03, 0.00e00],
        [1.58e03, 1.60e03, 0.00e00],
        [1.60e03, 1.62e03, 0.00e00],
        [1.62e03, 1.64e03, 0.00e00],
        [1.64e03, 1.66e03, 0.00e00],
        [1.66e03, 1.68e03, 0.00e00],
        [1.68e03, 1.70e03, 0.00e00],
        [1.70e03, 1.72e03, 0.00e00],
        [1.72e03, 1.74e03, 0.00e00],
        [1.74e03, 1.76e03, 0.00e00],
        [1.76e03, 1.78e03, 0.00e00],
        [1.78e03, 1.80e03, 0.00e00],
        [1.80e03, 1.82e03, 0.00e00],
        [1.82e03, 1.84e03, 0.00e00],
        [1.84e03, 1.86e03, 0.00e00],
        [1.86e03, 1.88e03, 0.00e00],
        [1.88e03, 1.90e03, 0.00e00],
        [1.90e03, 1.92e03, 0.00e00],
        [1.92e03, 1.94e03, 0.00e00],
        [1.94e03, 1.96e03, 0.00e00],
        [1.96e03, 1.98e03, 0.00e00],
        [1.98e03, 2.00e03, 0.00e00],
    ]
)

expected_6_1 = np.array(
    [
        [15.0, 15.25, 1.0],
        [15.25, 15.5, 1.0],
        [15.5, 15.75, 3.0],
        [15.75, 16.0, 3.0],
        [16.0, 16.25, 0.0],
        [16.25, 16.5, 0.0],
        [16.5, 16.75, 2.0],
        [16.75, 17.0, 1.0],
        [17.0, 17.25, 0.0],
        [17.25, 17.5, 0.0],
        [17.5, 17.75, 1.0],
        [17.75, 18.0, 1.0],
        [18.0, 18.25, 0.0],
        [18.25, 18.5, 2.0],
        [18.5, 18.75, 1.0],
        [18.75, 19.0, 1.0],
        [19.0, 19.25, 0.0],
        [19.25, 19.5, 4.0],
        [19.5, 19.75, 1.0],
        [19.75, 20.0, 2.0],
        [20.0, 20.25, 1.0],
        [20.25, 20.5, 0.0],
        [20.5, 20.75, 3.0],
        [20.75, 21.0, 3.0],
        [21.0, 21.25, 2.0],
        [21.25, 21.5, 0.0],
        [21.5, 21.75, 2.0],
        [21.75, 22.0, 3.0],
        [22.0, 22.25, 2.0],
        [22.25, 22.5, 2.0],
        [22.5, 22.75, 2.0],
        [22.75, 23.0, 0.0],
        [23.0, 23.25, 0.0],
        [23.25, 23.5, 1.0],
        [23.5, 23.75, 0.0],
        [23.75, 24.0, 2.0],
        [24.0, 24.25, 1.0],
        [24.25, 24.5, 1.0],
        [24.5, 24.75, 3.0],
        [24.75, 25.0, 3.0],
        [25.0, 25.25, 1.0],
        [25.25, 25.5, 0.0],
        [25.5, 25.75, 1.0],
        [25.75, 26.0, 1.0],
        [26.0, 26.25, 3.0],
        [26.25, 26.5, 3.0],
        [26.5, 26.75, 1.0],
        [26.75, 27.0, 0.0],
        [27.0, 27.25, 1.0],
        [27.25, 27.5, 0.0],
        [27.5, 27.75, 1.0],
        [27.75, 28.0, 2.0],
        [28.0, 28.25, 3.0],
        [28.25, 28.5, 1.0],
        [28.5, 28.75, 0.0],
        [28.75, 29.0, 3.0],
        [29.0, 29.25, 2.0],
        [29.25, 29.5, 2.0],
        [29.5, 29.75, 3.0],
        [29.75, 30.0, 0.0],
        [30.0, 30.25, 2.0],
        [30.25, 30.5, 3.0],
        [30.5, 30.75, 0.0],
        [30.75, 31.0, 1.0],
        [31.0, 31.25, 0.0],
        [31.25, 31.5, 1.0],
        [31.5, 31.75, 1.0],
        [31.75, 32.0, 2.0],
        [32.0, 32.25, 1.0],
        [32.25, 32.5, 1.0],
        [32.5, 32.75, 0.0],
        [32.75, 33.0, 1.0],
        [33.0, 33.25, 0.0],
        [33.25, 33.5, 0.0],
        [33.5, 33.75, 2.0],
        [33.75, 34.0, 3.0],
        [34.0, 34.25, 2.0],
        [34.25, 34.5, 1.0],
        [34.5, 34.75, 1.0],
        [34.75, 35.0, 2.0],
        [35.0, 35.25, 2.0],
        [35.25, 35.5, 0.0],
        [35.5, 35.75, 2.0],
        [35.75, 36.0, 1.0],
        [36.0, 36.25, 0.0],
        [36.25, 36.5, 2.0],
        [36.5, 36.75, 1.0],
        [36.75, 37.0, 1.0],
        [37.0, 37.25, 1.0],
        [37.25, 37.5, 0.0],
        [37.5, 37.75, 2.0],
        [37.75, 38.0, 0.0],
        [38.0, 38.25, 1.0],
        [38.25, 38.5, 1.0],
        [38.5, 38.75, 1.0],
        [38.75, 39.0, 0.0],
        [39.0, 39.25, 2.0],
        [39.25, 39.5, 1.0],
        [39.5, 39.75, 0.0],
        [39.75, 40.0, 2.0],
    ]
)

expected_6_2 = np.array(
    [
        [0.00000000e00, 9.99999978e-03, 0.00000000e00],
        [9.99999978e-03, 1.99999996e-02, 2.00000000e00],
        [1.99999996e-02, 2.99999993e-02, 2.00000000e00],
        [2.99999993e-02, 3.99999991e-02, 1.00000000e00],
        [3.99999991e-02, 5.00000007e-02, 1.00000000e00],
        [5.00000007e-02, 5.99999987e-02, 0.00000000e00],
        [5.99999987e-02, 7.00000003e-02, 1.00000000e00],
        [7.00000003e-02, 7.99999982e-02, 3.00000000e00],
        [7.99999982e-02, 9.00000036e-02, 5.00000000e00],
        [9.00000036e-02, 1.00000001e-01, 1.00000000e00],
        [1.00000001e-01, 1.09999999e-01, 1.00000000e00],
        [1.09999999e-01, 1.19999997e-01, 4.00000000e00],
        [1.19999997e-01, 1.29999995e-01, 2.00000000e00],
        [1.29999995e-01, 1.40000001e-01, 1.00000000e00],
        [1.40000001e-01, 1.50000006e-01, 2.00000000e00],
        [1.50000006e-01, 1.59999996e-01, 0.00000000e00],
        [1.59999996e-01, 1.70000002e-01, 2.00000000e00],
        [1.70000002e-01, 1.80000007e-01, 1.00000000e00],
        [1.80000007e-01, 1.89999998e-01, 3.00000000e00],
        [1.89999998e-01, 2.00000003e-01, 6.00000000e00],
        [2.00000003e-01, 2.09999993e-01, 4.00000000e00],
        [2.09999993e-01, 2.19999999e-01, 6.00000000e00],
        [2.19999999e-01, 2.30000004e-01, 2.00000000e00],
        [2.30000004e-01, 2.39999995e-01, 5.00000000e00],
        [2.39999995e-01, 2.50000000e-01, 5.00000000e00],
        [2.50000000e-01, 2.59999990e-01, 0.00000000e00],
        [2.59999990e-01, 2.70000011e-01, 2.00000000e00],
        [2.70000011e-01, 2.80000001e-01, 0.00000000e00],
        [2.80000001e-01, 2.89999992e-01, 2.00000000e00],
        [2.89999992e-01, 3.00000012e-01, 5.00000000e00],
        [3.00000012e-01, 3.10000002e-01, 1.00000000e00],
        [3.10000002e-01, 3.19999993e-01, 4.00000000e00],
        [3.19999993e-01, 3.30000013e-01, 1.00000000e00],
        [3.30000013e-01, 3.40000004e-01, 0.00000000e00],
        [3.40000004e-01, 3.49999994e-01, 1.00000000e00],
        [3.49999994e-01, 3.60000014e-01, 0.00000000e00],
        [3.60000014e-01, 3.70000005e-01, 3.00000000e00],
        [3.70000005e-01, 3.79999995e-01, 2.00000000e00],
        [3.79999995e-01, 3.89999986e-01, 0.00000000e00],
        [3.89999986e-01, 4.00000006e-01, 4.00000000e00],
        [4.00000006e-01, 4.09999996e-01, 0.00000000e00],
        [4.09999996e-01, 4.19999987e-01, 1.00000000e00],
        [4.19999987e-01, 4.30000007e-01, 2.00000000e00],
        [4.30000007e-01, 4.39999998e-01, 0.00000000e00],
        [4.39999998e-01, 4.49999988e-01, 1.00000000e00],
        [4.49999988e-01, 4.60000008e-01, 3.00000000e00],
        [4.60000008e-01, 4.69999999e-01, 1.00000000e00],
        [4.69999999e-01, 4.79999989e-01, 0.00000000e00],
        [4.79999989e-01, 4.90000010e-01, 0.00000000e00],
        [4.90000010e-01, 5.00000000e-01, 1.00000000e00],
        [5.00000000e-01, 5.09999990e-01, 2.00000000e00],
        [5.09999990e-01, 5.19999981e-01, 2.00000000e00],
        [5.19999981e-01, 5.29999971e-01, 0.00000000e00],
        [5.29999971e-01, 5.40000021e-01, 0.00000000e00],
        [5.40000021e-01, 5.50000012e-01, 1.00000000e00],
        [5.50000012e-01, 5.60000002e-01, 4.00000000e00],
        [5.60000002e-01, 5.69999993e-01, 2.00000000e00],
        [5.69999993e-01, 5.79999983e-01, 0.00000000e00],
        [5.79999983e-01, 5.89999974e-01, 2.00000000e00],
        [5.89999974e-01, 6.00000024e-01, 1.00000000e00],
        [6.00000024e-01, 6.10000014e-01, 1.00000000e00],
        [6.10000014e-01, 6.20000005e-01, 0.00000000e00],
        [6.20000005e-01, 6.29999995e-01, 1.00000000e00],
        [6.29999995e-01, 6.39999986e-01, 2.00000000e00],
        [6.39999986e-01, 6.49999976e-01, 2.00000000e00],
        [6.49999976e-01, 6.60000026e-01, 0.00000000e00],
        [6.60000026e-01, 6.70000017e-01, 2.00000000e00],
        [6.70000017e-01, 6.80000007e-01, 4.00000000e00],
        [6.80000007e-01, 6.89999998e-01, 1.00000000e00],
        [6.89999998e-01, 6.99999988e-01, 1.00000000e00],
        [6.99999988e-01, 7.09999979e-01, 0.00000000e00],
        [7.09999979e-01, 7.20000029e-01, 1.00000000e00],
        [7.20000029e-01, 7.30000019e-01, 0.00000000e00],
        [7.30000019e-01, 7.40000010e-01, 2.00000000e00],
        [7.40000010e-01, 7.50000000e-01, 0.00000000e00],
        [7.50000000e-01, 7.59999990e-01, 1.00000000e00],
        [7.59999990e-01, 7.69999981e-01, 1.00000000e00],
        [7.69999981e-01, 7.79999971e-01, 0.00000000e00],
        [7.79999971e-01, 7.90000021e-01, 2.00000000e00],
        [7.90000021e-01, 8.00000012e-01, 1.00000000e00],
        [8.00000012e-01, 8.10000002e-01, 1.00000000e00],
        [8.10000002e-01, 8.19999993e-01, 2.00000000e00],
        [8.19999993e-01, 8.29999983e-01, 0.00000000e00],
        [8.29999983e-01, 8.39999974e-01, 2.00000000e00],
        [8.39999974e-01, 8.50000024e-01, 0.00000000e00],
        [8.50000024e-01, 8.60000014e-01, 3.00000000e00],
        [8.60000014e-01, 8.70000005e-01, 2.00000000e00],
        [8.70000005e-01, 8.79999995e-01, 1.00000000e00],
        [8.79999995e-01, 8.89999986e-01, 3.00000000e00],
        [8.89999986e-01, 8.99999976e-01, 7.00000000e00],
        [8.99999976e-01, 9.10000026e-01, 5.00000000e00],
        [9.10000026e-01, 9.20000017e-01, 2.00000000e00],
        [9.20000017e-01, 9.30000007e-01, 6.00000000e00],
        [9.30000007e-01, 9.39999998e-01, 8.00000000e00],
        [9.39999998e-01, 9.49999988e-01, 4.00000000e00],
        [9.49999988e-01, 9.59999979e-01, 1.20000000e01],
        [9.59999979e-01, 9.70000029e-01, 8.00000000e00],
        [9.70000029e-01, 9.80000019e-01, 1.20000000e01],
        [9.80000019e-01, 9.90000010e-01, 1.00000000e01],
        [9.90000010e-01, 1.00000000e00, 3.30000000e01],
    ]
)

expected_7 = np.array(
    [
        [15.0, 16.85000038, 0.0],
        [16.85000038, 18.70000076, 0.0],
        [18.70000076, 20.54999924, 0.0],
        [20.54999924, 22.39999962, 0.0],
        [22.39999962, 24.25, 0.0],
        [24.25, 26.10000038, 0.0],
        [26.10000038, 27.95000076, 0.0],
        [27.95000076, 29.79999924, 0.0],
        [29.79999924, 31.64999962, 20.0],
        [31.64999962, 33.5, 21.0],
        [33.5, 35.34999847, 21.0],
        [35.34999847, 37.20000076, 15.0],
        [37.20000076, 39.04999924, 11.0],
        [39.04999924, 40.90000153, 13.0],
        [40.90000153, 42.75, 10.0],
        [42.75, 44.59999847, 15.0],
        [44.59999847, 46.45000076, 7.0],
        [46.45000076, 48.29999924, 12.0],
        [48.29999924, 50.15000153, 12.0],
        [50.15000153, 52.0, 10.0],
        [52.0, 53.84999847, 11.0],
        [53.84999847, 55.70000076, 7.0],
        [55.70000076, 57.54999924, 9.0],
        [57.54999924, 59.40000153, 2.0],
        [59.40000153, 61.25, 6.0],
        [61.25, 63.09999847, 3.0],
        [63.09999847, 64.94999695, 7.0],
        [64.94999695, 66.80000305, 3.0],
        [66.80000305, 68.65000153, 6.0],
        [68.65000153, 70.5, 4.0],
        [70.5, 72.34999847, 5.0],
        [72.34999847, 74.19999695, 2.0],
        [74.19999695, 76.05000305, 1.0],
        [76.05000305, 77.90000153, 4.0],
        [77.90000153, 79.75, 4.0],
        [79.75, 81.59999847, 1.0],
        [81.59999847, 83.44999695, 5.0],
        [83.44999695, 85.30000305, 4.0],
        [85.30000305, 87.15000153, 1.0],
        [87.15000153, 89.0, 4.0],
        [89.0, 90.84999847, 3.0],
        [90.84999847, 92.69999695, 7.0],
        [92.69999695, 94.55000305, 6.0],
        [94.55000305, 96.40000153, 4.0],
        [96.40000153, 98.25, 2.0],
        [98.25, 100.09999847, 2.0],
        [100.09999847, 101.94999695, 1.0],
        [101.94999695, 103.80000305, 3.0],
        [103.80000305, 105.65000153, 2.0],
        [105.65000153, 107.5, 1.0],
        [107.5, 109.34999847, 2.0],
        [109.34999847, 111.19999695, 3.0],
        [111.19999695, 113.05000305, 2.0],
        [113.05000305, 114.90000153, 1.0],
        [114.90000153, 116.75, 1.0],
        [116.75, 118.59999847, 1.0],
        [118.59999847, 120.44999695, 1.0],
        [120.44999695, 122.30000305, 1.0],
        [122.30000305, 124.15000153, 0.0],
        [124.15000153, 126.0, 0.0],
        [126.0, 127.84999847, 0.0],
        [127.84999847, 129.69999695, 2.0],
        [129.69999695, 131.55000305, 3.0],
        [131.55000305, 133.3999939, 1.0],
        [133.3999939, 135.25, 1.0],
        [135.25, 137.1000061, 2.0],
        [137.1000061, 138.94999695, 4.0],
        [138.94999695, 140.80000305, 3.0],
        [140.80000305, 142.6499939, 0.0],
        [142.6499939, 144.5, 1.0],
        [144.5, 146.3500061, 1.0],
        [146.3500061, 148.19999695, 0.0],
        [148.19999695, 150.05000305, 0.0],
        [150.05000305, 151.8999939, 2.0],
        [151.8999939, 153.75, 0.0],
        [153.75, 155.6000061, 1.0],
        [155.6000061, 157.44999695, 1.0],
        [157.44999695, 159.30000305, 1.0],
        [159.30000305, 161.1499939, 1.0],
        [161.1499939, 163.0, 0.0],
        [163.0, 164.8500061, 0.0],
        [164.8500061, 166.69999695, 1.0],
        [166.69999695, 168.55000305, 0.0],
        [168.55000305, 170.3999939, 0.0],
        [170.3999939, 172.25, 0.0],
        [172.25, 174.1000061, 1.0],
        [174.1000061, 175.94999695, 1.0],
        [175.94999695, 177.80000305, 0.0],
        [177.80000305, 179.6499939, 0.0],
        [179.6499939, 181.5, 0.0],
        [181.5, 183.3500061, 1.0],
        [183.3500061, 185.19999695, 0.0],
        [185.19999695, 187.05000305, 0.0],
        [187.05000305, 188.8999939, 0.0],
        [188.8999939, 190.75, 1.0],
        [190.75, 192.6000061, 0.0],
        [192.6000061, 194.44999695, 0.0],
        [194.44999695, 196.30000305, 0.0],
        [196.30000305, 198.1499939, 0.0],
        [198.1499939, 200.0, 0.0],
    ]
)

expected_8 = np.array(
    [
        [15.0, 17.35000038, 2.0],
        [17.35000038, 19.70000076, 2.0],
        [19.70000076, 22.04999924, 3.0],
        [22.04999924, 24.39999962, 4.0],
        [24.39999962, 26.75, 2.0],
        [26.75, 29.10000038, 2.0],
        [29.10000038, 31.45000076, 2.0],
        [31.45000076, 33.79999924, 1.0],
        [33.79999924, 36.15000153, 5.0],
        [36.15000153, 38.5, 2.0],
        [38.5, 40.84999847, 3.0],
        [40.84999847, 43.20000076, 1.0],
        [43.20000076, 45.54999924, 1.0],
        [45.54999924, 47.90000153, 1.0],
        [47.90000153, 50.25, 3.0],
        [50.25, 52.59999847, 2.0],
        [52.59999847, 54.95000076, 1.0],
        [54.95000076, 57.29999924, 0.0],
        [57.29999924, 59.65000153, 0.0],
        [59.65000153, 62.0, 1.0],
        [62.0, 64.34999847, 0.0],
        [64.34999847, 66.69999695, 0.0],
        [66.69999695, 69.05000305, 0.0],
        [69.05000305, 71.40000153, 0.0],
        [71.40000153, 73.75, 0.0],
        [73.75, 76.09999847, 0.0],
        [76.09999847, 78.44999695, 0.0],
        [78.44999695, 80.80000305, 0.0],
        [80.80000305, 83.15000153, 0.0],
        [83.15000153, 85.5, 0.0],
        [85.5, 87.84999847, 0.0],
        [87.84999847, 90.19999695, 0.0],
        [90.19999695, 92.55000305, 1.0],
        [92.55000305, 94.90000153, 1.0],
        [94.90000153, 97.25, 1.0],
        [97.25, 99.59999847, 0.0],
        [99.59999847, 101.94999695, 1.0],
        [101.94999695, 104.30000305, 0.0],
        [104.30000305, 106.65000153, 0.0],
        [106.65000153, 109.0, 0.0],
        [109.0, 111.34999847, 0.0],
        [111.34999847, 113.69999695, 0.0],
        [113.69999695, 116.05000305, 0.0],
        [116.05000305, 118.40000153, 0.0],
        [118.40000153, 120.75, 0.0],
        [120.75, 123.09999847, 0.0],
        [123.09999847, 125.44999695, 0.0],
        [125.44999695, 127.80000305, 0.0],
        [127.80000305, 130.1499939, 0.0],
        [130.1499939, 132.5, 0.0],
        [132.5, 134.8500061, 0.0],
        [134.8500061, 137.19999695, 0.0],
        [137.19999695, 139.55000305, 1.0],
        [139.55000305, 141.8999939, 0.0],
        [141.8999939, 144.25, 0.0],
        [144.25, 146.6000061, 0.0],
        [146.6000061, 148.94999695, 0.0],
        [148.94999695, 151.30000305, 0.0],
        [151.30000305, 153.6499939, 0.0],
        [153.6499939, 156.0, 0.0],
        [156.0, 158.3500061, 0.0],
        [158.3500061, 160.69999695, 0.0],
        [160.69999695, 163.05000305, 0.0],
        [163.05000305, 165.3999939, 0.0],
        [165.3999939, 167.75, 0.0],
        [167.75, 170.1000061, 0.0],
        [170.1000061, 172.44999695, 0.0],
        [172.44999695, 174.80000305, 0.0],
        [174.80000305, 177.1499939, 0.0],
        [177.1499939, 179.5, 0.0],
        [179.5, 181.8500061, 0.0],
        [181.8500061, 184.19999695, 0.0],
        [184.19999695, 186.55000305, 0.0],
        [186.55000305, 188.8999939, 0.0],
        [188.8999939, 191.25, 0.0],
        [191.25, 193.6000061, 0.0],
        [193.6000061, 195.94999695, 0.0],
        [195.94999695, 198.30000305, 0.0],
        [198.30000305, 200.6499939, 0.0],
        [200.6499939, 203.0, 0.0],
        [203.0, 205.3500061, 0.0],
        [205.3500061, 207.69999695, 0.0],
        [207.69999695, 210.05000305, 0.0],
        [210.05000305, 212.3999939, 0.0],
        [212.3999939, 214.75, 0.0],
        [214.75, 217.1000061, 0.0],
        [217.1000061, 219.44999695, 0.0],
        [219.44999695, 221.80000305, 0.0],
        [221.80000305, 224.1499939, 0.0],
        [224.1499939, 226.5, 0.0],
        [226.5, 228.8500061, 0.0],
        [228.8500061, 231.19999695, 0.0],
        [231.19999695, 233.55000305, 0.0],
        [233.55000305, 235.8999939, 0.0],
        [235.8999939, 238.25, 0.0],
        [238.25, 240.6000061, 0.0],
        [240.6000061, 242.94999695, 0.0],
        [242.94999695, 245.30000305, 0.0],
        [245.30000305, 247.6499939, 0.0],
        [247.6499939, 250.0, 0.0],
    ]
)


def test_adl_benchmark_1():
    query = ds.Select(lambda event: event.MET_pt)
    (
        hist,
        bin_edges,
    ) = np.histogram(query.value(), 100, (0, 2000))
    assert np.allclose(np.stack((bin_edges[:-1], bin_edges[1:], hist), axis=1), expected_1)


def test_adl_benchmark_2():
    query = ds.SelectMany(lambda event: event.Jet_pt)
    (
        hist,
        bin_edges,
    ) = np.histogram(query.value(), 100, (15, 60))
    assert np.allclose(np.stack((bin_edges[:-1], bin_edges[1:], hist), axis=1), expected_2)


def test_adl_benchmark_3():
    query = ds.SelectMany(
        lambda event: {'pT': event.Jet_pt, 'eta': event.Jet_eta}
        .Zip()
        .Where(lambda jet: abs(jet.eta) < 1)
        .Select(lambda jet: jet.pT)
    )
    (
        hist,
        bin_edges,
    ) = np.histogram(query.value(), 100, (15, 60))
    assert np.allclose(np.stack((bin_edges[:-1], bin_edges[1:], hist), axis=1), expected_3)


def test_adl_benchmark_4():
    query = ds.Where(lambda event: event.Jet_pt.Where(lambda pT: pT > 40).Count() >= 2).Select(
        lambda event: event.MET_pt
    )
    (
        hist,
        bin_edges,
    ) = np.histogram(query.value(), 100, (0, 2000))
    assert np.allclose(np.stack((bin_edges[:-1], bin_edges[1:], hist), axis=1), expected_4)


def test_adl_benchmark_5():
    query = ds.Where(
        lambda event: Zip(
            {
                'p4': Zip(
                    {
                        'pt': event.Muon_pt,
                        'eta': event.Muon_eta,
                        'phi': event.Muon_phi,
                        'mass': event.Muon_mass,
                    }
                ).ToFourMomenta(),
                'charge': event.Muon_charge,
            }
        )
        .Choose(2)
        .Where(lambda pair: pair.ElementAt(0).charge * pair.ElementAt(1).charge < 0)
        .Select(lambda pair: (pair.ElementAt(0).p4 + pair.ElementAt(1).p4).mass)
        .Where(lambda mass: 60 < mass and mass < 120)
        .Count()
        > 0
    ).Select(lambda event: event.MET_pt)
    (
        hist,
        bin_edges,
    ) = np.histogram(query.value(), 100, (0, 2000))
    assert np.allclose(np.stack((bin_edges[:-1], bin_edges[1:], hist), axis=1), expected_5)


def test_adl_benchmark_6():
    query = (
        ds.Where(lambda event: event.nJet >= 3)
        .Select(
            lambda event: Zip(
                {
                    'p4': {
                        'pt': event.Jet_pt,
                        'eta': event.Jet_eta,
                        'phi': event.Jet_phi,
                        'mass': event.Jet_mass,
                    }
                    .Zip()
                    .ToFourMomenta(),
                    'btag': event.Jet_btag,
                }
            )
            .Choose(3)
            .Select(
                lambda triplet: {
                    'btag_values': triplet.Select(lambda jet: jet.btag),
                    'p4': triplet.ElementAt(0).p4
                    + triplet.ElementAt(1).p4
                    + triplet.ElementAt(2).p4,
                }
            )
            .OrderBy(lambda trijet: abs(trijet.p4.m - 172.5))
            .First()
        )
        .Select(
            lambda best_trijet: {
                'trijet_pt': best_trijet.p4.pt,
                'max_btag_value': best_trijet.btag_values.Max(),
            }
        )
    )
    result = query.value()
    (
        hist_1,
        bin_edges_1,
    ) = np.histogram(result['trijet_pt'].tolist(), 100, (15, 40))
    assert np.allclose(np.stack((bin_edges_1[:-1], bin_edges_1[1:], hist_1), axis=1), expected_6_1)
    (
        hist_2,
        bin_edges_2,
    ) = np.histogram(result['max_btag_value'], 100, (0, 1))
    assert np.allclose(np.stack((bin_edges_2[:-1], bin_edges_2[1:], hist_2), axis=1), expected_6_2)


def test_adl_benchmark_7():
    query = (
        ds.Select(
            lambda event: {
                'jets': Zip(
                    {
                        'pt': event.Jet_pt,
                        'eta': event.Jet_eta,
                        'phi': event.Jet_phi,
                        'mass': event.Jet_mass,
                    }
                ).ToFourMomenta(),
                'electrons': Zip(
                    {
                        'pt': event.Electron_pt,
                        'eta': event.Electron_eta,
                        'phi': event.Electron_phi,
                        'mass': event.Electron_mass,
                    }
                ).ToFourMomenta(),
                'muons': Zip(
                    {
                        'pt': event.Muon_pt,
                        'eta': event.Muon_eta,
                        'phi': event.Muon_phi,
                        'mass': event.Muon_mass,
                    }
                ).ToFourMomenta(),
            }
        )
        .Select(
            lambda event: {
                'good_jets': event.jets.Where(lambda jet: jet.pt > 30),
                'good_leptons': event.electrons.Concat(event.muons).Where(
                    lambda lepton: lepton.pt > 10
                ),
            }
        )
        .Select(
            lambda event: event.good_jets.Where(
                lambda good_jet: not event.good_leptons.Any(
                    lambda good_lepton: good_jet.deltaR(good_lepton) < 0.4
                )
            )
            .Select(lambda final_jets: final_jets.pt)
            .Sum()
        )
    )
    (
        hist,
        bin_edges,
    ) = np.histogram(query.value(), 100, (15, 200))
    assert np.allclose(np.stack((bin_edges[:-1], bin_edges[1:], hist), axis=1), expected_7)


def test_adl_benchmark_8():
    query = (
        ds.Select(
            lambda event: {
                'electrons': Zip(
                    {
                        'p4': Zip(
                            {
                                'pt': event.Electron_pt,
                                'eta': event.Electron_eta,
                                'phi': event.Electron_phi,
                                'mass': event.Electron_mass,
                            }
                        ).ToFourMomenta(),
                        'charge': event.Electron_charge,
                    }
                ),
                'muons': Zip(
                    {
                        'p4': Zip(
                            {
                                'pt': event.Muon_pt,
                                'eta': event.Muon_eta,
                                'phi': event.Muon_phi,
                                'mass': event.Muon_mass,
                            }
                        ).ToFourMomenta(),
                        'charge': event.Muon_charge,
                    }
                ),
                'met': {
                    'pt': event.MET_pt,
                    'phi': event.MET_phi,
                }.ToFourMomentum(),
            }
        )
        .Select(
            lambda event: {
                'leptons': event.electrons.Concat(event.muons),
                'electron_pairs': event.electrons.Choose(2).Where(
                    lambda pair: pair.ElementAt(0).charge * pair.ElementAt(1).charge < 0
                ),
                'muon_pairs': event.muons.Choose(2).Where(
                    lambda pair: pair.ElementAt(0).charge * pair.ElementAt(1).charge < 0
                ),
                'met': event.met,
            }
        )
        .Where(
            lambda event: event.leptons.Count() >= 3
            and event.electron_pairs.Count() + event.muon_pairs.Count() > 0
        )
        .Select(
            lambda event: {
                'leptons': event.leptons,
                'best_pair': event.electron_pairs.Concat(event.muon_pairs)
                .OrderBy(
                    lambda pair: abs((pair.ElementAt(0).p4 + pair.ElementAt(1).p4).mass - 91.2)
                )
                .First(),
                'met': event.met,
            }
        )
        .Select(
            lambda event: {
                'leading_other_lepton_p4': event.leptons.Where(
                    lambda lepton: lepton.p4.pt != event.best_pair.ElementAt(0).p4.pt
                    and lepton.p4.pt != event.best_pair.ElementAt(1).p4.pt
                )
                .OrderBy(lambda lepton: lepton.p4.pt)
                .Last()
                .p4,
                'met': event.met,
            }
        )
        # Quotes needed around lambda here due to https://github.com/iris-hep/func_adl/issues/127
        .Select(
            lambda event: (
                2
                * event.leading_other_lepton_p4.pt
                * event.met.pt
                * (1 - np.cos(event.leading_other_lepton_p4.deltaphi(event.met)))
            )
            ** 0.5
        )
    )
    (
        hist,
        bin_edges,
    ) = np.histogram(query.value(), 100, (15, 250))
    assert np.allclose(np.stack((bin_edges[:-1], bin_edges[1:], hist), axis=1), expected_8)
