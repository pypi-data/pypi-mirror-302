# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200196Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'name': 'str',
        'uuid': 'str',
        'cloud_uuid': 'str',
        'url': 'str',
        'display_name': 'str',
        'version': 'str',
        'enterprise_suite': 'str',
        'language': 'str',
        'smb_ads': 'str',
        'cpu_usage_alert': 'int',
        'mem_usage_alert': 'int',
        'cpu_docker_usage_alert': 'int',
        'mem_docker_usage_alert': 'int',
        'multi_zone': 'str',
        'afa': 'str',
        'has_ipv6': 'bool',
        'data_service_status': 'str',
        'io_engine': 'str',
        'io_vcpus': 'int',
        'io_ram_mb': 'int',
        'app_engine': 'str',
        'app_vcpus': 'int',
        'app_ram_mb': 'int',
        'wwnn': 'str',
        'smb_netbios_name': 'str',
        'defrag_enable': 'str',
        'defrag_runtime': 'str',
        'defrag_active': 'str',
        'defrag_volumes_processed': 'str',
        'defrag_volumes_pending': 'str',
        'defrag_elapsed_time_sec': 'str',
        'fs_trim_enable': 'str',
        'fs_trim_active': 'str',
        'fs_trim_volumes_processed': 'str',
        'fs_trim_volumes_pending': 'str',
        'fs_trim_elapsed_time_sec': 'str',
        'base_cache_gb': 'int',
        'ext_cache_gb': 'int',
        'servers_monitor_state': 'str',
        'servers_monitor_ping_count': 'int',
        'servers_monitor_success_count': 'int',
        'volume_default_mount_sync': 'str',
        'volume_default_atime_update': 'str',
        'remote_vpsa_failure_rate_limit': 'int',
        'last_vpsa_request': 'str',
        'vpsa_request_status': 'str',
        'pool_types_count': 'int',
        'pool_types': 'list[str]',
        'manage_externally': 'str',
        'delete_snapshots_in_emergency': 'str',
        'smb_charset_count': 'int',
        'smb_charsets': 'list[str]',
        'admin_access_enabled': 'str',
        'is_support_privilege_access_enabled': 'str',
        'created_at': 'str',
        'modified_at': 'str',
        'service_mode': 'str',
        'expire_password': 'str',
        'expire_password_after': 'str',
        'min_password_length': 'str',
        'password_must_contain_letters': 'str',
        'password_must_contain_numbers': 'str',
        'password_must_contain_uppercase_letters': 'str',
        'password_must_contain_special_characters': 'str',
        'password_requirements_text': 'str',
        'password_history': 'str',
        'legacy_otp_secret': 'str',
        'vpsa_chap_user': 'str',
        'vpsa_chap_secret': 'str',
        'internet_access': 'bool',
        'tiering_support': 'bool',
        'flc_policy_managemnt': 'bool'
    }

    attribute_map = {
        'message': 'message',
        'name': 'name',
        'uuid': 'uuid',
        'cloud_uuid': 'CloudUuid',
        'url': 'url',
        'display_name': 'display_name',
        'version': 'version',
        'enterprise_suite': 'enterprise_suite',
        'language': 'language',
        'smb_ads': 'smb_ads',
        'cpu_usage_alert': 'cpu_usage_alert',
        'mem_usage_alert': 'mem_usage_alert',
        'cpu_docker_usage_alert': 'cpu_docker_usage_alert',
        'mem_docker_usage_alert': 'mem_docker_usage_alert',
        'multi_zone': 'multi-zone',
        'afa': 'afa',
        'has_ipv6': 'has_ipv6',
        'data_service_status': 'data_service_status',
        'io_engine': 'io_engine',
        'io_vcpus': 'io_vcpus',
        'io_ram_mb': 'io_ram_mb',
        'app_engine': 'app_engine',
        'app_vcpus': 'app_vcpus',
        'app_ram_mb': 'app_ram_mb',
        'wwnn': 'wwnn',
        'smb_netbios_name': 'smb_netbios_name',
        'defrag_enable': 'defrag_enable',
        'defrag_runtime': 'defrag_runtime',
        'defrag_active': 'defrag_active',
        'defrag_volumes_processed': 'defrag_volumes_processed',
        'defrag_volumes_pending': 'defrag_volumes_pending',
        'defrag_elapsed_time_sec': 'defrag_elapsed_time_sec',
        'fs_trim_enable': 'fs_trim_enable',
        'fs_trim_active': 'fs_trim_active',
        'fs_trim_volumes_processed': 'fs_trim_volumes_processed',
        'fs_trim_volumes_pending': 'fs_trim_volumes_pending',
        'fs_trim_elapsed_time_sec': 'fs_trim_elapsed_time_sec',
        'base_cache_gb': 'base_cache_gb',
        'ext_cache_gb': 'ext_cache_gb',
        'servers_monitor_state': 'servers_monitor_state',
        'servers_monitor_ping_count': 'servers_monitor_ping_count',
        'servers_monitor_success_count': 'servers_monitor_success_count',
        'volume_default_mount_sync': 'volume_default_mount_sync',
        'volume_default_atime_update': 'volume_default_atime_update',
        'remote_vpsa_failure_rate_limit': 'remote_vpsa_failure_rate_limit',
        'last_vpsa_request': 'last_vpsa_request',
        'vpsa_request_status': 'vpsa_request_status',
        'pool_types_count': 'pool_types_count',
        'pool_types': 'pool_types',
        'manage_externally': 'manage_externally',
        'delete_snapshots_in_emergency': 'delete_snapshots_in_emergency',
        'smb_charset_count': 'smb_charset_count',
        'smb_charsets': 'smb_charsets',
        'admin_access_enabled': 'admin_access_enabled',
        'is_support_privilege_access_enabled': 'is_support_privilege_access_enabled',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'service_mode': 'service_mode',
        'expire_password': 'expire_password',
        'expire_password_after': 'expire_password_after',
        'min_password_length': 'min_password_length',
        'password_must_contain_letters': 'password_must_contain_letters',
        'password_must_contain_numbers': 'password_must_contain_numbers',
        'password_must_contain_uppercase_letters': 'password_must_contain_uppercase_letters',
        'password_must_contain_special_characters': 'password_must_contain_special_characters',
        'password_requirements_text': 'password_requirements_text',
        'password_history': 'password_history',
        'legacy_otp_secret': 'legacy_otp_secret',
        'vpsa_chap_user': 'vpsa_chap_user',
        'vpsa_chap_secret': 'vpsa_chap_secret',
        'internet_access': 'internet_access',
        'tiering_support': 'tiering_support',
        'flc_policy_managemnt': 'flc_policy_managemnt'
    }

    def __init__(self, message=None, name=None, uuid=None, cloud_uuid=None, url=None, display_name=None, version=None, enterprise_suite=None, language=None, smb_ads=None, cpu_usage_alert=None, mem_usage_alert=None, cpu_docker_usage_alert=None, mem_docker_usage_alert=None, multi_zone=None, afa=None, has_ipv6=None, data_service_status=None, io_engine=None, io_vcpus=None, io_ram_mb=None, app_engine=None, app_vcpus=None, app_ram_mb=None, wwnn=None, smb_netbios_name=None, defrag_enable=None, defrag_runtime=None, defrag_active=None, defrag_volumes_processed=None, defrag_volumes_pending=None, defrag_elapsed_time_sec=None, fs_trim_enable=None, fs_trim_active=None, fs_trim_volumes_processed=None, fs_trim_volumes_pending=None, fs_trim_elapsed_time_sec=None, base_cache_gb=None, ext_cache_gb=None, servers_monitor_state=None, servers_monitor_ping_count=None, servers_monitor_success_count=None, volume_default_mount_sync=None, volume_default_atime_update=None, remote_vpsa_failure_rate_limit=None, last_vpsa_request=None, vpsa_request_status=None, pool_types_count=None, pool_types=None, manage_externally=None, delete_snapshots_in_emergency=None, smb_charset_count=None, smb_charsets=None, admin_access_enabled=None, is_support_privilege_access_enabled=None, created_at=None, modified_at=None, service_mode=None, expire_password=None, expire_password_after=None, min_password_length=None, password_must_contain_letters=None, password_must_contain_numbers=None, password_must_contain_uppercase_letters=None, password_must_contain_special_characters=None, password_requirements_text=None, password_history=None, legacy_otp_secret=None, vpsa_chap_user=None, vpsa_chap_secret=None, internet_access=None, tiering_support=None, flc_policy_managemnt=None, _configuration=None):  # noqa: E501
        """InlineResponse200196Response - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._name = None
        self._uuid = None
        self._cloud_uuid = None
        self._url = None
        self._display_name = None
        self._version = None
        self._enterprise_suite = None
        self._language = None
        self._smb_ads = None
        self._cpu_usage_alert = None
        self._mem_usage_alert = None
        self._cpu_docker_usage_alert = None
        self._mem_docker_usage_alert = None
        self._multi_zone = None
        self._afa = None
        self._has_ipv6 = None
        self._data_service_status = None
        self._io_engine = None
        self._io_vcpus = None
        self._io_ram_mb = None
        self._app_engine = None
        self._app_vcpus = None
        self._app_ram_mb = None
        self._wwnn = None
        self._smb_netbios_name = None
        self._defrag_enable = None
        self._defrag_runtime = None
        self._defrag_active = None
        self._defrag_volumes_processed = None
        self._defrag_volumes_pending = None
        self._defrag_elapsed_time_sec = None
        self._fs_trim_enable = None
        self._fs_trim_active = None
        self._fs_trim_volumes_processed = None
        self._fs_trim_volumes_pending = None
        self._fs_trim_elapsed_time_sec = None
        self._base_cache_gb = None
        self._ext_cache_gb = None
        self._servers_monitor_state = None
        self._servers_monitor_ping_count = None
        self._servers_monitor_success_count = None
        self._volume_default_mount_sync = None
        self._volume_default_atime_update = None
        self._remote_vpsa_failure_rate_limit = None
        self._last_vpsa_request = None
        self._vpsa_request_status = None
        self._pool_types_count = None
        self._pool_types = None
        self._manage_externally = None
        self._delete_snapshots_in_emergency = None
        self._smb_charset_count = None
        self._smb_charsets = None
        self._admin_access_enabled = None
        self._is_support_privilege_access_enabled = None
        self._created_at = None
        self._modified_at = None
        self._service_mode = None
        self._expire_password = None
        self._expire_password_after = None
        self._min_password_length = None
        self._password_must_contain_letters = None
        self._password_must_contain_numbers = None
        self._password_must_contain_uppercase_letters = None
        self._password_must_contain_special_characters = None
        self._password_requirements_text = None
        self._password_history = None
        self._legacy_otp_secret = None
        self._vpsa_chap_user = None
        self._vpsa_chap_secret = None
        self._internet_access = None
        self._tiering_support = None
        self._flc_policy_managemnt = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if uuid is not None:
            self.uuid = uuid
        if cloud_uuid is not None:
            self.cloud_uuid = cloud_uuid
        if url is not None:
            self.url = url
        if display_name is not None:
            self.display_name = display_name
        if version is not None:
            self.version = version
        if enterprise_suite is not None:
            self.enterprise_suite = enterprise_suite
        if language is not None:
            self.language = language
        if smb_ads is not None:
            self.smb_ads = smb_ads
        if cpu_usage_alert is not None:
            self.cpu_usage_alert = cpu_usage_alert
        if mem_usage_alert is not None:
            self.mem_usage_alert = mem_usage_alert
        if cpu_docker_usage_alert is not None:
            self.cpu_docker_usage_alert = cpu_docker_usage_alert
        if mem_docker_usage_alert is not None:
            self.mem_docker_usage_alert = mem_docker_usage_alert
        if multi_zone is not None:
            self.multi_zone = multi_zone
        if afa is not None:
            self.afa = afa
        if has_ipv6 is not None:
            self.has_ipv6 = has_ipv6
        if data_service_status is not None:
            self.data_service_status = data_service_status
        if io_engine is not None:
            self.io_engine = io_engine
        if io_vcpus is not None:
            self.io_vcpus = io_vcpus
        if io_ram_mb is not None:
            self.io_ram_mb = io_ram_mb
        if app_engine is not None:
            self.app_engine = app_engine
        if app_vcpus is not None:
            self.app_vcpus = app_vcpus
        if app_ram_mb is not None:
            self.app_ram_mb = app_ram_mb
        if wwnn is not None:
            self.wwnn = wwnn
        if smb_netbios_name is not None:
            self.smb_netbios_name = smb_netbios_name
        if defrag_enable is not None:
            self.defrag_enable = defrag_enable
        if defrag_runtime is not None:
            self.defrag_runtime = defrag_runtime
        if defrag_active is not None:
            self.defrag_active = defrag_active
        if defrag_volumes_processed is not None:
            self.defrag_volumes_processed = defrag_volumes_processed
        if defrag_volumes_pending is not None:
            self.defrag_volumes_pending = defrag_volumes_pending
        if defrag_elapsed_time_sec is not None:
            self.defrag_elapsed_time_sec = defrag_elapsed_time_sec
        if fs_trim_enable is not None:
            self.fs_trim_enable = fs_trim_enable
        if fs_trim_active is not None:
            self.fs_trim_active = fs_trim_active
        if fs_trim_volumes_processed is not None:
            self.fs_trim_volumes_processed = fs_trim_volumes_processed
        if fs_trim_volumes_pending is not None:
            self.fs_trim_volumes_pending = fs_trim_volumes_pending
        if fs_trim_elapsed_time_sec is not None:
            self.fs_trim_elapsed_time_sec = fs_trim_elapsed_time_sec
        if base_cache_gb is not None:
            self.base_cache_gb = base_cache_gb
        if ext_cache_gb is not None:
            self.ext_cache_gb = ext_cache_gb
        if servers_monitor_state is not None:
            self.servers_monitor_state = servers_monitor_state
        if servers_monitor_ping_count is not None:
            self.servers_monitor_ping_count = servers_monitor_ping_count
        if servers_monitor_success_count is not None:
            self.servers_monitor_success_count = servers_monitor_success_count
        if volume_default_mount_sync is not None:
            self.volume_default_mount_sync = volume_default_mount_sync
        if volume_default_atime_update is not None:
            self.volume_default_atime_update = volume_default_atime_update
        if remote_vpsa_failure_rate_limit is not None:
            self.remote_vpsa_failure_rate_limit = remote_vpsa_failure_rate_limit
        if last_vpsa_request is not None:
            self.last_vpsa_request = last_vpsa_request
        if vpsa_request_status is not None:
            self.vpsa_request_status = vpsa_request_status
        if pool_types_count is not None:
            self.pool_types_count = pool_types_count
        if pool_types is not None:
            self.pool_types = pool_types
        if manage_externally is not None:
            self.manage_externally = manage_externally
        if delete_snapshots_in_emergency is not None:
            self.delete_snapshots_in_emergency = delete_snapshots_in_emergency
        if smb_charset_count is not None:
            self.smb_charset_count = smb_charset_count
        if smb_charsets is not None:
            self.smb_charsets = smb_charsets
        if admin_access_enabled is not None:
            self.admin_access_enabled = admin_access_enabled
        if is_support_privilege_access_enabled is not None:
            self.is_support_privilege_access_enabled = is_support_privilege_access_enabled
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if service_mode is not None:
            self.service_mode = service_mode
        if expire_password is not None:
            self.expire_password = expire_password
        if expire_password_after is not None:
            self.expire_password_after = expire_password_after
        if min_password_length is not None:
            self.min_password_length = min_password_length
        if password_must_contain_letters is not None:
            self.password_must_contain_letters = password_must_contain_letters
        if password_must_contain_numbers is not None:
            self.password_must_contain_numbers = password_must_contain_numbers
        if password_must_contain_uppercase_letters is not None:
            self.password_must_contain_uppercase_letters = password_must_contain_uppercase_letters
        if password_must_contain_special_characters is not None:
            self.password_must_contain_special_characters = password_must_contain_special_characters
        if password_requirements_text is not None:
            self.password_requirements_text = password_requirements_text
        if password_history is not None:
            self.password_history = password_history
        if legacy_otp_secret is not None:
            self.legacy_otp_secret = legacy_otp_secret
        if vpsa_chap_user is not None:
            self.vpsa_chap_user = vpsa_chap_user
        if vpsa_chap_secret is not None:
            self.vpsa_chap_secret = vpsa_chap_secret
        if internet_access is not None:
            self.internet_access = internet_access
        if tiering_support is not None:
            self.tiering_support = tiering_support
        if flc_policy_managemnt is not None:
            self.flc_policy_managemnt = flc_policy_managemnt

    @property
    def message(self):
        """Gets the message of this InlineResponse200196Response.  # noqa: E501


        :return: The message of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse200196Response.


        :param message: The message of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this InlineResponse200196Response.  # noqa: E501


        :return: The name of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200196Response.


        :param name: The name of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this InlineResponse200196Response.  # noqa: E501


        :return: The uuid of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InlineResponse200196Response.


        :param uuid: The uuid of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def cloud_uuid(self):
        """Gets the cloud_uuid of this InlineResponse200196Response.  # noqa: E501


        :return: The cloud_uuid of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._cloud_uuid

    @cloud_uuid.setter
    def cloud_uuid(self, cloud_uuid):
        """Sets the cloud_uuid of this InlineResponse200196Response.


        :param cloud_uuid: The cloud_uuid of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._cloud_uuid = cloud_uuid

    @property
    def url(self):
        """Gets the url of this InlineResponse200196Response.  # noqa: E501


        :return: The url of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse200196Response.


        :param url: The url of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse200196Response.  # noqa: E501


        :return: The display_name of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse200196Response.


        :param display_name: The display_name of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def version(self):
        """Gets the version of this InlineResponse200196Response.  # noqa: E501


        :return: The version of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse200196Response.


        :param version: The version of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def enterprise_suite(self):
        """Gets the enterprise_suite of this InlineResponse200196Response.  # noqa: E501


        :return: The enterprise_suite of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._enterprise_suite

    @enterprise_suite.setter
    def enterprise_suite(self, enterprise_suite):
        """Sets the enterprise_suite of this InlineResponse200196Response.


        :param enterprise_suite: The enterprise_suite of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._enterprise_suite = enterprise_suite

    @property
    def language(self):
        """Gets the language of this InlineResponse200196Response.  # noqa: E501


        :return: The language of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this InlineResponse200196Response.


        :param language: The language of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def smb_ads(self):
        """Gets the smb_ads of this InlineResponse200196Response.  # noqa: E501


        :return: The smb_ads of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._smb_ads

    @smb_ads.setter
    def smb_ads(self, smb_ads):
        """Sets the smb_ads of this InlineResponse200196Response.


        :param smb_ads: The smb_ads of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._smb_ads = smb_ads

    @property
    def cpu_usage_alert(self):
        """Gets the cpu_usage_alert of this InlineResponse200196Response.  # noqa: E501


        :return: The cpu_usage_alert of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._cpu_usage_alert

    @cpu_usage_alert.setter
    def cpu_usage_alert(self, cpu_usage_alert):
        """Sets the cpu_usage_alert of this InlineResponse200196Response.


        :param cpu_usage_alert: The cpu_usage_alert of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._cpu_usage_alert = cpu_usage_alert

    @property
    def mem_usage_alert(self):
        """Gets the mem_usage_alert of this InlineResponse200196Response.  # noqa: E501


        :return: The mem_usage_alert of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._mem_usage_alert

    @mem_usage_alert.setter
    def mem_usage_alert(self, mem_usage_alert):
        """Sets the mem_usage_alert of this InlineResponse200196Response.


        :param mem_usage_alert: The mem_usage_alert of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._mem_usage_alert = mem_usage_alert

    @property
    def cpu_docker_usage_alert(self):
        """Gets the cpu_docker_usage_alert of this InlineResponse200196Response.  # noqa: E501


        :return: The cpu_docker_usage_alert of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._cpu_docker_usage_alert

    @cpu_docker_usage_alert.setter
    def cpu_docker_usage_alert(self, cpu_docker_usage_alert):
        """Sets the cpu_docker_usage_alert of this InlineResponse200196Response.


        :param cpu_docker_usage_alert: The cpu_docker_usage_alert of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._cpu_docker_usage_alert = cpu_docker_usage_alert

    @property
    def mem_docker_usage_alert(self):
        """Gets the mem_docker_usage_alert of this InlineResponse200196Response.  # noqa: E501


        :return: The mem_docker_usage_alert of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._mem_docker_usage_alert

    @mem_docker_usage_alert.setter
    def mem_docker_usage_alert(self, mem_docker_usage_alert):
        """Sets the mem_docker_usage_alert of this InlineResponse200196Response.


        :param mem_docker_usage_alert: The mem_docker_usage_alert of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._mem_docker_usage_alert = mem_docker_usage_alert

    @property
    def multi_zone(self):
        """Gets the multi_zone of this InlineResponse200196Response.  # noqa: E501


        :return: The multi_zone of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._multi_zone

    @multi_zone.setter
    def multi_zone(self, multi_zone):
        """Sets the multi_zone of this InlineResponse200196Response.


        :param multi_zone: The multi_zone of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._multi_zone = multi_zone

    @property
    def afa(self):
        """Gets the afa of this InlineResponse200196Response.  # noqa: E501


        :return: The afa of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._afa

    @afa.setter
    def afa(self, afa):
        """Sets the afa of this InlineResponse200196Response.


        :param afa: The afa of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._afa = afa

    @property
    def has_ipv6(self):
        """Gets the has_ipv6 of this InlineResponse200196Response.  # noqa: E501


        :return: The has_ipv6 of this InlineResponse200196Response.  # noqa: E501
        :rtype: bool
        """
        return self._has_ipv6

    @has_ipv6.setter
    def has_ipv6(self, has_ipv6):
        """Sets the has_ipv6 of this InlineResponse200196Response.


        :param has_ipv6: The has_ipv6 of this InlineResponse200196Response.  # noqa: E501
        :type: bool
        """

        self._has_ipv6 = has_ipv6

    @property
    def data_service_status(self):
        """Gets the data_service_status of this InlineResponse200196Response.  # noqa: E501


        :return: The data_service_status of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._data_service_status

    @data_service_status.setter
    def data_service_status(self, data_service_status):
        """Sets the data_service_status of this InlineResponse200196Response.


        :param data_service_status: The data_service_status of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._data_service_status = data_service_status

    @property
    def io_engine(self):
        """Gets the io_engine of this InlineResponse200196Response.  # noqa: E501


        :return: The io_engine of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._io_engine

    @io_engine.setter
    def io_engine(self, io_engine):
        """Sets the io_engine of this InlineResponse200196Response.


        :param io_engine: The io_engine of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._io_engine = io_engine

    @property
    def io_vcpus(self):
        """Gets the io_vcpus of this InlineResponse200196Response.  # noqa: E501


        :return: The io_vcpus of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._io_vcpus

    @io_vcpus.setter
    def io_vcpus(self, io_vcpus):
        """Sets the io_vcpus of this InlineResponse200196Response.


        :param io_vcpus: The io_vcpus of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._io_vcpus = io_vcpus

    @property
    def io_ram_mb(self):
        """Gets the io_ram_mb of this InlineResponse200196Response.  # noqa: E501


        :return: The io_ram_mb of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._io_ram_mb

    @io_ram_mb.setter
    def io_ram_mb(self, io_ram_mb):
        """Sets the io_ram_mb of this InlineResponse200196Response.


        :param io_ram_mb: The io_ram_mb of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._io_ram_mb = io_ram_mb

    @property
    def app_engine(self):
        """Gets the app_engine of this InlineResponse200196Response.  # noqa: E501


        :return: The app_engine of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._app_engine

    @app_engine.setter
    def app_engine(self, app_engine):
        """Sets the app_engine of this InlineResponse200196Response.


        :param app_engine: The app_engine of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._app_engine = app_engine

    @property
    def app_vcpus(self):
        """Gets the app_vcpus of this InlineResponse200196Response.  # noqa: E501


        :return: The app_vcpus of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._app_vcpus

    @app_vcpus.setter
    def app_vcpus(self, app_vcpus):
        """Sets the app_vcpus of this InlineResponse200196Response.


        :param app_vcpus: The app_vcpus of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._app_vcpus = app_vcpus

    @property
    def app_ram_mb(self):
        """Gets the app_ram_mb of this InlineResponse200196Response.  # noqa: E501


        :return: The app_ram_mb of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._app_ram_mb

    @app_ram_mb.setter
    def app_ram_mb(self, app_ram_mb):
        """Sets the app_ram_mb of this InlineResponse200196Response.


        :param app_ram_mb: The app_ram_mb of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._app_ram_mb = app_ram_mb

    @property
    def wwnn(self):
        """Gets the wwnn of this InlineResponse200196Response.  # noqa: E501


        :return: The wwnn of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._wwnn

    @wwnn.setter
    def wwnn(self, wwnn):
        """Sets the wwnn of this InlineResponse200196Response.


        :param wwnn: The wwnn of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._wwnn = wwnn

    @property
    def smb_netbios_name(self):
        """Gets the smb_netbios_name of this InlineResponse200196Response.  # noqa: E501


        :return: The smb_netbios_name of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._smb_netbios_name

    @smb_netbios_name.setter
    def smb_netbios_name(self, smb_netbios_name):
        """Sets the smb_netbios_name of this InlineResponse200196Response.


        :param smb_netbios_name: The smb_netbios_name of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._smb_netbios_name = smb_netbios_name

    @property
    def defrag_enable(self):
        """Gets the defrag_enable of this InlineResponse200196Response.  # noqa: E501


        :return: The defrag_enable of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._defrag_enable

    @defrag_enable.setter
    def defrag_enable(self, defrag_enable):
        """Sets the defrag_enable of this InlineResponse200196Response.


        :param defrag_enable: The defrag_enable of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._defrag_enable = defrag_enable

    @property
    def defrag_runtime(self):
        """Gets the defrag_runtime of this InlineResponse200196Response.  # noqa: E501


        :return: The defrag_runtime of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._defrag_runtime

    @defrag_runtime.setter
    def defrag_runtime(self, defrag_runtime):
        """Sets the defrag_runtime of this InlineResponse200196Response.


        :param defrag_runtime: The defrag_runtime of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._defrag_runtime = defrag_runtime

    @property
    def defrag_active(self):
        """Gets the defrag_active of this InlineResponse200196Response.  # noqa: E501


        :return: The defrag_active of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._defrag_active

    @defrag_active.setter
    def defrag_active(self, defrag_active):
        """Sets the defrag_active of this InlineResponse200196Response.


        :param defrag_active: The defrag_active of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._defrag_active = defrag_active

    @property
    def defrag_volumes_processed(self):
        """Gets the defrag_volumes_processed of this InlineResponse200196Response.  # noqa: E501


        :return: The defrag_volumes_processed of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._defrag_volumes_processed

    @defrag_volumes_processed.setter
    def defrag_volumes_processed(self, defrag_volumes_processed):
        """Sets the defrag_volumes_processed of this InlineResponse200196Response.


        :param defrag_volumes_processed: The defrag_volumes_processed of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._defrag_volumes_processed = defrag_volumes_processed

    @property
    def defrag_volumes_pending(self):
        """Gets the defrag_volumes_pending of this InlineResponse200196Response.  # noqa: E501


        :return: The defrag_volumes_pending of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._defrag_volumes_pending

    @defrag_volumes_pending.setter
    def defrag_volumes_pending(self, defrag_volumes_pending):
        """Sets the defrag_volumes_pending of this InlineResponse200196Response.


        :param defrag_volumes_pending: The defrag_volumes_pending of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._defrag_volumes_pending = defrag_volumes_pending

    @property
    def defrag_elapsed_time_sec(self):
        """Gets the defrag_elapsed_time_sec of this InlineResponse200196Response.  # noqa: E501


        :return: The defrag_elapsed_time_sec of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._defrag_elapsed_time_sec

    @defrag_elapsed_time_sec.setter
    def defrag_elapsed_time_sec(self, defrag_elapsed_time_sec):
        """Sets the defrag_elapsed_time_sec of this InlineResponse200196Response.


        :param defrag_elapsed_time_sec: The defrag_elapsed_time_sec of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._defrag_elapsed_time_sec = defrag_elapsed_time_sec

    @property
    def fs_trim_enable(self):
        """Gets the fs_trim_enable of this InlineResponse200196Response.  # noqa: E501


        :return: The fs_trim_enable of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._fs_trim_enable

    @fs_trim_enable.setter
    def fs_trim_enable(self, fs_trim_enable):
        """Sets the fs_trim_enable of this InlineResponse200196Response.


        :param fs_trim_enable: The fs_trim_enable of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._fs_trim_enable = fs_trim_enable

    @property
    def fs_trim_active(self):
        """Gets the fs_trim_active of this InlineResponse200196Response.  # noqa: E501


        :return: The fs_trim_active of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._fs_trim_active

    @fs_trim_active.setter
    def fs_trim_active(self, fs_trim_active):
        """Sets the fs_trim_active of this InlineResponse200196Response.


        :param fs_trim_active: The fs_trim_active of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._fs_trim_active = fs_trim_active

    @property
    def fs_trim_volumes_processed(self):
        """Gets the fs_trim_volumes_processed of this InlineResponse200196Response.  # noqa: E501


        :return: The fs_trim_volumes_processed of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._fs_trim_volumes_processed

    @fs_trim_volumes_processed.setter
    def fs_trim_volumes_processed(self, fs_trim_volumes_processed):
        """Sets the fs_trim_volumes_processed of this InlineResponse200196Response.


        :param fs_trim_volumes_processed: The fs_trim_volumes_processed of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._fs_trim_volumes_processed = fs_trim_volumes_processed

    @property
    def fs_trim_volumes_pending(self):
        """Gets the fs_trim_volumes_pending of this InlineResponse200196Response.  # noqa: E501


        :return: The fs_trim_volumes_pending of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._fs_trim_volumes_pending

    @fs_trim_volumes_pending.setter
    def fs_trim_volumes_pending(self, fs_trim_volumes_pending):
        """Sets the fs_trim_volumes_pending of this InlineResponse200196Response.


        :param fs_trim_volumes_pending: The fs_trim_volumes_pending of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._fs_trim_volumes_pending = fs_trim_volumes_pending

    @property
    def fs_trim_elapsed_time_sec(self):
        """Gets the fs_trim_elapsed_time_sec of this InlineResponse200196Response.  # noqa: E501


        :return: The fs_trim_elapsed_time_sec of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._fs_trim_elapsed_time_sec

    @fs_trim_elapsed_time_sec.setter
    def fs_trim_elapsed_time_sec(self, fs_trim_elapsed_time_sec):
        """Sets the fs_trim_elapsed_time_sec of this InlineResponse200196Response.


        :param fs_trim_elapsed_time_sec: The fs_trim_elapsed_time_sec of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._fs_trim_elapsed_time_sec = fs_trim_elapsed_time_sec

    @property
    def base_cache_gb(self):
        """Gets the base_cache_gb of this InlineResponse200196Response.  # noqa: E501


        :return: The base_cache_gb of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._base_cache_gb

    @base_cache_gb.setter
    def base_cache_gb(self, base_cache_gb):
        """Sets the base_cache_gb of this InlineResponse200196Response.


        :param base_cache_gb: The base_cache_gb of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._base_cache_gb = base_cache_gb

    @property
    def ext_cache_gb(self):
        """Gets the ext_cache_gb of this InlineResponse200196Response.  # noqa: E501


        :return: The ext_cache_gb of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._ext_cache_gb

    @ext_cache_gb.setter
    def ext_cache_gb(self, ext_cache_gb):
        """Sets the ext_cache_gb of this InlineResponse200196Response.


        :param ext_cache_gb: The ext_cache_gb of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._ext_cache_gb = ext_cache_gb

    @property
    def servers_monitor_state(self):
        """Gets the servers_monitor_state of this InlineResponse200196Response.  # noqa: E501


        :return: The servers_monitor_state of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._servers_monitor_state

    @servers_monitor_state.setter
    def servers_monitor_state(self, servers_monitor_state):
        """Sets the servers_monitor_state of this InlineResponse200196Response.


        :param servers_monitor_state: The servers_monitor_state of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._servers_monitor_state = servers_monitor_state

    @property
    def servers_monitor_ping_count(self):
        """Gets the servers_monitor_ping_count of this InlineResponse200196Response.  # noqa: E501


        :return: The servers_monitor_ping_count of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._servers_monitor_ping_count

    @servers_monitor_ping_count.setter
    def servers_monitor_ping_count(self, servers_monitor_ping_count):
        """Sets the servers_monitor_ping_count of this InlineResponse200196Response.


        :param servers_monitor_ping_count: The servers_monitor_ping_count of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._servers_monitor_ping_count = servers_monitor_ping_count

    @property
    def servers_monitor_success_count(self):
        """Gets the servers_monitor_success_count of this InlineResponse200196Response.  # noqa: E501


        :return: The servers_monitor_success_count of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._servers_monitor_success_count

    @servers_monitor_success_count.setter
    def servers_monitor_success_count(self, servers_monitor_success_count):
        """Sets the servers_monitor_success_count of this InlineResponse200196Response.


        :param servers_monitor_success_count: The servers_monitor_success_count of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._servers_monitor_success_count = servers_monitor_success_count

    @property
    def volume_default_mount_sync(self):
        """Gets the volume_default_mount_sync of this InlineResponse200196Response.  # noqa: E501


        :return: The volume_default_mount_sync of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._volume_default_mount_sync

    @volume_default_mount_sync.setter
    def volume_default_mount_sync(self, volume_default_mount_sync):
        """Sets the volume_default_mount_sync of this InlineResponse200196Response.


        :param volume_default_mount_sync: The volume_default_mount_sync of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._volume_default_mount_sync = volume_default_mount_sync

    @property
    def volume_default_atime_update(self):
        """Gets the volume_default_atime_update of this InlineResponse200196Response.  # noqa: E501


        :return: The volume_default_atime_update of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._volume_default_atime_update

    @volume_default_atime_update.setter
    def volume_default_atime_update(self, volume_default_atime_update):
        """Sets the volume_default_atime_update of this InlineResponse200196Response.


        :param volume_default_atime_update: The volume_default_atime_update of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._volume_default_atime_update = volume_default_atime_update

    @property
    def remote_vpsa_failure_rate_limit(self):
        """Gets the remote_vpsa_failure_rate_limit of this InlineResponse200196Response.  # noqa: E501


        :return: The remote_vpsa_failure_rate_limit of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._remote_vpsa_failure_rate_limit

    @remote_vpsa_failure_rate_limit.setter
    def remote_vpsa_failure_rate_limit(self, remote_vpsa_failure_rate_limit):
        """Sets the remote_vpsa_failure_rate_limit of this InlineResponse200196Response.


        :param remote_vpsa_failure_rate_limit: The remote_vpsa_failure_rate_limit of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._remote_vpsa_failure_rate_limit = remote_vpsa_failure_rate_limit

    @property
    def last_vpsa_request(self):
        """Gets the last_vpsa_request of this InlineResponse200196Response.  # noqa: E501


        :return: The last_vpsa_request of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._last_vpsa_request

    @last_vpsa_request.setter
    def last_vpsa_request(self, last_vpsa_request):
        """Sets the last_vpsa_request of this InlineResponse200196Response.


        :param last_vpsa_request: The last_vpsa_request of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._last_vpsa_request = last_vpsa_request

    @property
    def vpsa_request_status(self):
        """Gets the vpsa_request_status of this InlineResponse200196Response.  # noqa: E501


        :return: The vpsa_request_status of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_request_status

    @vpsa_request_status.setter
    def vpsa_request_status(self, vpsa_request_status):
        """Sets the vpsa_request_status of this InlineResponse200196Response.


        :param vpsa_request_status: The vpsa_request_status of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._vpsa_request_status = vpsa_request_status

    @property
    def pool_types_count(self):
        """Gets the pool_types_count of this InlineResponse200196Response.  # noqa: E501


        :return: The pool_types_count of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._pool_types_count

    @pool_types_count.setter
    def pool_types_count(self, pool_types_count):
        """Sets the pool_types_count of this InlineResponse200196Response.


        :param pool_types_count: The pool_types_count of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._pool_types_count = pool_types_count

    @property
    def pool_types(self):
        """Gets the pool_types of this InlineResponse200196Response.  # noqa: E501


        :return: The pool_types of this InlineResponse200196Response.  # noqa: E501
        :rtype: list[str]
        """
        return self._pool_types

    @pool_types.setter
    def pool_types(self, pool_types):
        """Sets the pool_types of this InlineResponse200196Response.


        :param pool_types: The pool_types of this InlineResponse200196Response.  # noqa: E501
        :type: list[str]
        """

        self._pool_types = pool_types

    @property
    def manage_externally(self):
        """Gets the manage_externally of this InlineResponse200196Response.  # noqa: E501


        :return: The manage_externally of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._manage_externally

    @manage_externally.setter
    def manage_externally(self, manage_externally):
        """Sets the manage_externally of this InlineResponse200196Response.


        :param manage_externally: The manage_externally of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._manage_externally = manage_externally

    @property
    def delete_snapshots_in_emergency(self):
        """Gets the delete_snapshots_in_emergency of this InlineResponse200196Response.  # noqa: E501


        :return: The delete_snapshots_in_emergency of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._delete_snapshots_in_emergency

    @delete_snapshots_in_emergency.setter
    def delete_snapshots_in_emergency(self, delete_snapshots_in_emergency):
        """Sets the delete_snapshots_in_emergency of this InlineResponse200196Response.


        :param delete_snapshots_in_emergency: The delete_snapshots_in_emergency of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._delete_snapshots_in_emergency = delete_snapshots_in_emergency

    @property
    def smb_charset_count(self):
        """Gets the smb_charset_count of this InlineResponse200196Response.  # noqa: E501


        :return: The smb_charset_count of this InlineResponse200196Response.  # noqa: E501
        :rtype: int
        """
        return self._smb_charset_count

    @smb_charset_count.setter
    def smb_charset_count(self, smb_charset_count):
        """Sets the smb_charset_count of this InlineResponse200196Response.


        :param smb_charset_count: The smb_charset_count of this InlineResponse200196Response.  # noqa: E501
        :type: int
        """

        self._smb_charset_count = smb_charset_count

    @property
    def smb_charsets(self):
        """Gets the smb_charsets of this InlineResponse200196Response.  # noqa: E501


        :return: The smb_charsets of this InlineResponse200196Response.  # noqa: E501
        :rtype: list[str]
        """
        return self._smb_charsets

    @smb_charsets.setter
    def smb_charsets(self, smb_charsets):
        """Sets the smb_charsets of this InlineResponse200196Response.


        :param smb_charsets: The smb_charsets of this InlineResponse200196Response.  # noqa: E501
        :type: list[str]
        """

        self._smb_charsets = smb_charsets

    @property
    def admin_access_enabled(self):
        """Gets the admin_access_enabled of this InlineResponse200196Response.  # noqa: E501


        :return: The admin_access_enabled of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._admin_access_enabled

    @admin_access_enabled.setter
    def admin_access_enabled(self, admin_access_enabled):
        """Sets the admin_access_enabled of this InlineResponse200196Response.


        :param admin_access_enabled: The admin_access_enabled of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._admin_access_enabled = admin_access_enabled

    @property
    def is_support_privilege_access_enabled(self):
        """Gets the is_support_privilege_access_enabled of this InlineResponse200196Response.  # noqa: E501


        :return: The is_support_privilege_access_enabled of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._is_support_privilege_access_enabled

    @is_support_privilege_access_enabled.setter
    def is_support_privilege_access_enabled(self, is_support_privilege_access_enabled):
        """Sets the is_support_privilege_access_enabled of this InlineResponse200196Response.


        :param is_support_privilege_access_enabled: The is_support_privilege_access_enabled of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._is_support_privilege_access_enabled = is_support_privilege_access_enabled

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200196Response.  # noqa: E501


        :return: The created_at of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200196Response.


        :param created_at: The created_at of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InlineResponse200196Response.  # noqa: E501


        :return: The modified_at of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InlineResponse200196Response.


        :param modified_at: The modified_at of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def service_mode(self):
        """Gets the service_mode of this InlineResponse200196Response.  # noqa: E501


        :return: The service_mode of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._service_mode

    @service_mode.setter
    def service_mode(self, service_mode):
        """Sets the service_mode of this InlineResponse200196Response.


        :param service_mode: The service_mode of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._service_mode = service_mode

    @property
    def expire_password(self):
        """Gets the expire_password of this InlineResponse200196Response.  # noqa: E501


        :return: The expire_password of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._expire_password

    @expire_password.setter
    def expire_password(self, expire_password):
        """Sets the expire_password of this InlineResponse200196Response.


        :param expire_password: The expire_password of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._expire_password = expire_password

    @property
    def expire_password_after(self):
        """Gets the expire_password_after of this InlineResponse200196Response.  # noqa: E501


        :return: The expire_password_after of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._expire_password_after

    @expire_password_after.setter
    def expire_password_after(self, expire_password_after):
        """Sets the expire_password_after of this InlineResponse200196Response.


        :param expire_password_after: The expire_password_after of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._expire_password_after = expire_password_after

    @property
    def min_password_length(self):
        """Gets the min_password_length of this InlineResponse200196Response.  # noqa: E501


        :return: The min_password_length of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._min_password_length

    @min_password_length.setter
    def min_password_length(self, min_password_length):
        """Sets the min_password_length of this InlineResponse200196Response.


        :param min_password_length: The min_password_length of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._min_password_length = min_password_length

    @property
    def password_must_contain_letters(self):
        """Gets the password_must_contain_letters of this InlineResponse200196Response.  # noqa: E501


        :return: The password_must_contain_letters of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._password_must_contain_letters

    @password_must_contain_letters.setter
    def password_must_contain_letters(self, password_must_contain_letters):
        """Sets the password_must_contain_letters of this InlineResponse200196Response.


        :param password_must_contain_letters: The password_must_contain_letters of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._password_must_contain_letters = password_must_contain_letters

    @property
    def password_must_contain_numbers(self):
        """Gets the password_must_contain_numbers of this InlineResponse200196Response.  # noqa: E501


        :return: The password_must_contain_numbers of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._password_must_contain_numbers

    @password_must_contain_numbers.setter
    def password_must_contain_numbers(self, password_must_contain_numbers):
        """Sets the password_must_contain_numbers of this InlineResponse200196Response.


        :param password_must_contain_numbers: The password_must_contain_numbers of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._password_must_contain_numbers = password_must_contain_numbers

    @property
    def password_must_contain_uppercase_letters(self):
        """Gets the password_must_contain_uppercase_letters of this InlineResponse200196Response.  # noqa: E501


        :return: The password_must_contain_uppercase_letters of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._password_must_contain_uppercase_letters

    @password_must_contain_uppercase_letters.setter
    def password_must_contain_uppercase_letters(self, password_must_contain_uppercase_letters):
        """Sets the password_must_contain_uppercase_letters of this InlineResponse200196Response.


        :param password_must_contain_uppercase_letters: The password_must_contain_uppercase_letters of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._password_must_contain_uppercase_letters = password_must_contain_uppercase_letters

    @property
    def password_must_contain_special_characters(self):
        """Gets the password_must_contain_special_characters of this InlineResponse200196Response.  # noqa: E501


        :return: The password_must_contain_special_characters of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._password_must_contain_special_characters

    @password_must_contain_special_characters.setter
    def password_must_contain_special_characters(self, password_must_contain_special_characters):
        """Sets the password_must_contain_special_characters of this InlineResponse200196Response.


        :param password_must_contain_special_characters: The password_must_contain_special_characters of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._password_must_contain_special_characters = password_must_contain_special_characters

    @property
    def password_requirements_text(self):
        """Gets the password_requirements_text of this InlineResponse200196Response.  # noqa: E501


        :return: The password_requirements_text of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._password_requirements_text

    @password_requirements_text.setter
    def password_requirements_text(self, password_requirements_text):
        """Sets the password_requirements_text of this InlineResponse200196Response.


        :param password_requirements_text: The password_requirements_text of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._password_requirements_text = password_requirements_text

    @property
    def password_history(self):
        """Gets the password_history of this InlineResponse200196Response.  # noqa: E501


        :return: The password_history of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._password_history

    @password_history.setter
    def password_history(self, password_history):
        """Sets the password_history of this InlineResponse200196Response.


        :param password_history: The password_history of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._password_history = password_history

    @property
    def legacy_otp_secret(self):
        """Gets the legacy_otp_secret of this InlineResponse200196Response.  # noqa: E501


        :return: The legacy_otp_secret of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._legacy_otp_secret

    @legacy_otp_secret.setter
    def legacy_otp_secret(self, legacy_otp_secret):
        """Sets the legacy_otp_secret of this InlineResponse200196Response.


        :param legacy_otp_secret: The legacy_otp_secret of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._legacy_otp_secret = legacy_otp_secret

    @property
    def vpsa_chap_user(self):
        """Gets the vpsa_chap_user of this InlineResponse200196Response.  # noqa: E501


        :return: The vpsa_chap_user of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_chap_user

    @vpsa_chap_user.setter
    def vpsa_chap_user(self, vpsa_chap_user):
        """Sets the vpsa_chap_user of this InlineResponse200196Response.


        :param vpsa_chap_user: The vpsa_chap_user of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._vpsa_chap_user = vpsa_chap_user

    @property
    def vpsa_chap_secret(self):
        """Gets the vpsa_chap_secret of this InlineResponse200196Response.  # noqa: E501


        :return: The vpsa_chap_secret of this InlineResponse200196Response.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_chap_secret

    @vpsa_chap_secret.setter
    def vpsa_chap_secret(self, vpsa_chap_secret):
        """Sets the vpsa_chap_secret of this InlineResponse200196Response.


        :param vpsa_chap_secret: The vpsa_chap_secret of this InlineResponse200196Response.  # noqa: E501
        :type: str
        """

        self._vpsa_chap_secret = vpsa_chap_secret

    @property
    def internet_access(self):
        """Gets the internet_access of this InlineResponse200196Response.  # noqa: E501


        :return: The internet_access of this InlineResponse200196Response.  # noqa: E501
        :rtype: bool
        """
        return self._internet_access

    @internet_access.setter
    def internet_access(self, internet_access):
        """Sets the internet_access of this InlineResponse200196Response.


        :param internet_access: The internet_access of this InlineResponse200196Response.  # noqa: E501
        :type: bool
        """

        self._internet_access = internet_access

    @property
    def tiering_support(self):
        """Gets the tiering_support of this InlineResponse200196Response.  # noqa: E501


        :return: The tiering_support of this InlineResponse200196Response.  # noqa: E501
        :rtype: bool
        """
        return self._tiering_support

    @tiering_support.setter
    def tiering_support(self, tiering_support):
        """Sets the tiering_support of this InlineResponse200196Response.


        :param tiering_support: The tiering_support of this InlineResponse200196Response.  # noqa: E501
        :type: bool
        """

        self._tiering_support = tiering_support

    @property
    def flc_policy_managemnt(self):
        """Gets the flc_policy_managemnt of this InlineResponse200196Response.  # noqa: E501


        :return: The flc_policy_managemnt of this InlineResponse200196Response.  # noqa: E501
        :rtype: bool
        """
        return self._flc_policy_managemnt

    @flc_policy_managemnt.setter
    def flc_policy_managemnt(self, flc_policy_managemnt):
        """Sets the flc_policy_managemnt of this InlineResponse200196Response.


        :param flc_policy_managemnt: The flc_policy_managemnt of this InlineResponse200196Response.  # noqa: E501
        :type: bool
        """

        self._flc_policy_managemnt = flc_policy_managemnt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200196Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200196Response):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200196Response):
            return True

        return self.to_dict() != other.to_dict()
