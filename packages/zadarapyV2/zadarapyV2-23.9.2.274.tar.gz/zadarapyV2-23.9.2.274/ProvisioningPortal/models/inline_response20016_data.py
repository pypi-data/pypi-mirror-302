# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class InlineResponse20016Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'int',
        'username': 'str',
        'name': 'str',
        'provider_id': 'int',
        'internal_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'username': 'username',
        'name': 'name',
        'provider_id': 'provider_id',
        'internal_id': 'internal_id'
    }

    def __init__(self, id=None, user_id=None, username=None, name=None, provider_id=None, internal_id=None, _configuration=None):  # noqa: E501
        """InlineResponse20016Data - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user_id = None
        self._username = None
        self._name = None
        self._provider_id = None
        self._internal_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username
        if name is not None:
            self.name = name
        if provider_id is not None:
            self.provider_id = provider_id
        if internal_id is not None:
            self.internal_id = internal_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20016Data.  # noqa: E501


        :return: The id of this InlineResponse20016Data.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20016Data.


        :param id: The id of this InlineResponse20016Data.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse20016Data.  # noqa: E501


        :return: The user_id of this InlineResponse20016Data.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse20016Data.


        :param user_id: The user_id of this InlineResponse20016Data.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this InlineResponse20016Data.  # noqa: E501


        :return: The username of this InlineResponse20016Data.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InlineResponse20016Data.


        :param username: The username of this InlineResponse20016Data.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def name(self):
        """Gets the name of this InlineResponse20016Data.  # noqa: E501


        :return: The name of this InlineResponse20016Data.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20016Data.


        :param name: The name of this InlineResponse20016Data.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def provider_id(self):
        """Gets the provider_id of this InlineResponse20016Data.  # noqa: E501


        :return: The provider_id of this InlineResponse20016Data.  # noqa: E501
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this InlineResponse20016Data.


        :param provider_id: The provider_id of this InlineResponse20016Data.  # noqa: E501
        :type: int
        """

        self._provider_id = provider_id

    @property
    def internal_id(self):
        """Gets the internal_id of this InlineResponse20016Data.  # noqa: E501


        :return: The internal_id of this InlineResponse20016Data.  # noqa: E501
        :rtype: int
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this InlineResponse20016Data.


        :param internal_id: The internal_id of this InlineResponse20016Data.  # noqa: E501
        :type: int
        """

        self._internal_id = internal_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20016Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20016Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20016Data):
            return True

        return self.to_dict() != other.to_dict()
