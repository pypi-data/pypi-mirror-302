# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class VpsaPool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'status': 'str',
        'type': 'str',
        'cache': 'str',
        'capacity': 'str',
        'available_capacity': 'str',
        'used_capacity': 'str',
        'capacity_mode': 'str'
    }

    attribute_map = {
        'name': 'name',
        'status': 'status',
        'type': 'type',
        'cache': 'cache',
        'capacity': 'capacity',
        'available_capacity': 'available_capacity',
        'used_capacity': 'used_capacity',
        'capacity_mode': 'capacity_mode'
    }

    def __init__(self, name=None, status=None, type=None, cache=None, capacity=None, available_capacity=None, used_capacity=None, capacity_mode=None, _configuration=None):  # noqa: E501
        """VpsaPool - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._status = None
        self._type = None
        self._cache = None
        self._capacity = None
        self._available_capacity = None
        self._used_capacity = None
        self._capacity_mode = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if cache is not None:
            self.cache = cache
        if capacity is not None:
            self.capacity = capacity
        if available_capacity is not None:
            self.available_capacity = available_capacity
        if used_capacity is not None:
            self.used_capacity = used_capacity
        if capacity_mode is not None:
            self.capacity_mode = capacity_mode

    @property
    def name(self):
        """Gets the name of this VpsaPool.  # noqa: E501


        :return: The name of this VpsaPool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VpsaPool.


        :param name: The name of this VpsaPool.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this VpsaPool.  # noqa: E501


        :return: The status of this VpsaPool.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VpsaPool.


        :param status: The status of this VpsaPool.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this VpsaPool.  # noqa: E501


        :return: The type of this VpsaPool.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VpsaPool.


        :param type: The type of this VpsaPool.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def cache(self):
        """Gets the cache of this VpsaPool.  # noqa: E501


        :return: The cache of this VpsaPool.  # noqa: E501
        :rtype: str
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this VpsaPool.


        :param cache: The cache of this VpsaPool.  # noqa: E501
        :type: str
        """

        self._cache = cache

    @property
    def capacity(self):
        """Gets the capacity of this VpsaPool.  # noqa: E501


        :return: The capacity of this VpsaPool.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this VpsaPool.


        :param capacity: The capacity of this VpsaPool.  # noqa: E501
        :type: str
        """

        self._capacity = capacity

    @property
    def available_capacity(self):
        """Gets the available_capacity of this VpsaPool.  # noqa: E501


        :return: The available_capacity of this VpsaPool.  # noqa: E501
        :rtype: str
        """
        return self._available_capacity

    @available_capacity.setter
    def available_capacity(self, available_capacity):
        """Sets the available_capacity of this VpsaPool.


        :param available_capacity: The available_capacity of this VpsaPool.  # noqa: E501
        :type: str
        """

        self._available_capacity = available_capacity

    @property
    def used_capacity(self):
        """Gets the used_capacity of this VpsaPool.  # noqa: E501


        :return: The used_capacity of this VpsaPool.  # noqa: E501
        :rtype: str
        """
        return self._used_capacity

    @used_capacity.setter
    def used_capacity(self, used_capacity):
        """Sets the used_capacity of this VpsaPool.


        :param used_capacity: The used_capacity of this VpsaPool.  # noqa: E501
        :type: str
        """

        self._used_capacity = used_capacity

    @property
    def capacity_mode(self):
        """Gets the capacity_mode of this VpsaPool.  # noqa: E501


        :return: The capacity_mode of this VpsaPool.  # noqa: E501
        :rtype: str
        """
        return self._capacity_mode

    @capacity_mode.setter
    def capacity_mode(self, capacity_mode):
        """Sets the capacity_mode of this VpsaPool.


        :param capacity_mode: The capacity_mode of this VpsaPool.  # noqa: E501
        :type: str
        """

        self._capacity_mode = capacity_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VpsaPool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VpsaPool):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VpsaPool):
            return True

        return self.to_dict() != other.to_dict()
