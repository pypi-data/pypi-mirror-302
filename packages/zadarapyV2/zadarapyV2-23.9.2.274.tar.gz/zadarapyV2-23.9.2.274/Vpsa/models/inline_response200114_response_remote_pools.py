# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200114ResponseRemotePools(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'remote_display_name': 'str',
        'capacity': 'str',
        'free_capacity': 'str',
        'mode': 'str',
        'stripe_size': 'str',
        'version': 'str'
    }

    attribute_map = {
        'name': 'name',
        'remote_display_name': 'remote_display_name',
        'capacity': 'capacity',
        'free_capacity': 'free_capacity',
        'mode': 'mode',
        'stripe_size': 'stripe_size',
        'version': 'version'
    }

    def __init__(self, name=None, remote_display_name=None, capacity=None, free_capacity=None, mode=None, stripe_size=None, version=None, _configuration=None):  # noqa: E501
        """InlineResponse200114ResponseRemotePools - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._remote_display_name = None
        self._capacity = None
        self._free_capacity = None
        self._mode = None
        self._stripe_size = None
        self._version = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if remote_display_name is not None:
            self.remote_display_name = remote_display_name
        if capacity is not None:
            self.capacity = capacity
        if free_capacity is not None:
            self.free_capacity = free_capacity
        if mode is not None:
            self.mode = mode
        if stripe_size is not None:
            self.stripe_size = stripe_size
        if version is not None:
            self.version = version

    @property
    def name(self):
        """Gets the name of this InlineResponse200114ResponseRemotePools.  # noqa: E501


        :return: The name of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200114ResponseRemotePools.


        :param name: The name of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def remote_display_name(self):
        """Gets the remote_display_name of this InlineResponse200114ResponseRemotePools.  # noqa: E501


        :return: The remote_display_name of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :rtype: str
        """
        return self._remote_display_name

    @remote_display_name.setter
    def remote_display_name(self, remote_display_name):
        """Sets the remote_display_name of this InlineResponse200114ResponseRemotePools.


        :param remote_display_name: The remote_display_name of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :type: str
        """

        self._remote_display_name = remote_display_name

    @property
    def capacity(self):
        """Gets the capacity of this InlineResponse200114ResponseRemotePools.  # noqa: E501


        :return: The capacity of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this InlineResponse200114ResponseRemotePools.


        :param capacity: The capacity of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :type: str
        """

        self._capacity = capacity

    @property
    def free_capacity(self):
        """Gets the free_capacity of this InlineResponse200114ResponseRemotePools.  # noqa: E501


        :return: The free_capacity of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :rtype: str
        """
        return self._free_capacity

    @free_capacity.setter
    def free_capacity(self, free_capacity):
        """Sets the free_capacity of this InlineResponse200114ResponseRemotePools.


        :param free_capacity: The free_capacity of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :type: str
        """

        self._free_capacity = free_capacity

    @property
    def mode(self):
        """Gets the mode of this InlineResponse200114ResponseRemotePools.  # noqa: E501


        :return: The mode of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this InlineResponse200114ResponseRemotePools.


        :param mode: The mode of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def stripe_size(self):
        """Gets the stripe_size of this InlineResponse200114ResponseRemotePools.  # noqa: E501


        :return: The stripe_size of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :rtype: str
        """
        return self._stripe_size

    @stripe_size.setter
    def stripe_size(self, stripe_size):
        """Sets the stripe_size of this InlineResponse200114ResponseRemotePools.


        :param stripe_size: The stripe_size of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :type: str
        """

        self._stripe_size = stripe_size

    @property
    def version(self):
        """Gets the version of this InlineResponse200114ResponseRemotePools.  # noqa: E501


        :return: The version of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse200114ResponseRemotePools.


        :param version: The version of this InlineResponse200114ResponseRemotePools.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200114ResponseRemotePools, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200114ResponseRemotePools):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200114ResponseRemotePools):
            return True

        return self.to_dict() != other.to_dict()
