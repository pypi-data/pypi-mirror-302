# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse200103CapacityTrend(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'used': 'list[float]',
        'dates': 'InlineResponse200103CapacityTrendDates',
        'categories': 'list[str]',
        'total': 'list[float]',
        'metadata': 'list[float]'
    }

    attribute_map = {
        'used': 'used',
        'dates': 'dates',
        'categories': 'categories',
        'total': 'total',
        'metadata': 'metadata'
    }

    def __init__(self, used=None, dates=None, categories=None, total=None, metadata=None, _configuration=None):  # noqa: E501
        """InlineResponse200103CapacityTrend - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._used = None
        self._dates = None
        self._categories = None
        self._total = None
        self._metadata = None
        self.discriminator = None

        if used is not None:
            self.used = used
        if dates is not None:
            self.dates = dates
        if categories is not None:
            self.categories = categories
        if total is not None:
            self.total = total
        if metadata is not None:
            self.metadata = metadata

    @property
    def used(self):
        """Gets the used of this InlineResponse200103CapacityTrend.  # noqa: E501


        :return: The used of this InlineResponse200103CapacityTrend.  # noqa: E501
        :rtype: list[float]
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this InlineResponse200103CapacityTrend.


        :param used: The used of this InlineResponse200103CapacityTrend.  # noqa: E501
        :type: list[float]
        """

        self._used = used

    @property
    def dates(self):
        """Gets the dates of this InlineResponse200103CapacityTrend.  # noqa: E501


        :return: The dates of this InlineResponse200103CapacityTrend.  # noqa: E501
        :rtype: InlineResponse200103CapacityTrendDates
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """Sets the dates of this InlineResponse200103CapacityTrend.


        :param dates: The dates of this InlineResponse200103CapacityTrend.  # noqa: E501
        :type: InlineResponse200103CapacityTrendDates
        """

        self._dates = dates

    @property
    def categories(self):
        """Gets the categories of this InlineResponse200103CapacityTrend.  # noqa: E501


        :return: The categories of this InlineResponse200103CapacityTrend.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this InlineResponse200103CapacityTrend.


        :param categories: The categories of this InlineResponse200103CapacityTrend.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def total(self):
        """Gets the total of this InlineResponse200103CapacityTrend.  # noqa: E501


        :return: The total of this InlineResponse200103CapacityTrend.  # noqa: E501
        :rtype: list[float]
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InlineResponse200103CapacityTrend.


        :param total: The total of this InlineResponse200103CapacityTrend.  # noqa: E501
        :type: list[float]
        """

        self._total = total

    @property
    def metadata(self):
        """Gets the metadata of this InlineResponse200103CapacityTrend.  # noqa: E501


        :return: The metadata of this InlineResponse200103CapacityTrend.  # noqa: E501
        :rtype: list[float]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this InlineResponse200103CapacityTrend.


        :param metadata: The metadata of this InlineResponse200103CapacityTrend.  # noqa: E501
        :type: list[float]
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200103CapacityTrend, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200103CapacityTrend):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200103CapacityTrend):
            return True

        return self.to_dict() != other.to_dict()
