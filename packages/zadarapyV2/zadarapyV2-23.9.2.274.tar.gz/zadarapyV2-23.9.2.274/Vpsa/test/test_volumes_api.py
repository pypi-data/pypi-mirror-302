# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import Vpsa
from Vpsa.api.volumes_api import VolumesApi  # noqa: E501
from Vpsa.rest import ApiException


class TestVolumesApi(unittest.TestCase):
    """VolumesApi unit test stubs"""

    def setUp(self):
        self.api = Vpsa.api.volumes_api.VolumesApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_directories_to_quota_project(self):
        """Test case for add_directories_to_quota_project

        """
        pass

    def test_add_quota_limit(self):
        """Test case for add_quota_limit

        """
        pass

    def test_add_secondary_export_name(self):
        """Test case for add_secondary_export_name

        """
        pass

    def test_attach_snapshot_policy(self):
        """Test case for attach_snapshot_policy

        """
        pass

    def test_cancel_volume_migration(self):
        """Test case for cancel_volume_migration

        """
        pass

    def test_create_clone(self):
        """Test case for create_clone

        """
        pass

    def test_create_quota_project(self):
        """Test case for create_quota_project

        """
        pass

    def test_create_volume(self):
        """Test case for create_volume

        """
        pass

    def test_create_volume_mirror(self):
        """Test case for create_volume_mirror

        """
        pass

    def test_create_volume_snapshot(self):
        """Test case for create_volume_snapshot

        """
        pass

    def test_create_volume_tag(self):
        """Test case for create_volume_tag

        """
        pass

    def test_delete_quota_project(self):
        """Test case for delete_quota_project

        """
        pass

    def test_delete_secondary_export_name(self):
        """Test case for delete_secondary_export_name

        """
        pass

    def test_delete_volume(self):
        """Test case for delete_volume

        """
        pass

    def test_delete_volume_file_history(self):
        """Test case for delete_volume_file_history

        """
        pass

    def test_delete_volume_from_recycle_bin(self):
        """Test case for delete_volume_from_recycle_bin

        """
        pass

    def test_delete_volume_snapshot(self):
        """Test case for delete_volume_snapshot

        """
        pass

    def test_delete_volume_tag(self):
        """Test case for delete_volume_tag

        """
        pass

    def test_detach_servers_from_volume(self):
        """Test case for detach_servers_from_volume

        """
        pass

    def test_detach_snapshot_policy(self):
        """Test case for detach_snapshot_policy

        """
        pass

    def test_dump_quotas_file(self):
        """Test case for dump_quotas_file

        """
        pass

    def test_dump_quotas_state(self):
        """Test case for dump_quotas_state

        """
        pass

    def test_expand_volume(self):
        """Test case for expand_volume

        """
        pass

    def test_fetch_volume_quotas(self):
        """Test case for fetch_volume_quotas

        """
        pass

    def test_get_all_snapshots(self):
        """Test case for get_all_snapshots

        """
        pass

    def test_get_free_volumes(self):
        """Test case for get_free_volumes

        """
        pass

    def test_get_quota_projects(self):
        """Test case for get_quota_projects

        """
        pass

    def test_get_servers_attached_to_volume(self):
        """Test case for get_servers_attached_to_volume

        """
        pass

    def test_get_snapshot(self):
        """Test case for get_snapshot

        """
        pass

    def test_get_vol_tags(self):
        """Test case for get_vol_tags

        """
        pass

    def test_get_vols_file_access_auditing_log_time(self):
        """Test case for get_vols_file_access_auditing_log_time

        """
        pass

    def test_get_vols_file_access_auditing_log_time_zip(self):
        """Test case for get_vols_file_access_auditing_log_time_zip

        """
        pass

    def test_get_volume(self):
        """Test case for get_volume

        """
        pass

    def test_get_volume_attached_snapshot_policies(self):
        """Test case for get_volume_attached_snapshot_policies

        """
        pass

    def test_get_volume_file_history(self):
        """Test case for get_volume_file_history

        """
        pass

    def test_get_volume_migration(self):
        """Test case for get_volume_migration

        """
        pass

    def test_get_volume_performance(self):
        """Test case for get_volume_performance

        """
        pass

    def test_get_volume_quota(self):
        """Test case for get_volume_quota

        """
        pass

    def test_import_volume_quotas(self):
        """Test case for import_volume_quotas

        """
        pass

    def test_migrate_volume(self):
        """Test case for migrate_volume

        """
        pass

    def test_pause_volume_migration(self):
        """Test case for pause_volume_migration

        """
        pass

    def test_pause_volume_snapshot_policy(self):
        """Test case for pause_volume_snapshot_policy

        """
        pass

    def test_remove_directories_from_quota_project(self):
        """Test case for remove_directories_from_quota_project

        """
        pass

    def test_rename_volume(self):
        """Test case for rename_volume

        """
        pass

    def test_resume_volume_migration(self):
        """Test case for resume_volume_migration

        """
        pass

    def test_set_volume_attach_permissions(self):
        """Test case for set_volume_attach_permissions

        """
        pass

    def test_set_volume_export_name(self):
        """Test case for set_volume_export_name

        """
        pass

    def test_show_all_volumes(self):
        """Test case for show_all_volumes

        """
        pass

    def test_show_volumes(self):
        """Test case for show_volumes

        """
        pass

    def test_update_protection(self):
        """Test case for update_protection

        """
        pass

    def test_update_vol_perf_threshold(self):
        """Test case for update_vol_perf_threshold

        """
        pass

    def test_update_volume_nas_options(self):
        """Test case for update_volume_nas_options

        """
        pass

    def test_update_volume_quotas_state(self):
        """Test case for update_volume_quotas_state

        """
        pass

    def test_update_volume_tag(self):
        """Test case for update_volume_tag

        """
        pass


if __name__ == '__main__':
    unittest.main()
