# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200200ResponseFlc(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_enabled': 'str',
        'state': 'str',
        'is_paused': 'str',
        'volume_default': 'str',
        'policy_start_time': 'str',
        'policy_interval': 'str',
        'recycle_bin_retention_time': 'str'
    }

    attribute_map = {
        'is_enabled': 'is_enabled',
        'state': 'state',
        'is_paused': 'is_paused',
        'volume_default': 'volume_default',
        'policy_start_time': 'policy_start_time',
        'policy_interval': 'policy_interval',
        'recycle_bin_retention_time': 'recycle_bin_retention_time'
    }

    def __init__(self, is_enabled=None, state=None, is_paused=None, volume_default=None, policy_start_time=None, policy_interval=None, recycle_bin_retention_time=None, _configuration=None):  # noqa: E501
        """InlineResponse200200ResponseFlc - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_enabled = None
        self._state = None
        self._is_paused = None
        self._volume_default = None
        self._policy_start_time = None
        self._policy_interval = None
        self._recycle_bin_retention_time = None
        self.discriminator = None

        if is_enabled is not None:
            self.is_enabled = is_enabled
        if state is not None:
            self.state = state
        if is_paused is not None:
            self.is_paused = is_paused
        if volume_default is not None:
            self.volume_default = volume_default
        if policy_start_time is not None:
            self.policy_start_time = policy_start_time
        if policy_interval is not None:
            self.policy_interval = policy_interval
        if recycle_bin_retention_time is not None:
            self.recycle_bin_retention_time = recycle_bin_retention_time

    @property
    def is_enabled(self):
        """Gets the is_enabled of this InlineResponse200200ResponseFlc.  # noqa: E501


        :return: The is_enabled of this InlineResponse200200ResponseFlc.  # noqa: E501
        :rtype: str
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this InlineResponse200200ResponseFlc.


        :param is_enabled: The is_enabled of this InlineResponse200200ResponseFlc.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                is_enabled not in allowed_values):
            raise ValueError(
                "Invalid value for `is_enabled` ({0}), must be one of {1}"  # noqa: E501
                .format(is_enabled, allowed_values)
            )

        self._is_enabled = is_enabled

    @property
    def state(self):
        """Gets the state of this InlineResponse200200ResponseFlc.  # noqa: E501


        :return: The state of this InlineResponse200200ResponseFlc.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse200200ResponseFlc.


        :param state: The state of this InlineResponse200200ResponseFlc.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def is_paused(self):
        """Gets the is_paused of this InlineResponse200200ResponseFlc.  # noqa: E501


        :return: The is_paused of this InlineResponse200200ResponseFlc.  # noqa: E501
        :rtype: str
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this InlineResponse200200ResponseFlc.


        :param is_paused: The is_paused of this InlineResponse200200ResponseFlc.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                is_paused not in allowed_values):
            raise ValueError(
                "Invalid value for `is_paused` ({0}), must be one of {1}"  # noqa: E501
                .format(is_paused, allowed_values)
            )

        self._is_paused = is_paused

    @property
    def volume_default(self):
        """Gets the volume_default of this InlineResponse200200ResponseFlc.  # noqa: E501


        :return: The volume_default of this InlineResponse200200ResponseFlc.  # noqa: E501
        :rtype: str
        """
        return self._volume_default

    @volume_default.setter
    def volume_default(self, volume_default):
        """Sets the volume_default of this InlineResponse200200ResponseFlc.


        :param volume_default: The volume_default of this InlineResponse200200ResponseFlc.  # noqa: E501
        :type: str
        """
        allowed_values = ["True", "False"]  # noqa: E501
        if (self._configuration.client_side_validation and
                volume_default not in allowed_values):
            raise ValueError(
                "Invalid value for `volume_default` ({0}), must be one of {1}"  # noqa: E501
                .format(volume_default, allowed_values)
            )

        self._volume_default = volume_default

    @property
    def policy_start_time(self):
        """Gets the policy_start_time of this InlineResponse200200ResponseFlc.  # noqa: E501


        :return: The policy_start_time of this InlineResponse200200ResponseFlc.  # noqa: E501
        :rtype: str
        """
        return self._policy_start_time

    @policy_start_time.setter
    def policy_start_time(self, policy_start_time):
        """Sets the policy_start_time of this InlineResponse200200ResponseFlc.


        :param policy_start_time: The policy_start_time of this InlineResponse200200ResponseFlc.  # noqa: E501
        :type: str
        """

        self._policy_start_time = policy_start_time

    @property
    def policy_interval(self):
        """Gets the policy_interval of this InlineResponse200200ResponseFlc.  # noqa: E501


        :return: The policy_interval of this InlineResponse200200ResponseFlc.  # noqa: E501
        :rtype: str
        """
        return self._policy_interval

    @policy_interval.setter
    def policy_interval(self, policy_interval):
        """Sets the policy_interval of this InlineResponse200200ResponseFlc.


        :param policy_interval: The policy_interval of this InlineResponse200200ResponseFlc.  # noqa: E501
        :type: str
        """

        self._policy_interval = policy_interval

    @property
    def recycle_bin_retention_time(self):
        """Gets the recycle_bin_retention_time of this InlineResponse200200ResponseFlc.  # noqa: E501


        :return: The recycle_bin_retention_time of this InlineResponse200200ResponseFlc.  # noqa: E501
        :rtype: str
        """
        return self._recycle_bin_retention_time

    @recycle_bin_retention_time.setter
    def recycle_bin_retention_time(self, recycle_bin_retention_time):
        """Sets the recycle_bin_retention_time of this InlineResponse200200ResponseFlc.


        :param recycle_bin_retention_time: The recycle_bin_retention_time of this InlineResponse200200ResponseFlc.  # noqa: E501
        :type: str
        """

        self._recycle_bin_retention_time = recycle_bin_retention_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200200ResponseFlc, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200200ResponseFlc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200200ResponseFlc):
            return True

        return self.to_dict() != other.to_dict()
