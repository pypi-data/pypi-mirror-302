[tool.poetry]
name = "memsparkline"
version = "0.6.0"
description = "Track the RAM usage (resident set size) of a process and its descendants in real time."
authors = ["D. Bohdan <dbohdan@dbohdan.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/dbohdan/memsparkline"
keywords = [
  "memory",
  "monitoring",
  "performance",
  "RAM",
  "resident set size",
  "sparklines",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "License :: OSI Approved :: MIT License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Programming Language :: Python :: 3",
  "Topic :: System :: Benchmark",
  "Topic :: System :: Monitoring",
  "Topic :: Utilities",
]

include = [
  { path = "tests/", format = "sdist" },
  { path = "tox.ini", format = "sdist" },
]

[tool.poetry.dependencies]
python = "^3.8"
psutil = "^5.9.5"

[tool.poetry.group.dev.dependencies]
types-psutil = "^5.9.5.15"
ruff = "0.6.9"
pytest = "^8.3.3"
pyright = "1.1.384"
pytest-cov = "^4.1.0"
codespell = "^2.3.0"

[build-system]
requires = ["poetry-core>=1.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
memsparkline = 'memsparkline.main:main'

[tool.codespell]
quiet-level = 3

[tool.poe.env]
"PYTHON_SOURCES" = "src tests"

[tool.poe.tasks.check]
sequence = ["format", "spell", "lint", "type"]
help = "Run the formatter, then all static checks"
ignore_fail = "return_non_zero"

[tool.poe.tasks.format]
cmd = "ruff format ${PYTHON_SOURCES}"
help = "Run the Ruff formatter"

[tool.poe.tasks.lint]
cmd = "ruff check ${PYTHON_SOURCES}"
help = "Run Ruff"

[tool.poe.tasks.memsparkline]
cmd = "python -m memsparkline"
help = "Run memsparkline"

[tool.poe.tasks.spell]
cmd = "codespell ${PYTHON_SOURCES}"
help = "Run codespell"

[tool.poe.tasks.test]
cmd = "pytest"
help = "Run Pytest (not through tox)"

[tool.poe.tasks.type]
cmd = "pyright ${PYTHON_SOURCES}"
help = "Run Pyright"

[tool.pyright]
pythonVersion = "3.8"

[tool.ruff]
src = ["src", "tests"]
target-version = "py38"

[tool.ruff.lint]
select = [
  "A",     # flake8-builtins
  "AIR",   # Airflow
  # "ANN", # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "C90",   # mccabe
  "COM",   # flake8-commas
  # "CPY", # flake8-copyright
  "DJ",    # flake8-django
  # "D",   # pydocstyle
  "DTZ",   # flake8-datetimez
  "EM",    # flake8-errmsg
  "ERA",   # eradicate
  "E",     # pycodestyle
  "EXE",   # flake8-executable
  "FA",    # flake8-future-annotations
  "FBT",   # flake8-boolean-trap
  "FIX",   # flake8-fixme
  "FLY",   # flynt
  "F",     # Pyflakes
  "G",     # flake8-logging-format
  "ICN",   # flake8-import-conventions
  "I",     # isort
  "INP",   # flake8-no-pep420
  "INT",   # flake8-gettext
  "ISC",   # flake8-implicit-str-concat
  "N",     # pep8-naming
  "NPY",   # NumPy-specific rules
  "PD",    # pandas-vet
  "PERF",  # Perflint
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PL",    # Pylint
  "PT",    # flake8-pytest-style
  "PTH",   # flake8-use-pathlib
  "PYI",   # flake8-pyi
  "Q",     # flake8-quotes
  "RET",   # flake8-return
  "RSE",   # flake8-raise
  "RUF",   # Ruff-specific rules
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  "T10",   # flake8-debugger
  "T20",   # flake8-print
  "TCH",   # flake8-type-checking
  "TD",    # flake8-todos
  "TID",   # flake8-tidy-imports
  "TRY",   # tryceratops
  "UP",    # pyupgrade
  "W",     # pycodestyle
  "YTT",   # flake8-2020
]
ignore = [
  "COM812", # missing-trailing-comma
  "ISC001", # single-line-implicit-string-concatenation
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "PLR2004", # magic-value-comparison
  "PT027",   # pytest-unittest-raises-assertion
  "S101",    # assert
  "S603",    # subprocess-without-shell-equals-true
]

[tool.ruff.lint.pylint]
max-args = 8
