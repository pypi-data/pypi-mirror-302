# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import ProvisioningPortal
from ProvisioningPortal.api.vpsa_api import VPSAApi  # noqa: E501
from ProvisioningPortal.rest import ApiException


class TestVPSAApi(unittest.TestCase):
    """VPSAApi unit test stubs"""

    def setUp(self):
        self.api = ProvisioningPortal.api.vpsa_api.VPSAApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_proxy_vc_to_vpsa_object_storage(self):
        """Test case for add_proxy_vc_to_vpsa_object_storage

        """
        pass

    def test_add_storage_policy_to_vpsa_object_storage(self):
        """Test case for add_storage_policy_to_vpsa_object_storage

        """
        pass

    def test_add_storage_to_vpsa(self):
        """Test case for add_storage_to_vpsa

        """
        pass

    def test_add_virtual_network_vpsa(self):
        """Test case for add_virtual_network_vpsa

        """
        pass

    def test_assign_public_ip_vpsa(self):
        """Test case for assign_public_ip_vpsa

        """
        pass

    def test_cancel_scheduled_update_version(self):
        """Test case for cancel_scheduled_update_version

        """
        pass

    def test_change_vpsa_flash_cache_capacity(self):
        """Test case for change_vpsa_flash_cache_capacity

        """
        pass

    def test_change_vpsa_zadara_engine(self):
        """Test case for change_vpsa_zadara_engine

        """
        pass

    def test_create_object_storage_account(self):
        """Test case for create_object_storage_account

        """
        pass

    def test_create_vpsa(self):
        """Test case for create_vpsa

        """
        pass

    def test_delete_vpsa(self):
        """Test case for delete_vpsa

        """
        pass

    def test_disable_object_account_servce_from_vpsa_object_storage(self):
        """Test case for disable_object_account_servce_from_vpsa_object_storage

        """
        pass

    def test_disables_data_reduction_bundle_on_flash_vpsa(self):
        """Test case for disables_data_reduction_bundle_on_flash_vpsa

        """
        pass

    def test_enable_object_account_servce_for_vpsa_object_storage(self):
        """Test case for enable_object_account_servce_for_vpsa_object_storage

        """
        pass

    def test_enables_data_reduction_bundle_on_flash_vpsa(self):
        """Test case for enables_data_reduction_bundle_on_flash_vpsa

        """
        pass

    def test_get_object_account_servce_for_vpsa_object_storage(self):
        """Test case for get_object_account_servce_for_vpsa_object_storage

        """
        pass

    def test_get_object_storage_account_info(self):
        """Test case for get_object_storage_account_info

        """
        pass

    def test_get_vpsa_information(self):
        """Test case for get_vpsa_information

        """
        pass

    def test_get_vpsas_info(self):
        """Test case for get_vpsas_info

        """
        pass

    def test_hibernate_vpsa(self):
        """Test case for hibernate_vpsa

        """
        pass

    def test_list_compatible_vni_for_vpsa(self):
        """Test case for list_compatible_vni_for_vpsa

        """
        pass

    def test_list_object_storage_accounts_of_vpsa(self):
        """Test case for list_object_storage_accounts_of_vpsa

        """
        pass

    def test_maintenance_mode(self):
        """Test case for maintenance_mode

        """
        pass

    def test_remove_account_from_vpsa_object_storage(self):
        """Test case for remove_account_from_vpsa_object_storage

        """
        pass

    def test_remove_vni_from_vpsa(self):
        """Test case for remove_vni_from_vpsa

        """
        pass

    def test_remove_vpsa_public_ip(self):
        """Test case for remove_vpsa_public_ip

        """
        pass

    def test_reschedule_update_version(self):
        """Test case for reschedule_update_version

        """
        pass

    def test_resume_vpsa(self):
        """Test case for resume_vpsa

        """
        pass

    def test_update_object_account_service_for_vpsa_object_storage(self):
        """Test case for update_object_account_service_for_vpsa_object_storage

        """
        pass

    def test_update_version(self):
        """Test case for update_version

        """
        pass


if __name__ == '__main__':
    unittest.main()
