"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
import dateutil.parser
from enum import Enum
from orq_python_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_python_client.utils import FieldMetadata, QueryParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class GetV2ResourcesDatasetsRequestTypedDict(TypedDict):
    page: float
    limit: float


class GetV2ResourcesDatasetsRequest(BaseModel):
    page: Annotated[
        float, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]

    limit: Annotated[
        float, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]


class GetV2ResourcesDatasetsUpdatedByTypedDict(TypedDict):
    r"""User model returned from the API"""

    id: str
    email: str
    r"""Email of the user"""
    display_name: str
    r"""Display name of the user"""
    logo_url: Nullable[str]
    r"""URL of the user logo"""


class GetV2ResourcesDatasetsUpdatedBy(BaseModel):
    r"""User model returned from the API"""

    id: str

    email: str
    r"""Email of the user"""

    display_name: str
    r"""Display name of the user"""

    logo_url: Nullable[str]
    r"""URL of the user logo"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["logo_url"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class GetV2ResourcesDatasetsRole(str, Enum):
    r"""The role of the prompt message"""

    SYSTEM = "system"
    ASSISTANT = "assistant"
    USER = "user"
    EXCEPTION = "exception"
    TOOL = "tool"
    PROMPT = "prompt"
    CORRECTION = "correction"
    EXPECTED_OUTPUT = "expected_output"


class GetV2ResourcesDatasets2ResourcesType(str, Enum):
    IMAGE_URL = "image_url"


class GetV2ResourcesDatasets2ImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    id: NotRequired[str]
    r"""The orq.ai id of the image"""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class GetV2ResourcesDatasets2ImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    id: Optional[str] = None
    r"""The orq.ai id of the image"""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class GetV2ResourcesDatasets22TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: GetV2ResourcesDatasets2ResourcesType
    image_url: GetV2ResourcesDatasets2ImageURLTypedDict


class GetV2ResourcesDatasets22(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: GetV2ResourcesDatasets2ResourcesType

    image_url: GetV2ResourcesDatasets2ImageURL


class GetV2ResourcesDatasets2Type(str, Enum):
    TEXT = "text"


class GetV2ResourcesDatasets21TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: GetV2ResourcesDatasets2Type
    text: str


class GetV2ResourcesDatasets21(BaseModel):
    r"""Text content part of a prompt message"""

    type: GetV2ResourcesDatasets2Type

    text: str


GetV2ResourcesDatasetsContent2TypedDict = Union[
    GetV2ResourcesDatasets21TypedDict, GetV2ResourcesDatasets22TypedDict
]


GetV2ResourcesDatasetsContent2 = Union[
    GetV2ResourcesDatasets21, GetV2ResourcesDatasets22
]


GetV2ResourcesDatasetsContentTypedDict = Union[
    str, List[GetV2ResourcesDatasetsContent2TypedDict]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


GetV2ResourcesDatasetsContent = Union[str, List[GetV2ResourcesDatasetsContent2]]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


class GetV2ResourcesDatasetsType(str, Enum):
    FUNCTION = "function"


class GetV2ResourcesDatasetsFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class GetV2ResourcesDatasetsFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class GetV2ResourcesDatasetsToolCallsTypedDict(TypedDict):
    type: GetV2ResourcesDatasetsType
    function: GetV2ResourcesDatasetsFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class GetV2ResourcesDatasetsToolCalls(BaseModel):
    type: GetV2ResourcesDatasetsType

    function: GetV2ResourcesDatasetsFunction

    id: Optional[str] = None

    index: Optional[float] = None


class GetV2ResourcesDatasetsMessagesTypedDict(TypedDict):
    role: GetV2ResourcesDatasetsRole
    r"""The role of the prompt message"""
    content: GetV2ResourcesDatasetsContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[List[GetV2ResourcesDatasetsToolCallsTypedDict]]


class GetV2ResourcesDatasetsMessages(BaseModel):
    role: GetV2ResourcesDatasetsRole
    r"""The role of the prompt message"""

    content: GetV2ResourcesDatasetsContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[List[GetV2ResourcesDatasetsToolCalls]] = None


class GetV2ResourcesDatasetsItemsTypedDict(TypedDict):
    r"""Returned dataset row model from the API."""

    id: str
    messages: List[GetV2ResourcesDatasetsMessagesTypedDict]
    r"""Input message(s) of the dataset row"""
    expected_output: NotRequired[Nullable[str]]
    r"""Reference of the dataset row"""
    created: NotRequired[datetime]
    r"""The date and time the resource was created"""
    updated: NotRequired[datetime]
    r"""The date and time the resource was last updated"""


class GetV2ResourcesDatasetsItems(BaseModel):
    r"""Returned dataset row model from the API."""

    id: str

    messages: List[GetV2ResourcesDatasetsMessages]
    r"""Input message(s) of the dataset row"""

    expected_output: OptionalNullable[str] = UNSET
    r"""Reference of the dataset row"""

    created: Optional[datetime] = None
    r"""The date and time the resource was created"""

    updated: Optional[datetime] = dateutil.parser.isoparse("2024-10-14T12:39:38.949Z")
    r"""The date and time the resource was last updated"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["expected_output", "created", "updated"]
        nullable_fields = ["expected_output"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ItemsTypedDict(TypedDict):
    r"""Returned dataset model from the API"""

    id: str
    display_name: str
    r"""Name of the dataset"""
    domain_id: str
    r"""Domain ID reference"""
    updated_by: GetV2ResourcesDatasetsUpdatedByTypedDict
    r"""User model returned from the API"""
    updated_by_id: Nullable[str]
    r"""The user who last updated the dataset"""
    items: List[GetV2ResourcesDatasetsItemsTypedDict]
    created: NotRequired[datetime]
    r"""The date and time the resource was created"""
    updated: NotRequired[datetime]
    r"""The date and time the resource was last updated"""


class Items(BaseModel):
    r"""Returned dataset model from the API"""

    id: str

    display_name: str
    r"""Name of the dataset"""

    domain_id: str
    r"""Domain ID reference"""

    updated_by: GetV2ResourcesDatasetsUpdatedBy
    r"""User model returned from the API"""

    updated_by_id: Nullable[str]
    r"""The user who last updated the dataset"""

    items: List[GetV2ResourcesDatasetsItems]

    created: Optional[datetime] = None
    r"""The date and time the resource was created"""

    updated: Optional[datetime] = dateutil.parser.isoparse("2024-10-14T12:39:38.949Z")
    r"""The date and time the resource was last updated"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["created", "updated"]
        nullable_fields = ["updated_by_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class GetV2ResourcesDatasetsResponseBodyTypedDict(TypedDict):
    r"""Datasets Retrieved."""

    count: float
    page: float
    limit: float
    total_pages: float
    items: List[ItemsTypedDict]


class GetV2ResourcesDatasetsResponseBody(BaseModel):
    r"""Datasets Retrieved."""

    count: float

    page: float

    limit: float

    total_pages: Annotated[float, pydantic.Field(alias="totalPages")]

    items: List[Items]
