"""An AI/ML-based module that predicts operational intensity.

Predictor computes the predicted operational intensity for the given
pair of a workload and an execution environment, and the computation is
directed by an AI/ML model that has been trained to predict the
operational intensity.

Notes
-----
Predictor contributes to our Brain (AIML-Roofline-ILP) algorithm by
computing the predicted operational intensity for the given pair of a
workload and an execution environment. Once Predictor produces the
intensity, the Roofline computation uses the value to estimate the
expected execution time, and eventually the expected cost, for the given
pair. ILP then solves its optimization problem on the results from
multiple pairs to identify the optimal execution environment for the
given workload.

"""

import abc
import matildalink.feat as feat

# TODO: Implement the Brain AI/ML model.
class Model(abc.ABC):
    """The Model class.

    The class for "trained" AI/ML models that takes a pair of work and
    execution environment and predicts operational intensity. 

    The model class frees the predictor class from all the implementation
    details that are heterogeneous across different AI/ML modeling
    approaches (ML, DL, etc.) and tools (TF, PyTorch, scikit-learn, etc.).

    This is an abstract class. Implement your own, different kinds of
    models by inheriting from this one.

    Parameters
    ----------
    path : pathlib.Path
        The local file path for an AI/ML model.

    """

    @abc.abstractmethod
    def __init__(self, path):
        pass

    @classmethod
    @abc.abstractmethod
    def fromregistry(cls, url):
        """Construct model using an AI/ML model from an outside registry.

        This is an alternative constructor. Instead of from a local file,
        load an AI/ML model from an outside model registry specified by
        the URL `url`, and return the model instance that is constructed
        this way.

        Parameters
        ----------
        url : furl.furl
            The url for the outside registry where the AI/ML model exists.

        Returns
        -------
        Model
            A model instance constructed using the AI/ML model that exists
            in the specified model registry.
            
        """

    @abc.abstractmethod
    def run(self, fvec):
        """Apply the model.

        Parameters
        ----------
        fvec : numpy.ndarray
            Feature vector generated by the feature extractor.

        Returns
        -------
        float
            Operational intensity for the given feature vector `fvec`,
            which is assumed to be computed for the pair of work and
            execution environment of interest.
        
        """

# HACK: Just for scaffolding (and exemplification)
class ScikitLearnModel(Model):
    """

    """

    def __init__(self, path):
        pass

    def fromregistry(self, url):
        pass

    def run(self, fvec):
        return 1053.7 # HACK: Just for scaffolding

class Predictor:
    """The Predictor class.

    Parameters
    ----------
    model : Model
        A model instance that the predictor will use.

    """
    
    def __init__(self, model):
        self.model = model

    def predict(self, fvec):
        """Predict the operational intensity.

        Predict the operational intensity for the given feature vector
        `fvec` that is extracted from the pair of work and execution
        environment of interest using the model `model`.

        Parameters
        ----------
        fvec : numpy.ndarray
            Feature vector.

        Returns
        -------
        float
            Predicted operational intensity for the given feature vector.

        """
        return self.model.run(fvec)

