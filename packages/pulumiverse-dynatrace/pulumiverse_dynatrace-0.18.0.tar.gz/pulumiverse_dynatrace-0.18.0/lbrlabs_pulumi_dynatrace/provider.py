# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 dt_api_token: Optional[pulumi.Input[str]] = None,
                 dt_cluster_api_token: Optional[pulumi.Input[str]] = None,
                 dt_cluster_url: Optional[pulumi.Input[str]] = None,
                 dt_env_url: Optional[pulumi.Input[str]] = None,
                 iam_account_id: Optional[pulumi.Input[str]] = None,
                 iam_client_id: Optional[pulumi.Input[str]] = None,
                 iam_client_secret: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        """
        if dt_api_token is None:
            dt_api_token = _utilities.get_env('DYNATRACE_API_TOKEN', 'DT_API_TOKEN')
        if dt_api_token is not None:
            pulumi.set(__self__, "dt_api_token", dt_api_token)
        if dt_cluster_api_token is None:
            dt_cluster_api_token = _utilities.get_env('DYNATRACE_CLUSTER_API_TOKEN', 'DT_CLUSTER_API_TOKEN')
        if dt_cluster_api_token is not None:
            pulumi.set(__self__, "dt_cluster_api_token", dt_cluster_api_token)
        if dt_cluster_url is None:
            dt_cluster_url = _utilities.get_env('DYNATRACE_CLUSTER_URL', 'DT_CLUSTER_URL')
        if dt_cluster_url is not None:
            pulumi.set(__self__, "dt_cluster_url", dt_cluster_url)
        if dt_env_url is None:
            dt_env_url = _utilities.get_env('DYNATRACE_ENV_URL', 'DT_ENV_URL')
        if dt_env_url is not None:
            pulumi.set(__self__, "dt_env_url", dt_env_url)
        if iam_account_id is not None:
            pulumi.set(__self__, "iam_account_id", iam_account_id)
        if iam_client_id is not None:
            pulumi.set(__self__, "iam_client_id", iam_client_id)
        if iam_client_secret is not None:
            pulumi.set(__self__, "iam_client_secret", iam_client_secret)

    @property
    @pulumi.getter(name="dtApiToken")
    def dt_api_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dt_api_token")

    @dt_api_token.setter
    def dt_api_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dt_api_token", value)

    @property
    @pulumi.getter(name="dtClusterApiToken")
    def dt_cluster_api_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dt_cluster_api_token")

    @dt_cluster_api_token.setter
    def dt_cluster_api_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dt_cluster_api_token", value)

    @property
    @pulumi.getter(name="dtClusterUrl")
    def dt_cluster_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dt_cluster_url")

    @dt_cluster_url.setter
    def dt_cluster_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dt_cluster_url", value)

    @property
    @pulumi.getter(name="dtEnvUrl")
    def dt_env_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dt_env_url")

    @dt_env_url.setter
    def dt_env_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dt_env_url", value)

    @property
    @pulumi.getter(name="iamAccountId")
    def iam_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iam_account_id")

    @iam_account_id.setter
    def iam_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_account_id", value)

    @property
    @pulumi.getter(name="iamClientId")
    def iam_client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iam_client_id")

    @iam_client_id.setter
    def iam_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_client_id", value)

    @property
    @pulumi.getter(name="iamClientSecret")
    def iam_client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "iam_client_secret")

    @iam_client_secret.setter
    def iam_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_client_secret", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dt_api_token: Optional[pulumi.Input[str]] = None,
                 dt_cluster_api_token: Optional[pulumi.Input[str]] = None,
                 dt_cluster_url: Optional[pulumi.Input[str]] = None,
                 dt_env_url: Optional[pulumi.Input[str]] = None,
                 iam_account_id: Optional[pulumi.Input[str]] = None,
                 iam_client_id: Optional[pulumi.Input[str]] = None,
                 iam_client_secret: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the dynatrace package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the dynatrace package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dt_api_token: Optional[pulumi.Input[str]] = None,
                 dt_cluster_api_token: Optional[pulumi.Input[str]] = None,
                 dt_cluster_url: Optional[pulumi.Input[str]] = None,
                 dt_env_url: Optional[pulumi.Input[str]] = None,
                 iam_account_id: Optional[pulumi.Input[str]] = None,
                 iam_client_id: Optional[pulumi.Input[str]] = None,
                 iam_client_secret: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if dt_api_token is None:
                dt_api_token = _utilities.get_env('DYNATRACE_API_TOKEN', 'DT_API_TOKEN')
            __props__.__dict__["dt_api_token"] = None if dt_api_token is None else pulumi.Output.secret(dt_api_token)
            if dt_cluster_api_token is None:
                dt_cluster_api_token = _utilities.get_env('DYNATRACE_CLUSTER_API_TOKEN', 'DT_CLUSTER_API_TOKEN')
            __props__.__dict__["dt_cluster_api_token"] = None if dt_cluster_api_token is None else pulumi.Output.secret(dt_cluster_api_token)
            if dt_cluster_url is None:
                dt_cluster_url = _utilities.get_env('DYNATRACE_CLUSTER_URL', 'DT_CLUSTER_URL')
            __props__.__dict__["dt_cluster_url"] = None if dt_cluster_url is None else pulumi.Output.secret(dt_cluster_url)
            if dt_env_url is None:
                dt_env_url = _utilities.get_env('DYNATRACE_ENV_URL', 'DT_ENV_URL')
            __props__.__dict__["dt_env_url"] = dt_env_url
            __props__.__dict__["iam_account_id"] = None if iam_account_id is None else pulumi.Output.secret(iam_account_id)
            __props__.__dict__["iam_client_id"] = None if iam_client_id is None else pulumi.Output.secret(iam_client_id)
            __props__.__dict__["iam_client_secret"] = None if iam_client_secret is None else pulumi.Output.secret(iam_client_secret)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["dtApiToken", "dtClusterApiToken", "dtClusterUrl", "iamAccountId", "iamClientId", "iamClientSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'dynatrace',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="dtApiToken")
    def dt_api_token(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dt_api_token")

    @property
    @pulumi.getter(name="dtClusterApiToken")
    def dt_cluster_api_token(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dt_cluster_api_token")

    @property
    @pulumi.getter(name="dtClusterUrl")
    def dt_cluster_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dt_cluster_url")

    @property
    @pulumi.getter(name="dtEnvUrl")
    def dt_env_url(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dt_env_url")

    @property
    @pulumi.getter(name="iamAccountId")
    def iam_account_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "iam_account_id")

    @property
    @pulumi.getter(name="iamClientId")
    def iam_client_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "iam_client_id")

    @property
    @pulumi.getter(name="iamClientSecret")
    def iam_client_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "iam_client_secret")

