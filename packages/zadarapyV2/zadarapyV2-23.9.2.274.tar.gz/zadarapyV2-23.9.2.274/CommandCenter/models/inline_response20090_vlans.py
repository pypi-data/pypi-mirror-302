# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20090Vlans(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'tenants': 'list[int]',
        'allocated': 'bool',
        'reserved': 'bool',
        'vlan_id': 'int',
        'all_vrids': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'tenants': 'tenants',
        'allocated': 'allocated',
        'reserved': 'reserved',
        'vlan_id': 'vlan_id',
        'all_vrids': 'all_vrids'
    }

    def __init__(self, comment=None, tenants=None, allocated=None, reserved=None, vlan_id=None, all_vrids=None, _configuration=None):  # noqa: E501
        """InlineResponse20090Vlans - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._comment = None
        self._tenants = None
        self._allocated = None
        self._reserved = None
        self._vlan_id = None
        self._all_vrids = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if tenants is not None:
            self.tenants = tenants
        if allocated is not None:
            self.allocated = allocated
        if reserved is not None:
            self.reserved = reserved
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if all_vrids is not None:
            self.all_vrids = all_vrids

    @property
    def comment(self):
        """Gets the comment of this InlineResponse20090Vlans.  # noqa: E501


        :return: The comment of this InlineResponse20090Vlans.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InlineResponse20090Vlans.


        :param comment: The comment of this InlineResponse20090Vlans.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def tenants(self):
        """Gets the tenants of this InlineResponse20090Vlans.  # noqa: E501


        :return: The tenants of this InlineResponse20090Vlans.  # noqa: E501
        :rtype: list[int]
        """
        return self._tenants

    @tenants.setter
    def tenants(self, tenants):
        """Sets the tenants of this InlineResponse20090Vlans.


        :param tenants: The tenants of this InlineResponse20090Vlans.  # noqa: E501
        :type: list[int]
        """

        self._tenants = tenants

    @property
    def allocated(self):
        """Gets the allocated of this InlineResponse20090Vlans.  # noqa: E501


        :return: The allocated of this InlineResponse20090Vlans.  # noqa: E501
        :rtype: bool
        """
        return self._allocated

    @allocated.setter
    def allocated(self, allocated):
        """Sets the allocated of this InlineResponse20090Vlans.


        :param allocated: The allocated of this InlineResponse20090Vlans.  # noqa: E501
        :type: bool
        """

        self._allocated = allocated

    @property
    def reserved(self):
        """Gets the reserved of this InlineResponse20090Vlans.  # noqa: E501


        :return: The reserved of this InlineResponse20090Vlans.  # noqa: E501
        :rtype: bool
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this InlineResponse20090Vlans.


        :param reserved: The reserved of this InlineResponse20090Vlans.  # noqa: E501
        :type: bool
        """

        self._reserved = reserved

    @property
    def vlan_id(self):
        """Gets the vlan_id of this InlineResponse20090Vlans.  # noqa: E501


        :return: The vlan_id of this InlineResponse20090Vlans.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this InlineResponse20090Vlans.


        :param vlan_id: The vlan_id of this InlineResponse20090Vlans.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    @property
    def all_vrids(self):
        """Gets the all_vrids of this InlineResponse20090Vlans.  # noqa: E501


        :return: The all_vrids of this InlineResponse20090Vlans.  # noqa: E501
        :rtype: str
        """
        return self._all_vrids

    @all_vrids.setter
    def all_vrids(self, all_vrids):
        """Sets the all_vrids of this InlineResponse20090Vlans.


        :param all_vrids: The all_vrids of this InlineResponse20090Vlans.  # noqa: E501
        :type: str
        """

        self._all_vrids = all_vrids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20090Vlans, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20090Vlans):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20090Vlans):
            return True

        return self.to_dict() != other.to_dict()
