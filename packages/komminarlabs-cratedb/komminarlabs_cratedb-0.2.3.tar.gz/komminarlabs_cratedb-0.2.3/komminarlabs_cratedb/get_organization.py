# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetOrganizationResult',
    'AwaitableGetOrganizationResult',
    'get_organization',
    'get_organization_output',
]

@pulumi.output_type
class GetOrganizationResult:
    """
    A collection of values returned by getOrganization.
    """
    def __init__(__self__, dc=None, email=None, id=None, name=None, notifications_enabled=None, plan_type=None, project_count=None, role_fqn=None):
        if dc and not isinstance(dc, dict):
            raise TypeError("Expected argument 'dc' to be a dict")
        pulumi.set(__self__, "dc", dc)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notifications_enabled and not isinstance(notifications_enabled, bool):
            raise TypeError("Expected argument 'notifications_enabled' to be a bool")
        pulumi.set(__self__, "notifications_enabled", notifications_enabled)
        if plan_type and not isinstance(plan_type, float):
            raise TypeError("Expected argument 'plan_type' to be a float")
        pulumi.set(__self__, "plan_type", plan_type)
        if project_count and not isinstance(project_count, float):
            raise TypeError("Expected argument 'project_count' to be a float")
        pulumi.set(__self__, "project_count", project_count)
        if role_fqn and not isinstance(role_fqn, str):
            raise TypeError("Expected argument 'role_fqn' to be a str")
        pulumi.set(__self__, "role_fqn", role_fqn)

    @property
    @pulumi.getter
    def dc(self) -> 'outputs.GetOrganizationDcResult':
        """
        The DublinCore of the organization.
        """
        return pulumi.get(self, "dc")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The notification email used in the organization.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the organization.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationsEnabled")
    def notifications_enabled(self) -> bool:
        """
        Whether notifications enabled for the organization.
        """
        return pulumi.get(self, "notifications_enabled")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> float:
        """
        The support plan type used in the organization.
        """
        return pulumi.get(self, "plan_type")

    @property
    @pulumi.getter(name="projectCount")
    def project_count(self) -> float:
        """
        The project count in the organization.
        """
        return pulumi.get(self, "project_count")

    @property
    @pulumi.getter(name="roleFqn")
    def role_fqn(self) -> str:
        """
        The role FQN.
        """
        return pulumi.get(self, "role_fqn")


class AwaitableGetOrganizationResult(GetOrganizationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrganizationResult(
            dc=self.dc,
            email=self.email,
            id=self.id,
            name=self.name,
            notifications_enabled=self.notifications_enabled,
            plan_type=self.plan_type,
            project_count=self.project_count,
            role_fqn=self.role_fqn)


def get_organization(id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrganizationResult:
    """
    To retrieve an organization.


    :param str id: The id of the organization.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cratedb:index/getOrganization:getOrganization', __args__, opts=opts, typ=GetOrganizationResult).value

    return AwaitableGetOrganizationResult(
        dc=pulumi.get(__ret__, 'dc'),
        email=pulumi.get(__ret__, 'email'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        notifications_enabled=pulumi.get(__ret__, 'notifications_enabled'),
        plan_type=pulumi.get(__ret__, 'plan_type'),
        project_count=pulumi.get(__ret__, 'project_count'),
        role_fqn=pulumi.get(__ret__, 'role_fqn'))


@_utilities.lift_output_func(get_organization)
def get_organization_output(id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOrganizationResult]:
    """
    To retrieve an organization.


    :param str id: The id of the organization.
    """
    ...
