# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class CloudEngineTypes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'hourly_price_usd': 'str',
        'name': 'str',
        'max_drives': 'int',
        'max_cache_gb': 'int',
        'key': 'str',
        'encryption_hourly_price_usd': 'str',
        'specs': 'str',
        'cache': 'CloudCache'
    }

    attribute_map = {
        'id': 'id',
        'hourly_price_usd': 'hourly_price_usd',
        'name': 'name',
        'max_drives': 'max_drives',
        'max_cache_gb': 'max_cache_gb',
        'key': 'key',
        'encryption_hourly_price_usd': 'encryption_hourly_price_usd',
        'specs': 'specs',
        'cache': 'cache'
    }

    def __init__(self, id=None, hourly_price_usd=None, name=None, max_drives=None, max_cache_gb=None, key=None, encryption_hourly_price_usd=None, specs=None, cache=None, _configuration=None):  # noqa: E501
        """CloudEngineTypes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._hourly_price_usd = None
        self._name = None
        self._max_drives = None
        self._max_cache_gb = None
        self._key = None
        self._encryption_hourly_price_usd = None
        self._specs = None
        self._cache = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if hourly_price_usd is not None:
            self.hourly_price_usd = hourly_price_usd
        if name is not None:
            self.name = name
        if max_drives is not None:
            self.max_drives = max_drives
        if max_cache_gb is not None:
            self.max_cache_gb = max_cache_gb
        if key is not None:
            self.key = key
        if encryption_hourly_price_usd is not None:
            self.encryption_hourly_price_usd = encryption_hourly_price_usd
        if specs is not None:
            self.specs = specs
        if cache is not None:
            self.cache = cache

    @property
    def id(self):
        """Gets the id of this CloudEngineTypes.  # noqa: E501


        :return: The id of this CloudEngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudEngineTypes.


        :param id: The id of this CloudEngineTypes.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def hourly_price_usd(self):
        """Gets the hourly_price_usd of this CloudEngineTypes.  # noqa: E501


        :return: The hourly_price_usd of this CloudEngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._hourly_price_usd

    @hourly_price_usd.setter
    def hourly_price_usd(self, hourly_price_usd):
        """Sets the hourly_price_usd of this CloudEngineTypes.


        :param hourly_price_usd: The hourly_price_usd of this CloudEngineTypes.  # noqa: E501
        :type: str
        """

        self._hourly_price_usd = hourly_price_usd

    @property
    def name(self):
        """Gets the name of this CloudEngineTypes.  # noqa: E501


        :return: The name of this CloudEngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudEngineTypes.


        :param name: The name of this CloudEngineTypes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def max_drives(self):
        """Gets the max_drives of this CloudEngineTypes.  # noqa: E501


        :return: The max_drives of this CloudEngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._max_drives

    @max_drives.setter
    def max_drives(self, max_drives):
        """Sets the max_drives of this CloudEngineTypes.


        :param max_drives: The max_drives of this CloudEngineTypes.  # noqa: E501
        :type: int
        """

        self._max_drives = max_drives

    @property
    def max_cache_gb(self):
        """Gets the max_cache_gb of this CloudEngineTypes.  # noqa: E501


        :return: The max_cache_gb of this CloudEngineTypes.  # noqa: E501
        :rtype: int
        """
        return self._max_cache_gb

    @max_cache_gb.setter
    def max_cache_gb(self, max_cache_gb):
        """Sets the max_cache_gb of this CloudEngineTypes.


        :param max_cache_gb: The max_cache_gb of this CloudEngineTypes.  # noqa: E501
        :type: int
        """

        self._max_cache_gb = max_cache_gb

    @property
    def key(self):
        """Gets the key of this CloudEngineTypes.  # noqa: E501


        :return: The key of this CloudEngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CloudEngineTypes.


        :param key: The key of this CloudEngineTypes.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def encryption_hourly_price_usd(self):
        """Gets the encryption_hourly_price_usd of this CloudEngineTypes.  # noqa: E501


        :return: The encryption_hourly_price_usd of this CloudEngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._encryption_hourly_price_usd

    @encryption_hourly_price_usd.setter
    def encryption_hourly_price_usd(self, encryption_hourly_price_usd):
        """Sets the encryption_hourly_price_usd of this CloudEngineTypes.


        :param encryption_hourly_price_usd: The encryption_hourly_price_usd of this CloudEngineTypes.  # noqa: E501
        :type: str
        """

        self._encryption_hourly_price_usd = encryption_hourly_price_usd

    @property
    def specs(self):
        """Gets the specs of this CloudEngineTypes.  # noqa: E501


        :return: The specs of this CloudEngineTypes.  # noqa: E501
        :rtype: str
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this CloudEngineTypes.


        :param specs: The specs of this CloudEngineTypes.  # noqa: E501
        :type: str
        """

        self._specs = specs

    @property
    def cache(self):
        """Gets the cache of this CloudEngineTypes.  # noqa: E501


        :return: The cache of this CloudEngineTypes.  # noqa: E501
        :rtype: CloudCache
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this CloudEngineTypes.


        :param cache: The cache of this CloudEngineTypes.  # noqa: E501
        :type: CloudCache
        """

        self._cache = cache

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudEngineTypes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudEngineTypes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudEngineTypes):
            return True

        return self.to_dict() != other.to_dict()
