# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class CreateStoragePolicyZios(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'drive_type': 'str',
        'drive_quantity': 'int',
        'policy_type_id': 'int',
        'description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'drive_type': 'drive_type',
        'drive_quantity': 'drive_quantity',
        'policy_type_id': 'policy_type_id',
        'description': 'description'
    }

    def __init__(self, name=None, drive_type=None, drive_quantity=None, policy_type_id=None, description=None, _configuration=None):  # noqa: E501
        """CreateStoragePolicyZios - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._drive_type = None
        self._drive_quantity = None
        self._policy_type_id = None
        self._description = None
        self.discriminator = None

        self.name = name
        self.drive_type = drive_type
        self.drive_quantity = drive_quantity
        self.policy_type_id = policy_type_id
        if description is not None:
            self.description = description

    @property
    def name(self):
        """Gets the name of this CreateStoragePolicyZios.  # noqa: E501


        :return: The name of this CreateStoragePolicyZios.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateStoragePolicyZios.


        :param name: The name of this CreateStoragePolicyZios.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def drive_type(self):
        """Gets the drive_type of this CreateStoragePolicyZios.  # noqa: E501


        :return: The drive_type of this CreateStoragePolicyZios.  # noqa: E501
        :rtype: str
        """
        return self._drive_type

    @drive_type.setter
    def drive_type(self, drive_type):
        """Sets the drive_type of this CreateStoragePolicyZios.


        :param drive_type: The drive_type of this CreateStoragePolicyZios.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and drive_type is None:
            raise ValueError("Invalid value for `drive_type`, must not be `None`")  # noqa: E501

        self._drive_type = drive_type

    @property
    def drive_quantity(self):
        """Gets the drive_quantity of this CreateStoragePolicyZios.  # noqa: E501


        :return: The drive_quantity of this CreateStoragePolicyZios.  # noqa: E501
        :rtype: int
        """
        return self._drive_quantity

    @drive_quantity.setter
    def drive_quantity(self, drive_quantity):
        """Sets the drive_quantity of this CreateStoragePolicyZios.


        :param drive_quantity: The drive_quantity of this CreateStoragePolicyZios.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and drive_quantity is None:
            raise ValueError("Invalid value for `drive_quantity`, must not be `None`")  # noqa: E501

        self._drive_quantity = drive_quantity

    @property
    def policy_type_id(self):
        """Gets the policy_type_id of this CreateStoragePolicyZios.  # noqa: E501


        :return: The policy_type_id of this CreateStoragePolicyZios.  # noqa: E501
        :rtype: int
        """
        return self._policy_type_id

    @policy_type_id.setter
    def policy_type_id(self, policy_type_id):
        """Sets the policy_type_id of this CreateStoragePolicyZios.


        :param policy_type_id: The policy_type_id of this CreateStoragePolicyZios.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and policy_type_id is None:
            raise ValueError("Invalid value for `policy_type_id`, must not be `None`")  # noqa: E501

        self._policy_type_id = policy_type_id

    @property
    def description(self):
        """Gets the description of this CreateStoragePolicyZios.  # noqa: E501


        :return: The description of this CreateStoragePolicyZios.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateStoragePolicyZios.


        :param description: The description of this CreateStoragePolicyZios.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateStoragePolicyZios, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateStoragePolicyZios):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateStoragePolicyZios):
            return True

        return self.to_dict() != other.to_dict()
