{"version":3,"file":"lib_index_js.9f7a33cd8c9732d77374.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAwB;AACA;AACW;AACM;AAC6B;AACtE,iEAAe,CAAC,+DAAgB,EAAE,6DAAc,CAAC,EAAC;;;;;;;;;;;;;;;;;;;;;;ACLN;AACD;AAClB;AAClB;AACP;AACA;AACA,6BAA6B,qDAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oCAAK;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iCAAiC,qDAAM;AACvC;AACA,6BAA6B,qDAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AClGsD;AACE;AACK;AACb;AACC;AACT;AACgB;AACxD;AACO;AACP;AACA;AACA,eAAe,uEAAmB,EAAE,kEAAgB,EAAE,0DAAsB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,yDAAqB;AAC9D;AACA;AACA,iBAAiB;AACjB,2BAA2B,iDAAc,GAAG,wBAAwB;AACpE;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,gEAAe;AAChD,cAAc,0DAAsB;AACpC;AACA,6BAA6B,iEAAqB;AAClD;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;AC7DO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7B0C;AACnC,mCAAmC,oDAAK;;;;;;;;;;;;;;;;;;ACDN;AAClC;AACA,6BAA6B,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5BgD;AACzC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,yBAAyB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yDAAa;AAC7B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnD0C;AACA;AACO;AAC1C;AACP;AACA;AACA;AACA,CAAC,oCAAoC;AAC9B;AACP;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iDAAe;AACnC,uCAAuC,uDAAqB;AAC5D;AACA;AACA;AACA;AACA,4BAA4B,wDAAsB;AAClD,YAAY,uDAAqB;AACjC,YAAY,yDAAwB;AACpC,+BAA+B,uDAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAsB;AAC9C,QAAQ,uDAAqB;AAC7B,QAAQ,4DAA2B;AACnC,2BAA2B,uDAAqB;AAChD;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAqB;AAC7B,gCAAgC,6DAA4B;AAC5D;AACA,gCAAgC,iEAAgC;AAChE;AACA,YAAY,4DAA2B;AACvC;AACA;AACA;AACA;AACA;AACA,wBAAwB,wDAAsB;AAC9C,wBAAwB,wDAAsB;AAC9C,4BAA4B,sDAAoB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B","sources":["webpack://yjs-widgets/./lib/index.js","webpack://yjs-widgets/./lib/model.js","webpack://yjs-widgets/./lib/notebookrenderer/index.js","webpack://yjs-widgets/./lib/notebookrenderer/model.js","webpack://yjs-widgets/./lib/notebookrenderer/types.js","webpack://yjs-widgets/./lib/notebookrenderer/view.js","webpack://yjs-widgets/./lib/notebookrenderer/widgetManager.js","webpack://yjs-widgets/./lib/notebookrenderer/yCommProvider.js"],"sourcesContent":["export * from './model';\nexport * from './types';\nexport * from './notebookrenderer';\nexport * from './notebookrenderer/types';\nimport { notebookRenderer, yWidgetManager } from './notebookrenderer';\nexport default [notebookRenderer, yWidgetManager];\n","import { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport * as Y from 'yjs';\nexport class JupyterYModel {\n    constructor(commMetadata) {\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._yModelName = commMetadata.ymodel_name;\n        const ydoc = this.ydocFactory(commMetadata);\n        this._sharedModel = new JupyterYDoc(commMetadata, ydoc);\n    }\n    get yModelName() {\n        return this._yModelName;\n    }\n    get sharedModel() {\n        return this._sharedModel;\n    }\n    get sharedAttrsChanged() {\n        return this.sharedModel.attrsChanged;\n    }\n    get disposed() {\n        return this._disposed;\n    }\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    ydocFactory(commMetadata) {\n        return new Y.Doc();\n    }\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._sharedModel.dispose();\n        this._disposed.emit();\n        Signal.clearData(this);\n    }\n    addAttr(key, value) {\n        this.sharedModel.setAttr(key, value);\n    }\n    removeAttr(key) {\n        this.sharedModel.removeAttr(key);\n    }\n}\nexport class JupyterYDoc {\n    constructor(commMetadata, ydoc) {\n        this._attrsObserver = (event) => {\n            this._attrsChanged.emit(event.keys);\n        };\n        this._attrsChanged = new Signal(this);\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._commMetadata = commMetadata;\n        this._ydoc = ydoc;\n        if (commMetadata.create_ydoc) {\n            this._attrs = this._ydoc.getMap('_attrs');\n            this._attrs.observe(this._attrsObserver);\n        }\n    }\n    get commMetadata() {\n        return this._commMetadata;\n    }\n    get ydoc() {\n        return this._ydoc;\n    }\n    get attrs() {\n        return JSONExt.deepCopy(this._attrs.toJSON());\n    }\n    get attrsChanged() {\n        return this._attrsChanged;\n    }\n    get disposed() {\n        return this._disposed;\n    }\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._attrs.unobserve(this._attrsObserver);\n        this._disposed.emit();\n        Signal.clearData(this);\n        this._isDisposed = true;\n    }\n    getAttr(key) {\n        return this._attrs.get(key);\n    }\n    setAttr(key, value) {\n        this._attrs.set(key, value);\n    }\n    removeAttr(key) {\n        if (this._attrs.has(key)) {\n            this._attrs.delete(key);\n        }\n    }\n}\n","import { IConsoleTracker } from '@jupyterlab/console';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { NotebookRendererModel } from './model';\nimport { IJupyterYWidgetManager } from './types';\nimport { JupyterYWidget } from './view';\nimport { JupyterYWidgetManager } from './widgetManager';\nconst MIME_TYPE = 'application/vnd.jupyter.ywidget-view+json';\nexport const notebookRenderer = {\n    id: 'jupyterywidget:notebookRenderer',\n    autoStart: true,\n    requires: [IRenderMimeRegistry, INotebookTracker, IJupyterYWidgetManager],\n    activate: (app, rendermime, nbTracker, wmManager) => {\n        const rendererFactory = {\n            safe: true,\n            mimeTypes: [MIME_TYPE],\n            createRenderer: options => {\n                var _a, _b, _c;\n                const kernelId = (_c = (_b = (_a = nbTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.sessionContext.session) === null || _b === void 0 ? void 0 : _b.kernel) === null || _c === void 0 ? void 0 : _c.id;\n                const mimeType = options.mimeType;\n                const modelFactory = new NotebookRendererModel({\n                    kernelId,\n                    widgetManager: wmManager\n                });\n                return new JupyterYWidget({ mimeType, modelFactory });\n            }\n        };\n        rendermime.addFactory(rendererFactory, -100);\n    }\n};\nexport const yWidgetManager = {\n    id: 'yjs-widgets:yWidgetManagerPlugin',\n    autoStart: true,\n    requires: [],\n    optional: [INotebookTracker, IConsoleTracker],\n    provides: IJupyterYWidgetManager,\n    activate: (app, notebookTracker, consoleTracker) => {\n        const registry = new JupyterYWidgetManager();\n        const onKernelChanged = (_, changedArgs) => {\n            const { newValue, oldValue } = changedArgs;\n            if (newValue) {\n                registry.unregisterKernel(oldValue === null || oldValue === void 0 ? void 0 : oldValue.id);\n                registry.registerKernel(newValue);\n                newValue.disposed.connect(() => {\n                    registry.unregisterKernel(newValue.id);\n                });\n            }\n        };\n        [notebookTracker, consoleTracker].forEach(tracker => {\n            if (!tracker) {\n                return;\n            }\n            tracker.widgetAdded.connect(async (_, panel) => {\n                panel.sessionContext.kernelChanged.connect(onKernelChanged);\n                panel.disposed.connect(() => {\n                    panel.sessionContext.kernelChanged.disconnect(onKernelChanged);\n                });\n            });\n        });\n        return registry;\n    }\n};\n","export class NotebookRendererModel {\n    constructor(options) {\n        this._isDisposed = false;\n        this._widgetManager = options.widgetManager;\n        this._kernelId = options.kernelId;\n    }\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n    }\n    getYModel(commId) {\n        if (this._kernelId) {\n            return this._widgetManager.getWidgetModel(this._kernelId, commId);\n        }\n    }\n    createYWidget(commId, node) {\n        if (this._kernelId) {\n            const yModel = this._widgetManager.getWidgetModel(this._kernelId, commId);\n            if (yModel) {\n                const widgetFactory = this._widgetManager.getWidgetFactory(yModel.yModelName);\n                new widgetFactory(yModel, node);\n            }\n        }\n    }\n}\n","import { Token } from '@lumino/coreutils';\nexport const IJupyterYWidgetManager = new Token('yjs-widgets:IJupyterYWidgetManager', 'A manager of Yjs-based Jupyter widgets.');\n","import { Widget } from '@lumino/widgets';\nexport const CLASS_NAME = 'mimerenderer-jupyterywidget';\nexport class JupyterYWidget extends Widget {\n    /**\n     * Construct a new output widget.\n     */\n    constructor(options) {\n        super();\n        this._modelFactory = options.modelFactory;\n        this._mimeType = options.mimeType;\n        this.addClass(CLASS_NAME);\n    }\n    dispose() {\n        var _a;\n        if (this.isDisposed) {\n            return;\n        }\n        (_a = this._yModel) === null || _a === void 0 ? void 0 : _a.dispose();\n        super.dispose();\n    }\n    async renderModel(mimeModel) {\n        const modelId = mimeModel.data[this._mimeType]['model_id'];\n        this._yModel = this._modelFactory.getYModel(modelId);\n        if (!this._yModel) {\n            return;\n        }\n        this._modelFactory.createYWidget(modelId, this.node);\n    }\n}\n","import { YCommProvider } from './yCommProvider';\nexport class JupyterYWidgetManager {\n    constructor() {\n        this._registry = new Map();\n        this._yModelFactories = new Map();\n        this._yWidgetFactories = new Map();\n    }\n    registerKernel(kernel) {\n        const yModelFactories = this._yModelFactories;\n        const wm = new WidgetModelRegistry({ kernel, yModelFactories });\n        this._registry.set(kernel.id, wm);\n    }\n    unregisterKernel(kernelId) {\n        if (kernelId) {\n            this._registry.delete(kernelId);\n        }\n    }\n    registerWidget(name, yModelFactory, yWidgetFactory) {\n        this._yModelFactories.set(name, yModelFactory);\n        this._yWidgetFactories.set(name, yWidgetFactory);\n    }\n    getWidgetModel(kernelId, commId) {\n        var _a;\n        return (_a = this._registry.get(kernelId)) === null || _a === void 0 ? void 0 : _a.getModel(commId);\n    }\n    getWidgetFactory(modelName) {\n        return this._yWidgetFactories.get(modelName);\n    }\n}\nexport class WidgetModelRegistry {\n    constructor(options) {\n        /**\n         * Handle when a comm is opened.\n         */\n        this._handle_comm_open = async (comm, msg) => {\n            const yModelFactory = this._yModelFactories.get(msg.metadata.ymodel_name);\n            const yModel = new yModelFactory(msg.metadata);\n            new YCommProvider({\n                comm,\n                ydoc: yModel.sharedModel.ydoc\n            });\n            this._yModels.set(comm.commId, yModel);\n        };\n        this._yModels = new Map();\n        const { kernel, yModelFactories } = options;\n        this._yModelFactories = yModelFactories;\n        kernel.registerCommTarget('ywidget', this._handle_comm_open);\n    }\n    getModel(id) {\n        return this._yModels.get(id);\n    }\n}\n","import * as decoding from 'lib0/decoding';\nimport * as encoding from 'lib0/encoding';\nimport * as syncProtocol from 'y-protocols/sync';\nexport var YMessageType;\n(function (YMessageType) {\n    YMessageType[YMessageType[\"SYNC\"] = 0] = \"SYNC\";\n    YMessageType[YMessageType[\"AWARENESS\"] = 1] = \"AWARENESS\";\n})(YMessageType || (YMessageType = {}));\nexport class YCommProvider {\n    constructor(options) {\n        this._onMsg = (msg) => {\n            if (msg.buffers) {\n                const buffer = msg.buffers[0];\n                const buffer_uint8 = new Uint8Array(ArrayBuffer.isView(buffer) ? buffer.buffer : buffer);\n                const encoder = Private.readMessage(this, buffer_uint8, true);\n                if (encoding.length(encoder) > 1) {\n                    this._sendOverComm(encoding.toUint8Array(encoder));\n                }\n            }\n        };\n        this._updateHandler = (update, origin) => {\n            const encoder = encoding.createEncoder();\n            encoding.writeVarUint(encoder, YMessageType.SYNC);\n            syncProtocol.writeUpdate(encoder, update);\n            this._sendOverComm(encoding.toUint8Array(encoder));\n        };\n        this._isDisposed = false;\n        this._comm = options.comm;\n        this._ydoc = options.ydoc;\n        this._ydoc.on('update', this._updateHandler);\n        this._connect();\n    }\n    get doc() {\n        return this._ydoc;\n    }\n    get synced() {\n        return this._synced;\n    }\n    set synced(state) {\n        if (this._synced !== state) {\n            this._synced = state;\n        }\n    }\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._comm.close();\n        this._isDisposed = true;\n    }\n    _connect() {\n        this._sync();\n        this._comm.onMsg = this._onMsg;\n    }\n    _sync() {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, YMessageType.SYNC);\n        syncProtocol.writeSyncStep1(encoder, this._ydoc);\n        this._sendOverComm(encoding.toUint8Array(encoder));\n    }\n    _sendOverComm(bufferArray) {\n        this._comm.send({}, undefined, [bufferArray.buffer]);\n    }\n}\nvar Private;\n(function (Private) {\n    function syncMessageHandler(encoder, decoder, provider, emitSynced) {\n        encoding.writeVarUint(encoder, YMessageType.SYNC);\n        const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, provider.doc, provider);\n        if (emitSynced &&\n            syncMessageType === syncProtocol.messageYjsSyncStep2 &&\n            !provider.synced) {\n            syncProtocol.writeSyncStep2(encoder, provider.doc);\n            provider.synced = true;\n        }\n    }\n    Private.syncMessageHandler = syncMessageHandler;\n    function readMessage(provider, buf, emitSynced) {\n        const decoder = decoding.createDecoder(buf);\n        const encoder = encoding.createEncoder();\n        const messageType = decoding.readVarUint(decoder);\n        if (messageType === YMessageType.SYNC) {\n            syncMessageHandler(encoder, decoder, provider, emitSynced);\n        }\n        else {\n            console.error('Unable to compute message');\n        }\n        return encoder;\n    }\n    Private.readMessage = readMessage;\n})(Private || (Private = {}));\n"],"names":[],"sourceRoot":""}