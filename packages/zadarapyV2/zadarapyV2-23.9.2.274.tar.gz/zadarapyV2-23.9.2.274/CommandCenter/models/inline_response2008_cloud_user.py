# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse2008CloudUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'tenant': 'str',
        'tenant_internal_id': 'int',
        'custom_network': 'str',
        'vlan_id': 'int'
    }

    attribute_map = {
        'username': 'username',
        'tenant': 'tenant',
        'tenant_internal_id': 'tenant_internal_id',
        'custom_network': 'custom_network',
        'vlan_id': 'vlan_id'
    }

    def __init__(self, username=None, tenant=None, tenant_internal_id=None, custom_network=None, vlan_id=None, _configuration=None):  # noqa: E501
        """InlineResponse2008CloudUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._username = None
        self._tenant = None
        self._tenant_internal_id = None
        self._custom_network = None
        self._vlan_id = None
        self.discriminator = None

        if username is not None:
            self.username = username
        if tenant is not None:
            self.tenant = tenant
        if tenant_internal_id is not None:
            self.tenant_internal_id = tenant_internal_id
        if custom_network is not None:
            self.custom_network = custom_network
        if vlan_id is not None:
            self.vlan_id = vlan_id

    @property
    def username(self):
        """Gets the username of this InlineResponse2008CloudUser.  # noqa: E501


        :return: The username of this InlineResponse2008CloudUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InlineResponse2008CloudUser.


        :param username: The username of this InlineResponse2008CloudUser.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def tenant(self):
        """Gets the tenant of this InlineResponse2008CloudUser.  # noqa: E501


        :return: The tenant of this InlineResponse2008CloudUser.  # noqa: E501
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this InlineResponse2008CloudUser.


        :param tenant: The tenant of this InlineResponse2008CloudUser.  # noqa: E501
        :type: str
        """

        self._tenant = tenant

    @property
    def tenant_internal_id(self):
        """Gets the tenant_internal_id of this InlineResponse2008CloudUser.  # noqa: E501


        :return: The tenant_internal_id of this InlineResponse2008CloudUser.  # noqa: E501
        :rtype: int
        """
        return self._tenant_internal_id

    @tenant_internal_id.setter
    def tenant_internal_id(self, tenant_internal_id):
        """Sets the tenant_internal_id of this InlineResponse2008CloudUser.


        :param tenant_internal_id: The tenant_internal_id of this InlineResponse2008CloudUser.  # noqa: E501
        :type: int
        """

        self._tenant_internal_id = tenant_internal_id

    @property
    def custom_network(self):
        """Gets the custom_network of this InlineResponse2008CloudUser.  # noqa: E501


        :return: The custom_network of this InlineResponse2008CloudUser.  # noqa: E501
        :rtype: str
        """
        return self._custom_network

    @custom_network.setter
    def custom_network(self, custom_network):
        """Sets the custom_network of this InlineResponse2008CloudUser.


        :param custom_network: The custom_network of this InlineResponse2008CloudUser.  # noqa: E501
        :type: str
        """

        self._custom_network = custom_network

    @property
    def vlan_id(self):
        """Gets the vlan_id of this InlineResponse2008CloudUser.  # noqa: E501


        :return: The vlan_id of this InlineResponse2008CloudUser.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this InlineResponse2008CloudUser.


        :param vlan_id: The vlan_id of this InlineResponse2008CloudUser.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008CloudUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008CloudUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2008CloudUser):
            return True

        return self.to_dict() != other.to_dict()
