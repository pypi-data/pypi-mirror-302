# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.create_file_response import CreateFileResponse
from ..types.file_response import FileResponse
from ..types.file_type import FileType
from ..types.gcs_signed_url_response import GcsSignedUrlResponse
from ..types.http_validation_error import HttpValidationError
from ..types.list_files_response import ListFilesResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FileClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        deal_id: int,
        group_id: int,
        *,
        name: str,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateFileResponse:
        """
        Create a new file for a specific group and deal.

        Parameters
        ----------
        deal_id : int

        group_id : int

        name : str

        type : typing.Optional[FileType]
            The type of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateFileResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.create(
            deal_id=1,
            group_id=1,
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/",
            method="POST",
            json={"name": name, "type": type},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(CreateFileResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        deal_id: int,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListFilesResponse:
        """
        Get all files for a specific group and deal.

        Parameters
        ----------
        deal_id : int

        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListFilesResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.list(
            deal_id=1,
            group_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/all",
            method="GET",
            params={"sort_by": sort_by, "sort_order": sort_order, "page": page, "page_size": page_size},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListFilesResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, deal_id: int, file_id: int, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FileResponse:
        """
        Get a file by its ID for a specific group and deal.

        Parameters
        ----------
        deal_id : int

        file_id : int

        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.get(
            deal_id=1,
            file_id=1,
            group_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/",
            method="GET",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(FileResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        file_id: int,
        group_id: int,
        deal_id: int,
        *,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Update a file by its ID for a specific group and deal.

        Parameters
        ----------
        file_id : int

        group_id : int

        deal_id : int

        type : typing.Optional[FileType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.update(
            file_id=1,
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/",
            method="PUT",
            json={"type": type},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(FileResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self,
        file_id: int,
        group_id: int,
        deal_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Any:
        """
        Delete a file by its ID for a specific group and deal.

        Parameters
        ----------
        file_id : int

        group_id : int

        deal_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.delete(
            file_id=1,
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/",
            method="DELETE",
            params={"archive": archive},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def read_url(
        self,
        deal_id: int,
        file_id: int,
        group_id: int,
        *,
        content_type: typing.Optional[str] = None,
        download: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GcsSignedUrlResponse:
        """
        Get a signed URL to read a file by its ID for a specific group and deal.

        Parameters
        ----------
        deal_id : int

        file_id : int

        group_id : int

        content_type : typing.Optional[str]

        download : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GcsSignedUrlResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.file.read_url(
            deal_id=1,
            file_id=1,
            group_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/signed-url",
            method="GET",
            params={"content_type": content_type, "download": download},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(GcsSignedUrlResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncFileClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        deal_id: int,
        group_id: int,
        *,
        name: str,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateFileResponse:
        """
        Create a new file for a specific group and deal.

        Parameters
        ----------
        deal_id : int

        group_id : int

        name : str

        type : typing.Optional[FileType]
            The type of the file

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateFileResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.file.create(
            deal_id=1,
            group_id=1,
            name="name",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/",
            method="POST",
            json={"name": name, "type": type},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(CreateFileResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        deal_id: int,
        group_id: int,
        *,
        sort_by: typing.Optional[str] = None,
        sort_order: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListFilesResponse:
        """
        Get all files for a specific group and deal.

        Parameters
        ----------
        deal_id : int

        group_id : int

        sort_by : typing.Optional[str]

        sort_order : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListFilesResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.file.list(
            deal_id=1,
            group_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/all",
            method="GET",
            params={"sort_by": sort_by, "sort_order": sort_order, "page": page, "page_size": page_size},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListFilesResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, deal_id: int, file_id: int, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> FileResponse:
        """
        Get a file by its ID for a specific group and deal.

        Parameters
        ----------
        deal_id : int

        file_id : int

        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.file.get(
            deal_id=1,
            file_id=1,
            group_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/",
            method="GET",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(FileResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        file_id: int,
        group_id: int,
        deal_id: int,
        *,
        type: typing.Optional[FileType] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FileResponse:
        """
        Update a file by its ID for a specific group and deal.

        Parameters
        ----------
        file_id : int

        group_id : int

        deal_id : int

        type : typing.Optional[FileType]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FileResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.file.update(
            file_id=1,
            group_id=1,
            deal_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/",
            method="PUT",
            json={"type": type},
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(FileResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self,
        file_id: int,
        group_id: int,
        deal_id: int,
        *,
        archive: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Any:
        """
        Delete a file by its ID for a specific group and deal.

        Parameters
        ----------
        file_id : int

        group_id : int

        deal_id : int

        archive : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.file.delete(
            file_id=1,
            group_id=1,
            deal_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/",
            method="DELETE",
            params={"archive": archive},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def read_url(
        self,
        deal_id: int,
        file_id: int,
        group_id: int,
        *,
        content_type: typing.Optional[str] = None,
        download: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GcsSignedUrlResponse:
        """
        Get a signed URL to read a file by its ID for a specific group and deal.

        Parameters
        ----------
        deal_id : int

        file_id : int

        group_id : int

        content_type : typing.Optional[str]

        download : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GcsSignedUrlResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.file.read_url(
            deal_id=1,
            file_id=1,
            group_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/file/{jsonable_encoder(file_id)}/signed-url",
            method="GET",
            params={"content_type": content_type, "download": download},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(GcsSignedUrlResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
