# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse20020ResponseVnis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'ip': 'str',
        'ipv6': 'str',
        'gateway': 'str',
        'ipv6_gateway': 'str',
        'netmask': 'str',
        'ipv6_netmask': 'str',
        'vlan_id': 'int',
        'interface': 'str',
        'net_uuid': 'str'
    }

    attribute_map = {
        'id': 'id',
        'ip': 'ip',
        'ipv6': 'ipv6',
        'gateway': 'gateway',
        'ipv6_gateway': 'ipv6_gateway',
        'netmask': 'netmask',
        'ipv6_netmask': 'ipv6_netmask',
        'vlan_id': 'vlan_id',
        'interface': 'interface',
        'net_uuid': 'net_uuid'
    }

    def __init__(self, id=None, ip=None, ipv6=None, gateway=None, ipv6_gateway=None, netmask=None, ipv6_netmask=None, vlan_id=None, interface=None, net_uuid=None, _configuration=None):  # noqa: E501
        """InlineResponse20020ResponseVnis - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._ip = None
        self._ipv6 = None
        self._gateway = None
        self._ipv6_gateway = None
        self._netmask = None
        self._ipv6_netmask = None
        self._vlan_id = None
        self._interface = None
        self._net_uuid = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if ip is not None:
            self.ip = ip
        if ipv6 is not None:
            self.ipv6 = ipv6
        if gateway is not None:
            self.gateway = gateway
        if ipv6_gateway is not None:
            self.ipv6_gateway = ipv6_gateway
        if netmask is not None:
            self.netmask = netmask
        if ipv6_netmask is not None:
            self.ipv6_netmask = ipv6_netmask
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if interface is not None:
            self.interface = interface
        if net_uuid is not None:
            self.net_uuid = net_uuid

    @property
    def id(self):
        """Gets the id of this InlineResponse20020ResponseVnis.  # noqa: E501


        :return: The id of this InlineResponse20020ResponseVnis.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20020ResponseVnis.


        :param id: The id of this InlineResponse20020ResponseVnis.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this InlineResponse20020ResponseVnis.  # noqa: E501


        :return: The ip of this InlineResponse20020ResponseVnis.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this InlineResponse20020ResponseVnis.


        :param ip: The ip of this InlineResponse20020ResponseVnis.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def ipv6(self):
        """Gets the ipv6 of this InlineResponse20020ResponseVnis.  # noqa: E501


        :return: The ipv6 of this InlineResponse20020ResponseVnis.  # noqa: E501
        :rtype: str
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this InlineResponse20020ResponseVnis.


        :param ipv6: The ipv6 of this InlineResponse20020ResponseVnis.  # noqa: E501
        :type: str
        """

        self._ipv6 = ipv6

    @property
    def gateway(self):
        """Gets the gateway of this InlineResponse20020ResponseVnis.  # noqa: E501


        :return: The gateway of this InlineResponse20020ResponseVnis.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this InlineResponse20020ResponseVnis.


        :param gateway: The gateway of this InlineResponse20020ResponseVnis.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def ipv6_gateway(self):
        """Gets the ipv6_gateway of this InlineResponse20020ResponseVnis.  # noqa: E501


        :return: The ipv6_gateway of this InlineResponse20020ResponseVnis.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_gateway

    @ipv6_gateway.setter
    def ipv6_gateway(self, ipv6_gateway):
        """Sets the ipv6_gateway of this InlineResponse20020ResponseVnis.


        :param ipv6_gateway: The ipv6_gateway of this InlineResponse20020ResponseVnis.  # noqa: E501
        :type: str
        """

        self._ipv6_gateway = ipv6_gateway

    @property
    def netmask(self):
        """Gets the netmask of this InlineResponse20020ResponseVnis.  # noqa: E501


        :return: The netmask of this InlineResponse20020ResponseVnis.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this InlineResponse20020ResponseVnis.


        :param netmask: The netmask of this InlineResponse20020ResponseVnis.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def ipv6_netmask(self):
        """Gets the ipv6_netmask of this InlineResponse20020ResponseVnis.  # noqa: E501


        :return: The ipv6_netmask of this InlineResponse20020ResponseVnis.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_netmask

    @ipv6_netmask.setter
    def ipv6_netmask(self, ipv6_netmask):
        """Sets the ipv6_netmask of this InlineResponse20020ResponseVnis.


        :param ipv6_netmask: The ipv6_netmask of this InlineResponse20020ResponseVnis.  # noqa: E501
        :type: str
        """

        self._ipv6_netmask = ipv6_netmask

    @property
    def vlan_id(self):
        """Gets the vlan_id of this InlineResponse20020ResponseVnis.  # noqa: E501


        :return: The vlan_id of this InlineResponse20020ResponseVnis.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this InlineResponse20020ResponseVnis.


        :param vlan_id: The vlan_id of this InlineResponse20020ResponseVnis.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    @property
    def interface(self):
        """Gets the interface of this InlineResponse20020ResponseVnis.  # noqa: E501


        :return: The interface of this InlineResponse20020ResponseVnis.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this InlineResponse20020ResponseVnis.


        :param interface: The interface of this InlineResponse20020ResponseVnis.  # noqa: E501
        :type: str
        """

        self._interface = interface

    @property
    def net_uuid(self):
        """Gets the net_uuid of this InlineResponse20020ResponseVnis.  # noqa: E501


        :return: The net_uuid of this InlineResponse20020ResponseVnis.  # noqa: E501
        :rtype: str
        """
        return self._net_uuid

    @net_uuid.setter
    def net_uuid(self, net_uuid):
        """Sets the net_uuid of this InlineResponse20020ResponseVnis.


        :param net_uuid: The net_uuid of this InlineResponse20020ResponseVnis.  # noqa: E501
        :type: str
        """

        self._net_uuid = net_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20020ResponseVnis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20020ResponseVnis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20020ResponseVnis):
            return True

        return self.to_dict() != other.to_dict()
