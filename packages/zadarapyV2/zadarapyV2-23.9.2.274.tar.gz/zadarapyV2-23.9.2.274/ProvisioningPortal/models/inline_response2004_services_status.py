# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class InlineResponse2004ServicesStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_name': 'str',
        'service_display_name': 'str',
        'status': 'str',
        'error': 'str'
    }

    attribute_map = {
        'service_name': 'service_name',
        'service_display_name': 'service_display_name',
        'status': 'status',
        'error': 'error'
    }

    def __init__(self, service_name=None, service_display_name=None, status=None, error=None, _configuration=None):  # noqa: E501
        """InlineResponse2004ServicesStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._service_name = None
        self._service_display_name = None
        self._status = None
        self._error = None
        self.discriminator = None

        if service_name is not None:
            self.service_name = service_name
        if service_display_name is not None:
            self.service_display_name = service_display_name
        if status is not None:
            self.status = status
        if error is not None:
            self.error = error

    @property
    def service_name(self):
        """Gets the service_name of this InlineResponse2004ServicesStatus.  # noqa: E501


        :return: The service_name of this InlineResponse2004ServicesStatus.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this InlineResponse2004ServicesStatus.


        :param service_name: The service_name of this InlineResponse2004ServicesStatus.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def service_display_name(self):
        """Gets the service_display_name of this InlineResponse2004ServicesStatus.  # noqa: E501


        :return: The service_display_name of this InlineResponse2004ServicesStatus.  # noqa: E501
        :rtype: str
        """
        return self._service_display_name

    @service_display_name.setter
    def service_display_name(self, service_display_name):
        """Sets the service_display_name of this InlineResponse2004ServicesStatus.


        :param service_display_name: The service_display_name of this InlineResponse2004ServicesStatus.  # noqa: E501
        :type: str
        """

        self._service_display_name = service_display_name

    @property
    def status(self):
        """Gets the status of this InlineResponse2004ServicesStatus.  # noqa: E501


        :return: The status of this InlineResponse2004ServicesStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2004ServicesStatus.


        :param status: The status of this InlineResponse2004ServicesStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def error(self):
        """Gets the error of this InlineResponse2004ServicesStatus.  # noqa: E501


        :return: The error of this InlineResponse2004ServicesStatus.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this InlineResponse2004ServicesStatus.


        :param error: The error of this InlineResponse2004ServicesStatus.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004ServicesStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004ServicesStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2004ServicesStatus):
            return True

        return self.to_dict() != other.to_dict()
