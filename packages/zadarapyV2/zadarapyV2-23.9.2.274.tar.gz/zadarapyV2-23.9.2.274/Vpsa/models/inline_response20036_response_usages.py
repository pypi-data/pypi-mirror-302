# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse20036ResponseUsages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rd_iops': 'int',
        'rd_iotime': 'float',
        'rd_bandwidth': 'float',
        'rd_queue_len': 'int',
        'wrt_iops': 'int',
        'wrt_iotime': 'float',
        'wrt_bandwidth': 'float',
        'wrt_queue_len': 'int',
        'point': 'int'
    }

    attribute_map = {
        'rd_iops': 'rd_iops',
        'rd_iotime': 'rd_iotime',
        'rd_bandwidth': 'rd_bandwidth',
        'rd_queue_len': 'rd_queue_len',
        'wrt_iops': 'wrt_iops',
        'wrt_iotime': 'wrt_iotime',
        'wrt_bandwidth': 'wrt_bandwidth',
        'wrt_queue_len': 'wrt_queue_len',
        'point': 'point'
    }

    def __init__(self, rd_iops=None, rd_iotime=None, rd_bandwidth=None, rd_queue_len=None, wrt_iops=None, wrt_iotime=None, wrt_bandwidth=None, wrt_queue_len=None, point=None, _configuration=None):  # noqa: E501
        """InlineResponse20036ResponseUsages - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._rd_iops = None
        self._rd_iotime = None
        self._rd_bandwidth = None
        self._rd_queue_len = None
        self._wrt_iops = None
        self._wrt_iotime = None
        self._wrt_bandwidth = None
        self._wrt_queue_len = None
        self._point = None
        self.discriminator = None

        if rd_iops is not None:
            self.rd_iops = rd_iops
        if rd_iotime is not None:
            self.rd_iotime = rd_iotime
        if rd_bandwidth is not None:
            self.rd_bandwidth = rd_bandwidth
        if rd_queue_len is not None:
            self.rd_queue_len = rd_queue_len
        if wrt_iops is not None:
            self.wrt_iops = wrt_iops
        if wrt_iotime is not None:
            self.wrt_iotime = wrt_iotime
        if wrt_bandwidth is not None:
            self.wrt_bandwidth = wrt_bandwidth
        if wrt_queue_len is not None:
            self.wrt_queue_len = wrt_queue_len
        if point is not None:
            self.point = point

    @property
    def rd_iops(self):
        """Gets the rd_iops of this InlineResponse20036ResponseUsages.  # noqa: E501


        :return: The rd_iops of this InlineResponse20036ResponseUsages.  # noqa: E501
        :rtype: int
        """
        return self._rd_iops

    @rd_iops.setter
    def rd_iops(self, rd_iops):
        """Sets the rd_iops of this InlineResponse20036ResponseUsages.


        :param rd_iops: The rd_iops of this InlineResponse20036ResponseUsages.  # noqa: E501
        :type: int
        """

        self._rd_iops = rd_iops

    @property
    def rd_iotime(self):
        """Gets the rd_iotime of this InlineResponse20036ResponseUsages.  # noqa: E501


        :return: The rd_iotime of this InlineResponse20036ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._rd_iotime

    @rd_iotime.setter
    def rd_iotime(self, rd_iotime):
        """Sets the rd_iotime of this InlineResponse20036ResponseUsages.


        :param rd_iotime: The rd_iotime of this InlineResponse20036ResponseUsages.  # noqa: E501
        :type: float
        """

        self._rd_iotime = rd_iotime

    @property
    def rd_bandwidth(self):
        """Gets the rd_bandwidth of this InlineResponse20036ResponseUsages.  # noqa: E501


        :return: The rd_bandwidth of this InlineResponse20036ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._rd_bandwidth

    @rd_bandwidth.setter
    def rd_bandwidth(self, rd_bandwidth):
        """Sets the rd_bandwidth of this InlineResponse20036ResponseUsages.


        :param rd_bandwidth: The rd_bandwidth of this InlineResponse20036ResponseUsages.  # noqa: E501
        :type: float
        """

        self._rd_bandwidth = rd_bandwidth

    @property
    def rd_queue_len(self):
        """Gets the rd_queue_len of this InlineResponse20036ResponseUsages.  # noqa: E501


        :return: The rd_queue_len of this InlineResponse20036ResponseUsages.  # noqa: E501
        :rtype: int
        """
        return self._rd_queue_len

    @rd_queue_len.setter
    def rd_queue_len(self, rd_queue_len):
        """Sets the rd_queue_len of this InlineResponse20036ResponseUsages.


        :param rd_queue_len: The rd_queue_len of this InlineResponse20036ResponseUsages.  # noqa: E501
        :type: int
        """

        self._rd_queue_len = rd_queue_len

    @property
    def wrt_iops(self):
        """Gets the wrt_iops of this InlineResponse20036ResponseUsages.  # noqa: E501


        :return: The wrt_iops of this InlineResponse20036ResponseUsages.  # noqa: E501
        :rtype: int
        """
        return self._wrt_iops

    @wrt_iops.setter
    def wrt_iops(self, wrt_iops):
        """Sets the wrt_iops of this InlineResponse20036ResponseUsages.


        :param wrt_iops: The wrt_iops of this InlineResponse20036ResponseUsages.  # noqa: E501
        :type: int
        """

        self._wrt_iops = wrt_iops

    @property
    def wrt_iotime(self):
        """Gets the wrt_iotime of this InlineResponse20036ResponseUsages.  # noqa: E501


        :return: The wrt_iotime of this InlineResponse20036ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._wrt_iotime

    @wrt_iotime.setter
    def wrt_iotime(self, wrt_iotime):
        """Sets the wrt_iotime of this InlineResponse20036ResponseUsages.


        :param wrt_iotime: The wrt_iotime of this InlineResponse20036ResponseUsages.  # noqa: E501
        :type: float
        """

        self._wrt_iotime = wrt_iotime

    @property
    def wrt_bandwidth(self):
        """Gets the wrt_bandwidth of this InlineResponse20036ResponseUsages.  # noqa: E501


        :return: The wrt_bandwidth of this InlineResponse20036ResponseUsages.  # noqa: E501
        :rtype: float
        """
        return self._wrt_bandwidth

    @wrt_bandwidth.setter
    def wrt_bandwidth(self, wrt_bandwidth):
        """Sets the wrt_bandwidth of this InlineResponse20036ResponseUsages.


        :param wrt_bandwidth: The wrt_bandwidth of this InlineResponse20036ResponseUsages.  # noqa: E501
        :type: float
        """

        self._wrt_bandwidth = wrt_bandwidth

    @property
    def wrt_queue_len(self):
        """Gets the wrt_queue_len of this InlineResponse20036ResponseUsages.  # noqa: E501


        :return: The wrt_queue_len of this InlineResponse20036ResponseUsages.  # noqa: E501
        :rtype: int
        """
        return self._wrt_queue_len

    @wrt_queue_len.setter
    def wrt_queue_len(self, wrt_queue_len):
        """Sets the wrt_queue_len of this InlineResponse20036ResponseUsages.


        :param wrt_queue_len: The wrt_queue_len of this InlineResponse20036ResponseUsages.  # noqa: E501
        :type: int
        """

        self._wrt_queue_len = wrt_queue_len

    @property
    def point(self):
        """Gets the point of this InlineResponse20036ResponseUsages.  # noqa: E501


        :return: The point of this InlineResponse20036ResponseUsages.  # noqa: E501
        :rtype: int
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this InlineResponse20036ResponseUsages.


        :param point: The point of this InlineResponse20036ResponseUsages.  # noqa: E501
        :type: int
        """

        self._point = point

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20036ResponseUsages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20036ResponseUsages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20036ResponseUsages):
            return True

        return self.to_dict() != other.to_dict()
