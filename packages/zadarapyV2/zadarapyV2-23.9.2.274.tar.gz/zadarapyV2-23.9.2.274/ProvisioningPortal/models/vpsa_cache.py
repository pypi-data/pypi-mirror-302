# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class VpsaCache(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extra_gb': 'int',
        'extra_partitions': 'int',
        'included_gb': 'int',
        'included_partitions': 'int',
        'total_gb': 'int',
        'total_partitions': 'int'
    }

    attribute_map = {
        'extra_gb': 'extra_gb',
        'extra_partitions': 'extra_partitions',
        'included_gb': 'included_gb',
        'included_partitions': 'included_partitions',
        'total_gb': 'total_gb',
        'total_partitions': 'total_partitions'
    }

    def __init__(self, extra_gb=None, extra_partitions=None, included_gb=None, included_partitions=None, total_gb=None, total_partitions=None, _configuration=None):  # noqa: E501
        """VpsaCache - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._extra_gb = None
        self._extra_partitions = None
        self._included_gb = None
        self._included_partitions = None
        self._total_gb = None
        self._total_partitions = None
        self.discriminator = None

        if extra_gb is not None:
            self.extra_gb = extra_gb
        if extra_partitions is not None:
            self.extra_partitions = extra_partitions
        if included_gb is not None:
            self.included_gb = included_gb
        if included_partitions is not None:
            self.included_partitions = included_partitions
        if total_gb is not None:
            self.total_gb = total_gb
        if total_partitions is not None:
            self.total_partitions = total_partitions

    @property
    def extra_gb(self):
        """Gets the extra_gb of this VpsaCache.  # noqa: E501


        :return: The extra_gb of this VpsaCache.  # noqa: E501
        :rtype: int
        """
        return self._extra_gb

    @extra_gb.setter
    def extra_gb(self, extra_gb):
        """Sets the extra_gb of this VpsaCache.


        :param extra_gb: The extra_gb of this VpsaCache.  # noqa: E501
        :type: int
        """

        self._extra_gb = extra_gb

    @property
    def extra_partitions(self):
        """Gets the extra_partitions of this VpsaCache.  # noqa: E501


        :return: The extra_partitions of this VpsaCache.  # noqa: E501
        :rtype: int
        """
        return self._extra_partitions

    @extra_partitions.setter
    def extra_partitions(self, extra_partitions):
        """Sets the extra_partitions of this VpsaCache.


        :param extra_partitions: The extra_partitions of this VpsaCache.  # noqa: E501
        :type: int
        """

        self._extra_partitions = extra_partitions

    @property
    def included_gb(self):
        """Gets the included_gb of this VpsaCache.  # noqa: E501


        :return: The included_gb of this VpsaCache.  # noqa: E501
        :rtype: int
        """
        return self._included_gb

    @included_gb.setter
    def included_gb(self, included_gb):
        """Sets the included_gb of this VpsaCache.


        :param included_gb: The included_gb of this VpsaCache.  # noqa: E501
        :type: int
        """

        self._included_gb = included_gb

    @property
    def included_partitions(self):
        """Gets the included_partitions of this VpsaCache.  # noqa: E501


        :return: The included_partitions of this VpsaCache.  # noqa: E501
        :rtype: int
        """
        return self._included_partitions

    @included_partitions.setter
    def included_partitions(self, included_partitions):
        """Sets the included_partitions of this VpsaCache.


        :param included_partitions: The included_partitions of this VpsaCache.  # noqa: E501
        :type: int
        """

        self._included_partitions = included_partitions

    @property
    def total_gb(self):
        """Gets the total_gb of this VpsaCache.  # noqa: E501


        :return: The total_gb of this VpsaCache.  # noqa: E501
        :rtype: int
        """
        return self._total_gb

    @total_gb.setter
    def total_gb(self, total_gb):
        """Sets the total_gb of this VpsaCache.


        :param total_gb: The total_gb of this VpsaCache.  # noqa: E501
        :type: int
        """

        self._total_gb = total_gb

    @property
    def total_partitions(self):
        """Gets the total_partitions of this VpsaCache.  # noqa: E501


        :return: The total_partitions of this VpsaCache.  # noqa: E501
        :rtype: int
        """
        return self._total_partitions

    @total_partitions.setter
    def total_partitions(self, total_partitions):
        """Sets the total_partitions of this VpsaCache.


        :param total_partitions: The total_partitions of this VpsaCache.  # noqa: E501
        :type: int
        """

        self._total_partitions = total_partitions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VpsaCache, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VpsaCache):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VpsaCache):
            return True

        return self.to_dict() != other.to_dict()
