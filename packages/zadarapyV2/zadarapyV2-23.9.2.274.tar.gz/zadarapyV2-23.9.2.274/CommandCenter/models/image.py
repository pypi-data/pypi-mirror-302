# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class Image(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'size': 'int',
        'checksum': 'str',
        'internal_id': 'int',
        'image_type': 'str',
        'recommended_vpsa_image': 'bool',
        'default_vpsa_image': 'bool',
        'default_zios_image': 'bool',
        'default_zios_gen2_image': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'size': 'size',
        'checksum': 'checksum',
        'internal_id': 'internal_id',
        'image_type': 'image_type',
        'recommended_vpsa_image': 'recommended_vpsa_image',
        'default_vpsa_image': 'default_vpsa_image',
        'default_zios_image': 'default_zios_image',
        'default_zios_gen2_image': 'default_zios_gen2_image'
    }

    def __init__(self, name=None, size=None, checksum=None, internal_id=None, image_type=None, recommended_vpsa_image=None, default_vpsa_image=None, default_zios_image=None, default_zios_gen2_image=None, _configuration=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._size = None
        self._checksum = None
        self._internal_id = None
        self._image_type = None
        self._recommended_vpsa_image = None
        self._default_vpsa_image = None
        self._default_zios_image = None
        self._default_zios_gen2_image = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if size is not None:
            self.size = size
        if checksum is not None:
            self.checksum = checksum
        if internal_id is not None:
            self.internal_id = internal_id
        if image_type is not None:
            self.image_type = image_type
        if recommended_vpsa_image is not None:
            self.recommended_vpsa_image = recommended_vpsa_image
        if default_vpsa_image is not None:
            self.default_vpsa_image = default_vpsa_image
        if default_zios_image is not None:
            self.default_zios_image = default_zios_image
        if default_zios_gen2_image is not None:
            self.default_zios_gen2_image = default_zios_gen2_image

    @property
    def name(self):
        """Gets the name of this Image.  # noqa: E501


        :return: The name of this Image.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Image.


        :param name: The name of this Image.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this Image.  # noqa: E501


        :return: The size of this Image.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Image.


        :param size: The size of this Image.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def checksum(self):
        """Gets the checksum of this Image.  # noqa: E501


        :return: The checksum of this Image.  # noqa: E501
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum):
        """Sets the checksum of this Image.


        :param checksum: The checksum of this Image.  # noqa: E501
        :type: str
        """

        self._checksum = checksum

    @property
    def internal_id(self):
        """Gets the internal_id of this Image.  # noqa: E501


        :return: The internal_id of this Image.  # noqa: E501
        :rtype: int
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this Image.


        :param internal_id: The internal_id of this Image.  # noqa: E501
        :type: int
        """

        self._internal_id = internal_id

    @property
    def image_type(self):
        """Gets the image_type of this Image.  # noqa: E501


        :return: The image_type of this Image.  # noqa: E501
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this Image.


        :param image_type: The image_type of this Image.  # noqa: E501
        :type: str
        """

        self._image_type = image_type

    @property
    def recommended_vpsa_image(self):
        """Gets the recommended_vpsa_image of this Image.  # noqa: E501


        :return: The recommended_vpsa_image of this Image.  # noqa: E501
        :rtype: bool
        """
        return self._recommended_vpsa_image

    @recommended_vpsa_image.setter
    def recommended_vpsa_image(self, recommended_vpsa_image):
        """Sets the recommended_vpsa_image of this Image.


        :param recommended_vpsa_image: The recommended_vpsa_image of this Image.  # noqa: E501
        :type: bool
        """

        self._recommended_vpsa_image = recommended_vpsa_image

    @property
    def default_vpsa_image(self):
        """Gets the default_vpsa_image of this Image.  # noqa: E501


        :return: The default_vpsa_image of this Image.  # noqa: E501
        :rtype: bool
        """
        return self._default_vpsa_image

    @default_vpsa_image.setter
    def default_vpsa_image(self, default_vpsa_image):
        """Sets the default_vpsa_image of this Image.


        :param default_vpsa_image: The default_vpsa_image of this Image.  # noqa: E501
        :type: bool
        """

        self._default_vpsa_image = default_vpsa_image

    @property
    def default_zios_image(self):
        """Gets the default_zios_image of this Image.  # noqa: E501


        :return: The default_zios_image of this Image.  # noqa: E501
        :rtype: bool
        """
        return self._default_zios_image

    @default_zios_image.setter
    def default_zios_image(self, default_zios_image):
        """Sets the default_zios_image of this Image.


        :param default_zios_image: The default_zios_image of this Image.  # noqa: E501
        :type: bool
        """

        self._default_zios_image = default_zios_image

    @property
    def default_zios_gen2_image(self):
        """Gets the default_zios_gen2_image of this Image.  # noqa: E501


        :return: The default_zios_gen2_image of this Image.  # noqa: E501
        :rtype: bool
        """
        return self._default_zios_gen2_image

    @default_zios_gen2_image.setter
    def default_zios_gen2_image(self, default_zios_gen2_image):
        """Sets the default_zios_gen2_image of this Image.


        :param default_zios_gen2_image: The default_zios_gen2_image of this Image.  # noqa: E501
        :type: bool
        """

        self._default_zios_gen2_image = default_zios_gen2_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Image, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Image):
            return True

        return self.to_dict() != other.to_dict()
