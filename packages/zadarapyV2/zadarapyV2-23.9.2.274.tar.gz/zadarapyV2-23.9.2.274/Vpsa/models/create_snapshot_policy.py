# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class CreateSnapshotPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'create_policy': 'str',
        'delete_policy': 'str',
        'destination_policy': 'str',
        'empty': 'str',
        'attach': 'str'
    }

    attribute_map = {
        'name': 'name',
        'create_policy': 'create_policy',
        'delete_policy': 'delete_policy',
        'destination_policy': 'destination_policy',
        'empty': 'empty',
        'attach': 'attach'
    }

    def __init__(self, name=None, create_policy=None, delete_policy=None, destination_policy=None, empty=None, attach=None, _configuration=None):  # noqa: E501
        """CreateSnapshotPolicy - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._create_policy = None
        self._delete_policy = None
        self._destination_policy = None
        self._empty = None
        self._attach = None
        self.discriminator = None

        self.name = name
        self.create_policy = create_policy
        self.delete_policy = delete_policy
        if destination_policy is not None:
            self.destination_policy = destination_policy
        if empty is not None:
            self.empty = empty
        if attach is not None:
            self.attach = attach

    @property
    def name(self):
        """Gets the name of this CreateSnapshotPolicy.  # noqa: E501

        Snapshot policy name  # noqa: E501

        :return: The name of this CreateSnapshotPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSnapshotPolicy.

        Snapshot policy name  # noqa: E501

        :param name: The name of this CreateSnapshotPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def create_policy(self):
        """Gets the create_policy of this CreateSnapshotPolicy.  # noqa: E501

        Define the minimal interval of snapshot creation. The format is similar to a cron job - Minute, Hour, Day of Month, Month, Day Of Week (Minute supports random value - D0)  # noqa: E501

        :return: The create_policy of this CreateSnapshotPolicy.  # noqa: E501
        :rtype: str
        """
        return self._create_policy

    @create_policy.setter
    def create_policy(self, create_policy):
        """Sets the create_policy of this CreateSnapshotPolicy.

        Define the minimal interval of snapshot creation. The format is similar to a cron job - Minute, Hour, Day of Month, Month, Day Of Week (Minute supports random value - D0)  # noqa: E501

        :param create_policy: The create_policy of this CreateSnapshotPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and create_policy is None:
            raise ValueError("Invalid value for `create_policy`, must not be `None`")  # noqa: E501

        self._create_policy = create_policy

    @property
    def delete_policy(self):
        """Gets the delete_policy of this CreateSnapshotPolicy.  # noqa: E501

        minutes hours days or N number_of_snapshots_to_keep.  # noqa: E501

        :return: The delete_policy of this CreateSnapshotPolicy.  # noqa: E501
        :rtype: str
        """
        return self._delete_policy

    @delete_policy.setter
    def delete_policy(self, delete_policy):
        """Sets the delete_policy of this CreateSnapshotPolicy.

        minutes hours days or N number_of_snapshots_to_keep.  # noqa: E501

        :param delete_policy: The delete_policy of this CreateSnapshotPolicy.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and delete_policy is None:
            raise ValueError("Invalid value for `delete_policy`, must not be `None`")  # noqa: E501

        self._delete_policy = delete_policy

    @property
    def destination_policy(self):
        """Gets the destination_policy of this CreateSnapshotPolicy.  # noqa: E501

        Relevant only for Remote Mirroring where the remote Volume snapshot deletion policy is different than the source Volume. Set N number_of_snapshots_to_keep.  # noqa: E501

        :return: The destination_policy of this CreateSnapshotPolicy.  # noqa: E501
        :rtype: str
        """
        return self._destination_policy

    @destination_policy.setter
    def destination_policy(self, destination_policy):
        """Sets the destination_policy of this CreateSnapshotPolicy.

        Relevant only for Remote Mirroring where the remote Volume snapshot deletion policy is different than the source Volume. Set N number_of_snapshots_to_keep.  # noqa: E501

        :param destination_policy: The destination_policy of this CreateSnapshotPolicy.  # noqa: E501
        :type: str
        """

        self._destination_policy = destination_policy

    @property
    def empty(self):
        """Gets the empty of this CreateSnapshotPolicy.  # noqa: E501

        Allow empty creation snapshots (snapshot even when no data has changed)  # noqa: E501

        :return: The empty of this CreateSnapshotPolicy.  # noqa: E501
        :rtype: str
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this CreateSnapshotPolicy.

        Allow empty creation snapshots (snapshot even when no data has changed)  # noqa: E501

        :param empty: The empty of this CreateSnapshotPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                empty not in allowed_values):
            raise ValueError(
                "Invalid value for `empty` ({0}), must be one of {1}"  # noqa: E501
                .format(empty, allowed_values)
            )

        self._empty = empty

    @property
    def attach(self):
        """Gets the attach of this CreateSnapshotPolicy.  # noqa: E501

        Attach policy by default for new volumes  # noqa: E501

        :return: The attach of this CreateSnapshotPolicy.  # noqa: E501
        :rtype: str
        """
        return self._attach

    @attach.setter
    def attach(self, attach):
        """Sets the attach of this CreateSnapshotPolicy.

        Attach policy by default for new volumes  # noqa: E501

        :param attach: The attach of this CreateSnapshotPolicy.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                attach not in allowed_values):
            raise ValueError(
                "Invalid value for `attach` ({0}), must be one of {1}"  # noqa: E501
                .format(attach, allowed_values)
            )

        self._attach = attach

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSnapshotPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSnapshotPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateSnapshotPolicy):
            return True

        return self.to_dict() != other.to_dict()
