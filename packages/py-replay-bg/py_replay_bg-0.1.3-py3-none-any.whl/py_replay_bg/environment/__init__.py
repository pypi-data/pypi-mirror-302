import os


class Environment:
    """
    A class that represents the hyperparameters to be used by ReplayBG environment.

    ...
    Attributes
    ----------
    modality : str
        A string that specifies if the function will be used to identify
        the ReplayBG model on the given data or to replay the scenario specified by the given data.
    save_name : str
        A string used to label, thus identify, each output file and result.
    replay_bg_path: str
        The current absolute path of ReplayBG.
    save_suffix : str
        A string to be attached as suffix to the resulting output files' name.
    save_workspace: bool
            A boolean that specifies whether or not to save the results of ReplayBG in the results/workspaces directory.
    analyze_results : bool
            A flag that specifies whether to analyze the resulting trace or not. Setting this flag to False will fasten
            ReplayBG and it is recommended if ReplayBG will be a component of a bigger framework (e.g., to be used in an
            iterative process).
    scenario: str, {'single-meal', 'multi-meal'}
        A string that specifies whether the given scenario refers to a single-meal scenario or a multi-meal scenario.
    bolus_source : str, {'data', or 'dss'}
        A string defining whether to use, during replay, the insulin bolus data contained in the 'data' timetable (if 'data'),
        or the boluses generated by the bolus calculator implemented via the provided 'bolusCalculatorHandler' function.
    basal_source : str, {'data', 'u2ss', or 'dss'}
        A string defining whether to use, during replay, the insulin basal data contained in the 'data' timetable (if 'data'),
        or the basal generated by the controller implemented via the provided 'basalControllerHandler' function (if 'dss'),
        or fixed to the average basal rate used during identification (if 'u2ss').
    cho_source : str, {'data', 'generated'}
        A string defining whether to use, during replay, the CHO data contained in the 'data' timetable (if 'data'),
        or the CHO generated by the meal generator implemented via the provided 'mealGeneratorHandler' function.

    cgm_model: string, {'CGM','IG'}
            A string that specify the cgm model selection.
            If IG is selected, CGM measure will be the noise-free IG state at the current time.

    seed : int
        An integer that specifies the random seed. For reproducibility.
    parallelize : bool
            A boolean that specifies whether to parallelize the identification process.
    n_processes : int
        The number of processes to use by ReplayBG if parallelize is True.
    plot_mode : bool
        A boolean that specifies whether to show the plot of the results or not.
    verbose : bool
        A boolean that specifies the verbosity of ReplayBG.

    Methods
    -------
    None
    """

    def __init__(self, modality, save_name, save_folder, save_suffix='', save_workspace=False, analyze_results=True,
                 scenario='single_meal',
                 bolus_source='data', basal_source='data', cho_source='data',
                 cgm_model='CGM',
                 seed=1,
                 parallelize=False, n_processes=None, plot_mode=True, verbose=True):
        """
        Constructs all the necessary attributes for the Environment object.

        Parameters
        ----------
        modality : str
            A string that specifies if the function will be used to identify
            the ReplayBG model on the given data or to replay the scenario specified by the given data.
        save_name : str
            A string used to label, thus identify, each output file and result.
        save_folder : str
            A string used to set the folder where the ReplayBG results will be saved.
        save_suffix : str, optional, default : ''
            A string to be attached as suffix to the resulting output files' name.
        save_workspace: bool, optional, default : False
            A boolean that specifies whether or not to save the results of ReplayBG in the results/workspaces directory.
        analyze_results : bool, optional, default : True
            A flag that specifies whether to analyze the resulting trace or not. Setting this flag to False will fasten
            ReplayBG and it is recommended if ReplayBG will be a component of a bigger framework (e.g., to be used in an
            iterative process).
        scenario: str, {'single-meal', 'multi-meal'}, optional, default : 'single-meal'
            A string that specifies whether the given scenario refers to a single-meal scenario or a multi-meal scenario.
        bolus_source : str, {'data', or 'dss'}, optional, default : 'data'
            A string defining whether to use, during replay, the insulin bolus data contained in the 'data' timetable (if 'data'),
            or the boluses generated by the bolus calculator implemented via the provided 'bolusCalculatorHandler' function.
        basal_source : str, {'data', 'u2ss', or 'dss'}, optional, default : 'data'
            A string defining whether to use, during replay, the insulin basal data contained in the 'data' timetable (if 'data'),
            or the basal generated by the controller implemented via the provided 'basalControllerHandler' function (if 'dss'),
            or fixed to the average basal rate used during identification (if 'u2ss').
        cho_source : str, {'data', 'generated'}, optional, default : 'data'
            A string defining whether to use, during replay, the CHO data contained in the 'data' timetable (if 'data'),
            or the CHO generated by the meal generator implemented via the provided 'mealGeneratorHandler' function.

        cgm_model: string, {'CGM','IG'}, optional, default : 'CGM'
            A string that specify the cgm model selection.
            If IG is selected, CGM measure will be the noise-free IG state at the current time.

        seed : int, optional, default : 1
            An integer that specifies the random seed. For reproducibility.
        parallelize : bool, optional, default : False
            A boolean that specifies whether to parallelize the identification process.
        n_processes : int, optional, default : None
            The number of processes to use by ReplayBG if parallelize is True.
        plot_mode : bool, optional, default : True
            A boolean that specifies whether to show the plot of the results or not.
        verbose : bool, optional, default : True
            A boolean that specifies the verbosity of ReplayBG.
        """

        # Set the running modality
        self.modality = modality

        # Set the save name and folder
        self.save_name = save_name
        self.replay_bg_path = save_folder

        # Create the results subfolders if they do not exist
        if not (os.path.exists(os.path.join(self.replay_bg_path, 'results'))):
            os.mkdir(os.path.join(self.replay_bg_path, 'results'))
        if not (os.path.exists(os.path.join(self.replay_bg_path, 'results', 'draws'))):
            os.mkdir(os.path.join(self.replay_bg_path, 'results', 'draws'))
        if not (os.path.exists(os.path.join(self.replay_bg_path, 'results', 'map'))):
            os.mkdir(os.path.join(self.replay_bg_path, 'results', 'map'))
        if not (os.path.exists(os.path.join(self.replay_bg_path, 'results', 'logs'))):
            os.mkdir(os.path.join(self.replay_bg_path, 'results', 'logs'))
        if not (os.path.exists(os.path.join(self.replay_bg_path, 'results', 'mcmc_chains'))):
            os.mkdir(os.path.join(self.replay_bg_path, 'results', 'mcmc_chains'))
        if not (os.path.exists(os.path.join(self.replay_bg_path, 'results', 'model_parameters'))):
            os.mkdir(os.path.join(self.replay_bg_path, 'results', 'model_parameters'))
        if not (os.path.exists(os.path.join(self.replay_bg_path, 'results', 'workspaces'))):
            os.mkdir(os.path.join(self.replay_bg_path, 'results', 'workspaces'))

        # Set the save suffix
        if save_suffix == '':
            self.save_suffix = save_suffix
        else:
            self.save_suffix = '_' + save_suffix

        # Set the save workspace flag
        self.save_workspace = save_workspace

        # Set the analyze results flag
        self.analyze_results = analyze_results

        # Single-meal or multi-meal scenario?
        self.scenario = scenario

        # Set input sources
        self.bolus_source = bolus_source
        self.basal_source = basal_source
        self.cho_source = cho_source

        # Set the cgm_model
        self.cgm_model = cgm_model

        # Set the seed
        self.seed = seed

        # Set the parallelization options
        self.parallelize = parallelize
        self.n_processes = n_processes

        # Set the verbosity
        self.plot_mode = plot_mode  # if False do not plot
        self.verbose = verbose  # if False do not display stuff
