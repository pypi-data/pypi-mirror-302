# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20087User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'email': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'roles': 'list[InlineResponse20087UserRoles]',
        'admin': 'bool',
        'password': 'str',
        'authentication_token': 'str'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'roles': 'roles',
        'admin': 'admin',
        'password': 'password',
        'authentication_token': 'authentication_token'
    }

    def __init__(self, id=None, email=None, firstname=None, lastname=None, roles=None, admin=None, password=None, authentication_token=None, _configuration=None):  # noqa: E501
        """InlineResponse20087User - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._email = None
        self._firstname = None
        self._lastname = None
        self._roles = None
        self._admin = None
        self._password = None
        self._authentication_token = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if roles is not None:
            self.roles = roles
        if admin is not None:
            self.admin = admin
        if password is not None:
            self.password = password
        if authentication_token is not None:
            self.authentication_token = authentication_token

    @property
    def id(self):
        """Gets the id of this InlineResponse20087User.  # noqa: E501


        :return: The id of this InlineResponse20087User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20087User.


        :param id: The id of this InlineResponse20087User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this InlineResponse20087User.  # noqa: E501


        :return: The email of this InlineResponse20087User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20087User.


        :param email: The email of this InlineResponse20087User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def firstname(self):
        """Gets the firstname of this InlineResponse20087User.  # noqa: E501


        :return: The firstname of this InlineResponse20087User.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this InlineResponse20087User.


        :param firstname: The firstname of this InlineResponse20087User.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this InlineResponse20087User.  # noqa: E501


        :return: The lastname of this InlineResponse20087User.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this InlineResponse20087User.


        :param lastname: The lastname of this InlineResponse20087User.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def roles(self):
        """Gets the roles of this InlineResponse20087User.  # noqa: E501


        :return: The roles of this InlineResponse20087User.  # noqa: E501
        :rtype: list[InlineResponse20087UserRoles]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this InlineResponse20087User.


        :param roles: The roles of this InlineResponse20087User.  # noqa: E501
        :type: list[InlineResponse20087UserRoles]
        """

        self._roles = roles

    @property
    def admin(self):
        """Gets the admin of this InlineResponse20087User.  # noqa: E501


        :return: The admin of this InlineResponse20087User.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this InlineResponse20087User.


        :param admin: The admin of this InlineResponse20087User.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    @property
    def password(self):
        """Gets the password of this InlineResponse20087User.  # noqa: E501


        :return: The password of this InlineResponse20087User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this InlineResponse20087User.


        :param password: The password of this InlineResponse20087User.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def authentication_token(self):
        """Gets the authentication_token of this InlineResponse20087User.  # noqa: E501


        :return: The authentication_token of this InlineResponse20087User.  # noqa: E501
        :rtype: str
        """
        return self._authentication_token

    @authentication_token.setter
    def authentication_token(self, authentication_token):
        """Sets the authentication_token of this InlineResponse20087User.


        :param authentication_token: The authentication_token of this InlineResponse20087User.  # noqa: E501
        :type: str
        """

        self._authentication_token = authentication_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20087User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20087User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20087User):
            return True

        return self.to_dict() != other.to_dict()
