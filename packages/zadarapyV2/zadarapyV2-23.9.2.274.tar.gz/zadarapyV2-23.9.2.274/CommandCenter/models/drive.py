# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class Drive(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'device_name': 'str',
        'uuid': 'str',
        'storage_node': 'str',
        'drive_type': 'str',
        'absent': 'str',
        'capacity': 'int',
        'used_capacity': 'int',
        'available_capacity': 'int',
        'licensed': 'bool',
        'status': 'str',
        'address': 'str',
        'pci_address': 'str',
        'location': 'str',
        'product_id': 'str',
        'serial_num': 'str',
        'fw_version': 'str',
        'target_fw_ver': 'str',
        'upgrade_recommended': 'bool',
        'cache': 'bool',
        'enabled': 'bool',
        'vpsa_internal_name': 'str',
        'volume': 'str'
    }

    attribute_map = {
        'id': 'id',
        'device_name': 'device_name',
        'uuid': 'uuid',
        'storage_node': 'storage_node',
        'drive_type': 'drive_type',
        'absent': 'absent',
        'capacity': 'capacity',
        'used_capacity': 'used_capacity',
        'available_capacity': 'available_capacity',
        'licensed': 'licensed',
        'status': 'status',
        'address': 'address',
        'pci_address': 'pci_address',
        'location': 'location',
        'product_id': 'product_id',
        'serial_num': 'serial_num',
        'fw_version': 'fw_version',
        'target_fw_ver': 'target_fw_ver',
        'upgrade_recommended': 'upgrade_recommended',
        'cache': 'cache',
        'enabled': 'enabled',
        'vpsa_internal_name': 'vpsa_internal_name',
        'volume': 'volume'
    }

    def __init__(self, id=None, device_name=None, uuid=None, storage_node=None, drive_type=None, absent=None, capacity=None, used_capacity=None, available_capacity=None, licensed=None, status=None, address=None, pci_address=None, location=None, product_id=None, serial_num=None, fw_version=None, target_fw_ver=None, upgrade_recommended=None, cache=None, enabled=None, vpsa_internal_name=None, volume=None, _configuration=None):  # noqa: E501
        """Drive - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._device_name = None
        self._uuid = None
        self._storage_node = None
        self._drive_type = None
        self._absent = None
        self._capacity = None
        self._used_capacity = None
        self._available_capacity = None
        self._licensed = None
        self._status = None
        self._address = None
        self._pci_address = None
        self._location = None
        self._product_id = None
        self._serial_num = None
        self._fw_version = None
        self._target_fw_ver = None
        self._upgrade_recommended = None
        self._cache = None
        self._enabled = None
        self._vpsa_internal_name = None
        self._volume = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if device_name is not None:
            self.device_name = device_name
        if uuid is not None:
            self.uuid = uuid
        if storage_node is not None:
            self.storage_node = storage_node
        if drive_type is not None:
            self.drive_type = drive_type
        if absent is not None:
            self.absent = absent
        if capacity is not None:
            self.capacity = capacity
        if used_capacity is not None:
            self.used_capacity = used_capacity
        if available_capacity is not None:
            self.available_capacity = available_capacity
        if licensed is not None:
            self.licensed = licensed
        if status is not None:
            self.status = status
        if address is not None:
            self.address = address
        if pci_address is not None:
            self.pci_address = pci_address
        if location is not None:
            self.location = location
        if product_id is not None:
            self.product_id = product_id
        if serial_num is not None:
            self.serial_num = serial_num
        if fw_version is not None:
            self.fw_version = fw_version
        if target_fw_ver is not None:
            self.target_fw_ver = target_fw_ver
        if upgrade_recommended is not None:
            self.upgrade_recommended = upgrade_recommended
        if cache is not None:
            self.cache = cache
        if enabled is not None:
            self.enabled = enabled
        if vpsa_internal_name is not None:
            self.vpsa_internal_name = vpsa_internal_name
        if volume is not None:
            self.volume = volume

    @property
    def id(self):
        """Gets the id of this Drive.  # noqa: E501


        :return: The id of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Drive.


        :param id: The id of this Drive.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def device_name(self):
        """Gets the device_name of this Drive.  # noqa: E501


        :return: The device_name of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Drive.


        :param device_name: The device_name of this Drive.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def uuid(self):
        """Gets the uuid of this Drive.  # noqa: E501


        :return: The uuid of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Drive.


        :param uuid: The uuid of this Drive.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def storage_node(self):
        """Gets the storage_node of this Drive.  # noqa: E501


        :return: The storage_node of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._storage_node

    @storage_node.setter
    def storage_node(self, storage_node):
        """Sets the storage_node of this Drive.


        :param storage_node: The storage_node of this Drive.  # noqa: E501
        :type: str
        """

        self._storage_node = storage_node

    @property
    def drive_type(self):
        """Gets the drive_type of this Drive.  # noqa: E501


        :return: The drive_type of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._drive_type

    @drive_type.setter
    def drive_type(self, drive_type):
        """Sets the drive_type of this Drive.


        :param drive_type: The drive_type of this Drive.  # noqa: E501
        :type: str
        """

        self._drive_type = drive_type

    @property
    def absent(self):
        """Gets the absent of this Drive.  # noqa: E501


        :return: The absent of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._absent

    @absent.setter
    def absent(self, absent):
        """Sets the absent of this Drive.


        :param absent: The absent of this Drive.  # noqa: E501
        :type: str
        """

        self._absent = absent

    @property
    def capacity(self):
        """Gets the capacity of this Drive.  # noqa: E501


        :return: The capacity of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Drive.


        :param capacity: The capacity of this Drive.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def used_capacity(self):
        """Gets the used_capacity of this Drive.  # noqa: E501


        :return: The used_capacity of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._used_capacity

    @used_capacity.setter
    def used_capacity(self, used_capacity):
        """Sets the used_capacity of this Drive.


        :param used_capacity: The used_capacity of this Drive.  # noqa: E501
        :type: int
        """

        self._used_capacity = used_capacity

    @property
    def available_capacity(self):
        """Gets the available_capacity of this Drive.  # noqa: E501


        :return: The available_capacity of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._available_capacity

    @available_capacity.setter
    def available_capacity(self, available_capacity):
        """Sets the available_capacity of this Drive.


        :param available_capacity: The available_capacity of this Drive.  # noqa: E501
        :type: int
        """

        self._available_capacity = available_capacity

    @property
    def licensed(self):
        """Gets the licensed of this Drive.  # noqa: E501


        :return: The licensed of this Drive.  # noqa: E501
        :rtype: bool
        """
        return self._licensed

    @licensed.setter
    def licensed(self, licensed):
        """Sets the licensed of this Drive.


        :param licensed: The licensed of this Drive.  # noqa: E501
        :type: bool
        """

        self._licensed = licensed

    @property
    def status(self):
        """Gets the status of this Drive.  # noqa: E501


        :return: The status of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Drive.


        :param status: The status of this Drive.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def address(self):
        """Gets the address of this Drive.  # noqa: E501


        :return: The address of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Drive.


        :param address: The address of this Drive.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def pci_address(self):
        """Gets the pci_address of this Drive.  # noqa: E501


        :return: The pci_address of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._pci_address

    @pci_address.setter
    def pci_address(self, pci_address):
        """Sets the pci_address of this Drive.


        :param pci_address: The pci_address of this Drive.  # noqa: E501
        :type: str
        """

        self._pci_address = pci_address

    @property
    def location(self):
        """Gets the location of this Drive.  # noqa: E501


        :return: The location of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Drive.


        :param location: The location of this Drive.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def product_id(self):
        """Gets the product_id of this Drive.  # noqa: E501


        :return: The product_id of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Drive.


        :param product_id: The product_id of this Drive.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def serial_num(self):
        """Gets the serial_num of this Drive.  # noqa: E501


        :return: The serial_num of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._serial_num

    @serial_num.setter
    def serial_num(self, serial_num):
        """Sets the serial_num of this Drive.


        :param serial_num: The serial_num of this Drive.  # noqa: E501
        :type: str
        """

        self._serial_num = serial_num

    @property
    def fw_version(self):
        """Gets the fw_version of this Drive.  # noqa: E501


        :return: The fw_version of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._fw_version

    @fw_version.setter
    def fw_version(self, fw_version):
        """Sets the fw_version of this Drive.


        :param fw_version: The fw_version of this Drive.  # noqa: E501
        :type: str
        """

        self._fw_version = fw_version

    @property
    def target_fw_ver(self):
        """Gets the target_fw_ver of this Drive.  # noqa: E501


        :return: The target_fw_ver of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._target_fw_ver

    @target_fw_ver.setter
    def target_fw_ver(self, target_fw_ver):
        """Sets the target_fw_ver of this Drive.


        :param target_fw_ver: The target_fw_ver of this Drive.  # noqa: E501
        :type: str
        """

        self._target_fw_ver = target_fw_ver

    @property
    def upgrade_recommended(self):
        """Gets the upgrade_recommended of this Drive.  # noqa: E501


        :return: The upgrade_recommended of this Drive.  # noqa: E501
        :rtype: bool
        """
        return self._upgrade_recommended

    @upgrade_recommended.setter
    def upgrade_recommended(self, upgrade_recommended):
        """Sets the upgrade_recommended of this Drive.


        :param upgrade_recommended: The upgrade_recommended of this Drive.  # noqa: E501
        :type: bool
        """

        self._upgrade_recommended = upgrade_recommended

    @property
    def cache(self):
        """Gets the cache of this Drive.  # noqa: E501


        :return: The cache of this Drive.  # noqa: E501
        :rtype: bool
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this Drive.


        :param cache: The cache of this Drive.  # noqa: E501
        :type: bool
        """

        self._cache = cache

    @property
    def enabled(self):
        """Gets the enabled of this Drive.  # noqa: E501


        :return: The enabled of this Drive.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Drive.


        :param enabled: The enabled of this Drive.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def vpsa_internal_name(self):
        """Gets the vpsa_internal_name of this Drive.  # noqa: E501


        :return: The vpsa_internal_name of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_internal_name

    @vpsa_internal_name.setter
    def vpsa_internal_name(self, vpsa_internal_name):
        """Sets the vpsa_internal_name of this Drive.


        :param vpsa_internal_name: The vpsa_internal_name of this Drive.  # noqa: E501
        :type: str
        """

        self._vpsa_internal_name = vpsa_internal_name

    @property
    def volume(self):
        """Gets the volume of this Drive.  # noqa: E501


        :return: The volume of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Drive.


        :param volume: The volume of this Drive.  # noqa: E501
        :type: str
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Drive, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Drive):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Drive):
            return True

        return self.to_dict() != other.to_dict()
