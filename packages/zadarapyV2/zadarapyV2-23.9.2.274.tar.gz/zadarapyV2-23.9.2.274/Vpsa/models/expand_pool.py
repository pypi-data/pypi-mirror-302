# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class ExpandPool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'raid_groups': 'str',
        'capacity': 'str',
        'obsdestname': 'str',
        'cloud_size': 'str',
        'sse': 'str'
    }

    attribute_map = {
        'raid_groups': 'raid_groups',
        'capacity': 'capacity',
        'obsdestname': 'obsdestname',
        'cloud_size': 'cloud_size',
        'sse': 'sse'
    }

    def __init__(self, raid_groups=None, capacity=None, obsdestname=None, cloud_size=None, sse=None, _configuration=None):  # noqa: E501
        """ExpandPool - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._raid_groups = None
        self._capacity = None
        self._obsdestname = None
        self._cloud_size = None
        self._sse = None
        self.discriminator = None

        if raid_groups is not None:
            self.raid_groups = raid_groups
        if capacity is not None:
            self.capacity = capacity
        if obsdestname is not None:
            self.obsdestname = obsdestname
        if cloud_size is not None:
            self.cloud_size = cloud_size
        if sse is not None:
            self.sse = sse

    @property
    def raid_groups(self):
        """Gets the raid_groups of this ExpandPool.  # noqa: E501

        Cannot be used with `obsdestname`. Comma separated list of RAID Group IDs.  # noqa: E501

        :return: The raid_groups of this ExpandPool.  # noqa: E501
        :rtype: str
        """
        return self._raid_groups

    @raid_groups.setter
    def raid_groups(self, raid_groups):
        """Sets the raid_groups of this ExpandPool.

        Cannot be used with `obsdestname`. Comma separated list of RAID Group IDs.  # noqa: E501

        :param raid_groups: The raid_groups of this ExpandPool.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                raid_groups is not None and not re.search(r'(?:RaidGroup-[0-9]+[,]?)+', raid_groups)):  # noqa: E501
            raise ValueError(r"Invalid value for `raid_groups`, must be a follow pattern or equal to `/(?:RaidGroup-[0-9]+[,]?)+/`")  # noqa: E501

        self._raid_groups = raid_groups

    @property
    def capacity(self):
        """Gets the capacity of this ExpandPool.  # noqa: E501

        Capacity in GB followed by the letter G.  # noqa: E501

        :return: The capacity of this ExpandPool.  # noqa: E501
        :rtype: str
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ExpandPool.

        Capacity in GB followed by the letter G.  # noqa: E501

        :param capacity: The capacity of this ExpandPool.  # noqa: E501
        :type: str
        """

        self._capacity = capacity

    @property
    def obsdestname(self):
        """Gets the obsdestname of this ExpandPool.  # noqa: E501

        Object storage destination name. Cannot be used with `raid_groups`  # noqa: E501

        :return: The obsdestname of this ExpandPool.  # noqa: E501
        :rtype: str
        """
        return self._obsdestname

    @obsdestname.setter
    def obsdestname(self, obsdestname):
        """Sets the obsdestname of this ExpandPool.

        Object storage destination name. Cannot be used with `raid_groups`  # noqa: E501

        :param obsdestname: The obsdestname of this ExpandPool.  # noqa: E501
        :type: str
        """

        self._obsdestname = obsdestname

    @property
    def cloud_size(self):
        """Gets the cloud_size of this ExpandPool.  # noqa: E501

        Object storage size (multiple of 20).  # noqa: E501

        :return: The cloud_size of this ExpandPool.  # noqa: E501
        :rtype: str
        """
        return self._cloud_size

    @cloud_size.setter
    def cloud_size(self, cloud_size):
        """Sets the cloud_size of this ExpandPool.

        Object storage size (multiple of 20).  # noqa: E501

        :param cloud_size: The cloud_size of this ExpandPool.  # noqa: E501
        :type: str
        """

        self._cloud_size = cloud_size

    @property
    def sse(self):
        """Gets the sse of this ExpandPool.  # noqa: E501

        Encryption type.  # noqa: E501

        :return: The sse of this ExpandPool.  # noqa: E501
        :rtype: str
        """
        return self._sse

    @sse.setter
    def sse(self, sse):
        """Sets the sse of this ExpandPool.

        Encryption type.  # noqa: E501

        :param sse: The sse of this ExpandPool.  # noqa: E501
        :type: str
        """

        self._sse = sse

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpandPool, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpandPool):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExpandPool):
            return True

        return self.to_dict() != other.to_dict()
