# coding: utf-8
# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20230831

from __future__ import print_function
import click
import oci  # noqa: F401
import six  # noqa: F401
import sys  # noqa: F401
from oci_cli import cli_constants  # noqa: F401
from oci_cli import cli_util
from oci_cli import json_skeleton_utils
from oci_cli import custom_types  # noqa: F401
from oci_cli.aliasing import CommandGroupWithAlias
from services.fleet_apps_management.src.oci_cli_fleet_apps_management.generated import fleet_apps_management_service_cli


@click.command(cli_util.override('fleet_apps_management_operations.fleet_apps_management_operations_root_group.command_name', 'fleet-apps-management-operations'), cls=CommandGroupWithAlias, help=cli_util.override('fleet_apps_management_operations.fleet_apps_management_operations_root_group.help', """Fleet Application Management Service API. Use this API to for all FAMS related activities.
To manage fleets,view complaince report for the Fleet,scedule patches and other lifecycle activities"""), short_help=cli_util.override('fleet_apps_management_operations.fleet_apps_management_operations_root_group.short_help', """Fleet Application Management Service API"""))
@cli_util.help_option_group
def fleet_apps_management_operations_root_group():
    pass


@click.command(cli_util.override('fleet_apps_management_operations.scheduler_definition_group.command_name', 'scheduler-definition'), cls=CommandGroupWithAlias, help="""Definition of a Schedule.""")
@cli_util.help_option_group
def scheduler_definition_group():
    pass


@click.command(cli_util.override('fleet_apps_management_operations.scheduler_definition_collection_group.command_name', 'scheduler-definition-collection'), cls=CommandGroupWithAlias, help="""Results of a schedulerDefinition search. Contains boh SchedulerDefinitionSummary items and other information, such as metadata.""")
@cli_util.help_option_group
def scheduler_definition_collection_group():
    pass


@click.command(cli_util.override('fleet_apps_management_operations.execution_group.command_name', 'execution'), cls=CommandGroupWithAlias, help="""Task Execution associated with the Job.""")
@cli_util.help_option_group
def execution_group():
    pass


@click.command(cli_util.override('fleet_apps_management_operations.scheduler_job_collection_group.command_name', 'scheduler-job-collection'), cls=CommandGroupWithAlias, help="""Results of a schedulerJob search. Contains boh SchedulerJobSummary items and other information, such as metadata.""")
@cli_util.help_option_group
def scheduler_job_collection_group():
    pass


@click.command(cli_util.override('fleet_apps_management_operations.job_activity_group.command_name', 'job-activity'), cls=CommandGroupWithAlias, help="""Description of JobActivity.""")
@cli_util.help_option_group
def job_activity_group():
    pass


@click.command(cli_util.override('fleet_apps_management_operations.execution_collection_group.command_name', 'execution-collection'), cls=CommandGroupWithAlias, help="""Results of a""")
@cli_util.help_option_group
def execution_collection_group():
    pass


@click.command(cli_util.override('fleet_apps_management_operations.scheduler_job_group.command_name', 'scheduler-job'), cls=CommandGroupWithAlias, help="""A SchedulerJob resource.""")
@cli_util.help_option_group
def scheduler_job_group():
    pass


@click.command(cli_util.override('fleet_apps_management_operations.scheduled_fleet_collection_group.command_name', 'scheduled-fleet-collection'), cls=CommandGroupWithAlias, help="""Results of a Scheduled ActionGroup search.""")
@cli_util.help_option_group
def scheduled_fleet_collection_group():
    pass


fleet_apps_management_service_cli.fleet_apps_management_service_group.add_command(fleet_apps_management_operations_root_group)
fleet_apps_management_operations_root_group.add_command(scheduler_definition_group)
fleet_apps_management_operations_root_group.add_command(scheduler_definition_collection_group)
fleet_apps_management_operations_root_group.add_command(execution_group)
fleet_apps_management_operations_root_group.add_command(scheduler_job_collection_group)
fleet_apps_management_operations_root_group.add_command(job_activity_group)
fleet_apps_management_operations_root_group.add_command(execution_collection_group)
fleet_apps_management_operations_root_group.add_command(scheduler_job_group)
fleet_apps_management_operations_root_group.add_command(scheduled_fleet_collection_group)


@scheduler_definition_group.command(name=cli_util.override('fleet_apps_management_operations.create_scheduler_definition.command_name', 'create'), help=u"""Creates a new SchedulerDefinition. \n[Command Reference](createSchedulerDefinition)""")
@cli_util.option('--compartment-id', required=True, help=u"""Tenancy OCID""")
@cli_util.option('--schedule', required=True, type=custom_types.CLI_COMPLEX_TYPE, help=u"""""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--action-groups', required=True, type=custom_types.CLI_COMPLEX_TYPE, help=u"""Action Groups associated with the Schedule.""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--display-name', help=u"""A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.

Example: `My new resource`""")
@cli_util.option('--description', help=u"""A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.""")
@cli_util.option('--activity-initiation-cut-off', type=click.INT, help=u"""Activity Initiation Cut Off""")
@cli_util.option('--run-books', type=custom_types.CLI_COMPLEX_TYPE, help=u"""Runbooks.

This option is a JSON list with items of type OperationRunbook.  For documentation on OperationRunbook please see our API reference: https://docs.cloud.oracle.com/api/#/en/fleetappsmanagementoperations/20230831/datatypes/OperationRunbook.""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--freeform-tags', type=custom_types.CLI_COMPLEX_TYPE, help=u"""Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{\"bar-key\": \"value\"}`""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--defined-tags', type=custom_types.CLI_COMPLEX_TYPE, help=u"""Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--wait-for-state', type=custom_types.CliCaseInsensitiveChoice(["ACCEPTED", "IN_PROGRESS", "WAITING", "NEEDS_ATTENTION", "FAILED", "SUCCEEDED", "CANCELING", "CANCELED"]), multiple=True, help="""This operation asynchronously creates, modifies or deletes a resource and uses a work request to track the progress of the operation. Specify this option to perform the action and then wait until the work request reaches a certain state. Multiple states can be specified, returning on the first state. For example, --wait-for-state SUCCEEDED --wait-for-state FAILED would return on whichever lifecycle state is reached first. If timeout is reached, a return code of 2 is returned. For any other error, a return code of 1 is returned.""")
@cli_util.option('--max-wait-seconds', type=click.INT, help="""The maximum time to wait for the work request to reach the state defined by --wait-for-state. Defaults to 1200 seconds.""")
@cli_util.option('--wait-interval-seconds', type=click.INT, help="""Check every --wait-interval-seconds to see whether the work request has reached the state defined by --wait-for-state. Defaults to 30 seconds.""")
@json_skeleton_utils.get_cli_json_input_option({'schedule': {'module': 'fleet_apps_management', 'class': 'Schedule'}, 'action-groups': {'module': 'fleet_apps_management', 'class': 'list[ActionGroup]'}, 'run-books': {'module': 'fleet_apps_management', 'class': 'list[OperationRunbook]'}, 'freeform-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, string)'}, 'defined-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, dict(str, object))'}})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={'schedule': {'module': 'fleet_apps_management', 'class': 'Schedule'}, 'action-groups': {'module': 'fleet_apps_management', 'class': 'list[ActionGroup]'}, 'run-books': {'module': 'fleet_apps_management', 'class': 'list[OperationRunbook]'}, 'freeform-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, string)'}, 'defined-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, dict(str, object))'}}, output_type={'module': 'fleet_apps_management', 'class': 'SchedulerDefinition'})
@cli_util.wrap_exceptions
def create_scheduler_definition(ctx, from_json, wait_for_state, max_wait_seconds, wait_interval_seconds, compartment_id, schedule, action_groups, display_name, description, activity_initiation_cut_off, run_books, freeform_tags, defined_tags):

    kwargs = {}
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])

    _details = {}
    _details['compartmentId'] = compartment_id
    _details['schedule'] = cli_util.parse_json_parameter("schedule", schedule)
    _details['actionGroups'] = cli_util.parse_json_parameter("action_groups", action_groups)

    if display_name is not None:
        _details['displayName'] = display_name

    if description is not None:
        _details['description'] = description

    if activity_initiation_cut_off is not None:
        _details['activityInitiationCutOff'] = activity_initiation_cut_off

    if run_books is not None:
        _details['runBooks'] = cli_util.parse_json_parameter("run_books", run_books)

    if freeform_tags is not None:
        _details['freeformTags'] = cli_util.parse_json_parameter("freeform_tags", freeform_tags)

    if defined_tags is not None:
        _details['definedTags'] = cli_util.parse_json_parameter("defined_tags", defined_tags)

    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    result = client.create_scheduler_definition(
        create_scheduler_definition_details=_details,
        **kwargs
    )
    if wait_for_state:

        if hasattr(client, 'get_work_request') and callable(getattr(client, 'get_work_request')):
            try:
                wait_period_kwargs = {}
                if max_wait_seconds is not None:
                    wait_period_kwargs['max_wait_seconds'] = max_wait_seconds
                if wait_interval_seconds is not None:
                    wait_period_kwargs['max_interval_seconds'] = wait_interval_seconds
                if 'opc-work-request-id' not in result.headers:
                    click.echo('Encountered error while waiting for work request to enter the specified state. Outputting last known resource state')
                    cli_util.render_response(result, ctx)
                    return

                click.echo('Action completed. Waiting until the work request has entered state: {}'.format(wait_for_state), file=sys.stderr)
                result = oci.wait_until(client, client.get_work_request(result.headers['opc-work-request-id']), 'status', wait_for_state, **wait_period_kwargs)
            except oci.exceptions.MaximumWaitTimeExceeded as e:
                # If we fail, we should show an error, but we should still provide the information to the customer
                click.echo('Failed to wait until the work request entered the specified state. Outputting last known resource state', file=sys.stderr)
                cli_util.render_response(result, ctx)
                sys.exit(2)
            except Exception:
                click.echo('Encountered error while waiting for work request to enter the specified state. Outputting last known resource state', file=sys.stderr)
                cli_util.render_response(result, ctx)
                raise
        else:
            click.echo('Unable to wait for the work request to enter the specified state', file=sys.stderr)
    cli_util.render_response(result, ctx)


@scheduler_definition_group.command(name=cli_util.override('fleet_apps_management_operations.delete_scheduler_definition.command_name', 'delete'), help=u"""Deletes a SchedulerDefinition resource by identifier \n[Command Reference](deleteSchedulerDefinition)""")
@cli_util.option('--scheduler-definition-id', required=True, help=u"""unique SchedulerDefinition identifier""")
@cli_util.option('--if-match', help=u"""For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.""")
@cli_util.confirm_delete_option
@cli_util.option('--wait-for-state', type=custom_types.CliCaseInsensitiveChoice(["CREATING", "UPDATING", "ACTIVE", "DELETING", "DELETED", "FAILED", "INACTIVE"]), multiple=True, help="""This operation creates, modifies or deletes a resource that has a defined lifecycle state. Specify this option to perform the action and then wait until the resource reaches a given lifecycle state. Multiple states can be specified, returning on the first state. For example, --wait-for-state SUCCEEDED --wait-for-state FAILED would return on whichever lifecycle state is reached first. If timeout is reached, a return code of 2 is returned. For any other error, a return code of 1 is returned.""")
@cli_util.option('--max-wait-seconds', type=click.INT, help="""The maximum time to wait for the resource to reach the lifecycle state defined by --wait-for-state. Defaults to 1200 seconds.""")
@cli_util.option('--wait-interval-seconds', type=click.INT, help="""Check every --wait-interval-seconds to see whether the resource has reached the lifecycle state defined by --wait-for-state. Defaults to 30 seconds.""")
@json_skeleton_utils.get_cli_json_input_option({})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={})
@cli_util.wrap_exceptions
def delete_scheduler_definition(ctx, from_json, wait_for_state, max_wait_seconds, wait_interval_seconds, scheduler_definition_id, if_match):

    if isinstance(scheduler_definition_id, six.string_types) and len(scheduler_definition_id.strip()) == 0:
        raise click.UsageError('Parameter --scheduler-definition-id cannot be whitespace or empty string')

    kwargs = {}
    if if_match is not None:
        kwargs['if_match'] = if_match
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])
    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    result = client.delete_scheduler_definition(
        scheduler_definition_id=scheduler_definition_id,
        **kwargs
    )
    if wait_for_state:

        if hasattr(client, 'get_scheduler_definition') and callable(getattr(client, 'get_scheduler_definition')):
            try:
                wait_period_kwargs = {}
                if max_wait_seconds is not None:
                    wait_period_kwargs['max_wait_seconds'] = max_wait_seconds
                if wait_interval_seconds is not None:
                    wait_period_kwargs['max_interval_seconds'] = wait_interval_seconds

                click.echo('Action completed. Waiting until the resource has entered state: {}'.format(wait_for_state), file=sys.stderr)
                oci.wait_until(client, client.get_scheduler_definition(scheduler_definition_id), 'lifecycle_state', wait_for_state, succeed_on_not_found=True, **wait_period_kwargs)
            except oci.exceptions.ServiceError as e:
                # We make an initial service call so we can pass the result to oci.wait_until(), however if we are waiting on the
                # outcome of a delete operation it is possible that the resource is already gone and so the initial service call
                # will result in an exception that reflects a HTTP 404. In this case, we can exit with success (rather than raising
                # the exception) since this would have been the behaviour in the waiter anyway (as for delete we provide the argument
                # succeed_on_not_found=True to the waiter).
                #
                # Any non-404 should still result in the exception being thrown.
                if e.status == 404:
                    pass
                else:
                    raise
            except oci.exceptions.MaximumWaitTimeExceeded as e:
                # If we fail, we should show an error, but we should still provide the information to the customer
                click.echo('Failed to wait until the resource entered the specified state. Please retrieve the resource to find its current state', file=sys.stderr)
                cli_util.render_response(result, ctx)
                sys.exit(2)
            except Exception:
                click.echo('Encountered error while waiting for resource to enter the specified state. Outputting last known resource state', file=sys.stderr)
                cli_util.render_response(result, ctx)
                raise
        else:
            click.echo('Unable to wait for the resource to enter the specified state', file=sys.stderr)
    cli_util.render_response(result, ctx)


@scheduler_job_group.command(name=cli_util.override('fleet_apps_management_operations.delete_scheduler_job.command_name', 'delete'), help=u"""Deletes a SchedulerJob resource by identifier \n[Command Reference](deleteSchedulerJob)""")
@cli_util.option('--scheduler-job-id', required=True, help=u"""unique SchedulerJob identifier""")
@cli_util.option('--if-match', help=u"""For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.""")
@cli_util.confirm_delete_option
@cli_util.option('--wait-for-state', type=custom_types.CliCaseInsensitiveChoice(["ACTIVE", "DELETED", "FAILED"]), multiple=True, help="""This operation creates, modifies or deletes a resource that has a defined lifecycle state. Specify this option to perform the action and then wait until the resource reaches a given lifecycle state. Multiple states can be specified, returning on the first state. For example, --wait-for-state SUCCEEDED --wait-for-state FAILED would return on whichever lifecycle state is reached first. If timeout is reached, a return code of 2 is returned. For any other error, a return code of 1 is returned.""")
@cli_util.option('--max-wait-seconds', type=click.INT, help="""The maximum time to wait for the resource to reach the lifecycle state defined by --wait-for-state. Defaults to 1200 seconds.""")
@cli_util.option('--wait-interval-seconds', type=click.INT, help="""Check every --wait-interval-seconds to see whether the resource has reached the lifecycle state defined by --wait-for-state. Defaults to 30 seconds.""")
@json_skeleton_utils.get_cli_json_input_option({})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={})
@cli_util.wrap_exceptions
def delete_scheduler_job(ctx, from_json, wait_for_state, max_wait_seconds, wait_interval_seconds, scheduler_job_id, if_match):

    if isinstance(scheduler_job_id, six.string_types) and len(scheduler_job_id.strip()) == 0:
        raise click.UsageError('Parameter --scheduler-job-id cannot be whitespace or empty string')

    kwargs = {}
    if if_match is not None:
        kwargs['if_match'] = if_match
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])
    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    result = client.delete_scheduler_job(
        scheduler_job_id=scheduler_job_id,
        **kwargs
    )
    if wait_for_state:

        if hasattr(client, 'get_scheduler_job') and callable(getattr(client, 'get_scheduler_job')):
            try:
                wait_period_kwargs = {}
                if max_wait_seconds is not None:
                    wait_period_kwargs['max_wait_seconds'] = max_wait_seconds
                if wait_interval_seconds is not None:
                    wait_period_kwargs['max_interval_seconds'] = wait_interval_seconds

                click.echo('Action completed. Waiting until the resource has entered state: {}'.format(wait_for_state), file=sys.stderr)
                oci.wait_until(client, client.get_scheduler_job(scheduler_job_id), 'lifecycle_state', wait_for_state, succeed_on_not_found=True, **wait_period_kwargs)
            except oci.exceptions.ServiceError as e:
                # We make an initial service call so we can pass the result to oci.wait_until(), however if we are waiting on the
                # outcome of a delete operation it is possible that the resource is already gone and so the initial service call
                # will result in an exception that reflects a HTTP 404. In this case, we can exit with success (rather than raising
                # the exception) since this would have been the behaviour in the waiter anyway (as for delete we provide the argument
                # succeed_on_not_found=True to the waiter).
                #
                # Any non-404 should still result in the exception being thrown.
                if e.status == 404:
                    pass
                else:
                    raise
            except oci.exceptions.MaximumWaitTimeExceeded as e:
                # If we fail, we should show an error, but we should still provide the information to the customer
                click.echo('Failed to wait until the resource entered the specified state. Please retrieve the resource to find its current state', file=sys.stderr)
                cli_util.render_response(result, ctx)
                sys.exit(2)
            except Exception:
                click.echo('Encountered error while waiting for resource to enter the specified state. Outputting last known resource state', file=sys.stderr)
                cli_util.render_response(result, ctx)
                raise
        else:
            click.echo('Unable to wait for the resource to enter the specified state', file=sys.stderr)
    cli_util.render_response(result, ctx)


@execution_group.command(name=cli_util.override('fleet_apps_management_operations.get_execution.command_name', 'get'), help=u"""Gets a JobActivity by identifier \n[Command Reference](getExecution)""")
@cli_util.option('--scheduler-job-id', required=True, help=u"""unique SchedulerJob identifier""")
@cli_util.option('--job-activity-id', required=True, help=u"""unique jobActivity identifier""")
@cli_util.option('--resource-id', required=True, help=u"""unique Resource identifier""")
@cli_util.option('--execution-id', required=True, help=u"""Execution Id""")
@json_skeleton_utils.get_cli_json_input_option({})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={}, output_type={'module': 'fleet_apps_management', 'class': 'Execution'})
@cli_util.wrap_exceptions
def get_execution(ctx, from_json, scheduler_job_id, job_activity_id, resource_id, execution_id):

    if isinstance(scheduler_job_id, six.string_types) and len(scheduler_job_id.strip()) == 0:
        raise click.UsageError('Parameter --scheduler-job-id cannot be whitespace or empty string')

    if isinstance(job_activity_id, six.string_types) and len(job_activity_id.strip()) == 0:
        raise click.UsageError('Parameter --job-activity-id cannot be whitespace or empty string')

    if isinstance(resource_id, six.string_types) and len(resource_id.strip()) == 0:
        raise click.UsageError('Parameter --resource-id cannot be whitespace or empty string')

    if isinstance(execution_id, six.string_types) and len(execution_id.strip()) == 0:
        raise click.UsageError('Parameter --execution-id cannot be whitespace or empty string')

    kwargs = {}
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])
    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    result = client.get_execution(
        scheduler_job_id=scheduler_job_id,
        job_activity_id=job_activity_id,
        resource_id=resource_id,
        execution_id=execution_id,
        **kwargs
    )
    cli_util.render_response(result, ctx)


@job_activity_group.command(name=cli_util.override('fleet_apps_management_operations.get_job_activity.command_name', 'get'), help=u"""Gets a JobActivity by identifier \n[Command Reference](getJobActivity)""")
@cli_util.option('--scheduler-job-id', required=True, help=u"""unique SchedulerJob identifier""")
@cli_util.option('--job-activity-id', required=True, help=u"""unique jobActivity identifier""")
@json_skeleton_utils.get_cli_json_input_option({})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={}, output_type={'module': 'fleet_apps_management', 'class': 'JobActivity'})
@cli_util.wrap_exceptions
def get_job_activity(ctx, from_json, scheduler_job_id, job_activity_id):

    if isinstance(scheduler_job_id, six.string_types) and len(scheduler_job_id.strip()) == 0:
        raise click.UsageError('Parameter --scheduler-job-id cannot be whitespace or empty string')

    if isinstance(job_activity_id, six.string_types) and len(job_activity_id.strip()) == 0:
        raise click.UsageError('Parameter --job-activity-id cannot be whitespace or empty string')

    kwargs = {}
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])
    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    result = client.get_job_activity(
        scheduler_job_id=scheduler_job_id,
        job_activity_id=job_activity_id,
        **kwargs
    )
    cli_util.render_response(result, ctx)


@scheduler_definition_group.command(name=cli_util.override('fleet_apps_management_operations.get_scheduler_definition.command_name', 'get'), help=u"""Gets a SchedulerDefinition by identifier \n[Command Reference](getSchedulerDefinition)""")
@cli_util.option('--scheduler-definition-id', required=True, help=u"""unique SchedulerDefinition identifier""")
@json_skeleton_utils.get_cli_json_input_option({})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={}, output_type={'module': 'fleet_apps_management', 'class': 'SchedulerDefinition'})
@cli_util.wrap_exceptions
def get_scheduler_definition(ctx, from_json, scheduler_definition_id):

    if isinstance(scheduler_definition_id, six.string_types) and len(scheduler_definition_id.strip()) == 0:
        raise click.UsageError('Parameter --scheduler-definition-id cannot be whitespace or empty string')

    kwargs = {}
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])
    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    result = client.get_scheduler_definition(
        scheduler_definition_id=scheduler_definition_id,
        **kwargs
    )
    cli_util.render_response(result, ctx)


@scheduler_job_group.command(name=cli_util.override('fleet_apps_management_operations.get_scheduler_job.command_name', 'get'), help=u"""Gets a SchedulerJob by identifier \n[Command Reference](getSchedulerJob)""")
@cli_util.option('--scheduler-job-id', required=True, help=u"""unique SchedulerJob identifier""")
@json_skeleton_utils.get_cli_json_input_option({})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={}, output_type={'module': 'fleet_apps_management', 'class': 'SchedulerJob'})
@cli_util.wrap_exceptions
def get_scheduler_job(ctx, from_json, scheduler_job_id):

    if isinstance(scheduler_job_id, six.string_types) and len(scheduler_job_id.strip()) == 0:
        raise click.UsageError('Parameter --scheduler-job-id cannot be whitespace or empty string')

    kwargs = {}
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])
    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    result = client.get_scheduler_job(
        scheduler_job_id=scheduler_job_id,
        **kwargs
    )
    cli_util.render_response(result, ctx)


@execution_collection_group.command(name=cli_util.override('fleet_apps_management_operations.list_executions.command_name', 'list-executions'), help=u"""Returns a list of Task Executions for a Resource. \n[Command Reference](listExecutions)""")
@cli_util.option('--scheduler-job-id', required=True, help=u"""unique SchedulerJob identifier""")
@cli_util.option('--job-activity-id', required=True, help=u"""unique jobActivity identifier""")
@cli_util.option('--resource-id', required=True, help=u"""unique Resource identifier""")
@cli_util.option('--resource-task-id', help=u"""Task Id""")
@cli_util.option('--step-name', help=u"""Unique step name""")
@cli_util.option('--target-name', help=u"""Unique target name""")
@cli_util.option('--sequence', help=u"""Task Order Sequence""")
@cli_util.option('--limit', type=click.INT, help=u"""The maximum number of items to return.""")
@cli_util.option('--page', help=u"""A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.""")
@cli_util.option('--sort-order', type=custom_types.CliCaseInsensitiveChoice(["ASC", "DESC"]), help=u"""The sort order to use, either 'ASC' or 'DESC'.""")
@cli_util.option('--sort-by', type=custom_types.CliCaseInsensitiveChoice(["timeStarted"]), help=u"""The field to sort by. Only one sort order may be provided. Default order for timeStarted is descending.""")
@cli_util.option('--all', 'all_pages', is_flag=True, help="""Fetches all pages of results. If you provide this option, then you cannot provide the --limit option.""")
@cli_util.option('--page-size', type=click.INT, help="""When fetching results, the number of results to fetch per call. Only valid when used with --all or --limit, and ignored otherwise.""")
@json_skeleton_utils.get_cli_json_input_option({})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={}, output_type={'module': 'fleet_apps_management', 'class': 'ExecutionCollection'})
@cli_util.wrap_exceptions
def list_executions(ctx, from_json, all_pages, page_size, scheduler_job_id, job_activity_id, resource_id, resource_task_id, step_name, target_name, sequence, limit, page, sort_order, sort_by):

    if all_pages and limit:
        raise click.UsageError('If you provide the --all option you cannot provide the --limit option')

    if isinstance(scheduler_job_id, six.string_types) and len(scheduler_job_id.strip()) == 0:
        raise click.UsageError('Parameter --scheduler-job-id cannot be whitespace or empty string')

    if isinstance(job_activity_id, six.string_types) and len(job_activity_id.strip()) == 0:
        raise click.UsageError('Parameter --job-activity-id cannot be whitespace or empty string')

    if isinstance(resource_id, six.string_types) and len(resource_id.strip()) == 0:
        raise click.UsageError('Parameter --resource-id cannot be whitespace or empty string')

    kwargs = {}
    if resource_task_id is not None:
        kwargs['resource_task_id'] = resource_task_id
    if step_name is not None:
        kwargs['step_name'] = step_name
    if target_name is not None:
        kwargs['target_name'] = target_name
    if sequence is not None:
        kwargs['sequence'] = sequence
    if limit is not None:
        kwargs['limit'] = limit
    if page is not None:
        kwargs['page'] = page
    if sort_order is not None:
        kwargs['sort_order'] = sort_order
    if sort_by is not None:
        kwargs['sort_by'] = sort_by
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])
    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    if all_pages:
        if page_size:
            kwargs['limit'] = page_size

        result = cli_util.list_call_get_all_results(
            client.list_executions,
            scheduler_job_id=scheduler_job_id,
            job_activity_id=job_activity_id,
            resource_id=resource_id,
            **kwargs
        )
    elif limit is not None:
        result = cli_util.list_call_get_up_to_limit(
            client.list_executions,
            limit,
            page_size,
            scheduler_job_id=scheduler_job_id,
            job_activity_id=job_activity_id,
            resource_id=resource_id,
            **kwargs
        )
    else:
        result = client.list_executions(
            scheduler_job_id=scheduler_job_id,
            job_activity_id=job_activity_id,
            resource_id=resource_id,
            **kwargs
        )
    cli_util.render_response(result, ctx)


@scheduled_fleet_collection_group.command(name=cli_util.override('fleet_apps_management_operations.list_scheduled_fleets.command_name', 'list-scheduled-fleets'), help=u"""Returns a list of ScheduledFleets \n[Command Reference](listScheduledFleets)""")
@cli_util.option('--scheduler-definition-id', required=True, help=u"""unique SchedulerDefinition identifier""")
@cli_util.option('--compartment-id', help=u"""The ID of the compartment in which to list resources.""")
@cli_util.option('--display-name', help=u"""A filter to return only resources that match the entire display name given.""")
@cli_util.option('--limit', type=click.INT, help=u"""The maximum number of items to return.""")
@cli_util.option('--page', help=u"""A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.""")
@cli_util.option('--sort-order', type=custom_types.CliCaseInsensitiveChoice(["ASC", "DESC"]), help=u"""The sort order to use, either 'ASC' or 'DESC'.""")
@cli_util.option('--sort-by', type=custom_types.CliCaseInsensitiveChoice(["displayName"]), help=u"""The field to sort by. Only one sort order may be provided. Default order for displayName is ascending.""")
@cli_util.option('--all', 'all_pages', is_flag=True, help="""Fetches all pages of results. If you provide this option, then you cannot provide the --limit option.""")
@cli_util.option('--page-size', type=click.INT, help="""When fetching results, the number of results to fetch per call. Only valid when used with --all or --limit, and ignored otherwise.""")
@json_skeleton_utils.get_cli_json_input_option({})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={}, output_type={'module': 'fleet_apps_management', 'class': 'ScheduledFleetCollection'})
@cli_util.wrap_exceptions
def list_scheduled_fleets(ctx, from_json, all_pages, page_size, scheduler_definition_id, compartment_id, display_name, limit, page, sort_order, sort_by):

    if all_pages and limit:
        raise click.UsageError('If you provide the --all option you cannot provide the --limit option')

    if isinstance(scheduler_definition_id, six.string_types) and len(scheduler_definition_id.strip()) == 0:
        raise click.UsageError('Parameter --scheduler-definition-id cannot be whitespace or empty string')

    kwargs = {}
    if compartment_id is not None:
        kwargs['compartment_id'] = compartment_id
    if display_name is not None:
        kwargs['display_name'] = display_name
    if limit is not None:
        kwargs['limit'] = limit
    if page is not None:
        kwargs['page'] = page
    if sort_order is not None:
        kwargs['sort_order'] = sort_order
    if sort_by is not None:
        kwargs['sort_by'] = sort_by
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])
    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    if all_pages:
        if page_size:
            kwargs['limit'] = page_size

        result = cli_util.list_call_get_all_results(
            client.list_scheduled_fleets,
            scheduler_definition_id=scheduler_definition_id,
            **kwargs
        )
    elif limit is not None:
        result = cli_util.list_call_get_up_to_limit(
            client.list_scheduled_fleets,
            limit,
            page_size,
            scheduler_definition_id=scheduler_definition_id,
            **kwargs
        )
    else:
        result = client.list_scheduled_fleets(
            scheduler_definition_id=scheduler_definition_id,
            **kwargs
        )
    cli_util.render_response(result, ctx)


@scheduler_definition_collection_group.command(name=cli_util.override('fleet_apps_management_operations.list_scheduler_definitions.command_name', 'list-scheduler-definitions'), help=u"""Returns a list of SchedulerDefinitions. \n[Command Reference](listSchedulerDefinitions)""")
@cli_util.option('--compartment-id', help=u"""The ID of the compartment in which to list resources.""")
@cli_util.option('--lifecycle-state', type=custom_types.CliCaseInsensitiveChoice(["CREATING", "UPDATING", "ACTIVE", "DELETING", "DELETED", "FAILED", "INACTIVE"]), help=u"""A filter to return only resources their lifecycleState matches the given lifecycleState.""")
@cli_util.option('--display-name', help=u"""A filter to return only resources that match the entire display name given.""")
@cli_util.option('--product', help=u"""A filter to return only Scheduler Definitions whose assocaited product matches the given product""")
@cli_util.option('--id', help=u"""unique SchedulerDefinition identifier""")
@cli_util.option('--maintenance-window-id', help=u"""unique MaintenanceWindow identifier""")
@cli_util.option('--fleet-id', help=u"""unique Fleet identifier""")
@cli_util.option('--limit', type=click.INT, help=u"""The maximum number of items to return.""")
@cli_util.option('--page', help=u"""A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.""")
@cli_util.option('--sort-order', type=custom_types.CliCaseInsensitiveChoice(["ASC", "DESC"]), help=u"""The sort order to use, either 'ASC' or 'DESC'.""")
@cli_util.option('--sort-by', type=custom_types.CliCaseInsensitiveChoice(["timeCreated", "displayName", "timeOfNextRun"]), help=u"""The field to sort by. Only one sort order may be provided. Default order for timeCreated and timeOfNextRun is descending. Default order for displayName is ascending.""")
@cli_util.option('--all', 'all_pages', is_flag=True, help="""Fetches all pages of results. If you provide this option, then you cannot provide the --limit option.""")
@cli_util.option('--page-size', type=click.INT, help="""When fetching results, the number of results to fetch per call. Only valid when used with --all or --limit, and ignored otherwise.""")
@json_skeleton_utils.get_cli_json_input_option({})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={}, output_type={'module': 'fleet_apps_management', 'class': 'SchedulerDefinitionCollection'})
@cli_util.wrap_exceptions
def list_scheduler_definitions(ctx, from_json, all_pages, page_size, compartment_id, lifecycle_state, display_name, product, id, maintenance_window_id, fleet_id, limit, page, sort_order, sort_by):

    if all_pages and limit:
        raise click.UsageError('If you provide the --all option you cannot provide the --limit option')

    kwargs = {}
    if compartment_id is not None:
        kwargs['compartment_id'] = compartment_id
    if lifecycle_state is not None:
        kwargs['lifecycle_state'] = lifecycle_state
    if display_name is not None:
        kwargs['display_name'] = display_name
    if product is not None:
        kwargs['product'] = product
    if id is not None:
        kwargs['id'] = id
    if maintenance_window_id is not None:
        kwargs['maintenance_window_id'] = maintenance_window_id
    if fleet_id is not None:
        kwargs['fleet_id'] = fleet_id
    if limit is not None:
        kwargs['limit'] = limit
    if page is not None:
        kwargs['page'] = page
    if sort_order is not None:
        kwargs['sort_order'] = sort_order
    if sort_by is not None:
        kwargs['sort_by'] = sort_by
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])
    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    if all_pages:
        if page_size:
            kwargs['limit'] = page_size

        result = cli_util.list_call_get_all_results(
            client.list_scheduler_definitions,
            **kwargs
        )
    elif limit is not None:
        result = cli_util.list_call_get_up_to_limit(
            client.list_scheduler_definitions,
            limit,
            page_size,
            **kwargs
        )
    else:
        result = client.list_scheduler_definitions(
            **kwargs
        )
    cli_util.render_response(result, ctx)


@scheduler_job_collection_group.command(name=cli_util.override('fleet_apps_management_operations.list_scheduler_jobs.command_name', 'list-scheduler-jobs'), help=u"""Returns a list of SchedulerJobs. \n[Command Reference](listSchedulerJobs)""")
@cli_util.option('--compartment-id', help=u"""The ID of the compartment in which to list resources.""")
@cli_util.option('--lifecycle-state', type=custom_types.CliCaseInsensitiveChoice(["ACTIVE", "DELETED", "FAILED"]), help=u"""A filter to return only resources their lifecycleState matches the given lifecycleState.""")
@cli_util.option('--fleet-id', help=u"""unique Fleet identifier""")
@cli_util.option('--time-scheduled-greater-than-or-equal-to', type=custom_types.CLI_DATETIME, help=u"""Scheduled Time""" + custom_types.CLI_DATETIME.VALID_DATETIME_CLI_HELP_MESSAGE)
@cli_util.option('--time-scheduled-less-than', type=custom_types.CLI_DATETIME, help=u"""Scheduled Time""" + custom_types.CLI_DATETIME.VALID_DATETIME_CLI_HELP_MESSAGE)
@cli_util.option('--is-remediation-job-needed', type=click.BOOL, help=u"""Fetch next remediation Job""")
@cli_util.option('--display-name', help=u"""A filter to return only resources that match the entire display name given.""")
@cli_util.option('--id', help=u"""unique SchedulerJob identifier""")
@cli_util.option('--defintion-id', help=u"""SchedulerJob Definition identifier""")
@cli_util.option('--limit', type=click.INT, help=u"""The maximum number of items to return.""")
@cli_util.option('--page', help=u"""A token representing the position at which to start retrieving results. This must come from the `opc-next-page` header field of a previous response.""")
@cli_util.option('--sort-order', type=custom_types.CliCaseInsensitiveChoice(["ASC", "DESC"]), help=u"""The sort order to use, either 'ASC' or 'DESC'.""")
@cli_util.option('--sort-by', type=custom_types.CliCaseInsensitiveChoice(["timeCreated", "timeScheduled", "displayName"]), help=u"""The field to sort by. Only one sort order may be provided. Default order for timeCreated and timeScheduled is descending. Default order for displayName is ascending.""")
@cli_util.option('--all', 'all_pages', is_flag=True, help="""Fetches all pages of results. If you provide this option, then you cannot provide the --limit option.""")
@cli_util.option('--page-size', type=click.INT, help="""When fetching results, the number of results to fetch per call. Only valid when used with --all or --limit, and ignored otherwise.""")
@json_skeleton_utils.get_cli_json_input_option({})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={}, output_type={'module': 'fleet_apps_management', 'class': 'SchedulerJobCollection'})
@cli_util.wrap_exceptions
def list_scheduler_jobs(ctx, from_json, all_pages, page_size, compartment_id, lifecycle_state, fleet_id, time_scheduled_greater_than_or_equal_to, time_scheduled_less_than, is_remediation_job_needed, display_name, id, defintion_id, limit, page, sort_order, sort_by):

    if all_pages and limit:
        raise click.UsageError('If you provide the --all option you cannot provide the --limit option')

    kwargs = {}
    if compartment_id is not None:
        kwargs['compartment_id'] = compartment_id
    if lifecycle_state is not None:
        kwargs['lifecycle_state'] = lifecycle_state
    if fleet_id is not None:
        kwargs['fleet_id'] = fleet_id
    if time_scheduled_greater_than_or_equal_to is not None:
        kwargs['time_scheduled_greater_than_or_equal_to'] = time_scheduled_greater_than_or_equal_to
    if time_scheduled_less_than is not None:
        kwargs['time_scheduled_less_than'] = time_scheduled_less_than
    if is_remediation_job_needed is not None:
        kwargs['is_remediation_job_needed'] = is_remediation_job_needed
    if display_name is not None:
        kwargs['display_name'] = display_name
    if id is not None:
        kwargs['id'] = id
    if defintion_id is not None:
        kwargs['defintion_id'] = defintion_id
    if limit is not None:
        kwargs['limit'] = limit
    if page is not None:
        kwargs['page'] = page
    if sort_order is not None:
        kwargs['sort_order'] = sort_order
    if sort_by is not None:
        kwargs['sort_by'] = sort_by
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])
    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    if all_pages:
        if page_size:
            kwargs['limit'] = page_size

        result = cli_util.list_call_get_all_results(
            client.list_scheduler_jobs,
            **kwargs
        )
    elif limit is not None:
        result = cli_util.list_call_get_up_to_limit(
            client.list_scheduler_jobs,
            limit,
            page_size,
            **kwargs
        )
    else:
        result = client.list_scheduler_jobs(
            **kwargs
        )
    cli_util.render_response(result, ctx)


@scheduler_definition_group.command(name=cli_util.override('fleet_apps_management_operations.update_scheduler_definition.command_name', 'update'), help=u"""Updates the SchedulerDefinition \n[Command Reference](updateSchedulerDefinition)""")
@cli_util.option('--scheduler-definition-id', required=True, help=u"""unique SchedulerDefinition identifier""")
@cli_util.option('--display-name', help=u"""A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.

Example: `My new resource`""")
@cli_util.option('--description', help=u"""A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.""")
@cli_util.option('--activity-initiation-cut-off', type=click.INT, help=u"""Activity Initiation Cut Off""")
@cli_util.option('--schedule', type=custom_types.CLI_COMPLEX_TYPE, help=u"""""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--action-groups', type=custom_types.CLI_COMPLEX_TYPE, help=u"""Action Groups associated with the Schedule.

This option is a JSON list with items of type ActionGroup.  For documentation on ActionGroup please see our API reference: https://docs.cloud.oracle.com/api/#/en/fleetappsmanagementoperations/20230831/datatypes/ActionGroup.""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--run-books', type=custom_types.CLI_COMPLEX_TYPE, help=u"""Runbooks.

This option is a JSON list with items of type OperationRunbook.  For documentation on OperationRunbook please see our API reference: https://docs.cloud.oracle.com/api/#/en/fleetappsmanagementoperations/20230831/datatypes/OperationRunbook.""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--freeform-tags', type=custom_types.CLI_COMPLEX_TYPE, help=u"""Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{\"bar-key\": \"value\"}`""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--defined-tags', type=custom_types.CLI_COMPLEX_TYPE, help=u"""Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--if-match', help=u"""For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.""")
@cli_util.option('--force', help="""Perform update without prompting for confirmation.""", is_flag=True)
@cli_util.option('--wait-for-state', type=custom_types.CliCaseInsensitiveChoice(["ACCEPTED", "IN_PROGRESS", "WAITING", "NEEDS_ATTENTION", "FAILED", "SUCCEEDED", "CANCELING", "CANCELED"]), multiple=True, help="""This operation asynchronously creates, modifies or deletes a resource and uses a work request to track the progress of the operation. Specify this option to perform the action and then wait until the work request reaches a certain state. Multiple states can be specified, returning on the first state. For example, --wait-for-state SUCCEEDED --wait-for-state FAILED would return on whichever lifecycle state is reached first. If timeout is reached, a return code of 2 is returned. For any other error, a return code of 1 is returned.""")
@cli_util.option('--max-wait-seconds', type=click.INT, help="""The maximum time to wait for the work request to reach the state defined by --wait-for-state. Defaults to 1200 seconds.""")
@cli_util.option('--wait-interval-seconds', type=click.INT, help="""Check every --wait-interval-seconds to see whether the work request has reached the state defined by --wait-for-state. Defaults to 30 seconds.""")
@json_skeleton_utils.get_cli_json_input_option({'schedule': {'module': 'fleet_apps_management', 'class': 'Schedule'}, 'action-groups': {'module': 'fleet_apps_management', 'class': 'list[ActionGroup]'}, 'run-books': {'module': 'fleet_apps_management', 'class': 'list[OperationRunbook]'}, 'freeform-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, string)'}, 'defined-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, dict(str, object))'}})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={'schedule': {'module': 'fleet_apps_management', 'class': 'Schedule'}, 'action-groups': {'module': 'fleet_apps_management', 'class': 'list[ActionGroup]'}, 'run-books': {'module': 'fleet_apps_management', 'class': 'list[OperationRunbook]'}, 'freeform-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, string)'}, 'defined-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, dict(str, object))'}})
@cli_util.wrap_exceptions
def update_scheduler_definition(ctx, from_json, force, wait_for_state, max_wait_seconds, wait_interval_seconds, scheduler_definition_id, display_name, description, activity_initiation_cut_off, schedule, action_groups, run_books, freeform_tags, defined_tags, if_match):

    if isinstance(scheduler_definition_id, six.string_types) and len(scheduler_definition_id.strip()) == 0:
        raise click.UsageError('Parameter --scheduler-definition-id cannot be whitespace or empty string')
    if not force:
        if schedule or action_groups or run_books or freeform_tags or defined_tags:
            if not click.confirm("WARNING: Updates to schedule and action-groups and run-books and freeform-tags and defined-tags will replace any existing values. Are you sure you want to continue?"):
                ctx.abort()

    kwargs = {}
    if if_match is not None:
        kwargs['if_match'] = if_match
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])

    _details = {}

    if display_name is not None:
        _details['displayName'] = display_name

    if description is not None:
        _details['description'] = description

    if activity_initiation_cut_off is not None:
        _details['activityInitiationCutOff'] = activity_initiation_cut_off

    if schedule is not None:
        _details['schedule'] = cli_util.parse_json_parameter("schedule", schedule)

    if action_groups is not None:
        _details['actionGroups'] = cli_util.parse_json_parameter("action_groups", action_groups)

    if run_books is not None:
        _details['runBooks'] = cli_util.parse_json_parameter("run_books", run_books)

    if freeform_tags is not None:
        _details['freeformTags'] = cli_util.parse_json_parameter("freeform_tags", freeform_tags)

    if defined_tags is not None:
        _details['definedTags'] = cli_util.parse_json_parameter("defined_tags", defined_tags)

    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    result = client.update_scheduler_definition(
        scheduler_definition_id=scheduler_definition_id,
        update_scheduler_definition_details=_details,
        **kwargs
    )
    if wait_for_state:

        if hasattr(client, 'get_work_request') and callable(getattr(client, 'get_work_request')):
            try:
                wait_period_kwargs = {}
                if max_wait_seconds is not None:
                    wait_period_kwargs['max_wait_seconds'] = max_wait_seconds
                if wait_interval_seconds is not None:
                    wait_period_kwargs['max_interval_seconds'] = wait_interval_seconds
                if 'opc-work-request-id' not in result.headers:
                    click.echo('Encountered error while waiting for work request to enter the specified state. Outputting last known resource state')
                    cli_util.render_response(result, ctx)
                    return

                click.echo('Action completed. Waiting until the work request has entered state: {}'.format(wait_for_state), file=sys.stderr)
                result = oci.wait_until(client, client.get_work_request(result.headers['opc-work-request-id']), 'status', wait_for_state, **wait_period_kwargs)
            except oci.exceptions.MaximumWaitTimeExceeded as e:
                # If we fail, we should show an error, but we should still provide the information to the customer
                click.echo('Failed to wait until the work request entered the specified state. Outputting last known resource state', file=sys.stderr)
                cli_util.render_response(result, ctx)
                sys.exit(2)
            except Exception:
                click.echo('Encountered error while waiting for work request to enter the specified state. Outputting last known resource state', file=sys.stderr)
                cli_util.render_response(result, ctx)
                raise
        else:
            click.echo('Unable to wait for the work request to enter the specified state', file=sys.stderr)
    cli_util.render_response(result, ctx)


@scheduler_job_group.command(name=cli_util.override('fleet_apps_management_operations.update_scheduler_job.command_name', 'update'), help=u"""Updates the SchedulerJob \n[Command Reference](updateSchedulerJob)""")
@cli_util.option('--scheduler-job-id', required=True, help=u"""unique SchedulerJob identifier""")
@cli_util.option('--time-scheduled', type=custom_types.CLI_DATETIME, help=u"""Scheduled date for the Job.Provide only the date""" + custom_types.CLI_DATETIME.VALID_DATETIME_CLI_HELP_MESSAGE)
@cli_util.option('--freeform-tags', type=custom_types.CLI_COMPLEX_TYPE, help=u"""Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{\"bar-key\": \"value\"}`""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--defined-tags', type=custom_types.CLI_COMPLEX_TYPE, help=u"""Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`""" + custom_types.cli_complex_type.COMPLEX_TYPE_HELP)
@cli_util.option('--if-match', help=u"""For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.""")
@cli_util.option('--force', help="""Perform update without prompting for confirmation.""", is_flag=True)
@cli_util.option('--wait-for-state', type=custom_types.CliCaseInsensitiveChoice(["ACTIVE", "DELETED", "FAILED"]), multiple=True, help="""This operation creates, modifies or deletes a resource that has a defined lifecycle state. Specify this option to perform the action and then wait until the resource reaches a given lifecycle state. Multiple states can be specified, returning on the first state. For example, --wait-for-state SUCCEEDED --wait-for-state FAILED would return on whichever lifecycle state is reached first. If timeout is reached, a return code of 2 is returned. For any other error, a return code of 1 is returned.""")
@cli_util.option('--max-wait-seconds', type=click.INT, help="""The maximum time to wait for the resource to reach the lifecycle state defined by --wait-for-state. Defaults to 1200 seconds.""")
@cli_util.option('--wait-interval-seconds', type=click.INT, help="""Check every --wait-interval-seconds to see whether the resource has reached the lifecycle state defined by --wait-for-state. Defaults to 30 seconds.""")
@json_skeleton_utils.get_cli_json_input_option({'freeform-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, string)'}, 'defined-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, dict(str, object))'}})
@cli_util.help_option
@click.pass_context
@json_skeleton_utils.json_skeleton_generation_handler(input_params_to_complex_types={'freeform-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, string)'}, 'defined-tags': {'module': 'fleet_apps_management', 'class': 'dict(str, dict(str, object))'}}, output_type={'module': 'fleet_apps_management', 'class': 'SchedulerJob'})
@cli_util.wrap_exceptions
def update_scheduler_job(ctx, from_json, force, wait_for_state, max_wait_seconds, wait_interval_seconds, scheduler_job_id, time_scheduled, freeform_tags, defined_tags, if_match):

    if isinstance(scheduler_job_id, six.string_types) and len(scheduler_job_id.strip()) == 0:
        raise click.UsageError('Parameter --scheduler-job-id cannot be whitespace or empty string')
    if not force:
        if freeform_tags or defined_tags:
            if not click.confirm("WARNING: Updates to freeform-tags and defined-tags will replace any existing values. Are you sure you want to continue?"):
                ctx.abort()

    kwargs = {}
    if if_match is not None:
        kwargs['if_match'] = if_match
    kwargs['opc_request_id'] = cli_util.use_or_generate_request_id(ctx.obj['request_id'])

    _details = {}

    if time_scheduled is not None:
        _details['timeScheduled'] = time_scheduled

    if freeform_tags is not None:
        _details['freeformTags'] = cli_util.parse_json_parameter("freeform_tags", freeform_tags)

    if defined_tags is not None:
        _details['definedTags'] = cli_util.parse_json_parameter("defined_tags", defined_tags)

    client = cli_util.build_client('fleet_apps_management', 'fleet_apps_management_operations', ctx)
    result = client.update_scheduler_job(
        scheduler_job_id=scheduler_job_id,
        update_scheduler_job_details=_details,
        **kwargs
    )
    if wait_for_state:

        if hasattr(client, 'get_scheduler_job') and callable(getattr(client, 'get_scheduler_job')):
            try:
                wait_period_kwargs = {}
                if max_wait_seconds is not None:
                    wait_period_kwargs['max_wait_seconds'] = max_wait_seconds
                if wait_interval_seconds is not None:
                    wait_period_kwargs['max_interval_seconds'] = wait_interval_seconds

                click.echo('Action completed. Waiting until the resource has entered state: {}'.format(wait_for_state), file=sys.stderr)
                result = oci.wait_until(client, client.get_scheduler_job(result.data.id), 'lifecycle_state', wait_for_state, **wait_period_kwargs)
            except oci.exceptions.MaximumWaitTimeExceeded as e:
                # If we fail, we should show an error, but we should still provide the information to the customer
                click.echo('Failed to wait until the resource entered the specified state. Outputting last known resource state', file=sys.stderr)
                cli_util.render_response(result, ctx)
                sys.exit(2)
            except Exception:
                click.echo('Encountered error while waiting for resource to enter the specified state. Outputting last known resource state', file=sys.stderr)
                cli_util.render_response(result, ctx)
                raise
        else:
            click.echo('Unable to wait for the resource to enter the specified state', file=sys.stderr)
    cli_util.render_response(result, ctx)
