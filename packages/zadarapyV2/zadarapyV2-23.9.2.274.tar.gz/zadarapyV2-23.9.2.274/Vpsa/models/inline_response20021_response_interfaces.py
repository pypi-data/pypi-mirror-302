# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse20021ResponseInterfaces(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'interface_simple_name': 'str',
        'ip': 'str',
        'ipv6': 'str',
        'display_name': 'str',
        'vfloating_ip': 'str'
    }

    attribute_map = {
        'name': 'name',
        'interface_simple_name': 'interface_simple_name',
        'ip': 'ip',
        'ipv6': 'ipv6',
        'display_name': 'display_name',
        'vfloating_ip': 'vfloating_ip'
    }

    def __init__(self, name=None, interface_simple_name=None, ip=None, ipv6=None, display_name=None, vfloating_ip=None, _configuration=None):  # noqa: E501
        """InlineResponse20021ResponseInterfaces - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._interface_simple_name = None
        self._ip = None
        self._ipv6 = None
        self._display_name = None
        self._vfloating_ip = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if interface_simple_name is not None:
            self.interface_simple_name = interface_simple_name
        if ip is not None:
            self.ip = ip
        if ipv6 is not None:
            self.ipv6 = ipv6
        if display_name is not None:
            self.display_name = display_name
        if vfloating_ip is not None:
            self.vfloating_ip = vfloating_ip

    @property
    def name(self):
        """Gets the name of this InlineResponse20021ResponseInterfaces.  # noqa: E501


        :return: The name of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20021ResponseInterfaces.


        :param name: The name of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def interface_simple_name(self):
        """Gets the interface_simple_name of this InlineResponse20021ResponseInterfaces.  # noqa: E501


        :return: The interface_simple_name of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._interface_simple_name

    @interface_simple_name.setter
    def interface_simple_name(self, interface_simple_name):
        """Sets the interface_simple_name of this InlineResponse20021ResponseInterfaces.


        :param interface_simple_name: The interface_simple_name of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :type: str
        """

        self._interface_simple_name = interface_simple_name

    @property
    def ip(self):
        """Gets the ip of this InlineResponse20021ResponseInterfaces.  # noqa: E501


        :return: The ip of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this InlineResponse20021ResponseInterfaces.


        :param ip: The ip of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def ipv6(self):
        """Gets the ipv6 of this InlineResponse20021ResponseInterfaces.  # noqa: E501


        :return: The ipv6 of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this InlineResponse20021ResponseInterfaces.


        :param ipv6: The ipv6 of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :type: str
        """

        self._ipv6 = ipv6

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse20021ResponseInterfaces.  # noqa: E501


        :return: The display_name of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse20021ResponseInterfaces.


        :param display_name: The display_name of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def vfloating_ip(self):
        """Gets the vfloating_ip of this InlineResponse20021ResponseInterfaces.  # noqa: E501


        :return: The vfloating_ip of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._vfloating_ip

    @vfloating_ip.setter
    def vfloating_ip(self, vfloating_ip):
        """Sets the vfloating_ip of this InlineResponse20021ResponseInterfaces.


        :param vfloating_ip: The vfloating_ip of this InlineResponse20021ResponseInterfaces.  # noqa: E501
        :type: str
        """

        self._vfloating_ip = vfloating_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20021ResponseInterfaces, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20021ResponseInterfaces):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20021ResponseInterfaces):
            return True

        return self.to_dict() != other.to_dict()
