# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class InlineResponse20051Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'vpsa_id': 'int',
        'user_id': 'int',
        'account_name': 'str',
        'status': 'str',
        'zios_request_id': 'int',
        'used_capacity': 'float',
        'containers_count': 'int',
        'objects_count': 'int',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'vpsa_id': 'vpsa_id',
        'user_id': 'user_id',
        'account_name': 'account_name',
        'status': 'status',
        'zios_request_id': 'zios_request_id',
        'used_capacity': 'used_capacity',
        'containers_count': 'containers_count',
        'objects_count': 'objects_count',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, vpsa_id=None, user_id=None, account_name=None, status=None, zios_request_id=None, used_capacity=None, containers_count=None, objects_count=None, created_at=None, updated_at=None, _configuration=None):  # noqa: E501
        """InlineResponse20051Data - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._vpsa_id = None
        self._user_id = None
        self._account_name = None
        self._status = None
        self._zios_request_id = None
        self._used_capacity = None
        self._containers_count = None
        self._objects_count = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if vpsa_id is not None:
            self.vpsa_id = vpsa_id
        if user_id is not None:
            self.user_id = user_id
        if account_name is not None:
            self.account_name = account_name
        if status is not None:
            self.status = status
        if zios_request_id is not None:
            self.zios_request_id = zios_request_id
        if used_capacity is not None:
            self.used_capacity = used_capacity
        if containers_count is not None:
            self.containers_count = containers_count
        if objects_count is not None:
            self.objects_count = objects_count
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this InlineResponse20051Data.  # noqa: E501


        :return: The id of this InlineResponse20051Data.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20051Data.


        :param id: The id of this InlineResponse20051Data.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def vpsa_id(self):
        """Gets the vpsa_id of this InlineResponse20051Data.  # noqa: E501


        :return: The vpsa_id of this InlineResponse20051Data.  # noqa: E501
        :rtype: int
        """
        return self._vpsa_id

    @vpsa_id.setter
    def vpsa_id(self, vpsa_id):
        """Sets the vpsa_id of this InlineResponse20051Data.


        :param vpsa_id: The vpsa_id of this InlineResponse20051Data.  # noqa: E501
        :type: int
        """

        self._vpsa_id = vpsa_id

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse20051Data.  # noqa: E501


        :return: The user_id of this InlineResponse20051Data.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse20051Data.


        :param user_id: The user_id of this InlineResponse20051Data.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def account_name(self):
        """Gets the account_name of this InlineResponse20051Data.  # noqa: E501


        :return: The account_name of this InlineResponse20051Data.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this InlineResponse20051Data.


        :param account_name: The account_name of this InlineResponse20051Data.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def status(self):
        """Gets the status of this InlineResponse20051Data.  # noqa: E501


        :return: The status of this InlineResponse20051Data.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20051Data.


        :param status: The status of this InlineResponse20051Data.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def zios_request_id(self):
        """Gets the zios_request_id of this InlineResponse20051Data.  # noqa: E501


        :return: The zios_request_id of this InlineResponse20051Data.  # noqa: E501
        :rtype: int
        """
        return self._zios_request_id

    @zios_request_id.setter
    def zios_request_id(self, zios_request_id):
        """Sets the zios_request_id of this InlineResponse20051Data.


        :param zios_request_id: The zios_request_id of this InlineResponse20051Data.  # noqa: E501
        :type: int
        """

        self._zios_request_id = zios_request_id

    @property
    def used_capacity(self):
        """Gets the used_capacity of this InlineResponse20051Data.  # noqa: E501


        :return: The used_capacity of this InlineResponse20051Data.  # noqa: E501
        :rtype: float
        """
        return self._used_capacity

    @used_capacity.setter
    def used_capacity(self, used_capacity):
        """Sets the used_capacity of this InlineResponse20051Data.


        :param used_capacity: The used_capacity of this InlineResponse20051Data.  # noqa: E501
        :type: float
        """

        self._used_capacity = used_capacity

    @property
    def containers_count(self):
        """Gets the containers_count of this InlineResponse20051Data.  # noqa: E501


        :return: The containers_count of this InlineResponse20051Data.  # noqa: E501
        :rtype: int
        """
        return self._containers_count

    @containers_count.setter
    def containers_count(self, containers_count):
        """Sets the containers_count of this InlineResponse20051Data.


        :param containers_count: The containers_count of this InlineResponse20051Data.  # noqa: E501
        :type: int
        """

        self._containers_count = containers_count

    @property
    def objects_count(self):
        """Gets the objects_count of this InlineResponse20051Data.  # noqa: E501


        :return: The objects_count of this InlineResponse20051Data.  # noqa: E501
        :rtype: int
        """
        return self._objects_count

    @objects_count.setter
    def objects_count(self, objects_count):
        """Sets the objects_count of this InlineResponse20051Data.


        :param objects_count: The objects_count of this InlineResponse20051Data.  # noqa: E501
        :type: int
        """

        self._objects_count = objects_count

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20051Data.  # noqa: E501


        :return: The created_at of this InlineResponse20051Data.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20051Data.


        :param created_at: The created_at of this InlineResponse20051Data.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse20051Data.  # noqa: E501


        :return: The updated_at of this InlineResponse20051Data.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse20051Data.


        :param updated_at: The updated_at of this InlineResponse20051Data.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20051Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20051Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20051Data):
            return True

        return self.to_dict() != other.to_dict()
