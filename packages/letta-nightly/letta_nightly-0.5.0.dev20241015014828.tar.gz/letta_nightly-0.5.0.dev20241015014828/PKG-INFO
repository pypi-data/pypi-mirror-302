Metadata-Version: 2.1
Name: letta-nightly
Version: 0.5.0.dev20241015014828
Summary: Create LLM agents with long-term memory and custom tools
License: Apache License
Author: Letta Team
Author-email: contact@letta.com
Requires-Python: >=3.10,<3.13
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Provides-Extra: autogen
Provides-Extra: dev
Provides-Extra: external-tools
Provides-Extra: milvus
Provides-Extra: ollama
Provides-Extra: postgres
Provides-Extra: qdrant
Provides-Extra: server
Provides-Extra: tests
Requires-Dist: alembic (>=1.13.3,<2.0.0)
Requires-Dist: autoflake (>=2.3.0,<3.0.0) ; extra == "dev"
Requires-Dist: black[jupyter] (>=24.2.0,<25.0.0) ; extra == "dev"
Requires-Dist: chromadb (>=0.4.24,<0.5.0)
Requires-Dist: composio-core (>=0.5.28,<0.6.0) ; extra == "external-tools"
Requires-Dist: composio-langchain (>=0.5.28,<0.6.0) ; extra == "external-tools"
Requires-Dist: crewai (>=0.41.1,<0.42.0) ; extra == "external-tools"
Requires-Dist: crewai-tools (>=0.8.3,<0.9.0) ; extra == "external-tools"
Requires-Dist: datasets (>=2.14.6,<3.0.0) ; extra == "dev"
Requires-Dist: demjson3 (>=3.0.6,<4.0.0)
Requires-Dist: docker (>=7.1.0,<8.0.0) ; extra == "external-tools"
Requires-Dist: docstring-parser (>=0.16,<0.17)
Requires-Dist: docx2txt (>=0.8,<0.9)
Requires-Dist: fastapi (>=0.104.1,<0.105.0) ; extra == "server"
Requires-Dist: html2text (>=2020.1.16,<2021.0.0)
Requires-Dist: httpx (>=0.27.2,<0.28.0)
Requires-Dist: httpx-sse (>=0.4.0,<0.5.0)
Requires-Dist: isort (>=5.13.2,<6.0.0) ; extra == "dev"
Requires-Dist: jinja2 (>=3.1.4,<4.0.0)
Requires-Dist: langchain (>=0.2.16,<0.3.0) ; extra == "external-tools"
Requires-Dist: langchain-community (>=0.2.17,<0.3.0) ; extra == "external-tools"
Requires-Dist: llama-index (>=0.11.9,<0.12.0)
Requires-Dist: llama-index-embeddings-ollama (>=0.3.1,<0.4.0) ; extra == "ollama"
Requires-Dist: llama-index-embeddings-openai (>=0.2.5,<0.3.0)
Requires-Dist: locust (>=2.31.5,<3.0.0)
Requires-Dist: nltk (>=3.8.1,<4.0.0)
Requires-Dist: numpy (>=1.26.2,<2.0.0)
Requires-Dist: pexpect (>=4.9.0,<5.0.0) ; extra == "dev"
Requires-Dist: pg8000 (>=1.30.3,<2.0.0) ; extra == "postgres"
Requires-Dist: pgvector (>=0.2.3,<0.3.0) ; extra == "postgres"
Requires-Dist: pre-commit (>=3.5.0,<4.0.0) ; extra == "dev"
Requires-Dist: prettytable (>=3.9.0,<4.0.0)
Requires-Dist: pyautogen (==0.2.22) ; extra == "autogen"
Requires-Dist: pydantic (>=2.7.4,<3.0.0)
Requires-Dist: pydantic-settings (>=2.2.1,<3.0.0)
Requires-Dist: pymilvus (>=2.4.3,<3.0.0) ; extra == "milvus"
Requires-Dist: pyright (>=1.1.347,<2.0.0) ; extra == "dev"
Requires-Dist: pytest-asyncio (>=0.23.2,<0.24.0) ; extra == "dev"
Requires-Dist: pytest-order (>=1.2.0,<2.0.0) ; extra == "dev"
Requires-Dist: python-box (>=7.1.1,<8.0.0)
Requires-Dist: python-multipart (>=0.0.9,<0.0.10)
Requires-Dist: pytz (>=2023.3.post1,<2024.0)
Requires-Dist: pyyaml (>=6.0.1,<7.0.0)
Requires-Dist: qdrant-client (>=1.9.1,<2.0.0) ; extra == "qdrant"
Requires-Dist: questionary (>=2.0.1,<3.0.0)
Requires-Dist: setuptools (>=68.2.2,<69.0.0)
Requires-Dist: sqlalchemy (>=2.0.25,<3.0.0)
Requires-Dist: sqlalchemy-json (>=0.7.0,<0.8.0)
Requires-Dist: sqlalchemy-utils (>=0.41.2,<0.42.0)
Requires-Dist: sqlmodel (>=0.0.16,<0.0.17)
Requires-Dist: tiktoken (>=0.7.0,<0.8.0)
Requires-Dist: tqdm (>=4.66.1,<5.0.0)
Requires-Dist: typer[all] (>=0.9.0,<0.10.0)
Requires-Dist: uvicorn (>=0.24.0.post1,<0.25.0) ; extra == "server"
Requires-Dist: websockets (>=12.0,<13.0) ; extra == "server"
Requires-Dist: wikipedia (>=1.4.0,<2.0.0) ; extra == "external-tools" or extra == "tests"
Description-Content-Type: text/markdown

# Letta (previously MemGPT)
[![Discord](https://img.shields.io/discord/1161736243340640419?label=Discord&logo=discord&logoColor=5865F2&style=flat-square&color=5865F2)](https://discord.gg/letta)
[![Twitter Follow](https://img.shields.io/badge/follow-%40Letta__AI-1DA1F2?style=flat-square&logo=x&logoColor=white)](https://twitter.com/Letta_AI)
[![arxiv 2310.08560](https://img.shields.io/badge/arXiv-2310.08560-B31B1B?logo=arxiv&style=flat-square)](https://arxiv.org/abs/2310.08560)

> [!NOTE]
> **Looking for MemGPT?** You're in the right place!
>
> The MemGPT package and Docker image have been renamed to `letta` to clarify the distinction between MemGPT agents and the API server / runtime that runs LLM agents as *services*.
>
> You use the **Letta _framework_** to create **MemGPT _agents_**. Read more about the relationship between MemGPT and Letta [here](https://www.letta.com/blog/memgpt-and-letta).

Visit our [documentation page](https://docs.letta.com) for information on setup and usage.

## How to Get Involved
* **Contribute to the Project**: Interested in contributing? Start by reading our [Contribution Guidelines](https://github.com/cpacker/MemGPT/tree/main/CONTRIBUTING.md).
* **Ask a Question**: Join our community on [Discord](https://discord.gg/letta) and direct your questions to the `#support` channel.
* **Report Issues or Suggest Features**: Have an issue or a feature request? Please submit them through our [GitHub Issues page](https://github.com/cpacker/MemGPT/issues).
* **Explore the Roadmap**: Curious about future developments? View and comment on our [project roadmap](https://github.com/cpacker/MemGPT/issues/1200).
* **Benchmark the Performance**: Want to benchmark the performance of a model on MemGPT? Follow our [Benchmarking Guidance](#benchmarking-guidance).
* **Join Community Events**: Stay updated with the [event calendar](https://lu.ma/berkeley-llm-meetup) or follow our [Twitter account](https://twitter.com/Letta_AI).

## Legal notices
By using Letta and related Letta services (such as the Letta endpoint or hosted service), you agree to our [privacy policy](https://www.letta.com/privacy-policy) and [terms of service](https://www.letta.com/terms-of-service).

