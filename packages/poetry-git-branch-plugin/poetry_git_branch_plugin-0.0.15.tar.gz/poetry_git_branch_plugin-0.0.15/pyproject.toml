[tool.poetry]
name = "poetry-git-branch-plugin"
version = "0.0.15"
description = "A poetry plugin to store the current git branch into environment variable when poetry runs any command."
authors = ["Dribia Code <code@dribia.com>"]
maintainers = ["Dribia Code <code@dribia.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/dribia/poetry-git-branch-plugin"
homepage = "https://github.com/dribia/poeetry-git-branch-plugin"
keywords = ["poetry", "plugin", "branch", "environment"]

[tool.poetry.dependencies]
python = "^3.10"
poetry = "^1.7.1"

[tool.poetry.group.dev.dependencies]
pre-commit = ">=3.8,<5.0"

[tool.poetry.group.lint.dependencies]
ruff = "0.6.9"
mypy = "1.11.2"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
pytest-cov = "^5.0.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.14"

[tool.ruff]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "D",  # pydocstyle
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # function is too complex
    "D206",  # indent with spaces, not recommended with formatter
    "W191",  # tab-indentation, not recommended with formatter
    "D203",  # no-blank-line-before-class
    "D213",  # multi-line-summary-second-line
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]

[tool.ruff.lint.isort]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
plugins = []
strict_optional = true
ignore_missing_imports = false

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "--verbose"
filterwarnings = 'error'
xfail_strict = true
testpaths = ["tests"]
markers = [
  "integration: integration tests",
]

[tool.coverage.run]
source = ["poetry_git_branch_plugin"]
branch = true

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    '@overload',
]

[tool.coverage.xml]
output = "coverage.xml"

[tool.poetry.plugins."poetry.application.plugin"]
poetry-git-env = "poetry_git_branch_plugin.plugin:PoetryGitBranchPlugin"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
