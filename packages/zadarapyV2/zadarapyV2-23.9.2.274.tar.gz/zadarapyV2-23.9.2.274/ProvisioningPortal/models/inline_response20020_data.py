# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class InlineResponse20020Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default': 'bool',
        'cloud_id': 'int',
        'provider_id': 'int',
        'vlan_id': 'int',
        'custom_networks': 'list[str]',
        'vpsas': 'list[str]'
    }

    attribute_map = {
        'default': 'default',
        'cloud_id': 'cloud_id',
        'provider_id': 'provider_id',
        'vlan_id': 'vlan_id',
        'custom_networks': 'custom_networks',
        'vpsas': 'vpsas'
    }

    def __init__(self, default=None, cloud_id=None, provider_id=None, vlan_id=None, custom_networks=None, vpsas=None, _configuration=None):  # noqa: E501
        """InlineResponse20020Data - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._default = None
        self._cloud_id = None
        self._provider_id = None
        self._vlan_id = None
        self._custom_networks = None
        self._vpsas = None
        self.discriminator = None

        if default is not None:
            self.default = default
        if cloud_id is not None:
            self.cloud_id = cloud_id
        if provider_id is not None:
            self.provider_id = provider_id
        if vlan_id is not None:
            self.vlan_id = vlan_id
        if custom_networks is not None:
            self.custom_networks = custom_networks
        if vpsas is not None:
            self.vpsas = vpsas

    @property
    def default(self):
        """Gets the default of this InlineResponse20020Data.  # noqa: E501


        :return: The default of this InlineResponse20020Data.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this InlineResponse20020Data.


        :param default: The default of this InlineResponse20020Data.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def cloud_id(self):
        """Gets the cloud_id of this InlineResponse20020Data.  # noqa: E501


        :return: The cloud_id of this InlineResponse20020Data.  # noqa: E501
        :rtype: int
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this InlineResponse20020Data.


        :param cloud_id: The cloud_id of this InlineResponse20020Data.  # noqa: E501
        :type: int
        """

        self._cloud_id = cloud_id

    @property
    def provider_id(self):
        """Gets the provider_id of this InlineResponse20020Data.  # noqa: E501


        :return: The provider_id of this InlineResponse20020Data.  # noqa: E501
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this InlineResponse20020Data.


        :param provider_id: The provider_id of this InlineResponse20020Data.  # noqa: E501
        :type: int
        """

        self._provider_id = provider_id

    @property
    def vlan_id(self):
        """Gets the vlan_id of this InlineResponse20020Data.  # noqa: E501


        :return: The vlan_id of this InlineResponse20020Data.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this InlineResponse20020Data.


        :param vlan_id: The vlan_id of this InlineResponse20020Data.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    @property
    def custom_networks(self):
        """Gets the custom_networks of this InlineResponse20020Data.  # noqa: E501


        :return: The custom_networks of this InlineResponse20020Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_networks

    @custom_networks.setter
    def custom_networks(self, custom_networks):
        """Sets the custom_networks of this InlineResponse20020Data.


        :param custom_networks: The custom_networks of this InlineResponse20020Data.  # noqa: E501
        :type: list[str]
        """

        self._custom_networks = custom_networks

    @property
    def vpsas(self):
        """Gets the vpsas of this InlineResponse20020Data.  # noqa: E501


        :return: The vpsas of this InlineResponse20020Data.  # noqa: E501
        :rtype: list[str]
        """
        return self._vpsas

    @vpsas.setter
    def vpsas(self, vpsas):
        """Sets the vpsas of this InlineResponse20020Data.


        :param vpsas: The vpsas of this InlineResponse20020Data.  # noqa: E501
        :type: list[str]
        """

        self._vpsas = vpsas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20020Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20020Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20020Data):
            return True

        return self.to_dict() != other.to_dict()
