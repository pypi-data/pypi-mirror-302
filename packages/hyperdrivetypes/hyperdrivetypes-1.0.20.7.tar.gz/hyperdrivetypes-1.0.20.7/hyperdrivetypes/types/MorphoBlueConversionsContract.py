"""A web3.py Contract class for the MorphoBlueConversions contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import dataclass_to_tuple, rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}


class MorphoBlueConversionsConvertToBaseContractFunction(ContractFunction):
    """ContractFunction for the convertToBase method."""

    def __call__(self, vault: IMorpho, baseToken: IERC20, collateralToken: str, oracle: str, irm: str, lltv: int, shareAmount: int) -> MorphoBlueConversionsConvertToBaseContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(vault),
            dataclass_to_tuple(baseToken),
            dataclass_to_tuple(collateralToken),
            dataclass_to_tuple(oracle),
            dataclass_to_tuple(irm),
            dataclass_to_tuple(lltv),
            dataclass_to_tuple(shareAmount),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MorphoBlueConversionsConvertToSharesContractFunction(ContractFunction):
    """ContractFunction for the convertToShares method."""

    def __call__(self, vault: IMorpho, baseToken: IERC20, collateralToken: str, oracle: str, irm: str, lltv: int, baseAmount: int) -> MorphoBlueConversionsConvertToSharesContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(vault),
            dataclass_to_tuple(baseToken),
            dataclass_to_tuple(collateralToken),
            dataclass_to_tuple(oracle),
            dataclass_to_tuple(irm),
            dataclass_to_tuple(lltv),
            dataclass_to_tuple(baseAmount),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MorphoBlueConversionsContractFunctions(ContractFunctions):
    """ContractFunctions for the MorphoBlueConversions contract."""

    convertToBase: MorphoBlueConversionsConvertToBaseContractFunction

    convertToShares: MorphoBlueConversionsConvertToSharesContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.convertToBase = (
            MorphoBlueConversionsConvertToBaseContractFunction.factory(
                "convertToBase",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="convertToBase",
            )
        )
        self.convertToShares = (
            MorphoBlueConversionsConvertToSharesContractFunction.factory(
                "convertToShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="convertToShares",
            )
        )


morphoblueconversions_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "convertToBase",
            "inputs": [
                {
                    "name": "_vault",
                    "type": "IMorpho",
                    "internalType": "contract IMorpho",
                },
                {
                    "name": "_baseToken",
                    "type": "IERC20",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_collateralToken",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_oracle",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "_irm", "type": "address", "internalType": "address"},
                {"name": "_lltv", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_shareAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {
                    "name": "_vault",
                    "type": "IMorpho",
                    "internalType": "contract IMorpho",
                },
                {
                    "name": "_baseToken",
                    "type": "IERC20",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_collateralToken",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_oracle",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "_irm", "type": "address", "internalType": "address"},
                {"name": "_lltv", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_baseAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
    ],
)


class MorphoBlueConversionsContract(Contract):
    """A web3.py Contract class for the MorphoBlueConversions contract."""

    abi: ABI = morphoblueconversions_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x61083d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80633c2063f01461004557806349124ca31461006a575b600080fd5b6100586100533660046105b7565b61007d565b60405190815260200160405180910390f35b6100586100783660046105b7565b6100ae565b60008060006100908a8a8a8a8a8a6100d1565b90925090506100a084838361014b565b9a9950505050505050505050565b60008060006100c18a8a8a8a8a8a6100d1565b90925090506100a0848383610178565b60008061013a6040518060a00160405280896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b0316815260200185815250896001600160a01b031661019590919063ffffffff16565b50919a909950975050505050505050565b600061017061015b600185610650565b610168620f424085610650565b869190610499565b949350505050565b600061017061018a620f424084610650565b610168600186610650565b60008060008060006101a88660a0902090565b604051632e3071cd60e11b8152600481018290529091506000906001600160a01b03891690635c60e39a9060240160c060405180830381865afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610217919061067f565b9050600081608001516001600160801b031642610234919061072c565b90508015801590610251575060408201516001600160801b031615155b8015610269575060608801516001600160a01b031615155b15610465576060888101805160408051638c00bf6b60e01b81528c516001600160a01b0390811660048301526020808f015182166024840152838f0151821660448401529451811660648301526080808f0151608484015288516001600160801b0390811660a485015295890151861660c484015292880151851660e483015294870151841661010482015290860151831661012482015260a08601519092166101448301526000921690638c00bf6b9061016401602060405180830381865afa15801561033b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035f919061073f565b9050600061038461037083856104b0565b60408601516001600160801b03169061051d565b905061038f81610539565b846040018181516103a09190610758565b6001600160801b03169052506103b581610539565b845185906103c4908390610758565b6001600160801b0390811690915260a0860151161590506104625760006104018560a001516001600160801b03168361051d90919063ffffffff16565b905060006104378287600001516001600160801b0316610421919061072c565b60208801518491906001600160801b0316610178565b905061044281610539565b866020018181516104539190610758565b6001600160801b031690525050505b50505b508051602082015160408301516060909301516001600160801b039283169b9183169a509282169850911695509350505050565b6000816104a6848661077f565b6101709190610796565b6000806104bd838561077f565b905060006104de82806104d9670de0b6b3a7640000600261077f565b610499565b905060006104fa82846104d9670de0b6b3a7640000600361077f565b9050806105078385610650565b6105119190610650565b93505050505b92915050565b60006105328383670de0b6b3a7640000610499565b9392505050565b6040805180820190915260148152731b585e081d5a5b9d0c4c8e08195e18d95959195960621b60208201526000906001600160801b038311156105985760405162461bcd60e51b815260040161058f91906107b8565b60405180910390fd5b5090919050565b6001600160a01b03811681146105b457600080fd5b50565b600080600080600080600060e0888a0312156105d257600080fd5b87356105dd8161059f565b965060208801356105ed8161059f565b955060408801356105fd8161059f565b9450606088013561060d8161059f565b9350608088013561061d8161059f565b9699959850939692959460a0840135945060c09093013592915050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105175761051761063a565b80516001600160801b038116811461067a57600080fd5b919050565b600060c0828403121561069157600080fd5b60405160c0810181811067ffffffffffffffff821117156106c257634e487b7160e01b600052604160045260246000fd5b6040526106ce83610663565b81526106dc60208401610663565b60208201526106ed60408401610663565b60408201526106fe60608401610663565b606082015261070f60808401610663565b608082015261072060a08401610663565b60a08201529392505050565b818103818111156105175761051761063a565b60006020828403121561075157600080fd5b5051919050565b6001600160801b038181168382160190808211156107785761077861063a565b5092915050565b80820281158282048414176105175761051761063a565b6000826107b357634e487b7160e01b600052601260045260246000fd5b500490565b60006020808352835180602085015260005b818110156107e6578581018301518582016040015282016107ca565b506000604082860101526040601f19601f830116850101925050509291505056fea264697066735822122052ff34b04b5b29532c23a921b48e7b9364e7e279a4288cf4290381c1beecb4de64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MorphoBlueConversionsContractFunctions(morphoblueconversions_abi, self.w3, address)  # type: ignore

    functions: MorphoBlueConversionsContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MorphoBlueConversionsContractFunctions(
            morphoblueconversions_abi, w3, None
        )

        return contract
