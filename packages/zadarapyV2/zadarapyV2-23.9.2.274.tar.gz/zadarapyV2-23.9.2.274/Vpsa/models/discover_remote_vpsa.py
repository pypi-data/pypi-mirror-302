# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class DiscoverRemoteVpsa(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'user': 'str',
        'password': 'str',
        'interface': 'str',
        'report_failures': 'bool',
        'proxyhost': 'str',
        'proxyport': 'str',
        'proxyusername': 'str',
        'proxypassword': 'str'
    }

    attribute_map = {
        'ip': 'ip',
        'user': 'user',
        'password': 'password',
        'interface': 'interface',
        'report_failures': 'report_failures',
        'proxyhost': 'proxyhost',
        'proxyport': 'proxyport',
        'proxyusername': 'proxyusername',
        'proxypassword': 'proxypassword'
    }

    def __init__(self, ip=None, user=None, password=None, interface='fe', report_failures=None, proxyhost=None, proxyport=None, proxyusername=None, proxypassword=None, _configuration=None):  # noqa: E501
        """DiscoverRemoteVpsa - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ip = None
        self._user = None
        self._password = None
        self._interface = None
        self._report_failures = None
        self._proxyhost = None
        self._proxyport = None
        self._proxyusername = None
        self._proxypassword = None
        self.discriminator = None

        self.ip = ip
        self.user = user
        self.password = password
        if interface is not None:
            self.interface = interface
        if report_failures is not None:
            self.report_failures = report_failures
        if proxyhost is not None:
            self.proxyhost = proxyhost
        if proxyport is not None:
            self.proxyport = proxyport
        if proxyusername is not None:
            self.proxyusername = proxyusername
        if proxypassword is not None:
            self.proxypassword = proxypassword

    @property
    def ip(self):
        """Gets the ip of this DiscoverRemoteVpsa.  # noqa: E501

        IP of VPSA to discover  # noqa: E501

        :return: The ip of this DiscoverRemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this DiscoverRemoteVpsa.

        IP of VPSA to discover  # noqa: E501

        :param ip: The ip of this DiscoverRemoteVpsa.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def user(self):
        """Gets the user of this DiscoverRemoteVpsa.  # noqa: E501

        username of VPSA to discover  # noqa: E501

        :return: The user of this DiscoverRemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DiscoverRemoteVpsa.

        username of VPSA to discover  # noqa: E501

        :param user: The user of this DiscoverRemoteVpsa.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def password(self):
        """Gets the password of this DiscoverRemoteVpsa.  # noqa: E501

        password of VPSA to discover  # noqa: E501

        :return: The password of this DiscoverRemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DiscoverRemoteVpsa.

        password of VPSA to discover  # noqa: E501

        :param password: The password of this DiscoverRemoteVpsa.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def interface(self):
        """Gets the interface of this DiscoverRemoteVpsa.  # noqa: E501

        Set interface to use for connecting the remote vpsa  # noqa: E501

        :return: The interface of this DiscoverRemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """Sets the interface of this DiscoverRemoteVpsa.

        Set interface to use for connecting the remote vpsa  # noqa: E501

        :param interface: The interface of this DiscoverRemoteVpsa.  # noqa: E501
        :type: str
        """
        allowed_values = ["public", "vni0", "fe"]  # noqa: E501
        if (self._configuration.client_side_validation and
                interface not in allowed_values):
            raise ValueError(
                "Invalid value for `interface` ({0}), must be one of {1}"  # noqa: E501
                .format(interface, allowed_values)
            )

        self._interface = interface

    @property
    def report_failures(self):
        """Gets the report_failures of this DiscoverRemoteVpsa.  # noqa: E501

        Control alerts about connectivity issues with the Remote VPSA  # noqa: E501

        :return: The report_failures of this DiscoverRemoteVpsa.  # noqa: E501
        :rtype: bool
        """
        return self._report_failures

    @report_failures.setter
    def report_failures(self, report_failures):
        """Sets the report_failures of this DiscoverRemoteVpsa.

        Control alerts about connectivity issues with the Remote VPSA  # noqa: E501

        :param report_failures: The report_failures of this DiscoverRemoteVpsa.  # noqa: E501
        :type: bool
        """

        self._report_failures = report_failures

    @property
    def proxyhost(self):
        """Gets the proxyhost of this DiscoverRemoteVpsa.  # noqa: E501

        If using proxy, the proxy host  # noqa: E501

        :return: The proxyhost of this DiscoverRemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._proxyhost

    @proxyhost.setter
    def proxyhost(self, proxyhost):
        """Sets the proxyhost of this DiscoverRemoteVpsa.

        If using proxy, the proxy host  # noqa: E501

        :param proxyhost: The proxyhost of this DiscoverRemoteVpsa.  # noqa: E501
        :type: str
        """

        self._proxyhost = proxyhost

    @property
    def proxyport(self):
        """Gets the proxyport of this DiscoverRemoteVpsa.  # noqa: E501

        If using proxy, the proxy port  # noqa: E501

        :return: The proxyport of this DiscoverRemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._proxyport

    @proxyport.setter
    def proxyport(self, proxyport):
        """Sets the proxyport of this DiscoverRemoteVpsa.

        If using proxy, the proxy port  # noqa: E501

        :param proxyport: The proxyport of this DiscoverRemoteVpsa.  # noqa: E501
        :type: str
        """

        self._proxyport = proxyport

    @property
    def proxyusername(self):
        """Gets the proxyusername of this DiscoverRemoteVpsa.  # noqa: E501

        If using proxy with authentication, the proxy username  # noqa: E501

        :return: The proxyusername of this DiscoverRemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._proxyusername

    @proxyusername.setter
    def proxyusername(self, proxyusername):
        """Sets the proxyusername of this DiscoverRemoteVpsa.

        If using proxy with authentication, the proxy username  # noqa: E501

        :param proxyusername: The proxyusername of this DiscoverRemoteVpsa.  # noqa: E501
        :type: str
        """

        self._proxyusername = proxyusername

    @property
    def proxypassword(self):
        """Gets the proxypassword of this DiscoverRemoteVpsa.  # noqa: E501

        If using proxy with authentication, the proxy user password  # noqa: E501

        :return: The proxypassword of this DiscoverRemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._proxypassword

    @proxypassword.setter
    def proxypassword(self, proxypassword):
        """Sets the proxypassword of this DiscoverRemoteVpsa.

        If using proxy with authentication, the proxy user password  # noqa: E501

        :param proxypassword: The proxypassword of this DiscoverRemoteVpsa.  # noqa: E501
        :type: str
        """

        self._proxypassword = proxypassword

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoverRemoteVpsa, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoverRemoteVpsa):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiscoverRemoteVpsa):
            return True

        return self.to_dict() != other.to_dict()
