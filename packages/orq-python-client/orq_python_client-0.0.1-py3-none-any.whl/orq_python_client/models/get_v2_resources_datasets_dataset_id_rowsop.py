"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
import dateutil.parser
from enum import Enum
from orq_python_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from orq_python_client.utils import FieldMetadata, PathParamMetadata
import pydantic
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypedDict


class GetV2ResourcesDatasetsDatasetIDRowsRequestTypedDict(TypedDict):
    dataset_id: str
    r"""Dataset ID"""


class GetV2ResourcesDatasetsDatasetIDRowsRequest(BaseModel):
    dataset_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Dataset ID"""


class GetV2ResourcesDatasetsDatasetIDRowsRole(str, Enum):
    r"""The role of the prompt message"""

    SYSTEM = "system"
    ASSISTANT = "assistant"
    USER = "user"
    EXCEPTION = "exception"
    TOOL = "tool"
    PROMPT = "prompt"
    CORRECTION = "correction"
    EXPECTED_OUTPUT = "expected_output"


class GetV2ResourcesDatasetsDatasetIDRows2ResourcesType(str, Enum):
    IMAGE_URL = "image_url"


class GetV2ResourcesDatasetsDatasetIDRows2ImageURLTypedDict(TypedDict):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""
    id: NotRequired[str]
    r"""The orq.ai id of the image"""
    detail: NotRequired[str]
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class GetV2ResourcesDatasetsDatasetIDRows2ImageURL(BaseModel):
    url: str
    r"""Either a URL of the image or the base64 encoded data URI."""

    id: Optional[str] = None
    r"""The orq.ai id of the image"""

    detail: Optional[str] = None
    r"""Specifies the detail level of the image. Currently only supported with OpenAI models"""


class GetV2ResourcesDatasetsDatasetIDRows22TypedDict(TypedDict):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: GetV2ResourcesDatasetsDatasetIDRows2ResourcesType
    image_url: GetV2ResourcesDatasetsDatasetIDRows2ImageURLTypedDict


class GetV2ResourcesDatasetsDatasetIDRows22(BaseModel):
    r"""The image part of the prompt message. Only supported with vision models."""

    type: GetV2ResourcesDatasetsDatasetIDRows2ResourcesType

    image_url: GetV2ResourcesDatasetsDatasetIDRows2ImageURL


class GetV2ResourcesDatasetsDatasetIDRows2Type(str, Enum):
    TEXT = "text"


class GetV2ResourcesDatasetsDatasetIDRows21TypedDict(TypedDict):
    r"""Text content part of a prompt message"""

    type: GetV2ResourcesDatasetsDatasetIDRows2Type
    text: str


class GetV2ResourcesDatasetsDatasetIDRows21(BaseModel):
    r"""Text content part of a prompt message"""

    type: GetV2ResourcesDatasetsDatasetIDRows2Type

    text: str


GetV2ResourcesDatasetsDatasetIDRowsContent2TypedDict = Union[
    GetV2ResourcesDatasetsDatasetIDRows21TypedDict,
    GetV2ResourcesDatasetsDatasetIDRows22TypedDict,
]


GetV2ResourcesDatasetsDatasetIDRowsContent2 = Union[
    GetV2ResourcesDatasetsDatasetIDRows21, GetV2ResourcesDatasetsDatasetIDRows22
]


GetV2ResourcesDatasetsDatasetIDRowsContentTypedDict = Union[
    str, List[GetV2ResourcesDatasetsDatasetIDRowsContent2TypedDict]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


GetV2ResourcesDatasetsDatasetIDRowsContent = Union[
    str, List[GetV2ResourcesDatasetsDatasetIDRowsContent2]
]
r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""


class GetV2ResourcesDatasetsDatasetIDRowsType(str, Enum):
    FUNCTION = "function"


class GetV2ResourcesDatasetsDatasetIDRowsFunctionTypedDict(TypedDict):
    name: str
    arguments: str
    r"""JSON string arguments for the functions"""


class GetV2ResourcesDatasetsDatasetIDRowsFunction(BaseModel):
    name: str

    arguments: str
    r"""JSON string arguments for the functions"""


class GetV2ResourcesDatasetsDatasetIDRowsToolCallsTypedDict(TypedDict):
    type: GetV2ResourcesDatasetsDatasetIDRowsType
    function: GetV2ResourcesDatasetsDatasetIDRowsFunctionTypedDict
    id: NotRequired[str]
    index: NotRequired[float]


class GetV2ResourcesDatasetsDatasetIDRowsToolCalls(BaseModel):
    type: GetV2ResourcesDatasetsDatasetIDRowsType

    function: GetV2ResourcesDatasetsDatasetIDRowsFunction

    id: Optional[str] = None

    index: Optional[float] = None


class GetV2ResourcesDatasetsDatasetIDRowsMessagesTypedDict(TypedDict):
    role: GetV2ResourcesDatasetsDatasetIDRowsRole
    r"""The role of the prompt message"""
    content: GetV2ResourcesDatasetsDatasetIDRowsContentTypedDict
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""
    tool_calls: NotRequired[List[GetV2ResourcesDatasetsDatasetIDRowsToolCallsTypedDict]]


class GetV2ResourcesDatasetsDatasetIDRowsMessages(BaseModel):
    role: GetV2ResourcesDatasetsDatasetIDRowsRole
    r"""The role of the prompt message"""

    content: GetV2ResourcesDatasetsDatasetIDRowsContent
    r"""The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts."""

    tool_calls: Optional[List[GetV2ResourcesDatasetsDatasetIDRowsToolCalls]] = None


class GetV2ResourcesDatasetsDatasetIDRowsItemsTypedDict(TypedDict):
    r"""Returned dataset row model from the API."""

    id: str
    messages: List[GetV2ResourcesDatasetsDatasetIDRowsMessagesTypedDict]
    r"""Input message(s) of the dataset row"""
    expected_output: NotRequired[Nullable[str]]
    r"""Reference of the dataset row"""
    created: NotRequired[datetime]
    r"""The date and time the resource was created"""
    updated: NotRequired[datetime]
    r"""The date and time the resource was last updated"""


class GetV2ResourcesDatasetsDatasetIDRowsItems(BaseModel):
    r"""Returned dataset row model from the API."""

    id: str

    messages: List[GetV2ResourcesDatasetsDatasetIDRowsMessages]
    r"""Input message(s) of the dataset row"""

    expected_output: OptionalNullable[str] = UNSET
    r"""Reference of the dataset row"""

    created: Optional[datetime] = None
    r"""The date and time the resource was created"""

    updated: Optional[datetime] = dateutil.parser.isoparse("2024-10-14T12:39:38.949Z")
    r"""The date and time the resource was last updated"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["expected_output", "created", "updated"]
        nullable_fields = ["expected_output"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class GetV2ResourcesDatasetsDatasetIDRowsResponseBodyTypedDict(TypedDict):
    r"""Dataset rows Retrieved."""

    count: float
    page: float
    limit: float
    total_pages: float
    items: List[GetV2ResourcesDatasetsDatasetIDRowsItemsTypedDict]


class GetV2ResourcesDatasetsDatasetIDRowsResponseBody(BaseModel):
    r"""Dataset rows Retrieved."""

    count: float

    page: float

    limit: float

    total_pages: Annotated[float, pydantic.Field(alias="totalPages")]

    items: List[GetV2ResourcesDatasetsDatasetIDRowsItems]
