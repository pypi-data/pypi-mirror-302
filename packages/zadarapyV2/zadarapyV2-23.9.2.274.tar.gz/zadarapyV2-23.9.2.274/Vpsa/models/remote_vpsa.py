# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class RemoteVpsa(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'remote_name': 'str',
        'remote_display_name': 'str',
        'provider': 'str',
        'software_version': 'str',
        'uuid': 'str',
        'ip': 'str',
        'public': 'str',
        'report_failure': 'str',
        'vni': 'str',
        'status': 'str',
        'limited_higher_rate_in_kbs': 'int',
        'features': 'RemoteVpsaFeatures'
    }

    attribute_map = {
        'name': 'name',
        'remote_name': 'remote_name',
        'remote_display_name': 'remote_display_name',
        'provider': 'provider',
        'software_version': 'software_version',
        'uuid': 'uuid',
        'ip': 'ip',
        'public': 'public',
        'report_failure': 'report_failure',
        'vni': 'vni',
        'status': 'status',
        'limited_higher_rate_in_kbs': 'limited_higher_rate_in_KBS',
        'features': 'features'
    }

    def __init__(self, name=None, remote_name=None, remote_display_name=None, provider=None, software_version=None, uuid=None, ip=None, public=None, report_failure=None, vni=None, status=None, limited_higher_rate_in_kbs=None, features=None, _configuration=None):  # noqa: E501
        """RemoteVpsa - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._remote_name = None
        self._remote_display_name = None
        self._provider = None
        self._software_version = None
        self._uuid = None
        self._ip = None
        self._public = None
        self._report_failure = None
        self._vni = None
        self._status = None
        self._limited_higher_rate_in_kbs = None
        self._features = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if remote_name is not None:
            self.remote_name = remote_name
        if remote_display_name is not None:
            self.remote_display_name = remote_display_name
        if provider is not None:
            self.provider = provider
        if software_version is not None:
            self.software_version = software_version
        if uuid is not None:
            self.uuid = uuid
        if ip is not None:
            self.ip = ip
        if public is not None:
            self.public = public
        if report_failure is not None:
            self.report_failure = report_failure
        if vni is not None:
            self.vni = vni
        if status is not None:
            self.status = status
        if limited_higher_rate_in_kbs is not None:
            self.limited_higher_rate_in_kbs = limited_higher_rate_in_kbs
        if features is not None:
            self.features = features

    @property
    def name(self):
        """Gets the name of this RemoteVpsa.  # noqa: E501


        :return: The name of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RemoteVpsa.


        :param name: The name of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def remote_name(self):
        """Gets the remote_name of this RemoteVpsa.  # noqa: E501


        :return: The remote_name of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._remote_name

    @remote_name.setter
    def remote_name(self, remote_name):
        """Sets the remote_name of this RemoteVpsa.


        :param remote_name: The remote_name of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._remote_name = remote_name

    @property
    def remote_display_name(self):
        """Gets the remote_display_name of this RemoteVpsa.  # noqa: E501


        :return: The remote_display_name of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._remote_display_name

    @remote_display_name.setter
    def remote_display_name(self, remote_display_name):
        """Sets the remote_display_name of this RemoteVpsa.


        :param remote_display_name: The remote_display_name of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._remote_display_name = remote_display_name

    @property
    def provider(self):
        """Gets the provider of this RemoteVpsa.  # noqa: E501


        :return: The provider of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this RemoteVpsa.


        :param provider: The provider of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def software_version(self):
        """Gets the software_version of this RemoteVpsa.  # noqa: E501


        :return: The software_version of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this RemoteVpsa.


        :param software_version: The software_version of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def uuid(self):
        """Gets the uuid of this RemoteVpsa.  # noqa: E501


        :return: The uuid of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this RemoteVpsa.


        :param uuid: The uuid of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def ip(self):
        """Gets the ip of this RemoteVpsa.  # noqa: E501


        :return: The ip of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this RemoteVpsa.


        :param ip: The ip of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def public(self):
        """Gets the public of this RemoteVpsa.  # noqa: E501


        :return: The public of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this RemoteVpsa.


        :param public: The public of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._public = public

    @property
    def report_failure(self):
        """Gets the report_failure of this RemoteVpsa.  # noqa: E501


        :return: The report_failure of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._report_failure

    @report_failure.setter
    def report_failure(self, report_failure):
        """Sets the report_failure of this RemoteVpsa.


        :param report_failure: The report_failure of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._report_failure = report_failure

    @property
    def vni(self):
        """Gets the vni of this RemoteVpsa.  # noqa: E501


        :return: The vni of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._vni

    @vni.setter
    def vni(self, vni):
        """Sets the vni of this RemoteVpsa.


        :param vni: The vni of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._vni = vni

    @property
    def status(self):
        """Gets the status of this RemoteVpsa.  # noqa: E501


        :return: The status of this RemoteVpsa.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RemoteVpsa.


        :param status: The status of this RemoteVpsa.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def limited_higher_rate_in_kbs(self):
        """Gets the limited_higher_rate_in_kbs of this RemoteVpsa.  # noqa: E501


        :return: The limited_higher_rate_in_kbs of this RemoteVpsa.  # noqa: E501
        :rtype: int
        """
        return self._limited_higher_rate_in_kbs

    @limited_higher_rate_in_kbs.setter
    def limited_higher_rate_in_kbs(self, limited_higher_rate_in_kbs):
        """Sets the limited_higher_rate_in_kbs of this RemoteVpsa.


        :param limited_higher_rate_in_kbs: The limited_higher_rate_in_kbs of this RemoteVpsa.  # noqa: E501
        :type: int
        """

        self._limited_higher_rate_in_kbs = limited_higher_rate_in_kbs

    @property
    def features(self):
        """Gets the features of this RemoteVpsa.  # noqa: E501


        :return: The features of this RemoteVpsa.  # noqa: E501
        :rtype: RemoteVpsaFeatures
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this RemoteVpsa.


        :param features: The features of this RemoteVpsa.  # noqa: E501
        :type: RemoteVpsaFeatures
        """

        self._features = features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoteVpsa, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoteVpsa):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RemoteVpsa):
            return True

        return self.to_dict() != other.to_dict()
