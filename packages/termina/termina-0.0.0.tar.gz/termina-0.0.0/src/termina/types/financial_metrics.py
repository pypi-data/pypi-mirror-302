# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class FinancialMetrics(pydantic_v1.BaseModel):
    date: str = pydantic_v1.Field()
    """
    The date of the financial metrics.
    """

    lifetime_gross_margin: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The lifetime gross margin, integrated over all time.
    """

    lifetime_operating_margin: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The lifetime operating margin, integrated over all time.
    """

    rule_of_40: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The rule of 40, defined as the year over year growth plus the operating margin, with slight smoothing to handle variations.
    """

    magic_number: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The magic number, defined as the revenue growth divided by the offset sales and marketing cost, with slight smoothing to handle variations.
    """

    burn_multiple: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The burn multiple, defined as the cash burn divided by the revenue growth, with slight smoothing to handle variations. The operating margin is used in place of the cash burn if the cash burn is not available. Not defined if the revenue growth is negative.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
