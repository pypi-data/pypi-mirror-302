# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200252ResponseMigrationJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'src_cg_display_name': 'str',
        'src_cg_name': 'str',
        'src_pool_display_name': 'str',
        'dst_cg_name': 'str',
        'dst_pool_display_name': 'str',
        'shipping_display_name': 'str',
        'status': 'str',
        'cur_sync_rate_kb_sec': 'int',
        'shipping_position_mb': 'int',
        'total_capacity_to_migrate_mb': 'int',
        'already_migrated_mb': 'int',
        'remaining_time_seconds': 'int',
        'created_at': 'str',
        'modified_at': 'str',
        'limited_higher_rate_in_kbs': 'str'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'src_cg_display_name': 'src_cg_display_name',
        'src_cg_name': 'src_cg_name',
        'src_pool_display_name': 'src_pool_display_name',
        'dst_cg_name': 'dst_cg_name',
        'dst_pool_display_name': 'dst_pool_display_name',
        'shipping_display_name': 'shipping_display_name',
        'status': 'status',
        'cur_sync_rate_kb_sec': 'cur_sync_rate_kb_sec',
        'shipping_position_mb': 'shipping_position_mb',
        'total_capacity_to_migrate_mb': 'total_capacity_to_migrate_mb',
        'already_migrated_mb': 'already_migrated_mb',
        'remaining_time_seconds': 'remaining_time_seconds',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'limited_higher_rate_in_kbs': 'limited_higher_rate_in_KBS'
    }

    def __init__(self, name=None, display_name=None, src_cg_display_name=None, src_cg_name=None, src_pool_display_name=None, dst_cg_name=None, dst_pool_display_name=None, shipping_display_name=None, status=None, cur_sync_rate_kb_sec=None, shipping_position_mb=None, total_capacity_to_migrate_mb=None, already_migrated_mb=None, remaining_time_seconds=None, created_at=None, modified_at=None, limited_higher_rate_in_kbs=None, _configuration=None):  # noqa: E501
        """InlineResponse200252ResponseMigrationJob - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._src_cg_display_name = None
        self._src_cg_name = None
        self._src_pool_display_name = None
        self._dst_cg_name = None
        self._dst_pool_display_name = None
        self._shipping_display_name = None
        self._status = None
        self._cur_sync_rate_kb_sec = None
        self._shipping_position_mb = None
        self._total_capacity_to_migrate_mb = None
        self._already_migrated_mb = None
        self._remaining_time_seconds = None
        self._created_at = None
        self._modified_at = None
        self._limited_higher_rate_in_kbs = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if src_cg_display_name is not None:
            self.src_cg_display_name = src_cg_display_name
        if src_cg_name is not None:
            self.src_cg_name = src_cg_name
        if src_pool_display_name is not None:
            self.src_pool_display_name = src_pool_display_name
        if dst_cg_name is not None:
            self.dst_cg_name = dst_cg_name
        if dst_pool_display_name is not None:
            self.dst_pool_display_name = dst_pool_display_name
        if shipping_display_name is not None:
            self.shipping_display_name = shipping_display_name
        if status is not None:
            self.status = status
        if cur_sync_rate_kb_sec is not None:
            self.cur_sync_rate_kb_sec = cur_sync_rate_kb_sec
        if shipping_position_mb is not None:
            self.shipping_position_mb = shipping_position_mb
        if total_capacity_to_migrate_mb is not None:
            self.total_capacity_to_migrate_mb = total_capacity_to_migrate_mb
        if already_migrated_mb is not None:
            self.already_migrated_mb = already_migrated_mb
        if remaining_time_seconds is not None:
            self.remaining_time_seconds = remaining_time_seconds
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if limited_higher_rate_in_kbs is not None:
            self.limited_higher_rate_in_kbs = limited_higher_rate_in_kbs

    @property
    def name(self):
        """Gets the name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200252ResponseMigrationJob.


        :param name: The name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse200252ResponseMigrationJob.


        :param display_name: The display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def src_cg_display_name(self):
        """Gets the src_cg_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The src_cg_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._src_cg_display_name

    @src_cg_display_name.setter
    def src_cg_display_name(self, src_cg_display_name):
        """Sets the src_cg_display_name of this InlineResponse200252ResponseMigrationJob.


        :param src_cg_display_name: The src_cg_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._src_cg_display_name = src_cg_display_name

    @property
    def src_cg_name(self):
        """Gets the src_cg_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The src_cg_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._src_cg_name

    @src_cg_name.setter
    def src_cg_name(self, src_cg_name):
        """Sets the src_cg_name of this InlineResponse200252ResponseMigrationJob.


        :param src_cg_name: The src_cg_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._src_cg_name = src_cg_name

    @property
    def src_pool_display_name(self):
        """Gets the src_pool_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The src_pool_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._src_pool_display_name

    @src_pool_display_name.setter
    def src_pool_display_name(self, src_pool_display_name):
        """Sets the src_pool_display_name of this InlineResponse200252ResponseMigrationJob.


        :param src_pool_display_name: The src_pool_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._src_pool_display_name = src_pool_display_name

    @property
    def dst_cg_name(self):
        """Gets the dst_cg_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The dst_cg_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._dst_cg_name

    @dst_cg_name.setter
    def dst_cg_name(self, dst_cg_name):
        """Sets the dst_cg_name of this InlineResponse200252ResponseMigrationJob.


        :param dst_cg_name: The dst_cg_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._dst_cg_name = dst_cg_name

    @property
    def dst_pool_display_name(self):
        """Gets the dst_pool_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The dst_pool_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._dst_pool_display_name

    @dst_pool_display_name.setter
    def dst_pool_display_name(self, dst_pool_display_name):
        """Sets the dst_pool_display_name of this InlineResponse200252ResponseMigrationJob.


        :param dst_pool_display_name: The dst_pool_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._dst_pool_display_name = dst_pool_display_name

    @property
    def shipping_display_name(self):
        """Gets the shipping_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The shipping_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._shipping_display_name

    @shipping_display_name.setter
    def shipping_display_name(self, shipping_display_name):
        """Sets the shipping_display_name of this InlineResponse200252ResponseMigrationJob.


        :param shipping_display_name: The shipping_display_name of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._shipping_display_name = shipping_display_name

    @property
    def status(self):
        """Gets the status of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The status of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200252ResponseMigrationJob.


        :param status: The status of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def cur_sync_rate_kb_sec(self):
        """Gets the cur_sync_rate_kb_sec of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The cur_sync_rate_kb_sec of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: int
        """
        return self._cur_sync_rate_kb_sec

    @cur_sync_rate_kb_sec.setter
    def cur_sync_rate_kb_sec(self, cur_sync_rate_kb_sec):
        """Sets the cur_sync_rate_kb_sec of this InlineResponse200252ResponseMigrationJob.


        :param cur_sync_rate_kb_sec: The cur_sync_rate_kb_sec of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: int
        """

        self._cur_sync_rate_kb_sec = cur_sync_rate_kb_sec

    @property
    def shipping_position_mb(self):
        """Gets the shipping_position_mb of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The shipping_position_mb of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: int
        """
        return self._shipping_position_mb

    @shipping_position_mb.setter
    def shipping_position_mb(self, shipping_position_mb):
        """Sets the shipping_position_mb of this InlineResponse200252ResponseMigrationJob.


        :param shipping_position_mb: The shipping_position_mb of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: int
        """

        self._shipping_position_mb = shipping_position_mb

    @property
    def total_capacity_to_migrate_mb(self):
        """Gets the total_capacity_to_migrate_mb of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The total_capacity_to_migrate_mb of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: int
        """
        return self._total_capacity_to_migrate_mb

    @total_capacity_to_migrate_mb.setter
    def total_capacity_to_migrate_mb(self, total_capacity_to_migrate_mb):
        """Sets the total_capacity_to_migrate_mb of this InlineResponse200252ResponseMigrationJob.


        :param total_capacity_to_migrate_mb: The total_capacity_to_migrate_mb of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: int
        """

        self._total_capacity_to_migrate_mb = total_capacity_to_migrate_mb

    @property
    def already_migrated_mb(self):
        """Gets the already_migrated_mb of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The already_migrated_mb of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: int
        """
        return self._already_migrated_mb

    @already_migrated_mb.setter
    def already_migrated_mb(self, already_migrated_mb):
        """Sets the already_migrated_mb of this InlineResponse200252ResponseMigrationJob.


        :param already_migrated_mb: The already_migrated_mb of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: int
        """

        self._already_migrated_mb = already_migrated_mb

    @property
    def remaining_time_seconds(self):
        """Gets the remaining_time_seconds of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The remaining_time_seconds of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: int
        """
        return self._remaining_time_seconds

    @remaining_time_seconds.setter
    def remaining_time_seconds(self, remaining_time_seconds):
        """Sets the remaining_time_seconds of this InlineResponse200252ResponseMigrationJob.


        :param remaining_time_seconds: The remaining_time_seconds of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: int
        """

        self._remaining_time_seconds = remaining_time_seconds

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The created_at of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200252ResponseMigrationJob.


        :param created_at: The created_at of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InlineResponse200252ResponseMigrationJob.  # noqa: E501


        :return: The modified_at of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InlineResponse200252ResponseMigrationJob.


        :param modified_at: The modified_at of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def limited_higher_rate_in_kbs(self):
        """Gets the limited_higher_rate_in_kbs of this InlineResponse200252ResponseMigrationJob.  # noqa: E501

        Migration job rate limit in KiB/sec. Zero means rate limiting is disabled.  # noqa: E501

        :return: The limited_higher_rate_in_kbs of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :rtype: str
        """
        return self._limited_higher_rate_in_kbs

    @limited_higher_rate_in_kbs.setter
    def limited_higher_rate_in_kbs(self, limited_higher_rate_in_kbs):
        """Sets the limited_higher_rate_in_kbs of this InlineResponse200252ResponseMigrationJob.

        Migration job rate limit in KiB/sec. Zero means rate limiting is disabled.  # noqa: E501

        :param limited_higher_rate_in_kbs: The limited_higher_rate_in_kbs of this InlineResponse200252ResponseMigrationJob.  # noqa: E501
        :type: str
        """

        self._limited_higher_rate_in_kbs = limited_higher_rate_in_kbs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200252ResponseMigrationJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200252ResponseMigrationJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200252ResponseMigrationJob):
            return True

        return self.to_dict() != other.to_dict()
