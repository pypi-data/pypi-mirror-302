# coding: utf-8

"""
    Zadara VPSA Object Storage REST API

    # Overview  This document outlines the methods available for administrating your VPSA&#174; Object Storage. The API supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or through the X-Access-Key header. Alternately, you can use the username and password parameters for authentication, but we do not recommend this method for anything other than possibly retrieving an API key.  By default , all operations are allowed only to VPSA Object Storage admin. Some actions are allowed by an account admin and they will be marked on the action's header  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some time to complete. When using the API, this can cause some actions, such as adding drives to storage policy, to be undesirably asynchronous. You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Metering API  Metering information can be retrieved using the VPSA Object Storage API for the following components:  - Accounts - Users - Drives - Virtual Controllers - Load Balancer Groups - Storage Policies  Metering information returned by the API is subject to the following constraints:  - 10 seconds interval - 1 hour range - 1 minute interval - 1 day range - 1 hour interval - 30 days range  Values outside the accepted range will be returned as 0.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Zios.configuration import Configuration


class InlineResponse20033Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'name': 'str',
        'uuid': 'str',
        'display_name': 'str',
        'url': 'str',
        'auth_service_url': 'str',
        'version': 'str',
        'language': 'str',
        'multi_zone': 'str',
        'floating_fe_ip': 'str',
        'floating_fe_ipv6': 'str',
        'fe_cidr': 'int',
        'fe_ipv6_cidr': 'str',
        'fe_vlan': 'int',
        'fe_gateway': 'str',
        'fe_ipv6_gateway': 'str',
        'floating_be_ip': 'str',
        'publicip': 'str',
        'auto_scale': 'str',
        'billing_unit': 'str',
        'upload_rate_per_gb': 'str',
        'download_rate_per_gb': 'str',
        'api_ip': 'str',
        'api_hostname': 'str',
        'zswift_ratelimit_enabled': 'str',
        'zswift_ratelimit': 'str',
        'vhs_state': 'str',
        'admin_access_enabled': 'str',
        'allow_tenant_name_in_url': 'str',
        'token_expiry': 'str',
        'policy_action': 'str',
        'zios_upgrade': 'str',
        'ssl_termination': 'str',
        'created_at': 'str',
        'modified_at': 'str',
        'expire_password': 'str',
        'expire_password_after': 'str',
        'password_history': 'str'
    }

    attribute_map = {
        'message': 'message',
        'name': 'name',
        'uuid': 'uuid',
        'display_name': 'display_name',
        'url': 'url',
        'auth_service_url': 'auth_service_url',
        'version': 'version',
        'language': 'language',
        'multi_zone': 'multi-zone',
        'floating_fe_ip': 'floating_fe_ip',
        'floating_fe_ipv6': 'floating_fe_ipv6',
        'fe_cidr': 'fe_cidr',
        'fe_ipv6_cidr': 'fe_ipv6_cidr',
        'fe_vlan': 'fe_vlan',
        'fe_gateway': 'fe_gateway',
        'fe_ipv6_gateway': 'fe_ipv6_gateway',
        'floating_be_ip': 'floating_be_ip',
        'publicip': 'publicip',
        'auto_scale': 'auto_scale',
        'billing_unit': 'billing_unit',
        'upload_rate_per_gb': 'upload_rate_per_gb',
        'download_rate_per_gb': 'download_rate_per_gb',
        'api_ip': 'api_ip',
        'api_hostname': 'api_hostname',
        'zswift_ratelimit_enabled': 'zswift_ratelimit_enabled',
        'zswift_ratelimit': 'zswift_ratelimit',
        'vhs_state': 'vhs_state',
        'admin_access_enabled': 'admin_access_enabled',
        'allow_tenant_name_in_url': 'allow_tenant_name_in_url',
        'token_expiry': 'token_expiry',
        'policy_action': 'policy_action',
        'zios_upgrade': 'zios_upgrade',
        'ssl_termination': 'ssl_termination',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'expire_password': 'expire_password',
        'expire_password_after': 'expire_password_after',
        'password_history': 'password_history'
    }

    def __init__(self, message=None, name=None, uuid=None, display_name=None, url=None, auth_service_url=None, version=None, language=None, multi_zone=None, floating_fe_ip=None, floating_fe_ipv6=None, fe_cidr=None, fe_ipv6_cidr=None, fe_vlan=None, fe_gateway=None, fe_ipv6_gateway=None, floating_be_ip=None, publicip=None, auto_scale=None, billing_unit=None, upload_rate_per_gb=None, download_rate_per_gb=None, api_ip=None, api_hostname=None, zswift_ratelimit_enabled=None, zswift_ratelimit=None, vhs_state=None, admin_access_enabled=None, allow_tenant_name_in_url=None, token_expiry=None, policy_action=None, zios_upgrade=None, ssl_termination=None, created_at=None, modified_at=None, expire_password=None, expire_password_after=None, password_history=None, _configuration=None):  # noqa: E501
        """InlineResponse20033Response - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._name = None
        self._uuid = None
        self._display_name = None
        self._url = None
        self._auth_service_url = None
        self._version = None
        self._language = None
        self._multi_zone = None
        self._floating_fe_ip = None
        self._floating_fe_ipv6 = None
        self._fe_cidr = None
        self._fe_ipv6_cidr = None
        self._fe_vlan = None
        self._fe_gateway = None
        self._fe_ipv6_gateway = None
        self._floating_be_ip = None
        self._publicip = None
        self._auto_scale = None
        self._billing_unit = None
        self._upload_rate_per_gb = None
        self._download_rate_per_gb = None
        self._api_ip = None
        self._api_hostname = None
        self._zswift_ratelimit_enabled = None
        self._zswift_ratelimit = None
        self._vhs_state = None
        self._admin_access_enabled = None
        self._allow_tenant_name_in_url = None
        self._token_expiry = None
        self._policy_action = None
        self._zios_upgrade = None
        self._ssl_termination = None
        self._created_at = None
        self._modified_at = None
        self._expire_password = None
        self._expire_password_after = None
        self._password_history = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if uuid is not None:
            self.uuid = uuid
        if display_name is not None:
            self.display_name = display_name
        if url is not None:
            self.url = url
        if auth_service_url is not None:
            self.auth_service_url = auth_service_url
        if version is not None:
            self.version = version
        if language is not None:
            self.language = language
        if multi_zone is not None:
            self.multi_zone = multi_zone
        if floating_fe_ip is not None:
            self.floating_fe_ip = floating_fe_ip
        if floating_fe_ipv6 is not None:
            self.floating_fe_ipv6 = floating_fe_ipv6
        if fe_cidr is not None:
            self.fe_cidr = fe_cidr
        if fe_ipv6_cidr is not None:
            self.fe_ipv6_cidr = fe_ipv6_cidr
        if fe_vlan is not None:
            self.fe_vlan = fe_vlan
        if fe_gateway is not None:
            self.fe_gateway = fe_gateway
        if fe_ipv6_gateway is not None:
            self.fe_ipv6_gateway = fe_ipv6_gateway
        if floating_be_ip is not None:
            self.floating_be_ip = floating_be_ip
        if publicip is not None:
            self.publicip = publicip
        if auto_scale is not None:
            self.auto_scale = auto_scale
        if billing_unit is not None:
            self.billing_unit = billing_unit
        if upload_rate_per_gb is not None:
            self.upload_rate_per_gb = upload_rate_per_gb
        if download_rate_per_gb is not None:
            self.download_rate_per_gb = download_rate_per_gb
        if api_ip is not None:
            self.api_ip = api_ip
        if api_hostname is not None:
            self.api_hostname = api_hostname
        if zswift_ratelimit_enabled is not None:
            self.zswift_ratelimit_enabled = zswift_ratelimit_enabled
        if zswift_ratelimit is not None:
            self.zswift_ratelimit = zswift_ratelimit
        if vhs_state is not None:
            self.vhs_state = vhs_state
        if admin_access_enabled is not None:
            self.admin_access_enabled = admin_access_enabled
        if allow_tenant_name_in_url is not None:
            self.allow_tenant_name_in_url = allow_tenant_name_in_url
        if token_expiry is not None:
            self.token_expiry = token_expiry
        if policy_action is not None:
            self.policy_action = policy_action
        if zios_upgrade is not None:
            self.zios_upgrade = zios_upgrade
        if ssl_termination is not None:
            self.ssl_termination = ssl_termination
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if expire_password is not None:
            self.expire_password = expire_password
        if expire_password_after is not None:
            self.expire_password_after = expire_password_after
        if password_history is not None:
            self.password_history = password_history

    @property
    def message(self):
        """Gets the message of this InlineResponse20033Response.  # noqa: E501


        :return: The message of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse20033Response.


        :param message: The message of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this InlineResponse20033Response.  # noqa: E501


        :return: The name of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20033Response.


        :param name: The name of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this InlineResponse20033Response.  # noqa: E501


        :return: The uuid of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this InlineResponse20033Response.


        :param uuid: The uuid of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse20033Response.  # noqa: E501


        :return: The display_name of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse20033Response.


        :param display_name: The display_name of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def url(self):
        """Gets the url of this InlineResponse20033Response.  # noqa: E501


        :return: The url of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse20033Response.


        :param url: The url of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def auth_service_url(self):
        """Gets the auth_service_url of this InlineResponse20033Response.  # noqa: E501


        :return: The auth_service_url of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._auth_service_url

    @auth_service_url.setter
    def auth_service_url(self, auth_service_url):
        """Sets the auth_service_url of this InlineResponse20033Response.


        :param auth_service_url: The auth_service_url of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._auth_service_url = auth_service_url

    @property
    def version(self):
        """Gets the version of this InlineResponse20033Response.  # noqa: E501


        :return: The version of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse20033Response.


        :param version: The version of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def language(self):
        """Gets the language of this InlineResponse20033Response.  # noqa: E501


        :return: The language of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this InlineResponse20033Response.


        :param language: The language of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def multi_zone(self):
        """Gets the multi_zone of this InlineResponse20033Response.  # noqa: E501


        :return: The multi_zone of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._multi_zone

    @multi_zone.setter
    def multi_zone(self, multi_zone):
        """Sets the multi_zone of this InlineResponse20033Response.


        :param multi_zone: The multi_zone of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._multi_zone = multi_zone

    @property
    def floating_fe_ip(self):
        """Gets the floating_fe_ip of this InlineResponse20033Response.  # noqa: E501


        :return: The floating_fe_ip of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._floating_fe_ip

    @floating_fe_ip.setter
    def floating_fe_ip(self, floating_fe_ip):
        """Sets the floating_fe_ip of this InlineResponse20033Response.


        :param floating_fe_ip: The floating_fe_ip of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._floating_fe_ip = floating_fe_ip

    @property
    def floating_fe_ipv6(self):
        """Gets the floating_fe_ipv6 of this InlineResponse20033Response.  # noqa: E501


        :return: The floating_fe_ipv6 of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._floating_fe_ipv6

    @floating_fe_ipv6.setter
    def floating_fe_ipv6(self, floating_fe_ipv6):
        """Sets the floating_fe_ipv6 of this InlineResponse20033Response.


        :param floating_fe_ipv6: The floating_fe_ipv6 of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._floating_fe_ipv6 = floating_fe_ipv6

    @property
    def fe_cidr(self):
        """Gets the fe_cidr of this InlineResponse20033Response.  # noqa: E501


        :return: The fe_cidr of this InlineResponse20033Response.  # noqa: E501
        :rtype: int
        """
        return self._fe_cidr

    @fe_cidr.setter
    def fe_cidr(self, fe_cidr):
        """Sets the fe_cidr of this InlineResponse20033Response.


        :param fe_cidr: The fe_cidr of this InlineResponse20033Response.  # noqa: E501
        :type: int
        """

        self._fe_cidr = fe_cidr

    @property
    def fe_ipv6_cidr(self):
        """Gets the fe_ipv6_cidr of this InlineResponse20033Response.  # noqa: E501


        :return: The fe_ipv6_cidr of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._fe_ipv6_cidr

    @fe_ipv6_cidr.setter
    def fe_ipv6_cidr(self, fe_ipv6_cidr):
        """Sets the fe_ipv6_cidr of this InlineResponse20033Response.


        :param fe_ipv6_cidr: The fe_ipv6_cidr of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._fe_ipv6_cidr = fe_ipv6_cidr

    @property
    def fe_vlan(self):
        """Gets the fe_vlan of this InlineResponse20033Response.  # noqa: E501


        :return: The fe_vlan of this InlineResponse20033Response.  # noqa: E501
        :rtype: int
        """
        return self._fe_vlan

    @fe_vlan.setter
    def fe_vlan(self, fe_vlan):
        """Sets the fe_vlan of this InlineResponse20033Response.


        :param fe_vlan: The fe_vlan of this InlineResponse20033Response.  # noqa: E501
        :type: int
        """

        self._fe_vlan = fe_vlan

    @property
    def fe_gateway(self):
        """Gets the fe_gateway of this InlineResponse20033Response.  # noqa: E501


        :return: The fe_gateway of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._fe_gateway

    @fe_gateway.setter
    def fe_gateway(self, fe_gateway):
        """Sets the fe_gateway of this InlineResponse20033Response.


        :param fe_gateway: The fe_gateway of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._fe_gateway = fe_gateway

    @property
    def fe_ipv6_gateway(self):
        """Gets the fe_ipv6_gateway of this InlineResponse20033Response.  # noqa: E501


        :return: The fe_ipv6_gateway of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._fe_ipv6_gateway

    @fe_ipv6_gateway.setter
    def fe_ipv6_gateway(self, fe_ipv6_gateway):
        """Sets the fe_ipv6_gateway of this InlineResponse20033Response.


        :param fe_ipv6_gateway: The fe_ipv6_gateway of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._fe_ipv6_gateway = fe_ipv6_gateway

    @property
    def floating_be_ip(self):
        """Gets the floating_be_ip of this InlineResponse20033Response.  # noqa: E501


        :return: The floating_be_ip of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._floating_be_ip

    @floating_be_ip.setter
    def floating_be_ip(self, floating_be_ip):
        """Sets the floating_be_ip of this InlineResponse20033Response.


        :param floating_be_ip: The floating_be_ip of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._floating_be_ip = floating_be_ip

    @property
    def publicip(self):
        """Gets the publicip of this InlineResponse20033Response.  # noqa: E501


        :return: The publicip of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._publicip

    @publicip.setter
    def publicip(self, publicip):
        """Sets the publicip of this InlineResponse20033Response.


        :param publicip: The publicip of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._publicip = publicip

    @property
    def auto_scale(self):
        """Gets the auto_scale of this InlineResponse20033Response.  # noqa: E501


        :return: The auto_scale of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._auto_scale

    @auto_scale.setter
    def auto_scale(self, auto_scale):
        """Sets the auto_scale of this InlineResponse20033Response.


        :param auto_scale: The auto_scale of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._auto_scale = auto_scale

    @property
    def billing_unit(self):
        """Gets the billing_unit of this InlineResponse20033Response.  # noqa: E501


        :return: The billing_unit of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._billing_unit

    @billing_unit.setter
    def billing_unit(self, billing_unit):
        """Sets the billing_unit of this InlineResponse20033Response.


        :param billing_unit: The billing_unit of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._billing_unit = billing_unit

    @property
    def upload_rate_per_gb(self):
        """Gets the upload_rate_per_gb of this InlineResponse20033Response.  # noqa: E501


        :return: The upload_rate_per_gb of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._upload_rate_per_gb

    @upload_rate_per_gb.setter
    def upload_rate_per_gb(self, upload_rate_per_gb):
        """Sets the upload_rate_per_gb of this InlineResponse20033Response.


        :param upload_rate_per_gb: The upload_rate_per_gb of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._upload_rate_per_gb = upload_rate_per_gb

    @property
    def download_rate_per_gb(self):
        """Gets the download_rate_per_gb of this InlineResponse20033Response.  # noqa: E501


        :return: The download_rate_per_gb of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._download_rate_per_gb

    @download_rate_per_gb.setter
    def download_rate_per_gb(self, download_rate_per_gb):
        """Sets the download_rate_per_gb of this InlineResponse20033Response.


        :param download_rate_per_gb: The download_rate_per_gb of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._download_rate_per_gb = download_rate_per_gb

    @property
    def api_ip(self):
        """Gets the api_ip of this InlineResponse20033Response.  # noqa: E501


        :return: The api_ip of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._api_ip

    @api_ip.setter
    def api_ip(self, api_ip):
        """Sets the api_ip of this InlineResponse20033Response.


        :param api_ip: The api_ip of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._api_ip = api_ip

    @property
    def api_hostname(self):
        """Gets the api_hostname of this InlineResponse20033Response.  # noqa: E501


        :return: The api_hostname of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._api_hostname

    @api_hostname.setter
    def api_hostname(self, api_hostname):
        """Sets the api_hostname of this InlineResponse20033Response.


        :param api_hostname: The api_hostname of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._api_hostname = api_hostname

    @property
    def zswift_ratelimit_enabled(self):
        """Gets the zswift_ratelimit_enabled of this InlineResponse20033Response.  # noqa: E501


        :return: The zswift_ratelimit_enabled of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._zswift_ratelimit_enabled

    @zswift_ratelimit_enabled.setter
    def zswift_ratelimit_enabled(self, zswift_ratelimit_enabled):
        """Sets the zswift_ratelimit_enabled of this InlineResponse20033Response.


        :param zswift_ratelimit_enabled: The zswift_ratelimit_enabled of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._zswift_ratelimit_enabled = zswift_ratelimit_enabled

    @property
    def zswift_ratelimit(self):
        """Gets the zswift_ratelimit of this InlineResponse20033Response.  # noqa: E501


        :return: The zswift_ratelimit of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._zswift_ratelimit

    @zswift_ratelimit.setter
    def zswift_ratelimit(self, zswift_ratelimit):
        """Sets the zswift_ratelimit of this InlineResponse20033Response.


        :param zswift_ratelimit: The zswift_ratelimit of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._zswift_ratelimit = zswift_ratelimit

    @property
    def vhs_state(self):
        """Gets the vhs_state of this InlineResponse20033Response.  # noqa: E501


        :return: The vhs_state of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._vhs_state

    @vhs_state.setter
    def vhs_state(self, vhs_state):
        """Sets the vhs_state of this InlineResponse20033Response.


        :param vhs_state: The vhs_state of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._vhs_state = vhs_state

    @property
    def admin_access_enabled(self):
        """Gets the admin_access_enabled of this InlineResponse20033Response.  # noqa: E501


        :return: The admin_access_enabled of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._admin_access_enabled

    @admin_access_enabled.setter
    def admin_access_enabled(self, admin_access_enabled):
        """Sets the admin_access_enabled of this InlineResponse20033Response.


        :param admin_access_enabled: The admin_access_enabled of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._admin_access_enabled = admin_access_enabled

    @property
    def allow_tenant_name_in_url(self):
        """Gets the allow_tenant_name_in_url of this InlineResponse20033Response.  # noqa: E501


        :return: The allow_tenant_name_in_url of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._allow_tenant_name_in_url

    @allow_tenant_name_in_url.setter
    def allow_tenant_name_in_url(self, allow_tenant_name_in_url):
        """Sets the allow_tenant_name_in_url of this InlineResponse20033Response.


        :param allow_tenant_name_in_url: The allow_tenant_name_in_url of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._allow_tenant_name_in_url = allow_tenant_name_in_url

    @property
    def token_expiry(self):
        """Gets the token_expiry of this InlineResponse20033Response.  # noqa: E501


        :return: The token_expiry of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._token_expiry

    @token_expiry.setter
    def token_expiry(self, token_expiry):
        """Sets the token_expiry of this InlineResponse20033Response.


        :param token_expiry: The token_expiry of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._token_expiry = token_expiry

    @property
    def policy_action(self):
        """Gets the policy_action of this InlineResponse20033Response.  # noqa: E501


        :return: The policy_action of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._policy_action

    @policy_action.setter
    def policy_action(self, policy_action):
        """Sets the policy_action of this InlineResponse20033Response.


        :param policy_action: The policy_action of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._policy_action = policy_action

    @property
    def zios_upgrade(self):
        """Gets the zios_upgrade of this InlineResponse20033Response.  # noqa: E501


        :return: The zios_upgrade of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._zios_upgrade

    @zios_upgrade.setter
    def zios_upgrade(self, zios_upgrade):
        """Sets the zios_upgrade of this InlineResponse20033Response.


        :param zios_upgrade: The zios_upgrade of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._zios_upgrade = zios_upgrade

    @property
    def ssl_termination(self):
        """Gets the ssl_termination of this InlineResponse20033Response.  # noqa: E501


        :return: The ssl_termination of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._ssl_termination

    @ssl_termination.setter
    def ssl_termination(self, ssl_termination):
        """Sets the ssl_termination of this InlineResponse20033Response.


        :param ssl_termination: The ssl_termination of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._ssl_termination = ssl_termination

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20033Response.  # noqa: E501


        :return: The created_at of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20033Response.


        :param created_at: The created_at of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InlineResponse20033Response.  # noqa: E501


        :return: The modified_at of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InlineResponse20033Response.


        :param modified_at: The modified_at of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def expire_password(self):
        """Gets the expire_password of this InlineResponse20033Response.  # noqa: E501


        :return: The expire_password of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._expire_password

    @expire_password.setter
    def expire_password(self, expire_password):
        """Sets the expire_password of this InlineResponse20033Response.


        :param expire_password: The expire_password of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._expire_password = expire_password

    @property
    def expire_password_after(self):
        """Gets the expire_password_after of this InlineResponse20033Response.  # noqa: E501


        :return: The expire_password_after of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._expire_password_after

    @expire_password_after.setter
    def expire_password_after(self, expire_password_after):
        """Sets the expire_password_after of this InlineResponse20033Response.


        :param expire_password_after: The expire_password_after of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._expire_password_after = expire_password_after

    @property
    def password_history(self):
        """Gets the password_history of this InlineResponse20033Response.  # noqa: E501


        :return: The password_history of this InlineResponse20033Response.  # noqa: E501
        :rtype: str
        """
        return self._password_history

    @password_history.setter
    def password_history(self, password_history):
        """Sets the password_history of this InlineResponse20033Response.


        :param password_history: The password_history of this InlineResponse20033Response.  # noqa: E501
        :type: str
        """

        self._password_history = password_history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20033Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20033Response):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20033Response):
            return True

        return self.to_dict() != other.to_dict()
