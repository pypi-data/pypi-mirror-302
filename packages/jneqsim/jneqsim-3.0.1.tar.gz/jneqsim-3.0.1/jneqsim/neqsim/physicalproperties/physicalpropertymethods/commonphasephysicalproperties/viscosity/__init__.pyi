
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import neqsim
import jneqsim.neqsim.physicalproperties.physicalpropertysystem
import jneqsim.neqsim.thermo
import typing



class FrictionTheoryViscosityMethod(jneqsim.neqsim.physicalproperties.physicalpropertymethods.commonphasephysicalproperties.viscosity.Viscosity, jneqsim.neqsim.thermo.ThermodynamicConstantsInterface):
    pureComponentViscosity: typing.MutableSequence[float] = ...
    Fc: typing.MutableSequence[float] = ...
    omegaVisc: typing.MutableSequence[float] = ...
    def __init__(self, physicalPropertiesInterface: jneqsim.neqsim.physicalproperties.physicalpropertysystem.PhysicalPropertiesInterface): ...
    def calcViscosity(self) -> float: ...
    def getPureComponentViscosity(self, int: int) -> float: ...
    def getRedKapa(self, int: int, double: float, double2: float) -> float: ...
    def getRedKapr(self, int: int, double: float, double2: float) -> float: ...
    def getRedKaprr(self, int: int, double: float, double2: float) -> float: ...
    def getTBPviscosityCorrection(self) -> float: ...
    def initChungPureComponentViscosity(self) -> None: ...
    def setTBPviscosityCorrection(self, double: float) -> None: ...
    def tuneModel(self, double: float, double2: float, double3: float) -> None: ...

class LBCViscosityMethod(jneqsim.neqsim.physicalproperties.physicalpropertymethods.commonphasephysicalproperties.viscosity.Viscosity):
    def __init__(self, physicalPropertiesInterface: jneqsim.neqsim.physicalproperties.physicalpropertysystem.PhysicalPropertiesInterface): ...
    def calcViscosity(self) -> float: ...
    def getPureComponentViscosity(self, int: int) -> float: ...

class PFCTViscosityMethod(jneqsim.neqsim.physicalproperties.physicalpropertymethods.commonphasephysicalproperties.viscosity.Viscosity):
    def __init__(self, physicalPropertiesInterface: jneqsim.neqsim.physicalproperties.physicalpropertysystem.PhysicalPropertiesInterface): ...
    def calcViscosity(self) -> float: ...
    def getPureComponentViscosity(self, int: int) -> float: ...
    def getRefComponentViscosity(self, double: float, double2: float) -> float: ...

class PFCTViscosityMethodHeavyOil(jneqsim.neqsim.physicalproperties.physicalpropertymethods.commonphasephysicalproperties.viscosity.Viscosity):
    def __init__(self, physicalPropertiesInterface: jneqsim.neqsim.physicalproperties.physicalpropertysystem.PhysicalPropertiesInterface): ...
    def calcViscosity(self) -> float: ...
    def getRefComponentViscosity(self, double: float, double2: float) -> float: ...

class PFCTViscosityMethodMod86(jneqsim.neqsim.physicalproperties.physicalpropertymethods.commonphasephysicalproperties.viscosity.Viscosity):
    def __init__(self, physicalPropertiesInterface: jneqsim.neqsim.physicalproperties.physicalpropertysystem.PhysicalPropertiesInterface): ...
    def calcViscosity(self) -> float: ...
    def getRefComponentViscosity(self, double: float, double2: float) -> float: ...

class Viscosity: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.physicalproperties.physicalpropertymethods.commonphasephysicalproperties.viscosity")``.

    FrictionTheoryViscosityMethod: typing.Type[FrictionTheoryViscosityMethod]
    LBCViscosityMethod: typing.Type[LBCViscosityMethod]
    PFCTViscosityMethod: typing.Type[PFCTViscosityMethod]
    PFCTViscosityMethodHeavyOil: typing.Type[PFCTViscosityMethodHeavyOil]
    PFCTViscosityMethodMod86: typing.Type[PFCTViscosityMethodMod86]
    Viscosity: typing.Type[Viscosity]
