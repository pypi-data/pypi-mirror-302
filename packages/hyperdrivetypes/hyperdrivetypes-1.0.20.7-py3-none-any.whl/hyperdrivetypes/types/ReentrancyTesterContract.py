"""A web3.py Contract class for the ReentrancyTester contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import dataclass_to_tuple, rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}


class ReentrancyTesterIsSuccessContractFunction(ContractFunction):
    """ContractFunction for the isSuccess method."""

    def __call__(self) -> ReentrancyTesterIsSuccessContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class ReentrancyTesterSetDataContractFunction(ContractFunction):
    """ContractFunction for the setData method."""

    def __call__(self, data_: bytes) -> ReentrancyTesterSetDataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(data_))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ReentrancyTesterSetTargetContractFunction(ContractFunction):
    """ContractFunction for the setTarget method."""

    def __call__(self, target_: str) -> ReentrancyTesterSetTargetContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(target_))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ReentrancyTesterContractFunctions(ContractFunctions):
    """ContractFunctions for the ReentrancyTester contract."""

    isSuccess: ReentrancyTesterIsSuccessContractFunction

    setData: ReentrancyTesterSetDataContractFunction

    setTarget: ReentrancyTesterSetTargetContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.isSuccess = ReentrancyTesterIsSuccessContractFunction.factory(
            "isSuccess",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="isSuccess",
        )
        self.setData = ReentrancyTesterSetDataContractFunction.factory(
            "setData",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setData",
        )
        self.setTarget = ReentrancyTesterSetTargetContractFunction.factory(
            "setTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setTarget",
        )


reentrancytester_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "isSuccess",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setData",
            "inputs": [
                {"name": "_data_", "type": "bytes", "internalType": "bytes"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setTarget",
            "inputs": [
                {
                    "name": "_target_",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
    ],
)


class ReentrancyTesterContract(Contract):
    """A web3.py Contract class for the ReentrancyTester contract."""

    abi: ABI = reentrancytester_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b506102f2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630b6c754b14610046578063776d1a0114610067578063ab62f0e114610099575b600080fd5b6002546100539060ff1681565b604051901515815260200160405180910390f35b6100976100753660046100b9565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b005b6100976100a73660046100e9565b60016100b48284836101fb565b505050565b6000602082840312156100cb57600080fd5b81356001600160a01b03811681146100e257600080fd5b9392505050565b600080602083850312156100fc57600080fd5b823567ffffffffffffffff8082111561011457600080fd5b818501915085601f83011261012857600080fd5b81358181111561013757600080fd5b86602082850101111561014957600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061018557607f821691505b6020821081036101a557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100b4576000816000526020600020601f850160051c810160208610156101d45750805b601f850160051c820191505b818110156101f3578281556001016101e0565b505050505050565b67ffffffffffffffff8311156102135761021361015b565b610227836102218354610171565b836101ab565b6000601f84116001811461025b57600085156102435750838201355b600019600387901b1c1916600186901b1783556102b5565b600083815260209020601f19861690835b8281101561028c578685013582556020948501946001909201910161026c565b50868210156102a95760001960f88860031b161c19848701351681555b505060018560011b0183555b505050505056fea264697066735822122052f2ad98b764a7bfb039ae798c8f0c92792ef9371027add0c03a056c431dd1f364736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = ReentrancyTesterContractFunctions(reentrancytester_abi, self.w3, address)  # type: ignore

    functions: ReentrancyTesterContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ReentrancyTesterContractFunctions(
            reentrancytester_abi, w3, None
        )

        return contract
