import yaml
from _typeshed import Incomplete
from collections.abc import Generator
from dataclasses import dataclass

MISSING_CONFIG_MSG: str
ENV: Incomplete

class ConfigObj:
    def __getattr__(self, name) -> None: ...
    def __getattribute__(self, name): ...
    def __iter__(self): ...

class ConfigDict(dict):
    def __getitem__(self, key): ...

class Loader(yaml.FullLoader):
    def construct_yaml_map(self, node) -> Generator[Incomplete, None, None]: ...

@dataclass(repr=False)
class ChainConfig(ConfigObj):
    name: str = ...
    id: str = ...
    coingecko_name: str = ...
    denom: str = ...
    denom_decimals: int = ...
    inflation_frequency_hours: int = ...
    ticker: str = ...
    stride_token_hash: str = ...
    api_endpoint: str = ...
    rpc_endpoint: str = ...
    library_api: str = ...
    library_rpc: str = ...
    def __init__(self, name=..., id=..., coingecko_name=..., denom=..., denom_decimals=..., inflation_frequency_hours=..., ticker=..., stride_token_hash=..., api_endpoint=..., rpc_endpoint=..., library_api=..., library_rpc=...) -> None: ...

@dataclass(repr=False)
class HostZoneChainConfig(ConfigObj):
    cosmoshub: ChainConfig = ...
    osmosis: ChainConfig = ...
    evmos: ChainConfig = ...
    injective: ChainConfig = ...
    juno: ChainConfig = ...
    stargaze: ChainConfig = ...
    terra: ChainConfig = ...
    umee: ChainConfig = ...
    comdex: ChainConfig = ...
    sommelier: ChainConfig = ...
    dydx: ChainConfig = ...
    saga: ChainConfig = ...
    def __init__(self, cosmoshub=..., osmosis=..., evmos=..., injective=..., juno=..., stargaze=..., terra=..., umee=..., comdex=..., sommelier=..., dydx=..., saga=...) -> None: ...

@dataclass(repr=False)
class AppConfig(ConfigObj):
    neutron: ChainConfig = ...
    kava: ChainConfig = ...
    iris: ChainConfig = ...
    akash: ChainConfig = ...
    sentinel: ChainConfig = ...
    persistence: ChainConfig = ...
    cryptoorg: ChainConfig = ...
    kichain: ChainConfig = ...
    bitcanna: ChainConfig = ...
    regen: ChainConfig = ...
    gravity: ChainConfig = ...
    desmos: ChainConfig = ...
    chihuahua: ChainConfig = ...
    secret: ChainConfig = ...
    axelar: ChainConfig = ...
    crescent: ChainConfig = ...
    mantle: ChainConfig = ...
    mars: ChainConfig = ...
    canto: ChainConfig = ...
    agoric: ChainConfig = ...
    celestia: ChainConfig = ...
    dymension: ChainConfig = ...
    def __init__(self, neutron=..., kava=..., iris=..., akash=..., sentinel=..., persistence=..., cryptoorg=..., kichain=..., bitcanna=..., regen=..., gravity=..., desmos=..., chihuahua=..., secret=..., axelar=..., crescent=..., mantle=..., mars=..., canto=..., agoric=..., celestia=..., dymension=...) -> None: ...

@dataclass(repr=False)
class Config(ConfigObj):
    ENV: str
    timezone: str = ...
    TWILIO_ALERTS_NUMBER: str = ...
    TWILIO_ACCOUNT_ID: str = ...
    TWILIO_API_TOKEN: str = ...
    PHONE_NUMBERS: ConfigDict = ...
    STRIDEBOT_API_TOKEN: str = ...
    PUBLICSHEETS_AUTH: str | ConfigDict = ...
    COINGECKO_API_TOKEN: str = ...
    PROTOCOL_STAKING_API_TOKEN: str = ...
    alerts_playbook: str = ...
    slack_channels: ConfigDict = ...
    UPSTASH_PUBLIC_PASSWORD: str = ...
    UPSTASH_STRIDE_FRONTEND_PASSWORD: str = ...
    UPSTASH_STRIDE_BACKEND_PASSWORD: str = ...
    UPSTASH_STRIDE_DYDX_PUBLIC_PASSWORD: str = ...
    SLACK_BEARER_TOKEN: str = ...
    SLACK_SUCCESS_CHANNEL_ID: str = ...
    SLACK_INVARIANT_FAILURE_CHANNEL_ID: str = ...
    SLACK_PACKET_FAILURE_CHANNEL_ID: str = ...
    NUMIA_API_TOKEN: str = ...
    founders: list[str] = ...
    stride: ChainConfig = ...
    host_zones: HostZoneChainConfig = ...
    app_chains: AppConfig = ...
    def __post_init__(self) -> None: ...
    def get_chain(self, name: str | None = None, id: str | None = None, ticker: str | None = None, denom: str | None = None, stride_token_hash: str | None = None) -> ChainConfig: ...
    def __init__(self, ENV, timezone=..., TWILIO_ALERTS_NUMBER=..., TWILIO_ACCOUNT_ID=..., TWILIO_API_TOKEN=..., PHONE_NUMBERS=..., STRIDEBOT_API_TOKEN=..., PUBLICSHEETS_AUTH=..., COINGECKO_API_TOKEN=..., PROTOCOL_STAKING_API_TOKEN=..., alerts_playbook=..., slack_channels=..., UPSTASH_PUBLIC_PASSWORD=..., UPSTASH_STRIDE_FRONTEND_PASSWORD=..., UPSTASH_STRIDE_BACKEND_PASSWORD=..., UPSTASH_STRIDE_DYDX_PUBLIC_PASSWORD=..., SLACK_BEARER_TOKEN=..., SLACK_SUCCESS_CHANNEL_ID=..., SLACK_INVARIANT_FAILURE_CHANNEL_ID=..., SLACK_PACKET_FAILURE_CHANNEL_ID=..., NUMIA_API_TOKEN=..., founders=..., stride=..., host_zones=..., app_chains=...) -> None: ...

config: Config
