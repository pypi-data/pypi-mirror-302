# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class ResumeBrokenMirror(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'displayname': 'str',
        'policy': 'str',
        'dedupe': 'str',
        'compress': 'str',
        'wanoptimization': 'str',
        'snapname': 'str',
        'remote_snapname': 'str',
        'force': 'str'
    }

    attribute_map = {
        'displayname': 'displayname',
        'policy': 'policy',
        'dedupe': 'dedupe',
        'compress': 'compress',
        'wanoptimization': 'wanoptimization',
        'snapname': 'snapname',
        'remote_snapname': 'remote_snapname',
        'force': 'force'
    }

    def __init__(self, displayname=None, policy=None, dedupe=None, compress=None, wanoptimization=None, snapname=None, remote_snapname=None, force=None, _configuration=None):  # noqa: E501
        """ResumeBrokenMirror - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._displayname = None
        self._policy = None
        self._dedupe = None
        self._compress = None
        self._wanoptimization = None
        self._snapname = None
        self._remote_snapname = None
        self._force = None
        self.discriminator = None

        self.displayname = displayname
        self.policy = policy
        if dedupe is not None:
            self.dedupe = dedupe
        if compress is not None:
            self.compress = compress
        self.wanoptimization = wanoptimization
        self.snapname = snapname
        self.remote_snapname = remote_snapname
        if force is not None:
            self.force = force

    @property
    def displayname(self):
        """Gets the displayname of this ResumeBrokenMirror.  # noqa: E501

        Display name for resumed mirror.  # noqa: E501

        :return: The displayname of this ResumeBrokenMirror.  # noqa: E501
        :rtype: str
        """
        return self._displayname

    @displayname.setter
    def displayname(self, displayname):
        """Sets the displayname of this ResumeBrokenMirror.

        Display name for resumed mirror.  # noqa: E501

        :param displayname: The displayname of this ResumeBrokenMirror.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and displayname is None:
            raise ValueError("Invalid value for `displayname`, must not be `None`")  # noqa: E501

        self._displayname = displayname

    @property
    def policy(self):
        """Gets the policy of this ResumeBrokenMirror.  # noqa: E501

        Policy ID  # noqa: E501

        :return: The policy of this ResumeBrokenMirror.  # noqa: E501
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ResumeBrokenMirror.

        Policy ID  # noqa: E501

        :param policy: The policy of this ResumeBrokenMirror.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                policy is not None and not re.search(r'^policy-[0-9a-f]{8}$', policy)):  # noqa: E501
            raise ValueError(r"Invalid value for `policy`, must be a follow pattern or equal to `/^policy-[0-9a-f]{8}$/`")  # noqa: E501

        self._policy = policy

    @property
    def dedupe(self):
        """Gets the dedupe of this ResumeBrokenMirror.  # noqa: E501

        Enable Dedupe For Mirror.  # noqa: E501

        :return: The dedupe of this ResumeBrokenMirror.  # noqa: E501
        :rtype: str
        """
        return self._dedupe

    @dedupe.setter
    def dedupe(self, dedupe):
        """Sets the dedupe of this ResumeBrokenMirror.

        Enable Dedupe For Mirror.  # noqa: E501

        :param dedupe: The dedupe of this ResumeBrokenMirror.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                dedupe not in allowed_values):
            raise ValueError(
                "Invalid value for `dedupe` ({0}), must be one of {1}"  # noqa: E501
                .format(dedupe, allowed_values)
            )

        self._dedupe = dedupe

    @property
    def compress(self):
        """Gets the compress of this ResumeBrokenMirror.  # noqa: E501

        Enable Compression For Mirror.  # noqa: E501

        :return: The compress of this ResumeBrokenMirror.  # noqa: E501
        :rtype: str
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this ResumeBrokenMirror.

        Enable Compression For Mirror.  # noqa: E501

        :param compress: The compress of this ResumeBrokenMirror.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                compress not in allowed_values):
            raise ValueError(
                "Invalid value for `compress` ({0}), must be one of {1}"  # noqa: E501
                .format(compress, allowed_values)
            )

        self._compress = compress

    @property
    def wanoptimization(self):
        """Gets the wanoptimization of this ResumeBrokenMirror.  # noqa: E501

        enable WAN optimization.  # noqa: E501

        :return: The wanoptimization of this ResumeBrokenMirror.  # noqa: E501
        :rtype: str
        """
        return self._wanoptimization

    @wanoptimization.setter
    def wanoptimization(self, wanoptimization):
        """Sets the wanoptimization of this ResumeBrokenMirror.

        enable WAN optimization.  # noqa: E501

        :param wanoptimization: The wanoptimization of this ResumeBrokenMirror.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and wanoptimization is None:
            raise ValueError("Invalid value for `wanoptimization`, must not be `None`")  # noqa: E501
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                wanoptimization not in allowed_values):
            raise ValueError(
                "Invalid value for `wanoptimization` ({0}), must be one of {1}"  # noqa: E501
                .format(wanoptimization, allowed_values)
            )

        self._wanoptimization = wanoptimization

    @property
    def snapname(self):
        """Gets the snapname of this ResumeBrokenMirror.  # noqa: E501

        The local Snapshot ID.  # noqa: E501

        :return: The snapname of this ResumeBrokenMirror.  # noqa: E501
        :rtype: str
        """
        return self._snapname

    @snapname.setter
    def snapname(self, snapname):
        """Sets the snapname of this ResumeBrokenMirror.

        The local Snapshot ID.  # noqa: E501

        :param snapname: The snapname of this ResumeBrokenMirror.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and snapname is None:
            raise ValueError("Invalid value for `snapname`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                snapname is not None and not re.search(r'^snap-[0-9a-f]{8}$', snapname)):  # noqa: E501
            raise ValueError(r"Invalid value for `snapname`, must be a follow pattern or equal to `/^snap-[0-9a-f]{8}$/`")  # noqa: E501

        self._snapname = snapname

    @property
    def remote_snapname(self):
        """Gets the remote_snapname of this ResumeBrokenMirror.  # noqa: E501

        ID of a Remote Snapshot to resume from.  # noqa: E501

        :return: The remote_snapname of this ResumeBrokenMirror.  # noqa: E501
        :rtype: str
        """
        return self._remote_snapname

    @remote_snapname.setter
    def remote_snapname(self, remote_snapname):
        """Sets the remote_snapname of this ResumeBrokenMirror.

        ID of a Remote Snapshot to resume from.  # noqa: E501

        :param remote_snapname: The remote_snapname of this ResumeBrokenMirror.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and remote_snapname is None:
            raise ValueError("Invalid value for `remote_snapname`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                remote_snapname is not None and not re.search(r'^snap-[0-9a-f]{8}$', remote_snapname)):  # noqa: E501
            raise ValueError(r"Invalid value for `remote_snapname`, must be a follow pattern or equal to `/^snap-[0-9a-f]{8}$/`")  # noqa: E501

        self._remote_snapname = remote_snapname

    @property
    def force(self):
        """Gets the force of this ResumeBrokenMirror.  # noqa: E501


        :return: The force of this ResumeBrokenMirror.  # noqa: E501
        :rtype: str
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this ResumeBrokenMirror.


        :param force: The force of this ResumeBrokenMirror.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if (self._configuration.client_side_validation and
                force not in allowed_values):
            raise ValueError(
                "Invalid value for `force` ({0}), must be one of {1}"  # noqa: E501
                .format(force, allowed_values)
            )

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResumeBrokenMirror, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResumeBrokenMirror):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResumeBrokenMirror):
            return True

        return self.to_dict() != other.to_dict()
