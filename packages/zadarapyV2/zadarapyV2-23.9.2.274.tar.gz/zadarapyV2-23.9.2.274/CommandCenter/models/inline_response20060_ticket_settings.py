# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20060TicketSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'expiration_date': 'str',
        'user_email': 'str',
        'rate_limit': 'int'
    }

    attribute_map = {
        'comment': 'comment',
        'expiration_date': 'expiration_date',
        'user_email': 'user_email',
        'rate_limit': 'rate_limit'
    }

    def __init__(self, comment=None, expiration_date=None, user_email=None, rate_limit=None, _configuration=None):  # noqa: E501
        """InlineResponse20060TicketSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._comment = None
        self._expiration_date = None
        self._user_email = None
        self._rate_limit = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if user_email is not None:
            self.user_email = user_email
        if rate_limit is not None:
            self.rate_limit = rate_limit

    @property
    def comment(self):
        """Gets the comment of this InlineResponse20060TicketSettings.  # noqa: E501


        :return: The comment of this InlineResponse20060TicketSettings.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InlineResponse20060TicketSettings.


        :param comment: The comment of this InlineResponse20060TicketSettings.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def expiration_date(self):
        """Gets the expiration_date of this InlineResponse20060TicketSettings.  # noqa: E501


        :return: The expiration_date of this InlineResponse20060TicketSettings.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this InlineResponse20060TicketSettings.


        :param expiration_date: The expiration_date of this InlineResponse20060TicketSettings.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def user_email(self):
        """Gets the user_email of this InlineResponse20060TicketSettings.  # noqa: E501


        :return: The user_email of this InlineResponse20060TicketSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this InlineResponse20060TicketSettings.


        :param user_email: The user_email of this InlineResponse20060TicketSettings.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def rate_limit(self):
        """Gets the rate_limit of this InlineResponse20060TicketSettings.  # noqa: E501


        :return: The rate_limit of this InlineResponse20060TicketSettings.  # noqa: E501
        :rtype: int
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this InlineResponse20060TicketSettings.


        :param rate_limit: The rate_limit of this InlineResponse20060TicketSettings.  # noqa: E501
        :type: int
        """

        self._rate_limit = rate_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20060TicketSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20060TicketSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20060TicketSettings):
            return True

        return self.to_dict() != other.to_dict()
