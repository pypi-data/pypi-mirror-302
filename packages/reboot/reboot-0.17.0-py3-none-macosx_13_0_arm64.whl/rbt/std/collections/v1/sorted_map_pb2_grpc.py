# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rbt.std.collections.v1 import sorted_map_pb2 as rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2


class SortedMapInterfaceStub(object):
    """*
    A larger than memory map, sorted by its keys. Supports batch insertion
    and removal, and sorted range queries.

    Keys are `string`s, and values are `bytes`. You can efficiently use a
    SortedMap as a (sorted) set by storing empty values.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Insert = channel.unary_unary(
                '/rbt.std.collections.v1.SortedMapInterface/Insert',
                request_serializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.InsertRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.InsertResponse.FromString,
                )
        self.Remove = channel.unary_unary(
                '/rbt.std.collections.v1.SortedMapInterface/Remove',
                request_serializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RemoveRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RemoveResponse.FromString,
                )
        self.Range = channel.unary_unary(
                '/rbt.std.collections.v1.SortedMapInterface/Range',
                request_serializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RangeRequest.SerializeToString,
                response_deserializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RangeResponse.FromString,
                )


class SortedMapInterfaceServicer(object):
    """*
    A larger than memory map, sorted by its keys. Supports batch insertion
    and removal, and sorted range queries.

    Keys are `string`s, and values are `bytes`. You can efficiently use a
    SortedMap as a (sorted) set by storing empty values.
    """

    def Insert(self, request, context):
        """*
        Insert a batch of entries into the `SortedMap`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Remove(self, request, context):
        """*
        Remove a batch of keys from the `SortedMap`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Range(self, request, context):
        """*
        Read a range of data within the `SortedMap`.

        The `start_key` is inclusive, and the `end_key` is exclusive. If the start
        or end are unset, then the range is unbounded in that direction.

        The `limit` argument is required, to avoid exhausting memory in the client
        or server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SortedMapInterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.InsertRequest.FromString,
                    response_serializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.InsertResponse.SerializeToString,
            ),
            'Remove': grpc.unary_unary_rpc_method_handler(
                    servicer.Remove,
                    request_deserializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RemoveRequest.FromString,
                    response_serializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RemoveResponse.SerializeToString,
            ),
            'Range': grpc.unary_unary_rpc_method_handler(
                    servicer.Range,
                    request_deserializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RangeRequest.FromString,
                    response_serializer=rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rbt.std.collections.v1.SortedMapInterface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SortedMapInterface(object):
    """*
    A larger than memory map, sorted by its keys. Supports batch insertion
    and removal, and sorted range queries.

    Keys are `string`s, and values are `bytes`. You can efficiently use a
    SortedMap as a (sorted) set by storing empty values.
    """

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rbt.std.collections.v1.SortedMapInterface/Insert',
            rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.InsertRequest.SerializeToString,
            rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.InsertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rbt.std.collections.v1.SortedMapInterface/Remove',
            rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RemoveRequest.SerializeToString,
            rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RemoveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Range(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rbt.std.collections.v1.SortedMapInterface/Range',
            rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RangeRequest.SerializeToString,
            rbt_dot_std_dot_collections_dot_v1_dot_sorted__map__pb2.RangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
