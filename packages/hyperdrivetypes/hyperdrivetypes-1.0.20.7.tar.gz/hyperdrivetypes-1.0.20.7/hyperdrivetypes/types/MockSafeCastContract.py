"""A web3.py Contract class for the MockSafeCast contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ABIFunction, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    combomethod_typed,
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}


class MockSafeCastToInt128ContractFunction0(ContractFunction):
    """ContractFunction for the toInt128 method."""

    def __call__(self, x: int) -> MockSafeCastToInt128ContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(MockSafeCastToInt128ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToInt128ContractFunction1(ContractFunction):
    """ContractFunction for the toInt128 method."""

    def __call__(self, x: int) -> MockSafeCastToInt128ContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(MockSafeCastToInt128ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToInt128ContractFunction(ContractFunction):
    """ContractFunction for the toInt128 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, x: int) -> MockSafeCastToInt128ContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, x: int) -> MockSafeCastToInt128ContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> MockSafeCastToInt128ContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class MockSafeCastToInt256ContractFunction(ContractFunction):
    """ContractFunction for the toInt256 method."""

    def __call__(self, x: int) -> MockSafeCastToInt256ContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(x))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToUint112ContractFunction(ContractFunction):
    """ContractFunction for the toUint112 method."""

    def __call__(self, x: int) -> MockSafeCastToUint112ContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(x))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToUint128ContractFunction(ContractFunction):
    """ContractFunction for the toUint128 method."""

    def __call__(self, x: int) -> MockSafeCastToUint128ContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(x))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToUint256ContractFunction(ContractFunction):
    """ContractFunction for the toUint256 method."""

    def __call__(self, x: int) -> MockSafeCastToUint256ContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(x))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastContractFunctions(ContractFunctions):
    """ContractFunctions for the MockSafeCast contract."""

    toInt128: MockSafeCastToInt128ContractFunction

    toInt256: MockSafeCastToInt256ContractFunction

    toUint112: MockSafeCastToUint112ContractFunction

    toUint128: MockSafeCastToUint128ContractFunction

    toUint256: MockSafeCastToUint256ContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.toInt128 = MockSafeCastToInt128ContractFunction.factory(
            "toInt128",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toInt128",
        )
        self.toInt256 = MockSafeCastToInt256ContractFunction.factory(
            "toInt256",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toInt256",
        )
        self.toUint112 = MockSafeCastToUint112ContractFunction.factory(
            "toUint112",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toUint112",
        )
        self.toUint128 = MockSafeCastToUint128ContractFunction.factory(
            "toUint128",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toUint128",
        )
        self.toUint256 = MockSafeCastToUint256ContractFunction.factory(
            "toUint256",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toUint256",
        )


class MockSafeCastUnsafeCastToInt128ContractError:
    """ContractError for UnsafeCastToInt128."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "MockSafeCastUnsafeCastToInt128ContractError",
    ) -> None:
        self.selector = "0xa5353be5"
        self.signature = "UnsafeCastToInt128()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in mocksafecast_abi
                if item.get("name") == "UnsafeCastToInt128"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class MockSafeCastUnsafeCastToInt256ContractError:
    """ContractError for UnsafeCastToInt256."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "MockSafeCastUnsafeCastToInt256ContractError",
    ) -> None:
        self.selector = "0x72dd4e02"
        self.signature = "UnsafeCastToInt256()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in mocksafecast_abi
                if item.get("name") == "UnsafeCastToInt256"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class MockSafeCastUnsafeCastToUint112ContractError:
    """ContractError for UnsafeCastToUint112."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "MockSafeCastUnsafeCastToUint112ContractError",
    ) -> None:
        self.selector = "0x10d62a2e"
        self.signature = "UnsafeCastToUint112()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in mocksafecast_abi
                if item.get("name") == "UnsafeCastToUint112"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class MockSafeCastUnsafeCastToUint128ContractError:
    """ContractError for UnsafeCastToUint128."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "MockSafeCastUnsafeCastToUint128ContractError",
    ) -> None:
        self.selector = "0x1e15f2a2"
        self.signature = "UnsafeCastToUint128()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in mocksafecast_abi
                if item.get("name") == "UnsafeCastToUint128"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class MockSafeCastUnsafeCastToUint256ContractError:
    """ContractError for UnsafeCastToUint256."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "MockSafeCastUnsafeCastToUint256ContractError",
    ) -> None:
        self.selector = "0xe3a26e20"
        self.signature = "UnsafeCastToUint256()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in mocksafecast_abi
                if item.get("name") == "UnsafeCastToUint256"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class MockSafeCastContractErrors:
    """ContractErrors for the MockSafeCast contract."""

    UnsafeCastToInt128: MockSafeCastUnsafeCastToInt128ContractError

    UnsafeCastToInt256: MockSafeCastUnsafeCastToInt256ContractError

    UnsafeCastToUint112: MockSafeCastUnsafeCastToUint112ContractError

    UnsafeCastToUint128: MockSafeCastUnsafeCastToUint128ContractError

    UnsafeCastToUint256: MockSafeCastUnsafeCastToUint256ContractError

    def __init__(
        self,
    ) -> None:
        self.UnsafeCastToInt128 = MockSafeCastUnsafeCastToInt128ContractError()
        self.UnsafeCastToInt256 = MockSafeCastUnsafeCastToInt256ContractError()
        self.UnsafeCastToUint112 = (
            MockSafeCastUnsafeCastToUint112ContractError()
        )
        self.UnsafeCastToUint128 = (
            MockSafeCastUnsafeCastToUint128ContractError()
        )
        self.UnsafeCastToUint256 = (
            MockSafeCastUnsafeCastToUint256ContractError()
        )

        self._all = [
            self.UnsafeCastToInt128,
            self.UnsafeCastToInt256,
            self.UnsafeCastToUint112,
            self.UnsafeCastToUint128,
            self.UnsafeCastToUint256,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"MockSafeCast does not have a selector matching {selector}"
        )


mocksafecast_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "toInt128",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "y", "type": "int128", "internalType": "int128"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toInt128",
            "inputs": [
                {"name": "x", "type": "int256", "internalType": "int256"}
            ],
            "outputs": [
                {"name": "y", "type": "int128", "internalType": "int128"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toInt256",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "y", "type": "int256", "internalType": "int256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toUint112",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "y", "type": "uint112", "internalType": "uint112"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toUint128",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "y", "type": "uint128", "internalType": "uint128"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toUint256",
            "inputs": [
                {"name": "x", "type": "int256", "internalType": "int256"}
            ],
            "outputs": [
                {"name": "y", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {"type": "error", "name": "UnsafeCastToInt128", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint112", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint128", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint256", "inputs": []},
    ],
)


class MockSafeCastContract(Contract):
    """A web3.py Contract class for the MockSafeCast contract."""

    abi: ABI = mocksafecast_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b506102da806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630f2422d11461006757806341d2aa6414610092578063809fdd33146100bd578063dd2a0316146100e8578063dfbe873b146100fb578063fdcf791b1461011c575b600080fd5b61007a61007536600461028b565b61012f565b604051600f9190910b81526020015b60405180910390f35b6100a56100a036600461028b565b610140565b6040516001600160701b039091168152602001610089565b6100d06100cb36600461028b565b61014b565b6040516001600160801b039091168152602001610089565b61007a6100f636600461028b565b610156565b61010e61010936600461028b565b610161565b604051908152602001610089565b61010e61012a36600461028b565b61016c565b600061013a82610177565b92915050565b600061013a826101a5565b600061013a826101cf565b600061013a826101f9565b600061013a8261023e565b600061013a82610268565b600060016001607f1b038211156101a15760405163a5353be560e01b815260040160405180910390fd5b5090565b60006001600160701b038211156101a15760405163086b151760e11b815260040160405180910390fd5b60006001600160801b038211156101a157604051630f0af95160e11b815260040160405180910390fd5b60006f7fffffffffffffffffffffffffffffff19821280610220575060016001607f1b0382135b156101a15760405163a5353be560e01b815260040160405180910390fd5b60006001600160ff1b038211156101a15760405163396ea70160e11b815260040160405180910390fd5b6000808212156101a15760405163071d137160e51b815260040160405180910390fd5b60006020828403121561029d57600080fd5b503591905056fea26469706673582212201565d8d84b4472bea8f55c5da0289e8044716da9c15d774d382540bc480c50b464736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MockSafeCastContractFunctions(mocksafecast_abi, self.w3, address)  # type: ignore

        self.errors = MockSafeCastContractErrors()

    errors: MockSafeCastContractErrors = MockSafeCastContractErrors()

    functions: MockSafeCastContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MockSafeCastContractFunctions(
            mocksafecast_abi, w3, None
        )
        contract.errors = MockSafeCastContractErrors()

        return contract
