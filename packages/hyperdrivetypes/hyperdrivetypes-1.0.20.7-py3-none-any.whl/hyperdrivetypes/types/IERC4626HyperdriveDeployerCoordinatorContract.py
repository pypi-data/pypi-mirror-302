"""A web3.py Contract class for the IERC4626HyperdriveDeployerCoordinator contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ABIFunction, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    combomethod_typed,
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from . import IHyperdriveTypes as IHyperdrive

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolDeployConfig": IHyperdrive.PoolDeployConfig,
    "IHyperdrive.Options": IHyperdrive.Options,
}


class IERC4626HyperdriveDeployerCoordinatorConvertToBaseContractFunction(
    ContractFunction
):
    """ContractFunction for the convertToBase method."""

    def __call__(self, vaultSharesToken: str, shareAmount: int) -> IERC4626HyperdriveDeployerCoordinatorConvertToBaseContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(vaultSharesToken),
            dataclass_to_tuple(shareAmount),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IERC4626HyperdriveDeployerCoordinatorConvertToSharesContractFunction(
    ContractFunction
):
    """ContractFunction for the convertToShares method."""

    def __call__(self, vaultSharesToken: str, baseAmount: int) -> IERC4626HyperdriveDeployerCoordinatorConvertToSharesContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(vaultSharesToken), dataclass_to_tuple(baseAmount)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IERC4626HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction(
    ContractFunction
):
    """ContractFunction for the deployHyperdrive method."""

    def __call__(self, deploymentId: bytes, name: str, deployConfig: IHyperdrive.PoolDeployConfig, extraData: bytes, salt: bytes) -> IERC4626HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(name),
            dataclass_to_tuple(deployConfig),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IERC4626HyperdriveDeployerCoordinatorDeployTargetContractFunction(
    ContractFunction
):
    """ContractFunction for the deployTarget method."""

    def __call__(self, deploymentId: bytes, deployConfig: IHyperdrive.PoolDeployConfig, extraData: bytes, targetIndex: int, salt: bytes) -> IERC4626HyperdriveDeployerCoordinatorDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(deployConfig),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(targetIndex),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IERC4626HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction(
    ContractFunction
):
    """ContractFunction for the getNumberOfTargets method."""

    def __call__(self) -> IERC4626HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IERC4626HyperdriveDeployerCoordinatorInitializeContractFunction(
    ContractFunction
):
    """ContractFunction for the initialize method."""

    def __call__(self, deploymentId: bytes, lp: str, contribution: int, apr: int, options: IHyperdrive.Options) -> IERC4626HyperdriveDeployerCoordinatorInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(lp),
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(apr),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IERC4626HyperdriveDeployerCoordinatorKindContractFunction(
    ContractFunction
):
    """ContractFunction for the kind method."""

    def __call__(self) -> IERC4626HyperdriveDeployerCoordinatorKindContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IERC4626HyperdriveDeployerCoordinatorNameContractFunction(
    ContractFunction
):
    """ContractFunction for the name method."""

    def __call__(self) -> IERC4626HyperdriveDeployerCoordinatorNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IERC4626HyperdriveDeployerCoordinatorVersionContractFunction(
    ContractFunction
):
    """ContractFunction for the version method."""

    def __call__(self) -> IERC4626HyperdriveDeployerCoordinatorVersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IERC4626HyperdriveDeployerCoordinatorContractFunctions(ContractFunctions):
    """ContractFunctions for the IERC4626HyperdriveDeployerCoordinator contract."""

    convertToBase: (
        IERC4626HyperdriveDeployerCoordinatorConvertToBaseContractFunction
    )

    convertToShares: (
        IERC4626HyperdriveDeployerCoordinatorConvertToSharesContractFunction
    )

    deployHyperdrive: (
        IERC4626HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction
    )

    deployTarget: (
        IERC4626HyperdriveDeployerCoordinatorDeployTargetContractFunction
    )

    getNumberOfTargets: (
        IERC4626HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction
    )

    initialize: IERC4626HyperdriveDeployerCoordinatorInitializeContractFunction

    kind: IERC4626HyperdriveDeployerCoordinatorKindContractFunction

    name: IERC4626HyperdriveDeployerCoordinatorNameContractFunction

    version: IERC4626HyperdriveDeployerCoordinatorVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.convertToBase = IERC4626HyperdriveDeployerCoordinatorConvertToBaseContractFunction.factory(
            "convertToBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToBase",
        )
        self.convertToShares = IERC4626HyperdriveDeployerCoordinatorConvertToSharesContractFunction.factory(
            "convertToShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToShares",
        )
        self.deployHyperdrive = IERC4626HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction.factory(
            "deployHyperdrive",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployHyperdrive",
        )
        self.deployTarget = IERC4626HyperdriveDeployerCoordinatorDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployTarget",
        )
        self.getNumberOfTargets = IERC4626HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction.factory(
            "getNumberOfTargets",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getNumberOfTargets",
        )
        self.initialize = IERC4626HyperdriveDeployerCoordinatorInitializeContractFunction.factory(
            "initialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="initialize",
        )
        self.kind = (
            IERC4626HyperdriveDeployerCoordinatorKindContractFunction.factory(
                "kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="kind",
            )
        )
        self.name = (
            IERC4626HyperdriveDeployerCoordinatorNameContractFunction.factory(
                "name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="name",
            )
        )
        self.version = IERC4626HyperdriveDeployerCoordinatorVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="version",
        )


class IERC4626HyperdriveDeployerCoordinatorApprovalFailedContractError:
    """ContractError for ApprovalFailed."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorApprovalFailedContractError",
    ) -> None:
        self.selector = "0x8164f842"
        self.signature = "ApprovalFailed()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "ApprovalFailed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError:
    """ContractError for DeploymentAlreadyExists."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError",
    ) -> None:
        self.selector = "0x77c3669a"
        self.signature = "DeploymentAlreadyExists()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentAlreadyExists"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError:
    """ContractError for DeploymentDoesNotExist."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError",
    ) -> None:
        self.selector = "0xe62c7024"
        self.signature = "DeploymentDoesNotExist()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentDoesNotExist"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError:
    """ContractError for HyperdriveAlreadyDeployed."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError",
    ) -> None:
        self.selector = "0x2c95caeb"
        self.signature = "HyperdriveAlreadyDeployed()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveAlreadyDeployed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError:
    """ContractError for HyperdriveIsNotDeployed."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError",
    ) -> None:
        self.selector = "0x952b05cb"
        self.signature = "HyperdriveIsNotDeployed()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveIsNotDeployed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorIncompleteDeploymentContractError:
    """ContractError for IncompleteDeployment."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorIncompleteDeploymentContractError",
    ) -> None:
        self.selector = "0xe97cc2bf"
        self.signature = "IncompleteDeployment()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "IncompleteDeployment"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorInsufficientValueContractError:
    """ContractError for InsufficientValue."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorInsufficientValueContractError",
    ) -> None:
        self.selector = "0x11011294"
        self.signature = "InsufficientValue()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InsufficientValue"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorInvalidBaseTokenContractError:
    """ContractError for InvalidBaseToken."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorInvalidBaseTokenContractError",
    ) -> None:
        self.selector = "0x0e442a4a"
        self.signature = "InvalidBaseToken()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidBaseToken"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError:
    """ContractError for InvalidCheckpointDuration."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError",
    ) -> None:
        self.selector = "0x5428734d"
        self.signature = "InvalidCheckpointDuration()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidCheckpointDuration"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError:
    """ContractError for InvalidFeeAmounts."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError",
    ) -> None:
        self.selector = "0x45ee5986"
        self.signature = "InvalidFeeAmounts()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidFeeAmounts"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError:
    """ContractError for InvalidMinimumShareReserves."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError",
    ) -> None:
        self.selector = "0x49db44f5"
        self.signature = "InvalidMinimumShareReserves()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumShareReserves"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError:
    """ContractError for InvalidMinimumTransactionAmount."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError",
    ) -> None:
        self.selector = "0x3192a446"
        self.signature = "InvalidMinimumTransactionAmount()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumTransactionAmount"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorInvalidPositionDurationContractError:
    """ContractError for InvalidPositionDuration."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorInvalidPositionDurationContractError",
    ) -> None:
        self.selector = "0x4a7fff9e"
        self.signature = "InvalidPositionDuration()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidPositionDuration"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorInvalidTargetIndexContractError:
    """ContractError for InvalidTargetIndex."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorInvalidTargetIndexContractError",
    ) -> None:
        self.selector = "0x3b3f02b2"
        self.signature = "InvalidTargetIndex()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidTargetIndex"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError:
    """ContractError for InvalidVaultSharesToken."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError",
    ) -> None:
        self.selector = "0xe7ee73a0"
        self.signature = "InvalidVaultSharesToken()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidVaultSharesToken"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorMismatchedConfigContractError:
    """ContractError for MismatchedConfig."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorMismatchedConfigContractError",
    ) -> None:
        self.selector = "0x332ee11f"
        self.signature = "MismatchedConfig()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedConfig"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorMismatchedExtraDataContractError:
    """ContractError for MismatchedExtraData."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorMismatchedExtraDataContractError",
    ) -> None:
        self.selector = "0xd1939688"
        self.signature = "MismatchedExtraData()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedExtraData"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorNotPayableContractError:
    """ContractError for NotPayable."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorNotPayableContractError",
    ) -> None:
        self.selector = "0x1574f9f3"
        self.signature = "NotPayable()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "NotPayable"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError:
    """ContractError for SenderIsNotFactory."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError",
    ) -> None:
        self.selector = "0x40843511"
        self.signature = "SenderIsNotFactory()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "SenderIsNotFactory"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError:
    """ContractError for TargetAlreadyDeployed."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError",
    ) -> None:
        self.selector = "0x0744b578"
        self.signature = "TargetAlreadyDeployed()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "TargetAlreadyDeployed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorTransferFailedContractError:
    """ContractError for TransferFailed."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDeployerCoordinatorTransferFailedContractError",
    ) -> None:
        self.selector = "0x90b8ec18"
        self.signature = "TransferFailed()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "TransferFailed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDeployerCoordinatorContractErrors:
    """ContractErrors for the IERC4626HyperdriveDeployerCoordinator contract."""

    ApprovalFailed: (
        IERC4626HyperdriveDeployerCoordinatorApprovalFailedContractError
    )

    DeploymentAlreadyExists: IERC4626HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError

    DeploymentDoesNotExist: (
        IERC4626HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError
    )

    HyperdriveAlreadyDeployed: IERC4626HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError

    HyperdriveIsNotDeployed: IERC4626HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError

    IncompleteDeployment: (
        IERC4626HyperdriveDeployerCoordinatorIncompleteDeploymentContractError
    )

    InsufficientValue: (
        IERC4626HyperdriveDeployerCoordinatorInsufficientValueContractError
    )

    InvalidBaseToken: (
        IERC4626HyperdriveDeployerCoordinatorInvalidBaseTokenContractError
    )

    InvalidCheckpointDuration: IERC4626HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError

    InvalidFeeAmounts: (
        IERC4626HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError
    )

    InvalidMinimumShareReserves: IERC4626HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError

    InvalidMinimumTransactionAmount: IERC4626HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError

    InvalidPositionDuration: IERC4626HyperdriveDeployerCoordinatorInvalidPositionDurationContractError

    InvalidTargetIndex: (
        IERC4626HyperdriveDeployerCoordinatorInvalidTargetIndexContractError
    )

    InvalidVaultSharesToken: IERC4626HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError

    MismatchedConfig: (
        IERC4626HyperdriveDeployerCoordinatorMismatchedConfigContractError
    )

    MismatchedExtraData: (
        IERC4626HyperdriveDeployerCoordinatorMismatchedExtraDataContractError
    )

    NotPayable: IERC4626HyperdriveDeployerCoordinatorNotPayableContractError

    SenderIsNotFactory: (
        IERC4626HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError
    )

    TargetAlreadyDeployed: (
        IERC4626HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError
    )

    TransferFailed: (
        IERC4626HyperdriveDeployerCoordinatorTransferFailedContractError
    )

    def __init__(
        self,
    ) -> None:
        self.ApprovalFailed = (
            IERC4626HyperdriveDeployerCoordinatorApprovalFailedContractError()
        )
        self.DeploymentAlreadyExists = (
            IERC4626HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError()
        )
        self.DeploymentDoesNotExist = (
            IERC4626HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError()
        )
        self.HyperdriveAlreadyDeployed = (
            IERC4626HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError()
        )
        self.HyperdriveIsNotDeployed = (
            IERC4626HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError()
        )
        self.IncompleteDeployment = (
            IERC4626HyperdriveDeployerCoordinatorIncompleteDeploymentContractError()
        )
        self.InsufficientValue = (
            IERC4626HyperdriveDeployerCoordinatorInsufficientValueContractError()
        )
        self.InvalidBaseToken = (
            IERC4626HyperdriveDeployerCoordinatorInvalidBaseTokenContractError()
        )
        self.InvalidCheckpointDuration = (
            IERC4626HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError()
        )
        self.InvalidFeeAmounts = (
            IERC4626HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError()
        )
        self.InvalidMinimumShareReserves = (
            IERC4626HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError()
        )
        self.InvalidMinimumTransactionAmount = (
            IERC4626HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError()
        )
        self.InvalidPositionDuration = (
            IERC4626HyperdriveDeployerCoordinatorInvalidPositionDurationContractError()
        )
        self.InvalidTargetIndex = (
            IERC4626HyperdriveDeployerCoordinatorInvalidTargetIndexContractError()
        )
        self.InvalidVaultSharesToken = (
            IERC4626HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError()
        )
        self.MismatchedConfig = (
            IERC4626HyperdriveDeployerCoordinatorMismatchedConfigContractError()
        )
        self.MismatchedExtraData = (
            IERC4626HyperdriveDeployerCoordinatorMismatchedExtraDataContractError()
        )
        self.NotPayable = (
            IERC4626HyperdriveDeployerCoordinatorNotPayableContractError()
        )
        self.SenderIsNotFactory = (
            IERC4626HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError()
        )
        self.TargetAlreadyDeployed = (
            IERC4626HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError()
        )
        self.TransferFailed = (
            IERC4626HyperdriveDeployerCoordinatorTransferFailedContractError()
        )

        self._all = [
            self.ApprovalFailed,
            self.DeploymentAlreadyExists,
            self.DeploymentDoesNotExist,
            self.HyperdriveAlreadyDeployed,
            self.HyperdriveIsNotDeployed,
            self.IncompleteDeployment,
            self.InsufficientValue,
            self.InvalidBaseToken,
            self.InvalidCheckpointDuration,
            self.InvalidFeeAmounts,
            self.InvalidMinimumShareReserves,
            self.InvalidMinimumTransactionAmount,
            self.InvalidPositionDuration,
            self.InvalidTargetIndex,
            self.InvalidVaultSharesToken,
            self.MismatchedConfig,
            self.MismatchedExtraData,
            self.NotPayable,
            self.SenderIsNotFactory,
            self.TargetAlreadyDeployed,
            self.TransferFailed,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"IERC4626HyperdriveDeployerCoordinator does not have a selector matching {selector}"
        )


ierc4626hyperdrivedeployercoordinator_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "convertToBase",
            "inputs": [
                {
                    "name": "_vaultSharesToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_shareAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {
                    "name": "_vaultSharesToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_baseAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployHyperdrive",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_targetIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "getNumberOfTargets",
            "inputs": [],
            "outputs": [
                {
                    "name": "numTargets",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "_lp", "type": "address", "internalType": "address"},
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {"type": "error", "name": "ApprovalFailed", "inputs": []},
        {"type": "error", "name": "DeploymentAlreadyExists", "inputs": []},
        {"type": "error", "name": "DeploymentDoesNotExist", "inputs": []},
        {"type": "error", "name": "HyperdriveAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "HyperdriveIsNotDeployed", "inputs": []},
        {"type": "error", "name": "IncompleteDeployment", "inputs": []},
        {"type": "error", "name": "InsufficientValue", "inputs": []},
        {"type": "error", "name": "InvalidBaseToken", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidFeeAmounts", "inputs": []},
        {"type": "error", "name": "InvalidMinimumShareReserves", "inputs": []},
        {
            "type": "error",
            "name": "InvalidMinimumTransactionAmount",
            "inputs": [],
        },
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTargetIndex", "inputs": []},
        {"type": "error", "name": "InvalidVaultSharesToken", "inputs": []},
        {"type": "error", "name": "MismatchedConfig", "inputs": []},
        {"type": "error", "name": "MismatchedExtraData", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {"type": "error", "name": "SenderIsNotFactory", "inputs": []},
        {"type": "error", "name": "TargetAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
    ],
)


class IERC4626HyperdriveDeployerCoordinatorContract(Contract):
    """A web3.py Contract class for the IERC4626HyperdriveDeployerCoordinator contract."""

    abi: ABI = ierc4626hyperdrivedeployercoordinator_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IERC4626HyperdriveDeployerCoordinatorContractFunctions(ierc4626hyperdrivedeployercoordinator_abi, self.w3, address)  # type: ignore

        self.errors = IERC4626HyperdriveDeployerCoordinatorContractErrors()

    errors: IERC4626HyperdriveDeployerCoordinatorContractErrors = (
        IERC4626HyperdriveDeployerCoordinatorContractErrors()
    )

    functions: IERC4626HyperdriveDeployerCoordinatorContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = (
            IERC4626HyperdriveDeployerCoordinatorContractFunctions(
                ierc4626hyperdrivedeployercoordinator_abi, w3, None
            )
        )
        contract.errors = IERC4626HyperdriveDeployerCoordinatorContractErrors()

        return contract
