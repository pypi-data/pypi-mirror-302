# This file was auto generated by Styx.
# Do not edit this file directly.

import typing
import pathlib
from styxdefs import *
import dataclasses

FSLREORIENT2STD_METADATA = Metadata(
    id="0ab323644b24b7a80ded7cca60e0bc892bf71509.boutiques",
    name="fslreorient2std",
    package="fsl",
    container_image_tag="mcin/fsl:6.0.5",
)


class Fslreorient2stdOutputs(typing.NamedTuple):
    """
    Output object returned when calling `fslreorient2std(...)`.
    """
    root: OutputPathType
    """Output root folder. This is the root folder for all outputs."""
    output_image: OutputPathType | None
    """Reoriented output image (NIfTI format)"""
    matrix_output: OutputPathType | None
    """File to save the transformation matrix"""


def fslreorient2std(
    input_image: InputPathType,
    output_image: str | None = "output",
    matrix_file: str | None = None,
    runner: Runner | None = None,
) -> Fslreorient2stdOutputs:
    """
    A tool for reorienting an image to match the approximate orientation of standard
    template images (MNI152).
    
    Author: Oxford Centre for Functional MRI of the Brain (FMRIB)
    
    URL: https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Fslutils#fslreorient2std
    
    Args:
        input_image: Input image to be reoriented (NIfTI format, e.g.\
            img.nii.gz).
        output_image: Output image with the reoriented result (NIfTI format,\
            e.g. reoriented_img.nii.gz). If not provided, transformation matrix is\
            output to standard output.
        matrix_file: File to save the transformation matrix.
        runner: Command runner.
    Returns:
        NamedTuple of outputs (described in `Fslreorient2stdOutputs`).
    """
    runner = runner or get_global_runner()
    execution = runner.start_execution(FSLREORIENT2STD_METADATA)
    cargs = []
    cargs.append("fslreorient2std")
    cargs.append(execution.input_file(input_image))
    if output_image is not None:
        cargs.append(output_image)
    if matrix_file is not None:
        cargs.extend([
            "-m",
            matrix_file
        ])
    ret = Fslreorient2stdOutputs(
        root=execution.output_file("."),
        output_image=execution.output_file(output_image.removesuffix(".nii.gz") + ".nii.gz") if (output_image is not None) else None,
        matrix_output=execution.output_file(matrix_file) if (matrix_file is not None) else None,
    )
    execution.run(cargs)
    return ret


__all__ = [
    "FSLREORIENT2STD_METADATA",
    "Fslreorient2stdOutputs",
    "fslreorient2std",
]
