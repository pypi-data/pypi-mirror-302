# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20083MessageSteps(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'name': 'str',
        'state': 'str',
        'time': 'str',
        'phase': 'int',
        'progress': 'str',
        'data': 'InlineResponse20083MessageData',
        'id': 'int',
        'action_id': 'int'
    }

    attribute_map = {
        'comment': 'comment',
        'name': 'name',
        'state': 'state',
        'time': 'time',
        'phase': 'phase',
        'progress': 'progress',
        'data': 'data',
        'id': 'id',
        'action_id': 'action-id'
    }

    def __init__(self, comment=None, name=None, state=None, time=None, phase=None, progress=None, data=None, id=None, action_id=None, _configuration=None):  # noqa: E501
        """InlineResponse20083MessageSteps - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._comment = None
        self._name = None
        self._state = None
        self._time = None
        self._phase = None
        self._progress = None
        self._data = None
        self._id = None
        self._action_id = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if name is not None:
            self.name = name
        if state is not None:
            self.state = state
        if time is not None:
            self.time = time
        if phase is not None:
            self.phase = phase
        if progress is not None:
            self.progress = progress
        if data is not None:
            self.data = data
        if id is not None:
            self.id = id
        if action_id is not None:
            self.action_id = action_id

    @property
    def comment(self):
        """Gets the comment of this InlineResponse20083MessageSteps.  # noqa: E501


        :return: The comment of this InlineResponse20083MessageSteps.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InlineResponse20083MessageSteps.


        :param comment: The comment of this InlineResponse20083MessageSteps.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def name(self):
        """Gets the name of this InlineResponse20083MessageSteps.  # noqa: E501


        :return: The name of this InlineResponse20083MessageSteps.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20083MessageSteps.


        :param name: The name of this InlineResponse20083MessageSteps.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this InlineResponse20083MessageSteps.  # noqa: E501


        :return: The state of this InlineResponse20083MessageSteps.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20083MessageSteps.


        :param state: The state of this InlineResponse20083MessageSteps.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def time(self):
        """Gets the time of this InlineResponse20083MessageSteps.  # noqa: E501


        :return: The time of this InlineResponse20083MessageSteps.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this InlineResponse20083MessageSteps.


        :param time: The time of this InlineResponse20083MessageSteps.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def phase(self):
        """Gets the phase of this InlineResponse20083MessageSteps.  # noqa: E501


        :return: The phase of this InlineResponse20083MessageSteps.  # noqa: E501
        :rtype: int
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this InlineResponse20083MessageSteps.


        :param phase: The phase of this InlineResponse20083MessageSteps.  # noqa: E501
        :type: int
        """

        self._phase = phase

    @property
    def progress(self):
        """Gets the progress of this InlineResponse20083MessageSteps.  # noqa: E501


        :return: The progress of this InlineResponse20083MessageSteps.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this InlineResponse20083MessageSteps.


        :param progress: The progress of this InlineResponse20083MessageSteps.  # noqa: E501
        :type: str
        """

        self._progress = progress

    @property
    def data(self):
        """Gets the data of this InlineResponse20083MessageSteps.  # noqa: E501


        :return: The data of this InlineResponse20083MessageSteps.  # noqa: E501
        :rtype: InlineResponse20083MessageData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this InlineResponse20083MessageSteps.


        :param data: The data of this InlineResponse20083MessageSteps.  # noqa: E501
        :type: InlineResponse20083MessageData
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this InlineResponse20083MessageSteps.  # noqa: E501


        :return: The id of this InlineResponse20083MessageSteps.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20083MessageSteps.


        :param id: The id of this InlineResponse20083MessageSteps.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def action_id(self):
        """Gets the action_id of this InlineResponse20083MessageSteps.  # noqa: E501


        :return: The action_id of this InlineResponse20083MessageSteps.  # noqa: E501
        :rtype: int
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this InlineResponse20083MessageSteps.


        :param action_id: The action_id of this InlineResponse20083MessageSteps.  # noqa: E501
        :type: int
        """

        self._action_id = action_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20083MessageSteps, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20083MessageSteps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20083MessageSteps):
            return True

        return self.to_dict() != other.to_dict()
