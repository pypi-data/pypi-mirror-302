# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class VcNetwork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fe_ip': 'str',
        'fe_ipv6': 'str',
        'be_ip': 'str',
        'hb_ip': 'str',
        'hb_ipv6': 'str'
    }

    attribute_map = {
        'fe_ip': 'fe_ip',
        'fe_ipv6': 'fe_ipv6',
        'be_ip': 'be_ip',
        'hb_ip': 'hb_ip',
        'hb_ipv6': 'hb_ipv6'
    }

    def __init__(self, fe_ip=None, fe_ipv6=None, be_ip=None, hb_ip=None, hb_ipv6=None, _configuration=None):  # noqa: E501
        """VcNetwork - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fe_ip = None
        self._fe_ipv6 = None
        self._be_ip = None
        self._hb_ip = None
        self._hb_ipv6 = None
        self.discriminator = None

        if fe_ip is not None:
            self.fe_ip = fe_ip
        if fe_ipv6 is not None:
            self.fe_ipv6 = fe_ipv6
        if be_ip is not None:
            self.be_ip = be_ip
        if hb_ip is not None:
            self.hb_ip = hb_ip
        if hb_ipv6 is not None:
            self.hb_ipv6 = hb_ipv6

    @property
    def fe_ip(self):
        """Gets the fe_ip of this VcNetwork.  # noqa: E501


        :return: The fe_ip of this VcNetwork.  # noqa: E501
        :rtype: str
        """
        return self._fe_ip

    @fe_ip.setter
    def fe_ip(self, fe_ip):
        """Sets the fe_ip of this VcNetwork.


        :param fe_ip: The fe_ip of this VcNetwork.  # noqa: E501
        :type: str
        """

        self._fe_ip = fe_ip

    @property
    def fe_ipv6(self):
        """Gets the fe_ipv6 of this VcNetwork.  # noqa: E501


        :return: The fe_ipv6 of this VcNetwork.  # noqa: E501
        :rtype: str
        """
        return self._fe_ipv6

    @fe_ipv6.setter
    def fe_ipv6(self, fe_ipv6):
        """Sets the fe_ipv6 of this VcNetwork.


        :param fe_ipv6: The fe_ipv6 of this VcNetwork.  # noqa: E501
        :type: str
        """

        self._fe_ipv6 = fe_ipv6

    @property
    def be_ip(self):
        """Gets the be_ip of this VcNetwork.  # noqa: E501


        :return: The be_ip of this VcNetwork.  # noqa: E501
        :rtype: str
        """
        return self._be_ip

    @be_ip.setter
    def be_ip(self, be_ip):
        """Sets the be_ip of this VcNetwork.


        :param be_ip: The be_ip of this VcNetwork.  # noqa: E501
        :type: str
        """

        self._be_ip = be_ip

    @property
    def hb_ip(self):
        """Gets the hb_ip of this VcNetwork.  # noqa: E501


        :return: The hb_ip of this VcNetwork.  # noqa: E501
        :rtype: str
        """
        return self._hb_ip

    @hb_ip.setter
    def hb_ip(self, hb_ip):
        """Sets the hb_ip of this VcNetwork.


        :param hb_ip: The hb_ip of this VcNetwork.  # noqa: E501
        :type: str
        """

        self._hb_ip = hb_ip

    @property
    def hb_ipv6(self):
        """Gets the hb_ipv6 of this VcNetwork.  # noqa: E501


        :return: The hb_ipv6 of this VcNetwork.  # noqa: E501
        :rtype: str
        """
        return self._hb_ipv6

    @hb_ipv6.setter
    def hb_ipv6(self, hb_ipv6):
        """Sets the hb_ipv6 of this VcNetwork.


        :param hb_ipv6: The hb_ipv6 of this VcNetwork.  # noqa: E501
        :type: str
        """

        self._hb_ipv6 = hb_ipv6

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VcNetwork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VcNetwork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VcNetwork):
            return True

        return self.to_dict() != other.to_dict()
