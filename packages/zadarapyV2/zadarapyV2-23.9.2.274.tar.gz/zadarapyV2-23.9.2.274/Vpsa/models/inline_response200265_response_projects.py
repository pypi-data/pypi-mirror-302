# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200265ResponseProjects(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'id': 'str',
        'volume_id': 'int',
        'was_deleted': 'int',
        'created_at': 'str',
        'modified_at': 'str',
        'directories_count': 'int',
        'directories': 'list[InlineResponse200265ResponseDirectories]'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'id': 'id',
        'volume_id': 'volume_id',
        'was_deleted': 'was_deleted',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'directories_count': 'directories_count',
        'directories': 'directories'
    }

    def __init__(self, name=None, display_name=None, id=None, volume_id=None, was_deleted=None, created_at=None, modified_at=None, directories_count=None, directories=None, _configuration=None):  # noqa: E501
        """InlineResponse200265ResponseProjects - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._id = None
        self._volume_id = None
        self._was_deleted = None
        self._created_at = None
        self._modified_at = None
        self._directories_count = None
        self._directories = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if volume_id is not None:
            self.volume_id = volume_id
        if was_deleted is not None:
            self.was_deleted = was_deleted
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if directories_count is not None:
            self.directories_count = directories_count
        if directories is not None:
            self.directories = directories

    @property
    def name(self):
        """Gets the name of this InlineResponse200265ResponseProjects.  # noqa: E501


        :return: The name of this InlineResponse200265ResponseProjects.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200265ResponseProjects.


        :param name: The name of this InlineResponse200265ResponseProjects.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse200265ResponseProjects.  # noqa: E501


        :return: The display_name of this InlineResponse200265ResponseProjects.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse200265ResponseProjects.


        :param display_name: The display_name of this InlineResponse200265ResponseProjects.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this InlineResponse200265ResponseProjects.  # noqa: E501


        :return: The id of this InlineResponse200265ResponseProjects.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200265ResponseProjects.


        :param id: The id of this InlineResponse200265ResponseProjects.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def volume_id(self):
        """Gets the volume_id of this InlineResponse200265ResponseProjects.  # noqa: E501


        :return: The volume_id of this InlineResponse200265ResponseProjects.  # noqa: E501
        :rtype: int
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this InlineResponse200265ResponseProjects.


        :param volume_id: The volume_id of this InlineResponse200265ResponseProjects.  # noqa: E501
        :type: int
        """

        self._volume_id = volume_id

    @property
    def was_deleted(self):
        """Gets the was_deleted of this InlineResponse200265ResponseProjects.  # noqa: E501


        :return: The was_deleted of this InlineResponse200265ResponseProjects.  # noqa: E501
        :rtype: int
        """
        return self._was_deleted

    @was_deleted.setter
    def was_deleted(self, was_deleted):
        """Sets the was_deleted of this InlineResponse200265ResponseProjects.


        :param was_deleted: The was_deleted of this InlineResponse200265ResponseProjects.  # noqa: E501
        :type: int
        """

        self._was_deleted = was_deleted

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200265ResponseProjects.  # noqa: E501


        :return: The created_at of this InlineResponse200265ResponseProjects.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200265ResponseProjects.


        :param created_at: The created_at of this InlineResponse200265ResponseProjects.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InlineResponse200265ResponseProjects.  # noqa: E501


        :return: The modified_at of this InlineResponse200265ResponseProjects.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InlineResponse200265ResponseProjects.


        :param modified_at: The modified_at of this InlineResponse200265ResponseProjects.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def directories_count(self):
        """Gets the directories_count of this InlineResponse200265ResponseProjects.  # noqa: E501


        :return: The directories_count of this InlineResponse200265ResponseProjects.  # noqa: E501
        :rtype: int
        """
        return self._directories_count

    @directories_count.setter
    def directories_count(self, directories_count):
        """Sets the directories_count of this InlineResponse200265ResponseProjects.


        :param directories_count: The directories_count of this InlineResponse200265ResponseProjects.  # noqa: E501
        :type: int
        """

        self._directories_count = directories_count

    @property
    def directories(self):
        """Gets the directories of this InlineResponse200265ResponseProjects.  # noqa: E501


        :return: The directories of this InlineResponse200265ResponseProjects.  # noqa: E501
        :rtype: list[InlineResponse200265ResponseDirectories]
        """
        return self._directories

    @directories.setter
    def directories(self, directories):
        """Sets the directories of this InlineResponse200265ResponseProjects.


        :param directories: The directories of this InlineResponse200265ResponseProjects.  # noqa: E501
        :type: list[InlineResponse200265ResponseDirectories]
        """

        self._directories = directories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200265ResponseProjects, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200265ResponseProjects):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200265ResponseProjects):
            return True

        return self.to_dict() != other.to_dict()
