# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse20019ResponseVcontrollers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'index': 'str',
        'state': 'str',
        'target': 'str',
        'iscsi_ip': 'str',
        'iscsi_ipv6': 'str',
        'mgmt_ip': 'str',
        'mgmt_ipv6': 'str',
        'be_ip': 'str',
        'fe_ip': 'str',
        'fe_ipv6': 'str',
        'fe_cidr': 'float',
        'fe_ipv6_cidr': 'float',
        'fe_vlan': 'float',
        'fe_gateway': 'str',
        'fe_ipv6_gateway': 'str',
        'software_ver': 'str',
        'heartbeat1': 'str',
        'heartbeat2': 'str',
        'fe_heartbeat': 'str',
        'vpsa_chap_user': 'str',
        'vpsa_chap_secret': 'str',
        'host_chap_user': 'str',
        'host_chap_secret': 'str',
        'ike_psk': 'str',
        'encryption_password_set': 'str',
        'is_encryption_active': 'str',
        'encryption_kms_key_id': 'str',
        'encryption_kms_key_name': 'str',
        'encryption_kms_key_region': 'str',
        'encryption_kms_type': 'str',
        'encryption_kms_set_date': 'str',
        'encryption_kms_restore_date': 'str',
        'sn_host': 'str',
        'cache_size': 'int',
        'cpu_usage_alert': 'int',
        'mem_usage_alert': 'int',
        'cpu_docker_usage_alert': 'int',
        'mem_docker_usage_alert': 'int',
        'recycle_bin': 'str',
        'recycle_bin_grace_period': 'int',
        'dm_concurrency_level': 'int',
        'nfs4_disable_idmapping': 'str',
        'raid_read_mode': 'str',
        'allocation_zone_name': 'str',
        'allocation_zone_display_name': 'str',
        'smb_unix_charset': 'str',
        'smb_dos_charset': 'str',
        'vpsa_uuid': 'str',
        'sod_end_time': 'str',
        'wwpn_count': 'int',
        'integrity_status': 'str',
        'iser_support': 'str'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'index': 'index',
        'state': 'state',
        'target': 'target',
        'iscsi_ip': 'iscsi_ip',
        'iscsi_ipv6': 'iscsi_ipv6',
        'mgmt_ip': 'mgmt_ip',
        'mgmt_ipv6': 'mgmt_ipv6',
        'be_ip': 'be_ip',
        'fe_ip': 'fe_ip',
        'fe_ipv6': 'fe_ipv6',
        'fe_cidr': 'fe_cidr',
        'fe_ipv6_cidr': 'fe_ipv6_cidr',
        'fe_vlan': 'fe_vlan',
        'fe_gateway': 'fe_gateway',
        'fe_ipv6_gateway': 'fe_ipv6_gateway',
        'software_ver': 'software_ver',
        'heartbeat1': 'heartbeat1',
        'heartbeat2': 'heartbeat2',
        'fe_heartbeat': 'fe_heartbeat',
        'vpsa_chap_user': 'vpsa_chap_user',
        'vpsa_chap_secret': 'vpsa_chap_secret',
        'host_chap_user': 'host_chap_user',
        'host_chap_secret': 'host_chap_secret',
        'ike_psk': 'ike_psk',
        'encryption_password_set': 'encryption_password_set',
        'is_encryption_active': 'is_encryption_active',
        'encryption_kms_key_id': 'encryption_kms_key_id',
        'encryption_kms_key_name': 'encryption_kms_key_name',
        'encryption_kms_key_region': 'encryption_kms_key_region',
        'encryption_kms_type': 'encryption_kms_type',
        'encryption_kms_set_date': 'encryption_kms_set_date',
        'encryption_kms_restore_date': 'encryption_kms_restore_date',
        'sn_host': 'sn_host',
        'cache_size': 'cache_size',
        'cpu_usage_alert': 'cpu_usage_alert',
        'mem_usage_alert': 'mem_usage_alert',
        'cpu_docker_usage_alert': 'cpu_docker_usage_alert',
        'mem_docker_usage_alert': 'mem_docker_usage_alert',
        'recycle_bin': 'recycle_bin',
        'recycle_bin_grace_period': 'recycle_bin_grace_period',
        'dm_concurrency_level': 'dm_concurrency_level',
        'nfs4_disable_idmapping': 'nfs4_disable_idmapping',
        'raid_read_mode': 'raid_read_mode',
        'allocation_zone_name': 'allocation_zone_name',
        'allocation_zone_display_name': 'allocation_zone_display_name',
        'smb_unix_charset': 'smb_unix_charset',
        'smb_dos_charset': 'smb_dos_charset',
        'vpsa_uuid': 'vpsa_uuid',
        'sod_end_time': 'sod_end_time',
        'wwpn_count': 'wwpn_count',
        'integrity_status': 'integrity_status',
        'iser_support': 'iser_support'
    }

    def __init__(self, name=None, display_name=None, index=None, state=None, target=None, iscsi_ip=None, iscsi_ipv6=None, mgmt_ip=None, mgmt_ipv6=None, be_ip=None, fe_ip=None, fe_ipv6=None, fe_cidr=None, fe_ipv6_cidr=None, fe_vlan=None, fe_gateway=None, fe_ipv6_gateway=None, software_ver=None, heartbeat1=None, heartbeat2=None, fe_heartbeat=None, vpsa_chap_user=None, vpsa_chap_secret=None, host_chap_user=None, host_chap_secret=None, ike_psk=None, encryption_password_set=None, is_encryption_active=None, encryption_kms_key_id=None, encryption_kms_key_name=None, encryption_kms_key_region=None, encryption_kms_type=None, encryption_kms_set_date=None, encryption_kms_restore_date=None, sn_host=None, cache_size=None, cpu_usage_alert=None, mem_usage_alert=None, cpu_docker_usage_alert=None, mem_docker_usage_alert=None, recycle_bin=None, recycle_bin_grace_period=None, dm_concurrency_level=None, nfs4_disable_idmapping=None, raid_read_mode=None, allocation_zone_name=None, allocation_zone_display_name=None, smb_unix_charset=None, smb_dos_charset=None, vpsa_uuid=None, sod_end_time=None, wwpn_count=None, integrity_status=None, iser_support=None, _configuration=None):  # noqa: E501
        """InlineResponse20019ResponseVcontrollers - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._index = None
        self._state = None
        self._target = None
        self._iscsi_ip = None
        self._iscsi_ipv6 = None
        self._mgmt_ip = None
        self._mgmt_ipv6 = None
        self._be_ip = None
        self._fe_ip = None
        self._fe_ipv6 = None
        self._fe_cidr = None
        self._fe_ipv6_cidr = None
        self._fe_vlan = None
        self._fe_gateway = None
        self._fe_ipv6_gateway = None
        self._software_ver = None
        self._heartbeat1 = None
        self._heartbeat2 = None
        self._fe_heartbeat = None
        self._vpsa_chap_user = None
        self._vpsa_chap_secret = None
        self._host_chap_user = None
        self._host_chap_secret = None
        self._ike_psk = None
        self._encryption_password_set = None
        self._is_encryption_active = None
        self._encryption_kms_key_id = None
        self._encryption_kms_key_name = None
        self._encryption_kms_key_region = None
        self._encryption_kms_type = None
        self._encryption_kms_set_date = None
        self._encryption_kms_restore_date = None
        self._sn_host = None
        self._cache_size = None
        self._cpu_usage_alert = None
        self._mem_usage_alert = None
        self._cpu_docker_usage_alert = None
        self._mem_docker_usage_alert = None
        self._recycle_bin = None
        self._recycle_bin_grace_period = None
        self._dm_concurrency_level = None
        self._nfs4_disable_idmapping = None
        self._raid_read_mode = None
        self._allocation_zone_name = None
        self._allocation_zone_display_name = None
        self._smb_unix_charset = None
        self._smb_dos_charset = None
        self._vpsa_uuid = None
        self._sod_end_time = None
        self._wwpn_count = None
        self._integrity_status = None
        self._iser_support = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if index is not None:
            self.index = index
        if state is not None:
            self.state = state
        if target is not None:
            self.target = target
        if iscsi_ip is not None:
            self.iscsi_ip = iscsi_ip
        if iscsi_ipv6 is not None:
            self.iscsi_ipv6 = iscsi_ipv6
        if mgmt_ip is not None:
            self.mgmt_ip = mgmt_ip
        if mgmt_ipv6 is not None:
            self.mgmt_ipv6 = mgmt_ipv6
        if be_ip is not None:
            self.be_ip = be_ip
        if fe_ip is not None:
            self.fe_ip = fe_ip
        if fe_ipv6 is not None:
            self.fe_ipv6 = fe_ipv6
        if fe_cidr is not None:
            self.fe_cidr = fe_cidr
        if fe_ipv6_cidr is not None:
            self.fe_ipv6_cidr = fe_ipv6_cidr
        if fe_vlan is not None:
            self.fe_vlan = fe_vlan
        if fe_gateway is not None:
            self.fe_gateway = fe_gateway
        if fe_ipv6_gateway is not None:
            self.fe_ipv6_gateway = fe_ipv6_gateway
        if software_ver is not None:
            self.software_ver = software_ver
        if heartbeat1 is not None:
            self.heartbeat1 = heartbeat1
        if heartbeat2 is not None:
            self.heartbeat2 = heartbeat2
        if fe_heartbeat is not None:
            self.fe_heartbeat = fe_heartbeat
        if vpsa_chap_user is not None:
            self.vpsa_chap_user = vpsa_chap_user
        if vpsa_chap_secret is not None:
            self.vpsa_chap_secret = vpsa_chap_secret
        if host_chap_user is not None:
            self.host_chap_user = host_chap_user
        if host_chap_secret is not None:
            self.host_chap_secret = host_chap_secret
        if ike_psk is not None:
            self.ike_psk = ike_psk
        if encryption_password_set is not None:
            self.encryption_password_set = encryption_password_set
        if is_encryption_active is not None:
            self.is_encryption_active = is_encryption_active
        if encryption_kms_key_id is not None:
            self.encryption_kms_key_id = encryption_kms_key_id
        if encryption_kms_key_name is not None:
            self.encryption_kms_key_name = encryption_kms_key_name
        if encryption_kms_key_region is not None:
            self.encryption_kms_key_region = encryption_kms_key_region
        if encryption_kms_type is not None:
            self.encryption_kms_type = encryption_kms_type
        if encryption_kms_set_date is not None:
            self.encryption_kms_set_date = encryption_kms_set_date
        if encryption_kms_restore_date is not None:
            self.encryption_kms_restore_date = encryption_kms_restore_date
        if sn_host is not None:
            self.sn_host = sn_host
        if cache_size is not None:
            self.cache_size = cache_size
        if cpu_usage_alert is not None:
            self.cpu_usage_alert = cpu_usage_alert
        if mem_usage_alert is not None:
            self.mem_usage_alert = mem_usage_alert
        if cpu_docker_usage_alert is not None:
            self.cpu_docker_usage_alert = cpu_docker_usage_alert
        if mem_docker_usage_alert is not None:
            self.mem_docker_usage_alert = mem_docker_usage_alert
        if recycle_bin is not None:
            self.recycle_bin = recycle_bin
        if recycle_bin_grace_period is not None:
            self.recycle_bin_grace_period = recycle_bin_grace_period
        if dm_concurrency_level is not None:
            self.dm_concurrency_level = dm_concurrency_level
        if nfs4_disable_idmapping is not None:
            self.nfs4_disable_idmapping = nfs4_disable_idmapping
        if raid_read_mode is not None:
            self.raid_read_mode = raid_read_mode
        if allocation_zone_name is not None:
            self.allocation_zone_name = allocation_zone_name
        if allocation_zone_display_name is not None:
            self.allocation_zone_display_name = allocation_zone_display_name
        if smb_unix_charset is not None:
            self.smb_unix_charset = smb_unix_charset
        if smb_dos_charset is not None:
            self.smb_dos_charset = smb_dos_charset
        if vpsa_uuid is not None:
            self.vpsa_uuid = vpsa_uuid
        if sod_end_time is not None:
            self.sod_end_time = sod_end_time
        if wwpn_count is not None:
            self.wwpn_count = wwpn_count
        if integrity_status is not None:
            self.integrity_status = integrity_status
        if iser_support is not None:
            self.iser_support = iser_support

    @property
    def name(self):
        """Gets the name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20019ResponseVcontrollers.


        :param name: The name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The display_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse20019ResponseVcontrollers.


        :param display_name: The display_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def index(self):
        """Gets the index of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The index of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this InlineResponse20019ResponseVcontrollers.


        :param index: The index of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._index = index

    @property
    def state(self):
        """Gets the state of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The state of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20019ResponseVcontrollers.


        :param state: The state of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def target(self):
        """Gets the target of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The target of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this InlineResponse20019ResponseVcontrollers.


        :param target: The target of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def iscsi_ip(self):
        """Gets the iscsi_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The iscsi_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._iscsi_ip

    @iscsi_ip.setter
    def iscsi_ip(self, iscsi_ip):
        """Sets the iscsi_ip of this InlineResponse20019ResponseVcontrollers.


        :param iscsi_ip: The iscsi_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._iscsi_ip = iscsi_ip

    @property
    def iscsi_ipv6(self):
        """Gets the iscsi_ipv6 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The iscsi_ipv6 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._iscsi_ipv6

    @iscsi_ipv6.setter
    def iscsi_ipv6(self, iscsi_ipv6):
        """Sets the iscsi_ipv6 of this InlineResponse20019ResponseVcontrollers.


        :param iscsi_ipv6: The iscsi_ipv6 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._iscsi_ipv6 = iscsi_ipv6

    @property
    def mgmt_ip(self):
        """Gets the mgmt_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The mgmt_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_ip

    @mgmt_ip.setter
    def mgmt_ip(self, mgmt_ip):
        """Sets the mgmt_ip of this InlineResponse20019ResponseVcontrollers.


        :param mgmt_ip: The mgmt_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._mgmt_ip = mgmt_ip

    @property
    def mgmt_ipv6(self):
        """Gets the mgmt_ipv6 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The mgmt_ipv6 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_ipv6

    @mgmt_ipv6.setter
    def mgmt_ipv6(self, mgmt_ipv6):
        """Sets the mgmt_ipv6 of this InlineResponse20019ResponseVcontrollers.


        :param mgmt_ipv6: The mgmt_ipv6 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._mgmt_ipv6 = mgmt_ipv6

    @property
    def be_ip(self):
        """Gets the be_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The be_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._be_ip

    @be_ip.setter
    def be_ip(self, be_ip):
        """Sets the be_ip of this InlineResponse20019ResponseVcontrollers.


        :param be_ip: The be_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._be_ip = be_ip

    @property
    def fe_ip(self):
        """Gets the fe_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The fe_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._fe_ip

    @fe_ip.setter
    def fe_ip(self, fe_ip):
        """Sets the fe_ip of this InlineResponse20019ResponseVcontrollers.


        :param fe_ip: The fe_ip of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._fe_ip = fe_ip

    @property
    def fe_ipv6(self):
        """Gets the fe_ipv6 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The fe_ipv6 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._fe_ipv6

    @fe_ipv6.setter
    def fe_ipv6(self, fe_ipv6):
        """Sets the fe_ipv6 of this InlineResponse20019ResponseVcontrollers.


        :param fe_ipv6: The fe_ipv6 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._fe_ipv6 = fe_ipv6

    @property
    def fe_cidr(self):
        """Gets the fe_cidr of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The fe_cidr of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: float
        """
        return self._fe_cidr

    @fe_cidr.setter
    def fe_cidr(self, fe_cidr):
        """Sets the fe_cidr of this InlineResponse20019ResponseVcontrollers.


        :param fe_cidr: The fe_cidr of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: float
        """

        self._fe_cidr = fe_cidr

    @property
    def fe_ipv6_cidr(self):
        """Gets the fe_ipv6_cidr of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The fe_ipv6_cidr of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: float
        """
        return self._fe_ipv6_cidr

    @fe_ipv6_cidr.setter
    def fe_ipv6_cidr(self, fe_ipv6_cidr):
        """Sets the fe_ipv6_cidr of this InlineResponse20019ResponseVcontrollers.


        :param fe_ipv6_cidr: The fe_ipv6_cidr of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: float
        """

        self._fe_ipv6_cidr = fe_ipv6_cidr

    @property
    def fe_vlan(self):
        """Gets the fe_vlan of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The fe_vlan of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: float
        """
        return self._fe_vlan

    @fe_vlan.setter
    def fe_vlan(self, fe_vlan):
        """Sets the fe_vlan of this InlineResponse20019ResponseVcontrollers.


        :param fe_vlan: The fe_vlan of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: float
        """

        self._fe_vlan = fe_vlan

    @property
    def fe_gateway(self):
        """Gets the fe_gateway of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The fe_gateway of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._fe_gateway

    @fe_gateway.setter
    def fe_gateway(self, fe_gateway):
        """Sets the fe_gateway of this InlineResponse20019ResponseVcontrollers.


        :param fe_gateway: The fe_gateway of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._fe_gateway = fe_gateway

    @property
    def fe_ipv6_gateway(self):
        """Gets the fe_ipv6_gateway of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The fe_ipv6_gateway of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._fe_ipv6_gateway

    @fe_ipv6_gateway.setter
    def fe_ipv6_gateway(self, fe_ipv6_gateway):
        """Sets the fe_ipv6_gateway of this InlineResponse20019ResponseVcontrollers.


        :param fe_ipv6_gateway: The fe_ipv6_gateway of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._fe_ipv6_gateway = fe_ipv6_gateway

    @property
    def software_ver(self):
        """Gets the software_ver of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The software_ver of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._software_ver

    @software_ver.setter
    def software_ver(self, software_ver):
        """Sets the software_ver of this InlineResponse20019ResponseVcontrollers.


        :param software_ver: The software_ver of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._software_ver = software_ver

    @property
    def heartbeat1(self):
        """Gets the heartbeat1 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The heartbeat1 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._heartbeat1

    @heartbeat1.setter
    def heartbeat1(self, heartbeat1):
        """Sets the heartbeat1 of this InlineResponse20019ResponseVcontrollers.


        :param heartbeat1: The heartbeat1 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._heartbeat1 = heartbeat1

    @property
    def heartbeat2(self):
        """Gets the heartbeat2 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The heartbeat2 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._heartbeat2

    @heartbeat2.setter
    def heartbeat2(self, heartbeat2):
        """Sets the heartbeat2 of this InlineResponse20019ResponseVcontrollers.


        :param heartbeat2: The heartbeat2 of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._heartbeat2 = heartbeat2

    @property
    def fe_heartbeat(self):
        """Gets the fe_heartbeat of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The fe_heartbeat of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._fe_heartbeat

    @fe_heartbeat.setter
    def fe_heartbeat(self, fe_heartbeat):
        """Sets the fe_heartbeat of this InlineResponse20019ResponseVcontrollers.


        :param fe_heartbeat: The fe_heartbeat of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._fe_heartbeat = fe_heartbeat

    @property
    def vpsa_chap_user(self):
        """Gets the vpsa_chap_user of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The vpsa_chap_user of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_chap_user

    @vpsa_chap_user.setter
    def vpsa_chap_user(self, vpsa_chap_user):
        """Sets the vpsa_chap_user of this InlineResponse20019ResponseVcontrollers.


        :param vpsa_chap_user: The vpsa_chap_user of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._vpsa_chap_user = vpsa_chap_user

    @property
    def vpsa_chap_secret(self):
        """Gets the vpsa_chap_secret of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The vpsa_chap_secret of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_chap_secret

    @vpsa_chap_secret.setter
    def vpsa_chap_secret(self, vpsa_chap_secret):
        """Sets the vpsa_chap_secret of this InlineResponse20019ResponseVcontrollers.


        :param vpsa_chap_secret: The vpsa_chap_secret of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._vpsa_chap_secret = vpsa_chap_secret

    @property
    def host_chap_user(self):
        """Gets the host_chap_user of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The host_chap_user of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._host_chap_user

    @host_chap_user.setter
    def host_chap_user(self, host_chap_user):
        """Sets the host_chap_user of this InlineResponse20019ResponseVcontrollers.


        :param host_chap_user: The host_chap_user of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._host_chap_user = host_chap_user

    @property
    def host_chap_secret(self):
        """Gets the host_chap_secret of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The host_chap_secret of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._host_chap_secret

    @host_chap_secret.setter
    def host_chap_secret(self, host_chap_secret):
        """Sets the host_chap_secret of this InlineResponse20019ResponseVcontrollers.


        :param host_chap_secret: The host_chap_secret of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._host_chap_secret = host_chap_secret

    @property
    def ike_psk(self):
        """Gets the ike_psk of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The ike_psk of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._ike_psk

    @ike_psk.setter
    def ike_psk(self, ike_psk):
        """Sets the ike_psk of this InlineResponse20019ResponseVcontrollers.


        :param ike_psk: The ike_psk of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._ike_psk = ike_psk

    @property
    def encryption_password_set(self):
        """Gets the encryption_password_set of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The encryption_password_set of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._encryption_password_set

    @encryption_password_set.setter
    def encryption_password_set(self, encryption_password_set):
        """Sets the encryption_password_set of this InlineResponse20019ResponseVcontrollers.


        :param encryption_password_set: The encryption_password_set of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._encryption_password_set = encryption_password_set

    @property
    def is_encryption_active(self):
        """Gets the is_encryption_active of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The is_encryption_active of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._is_encryption_active

    @is_encryption_active.setter
    def is_encryption_active(self, is_encryption_active):
        """Sets the is_encryption_active of this InlineResponse20019ResponseVcontrollers.


        :param is_encryption_active: The is_encryption_active of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._is_encryption_active = is_encryption_active

    @property
    def encryption_kms_key_id(self):
        """Gets the encryption_kms_key_id of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The encryption_kms_key_id of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._encryption_kms_key_id

    @encryption_kms_key_id.setter
    def encryption_kms_key_id(self, encryption_kms_key_id):
        """Sets the encryption_kms_key_id of this InlineResponse20019ResponseVcontrollers.


        :param encryption_kms_key_id: The encryption_kms_key_id of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._encryption_kms_key_id = encryption_kms_key_id

    @property
    def encryption_kms_key_name(self):
        """Gets the encryption_kms_key_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The encryption_kms_key_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._encryption_kms_key_name

    @encryption_kms_key_name.setter
    def encryption_kms_key_name(self, encryption_kms_key_name):
        """Sets the encryption_kms_key_name of this InlineResponse20019ResponseVcontrollers.


        :param encryption_kms_key_name: The encryption_kms_key_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._encryption_kms_key_name = encryption_kms_key_name

    @property
    def encryption_kms_key_region(self):
        """Gets the encryption_kms_key_region of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The encryption_kms_key_region of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._encryption_kms_key_region

    @encryption_kms_key_region.setter
    def encryption_kms_key_region(self, encryption_kms_key_region):
        """Sets the encryption_kms_key_region of this InlineResponse20019ResponseVcontrollers.


        :param encryption_kms_key_region: The encryption_kms_key_region of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._encryption_kms_key_region = encryption_kms_key_region

    @property
    def encryption_kms_type(self):
        """Gets the encryption_kms_type of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The encryption_kms_type of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._encryption_kms_type

    @encryption_kms_type.setter
    def encryption_kms_type(self, encryption_kms_type):
        """Sets the encryption_kms_type of this InlineResponse20019ResponseVcontrollers.


        :param encryption_kms_type: The encryption_kms_type of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._encryption_kms_type = encryption_kms_type

    @property
    def encryption_kms_set_date(self):
        """Gets the encryption_kms_set_date of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The encryption_kms_set_date of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._encryption_kms_set_date

    @encryption_kms_set_date.setter
    def encryption_kms_set_date(self, encryption_kms_set_date):
        """Sets the encryption_kms_set_date of this InlineResponse20019ResponseVcontrollers.


        :param encryption_kms_set_date: The encryption_kms_set_date of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._encryption_kms_set_date = encryption_kms_set_date

    @property
    def encryption_kms_restore_date(self):
        """Gets the encryption_kms_restore_date of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The encryption_kms_restore_date of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._encryption_kms_restore_date

    @encryption_kms_restore_date.setter
    def encryption_kms_restore_date(self, encryption_kms_restore_date):
        """Sets the encryption_kms_restore_date of this InlineResponse20019ResponseVcontrollers.


        :param encryption_kms_restore_date: The encryption_kms_restore_date of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._encryption_kms_restore_date = encryption_kms_restore_date

    @property
    def sn_host(self):
        """Gets the sn_host of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The sn_host of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._sn_host

    @sn_host.setter
    def sn_host(self, sn_host):
        """Sets the sn_host of this InlineResponse20019ResponseVcontrollers.


        :param sn_host: The sn_host of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._sn_host = sn_host

    @property
    def cache_size(self):
        """Gets the cache_size of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The cache_size of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: int
        """
        return self._cache_size

    @cache_size.setter
    def cache_size(self, cache_size):
        """Sets the cache_size of this InlineResponse20019ResponseVcontrollers.


        :param cache_size: The cache_size of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: int
        """

        self._cache_size = cache_size

    @property
    def cpu_usage_alert(self):
        """Gets the cpu_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The cpu_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: int
        """
        return self._cpu_usage_alert

    @cpu_usage_alert.setter
    def cpu_usage_alert(self, cpu_usage_alert):
        """Sets the cpu_usage_alert of this InlineResponse20019ResponseVcontrollers.


        :param cpu_usage_alert: The cpu_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: int
        """

        self._cpu_usage_alert = cpu_usage_alert

    @property
    def mem_usage_alert(self):
        """Gets the mem_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The mem_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: int
        """
        return self._mem_usage_alert

    @mem_usage_alert.setter
    def mem_usage_alert(self, mem_usage_alert):
        """Sets the mem_usage_alert of this InlineResponse20019ResponseVcontrollers.


        :param mem_usage_alert: The mem_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: int
        """

        self._mem_usage_alert = mem_usage_alert

    @property
    def cpu_docker_usage_alert(self):
        """Gets the cpu_docker_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The cpu_docker_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: int
        """
        return self._cpu_docker_usage_alert

    @cpu_docker_usage_alert.setter
    def cpu_docker_usage_alert(self, cpu_docker_usage_alert):
        """Sets the cpu_docker_usage_alert of this InlineResponse20019ResponseVcontrollers.


        :param cpu_docker_usage_alert: The cpu_docker_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: int
        """

        self._cpu_docker_usage_alert = cpu_docker_usage_alert

    @property
    def mem_docker_usage_alert(self):
        """Gets the mem_docker_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The mem_docker_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: int
        """
        return self._mem_docker_usage_alert

    @mem_docker_usage_alert.setter
    def mem_docker_usage_alert(self, mem_docker_usage_alert):
        """Sets the mem_docker_usage_alert of this InlineResponse20019ResponseVcontrollers.


        :param mem_docker_usage_alert: The mem_docker_usage_alert of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: int
        """

        self._mem_docker_usage_alert = mem_docker_usage_alert

    @property
    def recycle_bin(self):
        """Gets the recycle_bin of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The recycle_bin of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._recycle_bin

    @recycle_bin.setter
    def recycle_bin(self, recycle_bin):
        """Sets the recycle_bin of this InlineResponse20019ResponseVcontrollers.


        :param recycle_bin: The recycle_bin of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._recycle_bin = recycle_bin

    @property
    def recycle_bin_grace_period(self):
        """Gets the recycle_bin_grace_period of this InlineResponse20019ResponseVcontrollers.  # noqa: E501

        Grace period in hours  # noqa: E501

        :return: The recycle_bin_grace_period of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: int
        """
        return self._recycle_bin_grace_period

    @recycle_bin_grace_period.setter
    def recycle_bin_grace_period(self, recycle_bin_grace_period):
        """Sets the recycle_bin_grace_period of this InlineResponse20019ResponseVcontrollers.

        Grace period in hours  # noqa: E501

        :param recycle_bin_grace_period: The recycle_bin_grace_period of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: int
        """

        self._recycle_bin_grace_period = recycle_bin_grace_period

    @property
    def dm_concurrency_level(self):
        """Gets the dm_concurrency_level of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The dm_concurrency_level of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: int
        """
        return self._dm_concurrency_level

    @dm_concurrency_level.setter
    def dm_concurrency_level(self, dm_concurrency_level):
        """Sets the dm_concurrency_level of this InlineResponse20019ResponseVcontrollers.


        :param dm_concurrency_level: The dm_concurrency_level of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: int
        """

        self._dm_concurrency_level = dm_concurrency_level

    @property
    def nfs4_disable_idmapping(self):
        """Gets the nfs4_disable_idmapping of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The nfs4_disable_idmapping of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._nfs4_disable_idmapping

    @nfs4_disable_idmapping.setter
    def nfs4_disable_idmapping(self, nfs4_disable_idmapping):
        """Sets the nfs4_disable_idmapping of this InlineResponse20019ResponseVcontrollers.


        :param nfs4_disable_idmapping: The nfs4_disable_idmapping of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._nfs4_disable_idmapping = nfs4_disable_idmapping

    @property
    def raid_read_mode(self):
        """Gets the raid_read_mode of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The raid_read_mode of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._raid_read_mode

    @raid_read_mode.setter
    def raid_read_mode(self, raid_read_mode):
        """Sets the raid_read_mode of this InlineResponse20019ResponseVcontrollers.


        :param raid_read_mode: The raid_read_mode of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._raid_read_mode = raid_read_mode

    @property
    def allocation_zone_name(self):
        """Gets the allocation_zone_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The allocation_zone_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._allocation_zone_name

    @allocation_zone_name.setter
    def allocation_zone_name(self, allocation_zone_name):
        """Sets the allocation_zone_name of this InlineResponse20019ResponseVcontrollers.


        :param allocation_zone_name: The allocation_zone_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._allocation_zone_name = allocation_zone_name

    @property
    def allocation_zone_display_name(self):
        """Gets the allocation_zone_display_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The allocation_zone_display_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._allocation_zone_display_name

    @allocation_zone_display_name.setter
    def allocation_zone_display_name(self, allocation_zone_display_name):
        """Sets the allocation_zone_display_name of this InlineResponse20019ResponseVcontrollers.


        :param allocation_zone_display_name: The allocation_zone_display_name of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._allocation_zone_display_name = allocation_zone_display_name

    @property
    def smb_unix_charset(self):
        """Gets the smb_unix_charset of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The smb_unix_charset of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._smb_unix_charset

    @smb_unix_charset.setter
    def smb_unix_charset(self, smb_unix_charset):
        """Sets the smb_unix_charset of this InlineResponse20019ResponseVcontrollers.


        :param smb_unix_charset: The smb_unix_charset of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._smb_unix_charset = smb_unix_charset

    @property
    def smb_dos_charset(self):
        """Gets the smb_dos_charset of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The smb_dos_charset of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._smb_dos_charset

    @smb_dos_charset.setter
    def smb_dos_charset(self, smb_dos_charset):
        """Sets the smb_dos_charset of this InlineResponse20019ResponseVcontrollers.


        :param smb_dos_charset: The smb_dos_charset of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._smb_dos_charset = smb_dos_charset

    @property
    def vpsa_uuid(self):
        """Gets the vpsa_uuid of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The vpsa_uuid of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_uuid

    @vpsa_uuid.setter
    def vpsa_uuid(self, vpsa_uuid):
        """Sets the vpsa_uuid of this InlineResponse20019ResponseVcontrollers.


        :param vpsa_uuid: The vpsa_uuid of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._vpsa_uuid = vpsa_uuid

    @property
    def sod_end_time(self):
        """Gets the sod_end_time of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The sod_end_time of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._sod_end_time

    @sod_end_time.setter
    def sod_end_time(self, sod_end_time):
        """Sets the sod_end_time of this InlineResponse20019ResponseVcontrollers.


        :param sod_end_time: The sod_end_time of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._sod_end_time = sod_end_time

    @property
    def wwpn_count(self):
        """Gets the wwpn_count of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The wwpn_count of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: int
        """
        return self._wwpn_count

    @wwpn_count.setter
    def wwpn_count(self, wwpn_count):
        """Sets the wwpn_count of this InlineResponse20019ResponseVcontrollers.


        :param wwpn_count: The wwpn_count of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: int
        """

        self._wwpn_count = wwpn_count

    @property
    def integrity_status(self):
        """Gets the integrity_status of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The integrity_status of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._integrity_status

    @integrity_status.setter
    def integrity_status(self, integrity_status):
        """Sets the integrity_status of this InlineResponse20019ResponseVcontrollers.


        :param integrity_status: The integrity_status of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._integrity_status = integrity_status

    @property
    def iser_support(self):
        """Gets the iser_support of this InlineResponse20019ResponseVcontrollers.  # noqa: E501


        :return: The iser_support of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :rtype: str
        """
        return self._iser_support

    @iser_support.setter
    def iser_support(self, iser_support):
        """Sets the iser_support of this InlineResponse20019ResponseVcontrollers.


        :param iser_support: The iser_support of this InlineResponse20019ResponseVcontrollers.  # noqa: E501
        :type: str
        """

        self._iser_support = iser_support

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20019ResponseVcontrollers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019ResponseVcontrollers):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20019ResponseVcontrollers):
            return True

        return self.to_dict() != other.to_dict()
