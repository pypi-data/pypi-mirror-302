# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..types.create_api_key_response import CreateApiKeyResponse
from ..types.user_with_permissions_response import UserWithPermissionsResponse


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def me(self, *, request_options: typing.Optional[RequestOptions] = None) -> UserWithPermissionsResponse:
        """
        Get the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserWithPermissionsResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.user.me()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/user/me", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(UserWithPermissionsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_or_replace_api_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateApiKeyResponse:
        """
        Create or replace an API key for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateApiKeyResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.user.create_or_replace_api_key()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/user/api_key", method="PUT", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(CreateApiKeyResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_api_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Any]:
        """
        Delete an API key for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Any]
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.user.delete_api_key()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/user/api_key", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def me(self, *, request_options: typing.Optional[RequestOptions] = None) -> UserWithPermissionsResponse:
        """
        Get the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserWithPermissionsResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.user.me()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/user/me", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(UserWithPermissionsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_or_replace_api_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateApiKeyResponse:
        """
        Create or replace an API key for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateApiKeyResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.user.create_or_replace_api_key()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/user/api_key", method="PUT", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(CreateApiKeyResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_api_key(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Any]:
        """
        Delete an API key for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Any]
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.user.delete_api_key()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/user/api_key", method="DELETE", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Dict[str, typing.Any], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
