# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200229ResponseVolumes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'cg_display_name': 'str',
        'cg_name': 'str',
        'cg_user_created': 'str',
        'pool_display_name': 'str',
        'pool_name': 'str',
        'pool_version': 'int',
        'status': 'str',
        'virtual_capacity': 'int',
        'server_name': 'str',
        'av_scan_policy_name': 'str',
        'provisioned_capacity': 'int',
        'server_ext_names': 'str',
        'life_cycle_policy_display_name': 'str',
        'life_cycle_policy_ext_name': 'str',
        'data_type': 'str',
        'thin': 'str',
        'encryption': 'str',
        'encryption_key_size': 'str',
        'total_capacity': 'float',
        'available_capacity': 'float',
        'num_of_filesystem_objects': 'int',
        'capacity_mode': 'str',
        'allocated_capacity': 'float',
        'data_copies_capacity': 'float',
        'access_type': 'str',
        'read_only': 'str',
        'nfs_export_path': 'str',
        'smb_export_path': 'str',
        'additional_smb_export_paths_count': 'int',
        'mount_sync': 'str',
        'atime_update': 'str',
        'read_ahead_kb': 'int',
        'ext_metering': 'str',
        'images_repo': 'str',
        'flc_db': 'str',
        'quarantine_repo': 'str',
        'audit_repo': 'str',
        'nfs_root_squash': 'str',
        'nfs_all_squash': 'str',
        'nfs_anon_uid': 'str',
        'nfs_anon_gid': 'str',
        'smb_only': 'str',
        'smb_guest': 'str',
        'smb_windows_acl': 'str',
        'smb_map_archive': 'str',
        'smb_file_create_mask': 'str',
        'smb_dir_create_mask': 'str',
        'smb_aio_size': 'int',
        'smb_browseable': 'str',
        'smb_hidden_files': 'str',
        'smb_encryption_mode': 'str',
        'smb_case_sensitive': 'str',
        'smb_mangled_names': 'str',
        'smb_hide_unreadable': 'str',
        'smb_hide_unwriteable': 'str',
        'smb_hide_dot_files': 'str',
        'smb_store_dos_attributes': 'str',
        'smb_enable_oplocks': 'str',
        'audit_enable': 'str',
        'capacity_history': 'int',
        'alert_mode': 'int',
        'emergency_mode_mb': 'int',
        'auto_expand_on_emergency': 'str',
        'auto_expand_by': 'int',
        'max_capacity': 'int',
        'uquota_state': 'str',
        'gquota_state': 'str',
        'pquota_state': 'str',
        'target': 'str',
        'lun': 'str',
        'cache': 'str',
        'tenant_id': 'int',
        'has_mirror': 'str',
        'has_backup': 'str',
        'is_remote_clone_source': 'str',
        'has_snapshots': 'str',
        'shadow_copy_enabled': 'str',
        'is_shadow_copy_clone': 'str',
        'read_iops_limit': 'str',
        'read_mbps_limit': 'str',
        'write_iops_limit': 'str',
        'write_mbps_limit': 'str',
        'read_iops_capping': 'str',
        'read_mbps_capping': 'str',
        'write_iops_capping': 'str',
        'write_mbps_capping': 'str',
        'compress': 'str',
        'dedupe': 'str',
        'mtr_histograms': 'str',
        'flc_state': 'str',
        'flc_scan_state': 'str',
        'flc_scan_progress': 'float',
        'flc_scan_remaining_time_seconds': 'int',
        'thresholds': 'str',
        'comment': 'str',
        'created_at': 'str',
        'modified_at': 'str',
        'flc_policy_name': 'str',
        'snapshots_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'cg_display_name': 'cg_display_name',
        'cg_name': 'cg_name',
        'cg_user_created': 'cg_user_created',
        'pool_display_name': 'pool_display_name',
        'pool_name': 'pool_name',
        'pool_version': 'pool_version',
        'status': 'status',
        'virtual_capacity': 'virtual_capacity',
        'server_name': 'server_name',
        'av_scan_policy_name': 'av_scan_policy_name',
        'provisioned_capacity': 'provisioned_capacity',
        'server_ext_names': 'server_ext_names',
        'life_cycle_policy_display_name': 'life_cycle_policy_display_name',
        'life_cycle_policy_ext_name': 'life_cycle_policy_ext_name',
        'data_type': 'data_type',
        'thin': 'thin',
        'encryption': 'encryption',
        'encryption_key_size': 'encryption_key_size',
        'total_capacity': 'total_capacity',
        'available_capacity': 'available_capacity',
        'num_of_filesystem_objects': 'num_of_filesystem_objects',
        'capacity_mode': 'capacity_mode',
        'allocated_capacity': 'allocated_capacity',
        'data_copies_capacity': 'data_copies_capacity',
        'access_type': 'access_type',
        'read_only': 'read_only',
        'nfs_export_path': 'nfs_export_path',
        'smb_export_path': 'smb_export_path',
        'additional_smb_export_paths_count': 'additional_smb_export_paths_count',
        'mount_sync': 'mount_sync',
        'atime_update': 'atime_update',
        'read_ahead_kb': 'read_ahead_kb',
        'ext_metering': 'ext_metering',
        'images_repo': 'images_repo',
        'flc_db': 'flc_db',
        'quarantine_repo': 'quarantine_repo',
        'audit_repo': 'audit_repo',
        'nfs_root_squash': 'nfs_root_squash',
        'nfs_all_squash': 'nfs_all_squash',
        'nfs_anon_uid': 'nfs_anon_uid',
        'nfs_anon_gid': 'nfs_anon_gid',
        'smb_only': 'smb_only',
        'smb_guest': 'smb_guest',
        'smb_windows_acl': 'smb_windows_acl',
        'smb_map_archive': 'smb_map_archive',
        'smb_file_create_mask': 'smb_file_create_mask',
        'smb_dir_create_mask': 'smb_dir_create_mask',
        'smb_aio_size': 'smb_aio_size',
        'smb_browseable': 'smb_browseable',
        'smb_hidden_files': 'smb_hidden_files',
        'smb_encryption_mode': 'smb_encryption_mode',
        'smb_case_sensitive': 'smb_case_sensitive',
        'smb_mangled_names': 'smb_mangled_names',
        'smb_hide_unreadable': 'smb_hide_unreadable',
        'smb_hide_unwriteable': 'smb_hide_unwriteable',
        'smb_hide_dot_files': 'smb_hide_dot_files',
        'smb_store_dos_attributes': 'smb_store_dos_attributes',
        'smb_enable_oplocks': 'smb_enable_oplocks',
        'audit_enable': 'audit_enable',
        'capacity_history': 'capacity_history',
        'alert_mode': 'alert_mode',
        'emergency_mode_mb': 'emergency_mode_mb',
        'auto_expand_on_emergency': 'auto_expand_on_emergency',
        'auto_expand_by': 'auto_expand_by',
        'max_capacity': 'max_capacity',
        'uquota_state': 'uquota_state',
        'gquota_state': 'gquota_state',
        'pquota_state': 'pquota_state',
        'target': 'target',
        'lun': 'lun',
        'cache': 'cache',
        'tenant_id': 'tenant_id',
        'has_mirror': 'has_mirror',
        'has_backup': 'has_backup',
        'is_remote_clone_source': 'is_remote_clone_source',
        'has_snapshots': 'has_snapshots',
        'shadow_copy_enabled': 'shadow_copy_enabled',
        'is_shadow_copy_clone': 'is_shadow_copy_clone',
        'read_iops_limit': 'read_iops_limit',
        'read_mbps_limit': 'read_mbps_limit',
        'write_iops_limit': 'write_iops_limit',
        'write_mbps_limit': 'write_mbps_limit',
        'read_iops_capping': 'read_iops_capping',
        'read_mbps_capping': 'read_mbps_capping',
        'write_iops_capping': 'write_iops_capping',
        'write_mbps_capping': 'write_mbps_capping',
        'compress': 'compress',
        'dedupe': 'dedupe',
        'mtr_histograms': 'mtr_histograms',
        'flc_state': 'flc_state',
        'flc_scan_state': 'flc_scan_state',
        'flc_scan_progress': 'flc_scan_progress',
        'flc_scan_remaining_time_seconds': 'flc_scan_remaining_time_seconds',
        'thresholds': 'thresholds',
        'comment': 'comment',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'flc_policy_name': 'flc_policy_name',
        'snapshots_count': 'snapshots_count'
    }

    def __init__(self, name=None, display_name=None, cg_display_name=None, cg_name=None, cg_user_created=None, pool_display_name=None, pool_name=None, pool_version=None, status=None, virtual_capacity=None, server_name=None, av_scan_policy_name=None, provisioned_capacity=None, server_ext_names=None, life_cycle_policy_display_name=None, life_cycle_policy_ext_name=None, data_type=None, thin=None, encryption=None, encryption_key_size=None, total_capacity=None, available_capacity=None, num_of_filesystem_objects=None, capacity_mode=None, allocated_capacity=None, data_copies_capacity=None, access_type=None, read_only=None, nfs_export_path=None, smb_export_path=None, additional_smb_export_paths_count=None, mount_sync=None, atime_update=None, read_ahead_kb=None, ext_metering=None, images_repo=None, flc_db=None, quarantine_repo=None, audit_repo=None, nfs_root_squash=None, nfs_all_squash=None, nfs_anon_uid=None, nfs_anon_gid=None, smb_only=None, smb_guest=None, smb_windows_acl=None, smb_map_archive=None, smb_file_create_mask=None, smb_dir_create_mask=None, smb_aio_size=None, smb_browseable=None, smb_hidden_files=None, smb_encryption_mode=None, smb_case_sensitive=None, smb_mangled_names=None, smb_hide_unreadable=None, smb_hide_unwriteable=None, smb_hide_dot_files=None, smb_store_dos_attributes=None, smb_enable_oplocks=None, audit_enable=None, capacity_history=None, alert_mode=None, emergency_mode_mb=None, auto_expand_on_emergency=None, auto_expand_by=None, max_capacity=None, uquota_state=None, gquota_state=None, pquota_state=None, target=None, lun=None, cache=None, tenant_id=None, has_mirror=None, has_backup=None, is_remote_clone_source=None, has_snapshots=None, shadow_copy_enabled=None, is_shadow_copy_clone=None, read_iops_limit=None, read_mbps_limit=None, write_iops_limit=None, write_mbps_limit=None, read_iops_capping=None, read_mbps_capping=None, write_iops_capping=None, write_mbps_capping=None, compress=None, dedupe=None, mtr_histograms=None, flc_state=None, flc_scan_state=None, flc_scan_progress=None, flc_scan_remaining_time_seconds=None, thresholds=None, comment=None, created_at=None, modified_at=None, flc_policy_name=None, snapshots_count=None, _configuration=None):  # noqa: E501
        """InlineResponse200229ResponseVolumes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._cg_display_name = None
        self._cg_name = None
        self._cg_user_created = None
        self._pool_display_name = None
        self._pool_name = None
        self._pool_version = None
        self._status = None
        self._virtual_capacity = None
        self._server_name = None
        self._av_scan_policy_name = None
        self._provisioned_capacity = None
        self._server_ext_names = None
        self._life_cycle_policy_display_name = None
        self._life_cycle_policy_ext_name = None
        self._data_type = None
        self._thin = None
        self._encryption = None
        self._encryption_key_size = None
        self._total_capacity = None
        self._available_capacity = None
        self._num_of_filesystem_objects = None
        self._capacity_mode = None
        self._allocated_capacity = None
        self._data_copies_capacity = None
        self._access_type = None
        self._read_only = None
        self._nfs_export_path = None
        self._smb_export_path = None
        self._additional_smb_export_paths_count = None
        self._mount_sync = None
        self._atime_update = None
        self._read_ahead_kb = None
        self._ext_metering = None
        self._images_repo = None
        self._flc_db = None
        self._quarantine_repo = None
        self._audit_repo = None
        self._nfs_root_squash = None
        self._nfs_all_squash = None
        self._nfs_anon_uid = None
        self._nfs_anon_gid = None
        self._smb_only = None
        self._smb_guest = None
        self._smb_windows_acl = None
        self._smb_map_archive = None
        self._smb_file_create_mask = None
        self._smb_dir_create_mask = None
        self._smb_aio_size = None
        self._smb_browseable = None
        self._smb_hidden_files = None
        self._smb_encryption_mode = None
        self._smb_case_sensitive = None
        self._smb_mangled_names = None
        self._smb_hide_unreadable = None
        self._smb_hide_unwriteable = None
        self._smb_hide_dot_files = None
        self._smb_store_dos_attributes = None
        self._smb_enable_oplocks = None
        self._audit_enable = None
        self._capacity_history = None
        self._alert_mode = None
        self._emergency_mode_mb = None
        self._auto_expand_on_emergency = None
        self._auto_expand_by = None
        self._max_capacity = None
        self._uquota_state = None
        self._gquota_state = None
        self._pquota_state = None
        self._target = None
        self._lun = None
        self._cache = None
        self._tenant_id = None
        self._has_mirror = None
        self._has_backup = None
        self._is_remote_clone_source = None
        self._has_snapshots = None
        self._shadow_copy_enabled = None
        self._is_shadow_copy_clone = None
        self._read_iops_limit = None
        self._read_mbps_limit = None
        self._write_iops_limit = None
        self._write_mbps_limit = None
        self._read_iops_capping = None
        self._read_mbps_capping = None
        self._write_iops_capping = None
        self._write_mbps_capping = None
        self._compress = None
        self._dedupe = None
        self._mtr_histograms = None
        self._flc_state = None
        self._flc_scan_state = None
        self._flc_scan_progress = None
        self._flc_scan_remaining_time_seconds = None
        self._thresholds = None
        self._comment = None
        self._created_at = None
        self._modified_at = None
        self._flc_policy_name = None
        self._snapshots_count = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if cg_display_name is not None:
            self.cg_display_name = cg_display_name
        if cg_name is not None:
            self.cg_name = cg_name
        if cg_user_created is not None:
            self.cg_user_created = cg_user_created
        if pool_display_name is not None:
            self.pool_display_name = pool_display_name
        if pool_name is not None:
            self.pool_name = pool_name
        if pool_version is not None:
            self.pool_version = pool_version
        if status is not None:
            self.status = status
        if virtual_capacity is not None:
            self.virtual_capacity = virtual_capacity
        if server_name is not None:
            self.server_name = server_name
        if av_scan_policy_name is not None:
            self.av_scan_policy_name = av_scan_policy_name
        if provisioned_capacity is not None:
            self.provisioned_capacity = provisioned_capacity
        if server_ext_names is not None:
            self.server_ext_names = server_ext_names
        if life_cycle_policy_display_name is not None:
            self.life_cycle_policy_display_name = life_cycle_policy_display_name
        if life_cycle_policy_ext_name is not None:
            self.life_cycle_policy_ext_name = life_cycle_policy_ext_name
        if data_type is not None:
            self.data_type = data_type
        if thin is not None:
            self.thin = thin
        if encryption is not None:
            self.encryption = encryption
        if encryption_key_size is not None:
            self.encryption_key_size = encryption_key_size
        if total_capacity is not None:
            self.total_capacity = total_capacity
        if available_capacity is not None:
            self.available_capacity = available_capacity
        if num_of_filesystem_objects is not None:
            self.num_of_filesystem_objects = num_of_filesystem_objects
        if capacity_mode is not None:
            self.capacity_mode = capacity_mode
        if allocated_capacity is not None:
            self.allocated_capacity = allocated_capacity
        if data_copies_capacity is not None:
            self.data_copies_capacity = data_copies_capacity
        if access_type is not None:
            self.access_type = access_type
        if read_only is not None:
            self.read_only = read_only
        if nfs_export_path is not None:
            self.nfs_export_path = nfs_export_path
        if smb_export_path is not None:
            self.smb_export_path = smb_export_path
        if additional_smb_export_paths_count is not None:
            self.additional_smb_export_paths_count = additional_smb_export_paths_count
        if mount_sync is not None:
            self.mount_sync = mount_sync
        if atime_update is not None:
            self.atime_update = atime_update
        if read_ahead_kb is not None:
            self.read_ahead_kb = read_ahead_kb
        if ext_metering is not None:
            self.ext_metering = ext_metering
        if images_repo is not None:
            self.images_repo = images_repo
        if flc_db is not None:
            self.flc_db = flc_db
        if quarantine_repo is not None:
            self.quarantine_repo = quarantine_repo
        if audit_repo is not None:
            self.audit_repo = audit_repo
        if nfs_root_squash is not None:
            self.nfs_root_squash = nfs_root_squash
        if nfs_all_squash is not None:
            self.nfs_all_squash = nfs_all_squash
        if nfs_anon_uid is not None:
            self.nfs_anon_uid = nfs_anon_uid
        if nfs_anon_gid is not None:
            self.nfs_anon_gid = nfs_anon_gid
        if smb_only is not None:
            self.smb_only = smb_only
        if smb_guest is not None:
            self.smb_guest = smb_guest
        if smb_windows_acl is not None:
            self.smb_windows_acl = smb_windows_acl
        if smb_map_archive is not None:
            self.smb_map_archive = smb_map_archive
        if smb_file_create_mask is not None:
            self.smb_file_create_mask = smb_file_create_mask
        if smb_dir_create_mask is not None:
            self.smb_dir_create_mask = smb_dir_create_mask
        if smb_aio_size is not None:
            self.smb_aio_size = smb_aio_size
        if smb_browseable is not None:
            self.smb_browseable = smb_browseable
        if smb_hidden_files is not None:
            self.smb_hidden_files = smb_hidden_files
        if smb_encryption_mode is not None:
            self.smb_encryption_mode = smb_encryption_mode
        if smb_case_sensitive is not None:
            self.smb_case_sensitive = smb_case_sensitive
        if smb_mangled_names is not None:
            self.smb_mangled_names = smb_mangled_names
        if smb_hide_unreadable is not None:
            self.smb_hide_unreadable = smb_hide_unreadable
        if smb_hide_unwriteable is not None:
            self.smb_hide_unwriteable = smb_hide_unwriteable
        if smb_hide_dot_files is not None:
            self.smb_hide_dot_files = smb_hide_dot_files
        if smb_store_dos_attributes is not None:
            self.smb_store_dos_attributes = smb_store_dos_attributes
        if smb_enable_oplocks is not None:
            self.smb_enable_oplocks = smb_enable_oplocks
        if audit_enable is not None:
            self.audit_enable = audit_enable
        if capacity_history is not None:
            self.capacity_history = capacity_history
        if alert_mode is not None:
            self.alert_mode = alert_mode
        if emergency_mode_mb is not None:
            self.emergency_mode_mb = emergency_mode_mb
        if auto_expand_on_emergency is not None:
            self.auto_expand_on_emergency = auto_expand_on_emergency
        if auto_expand_by is not None:
            self.auto_expand_by = auto_expand_by
        if max_capacity is not None:
            self.max_capacity = max_capacity
        if uquota_state is not None:
            self.uquota_state = uquota_state
        if gquota_state is not None:
            self.gquota_state = gquota_state
        if pquota_state is not None:
            self.pquota_state = pquota_state
        if target is not None:
            self.target = target
        if lun is not None:
            self.lun = lun
        if cache is not None:
            self.cache = cache
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if has_mirror is not None:
            self.has_mirror = has_mirror
        if has_backup is not None:
            self.has_backup = has_backup
        if is_remote_clone_source is not None:
            self.is_remote_clone_source = is_remote_clone_source
        if has_snapshots is not None:
            self.has_snapshots = has_snapshots
        if shadow_copy_enabled is not None:
            self.shadow_copy_enabled = shadow_copy_enabled
        if is_shadow_copy_clone is not None:
            self.is_shadow_copy_clone = is_shadow_copy_clone
        if read_iops_limit is not None:
            self.read_iops_limit = read_iops_limit
        if read_mbps_limit is not None:
            self.read_mbps_limit = read_mbps_limit
        if write_iops_limit is not None:
            self.write_iops_limit = write_iops_limit
        if write_mbps_limit is not None:
            self.write_mbps_limit = write_mbps_limit
        if read_iops_capping is not None:
            self.read_iops_capping = read_iops_capping
        if read_mbps_capping is not None:
            self.read_mbps_capping = read_mbps_capping
        if write_iops_capping is not None:
            self.write_iops_capping = write_iops_capping
        if write_mbps_capping is not None:
            self.write_mbps_capping = write_mbps_capping
        if compress is not None:
            self.compress = compress
        if dedupe is not None:
            self.dedupe = dedupe
        if mtr_histograms is not None:
            self.mtr_histograms = mtr_histograms
        if flc_state is not None:
            self.flc_state = flc_state
        if flc_scan_state is not None:
            self.flc_scan_state = flc_scan_state
        if flc_scan_progress is not None:
            self.flc_scan_progress = flc_scan_progress
        if flc_scan_remaining_time_seconds is not None:
            self.flc_scan_remaining_time_seconds = flc_scan_remaining_time_seconds
        if thresholds is not None:
            self.thresholds = thresholds
        if comment is not None:
            self.comment = comment
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if flc_policy_name is not None:
            self.flc_policy_name = flc_policy_name
        if snapshots_count is not None:
            self.snapshots_count = snapshots_count

    @property
    def name(self):
        """Gets the name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200229ResponseVolumes.


        :param name: The name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse200229ResponseVolumes.


        :param display_name: The display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def cg_display_name(self):
        """Gets the cg_display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The cg_display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._cg_display_name

    @cg_display_name.setter
    def cg_display_name(self, cg_display_name):
        """Sets the cg_display_name of this InlineResponse200229ResponseVolumes.


        :param cg_display_name: The cg_display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._cg_display_name = cg_display_name

    @property
    def cg_name(self):
        """Gets the cg_name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The cg_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._cg_name

    @cg_name.setter
    def cg_name(self, cg_name):
        """Sets the cg_name of this InlineResponse200229ResponseVolumes.


        :param cg_name: The cg_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._cg_name = cg_name

    @property
    def cg_user_created(self):
        """Gets the cg_user_created of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The cg_user_created of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._cg_user_created

    @cg_user_created.setter
    def cg_user_created(self, cg_user_created):
        """Sets the cg_user_created of this InlineResponse200229ResponseVolumes.


        :param cg_user_created: The cg_user_created of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._cg_user_created = cg_user_created

    @property
    def pool_display_name(self):
        """Gets the pool_display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The pool_display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._pool_display_name

    @pool_display_name.setter
    def pool_display_name(self, pool_display_name):
        """Sets the pool_display_name of this InlineResponse200229ResponseVolumes.


        :param pool_display_name: The pool_display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._pool_display_name = pool_display_name

    @property
    def pool_name(self):
        """Gets the pool_name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The pool_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this InlineResponse200229ResponseVolumes.


        :param pool_name: The pool_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def pool_version(self):
        """Gets the pool_version of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The pool_version of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._pool_version

    @pool_version.setter
    def pool_version(self, pool_version):
        """Sets the pool_version of this InlineResponse200229ResponseVolumes.


        :param pool_version: The pool_version of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._pool_version = pool_version

    @property
    def status(self):
        """Gets the status of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The status of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200229ResponseVolumes.


        :param status: The status of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def virtual_capacity(self):
        """Gets the virtual_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The virtual_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._virtual_capacity

    @virtual_capacity.setter
    def virtual_capacity(self, virtual_capacity):
        """Sets the virtual_capacity of this InlineResponse200229ResponseVolumes.


        :param virtual_capacity: The virtual_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._virtual_capacity = virtual_capacity

    @property
    def server_name(self):
        """Gets the server_name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The server_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this InlineResponse200229ResponseVolumes.


        :param server_name: The server_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def av_scan_policy_name(self):
        """Gets the av_scan_policy_name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The av_scan_policy_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._av_scan_policy_name

    @av_scan_policy_name.setter
    def av_scan_policy_name(self, av_scan_policy_name):
        """Sets the av_scan_policy_name of this InlineResponse200229ResponseVolumes.


        :param av_scan_policy_name: The av_scan_policy_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._av_scan_policy_name = av_scan_policy_name

    @property
    def provisioned_capacity(self):
        """Gets the provisioned_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The provisioned_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._provisioned_capacity

    @provisioned_capacity.setter
    def provisioned_capacity(self, provisioned_capacity):
        """Sets the provisioned_capacity of this InlineResponse200229ResponseVolumes.


        :param provisioned_capacity: The provisioned_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._provisioned_capacity = provisioned_capacity

    @property
    def server_ext_names(self):
        """Gets the server_ext_names of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The server_ext_names of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._server_ext_names

    @server_ext_names.setter
    def server_ext_names(self, server_ext_names):
        """Sets the server_ext_names of this InlineResponse200229ResponseVolumes.


        :param server_ext_names: The server_ext_names of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._server_ext_names = server_ext_names

    @property
    def life_cycle_policy_display_name(self):
        """Gets the life_cycle_policy_display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The life_cycle_policy_display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._life_cycle_policy_display_name

    @life_cycle_policy_display_name.setter
    def life_cycle_policy_display_name(self, life_cycle_policy_display_name):
        """Sets the life_cycle_policy_display_name of this InlineResponse200229ResponseVolumes.


        :param life_cycle_policy_display_name: The life_cycle_policy_display_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._life_cycle_policy_display_name = life_cycle_policy_display_name

    @property
    def life_cycle_policy_ext_name(self):
        """Gets the life_cycle_policy_ext_name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The life_cycle_policy_ext_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._life_cycle_policy_ext_name

    @life_cycle_policy_ext_name.setter
    def life_cycle_policy_ext_name(self, life_cycle_policy_ext_name):
        """Sets the life_cycle_policy_ext_name of this InlineResponse200229ResponseVolumes.


        :param life_cycle_policy_ext_name: The life_cycle_policy_ext_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._life_cycle_policy_ext_name = life_cycle_policy_ext_name

    @property
    def data_type(self):
        """Gets the data_type of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The data_type of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this InlineResponse200229ResponseVolumes.


        :param data_type: The data_type of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def thin(self):
        """Gets the thin of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The thin of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._thin

    @thin.setter
    def thin(self, thin):
        """Sets the thin of this InlineResponse200229ResponseVolumes.


        :param thin: The thin of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._thin = thin

    @property
    def encryption(self):
        """Gets the encryption of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The encryption of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this InlineResponse200229ResponseVolumes.


        :param encryption: The encryption of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._encryption = encryption

    @property
    def encryption_key_size(self):
        """Gets the encryption_key_size of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The encryption_key_size of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._encryption_key_size

    @encryption_key_size.setter
    def encryption_key_size(self, encryption_key_size):
        """Sets the encryption_key_size of this InlineResponse200229ResponseVolumes.


        :param encryption_key_size: The encryption_key_size of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._encryption_key_size = encryption_key_size

    @property
    def total_capacity(self):
        """Gets the total_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The total_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: float
        """
        return self._total_capacity

    @total_capacity.setter
    def total_capacity(self, total_capacity):
        """Sets the total_capacity of this InlineResponse200229ResponseVolumes.


        :param total_capacity: The total_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: float
        """

        self._total_capacity = total_capacity

    @property
    def available_capacity(self):
        """Gets the available_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The available_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: float
        """
        return self._available_capacity

    @available_capacity.setter
    def available_capacity(self, available_capacity):
        """Sets the available_capacity of this InlineResponse200229ResponseVolumes.


        :param available_capacity: The available_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: float
        """

        self._available_capacity = available_capacity

    @property
    def num_of_filesystem_objects(self):
        """Gets the num_of_filesystem_objects of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The num_of_filesystem_objects of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._num_of_filesystem_objects

    @num_of_filesystem_objects.setter
    def num_of_filesystem_objects(self, num_of_filesystem_objects):
        """Sets the num_of_filesystem_objects of this InlineResponse200229ResponseVolumes.


        :param num_of_filesystem_objects: The num_of_filesystem_objects of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._num_of_filesystem_objects = num_of_filesystem_objects

    @property
    def capacity_mode(self):
        """Gets the capacity_mode of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The capacity_mode of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._capacity_mode

    @capacity_mode.setter
    def capacity_mode(self, capacity_mode):
        """Sets the capacity_mode of this InlineResponse200229ResponseVolumes.


        :param capacity_mode: The capacity_mode of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._capacity_mode = capacity_mode

    @property
    def allocated_capacity(self):
        """Gets the allocated_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The allocated_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: float
        """
        return self._allocated_capacity

    @allocated_capacity.setter
    def allocated_capacity(self, allocated_capacity):
        """Sets the allocated_capacity of this InlineResponse200229ResponseVolumes.


        :param allocated_capacity: The allocated_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: float
        """

        self._allocated_capacity = allocated_capacity

    @property
    def data_copies_capacity(self):
        """Gets the data_copies_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The data_copies_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: float
        """
        return self._data_copies_capacity

    @data_copies_capacity.setter
    def data_copies_capacity(self, data_copies_capacity):
        """Sets the data_copies_capacity of this InlineResponse200229ResponseVolumes.


        :param data_copies_capacity: The data_copies_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: float
        """

        self._data_copies_capacity = data_copies_capacity

    @property
    def access_type(self):
        """Gets the access_type of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The access_type of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this InlineResponse200229ResponseVolumes.


        :param access_type: The access_type of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._access_type = access_type

    @property
    def read_only(self):
        """Gets the read_only of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The read_only of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this InlineResponse200229ResponseVolumes.


        :param read_only: The read_only of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._read_only = read_only

    @property
    def nfs_export_path(self):
        """Gets the nfs_export_path of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The nfs_export_path of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._nfs_export_path

    @nfs_export_path.setter
    def nfs_export_path(self, nfs_export_path):
        """Sets the nfs_export_path of this InlineResponse200229ResponseVolumes.


        :param nfs_export_path: The nfs_export_path of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._nfs_export_path = nfs_export_path

    @property
    def smb_export_path(self):
        """Gets the smb_export_path of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_export_path of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_export_path

    @smb_export_path.setter
    def smb_export_path(self, smb_export_path):
        """Sets the smb_export_path of this InlineResponse200229ResponseVolumes.


        :param smb_export_path: The smb_export_path of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_export_path = smb_export_path

    @property
    def additional_smb_export_paths_count(self):
        """Gets the additional_smb_export_paths_count of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The additional_smb_export_paths_count of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._additional_smb_export_paths_count

    @additional_smb_export_paths_count.setter
    def additional_smb_export_paths_count(self, additional_smb_export_paths_count):
        """Sets the additional_smb_export_paths_count of this InlineResponse200229ResponseVolumes.


        :param additional_smb_export_paths_count: The additional_smb_export_paths_count of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._additional_smb_export_paths_count = additional_smb_export_paths_count

    @property
    def mount_sync(self):
        """Gets the mount_sync of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The mount_sync of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._mount_sync

    @mount_sync.setter
    def mount_sync(self, mount_sync):
        """Sets the mount_sync of this InlineResponse200229ResponseVolumes.


        :param mount_sync: The mount_sync of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._mount_sync = mount_sync

    @property
    def atime_update(self):
        """Gets the atime_update of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The atime_update of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._atime_update

    @atime_update.setter
    def atime_update(self, atime_update):
        """Sets the atime_update of this InlineResponse200229ResponseVolumes.


        :param atime_update: The atime_update of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._atime_update = atime_update

    @property
    def read_ahead_kb(self):
        """Gets the read_ahead_kb of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The read_ahead_kb of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._read_ahead_kb

    @read_ahead_kb.setter
    def read_ahead_kb(self, read_ahead_kb):
        """Sets the read_ahead_kb of this InlineResponse200229ResponseVolumes.


        :param read_ahead_kb: The read_ahead_kb of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._read_ahead_kb = read_ahead_kb

    @property
    def ext_metering(self):
        """Gets the ext_metering of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The ext_metering of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._ext_metering

    @ext_metering.setter
    def ext_metering(self, ext_metering):
        """Sets the ext_metering of this InlineResponse200229ResponseVolumes.


        :param ext_metering: The ext_metering of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._ext_metering = ext_metering

    @property
    def images_repo(self):
        """Gets the images_repo of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The images_repo of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._images_repo

    @images_repo.setter
    def images_repo(self, images_repo):
        """Sets the images_repo of this InlineResponse200229ResponseVolumes.


        :param images_repo: The images_repo of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._images_repo = images_repo

    @property
    def flc_db(self):
        """Gets the flc_db of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The flc_db of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._flc_db

    @flc_db.setter
    def flc_db(self, flc_db):
        """Sets the flc_db of this InlineResponse200229ResponseVolumes.


        :param flc_db: The flc_db of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._flc_db = flc_db

    @property
    def quarantine_repo(self):
        """Gets the quarantine_repo of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The quarantine_repo of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._quarantine_repo

    @quarantine_repo.setter
    def quarantine_repo(self, quarantine_repo):
        """Sets the quarantine_repo of this InlineResponse200229ResponseVolumes.


        :param quarantine_repo: The quarantine_repo of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._quarantine_repo = quarantine_repo

    @property
    def audit_repo(self):
        """Gets the audit_repo of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The audit_repo of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._audit_repo

    @audit_repo.setter
    def audit_repo(self, audit_repo):
        """Sets the audit_repo of this InlineResponse200229ResponseVolumes.


        :param audit_repo: The audit_repo of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._audit_repo = audit_repo

    @property
    def nfs_root_squash(self):
        """Gets the nfs_root_squash of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The nfs_root_squash of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._nfs_root_squash

    @nfs_root_squash.setter
    def nfs_root_squash(self, nfs_root_squash):
        """Sets the nfs_root_squash of this InlineResponse200229ResponseVolumes.


        :param nfs_root_squash: The nfs_root_squash of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._nfs_root_squash = nfs_root_squash

    @property
    def nfs_all_squash(self):
        """Gets the nfs_all_squash of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The nfs_all_squash of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._nfs_all_squash

    @nfs_all_squash.setter
    def nfs_all_squash(self, nfs_all_squash):
        """Sets the nfs_all_squash of this InlineResponse200229ResponseVolumes.


        :param nfs_all_squash: The nfs_all_squash of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._nfs_all_squash = nfs_all_squash

    @property
    def nfs_anon_uid(self):
        """Gets the nfs_anon_uid of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The nfs_anon_uid of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._nfs_anon_uid

    @nfs_anon_uid.setter
    def nfs_anon_uid(self, nfs_anon_uid):
        """Sets the nfs_anon_uid of this InlineResponse200229ResponseVolumes.


        :param nfs_anon_uid: The nfs_anon_uid of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._nfs_anon_uid = nfs_anon_uid

    @property
    def nfs_anon_gid(self):
        """Gets the nfs_anon_gid of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The nfs_anon_gid of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._nfs_anon_gid

    @nfs_anon_gid.setter
    def nfs_anon_gid(self, nfs_anon_gid):
        """Sets the nfs_anon_gid of this InlineResponse200229ResponseVolumes.


        :param nfs_anon_gid: The nfs_anon_gid of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._nfs_anon_gid = nfs_anon_gid

    @property
    def smb_only(self):
        """Gets the smb_only of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_only of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_only

    @smb_only.setter
    def smb_only(self, smb_only):
        """Sets the smb_only of this InlineResponse200229ResponseVolumes.


        :param smb_only: The smb_only of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_only = smb_only

    @property
    def smb_guest(self):
        """Gets the smb_guest of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_guest of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_guest

    @smb_guest.setter
    def smb_guest(self, smb_guest):
        """Sets the smb_guest of this InlineResponse200229ResponseVolumes.


        :param smb_guest: The smb_guest of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_guest = smb_guest

    @property
    def smb_windows_acl(self):
        """Gets the smb_windows_acl of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_windows_acl of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_windows_acl

    @smb_windows_acl.setter
    def smb_windows_acl(self, smb_windows_acl):
        """Sets the smb_windows_acl of this InlineResponse200229ResponseVolumes.


        :param smb_windows_acl: The smb_windows_acl of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_windows_acl = smb_windows_acl

    @property
    def smb_map_archive(self):
        """Gets the smb_map_archive of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_map_archive of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_map_archive

    @smb_map_archive.setter
    def smb_map_archive(self, smb_map_archive):
        """Sets the smb_map_archive of this InlineResponse200229ResponseVolumes.


        :param smb_map_archive: The smb_map_archive of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_map_archive = smb_map_archive

    @property
    def smb_file_create_mask(self):
        """Gets the smb_file_create_mask of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_file_create_mask of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_file_create_mask

    @smb_file_create_mask.setter
    def smb_file_create_mask(self, smb_file_create_mask):
        """Sets the smb_file_create_mask of this InlineResponse200229ResponseVolumes.


        :param smb_file_create_mask: The smb_file_create_mask of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_file_create_mask = smb_file_create_mask

    @property
    def smb_dir_create_mask(self):
        """Gets the smb_dir_create_mask of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_dir_create_mask of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_dir_create_mask

    @smb_dir_create_mask.setter
    def smb_dir_create_mask(self, smb_dir_create_mask):
        """Sets the smb_dir_create_mask of this InlineResponse200229ResponseVolumes.


        :param smb_dir_create_mask: The smb_dir_create_mask of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_dir_create_mask = smb_dir_create_mask

    @property
    def smb_aio_size(self):
        """Gets the smb_aio_size of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_aio_size of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._smb_aio_size

    @smb_aio_size.setter
    def smb_aio_size(self, smb_aio_size):
        """Sets the smb_aio_size of this InlineResponse200229ResponseVolumes.


        :param smb_aio_size: The smb_aio_size of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._smb_aio_size = smb_aio_size

    @property
    def smb_browseable(self):
        """Gets the smb_browseable of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_browseable of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_browseable

    @smb_browseable.setter
    def smb_browseable(self, smb_browseable):
        """Sets the smb_browseable of this InlineResponse200229ResponseVolumes.


        :param smb_browseable: The smb_browseable of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_browseable = smb_browseable

    @property
    def smb_hidden_files(self):
        """Gets the smb_hidden_files of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_hidden_files of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_hidden_files

    @smb_hidden_files.setter
    def smb_hidden_files(self, smb_hidden_files):
        """Sets the smb_hidden_files of this InlineResponse200229ResponseVolumes.


        :param smb_hidden_files: The smb_hidden_files of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_hidden_files = smb_hidden_files

    @property
    def smb_encryption_mode(self):
        """Gets the smb_encryption_mode of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_encryption_mode of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_encryption_mode

    @smb_encryption_mode.setter
    def smb_encryption_mode(self, smb_encryption_mode):
        """Sets the smb_encryption_mode of this InlineResponse200229ResponseVolumes.


        :param smb_encryption_mode: The smb_encryption_mode of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_encryption_mode = smb_encryption_mode

    @property
    def smb_case_sensitive(self):
        """Gets the smb_case_sensitive of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_case_sensitive of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_case_sensitive

    @smb_case_sensitive.setter
    def smb_case_sensitive(self, smb_case_sensitive):
        """Sets the smb_case_sensitive of this InlineResponse200229ResponseVolumes.


        :param smb_case_sensitive: The smb_case_sensitive of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_case_sensitive = smb_case_sensitive

    @property
    def smb_mangled_names(self):
        """Gets the smb_mangled_names of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_mangled_names of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_mangled_names

    @smb_mangled_names.setter
    def smb_mangled_names(self, smb_mangled_names):
        """Sets the smb_mangled_names of this InlineResponse200229ResponseVolumes.


        :param smb_mangled_names: The smb_mangled_names of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_mangled_names = smb_mangled_names

    @property
    def smb_hide_unreadable(self):
        """Gets the smb_hide_unreadable of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_hide_unreadable of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_hide_unreadable

    @smb_hide_unreadable.setter
    def smb_hide_unreadable(self, smb_hide_unreadable):
        """Sets the smb_hide_unreadable of this InlineResponse200229ResponseVolumes.


        :param smb_hide_unreadable: The smb_hide_unreadable of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_hide_unreadable = smb_hide_unreadable

    @property
    def smb_hide_unwriteable(self):
        """Gets the smb_hide_unwriteable of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_hide_unwriteable of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_hide_unwriteable

    @smb_hide_unwriteable.setter
    def smb_hide_unwriteable(self, smb_hide_unwriteable):
        """Sets the smb_hide_unwriteable of this InlineResponse200229ResponseVolumes.


        :param smb_hide_unwriteable: The smb_hide_unwriteable of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_hide_unwriteable = smb_hide_unwriteable

    @property
    def smb_hide_dot_files(self):
        """Gets the smb_hide_dot_files of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_hide_dot_files of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_hide_dot_files

    @smb_hide_dot_files.setter
    def smb_hide_dot_files(self, smb_hide_dot_files):
        """Sets the smb_hide_dot_files of this InlineResponse200229ResponseVolumes.


        :param smb_hide_dot_files: The smb_hide_dot_files of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_hide_dot_files = smb_hide_dot_files

    @property
    def smb_store_dos_attributes(self):
        """Gets the smb_store_dos_attributes of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_store_dos_attributes of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_store_dos_attributes

    @smb_store_dos_attributes.setter
    def smb_store_dos_attributes(self, smb_store_dos_attributes):
        """Sets the smb_store_dos_attributes of this InlineResponse200229ResponseVolumes.


        :param smb_store_dos_attributes: The smb_store_dos_attributes of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_store_dos_attributes = smb_store_dos_attributes

    @property
    def smb_enable_oplocks(self):
        """Gets the smb_enable_oplocks of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The smb_enable_oplocks of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._smb_enable_oplocks

    @smb_enable_oplocks.setter
    def smb_enable_oplocks(self, smb_enable_oplocks):
        """Sets the smb_enable_oplocks of this InlineResponse200229ResponseVolumes.


        :param smb_enable_oplocks: The smb_enable_oplocks of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._smb_enable_oplocks = smb_enable_oplocks

    @property
    def audit_enable(self):
        """Gets the audit_enable of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The audit_enable of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._audit_enable

    @audit_enable.setter
    def audit_enable(self, audit_enable):
        """Sets the audit_enable of this InlineResponse200229ResponseVolumes.


        :param audit_enable: The audit_enable of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._audit_enable = audit_enable

    @property
    def capacity_history(self):
        """Gets the capacity_history of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The capacity_history of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._capacity_history

    @capacity_history.setter
    def capacity_history(self, capacity_history):
        """Sets the capacity_history of this InlineResponse200229ResponseVolumes.


        :param capacity_history: The capacity_history of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._capacity_history = capacity_history

    @property
    def alert_mode(self):
        """Gets the alert_mode of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The alert_mode of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._alert_mode

    @alert_mode.setter
    def alert_mode(self, alert_mode):
        """Sets the alert_mode of this InlineResponse200229ResponseVolumes.


        :param alert_mode: The alert_mode of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._alert_mode = alert_mode

    @property
    def emergency_mode_mb(self):
        """Gets the emergency_mode_mb of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The emergency_mode_mb of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._emergency_mode_mb

    @emergency_mode_mb.setter
    def emergency_mode_mb(self, emergency_mode_mb):
        """Sets the emergency_mode_mb of this InlineResponse200229ResponseVolumes.


        :param emergency_mode_mb: The emergency_mode_mb of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._emergency_mode_mb = emergency_mode_mb

    @property
    def auto_expand_on_emergency(self):
        """Gets the auto_expand_on_emergency of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The auto_expand_on_emergency of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._auto_expand_on_emergency

    @auto_expand_on_emergency.setter
    def auto_expand_on_emergency(self, auto_expand_on_emergency):
        """Sets the auto_expand_on_emergency of this InlineResponse200229ResponseVolumes.


        :param auto_expand_on_emergency: The auto_expand_on_emergency of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._auto_expand_on_emergency = auto_expand_on_emergency

    @property
    def auto_expand_by(self):
        """Gets the auto_expand_by of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The auto_expand_by of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._auto_expand_by

    @auto_expand_by.setter
    def auto_expand_by(self, auto_expand_by):
        """Sets the auto_expand_by of this InlineResponse200229ResponseVolumes.


        :param auto_expand_by: The auto_expand_by of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._auto_expand_by = auto_expand_by

    @property
    def max_capacity(self):
        """Gets the max_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The max_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity):
        """Sets the max_capacity of this InlineResponse200229ResponseVolumes.


        :param max_capacity: The max_capacity of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._max_capacity = max_capacity

    @property
    def uquota_state(self):
        """Gets the uquota_state of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The uquota_state of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._uquota_state

    @uquota_state.setter
    def uquota_state(self, uquota_state):
        """Sets the uquota_state of this InlineResponse200229ResponseVolumes.


        :param uquota_state: The uquota_state of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._uquota_state = uquota_state

    @property
    def gquota_state(self):
        """Gets the gquota_state of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The gquota_state of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._gquota_state

    @gquota_state.setter
    def gquota_state(self, gquota_state):
        """Sets the gquota_state of this InlineResponse200229ResponseVolumes.


        :param gquota_state: The gquota_state of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._gquota_state = gquota_state

    @property
    def pquota_state(self):
        """Gets the pquota_state of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The pquota_state of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._pquota_state

    @pquota_state.setter
    def pquota_state(self, pquota_state):
        """Sets the pquota_state of this InlineResponse200229ResponseVolumes.


        :param pquota_state: The pquota_state of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._pquota_state = pquota_state

    @property
    def target(self):
        """Gets the target of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The target of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this InlineResponse200229ResponseVolumes.


        :param target: The target of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def lun(self):
        """Gets the lun of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The lun of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._lun

    @lun.setter
    def lun(self, lun):
        """Sets the lun of this InlineResponse200229ResponseVolumes.


        :param lun: The lun of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._lun = lun

    @property
    def cache(self):
        """Gets the cache of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The cache of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this InlineResponse200229ResponseVolumes.


        :param cache: The cache of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._cache = cache

    @property
    def tenant_id(self):
        """Gets the tenant_id of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The tenant_id of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this InlineResponse200229ResponseVolumes.


        :param tenant_id: The tenant_id of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._tenant_id = tenant_id

    @property
    def has_mirror(self):
        """Gets the has_mirror of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The has_mirror of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._has_mirror

    @has_mirror.setter
    def has_mirror(self, has_mirror):
        """Sets the has_mirror of this InlineResponse200229ResponseVolumes.


        :param has_mirror: The has_mirror of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._has_mirror = has_mirror

    @property
    def has_backup(self):
        """Gets the has_backup of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The has_backup of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._has_backup

    @has_backup.setter
    def has_backup(self, has_backup):
        """Sets the has_backup of this InlineResponse200229ResponseVolumes.


        :param has_backup: The has_backup of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._has_backup = has_backup

    @property
    def is_remote_clone_source(self):
        """Gets the is_remote_clone_source of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The is_remote_clone_source of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._is_remote_clone_source

    @is_remote_clone_source.setter
    def is_remote_clone_source(self, is_remote_clone_source):
        """Sets the is_remote_clone_source of this InlineResponse200229ResponseVolumes.


        :param is_remote_clone_source: The is_remote_clone_source of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._is_remote_clone_source = is_remote_clone_source

    @property
    def has_snapshots(self):
        """Gets the has_snapshots of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The has_snapshots of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._has_snapshots

    @has_snapshots.setter
    def has_snapshots(self, has_snapshots):
        """Sets the has_snapshots of this InlineResponse200229ResponseVolumes.


        :param has_snapshots: The has_snapshots of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._has_snapshots = has_snapshots

    @property
    def shadow_copy_enabled(self):
        """Gets the shadow_copy_enabled of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The shadow_copy_enabled of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._shadow_copy_enabled

    @shadow_copy_enabled.setter
    def shadow_copy_enabled(self, shadow_copy_enabled):
        """Sets the shadow_copy_enabled of this InlineResponse200229ResponseVolumes.


        :param shadow_copy_enabled: The shadow_copy_enabled of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._shadow_copy_enabled = shadow_copy_enabled

    @property
    def is_shadow_copy_clone(self):
        """Gets the is_shadow_copy_clone of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The is_shadow_copy_clone of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._is_shadow_copy_clone

    @is_shadow_copy_clone.setter
    def is_shadow_copy_clone(self, is_shadow_copy_clone):
        """Sets the is_shadow_copy_clone of this InlineResponse200229ResponseVolumes.


        :param is_shadow_copy_clone: The is_shadow_copy_clone of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._is_shadow_copy_clone = is_shadow_copy_clone

    @property
    def read_iops_limit(self):
        """Gets the read_iops_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The read_iops_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._read_iops_limit

    @read_iops_limit.setter
    def read_iops_limit(self, read_iops_limit):
        """Sets the read_iops_limit of this InlineResponse200229ResponseVolumes.


        :param read_iops_limit: The read_iops_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._read_iops_limit = read_iops_limit

    @property
    def read_mbps_limit(self):
        """Gets the read_mbps_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The read_mbps_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._read_mbps_limit

    @read_mbps_limit.setter
    def read_mbps_limit(self, read_mbps_limit):
        """Sets the read_mbps_limit of this InlineResponse200229ResponseVolumes.


        :param read_mbps_limit: The read_mbps_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._read_mbps_limit = read_mbps_limit

    @property
    def write_iops_limit(self):
        """Gets the write_iops_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The write_iops_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._write_iops_limit

    @write_iops_limit.setter
    def write_iops_limit(self, write_iops_limit):
        """Sets the write_iops_limit of this InlineResponse200229ResponseVolumes.


        :param write_iops_limit: The write_iops_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._write_iops_limit = write_iops_limit

    @property
    def write_mbps_limit(self):
        """Gets the write_mbps_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The write_mbps_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._write_mbps_limit

    @write_mbps_limit.setter
    def write_mbps_limit(self, write_mbps_limit):
        """Sets the write_mbps_limit of this InlineResponse200229ResponseVolumes.


        :param write_mbps_limit: The write_mbps_limit of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._write_mbps_limit = write_mbps_limit

    @property
    def read_iops_capping(self):
        """Gets the read_iops_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The read_iops_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._read_iops_capping

    @read_iops_capping.setter
    def read_iops_capping(self, read_iops_capping):
        """Sets the read_iops_capping of this InlineResponse200229ResponseVolumes.


        :param read_iops_capping: The read_iops_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._read_iops_capping = read_iops_capping

    @property
    def read_mbps_capping(self):
        """Gets the read_mbps_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The read_mbps_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._read_mbps_capping

    @read_mbps_capping.setter
    def read_mbps_capping(self, read_mbps_capping):
        """Sets the read_mbps_capping of this InlineResponse200229ResponseVolumes.


        :param read_mbps_capping: The read_mbps_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._read_mbps_capping = read_mbps_capping

    @property
    def write_iops_capping(self):
        """Gets the write_iops_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The write_iops_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._write_iops_capping

    @write_iops_capping.setter
    def write_iops_capping(self, write_iops_capping):
        """Sets the write_iops_capping of this InlineResponse200229ResponseVolumes.


        :param write_iops_capping: The write_iops_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._write_iops_capping = write_iops_capping

    @property
    def write_mbps_capping(self):
        """Gets the write_mbps_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The write_mbps_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._write_mbps_capping

    @write_mbps_capping.setter
    def write_mbps_capping(self, write_mbps_capping):
        """Sets the write_mbps_capping of this InlineResponse200229ResponseVolumes.


        :param write_mbps_capping: The write_mbps_capping of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._write_mbps_capping = write_mbps_capping

    @property
    def compress(self):
        """Gets the compress of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The compress of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this InlineResponse200229ResponseVolumes.


        :param compress: The compress of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._compress = compress

    @property
    def dedupe(self):
        """Gets the dedupe of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The dedupe of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._dedupe

    @dedupe.setter
    def dedupe(self, dedupe):
        """Sets the dedupe of this InlineResponse200229ResponseVolumes.


        :param dedupe: The dedupe of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._dedupe = dedupe

    @property
    def mtr_histograms(self):
        """Gets the mtr_histograms of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The mtr_histograms of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._mtr_histograms

    @mtr_histograms.setter
    def mtr_histograms(self, mtr_histograms):
        """Sets the mtr_histograms of this InlineResponse200229ResponseVolumes.


        :param mtr_histograms: The mtr_histograms of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._mtr_histograms = mtr_histograms

    @property
    def flc_state(self):
        """Gets the flc_state of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The flc_state of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._flc_state

    @flc_state.setter
    def flc_state(self, flc_state):
        """Sets the flc_state of this InlineResponse200229ResponseVolumes.


        :param flc_state: The flc_state of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._flc_state = flc_state

    @property
    def flc_scan_state(self):
        """Gets the flc_scan_state of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The flc_scan_state of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._flc_scan_state

    @flc_scan_state.setter
    def flc_scan_state(self, flc_scan_state):
        """Sets the flc_scan_state of this InlineResponse200229ResponseVolumes.


        :param flc_scan_state: The flc_scan_state of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._flc_scan_state = flc_scan_state

    @property
    def flc_scan_progress(self):
        """Gets the flc_scan_progress of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The flc_scan_progress of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: float
        """
        return self._flc_scan_progress

    @flc_scan_progress.setter
    def flc_scan_progress(self, flc_scan_progress):
        """Sets the flc_scan_progress of this InlineResponse200229ResponseVolumes.


        :param flc_scan_progress: The flc_scan_progress of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: float
        """

        self._flc_scan_progress = flc_scan_progress

    @property
    def flc_scan_remaining_time_seconds(self):
        """Gets the flc_scan_remaining_time_seconds of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The flc_scan_remaining_time_seconds of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._flc_scan_remaining_time_seconds

    @flc_scan_remaining_time_seconds.setter
    def flc_scan_remaining_time_seconds(self, flc_scan_remaining_time_seconds):
        """Sets the flc_scan_remaining_time_seconds of this InlineResponse200229ResponseVolumes.


        :param flc_scan_remaining_time_seconds: The flc_scan_remaining_time_seconds of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._flc_scan_remaining_time_seconds = flc_scan_remaining_time_seconds

    @property
    def thresholds(self):
        """Gets the thresholds of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The thresholds of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._thresholds

    @thresholds.setter
    def thresholds(self, thresholds):
        """Sets the thresholds of this InlineResponse200229ResponseVolumes.


        :param thresholds: The thresholds of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._thresholds = thresholds

    @property
    def comment(self):
        """Gets the comment of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The comment of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InlineResponse200229ResponseVolumes.


        :param comment: The comment of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The created_at of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse200229ResponseVolumes.


        :param created_at: The created_at of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The modified_at of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InlineResponse200229ResponseVolumes.


        :param modified_at: The modified_at of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def flc_policy_name(self):
        """Gets the flc_policy_name of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The flc_policy_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: str
        """
        return self._flc_policy_name

    @flc_policy_name.setter
    def flc_policy_name(self, flc_policy_name):
        """Sets the flc_policy_name of this InlineResponse200229ResponseVolumes.


        :param flc_policy_name: The flc_policy_name of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: str
        """

        self._flc_policy_name = flc_policy_name

    @property
    def snapshots_count(self):
        """Gets the snapshots_count of this InlineResponse200229ResponseVolumes.  # noqa: E501


        :return: The snapshots_count of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :rtype: int
        """
        return self._snapshots_count

    @snapshots_count.setter
    def snapshots_count(self, snapshots_count):
        """Sets the snapshots_count of this InlineResponse200229ResponseVolumes.


        :param snapshots_count: The snapshots_count of this InlineResponse200229ResponseVolumes.  # noqa: E501
        :type: int
        """

        self._snapshots_count = snapshots_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200229ResponseVolumes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200229ResponseVolumes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200229ResponseVolumes):
            return True

        return self.to_dict() != other.to_dict()
