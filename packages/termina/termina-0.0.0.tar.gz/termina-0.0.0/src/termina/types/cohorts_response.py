# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class CohortsResponse(pydantic_v1.BaseModel):
    """
    The basic cohort metrics for the user count and amount.

    The "amount" is a generic term for the metric being measured, such as revenue or gtv.
    """

    cohort: str = pydantic_v1.Field()
    """
    The date of the cohort.
    """

    period: int = pydantic_v1.Field()
    """
    The period of the cohort. 0 is the first period.
    """

    cohort_size: int = pydantic_v1.Field()
    """
    The number of users in the cohort.
    """

    cohort_size_amount: float = pydantic_v1.Field()
    """
    The size denominated in the metric amount of the cohort.
    """

    active_users: int = pydantic_v1.Field()
    """
    The number of active users in the period.
    """

    logo_retention: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The logo retention rate, defined as active / cohort size.
    """

    amount: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The active amount, such as revenue or gtv, in the period for the cohort.
    """

    amount_retention: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The amount retention rate, defined as amount / cohort size amount.
    """

    ltv: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    The cumulative lifetime value in terms of the metric amount up until the period, on average per user in the cohort.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
