# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class CreateComputeAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider_id': 'int',
        'display_name': 'str',
        'display_description': 'str',
        'cores': 'int',
        'ram': 'int',
        'instances': 'int',
        'moderate': 'bool'
    }

    attribute_map = {
        'provider_id': 'provider_id',
        'display_name': 'display_name',
        'display_description': 'display_description',
        'cores': 'cores',
        'ram': 'ram',
        'instances': 'instances',
        'moderate': 'moderate'
    }

    def __init__(self, provider_id=None, display_name=None, display_description=None, cores=None, ram=None, instances=None, moderate=None, _configuration=None):  # noqa: E501
        """CreateComputeAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._provider_id = None
        self._display_name = None
        self._display_description = None
        self._cores = None
        self._ram = None
        self._instances = None
        self._moderate = None
        self.discriminator = None

        self.provider_id = provider_id
        self.display_name = display_name
        if display_description is not None:
            self.display_description = display_description
        if cores is not None:
            self.cores = cores
        if ram is not None:
            self.ram = ram
        if instances is not None:
            self.instances = instances
        if moderate is not None:
            self.moderate = moderate

    @property
    def provider_id(self):
        """Gets the provider_id of this CreateComputeAccount.  # noqa: E501

        Your Cloud provider's id.  # noqa: E501

        :return: The provider_id of this CreateComputeAccount.  # noqa: E501
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this CreateComputeAccount.

        Your Cloud provider's id.  # noqa: E501

        :param provider_id: The provider_id of this CreateComputeAccount.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id

    @property
    def display_name(self):
        """Gets the display_name of this CreateComputeAccount.  # noqa: E501

        Compute Account Name.  # noqa: E501

        :return: The display_name of this CreateComputeAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateComputeAccount.

        Compute Account Name.  # noqa: E501

        :param display_name: The display_name of this CreateComputeAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def display_description(self):
        """Gets the display_description of this CreateComputeAccount.  # noqa: E501

        Compute Account Description.  # noqa: E501

        :return: The display_description of this CreateComputeAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_description

    @display_description.setter
    def display_description(self, display_description):
        """Sets the display_description of this CreateComputeAccount.

        Compute Account Description.  # noqa: E501

        :param display_description: The display_description of this CreateComputeAccount.  # noqa: E501
        :type: str
        """

        self._display_description = display_description

    @property
    def cores(self):
        """Gets the cores of this CreateComputeAccount.  # noqa: E501

        CPU cores limit.  # noqa: E501

        :return: The cores of this CreateComputeAccount.  # noqa: E501
        :rtype: int
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this CreateComputeAccount.

        CPU cores limit.  # noqa: E501

        :param cores: The cores of this CreateComputeAccount.  # noqa: E501
        :type: int
        """

        self._cores = cores

    @property
    def ram(self):
        """Gets the ram of this CreateComputeAccount.  # noqa: E501

        RAM limit.  # noqa: E501

        :return: The ram of this CreateComputeAccount.  # noqa: E501
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this CreateComputeAccount.

        RAM limit.  # noqa: E501

        :param ram: The ram of this CreateComputeAccount.  # noqa: E501
        :type: int
        """

        self._ram = ram

    @property
    def instances(self):
        """Gets the instances of this CreateComputeAccount.  # noqa: E501

        Instances limit.  # noqa: E501

        :return: The instances of this CreateComputeAccount.  # noqa: E501
        :rtype: int
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this CreateComputeAccount.

        Instances limit.  # noqa: E501

        :param instances: The instances of this CreateComputeAccount.  # noqa: E501
        :type: int
        """

        self._instances = instances

    @property
    def moderate(self):
        """Gets the moderate of this CreateComputeAccount.  # noqa: E501


        :return: The moderate of this CreateComputeAccount.  # noqa: E501
        :rtype: bool
        """
        return self._moderate

    @moderate.setter
    def moderate(self, moderate):
        """Sets the moderate of this CreateComputeAccount.


        :param moderate: The moderate of this CreateComputeAccount.  # noqa: E501
        :type: bool
        """

        self._moderate = moderate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateComputeAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateComputeAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateComputeAccount):
            return True

        return self.to_dict() != other.to_dict()
