# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class CloudAppEngines(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default': 'str',
        'memory_mb': 'str',
        'name': 'str',
        'price': 'str',
        'specs': 'str',
        'vcpus': 'str'
    }

    attribute_map = {
        'default': 'default',
        'memory_mb': 'memory_mb',
        'name': 'name',
        'price': 'price',
        'specs': 'specs',
        'vcpus': 'vcpus'
    }

    def __init__(self, default=None, memory_mb=None, name=None, price=None, specs=None, vcpus=None, _configuration=None):  # noqa: E501
        """CloudAppEngines - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._default = None
        self._memory_mb = None
        self._name = None
        self._price = None
        self._specs = None
        self._vcpus = None
        self.discriminator = None

        if default is not None:
            self.default = default
        if memory_mb is not None:
            self.memory_mb = memory_mb
        if name is not None:
            self.name = name
        if price is not None:
            self.price = price
        if specs is not None:
            self.specs = specs
        if vcpus is not None:
            self.vcpus = vcpus

    @property
    def default(self):
        """Gets the default of this CloudAppEngines.  # noqa: E501


        :return: The default of this CloudAppEngines.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this CloudAppEngines.


        :param default: The default of this CloudAppEngines.  # noqa: E501
        :type: str
        """

        self._default = default

    @property
    def memory_mb(self):
        """Gets the memory_mb of this CloudAppEngines.  # noqa: E501


        :return: The memory_mb of this CloudAppEngines.  # noqa: E501
        :rtype: str
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this CloudAppEngines.


        :param memory_mb: The memory_mb of this CloudAppEngines.  # noqa: E501
        :type: str
        """

        self._memory_mb = memory_mb

    @property
    def name(self):
        """Gets the name of this CloudAppEngines.  # noqa: E501


        :return: The name of this CloudAppEngines.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudAppEngines.


        :param name: The name of this CloudAppEngines.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this CloudAppEngines.  # noqa: E501


        :return: The price of this CloudAppEngines.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CloudAppEngines.


        :param price: The price of this CloudAppEngines.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def specs(self):
        """Gets the specs of this CloudAppEngines.  # noqa: E501


        :return: The specs of this CloudAppEngines.  # noqa: E501
        :rtype: str
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this CloudAppEngines.


        :param specs: The specs of this CloudAppEngines.  # noqa: E501
        :type: str
        """

        self._specs = specs

    @property
    def vcpus(self):
        """Gets the vcpus of this CloudAppEngines.  # noqa: E501


        :return: The vcpus of this CloudAppEngines.  # noqa: E501
        :rtype: str
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this CloudAppEngines.


        :param vcpus: The vcpus of this CloudAppEngines.  # noqa: E501
        :type: str
        """

        self._vcpus = vcpus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudAppEngines, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudAppEngines):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudAppEngines):
            return True

        return self.to_dict() != other.to_dict()
