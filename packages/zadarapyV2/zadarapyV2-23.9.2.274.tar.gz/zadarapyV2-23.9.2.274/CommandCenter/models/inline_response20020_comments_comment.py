# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20020CommentsComment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'severity_id': 'str',
        'severity_name': 'str',
        'created_by': 'str',
        'created_at': 'str'
    }

    attribute_map = {
        'content': 'content',
        'severity_id': 'severity_id',
        'severity_name': 'severity_name',
        'created_by': 'created_by',
        'created_at': 'created_at'
    }

    def __init__(self, content=None, severity_id=None, severity_name=None, created_by=None, created_at=None, _configuration=None):  # noqa: E501
        """InlineResponse20020CommentsComment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._content = None
        self._severity_id = None
        self._severity_name = None
        self._created_by = None
        self._created_at = None
        self.discriminator = None

        if content is not None:
            self.content = content
        if severity_id is not None:
            self.severity_id = severity_id
        if severity_name is not None:
            self.severity_name = severity_name
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at

    @property
    def content(self):
        """Gets the content of this InlineResponse20020CommentsComment.  # noqa: E501


        :return: The content of this InlineResponse20020CommentsComment.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineResponse20020CommentsComment.


        :param content: The content of this InlineResponse20020CommentsComment.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def severity_id(self):
        """Gets the severity_id of this InlineResponse20020CommentsComment.  # noqa: E501


        :return: The severity_id of this InlineResponse20020CommentsComment.  # noqa: E501
        :rtype: str
        """
        return self._severity_id

    @severity_id.setter
    def severity_id(self, severity_id):
        """Sets the severity_id of this InlineResponse20020CommentsComment.


        :param severity_id: The severity_id of this InlineResponse20020CommentsComment.  # noqa: E501
        :type: str
        """

        self._severity_id = severity_id

    @property
    def severity_name(self):
        """Gets the severity_name of this InlineResponse20020CommentsComment.  # noqa: E501


        :return: The severity_name of this InlineResponse20020CommentsComment.  # noqa: E501
        :rtype: str
        """
        return self._severity_name

    @severity_name.setter
    def severity_name(self, severity_name):
        """Sets the severity_name of this InlineResponse20020CommentsComment.


        :param severity_name: The severity_name of this InlineResponse20020CommentsComment.  # noqa: E501
        :type: str
        """

        self._severity_name = severity_name

    @property
    def created_by(self):
        """Gets the created_by of this InlineResponse20020CommentsComment.  # noqa: E501


        :return: The created_by of this InlineResponse20020CommentsComment.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this InlineResponse20020CommentsComment.


        :param created_by: The created_by of this InlineResponse20020CommentsComment.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20020CommentsComment.  # noqa: E501


        :return: The created_at of this InlineResponse20020CommentsComment.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20020CommentsComment.


        :param created_at: The created_at of this InlineResponse20020CommentsComment.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20020CommentsComment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20020CommentsComment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20020CommentsComment):
            return True

        return self.to_dict() != other.to_dict()
