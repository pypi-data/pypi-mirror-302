from typing import Dict, List, Optional
import redis

DATABASE_ENVIRONMENT_CONFIGS: Dict[str, tuple[str, str, str]]
ALL_DATABASE_NAMES: List[str]

class RedisClient:
    _instance: Optional['RedisClient']
    _dbs: Dict[str, redis.Redis]
    _initialized: bool

    def __new__(cls, db_names: Optional[List[str]] = None) -> 'RedisClient': ...

    def __init__(self, db_names: Optional[List[str]] = None) -> None: ...

    def _init_dbs(self, db_names: Optional[List[str]] = None) -> None: ...

    @staticmethod
    def _init_db(database_name: str) -> redis.Redis: ...

    def get_db(self, name: Optional[str] = None) -> redis.Redis: ...

    def get(self, key: str, db_name: Optional[str] = None) -> Optional[str]: ...

    def get_multiple_keys(self, keys: List[str], db_name: Optional[str] = None) -> List[Optional[str]]: ...

    def get_all_keys(self, db_name: Optional[str] = None) -> List[str]: ...

    def set(self, key: str, val: str, db_name: Optional[str] = None) -> None: ...

    def set_keys(self, dict_to_upload: Dict[str, str], db_name: Optional[str] = None, prefix: str = '') -> None: ...

    @property
    def dbs(self) -> Dict[str, redis.Redis]: ...

    @classmethod
    def _reset(cls) -> None: ...
