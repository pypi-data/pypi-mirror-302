# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20028DrivesDrive(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_name': 'str',
        'node': 'str',
        'address': 'str',
        'product_id': 'str',
        'capacity': 'int',
        'licensed': 'bool',
        'status': 'str',
        'vpsa': 'str',
        'volume': 'str'
    }

    attribute_map = {
        'device_name': 'device_name',
        'node': 'node',
        'address': 'address',
        'product_id': 'product_id',
        'capacity': 'capacity',
        'licensed': 'licensed',
        'status': 'status',
        'vpsa': 'vpsa',
        'volume': 'volume'
    }

    def __init__(self, device_name=None, node=None, address=None, product_id=None, capacity=None, licensed=None, status=None, vpsa=None, volume=None, _configuration=None):  # noqa: E501
        """InlineResponse20028DrivesDrive - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._device_name = None
        self._node = None
        self._address = None
        self._product_id = None
        self._capacity = None
        self._licensed = None
        self._status = None
        self._vpsa = None
        self._volume = None
        self.discriminator = None

        if device_name is not None:
            self.device_name = device_name
        if node is not None:
            self.node = node
        if address is not None:
            self.address = address
        if product_id is not None:
            self.product_id = product_id
        if capacity is not None:
            self.capacity = capacity
        if licensed is not None:
            self.licensed = licensed
        if status is not None:
            self.status = status
        if vpsa is not None:
            self.vpsa = vpsa
        if volume is not None:
            self.volume = volume

    @property
    def device_name(self):
        """Gets the device_name of this InlineResponse20028DrivesDrive.  # noqa: E501


        :return: The device_name of this InlineResponse20028DrivesDrive.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this InlineResponse20028DrivesDrive.


        :param device_name: The device_name of this InlineResponse20028DrivesDrive.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def node(self):
        """Gets the node of this InlineResponse20028DrivesDrive.  # noqa: E501


        :return: The node of this InlineResponse20028DrivesDrive.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this InlineResponse20028DrivesDrive.


        :param node: The node of this InlineResponse20028DrivesDrive.  # noqa: E501
        :type: str
        """

        self._node = node

    @property
    def address(self):
        """Gets the address of this InlineResponse20028DrivesDrive.  # noqa: E501


        :return: The address of this InlineResponse20028DrivesDrive.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineResponse20028DrivesDrive.


        :param address: The address of this InlineResponse20028DrivesDrive.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def product_id(self):
        """Gets the product_id of this InlineResponse20028DrivesDrive.  # noqa: E501


        :return: The product_id of this InlineResponse20028DrivesDrive.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this InlineResponse20028DrivesDrive.


        :param product_id: The product_id of this InlineResponse20028DrivesDrive.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def capacity(self):
        """Gets the capacity of this InlineResponse20028DrivesDrive.  # noqa: E501


        :return: The capacity of this InlineResponse20028DrivesDrive.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this InlineResponse20028DrivesDrive.


        :param capacity: The capacity of this InlineResponse20028DrivesDrive.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def licensed(self):
        """Gets the licensed of this InlineResponse20028DrivesDrive.  # noqa: E501


        :return: The licensed of this InlineResponse20028DrivesDrive.  # noqa: E501
        :rtype: bool
        """
        return self._licensed

    @licensed.setter
    def licensed(self, licensed):
        """Sets the licensed of this InlineResponse20028DrivesDrive.


        :param licensed: The licensed of this InlineResponse20028DrivesDrive.  # noqa: E501
        :type: bool
        """

        self._licensed = licensed

    @property
    def status(self):
        """Gets the status of this InlineResponse20028DrivesDrive.  # noqa: E501


        :return: The status of this InlineResponse20028DrivesDrive.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20028DrivesDrive.


        :param status: The status of this InlineResponse20028DrivesDrive.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def vpsa(self):
        """Gets the vpsa of this InlineResponse20028DrivesDrive.  # noqa: E501


        :return: The vpsa of this InlineResponse20028DrivesDrive.  # noqa: E501
        :rtype: str
        """
        return self._vpsa

    @vpsa.setter
    def vpsa(self, vpsa):
        """Sets the vpsa of this InlineResponse20028DrivesDrive.


        :param vpsa: The vpsa of this InlineResponse20028DrivesDrive.  # noqa: E501
        :type: str
        """

        self._vpsa = vpsa

    @property
    def volume(self):
        """Gets the volume of this InlineResponse20028DrivesDrive.  # noqa: E501


        :return: The volume of this InlineResponse20028DrivesDrive.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this InlineResponse20028DrivesDrive.


        :param volume: The volume of this InlineResponse20028DrivesDrive.  # noqa: E501
        :type: str
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20028DrivesDrive, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20028DrivesDrive):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20028DrivesDrive):
            return True

        return self.to_dict() != other.to_dict()
