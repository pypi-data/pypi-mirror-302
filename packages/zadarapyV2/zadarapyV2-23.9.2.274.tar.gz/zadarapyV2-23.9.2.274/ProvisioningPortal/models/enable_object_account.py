# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class EnableObjectAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'admin_username': 'str',
        'admin_password': 'str',
        'ip': 'str',
        'host': 'str',
        'auto_approve': 'bool'
    }

    attribute_map = {
        'account_name': 'account_name',
        'admin_username': 'admin_username',
        'admin_password': 'admin_password',
        'ip': 'ip',
        'host': 'host',
        'auto_approve': 'auto_approve'
    }

    def __init__(self, account_name=None, admin_username=None, admin_password=None, ip=None, host=None, auto_approve=None, _configuration=None):  # noqa: E501
        """EnableObjectAccount - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_name = None
        self._admin_username = None
        self._admin_password = None
        self._ip = None
        self._host = None
        self._auto_approve = None
        self.discriminator = None

        self.account_name = account_name
        self.admin_username = admin_username
        self.admin_password = admin_password
        self.ip = ip
        self.host = host
        if auto_approve is not None:
            self.auto_approve = auto_approve

    @property
    def account_name(self):
        """Gets the account_name of this EnableObjectAccount.  # noqa: E501

        The Object Storage admin account.  # noqa: E501

        :return: The account_name of this EnableObjectAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this EnableObjectAccount.

        The Object Storage admin account.  # noqa: E501

        :param account_name: The account_name of this EnableObjectAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")  # noqa: E501

        self._account_name = account_name

    @property
    def admin_username(self):
        """Gets the admin_username of this EnableObjectAccount.  # noqa: E501

        The Object Storage admin username.  # noqa: E501

        :return: The admin_username of this EnableObjectAccount.  # noqa: E501
        :rtype: str
        """
        return self._admin_username

    @admin_username.setter
    def admin_username(self, admin_username):
        """Sets the admin_username of this EnableObjectAccount.

        The Object Storage admin username.  # noqa: E501

        :param admin_username: The admin_username of this EnableObjectAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and admin_username is None:
            raise ValueError("Invalid value for `admin_username`, must not be `None`")  # noqa: E501

        self._admin_username = admin_username

    @property
    def admin_password(self):
        """Gets the admin_password of this EnableObjectAccount.  # noqa: E501

        The Object Storage admin password.  # noqa: E501

        :return: The admin_password of this EnableObjectAccount.  # noqa: E501
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this EnableObjectAccount.

        The Object Storage admin password.  # noqa: E501

        :param admin_password: The admin_password of this EnableObjectAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and admin_password is None:
            raise ValueError("Invalid value for `admin_password`, must not be `None`")  # noqa: E501

        self._admin_password = admin_password

    @property
    def ip(self):
        """Gets the ip of this EnableObjectAccount.  # noqa: E501

        The Object Storage ip and port.  # noqa: E501

        :return: The ip of this EnableObjectAccount.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this EnableObjectAccount.

        The Object Storage ip and port.  # noqa: E501

        :param ip: The ip of this EnableObjectAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def host(self):
        """Gets the host of this EnableObjectAccount.  # noqa: E501

        The Object Storage host name.  # noqa: E501

        :return: The host of this EnableObjectAccount.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this EnableObjectAccount.

        The Object Storage host name.  # noqa: E501

        :param host: The host of this EnableObjectAccount.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def auto_approve(self):
        """Gets the auto_approve of this EnableObjectAccount.  # noqa: E501

        Indicates wether to automatically approve account creation requests. False by default.  # noqa: E501

        :return: The auto_approve of this EnableObjectAccount.  # noqa: E501
        :rtype: bool
        """
        return self._auto_approve

    @auto_approve.setter
    def auto_approve(self, auto_approve):
        """Sets the auto_approve of this EnableObjectAccount.

        Indicates wether to automatically approve account creation requests. False by default.  # noqa: E501

        :param auto_approve: The auto_approve of this EnableObjectAccount.  # noqa: E501
        :type: bool
        """

        self._auto_approve = auto_approve

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnableObjectAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnableObjectAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnableObjectAccount):
            return True

        return self.to_dict() != other.to_dict()
