# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse200188ResponseAuditConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'str',
        'connect': 'str',
        'create': 'str',
        'open_file': 'str',
        'rename': 'str',
        'remove': 'str',
        'attributes': 'str',
        'pool_name': 'str',
        'obs_destination_name': 'str',
        'obs_destination_display_name': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'connect': 'connect',
        'create': 'create',
        'open_file': 'open_file',
        'rename': 'rename',
        'remove': 'remove',
        'attributes': 'attributes',
        'pool_name': 'pool_name',
        'obs_destination_name': 'obs_destination_name',
        'obs_destination_display_name': 'obs_destination_display_name'
    }

    def __init__(self, enabled=None, connect=None, create=None, open_file=None, rename=None, remove=None, attributes=None, pool_name=None, obs_destination_name=None, obs_destination_display_name=None, _configuration=None):  # noqa: E501
        """InlineResponse200188ResponseAuditConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled = None
        self._connect = None
        self._create = None
        self._open_file = None
        self._rename = None
        self._remove = None
        self._attributes = None
        self._pool_name = None
        self._obs_destination_name = None
        self._obs_destination_display_name = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if connect is not None:
            self.connect = connect
        if create is not None:
            self.create = create
        if open_file is not None:
            self.open_file = open_file
        if rename is not None:
            self.rename = rename
        if remove is not None:
            self.remove = remove
        if attributes is not None:
            self.attributes = attributes
        if pool_name is not None:
            self.pool_name = pool_name
        if obs_destination_name is not None:
            self.obs_destination_name = obs_destination_name
        if obs_destination_display_name is not None:
            self.obs_destination_display_name = obs_destination_display_name

    @property
    def enabled(self):
        """Gets the enabled of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501


        :return: The enabled of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InlineResponse200188ResponseAuditConfiguration.


        :param enabled: The enabled of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :type: str
        """

        self._enabled = enabled

    @property
    def connect(self):
        """Gets the connect of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501


        :return: The connect of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._connect

    @connect.setter
    def connect(self, connect):
        """Sets the connect of this InlineResponse200188ResponseAuditConfiguration.


        :param connect: The connect of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :type: str
        """

        self._connect = connect

    @property
    def create(self):
        """Gets the create of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501


        :return: The create of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this InlineResponse200188ResponseAuditConfiguration.


        :param create: The create of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :type: str
        """

        self._create = create

    @property
    def open_file(self):
        """Gets the open_file of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501


        :return: The open_file of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._open_file

    @open_file.setter
    def open_file(self, open_file):
        """Sets the open_file of this InlineResponse200188ResponseAuditConfiguration.


        :param open_file: The open_file of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :type: str
        """

        self._open_file = open_file

    @property
    def rename(self):
        """Gets the rename of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501


        :return: The rename of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._rename

    @rename.setter
    def rename(self, rename):
        """Sets the rename of this InlineResponse200188ResponseAuditConfiguration.


        :param rename: The rename of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :type: str
        """

        self._rename = rename

    @property
    def remove(self):
        """Gets the remove of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501


        :return: The remove of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """Sets the remove of this InlineResponse200188ResponseAuditConfiguration.


        :param remove: The remove of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :type: str
        """

        self._remove = remove

    @property
    def attributes(self):
        """Gets the attributes of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501


        :return: The attributes of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this InlineResponse200188ResponseAuditConfiguration.


        :param attributes: The attributes of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :type: str
        """

        self._attributes = attributes

    @property
    def pool_name(self):
        """Gets the pool_name of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501


        :return: The pool_name of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this InlineResponse200188ResponseAuditConfiguration.


        :param pool_name: The pool_name of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def obs_destination_name(self):
        """Gets the obs_destination_name of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501


        :return: The obs_destination_name of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._obs_destination_name

    @obs_destination_name.setter
    def obs_destination_name(self, obs_destination_name):
        """Sets the obs_destination_name of this InlineResponse200188ResponseAuditConfiguration.


        :param obs_destination_name: The obs_destination_name of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :type: str
        """

        self._obs_destination_name = obs_destination_name

    @property
    def obs_destination_display_name(self):
        """Gets the obs_destination_display_name of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501


        :return: The obs_destination_display_name of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._obs_destination_display_name

    @obs_destination_display_name.setter
    def obs_destination_display_name(self, obs_destination_display_name):
        """Sets the obs_destination_display_name of this InlineResponse200188ResponseAuditConfiguration.


        :param obs_destination_display_name: The obs_destination_display_name of this InlineResponse200188ResponseAuditConfiguration.  # noqa: E501
        :type: str
        """

        self._obs_destination_display_name = obs_destination_display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200188ResponseAuditConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200188ResponseAuditConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200188ResponseAuditConfiguration):
            return True

        return self.to_dict() != other.to_dict()
