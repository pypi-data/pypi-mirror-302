# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import List, Dict, Any


class KeywordSuggestInfo(TeaModel):
    def __init__(
        self,
        address: str = None,
        business_area_with_city: 'KeywordSuggestInfo' = None,
        city_code: int = None,
        city_name: str = None,
        display_name: str = None,
        hotel_id: str = None,
        icon: str = None,
        point: str = None,
        price: str = None,
        region: int = None,
        type: int = None,
        type_desc: str = None,
    ):
        self.address = address
        self.business_area_with_city = business_area_with_city
        self.city_code = city_code
        self.city_name = city_name
        self.display_name = display_name
        self.hotel_id = hotel_id
        self.icon = icon
        self.point = point
        self.price = price
        self.region = region
        self.type = type
        self.type_desc = type_desc

    def validate(self):
        if self.business_area_with_city:
            self.business_area_with_city.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.business_area_with_city is not None:
            result['business_area_with_city'] = self.business_area_with_city.to_map()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.icon is not None:
            result['icon'] = self.icon
        if self.point is not None:
            result['point'] = self.point
        if self.price is not None:
            result['price'] = self.price
        if self.region is not None:
            result['region'] = self.region
        if self.type is not None:
            result['type'] = self.type
        if self.type_desc is not None:
            result['type_desc'] = self.type_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('business_area_with_city') is not None:
            temp_model = KeywordSuggestInfo()
            self.business_area_with_city = temp_model.from_map(m['business_area_with_city'])
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('point') is not None:
            self.point = m.get('point')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('type_desc') is not None:
            self.type_desc = m.get('type_desc')
        return self


class ModuleFlightItemListBestPriceItemFlightRuleInfosValue(TeaModel):
    def __init__(
        self,
        refund_change_rule_desc: str = None,
        baggage_desc: str = None,
    ):
        self.refund_change_rule_desc = refund_change_rule_desc
        self.baggage_desc = baggage_desc

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.refund_change_rule_desc is not None:
            result['refund_change_rule_desc'] = self.refund_change_rule_desc
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('refund_change_rule_desc') is not None:
            self.refund_change_rule_desc = m.get('refund_change_rule_desc')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListSegmentPosition(TeaModel):
    def __init__(
        self,
        segment_index: int = None,
        journey_index: int = None,
    ):
        self.segment_index = segment_index
        self.journey_index = journey_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListCabin(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        quantity: str = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.quantity = quantity

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.quantity is not None:
            result['quantity'] = self.quantity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityList(TeaModel):
    def __init__(
        self,
        segment_position: ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListSegmentPosition = None,
        cabin: ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListCabin = None,
    ):
        self.segment_position = segment_position
        self.cabin = cabin

    def validate(self):
        if self.segment_position:
            self.segment_position.validate()
        if self.cabin:
            self.cabin.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.cabin is not None:
            result['cabin'] = self.cabin.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('segment_position') is not None:
            temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('cabin') is not None:
            temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityListCabin()
            self.cabin = temp_model.from_map(m['cabin'])
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPricePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSearchPrice(TeaModel):
    def __init__(
        self,
        ticket_price: int = None,
        sell_price: int = None,
        tax: int = None,
    ):
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.tax = tax

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.tax is not None:
            result['tax'] = self.tax
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceList(TeaModel):
    def __init__(
        self,
        segment_position: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSegmentPosition = None,
        search_price: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSearchPrice = None,
    ):
        self.segment_position = segment_position
        self.search_price = search_price

    def validate(self):
        if self.segment_position:
            self.segment_position.validate()
        if self.search_price:
            self.search_price.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('segment_position') is not None:
            temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('search_price') is not None:
            temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceListSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        cabin_class_memo: str = None,
        specification: str = None,
        quantity: str = None,
        link_cabins: List[str] = None,
        reshop_change_cabin: bool = None,
        child_cabin_type: int = None,
        infant_basic_cabin: str = None,
        inner_cabin_class: int = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.cabin_class_memo = cabin_class_memo
        self.specification = specification
        self.quantity = quantity
        self.link_cabins = link_cabins
        self.reshop_change_cabin = reshop_change_cabin
        self.child_cabin_type = child_cabin_type
        self.infant_basic_cabin = infant_basic_cabin
        self.inner_cabin_class = inner_cabin_class

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValuePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListBestPriceItemShoppingItemMapValue(TeaModel):
    def __init__(
        self,
        cabin_quantity_list: List[ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityList] = None,
        search_price: ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPrice = None,
        segment_price_list: List[ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceList] = None,
        id: str = None,
        cabin_quantity: Dict[str, ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue] = None,
        segment_price: Dict[str, ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue] = None,
    ):
        self.cabin_quantity_list = cabin_quantity_list
        self.search_price = search_price
        self.segment_price_list = segment_price_list
        # id
        self.id = id
        self.cabin_quantity = cabin_quantity
        self.segment_price = segment_price

    def validate(self):
        if self.cabin_quantity_list:
            for k in self.cabin_quantity_list:
                if k:
                    k.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price_list:
            for k in self.segment_price_list:
                if k:
                    k.validate()
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['cabin_quantity_list'] = []
        if self.cabin_quantity_list is not None:
            for k in self.cabin_quantity_list:
                result['cabin_quantity_list'].append(k.to_map() if k else None)
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price_list'] = []
        if self.segment_price_list is not None:
            for k in self.segment_price_list:
                result['segment_price_list'].append(k.to_map() if k else None)
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.cabin_quantity_list = []
        if m.get('cabin_quantity_list') is not None:
            for k in m.get('cabin_quantity_list'):
                temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityList()
                self.cabin_quantity_list.append(temp_model.from_map(k))
        if m.get('search_price') is not None:
            temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price_list = []
        if m.get('segment_price_list') is not None:
            for k in m.get('segment_price_list'):
                temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceList()
                self.segment_price_list.append(temp_model.from_map(k))
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleFlightItemListBestPriceItemSubItemPositionMapValue(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPricePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        cabin_class_memo: str = None,
        specification: str = None,
        quantity: str = None,
        link_cabins: List[str] = None,
        reshop_change_cabin: bool = None,
        child_cabin_type: int = None,
        infant_basic_cabin: str = None,
        inner_cabin_class: int = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.cabin_class_memo = cabin_class_memo
        self.specification = specification
        self.quantity = quantity
        self.link_cabins = link_cabins
        self.reshop_change_cabin = reshop_change_cabin
        self.child_cabin_type = child_cabin_type
        self.infant_basic_cabin = infant_basic_cabin
        self.inner_cabin_class = inner_cabin_class

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue(TeaModel):
    def __init__(
        self,
        id: str = None,
        cabin_quantity: Dict[str, ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue] = None,
        search_price: ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPrice = None,
        segment_price: Dict[str, ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue] = None,
    ):
        # id
        self.id = id
        self.cabin_quantity = cabin_quantity
        self.search_price = search_price
        self.segment_price = segment_price

    def validate(self):
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        if m.get('search_price') is not None:
            temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleFlightItemListItemListFlightRuleInfosValue(TeaModel):
    def __init__(
        self,
        refund_change_rule_desc: str = None,
        baggage_desc: str = None,
    ):
        self.refund_change_rule_desc = refund_change_rule_desc
        self.baggage_desc = baggage_desc

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.refund_change_rule_desc is not None:
            result['refund_change_rule_desc'] = self.refund_change_rule_desc
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('refund_change_rule_desc') is not None:
            self.refund_change_rule_desc = m.get('refund_change_rule_desc')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        return self


class ModuleFlightItemListItemListShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListItemListShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleFlightItemListItemListShoppingItemMapValueSearchPricePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListItemListShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        cabin_class_memo: str = None,
        specification: str = None,
        quantity: str = None,
        link_cabins: List[str] = None,
        reshop_change_cabin: bool = None,
        child_cabin_type: int = None,
        infant_basic_cabin: str = None,
        inner_cabin_class: int = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.cabin_class_memo = cabin_class_memo
        self.specification = specification
        self.quantity = quantity
        self.link_cabins = link_cabins
        self.reshop_change_cabin = reshop_change_cabin
        self.child_cabin_type = child_cabin_type
        self.infant_basic_cabin = infant_basic_cabin
        self.inner_cabin_class = inner_cabin_class

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListItemListShoppingItemMapValue(TeaModel):
    def __init__(
        self,
        id: str = None,
        cabin_quantity: Dict[str, ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue] = None,
        search_price: ModuleFlightItemListItemListShoppingItemMapValueSearchPrice = None,
        segment_price: Dict[str, ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue] = None,
    ):
        # id
        self.id = id
        self.cabin_quantity = cabin_quantity
        self.search_price = search_price
        self.segment_price = segment_price

    def validate(self):
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleFlightItemListItemListShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        if m.get('search_price') is not None:
            temp_model = ModuleFlightItemListItemListShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleFlightItemListItemListShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleFlightItemListItemListSubItemPositionMapValue(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        cabin_class_memo: str = None,
        specification: str = None,
        quantity: str = None,
        link_cabins: List[str] = None,
        reshop_change_cabin: bool = None,
        child_cabin_type: int = None,
        infant_basic_cabin: str = None,
        inner_cabin_class: int = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.cabin_class_memo = cabin_class_memo
        self.specification = specification
        self.quantity = quantity
        self.link_cabins = link_cabins
        self.reshop_change_cabin = reshop_change_cabin
        self.child_cabin_type = child_cabin_type
        self.infant_basic_cabin = infant_basic_cabin
        self.inner_cabin_class = inner_cabin_class

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleFlightItemListItemListSubItemsShoppingItemMapValue(TeaModel):
    def __init__(
        self,
        id: str = None,
        cabin_quantity: Dict[str, ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue] = None,
        search_price: ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPrice = None,
        segment_price: Dict[str, ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue] = None,
    ):
        # id
        self.id = id
        self.cabin_quantity = cabin_quantity
        self.search_price = search_price
        self.segment_price = segment_price

    def validate(self):
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        if m.get('search_price') is not None:
            temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleAgentInfosAttributeShowInfoMapValue(TeaModel):
    def __init__(
        self,
        code: str = None,
        name: str = None,
        text: str = None,
    ):
        self.code = code
        self.name = name
        self.text = text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.name is not None:
            result['name'] = self.name
        if self.text is not None:
            result['text'] = self.text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('text') is not None:
            self.text = m.get('text')
        return self


class ModuleAgentInfoAttributeShowInfoMapValue(TeaModel):
    def __init__(
        self,
        code: str = None,
        name: str = None,
        text: str = None,
    ):
        self.code = code
        self.name = name
        self.text = text

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.name is not None:
            result['name'] = self.name
        if self.text is not None:
            result['text'] = self.text
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('text') is not None:
            self.text = m.get('text')
        return self


class ModuleItemListFlightRuleInfosValue(TeaModel):
    def __init__(
        self,
        refund_change_rule_desc: str = None,
        baggage_desc: str = None,
    ):
        self.refund_change_rule_desc = refund_change_rule_desc
        self.baggage_desc = baggage_desc

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.refund_change_rule_desc is not None:
            result['refund_change_rule_desc'] = self.refund_change_rule_desc
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('refund_change_rule_desc') is not None:
            self.refund_change_rule_desc = m.get('refund_change_rule_desc')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        return self


class ModuleItemListShoppingItemMapValueCabinQuantityListSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleItemListShoppingItemMapValueCabinQuantityListCabin(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        quantity: str = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.quantity = quantity

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.quantity is not None:
            result['quantity'] = self.quantity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        return self


class ModuleItemListShoppingItemMapValueCabinQuantityList(TeaModel):
    def __init__(
        self,
        segment_position: ModuleItemListShoppingItemMapValueCabinQuantityListSegmentPosition = None,
        cabin: ModuleItemListShoppingItemMapValueCabinQuantityListCabin = None,
    ):
        self.segment_position = segment_position
        self.cabin = cabin

    def validate(self):
        if self.segment_position:
            self.segment_position.validate()
        if self.cabin:
            self.cabin.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.cabin is not None:
            result['cabin'] = self.cabin.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('segment_position') is not None:
            temp_model = ModuleItemListShoppingItemMapValueCabinQuantityListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('cabin') is not None:
            temp_model = ModuleItemListShoppingItemMapValueCabinQuantityListCabin()
            self.cabin = temp_model.from_map(m['cabin'])
        return self


class ModuleItemListShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleItemListShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleItemListShoppingItemMapValueSearchPricePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleItemListShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleItemListShoppingItemMapValueSegmentPriceListSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleItemListShoppingItemMapValueSegmentPriceListSearchPrice(TeaModel):
    def __init__(
        self,
        ticket_price: int = None,
        sell_price: int = None,
        tax: int = None,
    ):
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.tax = tax

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.tax is not None:
            result['tax'] = self.tax
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        return self


class ModuleItemListShoppingItemMapValueSegmentPriceList(TeaModel):
    def __init__(
        self,
        segment_position: ModuleItemListShoppingItemMapValueSegmentPriceListSegmentPosition = None,
        search_price: ModuleItemListShoppingItemMapValueSegmentPriceListSearchPrice = None,
    ):
        self.segment_position = segment_position
        self.search_price = search_price

    def validate(self):
        if self.segment_position:
            self.segment_position.validate()
        if self.search_price:
            self.search_price.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('segment_position') is not None:
            temp_model = ModuleItemListShoppingItemMapValueSegmentPriceListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('search_price') is not None:
            temp_model = ModuleItemListShoppingItemMapValueSegmentPriceListSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        return self


class ModuleItemListShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        cabin_class_memo: str = None,
        specification: str = None,
        quantity: str = None,
        link_cabins: List[str] = None,
        reshop_change_cabin: bool = None,
        child_cabin_type: int = None,
        infant_basic_cabin: str = None,
        inner_cabin_class: int = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.cabin_class_memo = cabin_class_memo
        self.specification = specification
        self.quantity = quantity
        self.link_cabins = link_cabins
        self.reshop_change_cabin = reshop_change_cabin
        self.child_cabin_type = child_cabin_type
        self.infant_basic_cabin = infant_basic_cabin
        self.inner_cabin_class = inner_cabin_class

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleItemListShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleItemListShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleItemListShoppingItemMapValue(TeaModel):
    def __init__(
        self,
        cabin_quantity_list: List[ModuleItemListShoppingItemMapValueCabinQuantityList] = None,
        search_price: ModuleItemListShoppingItemMapValueSearchPrice = None,
        segment_price_list: List[ModuleItemListShoppingItemMapValueSegmentPriceList] = None,
        id: str = None,
        cabin_quantity: Dict[str, ModuleItemListShoppingItemMapValueCabinQuantityValue] = None,
        segment_price: Dict[str, ModuleItemListShoppingItemMapValueSegmentPriceValue] = None,
    ):
        self.cabin_quantity_list = cabin_quantity_list
        self.search_price = search_price
        self.segment_price_list = segment_price_list
        # id
        self.id = id
        self.cabin_quantity = cabin_quantity
        self.segment_price = segment_price

    def validate(self):
        if self.cabin_quantity_list:
            for k in self.cabin_quantity_list:
                if k:
                    k.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price_list:
            for k in self.segment_price_list:
                if k:
                    k.validate()
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['cabin_quantity_list'] = []
        if self.cabin_quantity_list is not None:
            for k in self.cabin_quantity_list:
                result['cabin_quantity_list'].append(k.to_map() if k else None)
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price_list'] = []
        if self.segment_price_list is not None:
            for k in self.segment_price_list:
                result['segment_price_list'].append(k.to_map() if k else None)
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.cabin_quantity_list = []
        if m.get('cabin_quantity_list') is not None:
            for k in m.get('cabin_quantity_list'):
                temp_model = ModuleItemListShoppingItemMapValueCabinQuantityList()
                self.cabin_quantity_list.append(temp_model.from_map(k))
        if m.get('search_price') is not None:
            temp_model = ModuleItemListShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price_list = []
        if m.get('segment_price_list') is not None:
            for k in m.get('segment_price_list'):
                temp_model = ModuleItemListShoppingItemMapValueSegmentPriceList()
                self.segment_price_list.append(temp_model.from_map(k))
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleItemListShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleItemListShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleItemListSubItemPositionMapValue(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleItemListSubItemsShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleItemListSubItemsShoppingItemMapValueSearchPricePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        cabin_class_memo: str = None,
        specification: str = None,
        quantity: str = None,
        link_cabins: List[str] = None,
        reshop_change_cabin: bool = None,
        child_cabin_type: int = None,
        infant_basic_cabin: str = None,
        inner_cabin_class: int = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.cabin_class_memo = cabin_class_memo
        self.specification = specification
        self.quantity = quantity
        self.link_cabins = link_cabins
        self.reshop_change_cabin = reshop_change_cabin
        self.child_cabin_type = child_cabin_type
        self.infant_basic_cabin = infant_basic_cabin
        self.inner_cabin_class = inner_cabin_class

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_class_memo is not None:
            result['cabin_class_memo'] = self.cabin_class_memo
        if self.specification is not None:
            result['specification'] = self.specification
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.link_cabins is not None:
            result['link_cabins'] = self.link_cabins
        if self.reshop_change_cabin is not None:
            result['reshop_change_cabin'] = self.reshop_change_cabin
        if self.child_cabin_type is not None:
            result['child_cabin_type'] = self.child_cabin_type
        if self.infant_basic_cabin is not None:
            result['infant_basic_cabin'] = self.infant_basic_cabin
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_class_memo') is not None:
            self.cabin_class_memo = m.get('cabin_class_memo')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('link_cabins') is not None:
            self.link_cabins = m.get('link_cabins')
        if m.get('reshop_change_cabin') is not None:
            self.reshop_change_cabin = m.get('reshop_change_cabin')
        if m.get('child_cabin_type') is not None:
            self.child_cabin_type = m.get('child_cabin_type')
        if m.get('infant_basic_cabin') is not None:
            self.infant_basic_cabin = m.get('infant_basic_cabin')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        return self


class ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo(TeaModel):
    def __init__(
        self,
        discount_info: str = None,
        discount_num: float = None,
        show_ticket_price: bool = None,
    ):
        self.discount_info = discount_info
        self.discount_num = discount_num
        self.show_ticket_price = show_ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.discount_num is not None:
            result['discount_num'] = self.discount_num
        if self.show_ticket_price is not None:
            result['show_ticket_price'] = self.show_ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('discount_num') is not None:
            self.discount_num = m.get('discount_num')
        if m.get('show_ticket_price') is not None:
            self.show_ticket_price = m.get('show_ticket_price')
        return self


class ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue(TeaModel):
    def __init__(
        self,
        floor_price: int = None,
        ticket_price: int = None,
        sell_price: int = None,
        original_sell_price: int = None,
        base_total_price: int = None,
        before_control_price: int = None,
        tax: int = None,
        supply_price: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        oil_price: int = None,
        first_standard_price: int = None,
        business_standard_price: int = None,
        common_standard_price: int = None,
        inter_ticket_price: int = None,
        subtracted_price: int = None,
        origin_common_price: int = None,
        dynamic_promotion_price: int = None,
        installment_num: int = None,
        installment_price: float = None,
        competition_dynamic_price: int = None,
        competition_promotion_price: int = None,
        min_before_control_price_of_normal: int = None,
        price_show_info: ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo = None,
    ):
        self.floor_price = floor_price
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.original_sell_price = original_sell_price
        self.base_total_price = base_total_price
        self.before_control_price = before_control_price
        self.tax = tax
        self.supply_price = supply_price
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.oil_price = oil_price
        self.first_standard_price = first_standard_price
        self.business_standard_price = business_standard_price
        self.common_standard_price = common_standard_price
        # fdPrice
        self.inter_ticket_price = inter_ticket_price
        self.subtracted_price = subtracted_price
        self.origin_common_price = origin_common_price
        self.dynamic_promotion_price = dynamic_promotion_price
        self.installment_num = installment_num
        self.installment_price = installment_price
        self.competition_dynamic_price = competition_dynamic_price
        self.competition_promotion_price = competition_promotion_price
        self.min_before_control_price_of_normal = min_before_control_price_of_normal
        self.price_show_info = price_show_info

    def validate(self):
        if self.price_show_info:
            self.price_show_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.floor_price is not None:
            result['floor_price'] = self.floor_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.original_sell_price is not None:
            result['original_sell_price'] = self.original_sell_price
        if self.base_total_price is not None:
            result['base_total_price'] = self.base_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.supply_price is not None:
            result['supply_price'] = self.supply_price
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.first_standard_price is not None:
            result['first_standard_price'] = self.first_standard_price
        if self.business_standard_price is not None:
            result['business_standard_price'] = self.business_standard_price
        if self.common_standard_price is not None:
            result['common_standard_price'] = self.common_standard_price
        if self.inter_ticket_price is not None:
            result['inter_ticket_price'] = self.inter_ticket_price
        if self.subtracted_price is not None:
            result['subtracted_price'] = self.subtracted_price
        if self.origin_common_price is not None:
            result['origin_common_price'] = self.origin_common_price
        if self.dynamic_promotion_price is not None:
            result['dynamic_promotion_price'] = self.dynamic_promotion_price
        if self.installment_num is not None:
            result['installment_num'] = self.installment_num
        if self.installment_price is not None:
            result['installment_price'] = self.installment_price
        if self.competition_dynamic_price is not None:
            result['competition_dynamic_price'] = self.competition_dynamic_price
        if self.competition_promotion_price is not None:
            result['competition_promotion_price'] = self.competition_promotion_price
        if self.min_before_control_price_of_normal is not None:
            result['min_before_control_price_of_normal'] = self.min_before_control_price_of_normal
        if self.price_show_info is not None:
            result['price_show_info'] = self.price_show_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('floor_price') is not None:
            self.floor_price = m.get('floor_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('original_sell_price') is not None:
            self.original_sell_price = m.get('original_sell_price')
        if m.get('base_total_price') is not None:
            self.base_total_price = m.get('base_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('supply_price') is not None:
            self.supply_price = m.get('supply_price')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('first_standard_price') is not None:
            self.first_standard_price = m.get('first_standard_price')
        if m.get('business_standard_price') is not None:
            self.business_standard_price = m.get('business_standard_price')
        if m.get('common_standard_price') is not None:
            self.common_standard_price = m.get('common_standard_price')
        if m.get('inter_ticket_price') is not None:
            self.inter_ticket_price = m.get('inter_ticket_price')
        if m.get('subtracted_price') is not None:
            self.subtracted_price = m.get('subtracted_price')
        if m.get('origin_common_price') is not None:
            self.origin_common_price = m.get('origin_common_price')
        if m.get('dynamic_promotion_price') is not None:
            self.dynamic_promotion_price = m.get('dynamic_promotion_price')
        if m.get('installment_num') is not None:
            self.installment_num = m.get('installment_num')
        if m.get('installment_price') is not None:
            self.installment_price = m.get('installment_price')
        if m.get('competition_dynamic_price') is not None:
            self.competition_dynamic_price = m.get('competition_dynamic_price')
        if m.get('competition_promotion_price') is not None:
            self.competition_promotion_price = m.get('competition_promotion_price')
        if m.get('min_before_control_price_of_normal') is not None:
            self.min_before_control_price_of_normal = m.get('min_before_control_price_of_normal')
        if m.get('price_show_info') is not None:
            temp_model = ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValuePriceShowInfo()
            self.price_show_info = temp_model.from_map(m['price_show_info'])
        return self


class ModuleItemListSubItemsShoppingItemMapValue(TeaModel):
    def __init__(
        self,
        search_price: ModuleItemListSubItemsShoppingItemMapValueSearchPrice = None,
        id: str = None,
        cabin_quantity: Dict[str, ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue] = None,
        segment_price: Dict[str, ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue] = None,
    ):
        self.search_price = search_price
        # id
        self.id = id
        self.cabin_quantity = cabin_quantity
        self.segment_price = segment_price

    def validate(self):
        if self.search_price:
            self.search_price.validate()
        if self.cabin_quantity:
            for v in self.cabin_quantity.values():
                if v:
                    v.validate()
        if self.segment_price:
            for v in self.segment_price.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        if self.id is not None:
            result['id'] = self.id
        result['cabin_quantity'] = {}
        if self.cabin_quantity is not None:
            for k, v in self.cabin_quantity.items():
                result['cabin_quantity'][k] = v.to_map()
        result['segment_price'] = {}
        if self.segment_price is not None:
            for k, v in self.segment_price.items():
                result['segment_price'][k] = v.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search_price') is not None:
            temp_model = ModuleItemListSubItemsShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        if m.get('id') is not None:
            self.id = m.get('id')
        self.cabin_quantity = {}
        if m.get('cabin_quantity') is not None:
            for k, v in m.get('cabin_quantity').items():
                temp_model = ModuleItemListSubItemsShoppingItemMapValueCabinQuantityValue()
                self.cabin_quantity[k] = temp_model.from_map(v)
        self.segment_price = {}
        if m.get('segment_price') is not None:
            for k, v in m.get('segment_price').items():
                temp_model = ModuleItemListSubItemsShoppingItemMapValueSegmentPriceValue()
                self.segment_price[k] = temp_model.from_map(v)
        return self


class ModuleOrderItemListBaggageRuleBaggageInfoMapValue(TeaModel):
    def __init__(
        self,
        carry_freepc: int = None,
        carry_bag_weight: int = None,
        carry_bag_size: str = None,
        is_all_carry_bag_weight: bool = None,
        airline: str = None,
        start_airport: str = None,
        end_airport: str = None,
        start_city_code: str = None,
        end_city_code: str = None,
        free_pcs: int = None,
        baggage_weight: int = None,
        baggage_unit: str = None,
        baggage_size: str = None,
        all_weight: bool = None,
        total_pcs: int = None,
        total_weight: int = None,
    ):
        self.carry_freepc = carry_freepc
        self.carry_bag_weight = carry_bag_weight
        self.carry_bag_size = carry_bag_size
        self.is_all_carry_bag_weight = is_all_carry_bag_weight
        self.airline = airline
        self.start_airport = start_airport
        self.end_airport = end_airport
        self.start_city_code = start_city_code
        self.end_city_code = end_city_code
        self.free_pcs = free_pcs
        self.baggage_weight = baggage_weight
        self.baggage_unit = baggage_unit
        self.baggage_size = baggage_size
        self.all_weight = all_weight
        self.total_pcs = total_pcs
        self.total_weight = total_weight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.carry_freepc is not None:
            result['carry_freepc'] = self.carry_freepc
        if self.carry_bag_weight is not None:
            result['carry_bag_weight'] = self.carry_bag_weight
        if self.carry_bag_size is not None:
            result['carry_bag_size'] = self.carry_bag_size
        if self.is_all_carry_bag_weight is not None:
            result['is_all_carry_bag_weight'] = self.is_all_carry_bag_weight
        if self.airline is not None:
            result['airline'] = self.airline
        if self.start_airport is not None:
            result['start_airport'] = self.start_airport
        if self.end_airport is not None:
            result['end_airport'] = self.end_airport
        if self.start_city_code is not None:
            result['start_city_code'] = self.start_city_code
        if self.end_city_code is not None:
            result['end_city_code'] = self.end_city_code
        if self.free_pcs is not None:
            result['free_pcs'] = self.free_pcs
        if self.baggage_weight is not None:
            result['baggage_weight'] = self.baggage_weight
        if self.baggage_unit is not None:
            result['baggage_unit'] = self.baggage_unit
        if self.baggage_size is not None:
            result['baggage_size'] = self.baggage_size
        if self.all_weight is not None:
            result['all_weight'] = self.all_weight
        if self.total_pcs is not None:
            result['total_pcs'] = self.total_pcs
        if self.total_weight is not None:
            result['total_weight'] = self.total_weight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('carry_freepc') is not None:
            self.carry_freepc = m.get('carry_freepc')
        if m.get('carry_bag_weight') is not None:
            self.carry_bag_weight = m.get('carry_bag_weight')
        if m.get('carry_bag_size') is not None:
            self.carry_bag_size = m.get('carry_bag_size')
        if m.get('is_all_carry_bag_weight') is not None:
            self.is_all_carry_bag_weight = m.get('is_all_carry_bag_weight')
        if m.get('airline') is not None:
            self.airline = m.get('airline')
        if m.get('start_airport') is not None:
            self.start_airport = m.get('start_airport')
        if m.get('end_airport') is not None:
            self.end_airport = m.get('end_airport')
        if m.get('start_city_code') is not None:
            self.start_city_code = m.get('start_city_code')
        if m.get('end_city_code') is not None:
            self.end_city_code = m.get('end_city_code')
        if m.get('free_pcs') is not None:
            self.free_pcs = m.get('free_pcs')
        if m.get('baggage_weight') is not None:
            self.baggage_weight = m.get('baggage_weight')
        if m.get('baggage_unit') is not None:
            self.baggage_unit = m.get('baggage_unit')
        if m.get('baggage_size') is not None:
            self.baggage_size = m.get('baggage_size')
        if m.get('all_weight') is not None:
            self.all_weight = m.get('all_weight')
        if m.get('total_pcs') is not None:
            self.total_pcs = m.get('total_pcs')
        if m.get('total_weight') is not None:
            self.total_weight = m.get('total_weight')
        return self


class ModuleOrderItemListRefundChangeRuleOfferPenaltyInfoMapValue(TeaModel):
    def __init__(
        self,
        struct: bool = None,
        cancel_fee_ind: bool = None,
        change_fee_ind: bool = None,
        upgrade_fee_ind: bool = None,
        reissue_ind: bool = None,
        penalty_type_code: int = None,
        penalty_apply_range_code: int = None,
        penalty_charge_type_code: int = None,
        fee: float = None,
        currency: str = None,
        penalty_percent: float = None,
        start_time: int = None,
        end_time: int = None,
        time_unit_code: int = None,
        title: str = None,
    ):
        self.struct = struct
        self.cancel_fee_ind = cancel_fee_ind
        self.change_fee_ind = change_fee_ind
        self.upgrade_fee_ind = upgrade_fee_ind
        self.reissue_ind = reissue_ind
        self.penalty_type_code = penalty_type_code
        self.penalty_apply_range_code = penalty_apply_range_code
        self.penalty_charge_type_code = penalty_charge_type_code
        self.fee = fee
        self.currency = currency
        self.penalty_percent = penalty_percent
        self.start_time = start_time
        self.end_time = end_time
        self.time_unit_code = time_unit_code
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.struct is not None:
            result['struct'] = self.struct
        if self.cancel_fee_ind is not None:
            result['cancel_fee_ind'] = self.cancel_fee_ind
        if self.change_fee_ind is not None:
            result['change_fee_ind'] = self.change_fee_ind
        if self.upgrade_fee_ind is not None:
            result['upgrade_fee_ind'] = self.upgrade_fee_ind
        if self.reissue_ind is not None:
            result['reissue_ind'] = self.reissue_ind
        if self.penalty_type_code is not None:
            result['penalty_type_code'] = self.penalty_type_code
        if self.penalty_apply_range_code is not None:
            result['penalty_apply_range_code'] = self.penalty_apply_range_code
        if self.penalty_charge_type_code is not None:
            result['penalty_charge_type_code'] = self.penalty_charge_type_code
        if self.fee is not None:
            result['fee'] = self.fee
        if self.currency is not None:
            result['currency'] = self.currency
        if self.penalty_percent is not None:
            result['penalty_percent'] = self.penalty_percent
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.time_unit_code is not None:
            result['time_unit_code'] = self.time_unit_code
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('struct') is not None:
            self.struct = m.get('struct')
        if m.get('cancel_fee_ind') is not None:
            self.cancel_fee_ind = m.get('cancel_fee_ind')
        if m.get('change_fee_ind') is not None:
            self.change_fee_ind = m.get('change_fee_ind')
        if m.get('upgrade_fee_ind') is not None:
            self.upgrade_fee_ind = m.get('upgrade_fee_ind')
        if m.get('reissue_ind') is not None:
            self.reissue_ind = m.get('reissue_ind')
        if m.get('penalty_type_code') is not None:
            self.penalty_type_code = m.get('penalty_type_code')
        if m.get('penalty_apply_range_code') is not None:
            self.penalty_apply_range_code = m.get('penalty_apply_range_code')
        if m.get('penalty_charge_type_code') is not None:
            self.penalty_charge_type_code = m.get('penalty_charge_type_code')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        if m.get('currency') is not None:
            self.currency = m.get('currency')
        if m.get('penalty_percent') is not None:
            self.penalty_percent = m.get('penalty_percent')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('time_unit_code') is not None:
            self.time_unit_code = m.get('time_unit_code')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class ModuleGroupItemShoppingItemMapValueCabinQuantityListSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleGroupItemShoppingItemMapValueCabinQuantityListCabin(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        quantity: str = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.quantity = quantity

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.quantity is not None:
            result['quantity'] = self.quantity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        return self


class ModuleGroupItemShoppingItemMapValueCabinQuantityList(TeaModel):
    def __init__(
        self,
        segment_position: ModuleGroupItemShoppingItemMapValueCabinQuantityListSegmentPosition = None,
        cabin: ModuleGroupItemShoppingItemMapValueCabinQuantityListCabin = None,
    ):
        self.segment_position = segment_position
        self.cabin = cabin

    def validate(self):
        if self.segment_position:
            self.segment_position.validate()
        if self.cabin:
            self.cabin.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.cabin is not None:
            result['cabin'] = self.cabin.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('segment_position') is not None:
            temp_model = ModuleGroupItemShoppingItemMapValueCabinQuantityListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('cabin') is not None:
            temp_model = ModuleGroupItemShoppingItemMapValueCabinQuantityListCabin()
            self.cabin = temp_model.from_map(m['cabin'])
        return self


class ModuleGroupItemShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(
        self,
        ticket_price: int = None,
        sell_price: int = None,
        tax: int = None,
    ):
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.tax = tax

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.tax is not None:
            result['tax'] = self.tax
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        return self


class ModuleGroupItemShoppingItemMapValueSegmentPriceListSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleGroupItemShoppingItemMapValueSegmentPriceListSearchPrice(TeaModel):
    def __init__(
        self,
        ticket_price: int = None,
        sell_price: int = None,
        tax: int = None,
    ):
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.tax = tax

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.tax is not None:
            result['tax'] = self.tax
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        return self


class ModuleGroupItemShoppingItemMapValueSegmentPriceList(TeaModel):
    def __init__(
        self,
        segment_position: ModuleGroupItemShoppingItemMapValueSegmentPriceListSegmentPosition = None,
        search_price: ModuleGroupItemShoppingItemMapValueSegmentPriceListSearchPrice = None,
    ):
        self.segment_position = segment_position
        self.search_price = search_price

    def validate(self):
        if self.segment_position:
            self.segment_position.validate()
        if self.search_price:
            self.search_price.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('segment_position') is not None:
            temp_model = ModuleGroupItemShoppingItemMapValueSegmentPriceListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('search_price') is not None:
            temp_model = ModuleGroupItemShoppingItemMapValueSegmentPriceListSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        return self


class ModuleGroupItemShoppingItemMapValue(TeaModel):
    def __init__(
        self,
        cabin_quantity_list: List[ModuleGroupItemShoppingItemMapValueCabinQuantityList] = None,
        search_price: ModuleGroupItemShoppingItemMapValueSearchPrice = None,
        segment_price_list: List[ModuleGroupItemShoppingItemMapValueSegmentPriceList] = None,
    ):
        self.cabin_quantity_list = cabin_quantity_list
        self.search_price = search_price
        self.segment_price_list = segment_price_list

    def validate(self):
        if self.cabin_quantity_list:
            for k in self.cabin_quantity_list:
                if k:
                    k.validate()
        if self.search_price:
            self.search_price.validate()
        if self.segment_price_list:
            for k in self.segment_price_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['cabin_quantity_list'] = []
        if self.cabin_quantity_list is not None:
            for k in self.cabin_quantity_list:
                result['cabin_quantity_list'].append(k.to_map() if k else None)
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        result['segment_price_list'] = []
        if self.segment_price_list is not None:
            for k in self.segment_price_list:
                result['segment_price_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.cabin_quantity_list = []
        if m.get('cabin_quantity_list') is not None:
            for k in m.get('cabin_quantity_list'):
                temp_model = ModuleGroupItemShoppingItemMapValueCabinQuantityList()
                self.cabin_quantity_list.append(temp_model.from_map(k))
        if m.get('search_price') is not None:
            temp_model = ModuleGroupItemShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        self.segment_price_list = []
        if m.get('segment_price_list') is not None:
            for k in m.get('segment_price_list'):
                temp_model = ModuleGroupItemShoppingItemMapValueSegmentPriceList()
                self.segment_price_list.append(temp_model.from_map(k))
        return self


class ModuleGroupItemSubItemPositionMapValue(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue(TeaModel):
    def __init__(
        self,
        carry_freepc: int = None,
        carry_bag_weight: int = None,
        carry_bag_size: str = None,
        is_all_carry_bag_weight: bool = None,
        airline: str = None,
        start_airport: str = None,
        end_airport: str = None,
        start_city_code: str = None,
        end_city_code: str = None,
        free_pcs: int = None,
        baggage_weight: int = None,
        baggage_unit: str = None,
        baggage_size: str = None,
        all_weight: bool = None,
    ):
        self.carry_freepc = carry_freepc
        self.carry_bag_weight = carry_bag_weight
        self.carry_bag_size = carry_bag_size
        self.is_all_carry_bag_weight = is_all_carry_bag_weight
        self.airline = airline
        self.start_airport = start_airport
        self.end_airport = end_airport
        self.start_city_code = start_city_code
        self.end_city_code = end_city_code
        self.free_pcs = free_pcs
        self.baggage_weight = baggage_weight
        self.baggage_unit = baggage_unit
        self.baggage_size = baggage_size
        self.all_weight = all_weight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.carry_freepc is not None:
            result['carry_freepc'] = self.carry_freepc
        if self.carry_bag_weight is not None:
            result['carry_bag_weight'] = self.carry_bag_weight
        if self.carry_bag_size is not None:
            result['carry_bag_size'] = self.carry_bag_size
        if self.is_all_carry_bag_weight is not None:
            result['is_all_carry_bag_weight'] = self.is_all_carry_bag_weight
        if self.airline is not None:
            result['airline'] = self.airline
        if self.start_airport is not None:
            result['start_airport'] = self.start_airport
        if self.end_airport is not None:
            result['end_airport'] = self.end_airport
        if self.start_city_code is not None:
            result['start_city_code'] = self.start_city_code
        if self.end_city_code is not None:
            result['end_city_code'] = self.end_city_code
        if self.free_pcs is not None:
            result['free_pcs'] = self.free_pcs
        if self.baggage_weight is not None:
            result['baggage_weight'] = self.baggage_weight
        if self.baggage_unit is not None:
            result['baggage_unit'] = self.baggage_unit
        if self.baggage_size is not None:
            result['baggage_size'] = self.baggage_size
        if self.all_weight is not None:
            result['all_weight'] = self.all_weight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('carry_freepc') is not None:
            self.carry_freepc = m.get('carry_freepc')
        if m.get('carry_bag_weight') is not None:
            self.carry_bag_weight = m.get('carry_bag_weight')
        if m.get('carry_bag_size') is not None:
            self.carry_bag_size = m.get('carry_bag_size')
        if m.get('is_all_carry_bag_weight') is not None:
            self.is_all_carry_bag_weight = m.get('is_all_carry_bag_weight')
        if m.get('airline') is not None:
            self.airline = m.get('airline')
        if m.get('start_airport') is not None:
            self.start_airport = m.get('start_airport')
        if m.get('end_airport') is not None:
            self.end_airport = m.get('end_airport')
        if m.get('start_city_code') is not None:
            self.start_city_code = m.get('start_city_code')
        if m.get('end_city_code') is not None:
            self.end_city_code = m.get('end_city_code')
        if m.get('free_pcs') is not None:
            self.free_pcs = m.get('free_pcs')
        if m.get('baggage_weight') is not None:
            self.baggage_weight = m.get('baggage_weight')
        if m.get('baggage_unit') is not None:
            self.baggage_unit = m.get('baggage_unit')
        if m.get('baggage_size') is not None:
            self.baggage_size = m.get('baggage_size')
        if m.get('all_weight') is not None:
            self.all_weight = m.get('all_weight')
        return self


class ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue(TeaModel):
    def __init__(
        self,
        struct: bool = None,
        cancel_fee_ind: bool = None,
        change_fee_ind: bool = None,
        upgrade_fee_ind: bool = None,
        reissue_ind: bool = None,
        penalty_type_code: int = None,
        penalty_apply_range_code: int = None,
        penalty_charge_type_code: int = None,
        fee: float = None,
        currency: str = None,
        penalty_percent: float = None,
        start_time: int = None,
        end_time: int = None,
        time_unit_code: int = None,
    ):
        self.struct = struct
        self.cancel_fee_ind = cancel_fee_ind
        self.change_fee_ind = change_fee_ind
        self.upgrade_fee_ind = upgrade_fee_ind
        self.reissue_ind = reissue_ind
        self.penalty_type_code = penalty_type_code
        self.penalty_apply_range_code = penalty_apply_range_code
        self.penalty_charge_type_code = penalty_charge_type_code
        self.fee = fee
        self.currency = currency
        self.penalty_percent = penalty_percent
        self.start_time = start_time
        self.end_time = end_time
        self.time_unit_code = time_unit_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.struct is not None:
            result['struct'] = self.struct
        if self.cancel_fee_ind is not None:
            result['cancel_fee_ind'] = self.cancel_fee_ind
        if self.change_fee_ind is not None:
            result['change_fee_ind'] = self.change_fee_ind
        if self.upgrade_fee_ind is not None:
            result['upgrade_fee_ind'] = self.upgrade_fee_ind
        if self.reissue_ind is not None:
            result['reissue_ind'] = self.reissue_ind
        if self.penalty_type_code is not None:
            result['penalty_type_code'] = self.penalty_type_code
        if self.penalty_apply_range_code is not None:
            result['penalty_apply_range_code'] = self.penalty_apply_range_code
        if self.penalty_charge_type_code is not None:
            result['penalty_charge_type_code'] = self.penalty_charge_type_code
        if self.fee is not None:
            result['fee'] = self.fee
        if self.currency is not None:
            result['currency'] = self.currency
        if self.penalty_percent is not None:
            result['penalty_percent'] = self.penalty_percent
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.time_unit_code is not None:
            result['time_unit_code'] = self.time_unit_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('struct') is not None:
            self.struct = m.get('struct')
        if m.get('cancel_fee_ind') is not None:
            self.cancel_fee_ind = m.get('cancel_fee_ind')
        if m.get('change_fee_ind') is not None:
            self.change_fee_ind = m.get('change_fee_ind')
        if m.get('upgrade_fee_ind') is not None:
            self.upgrade_fee_ind = m.get('upgrade_fee_ind')
        if m.get('reissue_ind') is not None:
            self.reissue_ind = m.get('reissue_ind')
        if m.get('penalty_type_code') is not None:
            self.penalty_type_code = m.get('penalty_type_code')
        if m.get('penalty_apply_range_code') is not None:
            self.penalty_apply_range_code = m.get('penalty_apply_range_code')
        if m.get('penalty_charge_type_code') is not None:
            self.penalty_charge_type_code = m.get('penalty_charge_type_code')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        if m.get('currency') is not None:
            self.currency = m.get('currency')
        if m.get('penalty_percent') is not None:
            self.penalty_percent = m.get('penalty_percent')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('time_unit_code') is not None:
            self.time_unit_code = m.get('time_unit_code')
        return self


class ModuleGroupItemSubItemsShoppingItemMapValueSearchPrice(TeaModel):
    def __init__(
        self,
        ticket_price: int = None,
        sell_price: int = None,
        tax: int = None,
    ):
        self.ticket_price = ticket_price
        self.sell_price = sell_price
        self.tax = tax

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.tax is not None:
            result['tax'] = self.tax
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        return self


class ModuleGroupItemSubItemsShoppingItemMapValue(TeaModel):
    def __init__(
        self,
        search_price: ModuleGroupItemSubItemsShoppingItemMapValueSearchPrice = None,
    ):
        self.search_price = search_price

    def validate(self):
        if self.search_price:
            self.search_price.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search_price is not None:
            result['search_price'] = self.search_price.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search_price') is not None:
            temp_model = ModuleGroupItemSubItemsShoppingItemMapValueSearchPrice()
            self.search_price = temp_model.from_map(m['search_price'])
        return self


class ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue(TeaModel):
    def __init__(
        self,
        carry_freepc: int = None,
        carry_bag_weight: int = None,
        carry_bag_size: str = None,
        is_all_carry_bag_weight: bool = None,
        airline: str = None,
        start_airport: str = None,
        end_airport: str = None,
        start_city_code: str = None,
        end_city_code: str = None,
        free_pcs: int = None,
        baggage_weight: int = None,
        baggage_unit: str = None,
        baggage_size: str = None,
        all_weight: bool = None,
    ):
        self.carry_freepc = carry_freepc
        self.carry_bag_weight = carry_bag_weight
        self.carry_bag_size = carry_bag_size
        self.is_all_carry_bag_weight = is_all_carry_bag_weight
        self.airline = airline
        self.start_airport = start_airport
        self.end_airport = end_airport
        self.start_city_code = start_city_code
        self.end_city_code = end_city_code
        self.free_pcs = free_pcs
        self.baggage_weight = baggage_weight
        self.baggage_unit = baggage_unit
        self.baggage_size = baggage_size
        self.all_weight = all_weight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.carry_freepc is not None:
            result['carry_freepc'] = self.carry_freepc
        if self.carry_bag_weight is not None:
            result['carry_bag_weight'] = self.carry_bag_weight
        if self.carry_bag_size is not None:
            result['carry_bag_size'] = self.carry_bag_size
        if self.is_all_carry_bag_weight is not None:
            result['is_all_carry_bag_weight'] = self.is_all_carry_bag_weight
        if self.airline is not None:
            result['airline'] = self.airline
        if self.start_airport is not None:
            result['start_airport'] = self.start_airport
        if self.end_airport is not None:
            result['end_airport'] = self.end_airport
        if self.start_city_code is not None:
            result['start_city_code'] = self.start_city_code
        if self.end_city_code is not None:
            result['end_city_code'] = self.end_city_code
        if self.free_pcs is not None:
            result['free_pcs'] = self.free_pcs
        if self.baggage_weight is not None:
            result['baggage_weight'] = self.baggage_weight
        if self.baggage_unit is not None:
            result['baggage_unit'] = self.baggage_unit
        if self.baggage_size is not None:
            result['baggage_size'] = self.baggage_size
        if self.all_weight is not None:
            result['all_weight'] = self.all_weight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('carry_freepc') is not None:
            self.carry_freepc = m.get('carry_freepc')
        if m.get('carry_bag_weight') is not None:
            self.carry_bag_weight = m.get('carry_bag_weight')
        if m.get('carry_bag_size') is not None:
            self.carry_bag_size = m.get('carry_bag_size')
        if m.get('is_all_carry_bag_weight') is not None:
            self.is_all_carry_bag_weight = m.get('is_all_carry_bag_weight')
        if m.get('airline') is not None:
            self.airline = m.get('airline')
        if m.get('start_airport') is not None:
            self.start_airport = m.get('start_airport')
        if m.get('end_airport') is not None:
            self.end_airport = m.get('end_airport')
        if m.get('start_city_code') is not None:
            self.start_city_code = m.get('start_city_code')
        if m.get('end_city_code') is not None:
            self.end_city_code = m.get('end_city_code')
        if m.get('free_pcs') is not None:
            self.free_pcs = m.get('free_pcs')
        if m.get('baggage_weight') is not None:
            self.baggage_weight = m.get('baggage_weight')
        if m.get('baggage_unit') is not None:
            self.baggage_unit = m.get('baggage_unit')
        if m.get('baggage_size') is not None:
            self.baggage_size = m.get('baggage_size')
        if m.get('all_weight') is not None:
            self.all_weight = m.get('all_weight')
        return self


class ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue(TeaModel):
    def __init__(
        self,
        struct: bool = None,
        cancel_fee_ind: bool = None,
        change_fee_ind: bool = None,
        upgrade_fee_ind: bool = None,
        reissue_ind: bool = None,
        penalty_type_code: int = None,
        penalty_apply_range_code: int = None,
        penalty_charge_type_code: int = None,
        fee: float = None,
        currency: str = None,
        penalty_percent: float = None,
        start_time: int = None,
        end_time: int = None,
        time_unit_code: int = None,
    ):
        self.struct = struct
        self.cancel_fee_ind = cancel_fee_ind
        self.change_fee_ind = change_fee_ind
        self.upgrade_fee_ind = upgrade_fee_ind
        self.reissue_ind = reissue_ind
        self.penalty_type_code = penalty_type_code
        self.penalty_apply_range_code = penalty_apply_range_code
        self.penalty_charge_type_code = penalty_charge_type_code
        self.fee = fee
        self.currency = currency
        self.penalty_percent = penalty_percent
        self.start_time = start_time
        self.end_time = end_time
        self.time_unit_code = time_unit_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.struct is not None:
            result['struct'] = self.struct
        if self.cancel_fee_ind is not None:
            result['cancel_fee_ind'] = self.cancel_fee_ind
        if self.change_fee_ind is not None:
            result['change_fee_ind'] = self.change_fee_ind
        if self.upgrade_fee_ind is not None:
            result['upgrade_fee_ind'] = self.upgrade_fee_ind
        if self.reissue_ind is not None:
            result['reissue_ind'] = self.reissue_ind
        if self.penalty_type_code is not None:
            result['penalty_type_code'] = self.penalty_type_code
        if self.penalty_apply_range_code is not None:
            result['penalty_apply_range_code'] = self.penalty_apply_range_code
        if self.penalty_charge_type_code is not None:
            result['penalty_charge_type_code'] = self.penalty_charge_type_code
        if self.fee is not None:
            result['fee'] = self.fee
        if self.currency is not None:
            result['currency'] = self.currency
        if self.penalty_percent is not None:
            result['penalty_percent'] = self.penalty_percent
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.time_unit_code is not None:
            result['time_unit_code'] = self.time_unit_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('struct') is not None:
            self.struct = m.get('struct')
        if m.get('cancel_fee_ind') is not None:
            self.cancel_fee_ind = m.get('cancel_fee_ind')
        if m.get('change_fee_ind') is not None:
            self.change_fee_ind = m.get('change_fee_ind')
        if m.get('upgrade_fee_ind') is not None:
            self.upgrade_fee_ind = m.get('upgrade_fee_ind')
        if m.get('reissue_ind') is not None:
            self.reissue_ind = m.get('reissue_ind')
        if m.get('penalty_type_code') is not None:
            self.penalty_type_code = m.get('penalty_type_code')
        if m.get('penalty_apply_range_code') is not None:
            self.penalty_apply_range_code = m.get('penalty_apply_range_code')
        if m.get('penalty_charge_type_code') is not None:
            self.penalty_charge_type_code = m.get('penalty_charge_type_code')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        if m.get('currency') is not None:
            self.currency = m.get('currency')
        if m.get('penalty_percent') is not None:
            self.penalty_percent = m.get('penalty_percent')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('time_unit_code') is not None:
            self.time_unit_code = m.get('time_unit_code')
        return self


class AccessTokenRequest(TeaModel):
    def __init__(
        self,
        app_secret: str = None,
    ):
        # This parameter is required.
        self.app_secret = app_secret

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_secret is not None:
            result['app_secret'] = self.app_secret
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_secret') is not None:
            self.app_secret = m.get('app_secret')
        return self


class AccessTokenResponseBodyData(TeaModel):
    def __init__(
        self,
        expire: int = None,
        token: str = None,
    ):
        self.expire = expire
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class AccessTokenResponseBodyModule(TeaModel):
    def __init__(
        self,
        expire: int = None,
        start: int = None,
        token: str = None,
    ):
        self.expire = expire
        self.start = start
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.start is not None:
            result['start'] = self.start
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('start') is not None:
            self.start = m.get('start')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class AccessTokenResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: AccessTokenResponseBodyData = None,
        message: str = None,
        module: AccessTokenResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.module = module
        self.request_id = request_id
        # 成功标识
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.data:
            self.data.validate()
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            temp_model = AccessTokenResponseBodyData()
            self.data = temp_model.from_map(m['data'])
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = AccessTokenResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AccessTokenResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AccessTokenResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AccessTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddDepartmentHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class AddDepartmentRequest(TeaModel):
    def __init__(
        self,
        dept_name: str = None,
        manager_employee_id_list: List[str] = None,
        out_dept_id: str = None,
        out_dept_pid: str = None,
    ):
        # This parameter is required.
        self.dept_name = dept_name
        self.manager_employee_id_list = manager_employee_id_list
        # This parameter is required.
        self.out_dept_id = out_dept_id
        self.out_dept_pid = out_dept_pid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.manager_employee_id_list is not None:
            result['manager_employee_id_list'] = self.manager_employee_id_list
        if self.out_dept_id is not None:
            result['out_dept_id'] = self.out_dept_id
        if self.out_dept_pid is not None:
            result['out_dept_pid'] = self.out_dept_pid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('manager_employee_id_list') is not None:
            self.manager_employee_id_list = m.get('manager_employee_id_list')
        if m.get('out_dept_id') is not None:
            self.out_dept_id = m.get('out_dept_id')
        if m.get('out_dept_pid') is not None:
            self.out_dept_pid = m.get('out_dept_pid')
        return self


class AddDepartmentShrinkRequest(TeaModel):
    def __init__(
        self,
        dept_name: str = None,
        manager_employee_id_list_shrink: str = None,
        out_dept_id: str = None,
        out_dept_pid: str = None,
    ):
        # This parameter is required.
        self.dept_name = dept_name
        self.manager_employee_id_list_shrink = manager_employee_id_list_shrink
        # This parameter is required.
        self.out_dept_id = out_dept_id
        self.out_dept_pid = out_dept_pid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.manager_employee_id_list_shrink is not None:
            result['manager_employee_id_list'] = self.manager_employee_id_list_shrink
        if self.out_dept_id is not None:
            result['out_dept_id'] = self.out_dept_id
        if self.out_dept_pid is not None:
            result['out_dept_pid'] = self.out_dept_pid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('manager_employee_id_list') is not None:
            self.manager_employee_id_list_shrink = m.get('manager_employee_id_list')
        if m.get('out_dept_id') is not None:
            self.out_dept_id = m.get('out_dept_id')
        if m.get('out_dept_pid') is not None:
            self.out_dept_pid = m.get('out_dept_pid')
        return self


class AddDepartmentResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AddDepartmentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddDepartmentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddDepartmentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddEmployeeHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class AddEmployeeRequestCertList(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cert_expired_time: str = None,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        gender: str = None,
        nationality: str = None,
        phone: str = None,
        real_name: str = None,
        real_name_en: str = None,
    ):
        self.birthday = birthday
        self.cert_expired_time = cert_expired_time
        self.cert_nation = cert_nation
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.gender = gender
        self.nationality = nationality
        self.phone = phone
        self.real_name = real_name
        self.real_name_en = real_name_en

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_expired_time is not None:
            result['cert_expired_time'] = self.cert_expired_time
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.gender is not None:
            result['gender'] = self.gender
        if self.nationality is not None:
            result['nationality'] = self.nationality
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_expired_time') is not None:
            self.cert_expired_time = m.get('cert_expired_time')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        return self


class AddEmployeeRequest(TeaModel):
    def __init__(
        self,
        avatar: str = None,
        base_city_code_list: List[str] = None,
        birthday: str = None,
        cert_list: List[AddEmployeeRequestCertList] = None,
        custom_role_code_list: List[str] = None,
        email: str = None,
        gender: str = None,
        is_admin: bool = None,
        is_boss: bool = None,
        is_dept_leader: bool = None,
        job_no: str = None,
        manager_user_id: str = None,
        out_dept_id_list: List[str] = None,
        phone: str = None,
        position_level: str = None,
        real_name: str = None,
        real_name_en: str = None,
        union_id: str = None,
        user_id: str = None,
        user_nick: str = None,
    ):
        self.avatar = avatar
        self.base_city_code_list = base_city_code_list
        self.birthday = birthday
        self.cert_list = cert_list
        self.custom_role_code_list = custom_role_code_list
        self.email = email
        self.gender = gender
        self.is_admin = is_admin
        self.is_boss = is_boss
        self.is_dept_leader = is_dept_leader
        self.job_no = job_no
        self.manager_user_id = manager_user_id
        self.out_dept_id_list = out_dept_id_list
        self.phone = phone
        self.position_level = position_level
        self.real_name = real_name
        self.real_name_en = real_name_en
        self.union_id = union_id
        # This parameter is required.
        self.user_id = user_id
        # This parameter is required.
        self.user_nick = user_nick

    def validate(self):
        if self.cert_list:
            for k in self.cert_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avatar is not None:
            result['avatar'] = self.avatar
        if self.base_city_code_list is not None:
            result['base_city_code_list'] = self.base_city_code_list
        if self.birthday is not None:
            result['birthday'] = self.birthday
        result['cert_list'] = []
        if self.cert_list is not None:
            for k in self.cert_list:
                result['cert_list'].append(k.to_map() if k else None)
        if self.custom_role_code_list is not None:
            result['custom_role_code_list'] = self.custom_role_code_list
        if self.email is not None:
            result['email'] = self.email
        if self.gender is not None:
            result['gender'] = self.gender
        if self.is_admin is not None:
            result['is_admin'] = self.is_admin
        if self.is_boss is not None:
            result['is_boss'] = self.is_boss
        if self.is_dept_leader is not None:
            result['is_dept_leader'] = self.is_dept_leader
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.out_dept_id_list is not None:
            result['out_dept_id_list'] = self.out_dept_id_list
        if self.phone is not None:
            result['phone'] = self.phone
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.union_id is not None:
            result['union_id'] = self.union_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_nick is not None:
            result['user_nick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('avatar') is not None:
            self.avatar = m.get('avatar')
        if m.get('base_city_code_list') is not None:
            self.base_city_code_list = m.get('base_city_code_list')
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        self.cert_list = []
        if m.get('cert_list') is not None:
            for k in m.get('cert_list'):
                temp_model = AddEmployeeRequestCertList()
                self.cert_list.append(temp_model.from_map(k))
        if m.get('custom_role_code_list') is not None:
            self.custom_role_code_list = m.get('custom_role_code_list')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('is_admin') is not None:
            self.is_admin = m.get('is_admin')
        if m.get('is_boss') is not None:
            self.is_boss = m.get('is_boss')
        if m.get('is_dept_leader') is not None:
            self.is_dept_leader = m.get('is_dept_leader')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('out_dept_id_list') is not None:
            self.out_dept_id_list = m.get('out_dept_id_list')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('union_id') is not None:
            self.union_id = m.get('union_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_nick') is not None:
            self.user_nick = m.get('user_nick')
        return self


class AddEmployeeShrinkRequest(TeaModel):
    def __init__(
        self,
        avatar: str = None,
        base_city_code_list_shrink: str = None,
        birthday: str = None,
        cert_list_shrink: str = None,
        custom_role_code_list_shrink: str = None,
        email: str = None,
        gender: str = None,
        is_admin: bool = None,
        is_boss: bool = None,
        is_dept_leader: bool = None,
        job_no: str = None,
        manager_user_id: str = None,
        out_dept_id_list_shrink: str = None,
        phone: str = None,
        position_level: str = None,
        real_name: str = None,
        real_name_en: str = None,
        union_id: str = None,
        user_id: str = None,
        user_nick: str = None,
    ):
        self.avatar = avatar
        self.base_city_code_list_shrink = base_city_code_list_shrink
        self.birthday = birthday
        self.cert_list_shrink = cert_list_shrink
        self.custom_role_code_list_shrink = custom_role_code_list_shrink
        self.email = email
        self.gender = gender
        self.is_admin = is_admin
        self.is_boss = is_boss
        self.is_dept_leader = is_dept_leader
        self.job_no = job_no
        self.manager_user_id = manager_user_id
        self.out_dept_id_list_shrink = out_dept_id_list_shrink
        self.phone = phone
        self.position_level = position_level
        self.real_name = real_name
        self.real_name_en = real_name_en
        self.union_id = union_id
        # This parameter is required.
        self.user_id = user_id
        # This parameter is required.
        self.user_nick = user_nick

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avatar is not None:
            result['avatar'] = self.avatar
        if self.base_city_code_list_shrink is not None:
            result['base_city_code_list'] = self.base_city_code_list_shrink
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_list_shrink is not None:
            result['cert_list'] = self.cert_list_shrink
        if self.custom_role_code_list_shrink is not None:
            result['custom_role_code_list'] = self.custom_role_code_list_shrink
        if self.email is not None:
            result['email'] = self.email
        if self.gender is not None:
            result['gender'] = self.gender
        if self.is_admin is not None:
            result['is_admin'] = self.is_admin
        if self.is_boss is not None:
            result['is_boss'] = self.is_boss
        if self.is_dept_leader is not None:
            result['is_dept_leader'] = self.is_dept_leader
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.out_dept_id_list_shrink is not None:
            result['out_dept_id_list'] = self.out_dept_id_list_shrink
        if self.phone is not None:
            result['phone'] = self.phone
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.union_id is not None:
            result['union_id'] = self.union_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_nick is not None:
            result['user_nick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('avatar') is not None:
            self.avatar = m.get('avatar')
        if m.get('base_city_code_list') is not None:
            self.base_city_code_list_shrink = m.get('base_city_code_list')
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_list') is not None:
            self.cert_list_shrink = m.get('cert_list')
        if m.get('custom_role_code_list') is not None:
            self.custom_role_code_list_shrink = m.get('custom_role_code_list')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('is_admin') is not None:
            self.is_admin = m.get('is_admin')
        if m.get('is_boss') is not None:
            self.is_boss = m.get('is_boss')
        if m.get('is_dept_leader') is not None:
            self.is_dept_leader = m.get('is_dept_leader')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('out_dept_id_list') is not None:
            self.out_dept_id_list_shrink = m.get('out_dept_id_list')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('union_id') is not None:
            self.union_id = m.get('union_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_nick') is not None:
            self.user_nick = m.get('user_nick')
        return self


class AddEmployeeResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AddEmployeeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddEmployeeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddEmployeeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddEmployeesToCustomRoleHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class AddEmployeesToCustomRoleRequest(TeaModel):
    def __init__(
        self,
        role_id: str = None,
        user_id_list: List[str] = None,
    ):
        # This parameter is required.
        self.role_id = role_id
        # This parameter is required.
        self.user_id_list = user_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.role_id is not None:
            result['role_id'] = self.role_id
        if self.user_id_list is not None:
            result['user_id_list'] = self.user_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('role_id') is not None:
            self.role_id = m.get('role_id')
        if m.get('user_id_list') is not None:
            self.user_id_list = m.get('user_id_list')
        return self


class AddEmployeesToCustomRoleShrinkRequest(TeaModel):
    def __init__(
        self,
        role_id: str = None,
        user_id_list_shrink: str = None,
    ):
        # This parameter is required.
        self.role_id = role_id
        # This parameter is required.
        self.user_id_list_shrink = user_id_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.role_id is not None:
            result['role_id'] = self.role_id
        if self.user_id_list_shrink is not None:
            result['user_id_list'] = self.user_id_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('role_id') is not None:
            self.role_id = m.get('role_id')
        if m.get('user_id_list') is not None:
            self.user_id_list_shrink = m.get('user_id_list')
        return self


class AddEmployeesToCustomRoleResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AddEmployeesToCustomRoleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddEmployeesToCustomRoleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddEmployeesToCustomRoleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddInvoiceEntityHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class AddInvoiceEntityRequestEntities(TeaModel):
    def __init__(
        self,
        entity_id: str = None,
        entity_name: str = None,
        entity_type: str = None,
    ):
        # This parameter is required.
        self.entity_id = entity_id
        # This parameter is required.
        self.entity_name = entity_name
        # This parameter is required.
        self.entity_type = entity_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_name is not None:
            result['entity_name'] = self.entity_name
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_name') is not None:
            self.entity_name = m.get('entity_name')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class AddInvoiceEntityRequest(TeaModel):
    def __init__(
        self,
        entities: List[AddInvoiceEntityRequestEntities] = None,
        third_part_id: str = None,
    ):
        # This parameter is required.
        self.entities = entities
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        if self.entities:
            for k in self.entities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['entities'] = []
        if self.entities is not None:
            for k in self.entities:
                result['entities'].append(k.to_map() if k else None)
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.entities = []
        if m.get('entities') is not None:
            for k in m.get('entities'):
                temp_model = AddInvoiceEntityRequestEntities()
                self.entities.append(temp_model.from_map(k))
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class AddInvoiceEntityShrinkRequest(TeaModel):
    def __init__(
        self,
        entities_shrink: str = None,
        third_part_id: str = None,
    ):
        # This parameter is required.
        self.entities_shrink = entities_shrink
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entities_shrink is not None:
            result['entities'] = self.entities_shrink
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entities') is not None:
            self.entities_shrink = m.get('entities')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class AddInvoiceEntityResponseBodyModule(TeaModel):
    def __init__(
        self,
        add_num: int = None,
        selected_user_num: int = None,
    ):
        self.add_num = add_num
        self.selected_user_num = selected_user_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_num is not None:
            result['add_num'] = self.add_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('add_num') is not None:
            self.add_num = m.get('add_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class AddInvoiceEntityResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: AddInvoiceEntityResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = AddInvoiceEntityResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AddInvoiceEntityResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddInvoiceEntityResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddInvoiceEntityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddressGetHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class AddressGetRequest(TeaModel):
    def __init__(
        self,
        action_type: int = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        car_scenes_code: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_date: str = None,
        itinerary_id: str = None,
        middle_page: int = None,
        order_id: str = None,
        phone: str = None,
        sub_corp_id: str = None,
        taobao_callback_url: str = None,
        thirdpart_apply_id: str = None,
        traveler_id: str = None,
        type: int = None,
        use_booking_proxy: int = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.action_type = action_type
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.car_scenes_code = car_scenes_code
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_date = dep_date
        self.itinerary_id = itinerary_id
        self.middle_page = middle_page
        self.order_id = order_id
        self.phone = phone
        self.sub_corp_id = sub_corp_id
        self.taobao_callback_url = taobao_callback_url
        self.thirdpart_apply_id = thirdpart_apply_id
        self.traveler_id = traveler_id
        self.type = type
        self.use_booking_proxy = use_booking_proxy
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action_type is not None:
            result['action_type'] = self.action_type
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.car_scenes_code is not None:
            result['car_scenes_code'] = self.car_scenes_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.middle_page is not None:
            result['middle_page'] = self.middle_page
        if self.order_id is not None:
            result['order_Id'] = self.order_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.taobao_callback_url is not None:
            result['taobao_callback_url'] = self.taobao_callback_url
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.type is not None:
            result['type'] = self.type
        if self.use_booking_proxy is not None:
            result['use_booking_proxy'] = self.use_booking_proxy
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('action_type') is not None:
            self.action_type = m.get('action_type')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('car_scenes_code') is not None:
            self.car_scenes_code = m.get('car_scenes_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('middle_page') is not None:
            self.middle_page = m.get('middle_page')
        if m.get('order_Id') is not None:
            self.order_id = m.get('order_Id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('taobao_callback_url') is not None:
            self.taobao_callback_url = m.get('taobao_callback_url')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('use_booking_proxy') is not None:
            self.use_booking_proxy = m.get('use_booking_proxy')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class AddressGetResponseBodyModule(TeaModel):
    def __init__(
        self,
        url: str = None,
    ):
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class AddressGetResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: AddressGetResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = AddressGetResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AddressGetResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddressGetResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddressGetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AirportSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class AirportSearchRequest(TeaModel):
    def __init__(
        self,
        keyword: str = None,
        type: int = None,
    ):
        # This parameter is required.
        self.keyword = keyword
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.keyword is not None:
            result['keyword'] = self.keyword
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('keyword') is not None:
            self.keyword = m.get('keyword')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class AirportSearchResponseBodyModuleCities(TeaModel):
    def __init__(
        self,
        code: str = None,
        distance: int = None,
        name: str = None,
        travel_name: str = None,
    ):
        self.code = code
        self.distance = distance
        self.name = name
        self.travel_name = travel_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.distance is not None:
            result['distance'] = self.distance
        if self.name is not None:
            result['name'] = self.name
        if self.travel_name is not None:
            result['travel_name'] = self.travel_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('distance') is not None:
            self.distance = m.get('distance')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('travel_name') is not None:
            self.travel_name = m.get('travel_name')
        return self


class AirportSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        cities: List[AirportSearchResponseBodyModuleCities] = None,
        nearby: bool = None,
    ):
        self.cities = cities
        self.nearby = nearby

    def validate(self):
        if self.cities:
            for k in self.cities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['cities'] = []
        if self.cities is not None:
            for k in self.cities:
                result['cities'].append(k.to_map() if k else None)
        if self.nearby is not None:
            result['nearby'] = self.nearby
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.cities = []
        if m.get('cities') is not None:
            for k in m.get('cities'):
                temp_model = AirportSearchResponseBodyModuleCities()
                self.cities.append(temp_model.from_map(k))
        if m.get('nearby') is not None:
            self.nearby = m.get('nearby')
        return self


class AirportSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: AirportSearchResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = AirportSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AirportSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AirportSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AirportSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AllBaseCityInfoQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_access_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_access_token = x_acs_btrip_access_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_access_token is not None:
            result['x-acs-btrip-access-token'] = self.x_acs_btrip_access_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-access-token') is not None:
            self.x_acs_btrip_access_token = m.get('x-acs-btrip-access-token')
        return self


class AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList(TeaModel):
    def __init__(
        self,
        adcode: str = None,
        city_code: str = None,
        city_level: str = None,
        city_name: str = None,
        cn_name_tree: str = None,
        id: int = None,
        other_name_list: List[str] = None,
    ):
        self.adcode = adcode
        self.city_code = city_code
        self.city_level = city_level
        self.city_name = city_name
        self.cn_name_tree = cn_name_tree
        self.id = id
        self.other_name_list = other_name_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adcode is not None:
            result['adcode'] = self.adcode
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_level is not None:
            result['city_level'] = self.city_level
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.cn_name_tree is not None:
            result['cn_name_tree'] = self.cn_name_tree
        if self.id is not None:
            result['id'] = self.id
        if self.other_name_list is not None:
            result['other_name_list'] = self.other_name_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adcode') is not None:
            self.adcode = m.get('adcode')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_level') is not None:
            self.city_level = m.get('city_level')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('cn_name_tree') is not None:
            self.cn_name_tree = m.get('cn_name_tree')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('other_name_list') is not None:
            self.other_name_list = m.get('other_name_list')
        return self


class AllBaseCityInfoQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        all_city_base_info_list: List[AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList] = None,
    ):
        self.all_city_base_info_list = all_city_base_info_list

    def validate(self):
        if self.all_city_base_info_list:
            for k in self.all_city_base_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['all_city_base_info_list'] = []
        if self.all_city_base_info_list is not None:
            for k in self.all_city_base_info_list:
                result['all_city_base_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.all_city_base_info_list = []
        if m.get('all_city_base_info_list') is not None:
            for k in m.get('all_city_base_info_list'):
                temp_model = AllBaseCityInfoQueryResponseBodyModuleAllCityBaseInfoList()
                self.all_city_base_info_list.append(temp_model.from_map(k))
        return self


class AllBaseCityInfoQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: AllBaseCityInfoQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = AllBaseCityInfoQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class AllBaseCityInfoQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AllBaseCityInfoQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AllBaseCityInfoQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyAddHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyAddRequestCarRule(TeaModel):
    def __init__(
        self,
        scenario_template_id: str = None,
        scenario_template_name: str = None,
    ):
        self.scenario_template_id = scenario_template_id
        self.scenario_template_name = scenario_template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.scenario_template_id is not None:
            result['scenario_template_id'] = self.scenario_template_id
        if self.scenario_template_name is not None:
            result['scenario_template_name'] = self.scenario_template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('scenario_template_id') is not None:
            self.scenario_template_id = m.get('scenario_template_id')
        if m.get('scenario_template_name') is not None:
            self.scenario_template_name = m.get('scenario_template_name')
        return self


class ApplyAddRequestDefaultStandardHotelCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyAddRequestDefaultStandardHotelIntlCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyAddRequestDefaultStandard(TeaModel):
    def __init__(
        self,
        business_discount: int = None,
        economy_discount: int = None,
        first_discount: int = None,
        flight_cabins: str = None,
        flight_intl_rule_code: int = None,
        flight_rule_code: int = None,
        hotel_citys: List[ApplyAddRequestDefaultStandardHotelCitys] = None,
        hotel_intl_citys: List[ApplyAddRequestDefaultStandardHotelIntlCitys] = None,
        hotel_intl_rule_code: int = None,
        hotel_rule_code: int = None,
        international_flight_cabins: str = None,
        premium_economy_discount: int = None,
        reserve_type: int = None,
        train_rule_code: int = None,
        train_seats: str = None,
    ):
        self.business_discount = business_discount
        self.economy_discount = economy_discount
        self.first_discount = first_discount
        self.flight_cabins = flight_cabins
        self.flight_intl_rule_code = flight_intl_rule_code
        self.flight_rule_code = flight_rule_code
        self.hotel_citys = hotel_citys
        self.hotel_intl_citys = hotel_intl_citys
        self.hotel_intl_rule_code = hotel_intl_rule_code
        self.hotel_rule_code = hotel_rule_code
        self.international_flight_cabins = international_flight_cabins
        self.premium_economy_discount = premium_economy_discount
        self.reserve_type = reserve_type
        self.train_rule_code = train_rule_code
        self.train_seats = train_seats

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()
        if self.hotel_intl_citys:
            for k in self.hotel_intl_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        if self.flight_intl_rule_code is not None:
            result['flight_intl_rule_code'] = self.flight_intl_rule_code
        if self.flight_rule_code is not None:
            result['flight_rule_code'] = self.flight_rule_code
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        result['hotel_intl_citys'] = []
        if self.hotel_intl_citys is not None:
            for k in self.hotel_intl_citys:
                result['hotel_intl_citys'].append(k.to_map() if k else None)
        if self.hotel_intl_rule_code is not None:
            result['hotel_intl_rule_code'] = self.hotel_intl_rule_code
        if self.hotel_rule_code is not None:
            result['hotel_rule_code'] = self.hotel_rule_code
        if self.international_flight_cabins is not None:
            result['international_flight_cabins'] = self.international_flight_cabins
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_rule_code is not None:
            result['train_rule_code'] = self.train_rule_code
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        if m.get('flight_intl_rule_code') is not None:
            self.flight_intl_rule_code = m.get('flight_intl_rule_code')
        if m.get('flight_rule_code') is not None:
            self.flight_rule_code = m.get('flight_rule_code')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyAddRequestDefaultStandardHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        self.hotel_intl_citys = []
        if m.get('hotel_intl_citys') is not None:
            for k in m.get('hotel_intl_citys'):
                temp_model = ApplyAddRequestDefaultStandardHotelIntlCitys()
                self.hotel_intl_citys.append(temp_model.from_map(k))
        if m.get('hotel_intl_rule_code') is not None:
            self.hotel_intl_rule_code = m.get('hotel_intl_rule_code')
        if m.get('hotel_rule_code') is not None:
            self.hotel_rule_code = m.get('hotel_rule_code')
        if m.get('international_flight_cabins') is not None:
            self.international_flight_cabins = m.get('international_flight_cabins')
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_rule_code') is not None:
            self.train_rule_code = m.get('train_rule_code')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        return self


class ApplyAddRequestExternalTravelerList(TeaModel):
    def __init__(
        self,
        attribute: str = None,
        cost_center_id: int = None,
        external_user_id: str = None,
        invoice_id: int = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        project_code: str = None,
        project_title: str = None,
        third_part_invoice_id: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_depart_id: str = None,
        user_name: str = None,
        user_name_en: str = None,
    ):
        self.attribute = attribute
        self.cost_center_id = cost_center_id
        self.external_user_id = external_user_id
        self.invoice_id = invoice_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.project_code = project_code
        self.project_title = project_title
        self.third_part_invoice_id = third_part_invoice_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.user_name = user_name
        self.user_name_en = user_name_en

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.external_user_id is not None:
            result['external_user_id'] = self.external_user_id
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_name_en is not None:
            result['user_name_en'] = self.user_name_en
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('external_user_id') is not None:
            self.external_user_id = m.get('external_user_id')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_name_en') is not None:
            self.user_name_en = m.get('user_name_en')
        return self


class ApplyAddRequestExternalTravelerStandardHotelCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyAddRequestExternalTravelerStandardHotelIntlCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyAddRequestExternalTravelerStandard(TeaModel):
    def __init__(
        self,
        business_discount: int = None,
        economy_discount: int = None,
        first_discount: int = None,
        flight_cabins: str = None,
        flight_intl_rule_code: int = None,
        flight_rule_code: int = None,
        hotel_citys: List[ApplyAddRequestExternalTravelerStandardHotelCitys] = None,
        hotel_intl_citys: List[ApplyAddRequestExternalTravelerStandardHotelIntlCitys] = None,
        hotel_intl_rule_code: int = None,
        hotel_rule_code: int = None,
        international_flight_cabins: str = None,
        premium_economy_discount: int = None,
        reserve_type: int = None,
        train_rule_code: int = None,
        train_seats: str = None,
    ):
        self.business_discount = business_discount
        self.economy_discount = economy_discount
        self.first_discount = first_discount
        self.flight_cabins = flight_cabins
        self.flight_intl_rule_code = flight_intl_rule_code
        self.flight_rule_code = flight_rule_code
        self.hotel_citys = hotel_citys
        self.hotel_intl_citys = hotel_intl_citys
        self.hotel_intl_rule_code = hotel_intl_rule_code
        self.hotel_rule_code = hotel_rule_code
        self.international_flight_cabins = international_flight_cabins
        self.premium_economy_discount = premium_economy_discount
        self.reserve_type = reserve_type
        self.train_rule_code = train_rule_code
        self.train_seats = train_seats

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()
        if self.hotel_intl_citys:
            for k in self.hotel_intl_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        if self.flight_intl_rule_code is not None:
            result['flight_intl_rule_code'] = self.flight_intl_rule_code
        if self.flight_rule_code is not None:
            result['flight_rule_code'] = self.flight_rule_code
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        result['hotel_intl_citys'] = []
        if self.hotel_intl_citys is not None:
            for k in self.hotel_intl_citys:
                result['hotel_intl_citys'].append(k.to_map() if k else None)
        if self.hotel_intl_rule_code is not None:
            result['hotel_intl_rule_code'] = self.hotel_intl_rule_code
        if self.hotel_rule_code is not None:
            result['hotel_rule_code'] = self.hotel_rule_code
        if self.international_flight_cabins is not None:
            result['international_flight_cabins'] = self.international_flight_cabins
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_rule_code is not None:
            result['train_rule_code'] = self.train_rule_code
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        if m.get('flight_intl_rule_code') is not None:
            self.flight_intl_rule_code = m.get('flight_intl_rule_code')
        if m.get('flight_rule_code') is not None:
            self.flight_rule_code = m.get('flight_rule_code')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyAddRequestExternalTravelerStandardHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        self.hotel_intl_citys = []
        if m.get('hotel_intl_citys') is not None:
            for k in m.get('hotel_intl_citys'):
                temp_model = ApplyAddRequestExternalTravelerStandardHotelIntlCitys()
                self.hotel_intl_citys.append(temp_model.from_map(k))
        if m.get('hotel_intl_rule_code') is not None:
            self.hotel_intl_rule_code = m.get('hotel_intl_rule_code')
        if m.get('hotel_rule_code') is not None:
            self.hotel_rule_code = m.get('hotel_rule_code')
        if m.get('international_flight_cabins') is not None:
            self.international_flight_cabins = m.get('international_flight_cabins')
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_rule_code') is not None:
            self.train_rule_code = m.get('train_rule_code')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        return self


class ApplyAddRequestHotelShare(TeaModel):
    def __init__(
        self,
        param: str = None,
        type: str = None,
    ):
        self.param = param
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.param is not None:
            result['param'] = self.param
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('param') is not None:
            self.param = m.get('param')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ApplyAddRequestItineraryListItineraryTravelStandard(TeaModel):
    def __init__(
        self,
        hotel_available_nights_per_day: int = None,
    ):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyAddRequestItineraryList(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_date: str = None,
        attribute: str = None,
        cost_center_id: int = None,
        dep_city: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        invoice_id: int = None,
        itinerary_id: str = None,
        itinerary_travel_standard: ApplyAddRequestItineraryListItineraryTravelStandard = None,
        need_hotel: bool = None,
        need_traffic: bool = None,
        project_code: str = None,
        project_title: str = None,
        province_travel_city_adcodes: List[str] = None,
        third_part_invoice_id: str = None,
        thirdpart_cost_center_id: str = None,
        traffic_type: int = None,
        trip_way: int = None,
    ):
        # This parameter is required.
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        # This parameter is required.
        self.arr_date = arr_date
        self.attribute = attribute
        self.cost_center_id = cost_center_id
        # This parameter is required.
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.dep_date = dep_date
        self.invoice_id = invoice_id
        # This parameter is required.
        self.itinerary_id = itinerary_id
        self.itinerary_travel_standard = itinerary_travel_standard
        self.need_hotel = need_hotel
        self.need_traffic = need_traffic
        self.project_code = project_code
        self.project_title = project_title
        self.province_travel_city_adcodes = province_travel_city_adcodes
        self.third_part_invoice_id = third_part_invoice_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        # This parameter is required.
        self.traffic_type = traffic_type
        # This parameter is required.
        self.trip_way = trip_way

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.need_hotel is not None:
            result['need_hotel'] = self.need_hotel
        if self.need_traffic is not None:
            result['need_traffic'] = self.need_traffic
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.province_travel_city_adcodes is not None:
            result['province_travel_city_adcodes'] = self.province_travel_city_adcodes
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        if self.trip_way is not None:
            result['trip_way'] = self.trip_way
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyAddRequestItineraryListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('need_hotel') is not None:
            self.need_hotel = m.get('need_hotel')
        if m.get('need_traffic') is not None:
            self.need_traffic = m.get('need_traffic')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('province_travel_city_adcodes') is not None:
            self.province_travel_city_adcodes = m.get('province_travel_city_adcodes')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        if m.get('trip_way') is not None:
            self.trip_way = m.get('trip_way')
        return self


class ApplyAddRequestItinerarySetListItineraryTravelStandard(TeaModel):
    def __init__(
        self,
        hotel_available_nights_per_day: int = None,
    ):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyAddRequestItinerarySetList(TeaModel):
    def __init__(
        self,
        arr_date: str = None,
        attribute: str = None,
        city_code_set: str = None,
        city_set: str = None,
        cost_center_id: int = None,
        dep_date: str = None,
        invoice_id: int = None,
        itinerary_id: str = None,
        itinerary_travel_standard: ApplyAddRequestItinerarySetListItineraryTravelStandard = None,
        project_code: str = None,
        project_title: str = None,
        province_travel_city_adcodes: List[str] = None,
        third_part_invoice_id: str = None,
        thirdpart_cost_center_id: str = None,
        traffic_type: int = None,
    ):
        # This parameter is required.
        self.arr_date = arr_date
        self.attribute = attribute
        # This parameter is required.
        self.city_code_set = city_code_set
        # This parameter is required.
        self.city_set = city_set
        self.cost_center_id = cost_center_id
        # This parameter is required.
        self.dep_date = dep_date
        self.invoice_id = invoice_id
        # This parameter is required.
        self.itinerary_id = itinerary_id
        self.itinerary_travel_standard = itinerary_travel_standard
        self.project_code = project_code
        self.project_title = project_title
        self.province_travel_city_adcodes = province_travel_city_adcodes
        self.third_part_invoice_id = third_part_invoice_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        # This parameter is required.
        self.traffic_type = traffic_type

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.city_code_set is not None:
            result['city_code_set'] = self.city_code_set
        if self.city_set is not None:
            result['city_set'] = self.city_set
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.province_travel_city_adcodes is not None:
            result['province_travel_city_adcodes'] = self.province_travel_city_adcodes
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('city_code_set') is not None:
            self.city_code_set = m.get('city_code_set')
        if m.get('city_set') is not None:
            self.city_set = m.get('city_set')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyAddRequestItinerarySetListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('province_travel_city_adcodes') is not None:
            self.province_travel_city_adcodes = m.get('province_travel_city_adcodes')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        return self


class ApplyAddRequestTravelerList(TeaModel):
    def __init__(
        self,
        attribute: str = None,
        cost_center_id: int = None,
        invoice_id: int = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        project_code: str = None,
        project_title: str = None,
        third_part_invoice_id: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_depart_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.attribute = attribute
        self.cost_center_id = cost_center_id
        self.invoice_id = invoice_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.project_code = project_code
        self.project_title = project_title
        self.third_part_invoice_id = third_part_invoice_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyAddRequestTravelerStandardCarCitySet(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
    ):
        # This parameter is required.
        self.city_code = city_code
        # This parameter is required.
        self.city_name = city_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        return self


class ApplyAddRequestTravelerStandardHotelCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyAddRequestTravelerStandardHotelIntlCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyAddRequestTravelerStandard(TeaModel):
    def __init__(
        self,
        business_discount: int = None,
        car_city_set: List[ApplyAddRequestTravelerStandardCarCitySet] = None,
        economy_discount: int = None,
        first_discount: int = None,
        flight_cabins: str = None,
        flight_intl_rule_code: int = None,
        flight_rule_code: int = None,
        hotel_citys: List[ApplyAddRequestTravelerStandardHotelCitys] = None,
        hotel_intl_citys: List[ApplyAddRequestTravelerStandardHotelIntlCitys] = None,
        hotel_intl_rule_code: int = None,
        hotel_rule_code: int = None,
        international_flight_cabins: str = None,
        premium_economy_discount: int = None,
        reserve_type: int = None,
        train_rule_code: int = None,
        train_seats: str = None,
        user_id: str = None,
    ):
        self.business_discount = business_discount
        self.car_city_set = car_city_set
        self.economy_discount = economy_discount
        self.first_discount = first_discount
        self.flight_cabins = flight_cabins
        self.flight_intl_rule_code = flight_intl_rule_code
        self.flight_rule_code = flight_rule_code
        self.hotel_citys = hotel_citys
        self.hotel_intl_citys = hotel_intl_citys
        self.hotel_intl_rule_code = hotel_intl_rule_code
        self.hotel_rule_code = hotel_rule_code
        self.international_flight_cabins = international_flight_cabins
        self.premium_economy_discount = premium_economy_discount
        self.reserve_type = reserve_type
        self.train_rule_code = train_rule_code
        self.train_seats = train_seats
        self.user_id = user_id

    def validate(self):
        if self.car_city_set:
            for k in self.car_city_set:
                if k:
                    k.validate()
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()
        if self.hotel_intl_citys:
            for k in self.hotel_intl_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        result['car_city_set'] = []
        if self.car_city_set is not None:
            for k in self.car_city_set:
                result['car_city_set'].append(k.to_map() if k else None)
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        if self.flight_intl_rule_code is not None:
            result['flight_intl_rule_code'] = self.flight_intl_rule_code
        if self.flight_rule_code is not None:
            result['flight_rule_code'] = self.flight_rule_code
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        result['hotel_intl_citys'] = []
        if self.hotel_intl_citys is not None:
            for k in self.hotel_intl_citys:
                result['hotel_intl_citys'].append(k.to_map() if k else None)
        if self.hotel_intl_rule_code is not None:
            result['hotel_intl_rule_code'] = self.hotel_intl_rule_code
        if self.hotel_rule_code is not None:
            result['hotel_rule_code'] = self.hotel_rule_code
        if self.international_flight_cabins is not None:
            result['international_flight_cabins'] = self.international_flight_cabins
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_rule_code is not None:
            result['train_rule_code'] = self.train_rule_code
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        self.car_city_set = []
        if m.get('car_city_set') is not None:
            for k in m.get('car_city_set'):
                temp_model = ApplyAddRequestTravelerStandardCarCitySet()
                self.car_city_set.append(temp_model.from_map(k))
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        if m.get('flight_intl_rule_code') is not None:
            self.flight_intl_rule_code = m.get('flight_intl_rule_code')
        if m.get('flight_rule_code') is not None:
            self.flight_rule_code = m.get('flight_rule_code')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyAddRequestTravelerStandardHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        self.hotel_intl_citys = []
        if m.get('hotel_intl_citys') is not None:
            for k in m.get('hotel_intl_citys'):
                temp_model = ApplyAddRequestTravelerStandardHotelIntlCitys()
                self.hotel_intl_citys.append(temp_model.from_map(k))
        if m.get('hotel_intl_rule_code') is not None:
            self.hotel_intl_rule_code = m.get('hotel_intl_rule_code')
        if m.get('hotel_rule_code') is not None:
            self.hotel_rule_code = m.get('hotel_rule_code')
        if m.get('international_flight_cabins') is not None:
            self.international_flight_cabins = m.get('international_flight_cabins')
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_rule_code') is not None:
            self.train_rule_code = m.get('train_rule_code')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ApplyAddRequest(TeaModel):
    def __init__(
        self,
        budget: int = None,
        budget_merge: int = None,
        car_rule: ApplyAddRequestCarRule = None,
        corp_name: str = None,
        default_standard: ApplyAddRequestDefaultStandard = None,
        depart_id: str = None,
        depart_name: str = None,
        extend_field: str = None,
        external_traveler_list: List[ApplyAddRequestExternalTravelerList] = None,
        external_traveler_standard: ApplyAddRequestExternalTravelerStandard = None,
        flight_budget: int = None,
        hotel_budget: int = None,
        hotel_share: ApplyAddRequestHotelShare = None,
        international_flight_cabins: str = None,
        itinerary_list: List[ApplyAddRequestItineraryList] = None,
        itinerary_rule: int = None,
        itinerary_set_list: List[ApplyAddRequestItinerarySetList] = None,
        limit_traveler: int = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        status: int = None,
        sub_corp_id: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
        thirdpart_depart_id: str = None,
        together_book_rule: int = None,
        train_budget: int = None,
        traveler_list: List[ApplyAddRequestTravelerList] = None,
        traveler_standard: List[ApplyAddRequestTravelerStandard] = None,
        trip_cause: str = None,
        trip_day: int = None,
        trip_title: str = None,
        type: int = None,
        union_no: str = None,
        user_id: str = None,
        user_name: str = None,
        vehicle_budget: int = None,
    ):
        self.budget = budget
        self.budget_merge = budget_merge
        self.car_rule = car_rule
        self.corp_name = corp_name
        self.default_standard = default_standard
        self.depart_id = depart_id
        self.depart_name = depart_name
        # 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
        self.extend_field = extend_field
        self.external_traveler_list = external_traveler_list
        self.external_traveler_standard = external_traveler_standard
        self.flight_budget = flight_budget
        self.hotel_budget = hotel_budget
        self.hotel_share = hotel_share
        self.international_flight_cabins = international_flight_cabins
        self.itinerary_list = itinerary_list
        self.itinerary_rule = itinerary_rule
        self.itinerary_set_list = itinerary_set_list
        self.limit_traveler = limit_traveler
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.status = status
        self.sub_corp_id = sub_corp_id
        # This parameter is required.
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.together_book_rule = together_book_rule
        self.train_budget = train_budget
        self.traveler_list = traveler_list
        self.traveler_standard = traveler_standard
        # This parameter is required.
        self.trip_cause = trip_cause
        self.trip_day = trip_day
        # This parameter is required.
        self.trip_title = trip_title
        self.type = type
        self.union_no = union_no
        # This parameter is required.
        self.user_id = user_id
        self.user_name = user_name
        self.vehicle_budget = vehicle_budget

    def validate(self):
        if self.car_rule:
            self.car_rule.validate()
        if self.default_standard:
            self.default_standard.validate()
        if self.external_traveler_list:
            for k in self.external_traveler_list:
                if k:
                    k.validate()
        if self.external_traveler_standard:
            self.external_traveler_standard.validate()
        if self.hotel_share:
            self.hotel_share.validate()
        if self.itinerary_list:
            for k in self.itinerary_list:
                if k:
                    k.validate()
        if self.itinerary_set_list:
            for k in self.itinerary_set_list:
                if k:
                    k.validate()
        if self.traveler_list:
            for k in self.traveler_list:
                if k:
                    k.validate()
        if self.traveler_standard:
            for k in self.traveler_standard:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.budget is not None:
            result['budget'] = self.budget
        if self.budget_merge is not None:
            result['budget_merge'] = self.budget_merge
        if self.car_rule is not None:
            result['car_rule'] = self.car_rule.to_map()
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.default_standard is not None:
            result['default_standard'] = self.default_standard.to_map()
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        result['external_traveler_list'] = []
        if self.external_traveler_list is not None:
            for k in self.external_traveler_list:
                result['external_traveler_list'].append(k.to_map() if k else None)
        if self.external_traveler_standard is not None:
            result['external_traveler_standard'] = self.external_traveler_standard.to_map()
        if self.flight_budget is not None:
            result['flight_budget'] = self.flight_budget
        if self.hotel_budget is not None:
            result['hotel_budget'] = self.hotel_budget
        if self.hotel_share is not None:
            result['hotel_share'] = self.hotel_share.to_map()
        if self.international_flight_cabins is not None:
            result['international_flight_cabins'] = self.international_flight_cabins
        result['itinerary_list'] = []
        if self.itinerary_list is not None:
            for k in self.itinerary_list:
                result['itinerary_list'].append(k.to_map() if k else None)
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        result['itinerary_set_list'] = []
        if self.itinerary_set_list is not None:
            for k in self.itinerary_set_list:
                result['itinerary_set_list'].append(k.to_map() if k else None)
        if self.limit_traveler is not None:
            result['limit_traveler'] = self.limit_traveler
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.together_book_rule is not None:
            result['together_book_rule'] = self.together_book_rule
        if self.train_budget is not None:
            result['train_budget'] = self.train_budget
        result['traveler_list'] = []
        if self.traveler_list is not None:
            for k in self.traveler_list:
                result['traveler_list'].append(k.to_map() if k else None)
        result['traveler_standard'] = []
        if self.traveler_standard is not None:
            for k in self.traveler_standard:
                result['traveler_standard'].append(k.to_map() if k else None)
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.type is not None:
            result['type'] = self.type
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.vehicle_budget is not None:
            result['vehicle_budget'] = self.vehicle_budget
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('budget') is not None:
            self.budget = m.get('budget')
        if m.get('budget_merge') is not None:
            self.budget_merge = m.get('budget_merge')
        if m.get('car_rule') is not None:
            temp_model = ApplyAddRequestCarRule()
            self.car_rule = temp_model.from_map(m['car_rule'])
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('default_standard') is not None:
            temp_model = ApplyAddRequestDefaultStandard()
            self.default_standard = temp_model.from_map(m['default_standard'])
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        self.external_traveler_list = []
        if m.get('external_traveler_list') is not None:
            for k in m.get('external_traveler_list'):
                temp_model = ApplyAddRequestExternalTravelerList()
                self.external_traveler_list.append(temp_model.from_map(k))
        if m.get('external_traveler_standard') is not None:
            temp_model = ApplyAddRequestExternalTravelerStandard()
            self.external_traveler_standard = temp_model.from_map(m['external_traveler_standard'])
        if m.get('flight_budget') is not None:
            self.flight_budget = m.get('flight_budget')
        if m.get('hotel_budget') is not None:
            self.hotel_budget = m.get('hotel_budget')
        if m.get('hotel_share') is not None:
            temp_model = ApplyAddRequestHotelShare()
            self.hotel_share = temp_model.from_map(m['hotel_share'])
        if m.get('international_flight_cabins') is not None:
            self.international_flight_cabins = m.get('international_flight_cabins')
        self.itinerary_list = []
        if m.get('itinerary_list') is not None:
            for k in m.get('itinerary_list'):
                temp_model = ApplyAddRequestItineraryList()
                self.itinerary_list.append(temp_model.from_map(k))
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        self.itinerary_set_list = []
        if m.get('itinerary_set_list') is not None:
            for k in m.get('itinerary_set_list'):
                temp_model = ApplyAddRequestItinerarySetList()
                self.itinerary_set_list.append(temp_model.from_map(k))
        if m.get('limit_traveler') is not None:
            self.limit_traveler = m.get('limit_traveler')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('together_book_rule') is not None:
            self.together_book_rule = m.get('together_book_rule')
        if m.get('train_budget') is not None:
            self.train_budget = m.get('train_budget')
        self.traveler_list = []
        if m.get('traveler_list') is not None:
            for k in m.get('traveler_list'):
                temp_model = ApplyAddRequestTravelerList()
                self.traveler_list.append(temp_model.from_map(k))
        self.traveler_standard = []
        if m.get('traveler_standard') is not None:
            for k in m.get('traveler_standard'):
                temp_model = ApplyAddRequestTravelerStandard()
                self.traveler_standard.append(temp_model.from_map(k))
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('vehicle_budget') is not None:
            self.vehicle_budget = m.get('vehicle_budget')
        return self


class ApplyAddShrinkRequest(TeaModel):
    def __init__(
        self,
        budget: int = None,
        budget_merge: int = None,
        car_rule_shrink: str = None,
        corp_name: str = None,
        default_standard_shrink: str = None,
        depart_id: str = None,
        depart_name: str = None,
        extend_field: str = None,
        external_traveler_list_shrink: str = None,
        external_traveler_standard_shrink: str = None,
        flight_budget: int = None,
        hotel_budget: int = None,
        hotel_share_shrink: str = None,
        international_flight_cabins: str = None,
        itinerary_list_shrink: str = None,
        itinerary_rule: int = None,
        itinerary_set_list_shrink: str = None,
        limit_traveler: int = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        status: int = None,
        sub_corp_id: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
        thirdpart_depart_id: str = None,
        together_book_rule: int = None,
        train_budget: int = None,
        traveler_list_shrink: str = None,
        traveler_standard_shrink: str = None,
        trip_cause: str = None,
        trip_day: int = None,
        trip_title: str = None,
        type: int = None,
        union_no: str = None,
        user_id: str = None,
        user_name: str = None,
        vehicle_budget: int = None,
    ):
        self.budget = budget
        self.budget_merge = budget_merge
        self.car_rule_shrink = car_rule_shrink
        self.corp_name = corp_name
        self.default_standard_shrink = default_standard_shrink
        self.depart_id = depart_id
        self.depart_name = depart_name
        # 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
        self.extend_field = extend_field
        self.external_traveler_list_shrink = external_traveler_list_shrink
        self.external_traveler_standard_shrink = external_traveler_standard_shrink
        self.flight_budget = flight_budget
        self.hotel_budget = hotel_budget
        self.hotel_share_shrink = hotel_share_shrink
        self.international_flight_cabins = international_flight_cabins
        self.itinerary_list_shrink = itinerary_list_shrink
        self.itinerary_rule = itinerary_rule
        self.itinerary_set_list_shrink = itinerary_set_list_shrink
        self.limit_traveler = limit_traveler
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.status = status
        self.sub_corp_id = sub_corp_id
        # This parameter is required.
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.together_book_rule = together_book_rule
        self.train_budget = train_budget
        self.traveler_list_shrink = traveler_list_shrink
        self.traveler_standard_shrink = traveler_standard_shrink
        # This parameter is required.
        self.trip_cause = trip_cause
        self.trip_day = trip_day
        # This parameter is required.
        self.trip_title = trip_title
        self.type = type
        self.union_no = union_no
        # This parameter is required.
        self.user_id = user_id
        self.user_name = user_name
        self.vehicle_budget = vehicle_budget

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.budget is not None:
            result['budget'] = self.budget
        if self.budget_merge is not None:
            result['budget_merge'] = self.budget_merge
        if self.car_rule_shrink is not None:
            result['car_rule'] = self.car_rule_shrink
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.default_standard_shrink is not None:
            result['default_standard'] = self.default_standard_shrink
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        if self.external_traveler_list_shrink is not None:
            result['external_traveler_list'] = self.external_traveler_list_shrink
        if self.external_traveler_standard_shrink is not None:
            result['external_traveler_standard'] = self.external_traveler_standard_shrink
        if self.flight_budget is not None:
            result['flight_budget'] = self.flight_budget
        if self.hotel_budget is not None:
            result['hotel_budget'] = self.hotel_budget
        if self.hotel_share_shrink is not None:
            result['hotel_share'] = self.hotel_share_shrink
        if self.international_flight_cabins is not None:
            result['international_flight_cabins'] = self.international_flight_cabins
        if self.itinerary_list_shrink is not None:
            result['itinerary_list'] = self.itinerary_list_shrink
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        if self.itinerary_set_list_shrink is not None:
            result['itinerary_set_list'] = self.itinerary_set_list_shrink
        if self.limit_traveler is not None:
            result['limit_traveler'] = self.limit_traveler
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.together_book_rule is not None:
            result['together_book_rule'] = self.together_book_rule
        if self.train_budget is not None:
            result['train_budget'] = self.train_budget
        if self.traveler_list_shrink is not None:
            result['traveler_list'] = self.traveler_list_shrink
        if self.traveler_standard_shrink is not None:
            result['traveler_standard'] = self.traveler_standard_shrink
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.type is not None:
            result['type'] = self.type
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.vehicle_budget is not None:
            result['vehicle_budget'] = self.vehicle_budget
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('budget') is not None:
            self.budget = m.get('budget')
        if m.get('budget_merge') is not None:
            self.budget_merge = m.get('budget_merge')
        if m.get('car_rule') is not None:
            self.car_rule_shrink = m.get('car_rule')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('default_standard') is not None:
            self.default_standard_shrink = m.get('default_standard')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        if m.get('external_traveler_list') is not None:
            self.external_traveler_list_shrink = m.get('external_traveler_list')
        if m.get('external_traveler_standard') is not None:
            self.external_traveler_standard_shrink = m.get('external_traveler_standard')
        if m.get('flight_budget') is not None:
            self.flight_budget = m.get('flight_budget')
        if m.get('hotel_budget') is not None:
            self.hotel_budget = m.get('hotel_budget')
        if m.get('hotel_share') is not None:
            self.hotel_share_shrink = m.get('hotel_share')
        if m.get('international_flight_cabins') is not None:
            self.international_flight_cabins = m.get('international_flight_cabins')
        if m.get('itinerary_list') is not None:
            self.itinerary_list_shrink = m.get('itinerary_list')
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        if m.get('itinerary_set_list') is not None:
            self.itinerary_set_list_shrink = m.get('itinerary_set_list')
        if m.get('limit_traveler') is not None:
            self.limit_traveler = m.get('limit_traveler')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('together_book_rule') is not None:
            self.together_book_rule = m.get('together_book_rule')
        if m.get('train_budget') is not None:
            self.train_budget = m.get('train_budget')
        if m.get('traveler_list') is not None:
            self.traveler_list_shrink = m.get('traveler_list')
        if m.get('traveler_standard') is not None:
            self.traveler_standard_shrink = m.get('traveler_standard')
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('vehicle_budget') is not None:
            self.vehicle_budget = m.get('vehicle_budget')
        return self


class ApplyAddResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
    ):
        self.apply_id = apply_id
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        return self


class ApplyAddResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: ApplyAddResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = ApplyAddResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyAddResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyAddResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyApproveHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyApproveRequest(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        note: str = None,
        operate_time: str = None,
        status: int = None,
        sub_corp_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        # This parameter is required.
        self.apply_id = apply_id
        self.note = note
        # This parameter is required.
        self.operate_time = operate_time
        # This parameter is required.
        self.status = status
        self.sub_corp_id = sub_corp_id
        # This parameter is required.
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.note is not None:
            result['note'] = self.note
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('note') is not None:
            self.note = m.get('note')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyApproveResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyApproveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyApproveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyApproveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyExternalNodeStatusUpdateHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class ApplyExternalNodeStatusUpdateRequestOperationRecords(TeaModel):
    def __init__(
        self,
        comment: str = None,
        operate_time: str = None,
        operator_name: str = None,
        result: str = None,
        type: str = None,
    ):
        self.comment = comment
        self.operate_time = operate_time
        self.operator_name = operator_name
        self.result = result
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.comment is not None:
            result['comment'] = self.comment
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.operator_name is not None:
            result['operator_name'] = self.operator_name
        if self.result is not None:
            result['result'] = self.result
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('operator_name') is not None:
            self.operator_name = m.get('operator_name')
        if m.get('result') is not None:
            self.result = m.get('result')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ApplyExternalNodeStatusUpdateRequest(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        operation_records: List[ApplyExternalNodeStatusUpdateRequestOperationRecords] = None,
        process_action_result: str = None,
    ):
        # This parameter is required.
        self.node_id = node_id
        self.operation_records = operation_records
        # This parameter is required.
        self.process_action_result = process_action_result

    def validate(self):
        if self.operation_records:
            for k in self.operation_records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['node_id'] = self.node_id
        result['operation_records'] = []
        if self.operation_records is not None:
            for k in self.operation_records:
                result['operation_records'].append(k.to_map() if k else None)
        if self.process_action_result is not None:
            result['process_action_result'] = self.process_action_result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('node_id') is not None:
            self.node_id = m.get('node_id')
        self.operation_records = []
        if m.get('operation_records') is not None:
            for k in m.get('operation_records'):
                temp_model = ApplyExternalNodeStatusUpdateRequestOperationRecords()
                self.operation_records.append(temp_model.from_map(k))
        if m.get('process_action_result') is not None:
            self.process_action_result = m.get('process_action_result')
        return self


class ApplyExternalNodeStatusUpdateShrinkRequest(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        operation_records_shrink: str = None,
        process_action_result: str = None,
    ):
        # This parameter is required.
        self.node_id = node_id
        self.operation_records_shrink = operation_records_shrink
        # This parameter is required.
        self.process_action_result = process_action_result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.node_id is not None:
            result['node_id'] = self.node_id
        if self.operation_records_shrink is not None:
            result['operation_records'] = self.operation_records_shrink
        if self.process_action_result is not None:
            result['process_action_result'] = self.process_action_result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('node_id') is not None:
            self.node_id = m.get('node_id')
        if m.get('operation_records') is not None:
            self.operation_records_shrink = m.get('operation_records')
        if m.get('process_action_result') is not None:
            self.process_action_result = m.get('process_action_result')
        return self


class ApplyExternalNodeStatusUpdateResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyExternalNodeStatusUpdateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyExternalNodeStatusUpdateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyExternalNodeStatusUpdateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyInvoiceTaskHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyInvoiceTaskRequestInvoiceTaskList(TeaModel):
    def __init__(
        self,
        contact: str = None,
        email: str = None,
        flight_invoice_fee: str = None,
        fu_point_invoice_fee: str = None,
        hotel_normal_invoice_fee: str = None,
        hotel_special_invoice_fee: str = None,
        international_flight_invoice_fee: str = None,
        international_hotel_invoice_fee: str = None,
        invoice_third_part_id: str = None,
        invoice_type: int = None,
        mail_address: str = None,
        mail_city: str = None,
        mail_full_address: str = None,
        mail_province: str = None,
        meal_normal_invoice_fee: str = None,
        penalty_fee: str = None,
        remark: str = None,
        service_fee: str = None,
        telephone: str = None,
        train_acceleration_package_invoice_fee: str = None,
        train_invoice_fee: str = None,
        vas_mall_special_invoice_fee: str = None,
        vehicle_invoice_fee: str = None,
        vehicle_normal_invoice_fee: str = None,
    ):
        self.contact = contact
        self.email = email
        self.flight_invoice_fee = flight_invoice_fee
        self.fu_point_invoice_fee = fu_point_invoice_fee
        self.hotel_normal_invoice_fee = hotel_normal_invoice_fee
        self.hotel_special_invoice_fee = hotel_special_invoice_fee
        self.international_flight_invoice_fee = international_flight_invoice_fee
        self.international_hotel_invoice_fee = international_hotel_invoice_fee
        # This parameter is required.
        self.invoice_third_part_id = invoice_third_part_id
        self.invoice_type = invoice_type
        self.mail_address = mail_address
        self.mail_city = mail_city
        self.mail_full_address = mail_full_address
        self.mail_province = mail_province
        self.meal_normal_invoice_fee = meal_normal_invoice_fee
        self.penalty_fee = penalty_fee
        self.remark = remark
        self.service_fee = service_fee
        self.telephone = telephone
        self.train_acceleration_package_invoice_fee = train_acceleration_package_invoice_fee
        self.train_invoice_fee = train_invoice_fee
        self.vas_mall_special_invoice_fee = vas_mall_special_invoice_fee
        self.vehicle_invoice_fee = vehicle_invoice_fee
        self.vehicle_normal_invoice_fee = vehicle_normal_invoice_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact is not None:
            result['contact'] = self.contact
        if self.email is not None:
            result['email'] = self.email
        if self.flight_invoice_fee is not None:
            result['flight_invoice_fee'] = self.flight_invoice_fee
        if self.fu_point_invoice_fee is not None:
            result['fu_point_invoice_fee'] = self.fu_point_invoice_fee
        if self.hotel_normal_invoice_fee is not None:
            result['hotel_normal_invoice_fee'] = self.hotel_normal_invoice_fee
        if self.hotel_special_invoice_fee is not None:
            result['hotel_special_invoice_fee'] = self.hotel_special_invoice_fee
        if self.international_flight_invoice_fee is not None:
            result['international_flight_invoice_fee'] = self.international_flight_invoice_fee
        if self.international_hotel_invoice_fee is not None:
            result['international_hotel_invoice_fee'] = self.international_hotel_invoice_fee
        if self.invoice_third_part_id is not None:
            result['invoice_third_part_id'] = self.invoice_third_part_id
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.mail_address is not None:
            result['mail_address'] = self.mail_address
        if self.mail_city is not None:
            result['mail_city'] = self.mail_city
        if self.mail_full_address is not None:
            result['mail_full_address'] = self.mail_full_address
        if self.mail_province is not None:
            result['mail_province'] = self.mail_province
        if self.meal_normal_invoice_fee is not None:
            result['meal_normal_invoice_fee'] = self.meal_normal_invoice_fee
        if self.penalty_fee is not None:
            result['penalty_fee'] = self.penalty_fee
        if self.remark is not None:
            result['remark'] = self.remark
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.telephone is not None:
            result['telephone'] = self.telephone
        if self.train_acceleration_package_invoice_fee is not None:
            result['train_acceleration_package_invoice_fee'] = self.train_acceleration_package_invoice_fee
        if self.train_invoice_fee is not None:
            result['train_invoice_fee'] = self.train_invoice_fee
        if self.vas_mall_special_invoice_fee is not None:
            result['vas_mall_special_invoice_fee'] = self.vas_mall_special_invoice_fee
        if self.vehicle_invoice_fee is not None:
            result['vehicle_invoice_fee'] = self.vehicle_invoice_fee
        if self.vehicle_normal_invoice_fee is not None:
            result['vehicle_normal_invoice_fee'] = self.vehicle_normal_invoice_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contact') is not None:
            self.contact = m.get('contact')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('flight_invoice_fee') is not None:
            self.flight_invoice_fee = m.get('flight_invoice_fee')
        if m.get('fu_point_invoice_fee') is not None:
            self.fu_point_invoice_fee = m.get('fu_point_invoice_fee')
        if m.get('hotel_normal_invoice_fee') is not None:
            self.hotel_normal_invoice_fee = m.get('hotel_normal_invoice_fee')
        if m.get('hotel_special_invoice_fee') is not None:
            self.hotel_special_invoice_fee = m.get('hotel_special_invoice_fee')
        if m.get('international_flight_invoice_fee') is not None:
            self.international_flight_invoice_fee = m.get('international_flight_invoice_fee')
        if m.get('international_hotel_invoice_fee') is not None:
            self.international_hotel_invoice_fee = m.get('international_hotel_invoice_fee')
        if m.get('invoice_third_part_id') is not None:
            self.invoice_third_part_id = m.get('invoice_third_part_id')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('mail_address') is not None:
            self.mail_address = m.get('mail_address')
        if m.get('mail_city') is not None:
            self.mail_city = m.get('mail_city')
        if m.get('mail_full_address') is not None:
            self.mail_full_address = m.get('mail_full_address')
        if m.get('mail_province') is not None:
            self.mail_province = m.get('mail_province')
        if m.get('meal_normal_invoice_fee') is not None:
            self.meal_normal_invoice_fee = m.get('meal_normal_invoice_fee')
        if m.get('penalty_fee') is not None:
            self.penalty_fee = m.get('penalty_fee')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('telephone') is not None:
            self.telephone = m.get('telephone')
        if m.get('train_acceleration_package_invoice_fee') is not None:
            self.train_acceleration_package_invoice_fee = m.get('train_acceleration_package_invoice_fee')
        if m.get('train_invoice_fee') is not None:
            self.train_invoice_fee = m.get('train_invoice_fee')
        if m.get('vas_mall_special_invoice_fee') is not None:
            self.vas_mall_special_invoice_fee = m.get('vas_mall_special_invoice_fee')
        if m.get('vehicle_invoice_fee') is not None:
            self.vehicle_invoice_fee = m.get('vehicle_invoice_fee')
        if m.get('vehicle_normal_invoice_fee') is not None:
            self.vehicle_normal_invoice_fee = m.get('vehicle_normal_invoice_fee')
        return self


class ApplyInvoiceTaskRequest(TeaModel):
    def __init__(
        self,
        bill_date: str = None,
        invoice_task_list: List[ApplyInvoiceTaskRequestInvoiceTaskList] = None,
    ):
        # This parameter is required.
        self.bill_date = bill_date
        # This parameter is required.
        self.invoice_task_list = invoice_task_list

    def validate(self):
        if self.invoice_task_list:
            for k in self.invoice_task_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        result['invoice_task_list'] = []
        if self.invoice_task_list is not None:
            for k in self.invoice_task_list:
                result['invoice_task_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        self.invoice_task_list = []
        if m.get('invoice_task_list') is not None:
            for k in m.get('invoice_task_list'):
                temp_model = ApplyInvoiceTaskRequestInvoiceTaskList()
                self.invoice_task_list.append(temp_model.from_map(k))
        return self


class ApplyInvoiceTaskShrinkRequest(TeaModel):
    def __init__(
        self,
        bill_date: str = None,
        invoice_task_list_shrink: str = None,
    ):
        # This parameter is required.
        self.bill_date = bill_date
        # This parameter is required.
        self.invoice_task_list_shrink = invoice_task_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.invoice_task_list_shrink is not None:
            result['invoice_task_list'] = self.invoice_task_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('invoice_task_list') is not None:
            self.invoice_task_list_shrink = m.get('invoice_task_list')
        return self


class ApplyInvoiceTaskResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyInvoiceTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyInvoiceTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyInvoiceTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyListQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyListQueryRequest(TeaModel):
    def __init__(
        self,
        all_apply: bool = None,
        depart_id: str = None,
        end_time: str = None,
        gmt_modified: str = None,
        only_shang_lv_apply: bool = None,
        page: int = None,
        page_size: int = None,
        start_time: str = None,
        sub_corp_id: str = None,
        type: int = None,
        union_no: str = None,
        user_id: str = None,
    ):
        self.all_apply = all_apply
        self.depart_id = depart_id
        self.end_time = end_time
        self.gmt_modified = gmt_modified
        self.only_shang_lv_apply = only_shang_lv_apply
        self.page = page
        self.page_size = page_size
        self.start_time = start_time
        self.sub_corp_id = sub_corp_id
        self.type = type
        self.union_no = union_no
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_apply is not None:
            result['all_apply'] = self.all_apply
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.only_shang_lv_apply is not None:
            result['only_shang_lv_apply'] = self.only_shang_lv_apply
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.type is not None:
            result['type'] = self.type
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('all_apply') is not None:
            self.all_apply = m.get('all_apply')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('only_shang_lv_apply') is not None:
            self.only_shang_lv_apply = m.get('only_shang_lv_apply')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ApplyListQueryResponseBodyModuleListApproverList(TeaModel):
    def __init__(
        self,
        note: str = None,
        operate_time: str = None,
        order: int = None,
        status: int = None,
        status_desc: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.note = note
        self.operate_time = operate_time
        self.order = order
        self.status = status
        self.status_desc = status_desc
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.note is not None:
            result['note'] = self.note
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.order is not None:
            result['order'] = self.order
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('note') is not None:
            self.note = m.get('note')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyListQueryResponseBodyModuleListCarRule(TeaModel):
    def __init__(
        self,
        scenario_template_id: str = None,
        scenario_template_name: str = None,
    ):
        self.scenario_template_id = scenario_template_id
        self.scenario_template_name = scenario_template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.scenario_template_id is not None:
            result['scenario_template_id'] = self.scenario_template_id
        if self.scenario_template_name is not None:
            result['scenario_template_name'] = self.scenario_template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('scenario_template_id') is not None:
            self.scenario_template_id = m.get('scenario_template_id')
        if m.get('scenario_template_name') is not None:
            self.scenario_template_name = m.get('scenario_template_name')
        return self


class ApplyListQueryResponseBodyModuleListExternalTravelerList(TeaModel):
    def __init__(
        self,
        attribute: str = None,
        cost_center_name: str = None,
        depart_id: str = None,
        external_user_id: str = None,
        invoice_name: str = None,
        payment_department_name: str = None,
        project_code: str = None,
        project_title: str = None,
        thirdpart_depart_id: str = None,
        user_name: str = None,
    ):
        self.attribute = attribute
        self.cost_center_name = cost_center_name
        self.depart_id = depart_id
        self.external_user_id = external_user_id
        self.invoice_name = invoice_name
        self.payment_department_name = payment_department_name
        self.project_code = project_code
        self.project_title = project_title
        self.thirdpart_depart_id = thirdpart_depart_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.external_user_id is not None:
            result['external_user_id'] = self.external_user_id
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('external_user_id') is not None:
            self.external_user_id = m.get('external_user_id')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyListQueryResponseBodyModuleListItineraryList(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        arr_date: str = None,
        cost_center_name: str = None,
        dep_city: str = None,
        dep_date: str = None,
        invoice_name: str = None,
        itinerary_id: str = None,
        project_code: str = None,
        project_title: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_invoice_id: str = None,
        thirdpart_itinerary_id: str = None,
        traffic_type: int = None,
        trip_way: int = None,
    ):
        self.arr_city = arr_city
        self.arr_date = arr_date
        self.cost_center_name = cost_center_name
        self.dep_city = dep_city
        self.dep_date = dep_date
        self.invoice_name = invoice_name
        self.itinerary_id = itinerary_id
        self.project_code = project_code
        self.project_title = project_title
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_invoice_id = thirdpart_invoice_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.traffic_type = traffic_type
        self.trip_way = trip_way

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_invoice_id is not None:
            result['thirdpart_invoice_id'] = self.thirdpart_invoice_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        if self.trip_way is not None:
            result['trip_way'] = self.trip_way
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_invoice_id') is not None:
            self.thirdpart_invoice_id = m.get('thirdpart_invoice_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        if m.get('trip_way') is not None:
            self.trip_way = m.get('trip_way')
        return self


class ApplyListQueryResponseBodyModuleListItinerarySetList(TeaModel):
    def __init__(
        self,
        arr_date: str = None,
        city_code_set: str = None,
        city_set: str = None,
        cost_center_name: str = None,
        dep_date: str = None,
        invoice_name: str = None,
        itinerary_id: str = None,
        project_code: str = None,
        project_title: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_invoice_id: str = None,
        thirdpart_itinerary_id: str = None,
        traffic_type: int = None,
    ):
        self.arr_date = arr_date
        self.city_code_set = city_code_set
        self.city_set = city_set
        self.cost_center_name = cost_center_name
        self.dep_date = dep_date
        self.invoice_name = invoice_name
        self.itinerary_id = itinerary_id
        self.project_code = project_code
        self.project_title = project_title
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_invoice_id = thirdpart_invoice_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.traffic_type = traffic_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.city_code_set is not None:
            result['city_code_set'] = self.city_code_set
        if self.city_set is not None:
            result['city_set'] = self.city_set
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_invoice_id is not None:
            result['thirdpart_invoice_id'] = self.thirdpart_invoice_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('city_code_set') is not None:
            self.city_code_set = m.get('city_code_set')
        if m.get('city_set') is not None:
            self.city_set = m.get('city_set')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_invoice_id') is not None:
            self.thirdpart_invoice_id = m.get('thirdpart_invoice_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        return self


class ApplyListQueryResponseBodyModuleListTravelerListCarCitySet(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
    ):
        self.city_code = city_code
        self.city_name = city_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        return self


class ApplyListQueryResponseBodyModuleListTravelerList(TeaModel):
    def __init__(
        self,
        attribute: str = None,
        car_city_set: List[ApplyListQueryResponseBodyModuleListTravelerListCarCitySet] = None,
        cost_center_name: str = None,
        depart_id: str = None,
        invoice_name: str = None,
        job_no: str = None,
        payment_department_name: str = None,
        project_code: str = None,
        project_title: str = None,
        thirdpart_depart_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.attribute = attribute
        self.car_city_set = car_city_set
        self.cost_center_name = cost_center_name
        self.depart_id = depart_id
        self.invoice_name = invoice_name
        self.job_no = job_no
        self.payment_department_name = payment_department_name
        self.project_code = project_code
        self.project_title = project_title
        self.thirdpart_depart_id = thirdpart_depart_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.car_city_set:
            for k in self.car_city_set:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute is not None:
            result['attribute'] = self.attribute
        result['car_city_set'] = []
        if self.car_city_set is not None:
            for k in self.car_city_set:
                result['car_city_set'].append(k.to_map() if k else None)
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        self.car_city_set = []
        if m.get('car_city_set') is not None:
            for k in m.get('car_city_set'):
                temp_model = ApplyListQueryResponseBodyModuleListTravelerListCarCitySet()
                self.car_city_set.append(temp_model.from_map(k))
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyListQueryResponseBodyModuleList(TeaModel):
    def __init__(
        self,
        apply_show_id: str = None,
        approver_list: List[ApplyListQueryResponseBodyModuleListApproverList] = None,
        car_rule: ApplyListQueryResponseBodyModuleListCarRule = None,
        corp_id: str = None,
        corp_name: str = None,
        depart_id: str = None,
        depart_name: str = None,
        external_traveler_list: List[ApplyListQueryResponseBodyModuleListExternalTravelerList] = None,
        flow_code: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        itinerary_list: List[ApplyListQueryResponseBodyModuleListItineraryList] = None,
        itinerary_rule: int = None,
        itinerary_set_list: List[ApplyListQueryResponseBodyModuleListItinerarySetList] = None,
        job_no: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        status: int = None,
        status_desc: str = None,
        thirdpart_business_id: str = None,
        thirdpart_id: str = None,
        traveler_list: List[ApplyListQueryResponseBodyModuleListTravelerList] = None,
        trip_cause: str = None,
        trip_day: int = None,
        trip_title: str = None,
        type: int = None,
        union_no: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_show_id = apply_show_id
        self.approver_list = approver_list
        self.car_rule = car_rule
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.external_traveler_list = external_traveler_list
        self.flow_code = flow_code
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.itinerary_list = itinerary_list
        self.itinerary_rule = itinerary_rule
        self.itinerary_set_list = itinerary_set_list
        self.job_no = job_no
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.status = status
        self.status_desc = status_desc
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_id = thirdpart_id
        self.traveler_list = traveler_list
        self.trip_cause = trip_cause
        self.trip_day = trip_day
        self.trip_title = trip_title
        self.type = type
        self.union_no = union_no
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.approver_list:
            for k in self.approver_list:
                if k:
                    k.validate()
        if self.car_rule:
            self.car_rule.validate()
        if self.external_traveler_list:
            for k in self.external_traveler_list:
                if k:
                    k.validate()
        if self.itinerary_list:
            for k in self.itinerary_list:
                if k:
                    k.validate()
        if self.itinerary_set_list:
            for k in self.itinerary_set_list:
                if k:
                    k.validate()
        if self.traveler_list:
            for k in self.traveler_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_show_id is not None:
            result['apply_show_id'] = self.apply_show_id
        result['approver_list'] = []
        if self.approver_list is not None:
            for k in self.approver_list:
                result['approver_list'].append(k.to_map() if k else None)
        if self.car_rule is not None:
            result['car_rule'] = self.car_rule.to_map()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        result['external_traveler_list'] = []
        if self.external_traveler_list is not None:
            for k in self.external_traveler_list:
                result['external_traveler_list'].append(k.to_map() if k else None)
        if self.flow_code is not None:
            result['flow_code'] = self.flow_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        result['itinerary_list'] = []
        if self.itinerary_list is not None:
            for k in self.itinerary_list:
                result['itinerary_list'].append(k.to_map() if k else None)
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        result['itinerary_set_list'] = []
        if self.itinerary_set_list is not None:
            for k in self.itinerary_set_list:
                result['itinerary_set_list'].append(k.to_map() if k else None)
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        result['traveler_list'] = []
        if self.traveler_list is not None:
            for k in self.traveler_list:
                result['traveler_list'].append(k.to_map() if k else None)
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.type is not None:
            result['type'] = self.type
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_show_id') is not None:
            self.apply_show_id = m.get('apply_show_id')
        self.approver_list = []
        if m.get('approver_list') is not None:
            for k in m.get('approver_list'):
                temp_model = ApplyListQueryResponseBodyModuleListApproverList()
                self.approver_list.append(temp_model.from_map(k))
        if m.get('car_rule') is not None:
            temp_model = ApplyListQueryResponseBodyModuleListCarRule()
            self.car_rule = temp_model.from_map(m['car_rule'])
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        self.external_traveler_list = []
        if m.get('external_traveler_list') is not None:
            for k in m.get('external_traveler_list'):
                temp_model = ApplyListQueryResponseBodyModuleListExternalTravelerList()
                self.external_traveler_list.append(temp_model.from_map(k))
        if m.get('flow_code') is not None:
            self.flow_code = m.get('flow_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        self.itinerary_list = []
        if m.get('itinerary_list') is not None:
            for k in m.get('itinerary_list'):
                temp_model = ApplyListQueryResponseBodyModuleListItineraryList()
                self.itinerary_list.append(temp_model.from_map(k))
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        self.itinerary_set_list = []
        if m.get('itinerary_set_list') is not None:
            for k in m.get('itinerary_set_list'):
                temp_model = ApplyListQueryResponseBodyModuleListItinerarySetList()
                self.itinerary_set_list.append(temp_model.from_map(k))
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        self.traveler_list = []
        if m.get('traveler_list') is not None:
            for k in m.get('traveler_list'):
                temp_model = ApplyListQueryResponseBodyModuleListTravelerList()
                self.traveler_list.append(temp_model.from_map(k))
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyListQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module_list: List[ApplyListQueryResponseBodyModuleList] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module_list = module_list
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module_list:
            for k in self.module_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module_list'] = []
        if self.module_list is not None:
            for k in self.module_list:
                result['module_list'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module_list = []
        if m.get('module_list') is not None:
            for k in m.get('module_list'):
                temp_model = ApplyListQueryResponseBodyModuleList()
                self.module_list.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyListQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyListQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyModifyHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyModifyRequestCarRule(TeaModel):
    def __init__(
        self,
        scenario_template_id: str = None,
        scenario_template_name: str = None,
    ):
        self.scenario_template_id = scenario_template_id
        self.scenario_template_name = scenario_template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.scenario_template_id is not None:
            result['scenario_template_id'] = self.scenario_template_id
        if self.scenario_template_name is not None:
            result['scenario_template_name'] = self.scenario_template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('scenario_template_id') is not None:
            self.scenario_template_id = m.get('scenario_template_id')
        if m.get('scenario_template_name') is not None:
            self.scenario_template_name = m.get('scenario_template_name')
        return self


class ApplyModifyRequestDefaultStandardHotelCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyModifyRequestDefaultStandardHotelIntlCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyModifyRequestDefaultStandard(TeaModel):
    def __init__(
        self,
        business_discount: int = None,
        economy_discount: int = None,
        first_discount: int = None,
        flight_cabins: str = None,
        flight_intl_rule_code: int = None,
        flight_rule_code: int = None,
        hotel_citys: List[ApplyModifyRequestDefaultStandardHotelCitys] = None,
        hotel_intl_citys: List[ApplyModifyRequestDefaultStandardHotelIntlCitys] = None,
        hotel_intl_rule_code: int = None,
        hotel_rule_code: int = None,
        premium_economy_discount: int = None,
        reserve_type: int = None,
        train_rule_code: int = None,
        train_seats: str = None,
    ):
        self.business_discount = business_discount
        self.economy_discount = economy_discount
        self.first_discount = first_discount
        self.flight_cabins = flight_cabins
        self.flight_intl_rule_code = flight_intl_rule_code
        self.flight_rule_code = flight_rule_code
        self.hotel_citys = hotel_citys
        self.hotel_intl_citys = hotel_intl_citys
        self.hotel_intl_rule_code = hotel_intl_rule_code
        self.hotel_rule_code = hotel_rule_code
        self.premium_economy_discount = premium_economy_discount
        self.reserve_type = reserve_type
        self.train_rule_code = train_rule_code
        self.train_seats = train_seats

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()
        if self.hotel_intl_citys:
            for k in self.hotel_intl_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        if self.flight_intl_rule_code is not None:
            result['flight_intl_rule_code'] = self.flight_intl_rule_code
        if self.flight_rule_code is not None:
            result['flight_rule_code'] = self.flight_rule_code
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        result['hotel_intl_citys'] = []
        if self.hotel_intl_citys is not None:
            for k in self.hotel_intl_citys:
                result['hotel_intl_citys'].append(k.to_map() if k else None)
        if self.hotel_intl_rule_code is not None:
            result['hotel_intl_rule_code'] = self.hotel_intl_rule_code
        if self.hotel_rule_code is not None:
            result['hotel_rule_code'] = self.hotel_rule_code
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_rule_code is not None:
            result['train_rule_code'] = self.train_rule_code
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        if m.get('flight_intl_rule_code') is not None:
            self.flight_intl_rule_code = m.get('flight_intl_rule_code')
        if m.get('flight_rule_code') is not None:
            self.flight_rule_code = m.get('flight_rule_code')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyModifyRequestDefaultStandardHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        self.hotel_intl_citys = []
        if m.get('hotel_intl_citys') is not None:
            for k in m.get('hotel_intl_citys'):
                temp_model = ApplyModifyRequestDefaultStandardHotelIntlCitys()
                self.hotel_intl_citys.append(temp_model.from_map(k))
        if m.get('hotel_intl_rule_code') is not None:
            self.hotel_intl_rule_code = m.get('hotel_intl_rule_code')
        if m.get('hotel_rule_code') is not None:
            self.hotel_rule_code = m.get('hotel_rule_code')
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_rule_code') is not None:
            self.train_rule_code = m.get('train_rule_code')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        return self


class ApplyModifyRequestExternalTravelerList(TeaModel):
    def __init__(
        self,
        attribute: str = None,
        cost_center_id: int = None,
        external_user_id: str = None,
        invoice_id: int = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        project_code: str = None,
        project_title: str = None,
        third_part_invoice_id: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_depart_id: str = None,
        user_name: str = None,
        user_name_en: str = None,
    ):
        self.attribute = attribute
        self.cost_center_id = cost_center_id
        self.external_user_id = external_user_id
        self.invoice_id = invoice_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.project_code = project_code
        self.project_title = project_title
        self.third_part_invoice_id = third_part_invoice_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.user_name = user_name
        self.user_name_en = user_name_en

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.external_user_id is not None:
            result['external_user_id'] = self.external_user_id
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_name_en is not None:
            result['user_name_en'] = self.user_name_en
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('external_user_id') is not None:
            self.external_user_id = m.get('external_user_id')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_name_en') is not None:
            self.user_name_en = m.get('user_name_en')
        return self


class ApplyModifyRequestExternalTravelerStandardHotelCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyModifyRequestExternalTravelerStandardHotelIntlCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyModifyRequestExternalTravelerStandard(TeaModel):
    def __init__(
        self,
        business_discount: int = None,
        economy_discount: int = None,
        first_discount: int = None,
        flight_cabins: str = None,
        flight_intl_rule_code: int = None,
        flight_rule_code: int = None,
        hotel_citys: List[ApplyModifyRequestExternalTravelerStandardHotelCitys] = None,
        hotel_intl_citys: List[ApplyModifyRequestExternalTravelerStandardHotelIntlCitys] = None,
        hotel_intl_rule_code: int = None,
        hotel_rule_code: int = None,
        premium_economy_discount: int = None,
        reserve_type: int = None,
        train_rule_code: int = None,
        train_seats: str = None,
    ):
        self.business_discount = business_discount
        self.economy_discount = economy_discount
        self.first_discount = first_discount
        self.flight_cabins = flight_cabins
        self.flight_intl_rule_code = flight_intl_rule_code
        self.flight_rule_code = flight_rule_code
        self.hotel_citys = hotel_citys
        self.hotel_intl_citys = hotel_intl_citys
        self.hotel_intl_rule_code = hotel_intl_rule_code
        self.hotel_rule_code = hotel_rule_code
        # 超级经济舱折扣。1到10的整数
        self.premium_economy_discount = premium_economy_discount
        self.reserve_type = reserve_type
        self.train_rule_code = train_rule_code
        self.train_seats = train_seats

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()
        if self.hotel_intl_citys:
            for k in self.hotel_intl_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        if self.flight_intl_rule_code is not None:
            result['flight_intl_rule_code'] = self.flight_intl_rule_code
        if self.flight_rule_code is not None:
            result['flight_rule_code'] = self.flight_rule_code
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        result['hotel_intl_citys'] = []
        if self.hotel_intl_citys is not None:
            for k in self.hotel_intl_citys:
                result['hotel_intl_citys'].append(k.to_map() if k else None)
        if self.hotel_intl_rule_code is not None:
            result['hotel_intl_rule_code'] = self.hotel_intl_rule_code
        if self.hotel_rule_code is not None:
            result['hotel_rule_code'] = self.hotel_rule_code
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_rule_code is not None:
            result['train_rule_code'] = self.train_rule_code
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        if m.get('flight_intl_rule_code') is not None:
            self.flight_intl_rule_code = m.get('flight_intl_rule_code')
        if m.get('flight_rule_code') is not None:
            self.flight_rule_code = m.get('flight_rule_code')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyModifyRequestExternalTravelerStandardHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        self.hotel_intl_citys = []
        if m.get('hotel_intl_citys') is not None:
            for k in m.get('hotel_intl_citys'):
                temp_model = ApplyModifyRequestExternalTravelerStandardHotelIntlCitys()
                self.hotel_intl_citys.append(temp_model.from_map(k))
        if m.get('hotel_intl_rule_code') is not None:
            self.hotel_intl_rule_code = m.get('hotel_intl_rule_code')
        if m.get('hotel_rule_code') is not None:
            self.hotel_rule_code = m.get('hotel_rule_code')
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_rule_code') is not None:
            self.train_rule_code = m.get('train_rule_code')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        return self


class ApplyModifyRequestHotelShare(TeaModel):
    def __init__(
        self,
        param: str = None,
        type: str = None,
    ):
        self.param = param
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.param is not None:
            result['param'] = self.param
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('param') is not None:
            self.param = m.get('param')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ApplyModifyRequestItineraryListItineraryTravelStandard(TeaModel):
    def __init__(
        self,
        hotel_available_nights_per_day: int = None,
    ):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyModifyRequestItineraryList(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_date: str = None,
        attribute: str = None,
        cost_center_id: int = None,
        dep_city: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        invoice_id: int = None,
        itinerary_id: str = None,
        itinerary_travel_standard: ApplyModifyRequestItineraryListItineraryTravelStandard = None,
        need_hotel: bool = None,
        need_traffic: bool = None,
        project_code: str = None,
        project_title: str = None,
        province_travel_city_adcodes: List[str] = None,
        third_part_invoice_id: str = None,
        thirdpart_cost_center_id: str = None,
        traffic_type: int = None,
        trip_way: int = None,
    ):
        # This parameter is required.
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        # This parameter is required.
        self.arr_date = arr_date
        self.attribute = attribute
        self.cost_center_id = cost_center_id
        # This parameter is required.
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.dep_date = dep_date
        self.invoice_id = invoice_id
        # This parameter is required.
        self.itinerary_id = itinerary_id
        self.itinerary_travel_standard = itinerary_travel_standard
        self.need_hotel = need_hotel
        self.need_traffic = need_traffic
        self.project_code = project_code
        self.project_title = project_title
        self.province_travel_city_adcodes = province_travel_city_adcodes
        self.third_part_invoice_id = third_part_invoice_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        # This parameter is required.
        self.traffic_type = traffic_type
        # This parameter is required.
        self.trip_way = trip_way

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.need_hotel is not None:
            result['need_hotel'] = self.need_hotel
        if self.need_traffic is not None:
            result['need_traffic'] = self.need_traffic
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.province_travel_city_adcodes is not None:
            result['province_travel_city_adcodes'] = self.province_travel_city_adcodes
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        if self.trip_way is not None:
            result['trip_way'] = self.trip_way
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyModifyRequestItineraryListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('need_hotel') is not None:
            self.need_hotel = m.get('need_hotel')
        if m.get('need_traffic') is not None:
            self.need_traffic = m.get('need_traffic')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('province_travel_city_adcodes') is not None:
            self.province_travel_city_adcodes = m.get('province_travel_city_adcodes')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        if m.get('trip_way') is not None:
            self.trip_way = m.get('trip_way')
        return self


class ApplyModifyRequestItinerarySetListItineraryTravelStandard(TeaModel):
    def __init__(
        self,
        hotel_available_nights_per_day: int = None,
    ):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyModifyRequestItinerarySetList(TeaModel):
    def __init__(
        self,
        arr_date: str = None,
        attribute: str = None,
        city_code_set: str = None,
        city_set: str = None,
        cost_center_id: int = None,
        dep_date: str = None,
        invoice_id: int = None,
        itinerary_id: str = None,
        itinerary_travel_standard: ApplyModifyRequestItinerarySetListItineraryTravelStandard = None,
        project_code: str = None,
        project_title: str = None,
        province_travel_city_adcodes: List[str] = None,
        third_part_invoice_id: str = None,
        thirdpart_cost_center_id: str = None,
        traffic_type: int = None,
    ):
        self.arr_date = arr_date
        self.attribute = attribute
        self.city_code_set = city_code_set
        self.city_set = city_set
        self.cost_center_id = cost_center_id
        self.dep_date = dep_date
        self.invoice_id = invoice_id
        self.itinerary_id = itinerary_id
        self.itinerary_travel_standard = itinerary_travel_standard
        self.project_code = project_code
        self.project_title = project_title
        self.province_travel_city_adcodes = province_travel_city_adcodes
        self.third_part_invoice_id = third_part_invoice_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.traffic_type = traffic_type

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.city_code_set is not None:
            result['city_code_set'] = self.city_code_set
        if self.city_set is not None:
            result['city_set'] = self.city_set
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.province_travel_city_adcodes is not None:
            result['province_travel_city_adcodes'] = self.province_travel_city_adcodes
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('city_code_set') is not None:
            self.city_code_set = m.get('city_code_set')
        if m.get('city_set') is not None:
            self.city_set = m.get('city_set')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyModifyRequestItinerarySetListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('province_travel_city_adcodes') is not None:
            self.province_travel_city_adcodes = m.get('province_travel_city_adcodes')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        return self


class ApplyModifyRequestTravelerList(TeaModel):
    def __init__(
        self,
        attribute: str = None,
        cost_center_id: int = None,
        invoice_id: int = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        project_code: str = None,
        project_title: str = None,
        third_part_invoice_id: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_depart_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.attribute = attribute
        self.cost_center_id = cost_center_id
        self.invoice_id = invoice_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.project_code = project_code
        self.project_title = project_title
        self.third_part_invoice_id = third_part_invoice_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyModifyRequestTravelerStandardCarCitySet(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
    ):
        # This parameter is required.
        self.city_code = city_code
        # This parameter is required.
        self.city_name = city_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        return self


class ApplyModifyRequestTravelerStandardHotelCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyModifyRequestTravelerStandardHotelIntlCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyModifyRequestTravelerStandard(TeaModel):
    def __init__(
        self,
        business_discount: int = None,
        car_city_set: List[ApplyModifyRequestTravelerStandardCarCitySet] = None,
        economy_discount: int = None,
        first_discount: int = None,
        flight_cabins: str = None,
        flight_intl_rule_code: int = None,
        flight_rule_code: int = None,
        hotel_citys: List[ApplyModifyRequestTravelerStandardHotelCitys] = None,
        hotel_intl_citys: List[ApplyModifyRequestTravelerStandardHotelIntlCitys] = None,
        hotel_intl_rule_code: int = None,
        hotel_rule_code: int = None,
        premium_economy_discount: int = None,
        reserve_type: int = None,
        train_rule_code: int = None,
        train_seats: str = None,
        user_id: str = None,
    ):
        self.business_discount = business_discount
        self.car_city_set = car_city_set
        self.economy_discount = economy_discount
        self.first_discount = first_discount
        self.flight_cabins = flight_cabins
        self.flight_intl_rule_code = flight_intl_rule_code
        self.flight_rule_code = flight_rule_code
        self.hotel_citys = hotel_citys
        self.hotel_intl_citys = hotel_intl_citys
        self.hotel_intl_rule_code = hotel_intl_rule_code
        self.hotel_rule_code = hotel_rule_code
        # 超级经济舱折扣。1到10的整数
        self.premium_economy_discount = premium_economy_discount
        self.reserve_type = reserve_type
        self.train_rule_code = train_rule_code
        self.train_seats = train_seats
        self.user_id = user_id

    def validate(self):
        if self.car_city_set:
            for k in self.car_city_set:
                if k:
                    k.validate()
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()
        if self.hotel_intl_citys:
            for k in self.hotel_intl_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        result['car_city_set'] = []
        if self.car_city_set is not None:
            for k in self.car_city_set:
                result['car_city_set'].append(k.to_map() if k else None)
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        if self.flight_intl_rule_code is not None:
            result['flight_intl_rule_code'] = self.flight_intl_rule_code
        if self.flight_rule_code is not None:
            result['flight_rule_code'] = self.flight_rule_code
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        result['hotel_intl_citys'] = []
        if self.hotel_intl_citys is not None:
            for k in self.hotel_intl_citys:
                result['hotel_intl_citys'].append(k.to_map() if k else None)
        if self.hotel_intl_rule_code is not None:
            result['hotel_intl_rule_code'] = self.hotel_intl_rule_code
        if self.hotel_rule_code is not None:
            result['hotel_rule_code'] = self.hotel_rule_code
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.train_rule_code is not None:
            result['train_rule_code'] = self.train_rule_code
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        self.car_city_set = []
        if m.get('car_city_set') is not None:
            for k in m.get('car_city_set'):
                temp_model = ApplyModifyRequestTravelerStandardCarCitySet()
                self.car_city_set.append(temp_model.from_map(k))
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        if m.get('flight_intl_rule_code') is not None:
            self.flight_intl_rule_code = m.get('flight_intl_rule_code')
        if m.get('flight_rule_code') is not None:
            self.flight_rule_code = m.get('flight_rule_code')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyModifyRequestTravelerStandardHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        self.hotel_intl_citys = []
        if m.get('hotel_intl_citys') is not None:
            for k in m.get('hotel_intl_citys'):
                temp_model = ApplyModifyRequestTravelerStandardHotelIntlCitys()
                self.hotel_intl_citys.append(temp_model.from_map(k))
        if m.get('hotel_intl_rule_code') is not None:
            self.hotel_intl_rule_code = m.get('hotel_intl_rule_code')
        if m.get('hotel_rule_code') is not None:
            self.hotel_rule_code = m.get('hotel_rule_code')
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('train_rule_code') is not None:
            self.train_rule_code = m.get('train_rule_code')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ApplyModifyRequest(TeaModel):
    def __init__(
        self,
        budget: int = None,
        budget_merge: int = None,
        car_rule: ApplyModifyRequestCarRule = None,
        corp_name: str = None,
        default_standard: ApplyModifyRequestDefaultStandard = None,
        depart_id: str = None,
        depart_name: str = None,
        extend_field: str = None,
        external_traveler_list: List[ApplyModifyRequestExternalTravelerList] = None,
        external_traveler_standard: ApplyModifyRequestExternalTravelerStandard = None,
        flight_budget: int = None,
        hotel_budget: int = None,
        hotel_share: ApplyModifyRequestHotelShare = None,
        itinerary_list: List[ApplyModifyRequestItineraryList] = None,
        itinerary_rule: int = None,
        itinerary_set_list: List[ApplyModifyRequestItinerarySetList] = None,
        limit_traveler: int = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        status: int = None,
        sub_corp_id: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
        thirdpart_depart_id: str = None,
        together_book_rule: int = None,
        train_budget: int = None,
        traveler_list: List[ApplyModifyRequestTravelerList] = None,
        traveler_standard: List[ApplyModifyRequestTravelerStandard] = None,
        trip_cause: str = None,
        trip_day: int = None,
        trip_title: str = None,
        union_no: str = None,
        user_id: str = None,
        user_name: str = None,
        vehicle_budget: int = None,
    ):
        self.budget = budget
        self.budget_merge = budget_merge
        self.car_rule = car_rule
        self.corp_name = corp_name
        self.default_standard = default_standard
        self.depart_id = depart_id
        self.depart_name = depart_name
        # 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
        self.extend_field = extend_field
        self.external_traveler_list = external_traveler_list
        self.external_traveler_standard = external_traveler_standard
        self.flight_budget = flight_budget
        self.hotel_budget = hotel_budget
        self.hotel_share = hotel_share
        self.itinerary_list = itinerary_list
        self.itinerary_rule = itinerary_rule
        self.itinerary_set_list = itinerary_set_list
        self.limit_traveler = limit_traveler
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.status = status
        # 子企业Id
        self.sub_corp_id = sub_corp_id
        # This parameter is required.
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.together_book_rule = together_book_rule
        self.train_budget = train_budget
        self.traveler_list = traveler_list
        self.traveler_standard = traveler_standard
        # This parameter is required.
        self.trip_cause = trip_cause
        self.trip_day = trip_day
        # This parameter is required.
        self.trip_title = trip_title
        self.union_no = union_no
        # This parameter is required.
        self.user_id = user_id
        self.user_name = user_name
        self.vehicle_budget = vehicle_budget

    def validate(self):
        if self.car_rule:
            self.car_rule.validate()
        if self.default_standard:
            self.default_standard.validate()
        if self.external_traveler_list:
            for k in self.external_traveler_list:
                if k:
                    k.validate()
        if self.external_traveler_standard:
            self.external_traveler_standard.validate()
        if self.hotel_share:
            self.hotel_share.validate()
        if self.itinerary_list:
            for k in self.itinerary_list:
                if k:
                    k.validate()
        if self.itinerary_set_list:
            for k in self.itinerary_set_list:
                if k:
                    k.validate()
        if self.traveler_list:
            for k in self.traveler_list:
                if k:
                    k.validate()
        if self.traveler_standard:
            for k in self.traveler_standard:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.budget is not None:
            result['budget'] = self.budget
        if self.budget_merge is not None:
            result['budget_merge'] = self.budget_merge
        if self.car_rule is not None:
            result['car_rule'] = self.car_rule.to_map()
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.default_standard is not None:
            result['default_standard'] = self.default_standard.to_map()
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        result['external_traveler_list'] = []
        if self.external_traveler_list is not None:
            for k in self.external_traveler_list:
                result['external_traveler_list'].append(k.to_map() if k else None)
        if self.external_traveler_standard is not None:
            result['external_traveler_standard'] = self.external_traveler_standard.to_map()
        if self.flight_budget is not None:
            result['flight_budget'] = self.flight_budget
        if self.hotel_budget is not None:
            result['hotel_budget'] = self.hotel_budget
        if self.hotel_share is not None:
            result['hotel_share'] = self.hotel_share.to_map()
        result['itinerary_list'] = []
        if self.itinerary_list is not None:
            for k in self.itinerary_list:
                result['itinerary_list'].append(k.to_map() if k else None)
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        result['itinerary_set_list'] = []
        if self.itinerary_set_list is not None:
            for k in self.itinerary_set_list:
                result['itinerary_set_list'].append(k.to_map() if k else None)
        if self.limit_traveler is not None:
            result['limit_traveler'] = self.limit_traveler
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.together_book_rule is not None:
            result['together_book_rule'] = self.together_book_rule
        if self.train_budget is not None:
            result['train_budget'] = self.train_budget
        result['traveler_list'] = []
        if self.traveler_list is not None:
            for k in self.traveler_list:
                result['traveler_list'].append(k.to_map() if k else None)
        result['traveler_standard'] = []
        if self.traveler_standard is not None:
            for k in self.traveler_standard:
                result['traveler_standard'].append(k.to_map() if k else None)
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.vehicle_budget is not None:
            result['vehicle_budget'] = self.vehicle_budget
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('budget') is not None:
            self.budget = m.get('budget')
        if m.get('budget_merge') is not None:
            self.budget_merge = m.get('budget_merge')
        if m.get('car_rule') is not None:
            temp_model = ApplyModifyRequestCarRule()
            self.car_rule = temp_model.from_map(m['car_rule'])
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('default_standard') is not None:
            temp_model = ApplyModifyRequestDefaultStandard()
            self.default_standard = temp_model.from_map(m['default_standard'])
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        self.external_traveler_list = []
        if m.get('external_traveler_list') is not None:
            for k in m.get('external_traveler_list'):
                temp_model = ApplyModifyRequestExternalTravelerList()
                self.external_traveler_list.append(temp_model.from_map(k))
        if m.get('external_traveler_standard') is not None:
            temp_model = ApplyModifyRequestExternalTravelerStandard()
            self.external_traveler_standard = temp_model.from_map(m['external_traveler_standard'])
        if m.get('flight_budget') is not None:
            self.flight_budget = m.get('flight_budget')
        if m.get('hotel_budget') is not None:
            self.hotel_budget = m.get('hotel_budget')
        if m.get('hotel_share') is not None:
            temp_model = ApplyModifyRequestHotelShare()
            self.hotel_share = temp_model.from_map(m['hotel_share'])
        self.itinerary_list = []
        if m.get('itinerary_list') is not None:
            for k in m.get('itinerary_list'):
                temp_model = ApplyModifyRequestItineraryList()
                self.itinerary_list.append(temp_model.from_map(k))
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        self.itinerary_set_list = []
        if m.get('itinerary_set_list') is not None:
            for k in m.get('itinerary_set_list'):
                temp_model = ApplyModifyRequestItinerarySetList()
                self.itinerary_set_list.append(temp_model.from_map(k))
        if m.get('limit_traveler') is not None:
            self.limit_traveler = m.get('limit_traveler')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('together_book_rule') is not None:
            self.together_book_rule = m.get('together_book_rule')
        if m.get('train_budget') is not None:
            self.train_budget = m.get('train_budget')
        self.traveler_list = []
        if m.get('traveler_list') is not None:
            for k in m.get('traveler_list'):
                temp_model = ApplyModifyRequestTravelerList()
                self.traveler_list.append(temp_model.from_map(k))
        self.traveler_standard = []
        if m.get('traveler_standard') is not None:
            for k in m.get('traveler_standard'):
                temp_model = ApplyModifyRequestTravelerStandard()
                self.traveler_standard.append(temp_model.from_map(k))
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('vehicle_budget') is not None:
            self.vehicle_budget = m.get('vehicle_budget')
        return self


class ApplyModifyShrinkRequest(TeaModel):
    def __init__(
        self,
        budget: int = None,
        budget_merge: int = None,
        car_rule_shrink: str = None,
        corp_name: str = None,
        default_standard_shrink: str = None,
        depart_id: str = None,
        depart_name: str = None,
        extend_field: str = None,
        external_traveler_list_shrink: str = None,
        external_traveler_standard_shrink: str = None,
        flight_budget: int = None,
        hotel_budget: int = None,
        hotel_share_shrink: str = None,
        itinerary_list_shrink: str = None,
        itinerary_rule: int = None,
        itinerary_set_list_shrink: str = None,
        limit_traveler: int = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        status: int = None,
        sub_corp_id: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
        thirdpart_depart_id: str = None,
        together_book_rule: int = None,
        train_budget: int = None,
        traveler_list_shrink: str = None,
        traveler_standard_shrink: str = None,
        trip_cause: str = None,
        trip_day: int = None,
        trip_title: str = None,
        union_no: str = None,
        user_id: str = None,
        user_name: str = None,
        vehicle_budget: int = None,
    ):
        self.budget = budget
        self.budget_merge = budget_merge
        self.car_rule_shrink = car_rule_shrink
        self.corp_name = corp_name
        self.default_standard_shrink = default_standard_shrink
        self.depart_id = depart_id
        self.depart_name = depart_name
        # 可将补充描述传入此字段，账单中将会体现此字段的值。可以用于企业的统计和对账
        self.extend_field = extend_field
        self.external_traveler_list_shrink = external_traveler_list_shrink
        self.external_traveler_standard_shrink = external_traveler_standard_shrink
        self.flight_budget = flight_budget
        self.hotel_budget = hotel_budget
        self.hotel_share_shrink = hotel_share_shrink
        self.itinerary_list_shrink = itinerary_list_shrink
        self.itinerary_rule = itinerary_rule
        self.itinerary_set_list_shrink = itinerary_set_list_shrink
        self.limit_traveler = limit_traveler
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.status = status
        # 子企业Id
        self.sub_corp_id = sub_corp_id
        # This parameter is required.
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.together_book_rule = together_book_rule
        self.train_budget = train_budget
        self.traveler_list_shrink = traveler_list_shrink
        self.traveler_standard_shrink = traveler_standard_shrink
        # This parameter is required.
        self.trip_cause = trip_cause
        self.trip_day = trip_day
        # This parameter is required.
        self.trip_title = trip_title
        self.union_no = union_no
        # This parameter is required.
        self.user_id = user_id
        self.user_name = user_name
        self.vehicle_budget = vehicle_budget

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.budget is not None:
            result['budget'] = self.budget
        if self.budget_merge is not None:
            result['budget_merge'] = self.budget_merge
        if self.car_rule_shrink is not None:
            result['car_rule'] = self.car_rule_shrink
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.default_standard_shrink is not None:
            result['default_standard'] = self.default_standard_shrink
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        if self.external_traveler_list_shrink is not None:
            result['external_traveler_list'] = self.external_traveler_list_shrink
        if self.external_traveler_standard_shrink is not None:
            result['external_traveler_standard'] = self.external_traveler_standard_shrink
        if self.flight_budget is not None:
            result['flight_budget'] = self.flight_budget
        if self.hotel_budget is not None:
            result['hotel_budget'] = self.hotel_budget
        if self.hotel_share_shrink is not None:
            result['hotel_share'] = self.hotel_share_shrink
        if self.itinerary_list_shrink is not None:
            result['itinerary_list'] = self.itinerary_list_shrink
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        if self.itinerary_set_list_shrink is not None:
            result['itinerary_set_list'] = self.itinerary_set_list_shrink
        if self.limit_traveler is not None:
            result['limit_traveler'] = self.limit_traveler
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.together_book_rule is not None:
            result['together_book_rule'] = self.together_book_rule
        if self.train_budget is not None:
            result['train_budget'] = self.train_budget
        if self.traveler_list_shrink is not None:
            result['traveler_list'] = self.traveler_list_shrink
        if self.traveler_standard_shrink is not None:
            result['traveler_standard'] = self.traveler_standard_shrink
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.vehicle_budget is not None:
            result['vehicle_budget'] = self.vehicle_budget
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('budget') is not None:
            self.budget = m.get('budget')
        if m.get('budget_merge') is not None:
            self.budget_merge = m.get('budget_merge')
        if m.get('car_rule') is not None:
            self.car_rule_shrink = m.get('car_rule')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('default_standard') is not None:
            self.default_standard_shrink = m.get('default_standard')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        if m.get('external_traveler_list') is not None:
            self.external_traveler_list_shrink = m.get('external_traveler_list')
        if m.get('external_traveler_standard') is not None:
            self.external_traveler_standard_shrink = m.get('external_traveler_standard')
        if m.get('flight_budget') is not None:
            self.flight_budget = m.get('flight_budget')
        if m.get('hotel_budget') is not None:
            self.hotel_budget = m.get('hotel_budget')
        if m.get('hotel_share') is not None:
            self.hotel_share_shrink = m.get('hotel_share')
        if m.get('itinerary_list') is not None:
            self.itinerary_list_shrink = m.get('itinerary_list')
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        if m.get('itinerary_set_list') is not None:
            self.itinerary_set_list_shrink = m.get('itinerary_set_list')
        if m.get('limit_traveler') is not None:
            self.limit_traveler = m.get('limit_traveler')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('together_book_rule') is not None:
            self.together_book_rule = m.get('together_book_rule')
        if m.get('train_budget') is not None:
            self.train_budget = m.get('train_budget')
        if m.get('traveler_list') is not None:
            self.traveler_list_shrink = m.get('traveler_list')
        if m.get('traveler_standard') is not None:
            self.traveler_standard_shrink = m.get('traveler_standard')
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('vehicle_budget') is not None:
            self.vehicle_budget = m.get('vehicle_budget')
        return self


class ApplyModifyResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
    ):
        self.apply_id = apply_id
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        return self


class ApplyModifyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: ApplyModifyResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = ApplyModifyResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyModifyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyModifyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyModifyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyQueryRequest(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        apply_show_id: str = None,
        sub_corp_id: str = None,
        thirdpart_apply_id: str = None,
        type: int = None,
    ):
        self.apply_id = apply_id
        self.apply_show_id = apply_show_id
        self.sub_corp_id = sub_corp_id
        self.thirdpart_apply_id = thirdpart_apply_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.apply_show_id is not None:
            result['apply_show_id'] = self.apply_show_id
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('apply_show_id') is not None:
            self.apply_show_id = m.get('apply_show_id')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ApplyQueryResponseBodyModuleApproverList(TeaModel):
    def __init__(
        self,
        note: str = None,
        operate_time: str = None,
        order: int = None,
        status: int = None,
        status_desc: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.note = note
        self.operate_time = operate_time
        self.order = order
        self.status = status
        self.status_desc = status_desc
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.note is not None:
            result['note'] = self.note
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.order is not None:
            result['order'] = self.order
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('note') is not None:
            self.note = m.get('note')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyQueryResponseBodyModuleCarRule(TeaModel):
    def __init__(
        self,
        scenario_template_id: str = None,
        scenario_template_name: str = None,
    ):
        self.scenario_template_id = scenario_template_id
        self.scenario_template_name = scenario_template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.scenario_template_id is not None:
            result['scenario_template_id'] = self.scenario_template_id
        if self.scenario_template_name is not None:
            result['scenario_template_name'] = self.scenario_template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('scenario_template_id') is not None:
            self.scenario_template_id = m.get('scenario_template_id')
        if m.get('scenario_template_name') is not None:
            self.scenario_template_name = m.get('scenario_template_name')
        return self


class ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyQueryResponseBodyModuleExternalTravelerListHotelIntlCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyQueryResponseBodyModuleExternalTravelerList(TeaModel):
    def __init__(
        self,
        attribute: str = None,
        business_discount: int = None,
        cost_center_name: str = None,
        depart_id: str = None,
        economy_discount: int = None,
        external_user_id: str = None,
        first_discount: int = None,
        flight_cabins: str = None,
        flight_intl_rule_code: int = None,
        flight_rule_code: int = None,
        hotel_citys: List[ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys] = None,
        hotel_intl_citys: List[ApplyQueryResponseBodyModuleExternalTravelerListHotelIntlCitys] = None,
        hotel_intl_rule_code: int = None,
        hotel_rule_code: int = None,
        invoice_name: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        premium_economy_discount: int = None,
        project_code: str = None,
        project_title: str = None,
        reserve_type: int = None,
        third_part_invoice_id: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_depart_id: str = None,
        train_rule_code: int = None,
        train_seats: str = None,
        user_name: str = None,
    ):
        self.attribute = attribute
        self.business_discount = business_discount
        self.cost_center_name = cost_center_name
        self.depart_id = depart_id
        self.economy_discount = economy_discount
        self.external_user_id = external_user_id
        self.first_discount = first_discount
        self.flight_cabins = flight_cabins
        self.flight_intl_rule_code = flight_intl_rule_code
        self.flight_rule_code = flight_rule_code
        self.hotel_citys = hotel_citys
        self.hotel_intl_citys = hotel_intl_citys
        self.hotel_intl_rule_code = hotel_intl_rule_code
        self.hotel_rule_code = hotel_rule_code
        self.invoice_name = invoice_name
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.premium_economy_discount = premium_economy_discount
        self.project_code = project_code
        self.project_title = project_title
        self.reserve_type = reserve_type
        self.third_part_invoice_id = third_part_invoice_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.train_rule_code = train_rule_code
        self.train_seats = train_seats
        self.user_name = user_name

    def validate(self):
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()
        if self.hotel_intl_citys:
            for k in self.hotel_intl_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.external_user_id is not None:
            result['external_user_id'] = self.external_user_id
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        if self.flight_intl_rule_code is not None:
            result['flight_intl_rule_code'] = self.flight_intl_rule_code
        if self.flight_rule_code is not None:
            result['flight_rule_code'] = self.flight_rule_code
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        result['hotel_intl_citys'] = []
        if self.hotel_intl_citys is not None:
            for k in self.hotel_intl_citys:
                result['hotel_intl_citys'].append(k.to_map() if k else None)
        if self.hotel_intl_rule_code is not None:
            result['hotel_intl_rule_code'] = self.hotel_intl_rule_code
        if self.hotel_rule_code is not None:
            result['hotel_rule_code'] = self.hotel_rule_code
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.train_rule_code is not None:
            result['train_rule_code'] = self.train_rule_code
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('external_user_id') is not None:
            self.external_user_id = m.get('external_user_id')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        if m.get('flight_intl_rule_code') is not None:
            self.flight_intl_rule_code = m.get('flight_intl_rule_code')
        if m.get('flight_rule_code') is not None:
            self.flight_rule_code = m.get('flight_rule_code')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyQueryResponseBodyModuleExternalTravelerListHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        self.hotel_intl_citys = []
        if m.get('hotel_intl_citys') is not None:
            for k in m.get('hotel_intl_citys'):
                temp_model = ApplyQueryResponseBodyModuleExternalTravelerListHotelIntlCitys()
                self.hotel_intl_citys.append(temp_model.from_map(k))
        if m.get('hotel_intl_rule_code') is not None:
            self.hotel_intl_rule_code = m.get('hotel_intl_rule_code')
        if m.get('hotel_rule_code') is not None:
            self.hotel_rule_code = m.get('hotel_rule_code')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('train_rule_code') is not None:
            self.train_rule_code = m.get('train_rule_code')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyQueryResponseBodyModuleHotelShare(TeaModel):
    def __init__(
        self,
        param: str = None,
        type: str = None,
    ):
        self.param = param
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.param is not None:
            result['param'] = self.param
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('param') is not None:
            self.param = m.get('param')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class ApplyQueryResponseBodyModuleItineraryListItineraryTravelStandard(TeaModel):
    def __init__(
        self,
        hotel_available_nights_per_day: int = None,
    ):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyQueryResponseBodyModuleItineraryList(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_date: str = None,
        attribute: str = None,
        cost_center_name: str = None,
        dep_city: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        invoice_name: str = None,
        itinerary_id: str = None,
        itinerary_travel_standard: ApplyQueryResponseBodyModuleItineraryListItineraryTravelStandard = None,
        project_code: str = None,
        project_title: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_invoice_id: str = None,
        thirdpart_itinerary_id: str = None,
        traffic_type: int = None,
        trip_way: int = None,
    ):
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_date = arr_date
        self.attribute = attribute
        self.cost_center_name = cost_center_name
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        self.dep_date = dep_date
        self.invoice_name = invoice_name
        self.itinerary_id = itinerary_id
        self.itinerary_travel_standard = itinerary_travel_standard
        self.project_code = project_code
        self.project_title = project_title
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_invoice_id = thirdpart_invoice_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.traffic_type = traffic_type
        self.trip_way = trip_way

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_invoice_id is not None:
            result['thirdpart_invoice_id'] = self.thirdpart_invoice_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        if self.trip_way is not None:
            result['trip_way'] = self.trip_way
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyQueryResponseBodyModuleItineraryListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_invoice_id') is not None:
            self.thirdpart_invoice_id = m.get('thirdpart_invoice_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        if m.get('trip_way') is not None:
            self.trip_way = m.get('trip_way')
        return self


class ApplyQueryResponseBodyModuleItinerarySetListItineraryTravelStandard(TeaModel):
    def __init__(
        self,
        hotel_available_nights_per_day: int = None,
    ):
        self.hotel_available_nights_per_day = hotel_available_nights_per_day

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_available_nights_per_day is not None:
            result['hotel_available_nights_per_day'] = self.hotel_available_nights_per_day
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hotel_available_nights_per_day') is not None:
            self.hotel_available_nights_per_day = m.get('hotel_available_nights_per_day')
        return self


class ApplyQueryResponseBodyModuleItinerarySetList(TeaModel):
    def __init__(
        self,
        arr_date: str = None,
        attribute: str = None,
        city_code_set: str = None,
        city_set: str = None,
        cost_center_name: str = None,
        dep_date: str = None,
        invoice_name: str = None,
        itinerary_id: str = None,
        itinerary_travel_standard: ApplyQueryResponseBodyModuleItinerarySetListItineraryTravelStandard = None,
        project_code: str = None,
        project_title: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_invoice_id: str = None,
        thirdpart_itinerary_id: str = None,
        traffic_type: int = None,
    ):
        self.arr_date = arr_date
        self.attribute = attribute
        self.city_code_set = city_code_set
        self.city_set = city_set
        self.cost_center_name = cost_center_name
        self.dep_date = dep_date
        self.invoice_name = invoice_name
        self.itinerary_id = itinerary_id
        self.itinerary_travel_standard = itinerary_travel_standard
        self.project_code = project_code
        self.project_title = project_title
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_invoice_id = thirdpart_invoice_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.traffic_type = traffic_type

    def validate(self):
        if self.itinerary_travel_standard:
            self.itinerary_travel_standard.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.city_code_set is not None:
            result['city_code_set'] = self.city_code_set
        if self.city_set is not None:
            result['city_set'] = self.city_set
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.itinerary_travel_standard is not None:
            result['itinerary_travel_standard'] = self.itinerary_travel_standard.to_map()
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_invoice_id is not None:
            result['thirdpart_invoice_id'] = self.thirdpart_invoice_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('city_code_set') is not None:
            self.city_code_set = m.get('city_code_set')
        if m.get('city_set') is not None:
            self.city_set = m.get('city_set')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('itinerary_travel_standard') is not None:
            temp_model = ApplyQueryResponseBodyModuleItinerarySetListItineraryTravelStandard()
            self.itinerary_travel_standard = temp_model.from_map(m['itinerary_travel_standard'])
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_invoice_id') is not None:
            self.thirdpart_invoice_id = m.get('thirdpart_invoice_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        return self


class ApplyQueryResponseBodyModuleTravelerListCarCitySet(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
    ):
        self.city_code = city_code
        self.city_name = city_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        return self


class ApplyQueryResponseBodyModuleTravelerListHotelCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyQueryResponseBodyModuleTravelerListHotelIntlCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        fee: int = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.fee = fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.fee is not None:
            result['fee'] = self.fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        return self


class ApplyQueryResponseBodyModuleTravelerList(TeaModel):
    def __init__(
        self,
        attribute: str = None,
        business_discount: int = None,
        car_city_set: List[ApplyQueryResponseBodyModuleTravelerListCarCitySet] = None,
        cost_center_name: str = None,
        depart_id: str = None,
        economy_discount: int = None,
        first_discount: int = None,
        flight_cabins: str = None,
        flight_intl_rule_code: int = None,
        flight_rule_code: int = None,
        hotel_citys: List[ApplyQueryResponseBodyModuleTravelerListHotelCitys] = None,
        hotel_intl_citys: List[ApplyQueryResponseBodyModuleTravelerListHotelIntlCitys] = None,
        hotel_intl_rule_code: int = None,
        hotel_rule_code: int = None,
        invoice_name: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        premium_economy_discount: int = None,
        project_code: str = None,
        project_title: str = None,
        reserve_type: int = None,
        third_part_invoice_id: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_depart_id: str = None,
        train_rule_code: int = None,
        train_seats: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.attribute = attribute
        self.business_discount = business_discount
        self.car_city_set = car_city_set
        self.cost_center_name = cost_center_name
        self.depart_id = depart_id
        self.economy_discount = economy_discount
        self.first_discount = first_discount
        self.flight_cabins = flight_cabins
        self.flight_intl_rule_code = flight_intl_rule_code
        self.flight_rule_code = flight_rule_code
        self.hotel_citys = hotel_citys
        self.hotel_intl_citys = hotel_intl_citys
        self.hotel_intl_rule_code = hotel_intl_rule_code
        self.hotel_rule_code = hotel_rule_code
        self.invoice_name = invoice_name
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.premium_economy_discount = premium_economy_discount
        self.project_code = project_code
        self.project_title = project_title
        self.reserve_type = reserve_type
        self.third_part_invoice_id = third_part_invoice_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.train_rule_code = train_rule_code
        self.train_seats = train_seats
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.car_city_set:
            for k in self.car_city_set:
                if k:
                    k.validate()
        if self.hotel_citys:
            for k in self.hotel_citys:
                if k:
                    k.validate()
        if self.hotel_intl_citys:
            for k in self.hotel_intl_citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attribute is not None:
            result['attribute'] = self.attribute
        if self.business_discount is not None:
            result['business_discount'] = self.business_discount
        result['car_city_set'] = []
        if self.car_city_set is not None:
            for k in self.car_city_set:
                result['car_city_set'].append(k.to_map() if k else None)
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.economy_discount is not None:
            result['economy_discount'] = self.economy_discount
        if self.first_discount is not None:
            result['first_discount'] = self.first_discount
        if self.flight_cabins is not None:
            result['flight_cabins'] = self.flight_cabins
        if self.flight_intl_rule_code is not None:
            result['flight_intl_rule_code'] = self.flight_intl_rule_code
        if self.flight_rule_code is not None:
            result['flight_rule_code'] = self.flight_rule_code
        result['hotel_citys'] = []
        if self.hotel_citys is not None:
            for k in self.hotel_citys:
                result['hotel_citys'].append(k.to_map() if k else None)
        result['hotel_intl_citys'] = []
        if self.hotel_intl_citys is not None:
            for k in self.hotel_intl_citys:
                result['hotel_intl_citys'].append(k.to_map() if k else None)
        if self.hotel_intl_rule_code is not None:
            result['hotel_intl_rule_code'] = self.hotel_intl_rule_code
        if self.hotel_rule_code is not None:
            result['hotel_rule_code'] = self.hotel_rule_code
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.premium_economy_discount is not None:
            result['premium_economy_discount'] = self.premium_economy_discount
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.reserve_type is not None:
            result['reserve_type'] = self.reserve_type
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.train_rule_code is not None:
            result['train_rule_code'] = self.train_rule_code
        if self.train_seats is not None:
            result['train_seats'] = self.train_seats
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('attribute') is not None:
            self.attribute = m.get('attribute')
        if m.get('business_discount') is not None:
            self.business_discount = m.get('business_discount')
        self.car_city_set = []
        if m.get('car_city_set') is not None:
            for k in m.get('car_city_set'):
                temp_model = ApplyQueryResponseBodyModuleTravelerListCarCitySet()
                self.car_city_set.append(temp_model.from_map(k))
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('economy_discount') is not None:
            self.economy_discount = m.get('economy_discount')
        if m.get('first_discount') is not None:
            self.first_discount = m.get('first_discount')
        if m.get('flight_cabins') is not None:
            self.flight_cabins = m.get('flight_cabins')
        if m.get('flight_intl_rule_code') is not None:
            self.flight_intl_rule_code = m.get('flight_intl_rule_code')
        if m.get('flight_rule_code') is not None:
            self.flight_rule_code = m.get('flight_rule_code')
        self.hotel_citys = []
        if m.get('hotel_citys') is not None:
            for k in m.get('hotel_citys'):
                temp_model = ApplyQueryResponseBodyModuleTravelerListHotelCitys()
                self.hotel_citys.append(temp_model.from_map(k))
        self.hotel_intl_citys = []
        if m.get('hotel_intl_citys') is not None:
            for k in m.get('hotel_intl_citys'):
                temp_model = ApplyQueryResponseBodyModuleTravelerListHotelIntlCitys()
                self.hotel_intl_citys.append(temp_model.from_map(k))
        if m.get('hotel_intl_rule_code') is not None:
            self.hotel_intl_rule_code = m.get('hotel_intl_rule_code')
        if m.get('hotel_rule_code') is not None:
            self.hotel_rule_code = m.get('hotel_rule_code')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('premium_economy_discount') is not None:
            self.premium_economy_discount = m.get('premium_economy_discount')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('reserve_type') is not None:
            self.reserve_type = m.get('reserve_type')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('train_rule_code') is not None:
            self.train_rule_code = m.get('train_rule_code')
        if m.get('train_seats') is not None:
            self.train_seats = m.get('train_seats')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_show_id: str = None,
        approver_list: List[ApplyQueryResponseBodyModuleApproverList] = None,
        budget: int = None,
        budget_merge: int = None,
        car_rule: ApplyQueryResponseBodyModuleCarRule = None,
        corp_id: str = None,
        corp_name: str = None,
        depart_id: str = None,
        depart_name: str = None,
        extend_field: str = None,
        external_traveler_list: List[ApplyQueryResponseBodyModuleExternalTravelerList] = None,
        flight_budget: int = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        hotel_budget: int = None,
        hotel_share: ApplyQueryResponseBodyModuleHotelShare = None,
        id: int = None,
        itinerary_list: List[ApplyQueryResponseBodyModuleItineraryList] = None,
        itinerary_rule: int = None,
        itinerary_set_list: List[ApplyQueryResponseBodyModuleItinerarySetList] = None,
        limit_traveler: int = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        status: int = None,
        status_desc: str = None,
        thirdpart_business_id: str = None,
        thirdpart_id: str = None,
        together_book_rule: int = None,
        train_budget: int = None,
        traveler_list: List[ApplyQueryResponseBodyModuleTravelerList] = None,
        trip_cause: str = None,
        trip_day: int = None,
        trip_title: str = None,
        type: int = None,
        union_no: str = None,
        user_id: str = None,
        user_name: str = None,
        vehicle_budget: int = None,
    ):
        self.apply_show_id = apply_show_id
        self.approver_list = approver_list
        self.budget = budget
        self.budget_merge = budget_merge
        self.car_rule = car_rule
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.depart_id = depart_id
        self.depart_name = depart_name
        # 补充描述，账单中将会体现此字段的值。可以用于企业的统计和对账
        self.extend_field = extend_field
        self.external_traveler_list = external_traveler_list
        self.flight_budget = flight_budget
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.hotel_budget = hotel_budget
        self.hotel_share = hotel_share
        self.id = id
        self.itinerary_list = itinerary_list
        self.itinerary_rule = itinerary_rule
        self.itinerary_set_list = itinerary_set_list
        self.limit_traveler = limit_traveler
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.status = status
        self.status_desc = status_desc
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_id = thirdpart_id
        self.together_book_rule = together_book_rule
        self.train_budget = train_budget
        self.traveler_list = traveler_list
        self.trip_cause = trip_cause
        self.trip_day = trip_day
        self.trip_title = trip_title
        self.type = type
        self.union_no = union_no
        self.user_id = user_id
        self.user_name = user_name
        self.vehicle_budget = vehicle_budget

    def validate(self):
        if self.approver_list:
            for k in self.approver_list:
                if k:
                    k.validate()
        if self.car_rule:
            self.car_rule.validate()
        if self.external_traveler_list:
            for k in self.external_traveler_list:
                if k:
                    k.validate()
        if self.hotel_share:
            self.hotel_share.validate()
        if self.itinerary_list:
            for k in self.itinerary_list:
                if k:
                    k.validate()
        if self.itinerary_set_list:
            for k in self.itinerary_set_list:
                if k:
                    k.validate()
        if self.traveler_list:
            for k in self.traveler_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_show_id is not None:
            result['apply_show_id'] = self.apply_show_id
        result['approver_list'] = []
        if self.approver_list is not None:
            for k in self.approver_list:
                result['approver_list'].append(k.to_map() if k else None)
        if self.budget is not None:
            result['budget'] = self.budget
        if self.budget_merge is not None:
            result['budget_merge'] = self.budget_merge
        if self.car_rule is not None:
            result['car_rule'] = self.car_rule.to_map()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        result['external_traveler_list'] = []
        if self.external_traveler_list is not None:
            for k in self.external_traveler_list:
                result['external_traveler_list'].append(k.to_map() if k else None)
        if self.flight_budget is not None:
            result['flight_budget'] = self.flight_budget
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.hotel_budget is not None:
            result['hotel_budget'] = self.hotel_budget
        if self.hotel_share is not None:
            result['hotel_share'] = self.hotel_share.to_map()
        if self.id is not None:
            result['id'] = self.id
        result['itinerary_list'] = []
        if self.itinerary_list is not None:
            for k in self.itinerary_list:
                result['itinerary_list'].append(k.to_map() if k else None)
        if self.itinerary_rule is not None:
            result['itinerary_rule'] = self.itinerary_rule
        result['itinerary_set_list'] = []
        if self.itinerary_set_list is not None:
            for k in self.itinerary_set_list:
                result['itinerary_set_list'].append(k.to_map() if k else None)
        if self.limit_traveler is not None:
            result['limit_traveler'] = self.limit_traveler
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.together_book_rule is not None:
            result['together_book_rule'] = self.together_book_rule
        if self.train_budget is not None:
            result['train_budget'] = self.train_budget
        result['traveler_list'] = []
        if self.traveler_list is not None:
            for k in self.traveler_list:
                result['traveler_list'].append(k.to_map() if k else None)
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_day is not None:
            result['trip_day'] = self.trip_day
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.type is not None:
            result['type'] = self.type
        if self.union_no is not None:
            result['union_no'] = self.union_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.vehicle_budget is not None:
            result['vehicle_budget'] = self.vehicle_budget
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_show_id') is not None:
            self.apply_show_id = m.get('apply_show_id')
        self.approver_list = []
        if m.get('approver_list') is not None:
            for k in m.get('approver_list'):
                temp_model = ApplyQueryResponseBodyModuleApproverList()
                self.approver_list.append(temp_model.from_map(k))
        if m.get('budget') is not None:
            self.budget = m.get('budget')
        if m.get('budget_merge') is not None:
            self.budget_merge = m.get('budget_merge')
        if m.get('car_rule') is not None:
            temp_model = ApplyQueryResponseBodyModuleCarRule()
            self.car_rule = temp_model.from_map(m['car_rule'])
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        self.external_traveler_list = []
        if m.get('external_traveler_list') is not None:
            for k in m.get('external_traveler_list'):
                temp_model = ApplyQueryResponseBodyModuleExternalTravelerList()
                self.external_traveler_list.append(temp_model.from_map(k))
        if m.get('flight_budget') is not None:
            self.flight_budget = m.get('flight_budget')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('hotel_budget') is not None:
            self.hotel_budget = m.get('hotel_budget')
        if m.get('hotel_share') is not None:
            temp_model = ApplyQueryResponseBodyModuleHotelShare()
            self.hotel_share = temp_model.from_map(m['hotel_share'])
        if m.get('id') is not None:
            self.id = m.get('id')
        self.itinerary_list = []
        if m.get('itinerary_list') is not None:
            for k in m.get('itinerary_list'):
                temp_model = ApplyQueryResponseBodyModuleItineraryList()
                self.itinerary_list.append(temp_model.from_map(k))
        if m.get('itinerary_rule') is not None:
            self.itinerary_rule = m.get('itinerary_rule')
        self.itinerary_set_list = []
        if m.get('itinerary_set_list') is not None:
            for k in m.get('itinerary_set_list'):
                temp_model = ApplyQueryResponseBodyModuleItinerarySetList()
                self.itinerary_set_list.append(temp_model.from_map(k))
        if m.get('limit_traveler') is not None:
            self.limit_traveler = m.get('limit_traveler')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('together_book_rule') is not None:
            self.together_book_rule = m.get('together_book_rule')
        if m.get('train_budget') is not None:
            self.train_budget = m.get('train_budget')
        self.traveler_list = []
        if m.get('traveler_list') is not None:
            for k in m.get('traveler_list'):
                temp_model = ApplyQueryResponseBodyModuleTravelerList()
                self.traveler_list.append(temp_model.from_map(k))
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_day') is not None:
            self.trip_day = m.get('trip_day')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('union_no') is not None:
            self.union_no = m.get('union_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('vehicle_budget') is not None:
            self.vehicle_budget = m.get('vehicle_budget')
        return self


class ApplyQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: ApplyQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = ApplyQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyTripTaskExecuteHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ApplyTripTaskExecuteRequest(TeaModel):
    def __init__(
        self,
        action_from: str = None,
        comment: str = None,
        task_action: str = None,
        task_id: int = None,
        user_id: str = None,
        user_name: str = None,
    ):
        # This parameter is required.
        self.action_from = action_from
        self.comment = comment
        # This parameter is required.
        self.task_action = task_action
        # This parameter is required.
        self.task_id = task_id
        # This parameter is required.
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.action_from is not None:
            result['action_from'] = self.action_from
        if self.comment is not None:
            result['comment'] = self.comment
        if self.task_action is not None:
            result['task_action'] = self.task_action
        if self.task_id is not None:
            result['task_id'] = self.task_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('action_from') is not None:
            self.action_from = m.get('action_from')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('task_action') is not None:
            self.task_action = m.get('task_action')
        if m.get('task_id') is not None:
            self.task_id = m.get('task_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class ApplyTripTaskExecuteResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ApplyTripTaskExecuteResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyTripTaskExecuteResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyTripTaskExecuteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BaseCityInfoSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_access_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_access_token = x_acs_btrip_access_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_access_token is not None:
            result['x-acs-btrip-access-token'] = self.x_acs_btrip_access_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-access-token') is not None:
            self.x_acs_btrip_access_token = m.get('x-acs-btrip-access-token')
        return self


class BaseCityInfoSearchRequest(TeaModel):
    def __init__(
        self,
        keyword: str = None,
        region: str = None,
    ):
        # This parameter is required.
        self.keyword = keyword
        # This parameter is required.
        self.region = region

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.keyword is not None:
            result['keyword'] = self.keyword
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('keyword') is not None:
            self.keyword = m.get('keyword')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class BaseCityInfoSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        code: str = None,
        name: str = None,
        name_tree: str = None,
        region: str = None,
    ):
        self.code = code
        self.name = name
        self.name_tree = name_tree
        self.region = region

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.name is not None:
            result['name'] = self.name
        if self.name_tree is not None:
            result['nameTree'] = self.name_tree
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('nameTree') is not None:
            self.name_tree = m.get('nameTree')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class BaseCityInfoSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[BaseCityInfoSearchResponseBodyModule] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = BaseCityInfoSearchResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class BaseCityInfoSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BaseCityInfoSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BaseCityInfoSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BtripBillInfoAdjustHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class BtripBillInfoAdjustRequest(TeaModel):
    def __init__(
        self,
        primary_id: int = None,
        third_part_cost_center_id: str = None,
        third_part_department_id: str = None,
        third_part_invoice_id: str = None,
        third_part_project_id: str = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.primary_id = primary_id
        self.third_part_cost_center_id = third_part_cost_center_id
        self.third_part_department_id = third_part_department_id
        self.third_part_invoice_id = third_part_invoice_id
        self.third_part_project_id = third_part_project_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.third_part_cost_center_id is not None:
            result['third_part_cost_center_id'] = self.third_part_cost_center_id
        if self.third_part_department_id is not None:
            result['third_part_department_id'] = self.third_part_department_id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.third_part_project_id is not None:
            result['third_part_project_id'] = self.third_part_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('third_part_cost_center_id') is not None:
            self.third_part_cost_center_id = m.get('third_part_cost_center_id')
        if m.get('third_part_department_id') is not None:
            self.third_part_department_id = m.get('third_part_department_id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('third_part_project_id') is not None:
            self.third_part_project_id = m.get('third_part_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class BtripBillInfoAdjustResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class BtripBillInfoAdjustResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BtripBillInfoAdjustResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BtripBillInfoAdjustResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarApplyAddHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarApplyAddRequestTravelerStandardCarCitySet(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
    ):
        # This parameter is required.
        self.city_code = city_code
        # This parameter is required.
        self.city_name = city_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        return self


class CarApplyAddRequestTravelerStandard(TeaModel):
    def __init__(
        self,
        car_city_set: List[CarApplyAddRequestTravelerStandardCarCitySet] = None,
        user_id: str = None,
    ):
        self.car_city_set = car_city_set
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        if self.car_city_set:
            for k in self.car_city_set:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['car_city_set'] = []
        if self.car_city_set is not None:
            for k in self.car_city_set:
                result['car_city_set'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.car_city_set = []
        if m.get('car_city_set') is not None:
            for k in m.get('car_city_set'):
                temp_model = CarApplyAddRequestTravelerStandardCarCitySet()
                self.car_city_set.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarApplyAddRequest(TeaModel):
    def __init__(
        self,
        cause: str = None,
        city: str = None,
        city_code_set: str = None,
        date: str = None,
        finished_date: str = None,
        project_code: str = None,
        project_name: str = None,
        status: int = None,
        third_part_apply_id: str = None,
        third_part_cost_center_id: str = None,
        third_part_invoice_id: str = None,
        times_total: int = None,
        times_type: int = None,
        times_used: int = None,
        title: str = None,
        traveler_standard: List[CarApplyAddRequestTravelerStandard] = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.cause = cause
        # This parameter is required.
        self.city = city
        self.city_code_set = city_code_set
        # This parameter is required.
        self.date = date
        self.finished_date = finished_date
        self.project_code = project_code
        self.project_name = project_name
        # This parameter is required.
        self.status = status
        # This parameter is required.
        self.third_part_apply_id = third_part_apply_id
        self.third_part_cost_center_id = third_part_cost_center_id
        self.third_part_invoice_id = third_part_invoice_id
        # This parameter is required.
        self.times_total = times_total
        # This parameter is required.
        self.times_type = times_type
        # This parameter is required.
        self.times_used = times_used
        # This parameter is required.
        self.title = title
        self.traveler_standard = traveler_standard
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        if self.traveler_standard:
            for k in self.traveler_standard:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cause is not None:
            result['cause'] = self.cause
        if self.city is not None:
            result['city'] = self.city
        if self.city_code_set is not None:
            result['city_code_set'] = self.city_code_set
        if self.date is not None:
            result['date'] = self.date
        if self.finished_date is not None:
            result['finished_date'] = self.finished_date
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.status is not None:
            result['status'] = self.status
        if self.third_part_apply_id is not None:
            result['third_part_apply_id'] = self.third_part_apply_id
        if self.third_part_cost_center_id is not None:
            result['third_part_cost_center_id'] = self.third_part_cost_center_id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.times_total is not None:
            result['times_total'] = self.times_total
        if self.times_type is not None:
            result['times_type'] = self.times_type
        if self.times_used is not None:
            result['times_used'] = self.times_used
        if self.title is not None:
            result['title'] = self.title
        result['traveler_standard'] = []
        if self.traveler_standard is not None:
            for k in self.traveler_standard:
                result['traveler_standard'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cause') is not None:
            self.cause = m.get('cause')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('city_code_set') is not None:
            self.city_code_set = m.get('city_code_set')
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('finished_date') is not None:
            self.finished_date = m.get('finished_date')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_part_apply_id') is not None:
            self.third_part_apply_id = m.get('third_part_apply_id')
        if m.get('third_part_cost_center_id') is not None:
            self.third_part_cost_center_id = m.get('third_part_cost_center_id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('times_total') is not None:
            self.times_total = m.get('times_total')
        if m.get('times_type') is not None:
            self.times_type = m.get('times_type')
        if m.get('times_used') is not None:
            self.times_used = m.get('times_used')
        if m.get('title') is not None:
            self.title = m.get('title')
        self.traveler_standard = []
        if m.get('traveler_standard') is not None:
            for k in m.get('traveler_standard'):
                temp_model = CarApplyAddRequestTravelerStandard()
                self.traveler_standard.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarApplyAddShrinkRequest(TeaModel):
    def __init__(
        self,
        cause: str = None,
        city: str = None,
        city_code_set: str = None,
        date: str = None,
        finished_date: str = None,
        project_code: str = None,
        project_name: str = None,
        status: int = None,
        third_part_apply_id: str = None,
        third_part_cost_center_id: str = None,
        third_part_invoice_id: str = None,
        times_total: int = None,
        times_type: int = None,
        times_used: int = None,
        title: str = None,
        traveler_standard_shrink: str = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.cause = cause
        # This parameter is required.
        self.city = city
        self.city_code_set = city_code_set
        # This parameter is required.
        self.date = date
        self.finished_date = finished_date
        self.project_code = project_code
        self.project_name = project_name
        # This parameter is required.
        self.status = status
        # This parameter is required.
        self.third_part_apply_id = third_part_apply_id
        self.third_part_cost_center_id = third_part_cost_center_id
        self.third_part_invoice_id = third_part_invoice_id
        # This parameter is required.
        self.times_total = times_total
        # This parameter is required.
        self.times_type = times_type
        # This parameter is required.
        self.times_used = times_used
        # This parameter is required.
        self.title = title
        self.traveler_standard_shrink = traveler_standard_shrink
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cause is not None:
            result['cause'] = self.cause
        if self.city is not None:
            result['city'] = self.city
        if self.city_code_set is not None:
            result['city_code_set'] = self.city_code_set
        if self.date is not None:
            result['date'] = self.date
        if self.finished_date is not None:
            result['finished_date'] = self.finished_date
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.status is not None:
            result['status'] = self.status
        if self.third_part_apply_id is not None:
            result['third_part_apply_id'] = self.third_part_apply_id
        if self.third_part_cost_center_id is not None:
            result['third_part_cost_center_id'] = self.third_part_cost_center_id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.times_total is not None:
            result['times_total'] = self.times_total
        if self.times_type is not None:
            result['times_type'] = self.times_type
        if self.times_used is not None:
            result['times_used'] = self.times_used
        if self.title is not None:
            result['title'] = self.title
        if self.traveler_standard_shrink is not None:
            result['traveler_standard'] = self.traveler_standard_shrink
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cause') is not None:
            self.cause = m.get('cause')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('city_code_set') is not None:
            self.city_code_set = m.get('city_code_set')
        if m.get('date') is not None:
            self.date = m.get('date')
        if m.get('finished_date') is not None:
            self.finished_date = m.get('finished_date')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_part_apply_id') is not None:
            self.third_part_apply_id = m.get('third_part_apply_id')
        if m.get('third_part_cost_center_id') is not None:
            self.third_part_cost_center_id = m.get('third_part_cost_center_id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('times_total') is not None:
            self.times_total = m.get('times_total')
        if m.get('times_type') is not None:
            self.times_type = m.get('times_type')
        if m.get('times_used') is not None:
            self.times_used = m.get('times_used')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('traveler_standard') is not None:
            self.traveler_standard_shrink = m.get('traveler_standard')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarApplyAddResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: int = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarApplyAddResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CarApplyAddResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarApplyAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarApplyModifyHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarApplyModifyRequest(TeaModel):
    def __init__(
        self,
        operate_time: str = None,
        remark: str = None,
        status: int = None,
        third_part_apply_id: str = None,
        user_id: str = None,
    ):
        self.operate_time = operate_time
        self.remark = remark
        # This parameter is required.
        self.status = status
        # This parameter is required.
        self.third_part_apply_id = third_part_apply_id
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.remark is not None:
            result['remark'] = self.remark
        if self.status is not None:
            result['status'] = self.status
        if self.third_part_apply_id is not None:
            result['third_part_apply_id'] = self.third_part_apply_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_part_apply_id') is not None:
            self.third_part_apply_id = m.get('third_part_apply_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarApplyModifyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarApplyModifyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CarApplyModifyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarApplyModifyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarApplyQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarApplyQueryRequest(TeaModel):
    def __init__(
        self,
        created_end_at: str = None,
        created_start_at: str = None,
        page_number: int = None,
        page_size: int = None,
        third_part_apply_id: str = None,
        user_id: str = None,
    ):
        self.created_end_at = created_end_at
        self.created_start_at = created_start_at
        self.page_number = page_number
        self.page_size = page_size
        self.third_part_apply_id = third_part_apply_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.created_end_at is not None:
            result['created_end_at'] = self.created_end_at
        if self.created_start_at is not None:
            result['created_start_at'] = self.created_start_at
        if self.page_number is not None:
            result['page_number'] = self.page_number
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.third_part_apply_id is not None:
            result['third_part_apply_id'] = self.third_part_apply_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('created_end_at') is not None:
            self.created_end_at = m.get('created_end_at')
        if m.get('created_start_at') is not None:
            self.created_start_at = m.get('created_start_at')
        if m.get('page_number') is not None:
            self.page_number = m.get('page_number')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('third_part_apply_id') is not None:
            self.third_part_apply_id = m.get('third_part_apply_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarApplyQueryResponseBodyApplyListApproverList(TeaModel):
    def __init__(
        self,
        note: str = None,
        operate_time: str = None,
        order: int = None,
        status: int = None,
        status_desc: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.note = note
        self.operate_time = operate_time
        self.order = order
        self.status = status
        self.status_desc = status_desc
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.note is not None:
            result['note'] = self.note
        if self.operate_time is not None:
            result['operate_time'] = self.operate_time
        if self.order is not None:
            result['order'] = self.order
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('note') is not None:
            self.note = m.get('note')
        if m.get('operate_time') is not None:
            self.operate_time = m.get('operate_time')
        if m.get('order') is not None:
            self.order = m.get('order')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CarApplyQueryResponseBodyApplyListItineraryList(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_date: str = None,
        cost_center_id: int = None,
        cost_center_name: str = None,
        dep_city: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        invoice_id: int = None,
        invoice_name: str = None,
        itinerary_id: str = None,
        project_code: str = None,
        project_title: str = None,
        traffic_type: int = None,
    ):
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_date = arr_date
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        self.dep_date = dep_date
        self.invoice_id = invoice_id
        self.invoice_name = invoice_name
        self.itinerary_id = itinerary_id
        self.project_code = project_code
        self.project_title = project_title
        self.traffic_type = traffic_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.invoice_name is not None:
            result['invoice_name'] = self.invoice_name
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.traffic_type is not None:
            result['traffic_type'] = self.traffic_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('invoice_name') is not None:
            self.invoice_name = m.get('invoice_name')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('traffic_type') is not None:
            self.traffic_type = m.get('traffic_type')
        return self


class CarApplyQueryResponseBodyApplyListTravelerStandardCarCitySet(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
    ):
        self.city_code = city_code
        self.city_name = city_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        return self


class CarApplyQueryResponseBodyApplyListTravelerStandard(TeaModel):
    def __init__(
        self,
        car_city_set: List[CarApplyQueryResponseBodyApplyListTravelerStandardCarCitySet] = None,
        user_id: str = None,
    ):
        self.car_city_set = car_city_set
        self.user_id = user_id

    def validate(self):
        if self.car_city_set:
            for k in self.car_city_set:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['car_city_set'] = []
        if self.car_city_set is not None:
            for k in self.car_city_set:
                result['car_city_set'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.car_city_set = []
        if m.get('car_city_set') is not None:
            for k in m.get('car_city_set'):
                temp_model = CarApplyQueryResponseBodyApplyListTravelerStandardCarCitySet()
                self.car_city_set.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarApplyQueryResponseBodyApplyList(TeaModel):
    def __init__(
        self,
        approver_list: List[CarApplyQueryResponseBodyApplyListApproverList] = None,
        business_type: str = None,
        depart_id: str = None,
        depart_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        itinerary_list: List[CarApplyQueryResponseBodyApplyListItineraryList] = None,
        order_id: int = None,
        related_third_apply_id: str = None,
        status: int = None,
        status_desc: str = None,
        thirdpart_id: str = None,
        traveler_standard: List[CarApplyQueryResponseBodyApplyListTravelerStandard] = None,
        trip_cause: str = None,
        trip_title: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.approver_list = approver_list
        self.business_type = business_type
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.itinerary_list = itinerary_list
        self.order_id = order_id
        self.related_third_apply_id = related_third_apply_id
        self.status = status
        self.status_desc = status_desc
        self.thirdpart_id = thirdpart_id
        self.traveler_standard = traveler_standard
        self.trip_cause = trip_cause
        self.trip_title = trip_title
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.approver_list:
            for k in self.approver_list:
                if k:
                    k.validate()
        if self.itinerary_list:
            for k in self.itinerary_list:
                if k:
                    k.validate()
        if self.traveler_standard:
            for k in self.traveler_standard:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['approver_list'] = []
        if self.approver_list is not None:
            for k in self.approver_list:
                result['approver_list'].append(k.to_map() if k else None)
        if self.business_type is not None:
            result['business_type'] = self.business_type
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        result['itinerary_list'] = []
        if self.itinerary_list is not None:
            for k in self.itinerary_list:
                result['itinerary_list'].append(k.to_map() if k else None)
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.related_third_apply_id is not None:
            result['related_third_apply_id'] = self.related_third_apply_id
        if self.status is not None:
            result['status'] = self.status
        if self.status_desc is not None:
            result['status_desc'] = self.status_desc
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        result['traveler_standard'] = []
        if self.traveler_standard is not None:
            for k in self.traveler_standard:
                result['traveler_standard'].append(k.to_map() if k else None)
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.trip_title is not None:
            result['trip_title'] = self.trip_title
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.approver_list = []
        if m.get('approver_list') is not None:
            for k in m.get('approver_list'):
                temp_model = CarApplyQueryResponseBodyApplyListApproverList()
                self.approver_list.append(temp_model.from_map(k))
        if m.get('business_type') is not None:
            self.business_type = m.get('business_type')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        self.itinerary_list = []
        if m.get('itinerary_list') is not None:
            for k in m.get('itinerary_list'):
                temp_model = CarApplyQueryResponseBodyApplyListItineraryList()
                self.itinerary_list.append(temp_model.from_map(k))
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('related_third_apply_id') is not None:
            self.related_third_apply_id = m.get('related_third_apply_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('status_desc') is not None:
            self.status_desc = m.get('status_desc')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        self.traveler_standard = []
        if m.get('traveler_standard') is not None:
            for k in m.get('traveler_standard'):
                temp_model = CarApplyQueryResponseBodyApplyListTravelerStandard()
                self.traveler_standard.append(temp_model.from_map(k))
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('trip_title') is not None:
            self.trip_title = m.get('trip_title')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CarApplyQueryResponseBody(TeaModel):
    def __init__(
        self,
        apply_list: List[CarApplyQueryResponseBodyApplyList] = None,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        total: int = None,
        trace_id: str = None,
    ):
        self.apply_list = apply_list
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.total = total
        self.trace_id = trace_id

    def validate(self):
        if self.apply_list:
            for k in self.apply_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['apply_list'] = []
        if self.apply_list is not None:
            for k in self.apply_list:
                result['apply_list'].append(k.to_map() if k else None)
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.total is not None:
            result['total'] = self.total
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.apply_list = []
        if m.get('apply_list') is not None:
            for k in m.get('apply_list'):
                temp_model = CarApplyQueryResponseBodyApplyList()
                self.apply_list.append(temp_model.from_map(k))
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('total') is not None:
            self.total = m.get('total')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarApplyQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CarApplyQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarBillSettlementQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarBillSettlementQueryRequest(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        period_end: str = None,
        period_start: str = None,
    ):
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.period_end = period_end
        # This parameter is required.
        self.period_start = period_start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class CarBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(
        self,
        alipay_trade_no: str = None,
        apply_arr_city_code: str = None,
        apply_arr_city_name: str = None,
        apply_dep_city_code: str = None,
        apply_dep_city_name: str = None,
        apply_extend_field: str = None,
        apply_id: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_date: str = None,
        arr_location: str = None,
        arr_time: str = None,
        bill_record_time: str = None,
        billing_entity: str = None,
        book_model: str = None,
        book_time: str = None,
        booker_id: str = None,
        booker_job_no: str = None,
        booker_name: str = None,
        business_category: str = None,
        capital_direction: str = None,
        car_level: str = None,
        cascade_department: str = None,
        cost_center: str = None,
        cost_center_number: str = None,
        coupon: float = None,
        coupon_price: float = None,
        dep_city_code: str = None,
        department: str = None,
        department_id: str = None,
        dept_city: str = None,
        dept_date: str = None,
        dept_location: str = None,
        dept_time: str = None,
        driver_add_detail: str = None,
        driver_add_fee: float = None,
        estimate_drive_distance: str = None,
        estimate_price: float = None,
        fee_type: str = None,
        index: str = None,
        invoice_title: str = None,
        level_name: str = None,
        memo: str = None,
        order_id: str = None,
        order_price: float = None,
        over_apply_id: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        person_settle_fee: float = None,
        primary_id: int = None,
        project_code: str = None,
        project_name: str = None,
        provider_name: str = None,
        real_drive_distance: str = None,
        real_from_addr: str = None,
        real_to_addr: str = None,
        remark: str = None,
        scene_id: str = None,
        scene_name: str = None,
        service_fee: float = None,
        settlement_fee: float = None,
        settlement_grant_fee: float = None,
        settlement_time: str = None,
        settlement_type: str = None,
        special_order: str = None,
        special_reason: str = None,
        status: int = None,
        sub_order_id: str = None,
        supplement_apply_id: str = None,
        tax_rate: str = None,
        third_itinerary_id: str = None,
        time_type: str = None,
        traveler_id: str = None,
        traveler_job_no: str = None,
        traveler_member_type_name: str = None,
        traveler_name: str = None,
        user_confirm_desc: str = None,
        voucher_type: int = None,
    ):
        self.alipay_trade_no = alipay_trade_no
        self.apply_arr_city_code = apply_arr_city_code
        self.apply_arr_city_name = apply_arr_city_name
        self.apply_dep_city_code = apply_dep_city_code
        self.apply_dep_city_name = apply_dep_city_name
        # 审批扩展自定义字段
        self.apply_extend_field = apply_extend_field
        self.apply_id = apply_id
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_date = arr_date
        self.arr_location = arr_location
        self.arr_time = arr_time
        self.bill_record_time = bill_record_time
        self.billing_entity = billing_entity
        self.book_model = book_model
        self.book_time = book_time
        self.booker_id = booker_id
        self.booker_job_no = booker_job_no
        self.booker_name = booker_name
        self.business_category = business_category
        self.capital_direction = capital_direction
        self.car_level = car_level
        self.cascade_department = cascade_department
        self.cost_center = cost_center
        self.cost_center_number = cost_center_number
        self.coupon = coupon
        self.coupon_price = coupon_price
        self.dep_city_code = dep_city_code
        self.department = department
        self.department_id = department_id
        self.dept_city = dept_city
        self.dept_date = dept_date
        self.dept_location = dept_location
        self.dept_time = dept_time
        self.driver_add_detail = driver_add_detail
        self.driver_add_fee = driver_add_fee
        self.estimate_drive_distance = estimate_drive_distance
        self.estimate_price = estimate_price
        self.fee_type = fee_type
        self.index = index
        self.invoice_title = invoice_title
        self.level_name = level_name
        self.memo = memo
        self.order_id = order_id
        self.order_price = order_price
        self.over_apply_id = over_apply_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.person_settle_fee = person_settle_fee
        self.primary_id = primary_id
        self.project_code = project_code
        self.project_name = project_name
        self.provider_name = provider_name
        self.real_drive_distance = real_drive_distance
        self.real_from_addr = real_from_addr
        self.real_to_addr = real_to_addr
        self.remark = remark
        self.scene_id = scene_id
        self.scene_name = scene_name
        self.service_fee = service_fee
        self.settlement_fee = settlement_fee
        self.settlement_grant_fee = settlement_grant_fee
        self.settlement_time = settlement_time
        self.settlement_type = settlement_type
        self.special_order = special_order
        self.special_reason = special_reason
        self.status = status
        self.sub_order_id = sub_order_id
        self.supplement_apply_id = supplement_apply_id
        # 税率
        self.tax_rate = tax_rate
        self.third_itinerary_id = third_itinerary_id
        self.time_type = time_type
        self.traveler_id = traveler_id
        self.traveler_job_no = traveler_job_no
        self.traveler_member_type_name = traveler_member_type_name
        self.traveler_name = traveler_name
        self.user_confirm_desc = user_confirm_desc
        self.voucher_type = voucher_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.arr_location is not None:
            result['arr_location'] = self.arr_location
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.billing_entity is not None:
            result['billing_entity'] = self.billing_entity
        if self.book_model is not None:
            result['book_model'] = self.book_model
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.business_category is not None:
            result['business_category'] = self.business_category
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.car_level is not None:
            result['car_level'] = self.car_level
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.coupon is not None:
            result['coupon'] = self.coupon
        if self.coupon_price is not None:
            result['coupon_price'] = self.coupon_price
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.dept_city is not None:
            result['dept_city'] = self.dept_city
        if self.dept_date is not None:
            result['dept_date'] = self.dept_date
        if self.dept_location is not None:
            result['dept_location'] = self.dept_location
        if self.dept_time is not None:
            result['dept_time'] = self.dept_time
        if self.driver_add_detail is not None:
            result['driver_add_detail'] = self.driver_add_detail
        if self.driver_add_fee is not None:
            result['driver_add_fee'] = self.driver_add_fee
        if self.estimate_drive_distance is not None:
            result['estimate_drive_distance'] = self.estimate_drive_distance
        if self.estimate_price is not None:
            result['estimate_price'] = self.estimate_price
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.index is not None:
            result['index'] = self.index
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.level_name is not None:
            result['level_name'] = self.level_name
        if self.memo is not None:
            result['memo'] = self.memo
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.person_settle_fee is not None:
            result['person_settle_fee'] = self.person_settle_fee
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.provider_name is not None:
            result['provider_name'] = self.provider_name
        if self.real_drive_distance is not None:
            result['real_drive_distance'] = self.real_drive_distance
        if self.real_from_addr is not None:
            result['real_from_addr'] = self.real_from_addr
        if self.real_to_addr is not None:
            result['real_to_addr'] = self.real_to_addr
        if self.remark is not None:
            result['remark'] = self.remark
        if self.scene_id is not None:
            result['scene_id'] = self.scene_id
        if self.scene_name is not None:
            result['scene_name'] = self.scene_name
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.special_order is not None:
            result['special_order'] = self.special_order
        if self.special_reason is not None:
            result['special_reason'] = self.special_reason
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.supplement_apply_id is not None:
            result['supplement_apply_id'] = self.supplement_apply_id
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.user_confirm_desc is not None:
            result['user_confirm_desc'] = self.user_confirm_desc
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('arr_location') is not None:
            self.arr_location = m.get('arr_location')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('billing_entity') is not None:
            self.billing_entity = m.get('billing_entity')
        if m.get('book_model') is not None:
            self.book_model = m.get('book_model')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('business_category') is not None:
            self.business_category = m.get('business_category')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('car_level') is not None:
            self.car_level = m.get('car_level')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('coupon') is not None:
            self.coupon = m.get('coupon')
        if m.get('coupon_price') is not None:
            self.coupon_price = m.get('coupon_price')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('dept_city') is not None:
            self.dept_city = m.get('dept_city')
        if m.get('dept_date') is not None:
            self.dept_date = m.get('dept_date')
        if m.get('dept_location') is not None:
            self.dept_location = m.get('dept_location')
        if m.get('dept_time') is not None:
            self.dept_time = m.get('dept_time')
        if m.get('driver_add_detail') is not None:
            self.driver_add_detail = m.get('driver_add_detail')
        if m.get('driver_add_fee') is not None:
            self.driver_add_fee = m.get('driver_add_fee')
        if m.get('estimate_drive_distance') is not None:
            self.estimate_drive_distance = m.get('estimate_drive_distance')
        if m.get('estimate_price') is not None:
            self.estimate_price = m.get('estimate_price')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('level_name') is not None:
            self.level_name = m.get('level_name')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('person_settle_fee') is not None:
            self.person_settle_fee = m.get('person_settle_fee')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('provider_name') is not None:
            self.provider_name = m.get('provider_name')
        if m.get('real_drive_distance') is not None:
            self.real_drive_distance = m.get('real_drive_distance')
        if m.get('real_from_addr') is not None:
            self.real_from_addr = m.get('real_from_addr')
        if m.get('real_to_addr') is not None:
            self.real_to_addr = m.get('real_to_addr')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('scene_id') is not None:
            self.scene_id = m.get('scene_id')
        if m.get('scene_name') is not None:
            self.scene_name = m.get('scene_name')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('special_order') is not None:
            self.special_order = m.get('special_order')
        if m.get('special_reason') is not None:
            self.special_reason = m.get('special_reason')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('supplement_apply_id') is not None:
            self.supplement_apply_id = m.get('supplement_apply_id')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('user_confirm_desc') is not None:
            self.user_confirm_desc = m.get('user_confirm_desc')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class CarBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        category: int = None,
        corp_id: str = None,
        data_list: List[CarBillSettlementQueryResponseBodyModuleDataList] = None,
        period_end: str = None,
        period_start: str = None,
        total_num: int = None,
    ):
        self.category = category
        self.corp_id = corp_id
        self.data_list = data_list
        self.period_end = period_end
        self.period_start = period_start
        self.total_num = total_num

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = CarBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        return self


class CarBillSettlementQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: CarBillSettlementQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CarBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarBillSettlementQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CarBillSettlementQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarOrderListQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarOrderListQueryRequest(TeaModel):
    def __init__(
        self,
        all_apply: bool = None,
        apply_id: int = None,
        depart_id: str = None,
        end_time: str = None,
        page: int = None,
        page_size: int = None,
        start_time: str = None,
        thirdpart_apply_id: str = None,
        update_end_time: str = None,
        update_start_time: str = None,
        user_id: str = None,
    ):
        self.all_apply = all_apply
        self.apply_id = apply_id
        self.depart_id = depart_id
        self.end_time = end_time
        self.page = page
        self.page_size = page_size
        self.start_time = start_time
        self.thirdpart_apply_id = thirdpart_apply_id
        self.update_end_time = update_end_time
        self.update_start_time = update_start_time
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_apply is not None:
            result['all_apply'] = self.all_apply
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.update_end_time is not None:
            result['update_end_time'] = self.update_end_time
        if self.update_start_time is not None:
            result['update_start_time'] = self.update_start_time
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('all_apply') is not None:
            self.all_apply = m.get('all_apply')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('update_end_time') is not None:
            self.update_end_time = m.get('update_end_time')
        if m.get('update_start_time') is not None:
            self.update_start_time = m.get('update_start_time')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CarOrderListQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(
        self,
        category_code: int = None,
        category_type: int = None,
        gmt_create: str = None,
        passenger_name: str = None,
        pay_type: int = None,
        person_price: float = None,
        price: float = None,
        trade_id: str = None,
        type: int = None,
    ):
        self.category_code = category_code
        self.category_type = category_type
        self.gmt_create = gmt_create
        self.passenger_name = passenger_name
        self.pay_type = pay_type
        self.person_price = person_price
        self.price = price
        self.trade_id = trade_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.category_type is not None:
            result['category_type'] = self.category_type
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.person_price is not None:
            result['person_price'] = self.person_price
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('category_type') is not None:
            self.category_type = m.get('category_type')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('person_price') is not None:
            self.person_price = m.get('person_price')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CarOrderListQueryResponseBodyModuleUserAffiliateList(TeaModel):
    def __init__(
        self,
        user_id: str = None,
        user_name: str = None,
    ):
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CarOrderListQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        apply_show_id: str = None,
        btrip_title: str = None,
        business_category: str = None,
        cancel_time: str = None,
        car_info: str = None,
        car_level: int = None,
        corp_id: str = None,
        corp_name: str = None,
        cost_center_id: int = None,
        cost_center_name: str = None,
        cost_center_number: str = None,
        dept_id: int = None,
        dept_name: str = None,
        driver_confirm_time: str = None,
        estimate_price: float = None,
        from_address: str = None,
        from_city_ad_code: str = None,
        from_city_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        invoice_id: int = None,
        invoice_title: str = None,
        is_special: bool = None,
        memo: str = None,
        order_status: int = None,
        passenger_name: str = None,
        pay_time: str = None,
        price_info_list: List[CarOrderListQueryResponseBodyModulePriceInfoList] = None,
        project_code: str = None,
        project_id: int = None,
        project_title: str = None,
        provider: int = None,
        publish_time: str = None,
        real_from_address: str = None,
        real_from_city_ad_code: str = None,
        real_from_city_name: str = None,
        real_to_address: str = None,
        real_to_city_ad_code: str = None,
        real_to_city_name: str = None,
        service_type: int = None,
        special_types: List[str] = None,
        taken_time: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
        thirdpart_itinerary_id: str = None,
        to_address: str = None,
        to_city_ad_code: str = None,
        to_city_name: str = None,
        travel_distance: float = None,
        user_affiliate_list: List[CarOrderListQueryResponseBodyModuleUserAffiliateList] = None,
        user_confirm: int = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_id = apply_id
        self.apply_show_id = apply_show_id
        self.btrip_title = btrip_title
        self.business_category = business_category
        self.cancel_time = cancel_time
        self.car_info = car_info
        self.car_level = car_level
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.cost_center_number = cost_center_number
        self.dept_id = dept_id
        self.dept_name = dept_name
        self.driver_confirm_time = driver_confirm_time
        self.estimate_price = estimate_price
        self.from_address = from_address
        self.from_city_ad_code = from_city_ad_code
        self.from_city_name = from_city_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.invoice_id = invoice_id
        self.invoice_title = invoice_title
        self.is_special = is_special
        self.memo = memo
        self.order_status = order_status
        self.passenger_name = passenger_name
        self.pay_time = pay_time
        self.price_info_list = price_info_list
        self.project_code = project_code
        self.project_id = project_id
        self.project_title = project_title
        self.provider = provider
        self.publish_time = publish_time
        self.real_from_address = real_from_address
        self.real_from_city_ad_code = real_from_city_ad_code
        self.real_from_city_name = real_from_city_name
        self.real_to_address = real_to_address
        self.real_to_city_ad_code = real_to_city_ad_code
        self.real_to_city_name = real_to_city_name
        self.service_type = service_type
        self.special_types = special_types
        self.taken_time = taken_time
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.to_address = to_address
        self.to_city_ad_code = to_city_ad_code
        self.to_city_name = to_city_name
        self.travel_distance = travel_distance
        self.user_affiliate_list = user_affiliate_list
        self.user_confirm = user_confirm
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.user_affiliate_list:
            for k in self.user_affiliate_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.apply_show_id is not None:
            result['apply_show_id'] = self.apply_show_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.business_category is not None:
            result['business_category'] = self.business_category
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        if self.car_info is not None:
            result['car_info'] = self.car_info
        if self.car_level is not None:
            result['car_level'] = self.car_level
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.driver_confirm_time is not None:
            result['driver_confirm_time'] = self.driver_confirm_time
        if self.estimate_price is not None:
            result['estimate_price'] = self.estimate_price
        if self.from_address is not None:
            result['from_address'] = self.from_address
        if self.from_city_ad_code is not None:
            result['from_city_ad_code'] = self.from_city_ad_code
        if self.from_city_name is not None:
            result['from_city_name'] = self.from_city_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.is_special is not None:
            result['is_special'] = self.is_special
        if self.memo is not None:
            result['memo'] = self.memo
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.provider is not None:
            result['provider'] = self.provider
        if self.publish_time is not None:
            result['publish_time'] = self.publish_time
        if self.real_from_address is not None:
            result['real_from_address'] = self.real_from_address
        if self.real_from_city_ad_code is not None:
            result['real_from_city_ad_code'] = self.real_from_city_ad_code
        if self.real_from_city_name is not None:
            result['real_from_city_name'] = self.real_from_city_name
        if self.real_to_address is not None:
            result['real_to_address'] = self.real_to_address
        if self.real_to_city_ad_code is not None:
            result['real_to_city_ad_code'] = self.real_to_city_ad_code
        if self.real_to_city_name is not None:
            result['real_to_city_name'] = self.real_to_city_name
        if self.service_type is not None:
            result['service_type'] = self.service_type
        if self.special_types is not None:
            result['special_types'] = self.special_types
        if self.taken_time is not None:
            result['taken_time'] = self.taken_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.to_address is not None:
            result['to_address'] = self.to_address
        if self.to_city_ad_code is not None:
            result['to_city_ad_code'] = self.to_city_ad_code
        if self.to_city_name is not None:
            result['to_city_name'] = self.to_city_name
        if self.travel_distance is not None:
            result['travel_distance'] = self.travel_distance
        result['user_affiliate_list'] = []
        if self.user_affiliate_list is not None:
            for k in self.user_affiliate_list:
                result['user_affiliate_list'].append(k.to_map() if k else None)
        if self.user_confirm is not None:
            result['user_confirm'] = self.user_confirm
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('apply_show_id') is not None:
            self.apply_show_id = m.get('apply_show_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('business_category') is not None:
            self.business_category = m.get('business_category')
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        if m.get('car_info') is not None:
            self.car_info = m.get('car_info')
        if m.get('car_level') is not None:
            self.car_level = m.get('car_level')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('driver_confirm_time') is not None:
            self.driver_confirm_time = m.get('driver_confirm_time')
        if m.get('estimate_price') is not None:
            self.estimate_price = m.get('estimate_price')
        if m.get('from_address') is not None:
            self.from_address = m.get('from_address')
        if m.get('from_city_ad_code') is not None:
            self.from_city_ad_code = m.get('from_city_ad_code')
        if m.get('from_city_name') is not None:
            self.from_city_name = m.get('from_city_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('is_special') is not None:
            self.is_special = m.get('is_special')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = CarOrderListQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('provider') is not None:
            self.provider = m.get('provider')
        if m.get('publish_time') is not None:
            self.publish_time = m.get('publish_time')
        if m.get('real_from_address') is not None:
            self.real_from_address = m.get('real_from_address')
        if m.get('real_from_city_ad_code') is not None:
            self.real_from_city_ad_code = m.get('real_from_city_ad_code')
        if m.get('real_from_city_name') is not None:
            self.real_from_city_name = m.get('real_from_city_name')
        if m.get('real_to_address') is not None:
            self.real_to_address = m.get('real_to_address')
        if m.get('real_to_city_ad_code') is not None:
            self.real_to_city_ad_code = m.get('real_to_city_ad_code')
        if m.get('real_to_city_name') is not None:
            self.real_to_city_name = m.get('real_to_city_name')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        if m.get('special_types') is not None:
            self.special_types = m.get('special_types')
        if m.get('taken_time') is not None:
            self.taken_time = m.get('taken_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('to_address') is not None:
            self.to_address = m.get('to_address')
        if m.get('to_city_ad_code') is not None:
            self.to_city_ad_code = m.get('to_city_ad_code')
        if m.get('to_city_name') is not None:
            self.to_city_name = m.get('to_city_name')
        if m.get('travel_distance') is not None:
            self.travel_distance = m.get('travel_distance')
        self.user_affiliate_list = []
        if m.get('user_affiliate_list') is not None:
            for k in m.get('user_affiliate_list'):
                temp_model = CarOrderListQueryResponseBodyModuleUserAffiliateList()
                self.user_affiliate_list.append(temp_model.from_map(k))
        if m.get('user_confirm') is not None:
            self.user_confirm = m.get('user_confirm')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CarOrderListQueryResponseBodyPageInfo(TeaModel):
    def __init__(
        self,
        page: int = None,
        page_size: int = None,
        total_number: int = None,
    ):
        self.page = page
        self.page_size = page_size
        self.total_number = total_number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_number is not None:
            result['total_number'] = self.total_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_number') is not None:
            self.total_number = m.get('total_number')
        return self


class CarOrderListQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[CarOrderListQueryResponseBodyModule] = None,
        page_info: CarOrderListQueryResponseBodyPageInfo = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.page_info = page_info
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()
        if self.page_info:
            self.page_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.page_info is not None:
            result['page_info'] = self.page_info.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = CarOrderListQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('page_info') is not None:
            temp_model = CarOrderListQueryResponseBodyPageInfo()
            self.page_info = temp_model.from_map(m['page_info'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarOrderListQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CarOrderListQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarOrderListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarOrderQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CarOrderQueryRequest(TeaModel):
    def __init__(
        self,
        order_id: int = None,
        sub_order_id: int = None,
    ):
        self.order_id = order_id
        self.sub_order_id = sub_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class CarOrderQueryResponseBodyModuleCarInfo(TeaModel):
    def __init__(
        self,
        business_category: str = None,
        cancel_time: int = None,
        car_info: str = None,
        car_level: int = None,
        driver_card: str = None,
        driver_confirm_time: int = None,
        driver_name: str = None,
        estimate_price: int = None,
        from_address: str = None,
        from_city_ad_code: str = None,
        from_city_name: str = None,
        is_special: bool = None,
        memo: str = None,
        pay_time: int = None,
        publish_time: int = None,
        real_from_address: str = None,
        real_from_city_ad_code: str = None,
        real_from_city_name: str = None,
        real_to_address: str = None,
        real_to_city_ad_code: str = None,
        real_to_city_name: str = None,
        service_type: int = None,
        special_types: str = None,
        taken_time: int = None,
        to_address: str = None,
        to_city_ad_code: str = None,
        to_city_name: str = None,
        travel_distance: str = None,
    ):
        self.business_category = business_category
        self.cancel_time = cancel_time
        self.car_info = car_info
        self.car_level = car_level
        self.driver_card = driver_card
        self.driver_confirm_time = driver_confirm_time
        self.driver_name = driver_name
        self.estimate_price = estimate_price
        self.from_address = from_address
        self.from_city_ad_code = from_city_ad_code
        self.from_city_name = from_city_name
        self.is_special = is_special
        self.memo = memo
        self.pay_time = pay_time
        self.publish_time = publish_time
        self.real_from_address = real_from_address
        self.real_from_city_ad_code = real_from_city_ad_code
        self.real_from_city_name = real_from_city_name
        self.real_to_address = real_to_address
        self.real_to_city_ad_code = real_to_city_ad_code
        self.real_to_city_name = real_to_city_name
        self.service_type = service_type
        self.special_types = special_types
        self.taken_time = taken_time
        self.to_address = to_address
        self.to_city_ad_code = to_city_ad_code
        self.to_city_name = to_city_name
        self.travel_distance = travel_distance

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_category is not None:
            result['business_category'] = self.business_category
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        if self.car_info is not None:
            result['car_info'] = self.car_info
        if self.car_level is not None:
            result['car_level'] = self.car_level
        if self.driver_card is not None:
            result['driver_card'] = self.driver_card
        if self.driver_confirm_time is not None:
            result['driver_confirm_time'] = self.driver_confirm_time
        if self.driver_name is not None:
            result['driver_name'] = self.driver_name
        if self.estimate_price is not None:
            result['estimate_price'] = self.estimate_price
        if self.from_address is not None:
            result['from_address'] = self.from_address
        if self.from_city_ad_code is not None:
            result['from_city_ad_code'] = self.from_city_ad_code
        if self.from_city_name is not None:
            result['from_city_name'] = self.from_city_name
        if self.is_special is not None:
            result['is_special'] = self.is_special
        if self.memo is not None:
            result['memo'] = self.memo
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.publish_time is not None:
            result['publish_time'] = self.publish_time
        if self.real_from_address is not None:
            result['real_from_address'] = self.real_from_address
        if self.real_from_city_ad_code is not None:
            result['real_from_city_ad_code'] = self.real_from_city_ad_code
        if self.real_from_city_name is not None:
            result['real_from_city_name'] = self.real_from_city_name
        if self.real_to_address is not None:
            result['real_to_address'] = self.real_to_address
        if self.real_to_city_ad_code is not None:
            result['real_to_city_ad_code'] = self.real_to_city_ad_code
        if self.real_to_city_name is not None:
            result['real_to_city_name'] = self.real_to_city_name
        if self.service_type is not None:
            result['service_type'] = self.service_type
        if self.special_types is not None:
            result['special_types'] = self.special_types
        if self.taken_time is not None:
            result['taken_time'] = self.taken_time
        if self.to_address is not None:
            result['to_address'] = self.to_address
        if self.to_city_ad_code is not None:
            result['to_city_ad_code'] = self.to_city_ad_code
        if self.to_city_name is not None:
            result['to_city_name'] = self.to_city_name
        if self.travel_distance is not None:
            result['travel_distance'] = self.travel_distance
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('business_category') is not None:
            self.business_category = m.get('business_category')
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        if m.get('car_info') is not None:
            self.car_info = m.get('car_info')
        if m.get('car_level') is not None:
            self.car_level = m.get('car_level')
        if m.get('driver_card') is not None:
            self.driver_card = m.get('driver_card')
        if m.get('driver_confirm_time') is not None:
            self.driver_confirm_time = m.get('driver_confirm_time')
        if m.get('driver_name') is not None:
            self.driver_name = m.get('driver_name')
        if m.get('estimate_price') is not None:
            self.estimate_price = m.get('estimate_price')
        if m.get('from_address') is not None:
            self.from_address = m.get('from_address')
        if m.get('from_city_ad_code') is not None:
            self.from_city_ad_code = m.get('from_city_ad_code')
        if m.get('from_city_name') is not None:
            self.from_city_name = m.get('from_city_name')
        if m.get('is_special') is not None:
            self.is_special = m.get('is_special')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('publish_time') is not None:
            self.publish_time = m.get('publish_time')
        if m.get('real_from_address') is not None:
            self.real_from_address = m.get('real_from_address')
        if m.get('real_from_city_ad_code') is not None:
            self.real_from_city_ad_code = m.get('real_from_city_ad_code')
        if m.get('real_from_city_name') is not None:
            self.real_from_city_name = m.get('real_from_city_name')
        if m.get('real_to_address') is not None:
            self.real_to_address = m.get('real_to_address')
        if m.get('real_to_city_ad_code') is not None:
            self.real_to_city_ad_code = m.get('real_to_city_ad_code')
        if m.get('real_to_city_name') is not None:
            self.real_to_city_name = m.get('real_to_city_name')
        if m.get('service_type') is not None:
            self.service_type = m.get('service_type')
        if m.get('special_types') is not None:
            self.special_types = m.get('special_types')
        if m.get('taken_time') is not None:
            self.taken_time = m.get('taken_time')
        if m.get('to_address') is not None:
            self.to_address = m.get('to_address')
        if m.get('to_city_ad_code') is not None:
            self.to_city_ad_code = m.get('to_city_ad_code')
        if m.get('to_city_name') is not None:
            self.to_city_name = m.get('to_city_name')
        if m.get('travel_distance') is not None:
            self.travel_distance = m.get('travel_distance')
        return self


class CarOrderQueryResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(
        self,
        id: int = None,
        title: str = None,
    ):
        self.id = id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CarOrderQueryResponseBodyModuleOrderBaseInfo(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        btrip_cause: str = None,
        btrip_title: str = None,
        corp_id: str = None,
        corp_name: str = None,
        depart_id: str = None,
        depart_name: str = None,
        gmt_create: int = None,
        gmt_modified: int = None,
        itinerary_id: str = None,
        order_id: int = None,
        order_status: int = None,
        sub_order_id: int = None,
        third_depart_id: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
        thirdpart_itinerary_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_id = apply_id
        self.btrip_cause = btrip_cause
        self.btrip_title = btrip_title
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.itinerary_id = itinerary_id
        self.order_id = order_id
        self.order_status = order_status
        self.sub_order_id = sub_order_id
        self.third_depart_id = third_depart_id
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_cause is not None:
            result['btrip_cause'] = self.btrip_cause
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.third_depart_id is not None:
            result['third_depart_id'] = self.third_depart_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_cause') is not None:
            self.btrip_cause = m.get('btrip_cause')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('third_depart_id') is not None:
            self.third_depart_id = m.get('third_depart_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CarOrderQueryResponseBodyModulePassengerList(TeaModel):
    def __init__(
        self,
        cost_center_id: int = None,
        cost_center_name: str = None,
        cost_center_number: str = None,
        project_code: str = None,
        project_id: int = None,
        project_title: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_project_id: str = None,
        user_id: str = None,
        user_name: str = None,
        user_type: int = None,
    ):
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.cost_center_number = cost_center_number
        self.project_code = project_code
        self.project_id = project_id
        self.project_title = project_title
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_project_id = thirdpart_project_id
        self.user_id = user_id
        self.user_name = user_name
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class CarOrderQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(
        self,
        category_code: int = None,
        gmt_create: int = None,
        pay_type: int = None,
        person_price: int = None,
        price: int = None,
        trade_id: str = None,
        type: int = None,
    ):
        self.category_code = category_code
        self.gmt_create = gmt_create
        self.pay_type = pay_type
        self.person_price = person_price
        self.price = price
        self.trade_id = trade_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.person_price is not None:
            result['person_price'] = self.person_price
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('person_price') is not None:
            self.person_price = m.get('person_price')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CarOrderQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        car_info: CarOrderQueryResponseBodyModuleCarInfo = None,
        invoice_info: CarOrderQueryResponseBodyModuleInvoiceInfo = None,
        order_base_info: CarOrderQueryResponseBodyModuleOrderBaseInfo = None,
        passenger_list: List[CarOrderQueryResponseBodyModulePassengerList] = None,
        price_info_list: List[CarOrderQueryResponseBodyModulePriceInfoList] = None,
    ):
        self.car_info = car_info
        self.invoice_info = invoice_info
        self.order_base_info = order_base_info
        self.passenger_list = passenger_list
        self.price_info_list = price_info_list

    def validate(self):
        if self.car_info:
            self.car_info.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.order_base_info:
            self.order_base_info.validate()
        if self.passenger_list:
            for k in self.passenger_list:
                if k:
                    k.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.car_info is not None:
            result['car_info'] = self.car_info.to_map()
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.order_base_info is not None:
            result['order_base_info'] = self.order_base_info.to_map()
        result['passenger_list'] = []
        if self.passenger_list is not None:
            for k in self.passenger_list:
                result['passenger_list'].append(k.to_map() if k else None)
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('car_info') is not None:
            temp_model = CarOrderQueryResponseBodyModuleCarInfo()
            self.car_info = temp_model.from_map(m['car_info'])
        if m.get('invoice_info') is not None:
            temp_model = CarOrderQueryResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('order_base_info') is not None:
            temp_model = CarOrderQueryResponseBodyModuleOrderBaseInfo()
            self.order_base_info = temp_model.from_map(m['order_base_info'])
        self.passenger_list = []
        if m.get('passenger_list') is not None:
            for k in m.get('passenger_list'):
                temp_model = CarOrderQueryResponseBodyModulePassengerList()
                self.passenger_list.append(temp_model.from_map(k))
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = CarOrderQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        return self


class CarOrderQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: CarOrderQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CarOrderQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarOrderQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CarOrderQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarOrderQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CarSceneQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class CarSceneQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        scenario_template_id: str = None,
        scenario_template_name: str = None,
        state: str = None,
    ):
        self.scenario_template_id = scenario_template_id
        self.scenario_template_name = scenario_template_name
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.scenario_template_id is not None:
            result['scenarioTemplateId'] = self.scenario_template_id
        if self.scenario_template_name is not None:
            result['scenarioTemplateName'] = self.scenario_template_name
        if self.state is not None:
            result['state'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('scenarioTemplateId') is not None:
            self.scenario_template_id = m.get('scenarioTemplateId')
        if m.get('scenarioTemplateName') is not None:
            self.scenario_template_name = m.get('scenarioTemplateName')
        if m.get('state') is not None:
            self.state = m.get('state')
        return self


class CarSceneQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[CarSceneQueryResponseBodyModule] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = CarSceneQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CarSceneQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CarSceneQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CarSceneQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ChannelCorpCreateHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class ChannelCorpCreateRequest(TeaModel):
    def __init__(
        self,
        administrator_name: str = None,
        administrator_phone: str = None,
        city: str = None,
        corp_name: str = None,
        province: str = None,
        scope: int = None,
        third_corp_id: str = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.administrator_name = administrator_name
        # This parameter is required.
        self.administrator_phone = administrator_phone
        self.city = city
        # This parameter is required.
        self.corp_name = corp_name
        self.province = province
        self.scope = scope
        # This parameter is required.
        self.third_corp_id = third_corp_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.administrator_name is not None:
            result['administrator_name'] = self.administrator_name
        if self.administrator_phone is not None:
            result['administrator_phone'] = self.administrator_phone
        if self.city is not None:
            result['city'] = self.city
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.province is not None:
            result['province'] = self.province
        if self.scope is not None:
            result['scope'] = self.scope
        if self.third_corp_id is not None:
            result['third_corp_id'] = self.third_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('administrator_name') is not None:
            self.administrator_name = m.get('administrator_name')
        if m.get('administrator_phone') is not None:
            self.administrator_phone = m.get('administrator_phone')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('province') is not None:
            self.province = m.get('province')
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('third_corp_id') is not None:
            self.third_corp_id = m.get('third_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ChannelCorpCreateResponseBodyModule(TeaModel):
    def __init__(
        self,
        administrator_name: str = None,
        administrator_phone: str = None,
        corp_id: str = None,
        corp_name: str = None,
        open_agent_id: str = None,
        user_id: str = None,
    ):
        self.administrator_name = administrator_name
        self.administrator_phone = administrator_phone
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.open_agent_id = open_agent_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.administrator_name is not None:
            result['administrator_name'] = self.administrator_name
        if self.administrator_phone is not None:
            result['administrator_phone'] = self.administrator_phone
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.open_agent_id is not None:
            result['open_agent_id'] = self.open_agent_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('administrator_name') is not None:
            self.administrator_name = m.get('administrator_name')
        if m.get('administrator_phone') is not None:
            self.administrator_phone = m.get('administrator_phone')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('open_agent_id') is not None:
            self.open_agent_id = m.get('open_agent_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ChannelCorpCreateResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: ChannelCorpCreateResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = ChannelCorpCreateResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ChannelCorpCreateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ChannelCorpCreateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ChannelCorpCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CitySearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CitySearchRequest(TeaModel):
    def __init__(
        self,
        keyword: str = None,
    ):
        # This parameter is required.
        self.keyword = keyword

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.keyword is not None:
            result['keyword'] = self.keyword
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('keyword') is not None:
            self.keyword = m.get('keyword')
        return self


class CitySearchResponseBodyModuleCities(TeaModel):
    def __init__(
        self,
        code: str = None,
        name: str = None,
        region: int = None,
    ):
        self.code = code
        self.name = name
        self.region = region

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.name is not None:
            result['name'] = self.name
        if self.region is not None:
            result['region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('region') is not None:
            self.region = m.get('region')
        return self


class CitySearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        cities: List[CitySearchResponseBodyModuleCities] = None,
    ):
        self.cities = cities

    def validate(self):
        if self.cities:
            for k in self.cities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['cities'] = []
        if self.cities is not None:
            for k in self.cities:
                result['cities'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.cities = []
        if m.get('cities') is not None:
            for k in m.get('cities'):
                temp_model = CitySearchResponseBodyModuleCities()
                self.cities.append(temp_model.from_map(k))
        return self


class CitySearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: CitySearchResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CitySearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CitySearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CitySearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CitySearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CommonApplyQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CommonApplyQueryRequest(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        biz_category: int = None,
        business_instance_id: str = None,
        user_id: str = None,
    ):
        self.apply_id = apply_id
        # This parameter is required.
        self.biz_category = biz_category
        self.business_instance_id = business_instance_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.biz_category is not None:
            result['biz_category'] = self.biz_category
        if self.business_instance_id is not None:
            result['business_instance_id'] = self.business_instance_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('biz_category') is not None:
            self.biz_category = m.get('biz_category')
        if m.get('business_instance_id') is not None:
            self.business_instance_id = m.get('business_instance_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CommonApplyQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        biz_category: int = None,
        cause: str = None,
        corp_id: str = None,
        extend_value: str = None,
        gmt_create: str = None,
        status: int = None,
        thirdpart_corp_id: str = None,
        thirdpart_id: str = None,
        trip_cause: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_id = apply_id
        self.biz_category = biz_category
        self.cause = cause
        self.corp_id = corp_id
        self.extend_value = extend_value
        self.gmt_create = gmt_create
        self.status = status
        self.thirdpart_corp_id = thirdpart_corp_id
        self.thirdpart_id = thirdpart_id
        self.trip_cause = trip_cause
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.biz_category is not None:
            result['biz_category'] = self.biz_category
        if self.cause is not None:
            result['cause'] = self.cause
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.extend_value is not None:
            result['extend_value'] = self.extend_value
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.status is not None:
            result['status'] = self.status
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.trip_cause is not None:
            result['trip_cause'] = self.trip_cause
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('biz_category') is not None:
            self.biz_category = m.get('biz_category')
        if m.get('cause') is not None:
            self.cause = m.get('cause')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('extend_value') is not None:
            self.extend_value = m.get('extend_value')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('trip_cause') is not None:
            self.trip_cause = m.get('trip_cause')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class CommonApplyQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: CommonApplyQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CommonApplyQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CommonApplyQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CommonApplyQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CommonApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CommonApplySyncHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CommonApplySyncRequest(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        biz_category: int = None,
        remark: str = None,
        status: int = None,
        thirdparty_flow_id: str = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.apply_id = apply_id
        self.biz_category = biz_category
        self.remark = remark
        # This parameter is required.
        self.status = status
        self.thirdparty_flow_id = thirdparty_flow_id
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.biz_category is not None:
            result['biz_category'] = self.biz_category
        if self.remark is not None:
            result['remark'] = self.remark
        if self.status is not None:
            result['status'] = self.status
        if self.thirdparty_flow_id is not None:
            result['thirdparty_flow_id'] = self.thirdparty_flow_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('biz_category') is not None:
            self.biz_category = m.get('biz_category')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('thirdparty_flow_id') is not None:
            self.thirdparty_flow_id = m.get('thirdparty_flow_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CommonApplySyncResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CommonApplySyncResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CommonApplySyncResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CommonApplySyncResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CooperatorFlightBillSettlementQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class CooperatorFlightBillSettlementQueryRequest(TeaModel):
    def __init__(
        self,
        cooperator_id: str = None,
        page_no: int = None,
        page_size: int = None,
        period_end: str = None,
        period_start: str = None,
    ):
        self.cooperator_id = cooperator_id
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.period_end = period_end
        # This parameter is required.
        self.period_start = period_start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cooperator_id is not None:
            result['cooperator_id'] = self.cooperator_id
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cooperator_id') is not None:
            self.cooperator_id = m.get('cooperator_id')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class CooperatorFlightBillSettlementQueryResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        advance_day: int = None,
        airline_corp_code: str = None,
        airline_corp_name: str = None,
        alipay_id: str = None,
        alipay_trade_no: str = None,
        apply_arr_city_code: str = None,
        apply_arr_city_name: str = None,
        apply_dep_city_code: str = None,
        apply_dep_city_name: str = None,
        apply_extend_field: str = None,
        apply_id: str = None,
        arr_airport_code: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_date: str = None,
        arr_station: str = None,
        arr_time: str = None,
        bill_record_time: str = None,
        book_mode: str = None,
        book_time: str = None,
        booker_id: str = None,
        booker_job_no: str = None,
        booker_name: str = None,
        btrip_coupon_fee: float = None,
        build_fee: float = None,
        business_trip_result: str = None,
        cabin: str = None,
        cabin_class: str = None,
        capital_direction: str = None,
        cascade_department: str = None,
        change_fee: float = None,
        change_result: str = None,
        cooperator_bill_code: str = None,
        cooperator_name: str = None,
        cooperator_order_id: str = None,
        corp_pay_order_fee: float = None,
        corp_settle_price: float = None,
        cost_center: str = None,
        cost_center_number: str = None,
        coupon: float = None,
        dep_airport_code: str = None,
        dep_city_code: str = None,
        department: str = None,
        department_id: str = None,
        dept_city: str = None,
        dept_date: str = None,
        dept_station: str = None,
        dept_time: str = None,
        discount: str = None,
        exceed_reason: str = None,
        fee_type: str = None,
        flight_no: str = None,
        index: str = None,
        ins_order_id: str = None,
        insurance_fee: float = None,
        insurance_number: str = None,
        invoice_title: str = None,
        item_type: str = None,
        itinerary_num: str = None,
        itinerary_price: float = None,
        mileage: int = None,
        most_difference_dept_time: str = None,
        most_difference_discount: str = None,
        most_difference_flight_no: str = None,
        most_difference_price: float = None,
        most_difference_reason: str = None,
        most_price: float = None,
        negotiation_coupon_fee: float = None,
        oil_fee: float = None,
        order_id: str = None,
        order_status_desc: str = None,
        over_apply_id: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        person_settle_price: float = None,
        pre_book_tip: str = None,
        primary_id: int = None,
        project_code: str = None,
        project_name: str = None,
        refund_fee: float = None,
        refund_result: str = None,
        refund_upgrade_cost: float = None,
        remark: str = None,
        repeat_refund: str = None,
        seal_price: float = None,
        service_fee: float = None,
        settlement_fee: float = None,
        settlement_grant_fee: float = None,
        settlement_time: str = None,
        settlement_type: str = None,
        status: int = None,
        sub_order_id: str = None,
        tax_rate: str = None,
        third_invoice_id: str = None,
        third_itinerary_id: str = None,
        ticket_id: str = None,
        trade: str = None,
        traveler_id: str = None,
        traveler_job_no: str = None,
        traveler_member_type: str = None,
        traveler_member_type_name: str = None,
        traveler_name: str = None,
        upgrade_cost: float = None,
        voucher_type: int = None,
        voyage_name: str = None,
    ):
        self.advance_day = advance_day
        self.airline_corp_code = airline_corp_code
        self.airline_corp_name = airline_corp_name
        self.alipay_id = alipay_id
        self.alipay_trade_no = alipay_trade_no
        self.apply_arr_city_code = apply_arr_city_code
        self.apply_arr_city_name = apply_arr_city_name
        self.apply_dep_city_code = apply_dep_city_code
        self.apply_dep_city_name = apply_dep_city_name
        self.apply_extend_field = apply_extend_field
        self.apply_id = apply_id
        self.arr_airport_code = arr_airport_code
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_date = arr_date
        self.arr_station = arr_station
        self.arr_time = arr_time
        self.bill_record_time = bill_record_time
        self.book_mode = book_mode
        self.book_time = book_time
        self.booker_id = booker_id
        self.booker_job_no = booker_job_no
        self.booker_name = booker_name
        self.btrip_coupon_fee = btrip_coupon_fee
        self.build_fee = build_fee
        self.business_trip_result = business_trip_result
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.capital_direction = capital_direction
        self.cascade_department = cascade_department
        self.change_fee = change_fee
        self.change_result = change_result
        self.cooperator_bill_code = cooperator_bill_code
        self.cooperator_name = cooperator_name
        self.cooperator_order_id = cooperator_order_id
        self.corp_pay_order_fee = corp_pay_order_fee
        self.corp_settle_price = corp_settle_price
        self.cost_center = cost_center
        self.cost_center_number = cost_center_number
        self.coupon = coupon
        self.dep_airport_code = dep_airport_code
        self.dep_city_code = dep_city_code
        self.department = department
        self.department_id = department_id
        self.dept_city = dept_city
        self.dept_date = dept_date
        self.dept_station = dept_station
        self.dept_time = dept_time
        self.discount = discount
        self.exceed_reason = exceed_reason
        self.fee_type = fee_type
        self.flight_no = flight_no
        self.index = index
        self.ins_order_id = ins_order_id
        self.insurance_fee = insurance_fee
        self.insurance_number = insurance_number
        self.invoice_title = invoice_title
        self.item_type = item_type
        self.itinerary_num = itinerary_num
        self.itinerary_price = itinerary_price
        self.mileage = mileage
        self.most_difference_dept_time = most_difference_dept_time
        self.most_difference_discount = most_difference_discount
        self.most_difference_flight_no = most_difference_flight_no
        self.most_difference_price = most_difference_price
        self.most_difference_reason = most_difference_reason
        self.most_price = most_price
        self.negotiation_coupon_fee = negotiation_coupon_fee
        self.oil_fee = oil_fee
        self.order_id = order_id
        self.order_status_desc = order_status_desc
        self.over_apply_id = over_apply_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.person_settle_price = person_settle_price
        self.pre_book_tip = pre_book_tip
        self.primary_id = primary_id
        self.project_code = project_code
        self.project_name = project_name
        self.refund_fee = refund_fee
        self.refund_result = refund_result
        self.refund_upgrade_cost = refund_upgrade_cost
        self.remark = remark
        self.repeat_refund = repeat_refund
        self.seal_price = seal_price
        self.service_fee = service_fee
        self.settlement_fee = settlement_fee
        self.settlement_grant_fee = settlement_grant_fee
        self.settlement_time = settlement_time
        self.settlement_type = settlement_type
        self.status = status
        self.sub_order_id = sub_order_id
        self.tax_rate = tax_rate
        self.third_invoice_id = third_invoice_id
        self.third_itinerary_id = third_itinerary_id
        self.ticket_id = ticket_id
        self.trade = trade
        self.traveler_id = traveler_id
        self.traveler_job_no = traveler_job_no
        self.traveler_member_type = traveler_member_type
        self.traveler_member_type_name = traveler_member_type_name
        self.traveler_name = traveler_name
        self.upgrade_cost = upgrade_cost
        self.voucher_type = voucher_type
        self.voyage_name = voyage_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.advance_day is not None:
            result['advance_day'] = self.advance_day
        if self.airline_corp_code is not None:
            result['airline_corp_code'] = self.airline_corp_code
        if self.airline_corp_name is not None:
            result['airline_corp_name'] = self.airline_corp_name
        if self.alipay_id is not None:
            result['alipay_id'] = self.alipay_id
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_mode is not None:
            result['book_mode'] = self.book_mode
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.btrip_coupon_fee is not None:
            result['btrip_coupon_fee'] = self.btrip_coupon_fee
        if self.build_fee is not None:
            result['build_fee'] = self.build_fee
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.change_result is not None:
            result['change_result'] = self.change_result
        if self.cooperator_bill_code is not None:
            result['cooperator_bill_code'] = self.cooperator_bill_code
        if self.cooperator_name is not None:
            result['cooperator_name'] = self.cooperator_name
        if self.cooperator_order_id is not None:
            result['cooperator_order_id'] = self.cooperator_order_id
        if self.corp_pay_order_fee is not None:
            result['corp_pay_order_fee'] = self.corp_pay_order_fee
        if self.corp_settle_price is not None:
            result['corp_settle_price'] = self.corp_settle_price
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.coupon is not None:
            result['coupon'] = self.coupon
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.dept_city is not None:
            result['dept_city'] = self.dept_city
        if self.dept_date is not None:
            result['dept_date'] = self.dept_date
        if self.dept_station is not None:
            result['dept_station'] = self.dept_station
        if self.dept_time is not None:
            result['dept_time'] = self.dept_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.index is not None:
            result['index'] = self.index
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        if self.insurance_fee is not None:
            result['insurance_fee'] = self.insurance_fee
        if self.insurance_number is not None:
            result['insurance_number'] = self.insurance_number
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.item_type is not None:
            result['item_type'] = self.item_type
        if self.itinerary_num is not None:
            result['itinerary_num'] = self.itinerary_num
        if self.itinerary_price is not None:
            result['itinerary_price'] = self.itinerary_price
        if self.mileage is not None:
            result['mileage'] = self.mileage
        if self.most_difference_dept_time is not None:
            result['most_difference_dept_time'] = self.most_difference_dept_time
        if self.most_difference_discount is not None:
            result['most_difference_discount'] = self.most_difference_discount
        if self.most_difference_flight_no is not None:
            result['most_difference_flight_no'] = self.most_difference_flight_no
        if self.most_difference_price is not None:
            result['most_difference_price'] = self.most_difference_price
        if self.most_difference_reason is not None:
            result['most_difference_reason'] = self.most_difference_reason
        if self.most_price is not None:
            result['most_price'] = self.most_price
        if self.negotiation_coupon_fee is not None:
            result['negotiation_coupon_fee'] = self.negotiation_coupon_fee
        if self.oil_fee is not None:
            result['oil_fee'] = self.oil_fee
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.person_settle_price is not None:
            result['person_settle_price'] = self.person_settle_price
        if self.pre_book_tip is not None:
            result['pre_book_tip'] = self.pre_book_tip
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_result is not None:
            result['refund_result'] = self.refund_result
        if self.refund_upgrade_cost is not None:
            result['refund_upgrade_cost'] = self.refund_upgrade_cost
        if self.remark is not None:
            result['remark'] = self.remark
        if self.repeat_refund is not None:
            result['repeat_refund'] = self.repeat_refund
        if self.seal_price is not None:
            result['seal_price'] = self.seal_price
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_invoice_id is not None:
            result['third_invoice_id'] = self.third_invoice_id
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.ticket_id is not None:
            result['ticket_id'] = self.ticket_id
        if self.trade is not None:
            result['trade'] = self.trade
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type is not None:
            result['traveler_member_type'] = self.traveler_member_type
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.upgrade_cost is not None:
            result['upgrade_cost'] = self.upgrade_cost
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        if self.voyage_name is not None:
            result['voyage_name'] = self.voyage_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('advance_day') is not None:
            self.advance_day = m.get('advance_day')
        if m.get('airline_corp_code') is not None:
            self.airline_corp_code = m.get('airline_corp_code')
        if m.get('airline_corp_name') is not None:
            self.airline_corp_name = m.get('airline_corp_name')
        if m.get('alipay_id') is not None:
            self.alipay_id = m.get('alipay_id')
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_mode') is not None:
            self.book_mode = m.get('book_mode')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('btrip_coupon_fee') is not None:
            self.btrip_coupon_fee = m.get('btrip_coupon_fee')
        if m.get('build_fee') is not None:
            self.build_fee = m.get('build_fee')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('change_result') is not None:
            self.change_result = m.get('change_result')
        if m.get('cooperator_bill_code') is not None:
            self.cooperator_bill_code = m.get('cooperator_bill_code')
        if m.get('cooperator_name') is not None:
            self.cooperator_name = m.get('cooperator_name')
        if m.get('cooperator_order_id') is not None:
            self.cooperator_order_id = m.get('cooperator_order_id')
        if m.get('corp_pay_order_fee') is not None:
            self.corp_pay_order_fee = m.get('corp_pay_order_fee')
        if m.get('corp_settle_price') is not None:
            self.corp_settle_price = m.get('corp_settle_price')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('coupon') is not None:
            self.coupon = m.get('coupon')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('dept_city') is not None:
            self.dept_city = m.get('dept_city')
        if m.get('dept_date') is not None:
            self.dept_date = m.get('dept_date')
        if m.get('dept_station') is not None:
            self.dept_station = m.get('dept_station')
        if m.get('dept_time') is not None:
            self.dept_time = m.get('dept_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        if m.get('insurance_fee') is not None:
            self.insurance_fee = m.get('insurance_fee')
        if m.get('insurance_number') is not None:
            self.insurance_number = m.get('insurance_number')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('item_type') is not None:
            self.item_type = m.get('item_type')
        if m.get('itinerary_num') is not None:
            self.itinerary_num = m.get('itinerary_num')
        if m.get('itinerary_price') is not None:
            self.itinerary_price = m.get('itinerary_price')
        if m.get('mileage') is not None:
            self.mileage = m.get('mileage')
        if m.get('most_difference_dept_time') is not None:
            self.most_difference_dept_time = m.get('most_difference_dept_time')
        if m.get('most_difference_discount') is not None:
            self.most_difference_discount = m.get('most_difference_discount')
        if m.get('most_difference_flight_no') is not None:
            self.most_difference_flight_no = m.get('most_difference_flight_no')
        if m.get('most_difference_price') is not None:
            self.most_difference_price = m.get('most_difference_price')
        if m.get('most_difference_reason') is not None:
            self.most_difference_reason = m.get('most_difference_reason')
        if m.get('most_price') is not None:
            self.most_price = m.get('most_price')
        if m.get('negotiation_coupon_fee') is not None:
            self.negotiation_coupon_fee = m.get('negotiation_coupon_fee')
        if m.get('oil_fee') is not None:
            self.oil_fee = m.get('oil_fee')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('person_settle_price') is not None:
            self.person_settle_price = m.get('person_settle_price')
        if m.get('pre_book_tip') is not None:
            self.pre_book_tip = m.get('pre_book_tip')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_result') is not None:
            self.refund_result = m.get('refund_result')
        if m.get('refund_upgrade_cost') is not None:
            self.refund_upgrade_cost = m.get('refund_upgrade_cost')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('repeat_refund') is not None:
            self.repeat_refund = m.get('repeat_refund')
        if m.get('seal_price') is not None:
            self.seal_price = m.get('seal_price')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_invoice_id') is not None:
            self.third_invoice_id = m.get('third_invoice_id')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('ticket_id') is not None:
            self.ticket_id = m.get('ticket_id')
        if m.get('trade') is not None:
            self.trade = m.get('trade')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type') is not None:
            self.traveler_member_type = m.get('traveler_member_type')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('upgrade_cost') is not None:
            self.upgrade_cost = m.get('upgrade_cost')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        if m.get('voyage_name') is not None:
            self.voyage_name = m.get('voyage_name')
        return self


class CooperatorFlightBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        category: int = None,
        corp_id: str = None,
        items: List[CooperatorFlightBillSettlementQueryResponseBodyModuleItems] = None,
        period_end: str = None,
        period_start: str = None,
        total_size: int = None,
    ):
        self.category = category
        self.corp_id = corp_id
        self.items = items
        self.period_end = period_end
        self.period_start = period_start
        self.total_size = total_size

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = CooperatorFlightBillSettlementQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class CooperatorFlightBillSettlementQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: CooperatorFlightBillSettlementQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # trace_id
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CooperatorFlightBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CooperatorFlightBillSettlementQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CooperatorFlightBillSettlementQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CooperatorFlightBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CooperatorHotelBillSettlementQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class CooperatorHotelBillSettlementQueryRequest(TeaModel):
    def __init__(
        self,
        cooperator_id: str = None,
        page_no: int = None,
        page_size: int = None,
        period_end: str = None,
        period_start: str = None,
    ):
        self.cooperator_id = cooperator_id
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.period_end = period_end
        self.period_start = period_start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cooperator_id is not None:
            result['cooperator_id'] = self.cooperator_id
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cooperator_id') is not None:
            self.cooperator_id = m.get('cooperator_id')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class CooperatorHotelBillSettlementQueryResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        alipay_trade_no: str = None,
        apply_arr_city_code: str = None,
        apply_arr_city_name: str = None,
        apply_dep_city_code: str = None,
        apply_dep_city_name: str = None,
        apply_extend_field: str = None,
        apply_id: str = None,
        average_nights: float = None,
        bill_record_time: str = None,
        book_mode: str = None,
        book_reason: str = None,
        book_time: str = None,
        booker_id: str = None,
        booker_job_no: str = None,
        booker_name: str = None,
        brand_group: str = None,
        brand_name: str = None,
        business_trip_result: str = None,
        capital_direction: str = None,
        cascade_department: str = None,
        check_in_date: str = None,
        checkout_date: str = None,
        city: str = None,
        city_code: str = None,
        city_county: str = None,
        city_county_code: int = None,
        cooperator_bill_code: str = None,
        cooperator_name: str = None,
        cooperator_order_id: str = None,
        corp_refund_fee: float = None,
        corp_total_fee: float = None,
        cost_center: str = None,
        cost_center_number: str = None,
        department: str = None,
        department_id: str = None,
        exceed_reason: str = None,
        fee_type: str = None,
        fees: float = None,
        fines: float = None,
        fu_point_fee: float = None,
        hotel_name: str = None,
        index: str = None,
        invoice_title: str = None,
        is_early_departure: str = None,
        is_negotiation: str = None,
        is_share_str: str = None,
        nights: int = None,
        order_id: str = None,
        order_price: float = None,
        order_status_desc: str = None,
        order_type: str = None,
        over_apply_id: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        person_refund_fee: float = None,
        person_settle_price: float = None,
        primary_id: int = None,
        project_code: str = None,
        project_name: str = None,
        promotion_fee: float = None,
        remark: str = None,
        reserve_rule: int = None,
        room_no: str = None,
        room_number: int = None,
        room_price: float = None,
        room_type: str = None,
        service_fee: float = None,
        settlement_fee: float = None,
        settlement_grant_fee: float = None,
        settlement_time: str = None,
        settlement_type: str = None,
        star: str = None,
        status: int = None,
        sub_order_id: str = None,
        tax_rate: str = None,
        third_invoice_id: str = None,
        third_itinerary_id: str = None,
        total_nights: int = None,
        traveler_id: str = None,
        traveler_job_no: str = None,
        traveler_member_type: str = None,
        traveler_member_type_name: str = None,
        traveler_name: str = None,
        voucher_type: int = None,
    ):
        self.alipay_trade_no = alipay_trade_no
        self.apply_arr_city_code = apply_arr_city_code
        self.apply_arr_city_name = apply_arr_city_name
        self.apply_dep_city_code = apply_dep_city_code
        self.apply_dep_city_name = apply_dep_city_name
        self.apply_extend_field = apply_extend_field
        self.apply_id = apply_id
        self.average_nights = average_nights
        self.bill_record_time = bill_record_time
        self.book_mode = book_mode
        self.book_reason = book_reason
        self.book_time = book_time
        self.booker_id = booker_id
        self.booker_job_no = booker_job_no
        self.booker_name = booker_name
        self.brand_group = brand_group
        self.brand_name = brand_name
        self.business_trip_result = business_trip_result
        self.capital_direction = capital_direction
        self.cascade_department = cascade_department
        self.check_in_date = check_in_date
        self.checkout_date = checkout_date
        self.city = city
        self.city_code = city_code
        self.city_county = city_county
        self.city_county_code = city_county_code
        self.cooperator_bill_code = cooperator_bill_code
        self.cooperator_name = cooperator_name
        self.cooperator_order_id = cooperator_order_id
        self.corp_refund_fee = corp_refund_fee
        self.corp_total_fee = corp_total_fee
        self.cost_center = cost_center
        self.cost_center_number = cost_center_number
        self.department = department
        self.department_id = department_id
        self.exceed_reason = exceed_reason
        self.fee_type = fee_type
        self.fees = fees
        self.fines = fines
        self.fu_point_fee = fu_point_fee
        self.hotel_name = hotel_name
        self.index = index
        self.invoice_title = invoice_title
        self.is_early_departure = is_early_departure
        self.is_negotiation = is_negotiation
        self.is_share_str = is_share_str
        self.nights = nights
        self.order_id = order_id
        self.order_price = order_price
        self.order_status_desc = order_status_desc
        self.order_type = order_type
        self.over_apply_id = over_apply_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.person_refund_fee = person_refund_fee
        self.person_settle_price = person_settle_price
        self.primary_id = primary_id
        self.project_code = project_code
        self.project_name = project_name
        self.promotion_fee = promotion_fee
        self.remark = remark
        self.reserve_rule = reserve_rule
        self.room_no = room_no
        self.room_number = room_number
        self.room_price = room_price
        self.room_type = room_type
        self.service_fee = service_fee
        self.settlement_fee = settlement_fee
        self.settlement_grant_fee = settlement_grant_fee
        self.settlement_time = settlement_time
        self.settlement_type = settlement_type
        self.star = star
        self.status = status
        self.sub_order_id = sub_order_id
        self.tax_rate = tax_rate
        self.third_invoice_id = third_invoice_id
        self.third_itinerary_id = third_itinerary_id
        self.total_nights = total_nights
        self.traveler_id = traveler_id
        self.traveler_job_no = traveler_job_no
        self.traveler_member_type = traveler_member_type
        self.traveler_member_type_name = traveler_member_type_name
        self.traveler_name = traveler_name
        self.voucher_type = voucher_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.average_nights is not None:
            result['average_nights'] = self.average_nights
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_mode is not None:
            result['book_mode'] = self.book_mode
        if self.book_reason is not None:
            result['book_reason'] = self.book_reason
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.brand_group is not None:
            result['brand_group'] = self.brand_group
        if self.brand_name is not None:
            result['brand_name'] = self.brand_name
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.checkout_date is not None:
            result['checkout_date'] = self.checkout_date
        if self.city is not None:
            result['city'] = self.city
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_county is not None:
            result['city_county'] = self.city_county
        if self.city_county_code is not None:
            result['city_county_code'] = self.city_county_code
        if self.cooperator_bill_code is not None:
            result['cooperator_bill_code'] = self.cooperator_bill_code
        if self.cooperator_name is not None:
            result['cooperator_name'] = self.cooperator_name
        if self.cooperator_order_id is not None:
            result['cooperator_order_id'] = self.cooperator_order_id
        if self.corp_refund_fee is not None:
            result['corp_refund_fee'] = self.corp_refund_fee
        if self.corp_total_fee is not None:
            result['corp_total_fee'] = self.corp_total_fee
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.fees is not None:
            result['fees'] = self.fees
        if self.fines is not None:
            result['fines'] = self.fines
        if self.fu_point_fee is not None:
            result['fu_point_fee'] = self.fu_point_fee
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.index is not None:
            result['index'] = self.index
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.is_early_departure is not None:
            result['is_early_departure'] = self.is_early_departure
        if self.is_negotiation is not None:
            result['is_negotiation'] = self.is_negotiation
        if self.is_share_str is not None:
            result['is_share_str'] = self.is_share_str
        if self.nights is not None:
            result['nights'] = self.nights
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.order_type is not None:
            result['order_type'] = self.order_type
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.person_refund_fee is not None:
            result['person_refund_fee'] = self.person_refund_fee
        if self.person_settle_price is not None:
            result['person_settle_price'] = self.person_settle_price
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.promotion_fee is not None:
            result['promotion_fee'] = self.promotion_fee
        if self.remark is not None:
            result['remark'] = self.remark
        if self.reserve_rule is not None:
            result['reserve_rule'] = self.reserve_rule
        if self.room_no is not None:
            result['room_no'] = self.room_no
        if self.room_number is not None:
            result['room_number'] = self.room_number
        if self.room_price is not None:
            result['room_price'] = self.room_price
        if self.room_type is not None:
            result['room_type'] = self.room_type
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.star is not None:
            result['star'] = self.star
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_invoice_id is not None:
            result['third_invoice_id'] = self.third_invoice_id
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.total_nights is not None:
            result['total_nights'] = self.total_nights
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type is not None:
            result['traveler_member_type'] = self.traveler_member_type
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('average_nights') is not None:
            self.average_nights = m.get('average_nights')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_mode') is not None:
            self.book_mode = m.get('book_mode')
        if m.get('book_reason') is not None:
            self.book_reason = m.get('book_reason')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('brand_group') is not None:
            self.brand_group = m.get('brand_group')
        if m.get('brand_name') is not None:
            self.brand_name = m.get('brand_name')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('checkout_date') is not None:
            self.checkout_date = m.get('checkout_date')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_county') is not None:
            self.city_county = m.get('city_county')
        if m.get('city_county_code') is not None:
            self.city_county_code = m.get('city_county_code')
        if m.get('cooperator_bill_code') is not None:
            self.cooperator_bill_code = m.get('cooperator_bill_code')
        if m.get('cooperator_name') is not None:
            self.cooperator_name = m.get('cooperator_name')
        if m.get('cooperator_order_id') is not None:
            self.cooperator_order_id = m.get('cooperator_order_id')
        if m.get('corp_refund_fee') is not None:
            self.corp_refund_fee = m.get('corp_refund_fee')
        if m.get('corp_total_fee') is not None:
            self.corp_total_fee = m.get('corp_total_fee')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('fees') is not None:
            self.fees = m.get('fees')
        if m.get('fines') is not None:
            self.fines = m.get('fines')
        if m.get('fu_point_fee') is not None:
            self.fu_point_fee = m.get('fu_point_fee')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('is_early_departure') is not None:
            self.is_early_departure = m.get('is_early_departure')
        if m.get('is_negotiation') is not None:
            self.is_negotiation = m.get('is_negotiation')
        if m.get('is_share_str') is not None:
            self.is_share_str = m.get('is_share_str')
        if m.get('nights') is not None:
            self.nights = m.get('nights')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('order_type') is not None:
            self.order_type = m.get('order_type')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('person_refund_fee') is not None:
            self.person_refund_fee = m.get('person_refund_fee')
        if m.get('person_settle_price') is not None:
            self.person_settle_price = m.get('person_settle_price')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('promotion_fee') is not None:
            self.promotion_fee = m.get('promotion_fee')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('reserve_rule') is not None:
            self.reserve_rule = m.get('reserve_rule')
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        if m.get('room_number') is not None:
            self.room_number = m.get('room_number')
        if m.get('room_price') is not None:
            self.room_price = m.get('room_price')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('star') is not None:
            self.star = m.get('star')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_invoice_id') is not None:
            self.third_invoice_id = m.get('third_invoice_id')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('total_nights') is not None:
            self.total_nights = m.get('total_nights')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type') is not None:
            self.traveler_member_type = m.get('traveler_member_type')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class CooperatorHotelBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        category: int = None,
        corp_id: str = None,
        items: List[CooperatorHotelBillSettlementQueryResponseBodyModuleItems] = None,
        period_end: str = None,
        period_start: str = None,
        total_size: int = None,
    ):
        self.category = category
        self.corp_id = corp_id
        self.items = items
        self.period_end = period_end
        self.period_start = period_start
        self.total_size = total_size

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = CooperatorHotelBillSettlementQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class CooperatorHotelBillSettlementQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: CooperatorHotelBillSettlementQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CooperatorHotelBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CooperatorHotelBillSettlementQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CooperatorHotelBillSettlementQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CooperatorHotelBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CooperatorHotelEventPushHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class CooperatorHotelEventPushRequest(TeaModel):
    def __init__(
        self,
        change_order_status: int = None,
        change_order_status_desc: str = None,
        cooperator_order_id: str = None,
        event: str = None,
        event_desc: str = None,
        event_time: str = None,
        order_id: str = None,
    ):
        # This parameter is required.
        self.change_order_status = change_order_status
        # This parameter is required.
        self.change_order_status_desc = change_order_status_desc
        # This parameter is required.
        self.cooperator_order_id = cooperator_order_id
        # This parameter is required.
        self.event = event
        self.event_desc = event_desc
        # This parameter is required.
        self.event_time = event_time
        # This parameter is required.
        self.order_id = order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_order_status is not None:
            result['change_order_status'] = self.change_order_status
        if self.change_order_status_desc is not None:
            result['change_order_status_desc'] = self.change_order_status_desc
        if self.cooperator_order_id is not None:
            result['cooperator_order_id'] = self.cooperator_order_id
        if self.event is not None:
            result['event'] = self.event
        if self.event_desc is not None:
            result['event_desc'] = self.event_desc
        if self.event_time is not None:
            result['event_time'] = self.event_time
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_order_status') is not None:
            self.change_order_status = m.get('change_order_status')
        if m.get('change_order_status_desc') is not None:
            self.change_order_status_desc = m.get('change_order_status_desc')
        if m.get('cooperator_order_id') is not None:
            self.cooperator_order_id = m.get('cooperator_order_id')
        if m.get('event') is not None:
            self.event = m.get('event')
        if m.get('event_desc') is not None:
            self.event_desc = m.get('event_desc')
        if m.get('event_time') is not None:
            self.event_time = m.get('event_time')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class CooperatorHotelEventPushResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: bool = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class CooperatorHotelEventPushResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CooperatorHotelEventPushResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CooperatorHotelEventPushResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CooperatorSyncPayStatusHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class CooperatorSyncPayStatusRequest(TeaModel):
    def __init__(
        self,
        cooperator_order_id: str = None,
        cooperator_pay_no: str = None,
        order_id: str = None,
        pay_status: str = None,
        pay_time: int = None,
    ):
        # This parameter is required.
        self.cooperator_order_id = cooperator_order_id
        # This parameter is required.
        self.cooperator_pay_no = cooperator_pay_no
        # This parameter is required.
        self.order_id = order_id
        # This parameter is required.
        self.pay_status = pay_status
        # This parameter is required.
        self.pay_time = pay_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cooperator_order_id is not None:
            result['cooperator_order_id'] = self.cooperator_order_id
        if self.cooperator_pay_no is not None:
            result['cooperator_pay_no'] = self.cooperator_pay_no
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cooperator_order_id') is not None:
            self.cooperator_order_id = m.get('cooperator_order_id')
        if m.get('cooperator_pay_no') is not None:
            self.cooperator_pay_no = m.get('cooperator_pay_no')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        return self


class CooperatorSyncPayStatusResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class CooperatorSyncPayStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CooperatorSyncPayStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CooperatorSyncPayStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps(TeaModel):
    def __init__(
        self,
        corp_name: str = None,
        open_corp_id: str = None,
        true_corp_id: str = None,
    ):
        self.corp_name = corp_name
        self.open_corp_id = open_corp_id
        self.true_corp_id = true_corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.open_corp_id is not None:
            result['open_corp_id'] = self.open_corp_id
        if self.true_corp_id is not None:
            result['true_corp_id'] = self.true_corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('open_corp_id') is not None:
            self.open_corp_id = m.get('open_corp_id')
        if m.get('true_corp_id') is not None:
            self.true_corp_id = m.get('true_corp_id')
        return self


class CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp(TeaModel):
    def __init__(
        self,
        corp_name: str = None,
        open_corp_id: str = None,
        true_corp_id: str = None,
    ):
        self.corp_name = corp_name
        self.open_corp_id = open_corp_id
        self.true_corp_id = true_corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.open_corp_id is not None:
            result['open_corp_id'] = self.open_corp_id
        if self.true_corp_id is not None:
            result['true_corp_id'] = self.true_corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('open_corp_id') is not None:
            self.open_corp_id = m.get('open_corp_id')
        if m.get('true_corp_id') is not None:
            self.true_corp_id = m.get('true_corp_id')
        return self


class CorpAuthLinkInfoQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        link_corps: List[CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps] = None,
        org_corp: CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp = None,
    ):
        self.link_corps = link_corps
        self.org_corp = org_corp

    def validate(self):
        if self.link_corps:
            for k in self.link_corps:
                if k:
                    k.validate()
        if self.org_corp:
            self.org_corp.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['link_corps'] = []
        if self.link_corps is not None:
            for k in self.link_corps:
                result['link_corps'].append(k.to_map() if k else None)
        if self.org_corp is not None:
            result['org_corp'] = self.org_corp.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.link_corps = []
        if m.get('link_corps') is not None:
            for k in m.get('link_corps'):
                temp_model = CorpAuthLinkInfoQueryResponseBodyModuleLinkCorps()
                self.link_corps.append(temp_model.from_map(k))
        if m.get('org_corp') is not None:
            temp_model = CorpAuthLinkInfoQueryResponseBodyModuleOrgCorp()
            self.org_corp = temp_model.from_map(m['org_corp'])
        return self


class CorpAuthLinkInfoQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: CorpAuthLinkInfoQueryResponseBodyModule = None,
        request_id: str = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CorpAuthLinkInfoQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CorpAuthLinkInfoQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CorpAuthLinkInfoQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CorpAuthLinkInfoQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CorpTokenHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_access_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_access_token = x_acs_btrip_access_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_access_token is not None:
            result['x-acs-btrip-access-token'] = self.x_acs_btrip_access_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-access-token') is not None:
            self.x_acs_btrip_access_token = m.get('x-acs-btrip-access-token')
        return self


class CorpTokenRequest(TeaModel):
    def __init__(
        self,
        app_secret: str = None,
        corp_id: str = None,
        type: int = None,
    ):
        self.app_secret = app_secret
        # This parameter is required.
        self.corp_id = corp_id
        # This parameter is required.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_secret is not None:
            result['app_secret'] = self.app_secret
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_secret') is not None:
            self.app_secret = m.get('app_secret')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class CorpTokenResponseBodyData(TeaModel):
    def __init__(
        self,
        expire: int = None,
        token: str = None,
    ):
        self.expire = expire
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class CorpTokenResponseBodyModule(TeaModel):
    def __init__(
        self,
        expire: int = None,
        start: int = None,
        token: str = None,
    ):
        self.expire = expire
        self.start = start
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.start is not None:
            result['start'] = self.start
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('start') is not None:
            self.start = m.get('start')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class CorpTokenResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: CorpTokenResponseBodyData = None,
        message: str = None,
        module: CorpTokenResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.module = module
        self.request_id = request_id
        # 是否成功
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.data:
            self.data.validate()
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            temp_model = CorpTokenResponseBodyData()
            self.data = temp_model.from_map(m['data'])
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CorpTokenResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CorpTokenResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CorpTokenResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CorpTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CostCenterDeleteHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CostCenterDeleteRequest(TeaModel):
    def __init__(
        self,
        thirdpart_id: str = None,
    ):
        # This parameter is required.
        self.thirdpart_id = thirdpart_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class CostCenterDeleteResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CostCenterDeleteResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CostCenterDeleteResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CostCenterDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CostCenterModifyHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CostCenterModifyRequest(TeaModel):
    def __init__(
        self,
        alipay_no: str = None,
        disable: int = None,
        number: str = None,
        scope: int = None,
        thirdpart_id: str = None,
        title: str = None,
    ):
        self.alipay_no = alipay_no
        self.disable = disable
        self.number = number
        # This parameter is required.
        self.scope = scope
        # This parameter is required.
        self.thirdpart_id = thirdpart_id
        # This parameter is required.
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_no is not None:
            result['alipay_no'] = self.alipay_no
        if self.disable is not None:
            result['disable'] = self.disable
        if self.number is not None:
            result['number'] = self.number
        if self.scope is not None:
            result['scope'] = self.scope
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_no') is not None:
            self.alipay_no = m.get('alipay_no')
        if m.get('disable') is not None:
            self.disable = m.get('disable')
        if m.get('number') is not None:
            self.number = m.get('number')
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CostCenterModifyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CostCenterModifyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CostCenterModifyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CostCenterModifyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CostCenterQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CostCenterQueryRequest(TeaModel):
    def __init__(
        self,
        disable: int = None,
        need_org_entity: bool = None,
        thirdpart_id: str = None,
        title: str = None,
        user_id: str = None,
    ):
        self.disable = disable
        self.need_org_entity = need_org_entity
        self.thirdpart_id = thirdpart_id
        self.title = title
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.disable is not None:
            result['disable'] = self.disable
        if self.need_org_entity is not None:
            result['need_org_entity'] = self.need_org_entity
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.title is not None:
            result['title'] = self.title
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('disable') is not None:
            self.disable = m.get('disable')
        if m.get('need_org_entity') is not None:
            self.need_org_entity = m.get('need_org_entity')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CostCenterQueryResponseBodyModuleEntityDOS(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        entity_id: str = None,
        entity_type: str = None,
        name: str = None,
        user_num: int = None,
    ):
        self.corp_id = corp_id
        self.entity_id = entity_id
        self.entity_type = entity_type
        self.name = name
        self.user_num = user_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        if self.name is not None:
            result['name'] = self.name
        if self.user_num is not None:
            result['user_num'] = self.user_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('user_num') is not None:
            self.user_num = m.get('user_num')
        return self


class CostCenterQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        alipay_no: str = None,
        corp_id: str = None,
        disable: int = None,
        entity_dos: List[CostCenterQueryResponseBodyModuleEntityDOS] = None,
        id: int = None,
        number: str = None,
        rule_code: int = None,
        scope: int = None,
        thirdpart_id: str = None,
        title: str = None,
    ):
        self.alipay_no = alipay_no
        self.corp_id = corp_id
        self.disable = disable
        self.entity_dos = entity_dos
        self.id = id
        self.number = number
        # rule code
        self.rule_code = rule_code
        self.scope = scope
        self.thirdpart_id = thirdpart_id
        self.title = title

    def validate(self):
        if self.entity_dos:
            for k in self.entity_dos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_no is not None:
            result['alipay_no'] = self.alipay_no
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.disable is not None:
            result['disable'] = self.disable
        result['entity_d_o_s'] = []
        if self.entity_dos is not None:
            for k in self.entity_dos:
                result['entity_d_o_s'].append(k.to_map() if k else None)
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        if self.rule_code is not None:
            result['rule_code'] = self.rule_code
        if self.scope is not None:
            result['scope'] = self.scope
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_no') is not None:
            self.alipay_no = m.get('alipay_no')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('disable') is not None:
            self.disable = m.get('disable')
        self.entity_dos = []
        if m.get('entity_d_o_s') is not None:
            for k in m.get('entity_d_o_s'):
                temp_model = CostCenterQueryResponseBodyModuleEntityDOS()
                self.entity_dos.append(temp_model.from_map(k))
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        if m.get('rule_code') is not None:
            self.rule_code = m.get('rule_code')
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CostCenterQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[CostCenterQueryResponseBodyModule] = None,
        more_page: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.more_page = more_page
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.more_page is not None:
            result['more_page'] = self.more_page
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = CostCenterQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('more_page') is not None:
            self.more_page = m.get('more_page')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CostCenterQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CostCenterQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CostCenterQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CostCenterSaveHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class CostCenterSaveRequest(TeaModel):
    def __init__(
        self,
        alipay_no: str = None,
        disable: int = None,
        number: str = None,
        scope: int = None,
        thirdpart_id: str = None,
        title: str = None,
    ):
        self.alipay_no = alipay_no
        self.disable = disable
        self.number = number
        # This parameter is required.
        self.scope = scope
        # This parameter is required.
        self.thirdpart_id = thirdpart_id
        # This parameter is required.
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_no is not None:
            result['alipay_no'] = self.alipay_no
        if self.disable is not None:
            result['disable'] = self.disable
        if self.number is not None:
            result['number'] = self.number
        if self.scope is not None:
            result['scope'] = self.scope
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_no') is not None:
            self.alipay_no = m.get('alipay_no')
        if m.get('disable') is not None:
            self.disable = m.get('disable')
        if m.get('number') is not None:
            self.number = m.get('number')
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class CostCenterSaveResponseBodyModule(TeaModel):
    def __init__(
        self,
        id: int = None,
    ):
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class CostCenterSaveResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: CostCenterSaveResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CostCenterSaveResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CostCenterSaveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CostCenterSaveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CostCenterSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCustomRoleHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class CreateCustomRoleRequest(TeaModel):
    def __init__(
        self,
        role_id: str = None,
        role_name: str = None,
    ):
        # This parameter is required.
        self.role_id = role_id
        # This parameter is required.
        self.role_name = role_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.role_id is not None:
            result['role_id'] = self.role_id
        if self.role_name is not None:
            result['role_name'] = self.role_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('role_id') is not None:
            self.role_id = m.get('role_id')
        if m.get('role_name') is not None:
            self.role_name = m.get('role_name')
        return self


class CreateCustomRoleResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CreateCustomRoleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateCustomRoleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateCustomRoleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSubCorpHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class CreateSubCorpRequest(TeaModel):
    def __init__(
        self,
        outer_corp_id: str = None,
        outer_corp_name: str = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.outer_corp_id = outer_corp_id
        # This parameter is required.
        self.outer_corp_name = outer_corp_name
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.outer_corp_id is not None:
            result['outer_corp_id'] = self.outer_corp_id
        if self.outer_corp_name is not None:
            result['outer_corp_name'] = self.outer_corp_name
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('outer_corp_id') is not None:
            self.outer_corp_id = m.get('outer_corp_id')
        if m.get('outer_corp_name') is not None:
            self.outer_corp_name = m.get('outer_corp_name')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class CreateSubCorpResponseBodyModule(TeaModel):
    def __init__(
        self,
        sub_corp_id: str = None,
    ):
        self.sub_corp_id = sub_corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        return self


class CreateSubCorpResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: CreateSubCorpResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = CreateSubCorpResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class CreateSubCorpResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSubCorpResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSubCorpResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteCustomRoleHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class DeleteCustomRoleRequest(TeaModel):
    def __init__(
        self,
        role_id: str = None,
    ):
        # This parameter is required.
        self.role_id = role_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.role_id is not None:
            result['role_id'] = self.role_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('role_id') is not None:
            self.role_id = m.get('role_id')
        return self


class DeleteCustomRoleResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class DeleteCustomRoleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteCustomRoleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteCustomRoleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDepartmentHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class DeleteDepartmentRequest(TeaModel):
    def __init__(
        self,
        out_dept_id: str = None,
    ):
        # This parameter is required.
        self.out_dept_id = out_dept_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.out_dept_id is not None:
            result['out_dept_id'] = self.out_dept_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('out_dept_id') is not None:
            self.out_dept_id = m.get('out_dept_id')
        return self


class DeleteDepartmentResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class DeleteDepartmentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDepartmentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDepartmentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteEmployeesFromCustomRoleHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class DeleteEmployeesFromCustomRoleRequest(TeaModel):
    def __init__(
        self,
        role_id: str = None,
        user_id_list: List[str] = None,
    ):
        # This parameter is required.
        self.role_id = role_id
        # This parameter is required.
        self.user_id_list = user_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.role_id is not None:
            result['role_id'] = self.role_id
        if self.user_id_list is not None:
            result['user_id_list'] = self.user_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('role_id') is not None:
            self.role_id = m.get('role_id')
        if m.get('user_id_list') is not None:
            self.user_id_list = m.get('user_id_list')
        return self


class DeleteEmployeesFromCustomRoleShrinkRequest(TeaModel):
    def __init__(
        self,
        role_id: str = None,
        user_id_list_shrink: str = None,
    ):
        # This parameter is required.
        self.role_id = role_id
        # This parameter is required.
        self.user_id_list_shrink = user_id_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.role_id is not None:
            result['role_id'] = self.role_id
        if self.user_id_list_shrink is not None:
            result['user_id_list'] = self.user_id_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('role_id') is not None:
            self.role_id = m.get('role_id')
        if m.get('user_id_list') is not None:
            self.user_id_list_shrink = m.get('user_id_list')
        return self


class DeleteEmployeesFromCustomRoleResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class DeleteEmployeesFromCustomRoleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteEmployeesFromCustomRoleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteEmployeesFromCustomRoleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteInvoiceEntityHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class DeleteInvoiceEntityRequestEntities(TeaModel):
    def __init__(
        self,
        entity_id: str = None,
        entity_type: str = None,
    ):
        self.entity_id = entity_id
        self.entity_type = entity_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class DeleteInvoiceEntityRequest(TeaModel):
    def __init__(
        self,
        del_all: bool = None,
        entities: List[DeleteInvoiceEntityRequestEntities] = None,
        third_part_id: str = None,
    ):
        self.del_all = del_all
        self.entities = entities
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        if self.entities:
            for k in self.entities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        result['entities'] = []
        if self.entities is not None:
            for k in self.entities:
                result['entities'].append(k.to_map() if k else None)
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        self.entities = []
        if m.get('entities') is not None:
            for k in m.get('entities'):
                temp_model = DeleteInvoiceEntityRequestEntities()
                self.entities.append(temp_model.from_map(k))
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class DeleteInvoiceEntityShrinkRequest(TeaModel):
    def __init__(
        self,
        del_all: bool = None,
        entities_shrink: str = None,
        third_part_id: str = None,
    ):
        self.del_all = del_all
        self.entities_shrink = entities_shrink
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        if self.entities_shrink is not None:
            result['entities'] = self.entities_shrink
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        if m.get('entities') is not None:
            self.entities_shrink = m.get('entities')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class DeleteInvoiceEntityResponseBodyModule(TeaModel):
    def __init__(
        self,
        remove_num: int = None,
        selected_user_num: int = None,
    ):
        self.remove_num = remove_num
        self.selected_user_num = selected_user_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.remove_num is not None:
            result['remove_num'] = self.remove_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('remove_num') is not None:
            self.remove_num = m.get('remove_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class DeleteInvoiceEntityResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: DeleteInvoiceEntityResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = DeleteInvoiceEntityResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class DeleteInvoiceEntityResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteInvoiceEntityResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteInvoiceEntityResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DepartmentSaveHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class DepartmentSaveRequestDepartList(TeaModel):
    def __init__(
        self,
        depart_id: int = None,
        depart_name: str = None,
        depart_pid: int = None,
        manager_ids: str = None,
        status: int = None,
        third_depart_id: str = None,
        third_depart_pid: str = None,
    ):
        self.depart_id = depart_id
        # This parameter is required.
        self.depart_name = depart_name
        self.depart_pid = depart_pid
        self.manager_ids = manager_ids
        self.status = status
        self.third_depart_id = third_depart_id
        self.third_depart_pid = third_depart_pid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.depart_pid is not None:
            result['depart_pid'] = self.depart_pid
        if self.manager_ids is not None:
            result['manager_ids'] = self.manager_ids
        if self.status is not None:
            result['status'] = self.status
        if self.third_depart_id is not None:
            result['third_depart_id'] = self.third_depart_id
        if self.third_depart_pid is not None:
            result['third_depart_pid'] = self.third_depart_pid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('depart_pid') is not None:
            self.depart_pid = m.get('depart_pid')
        if m.get('manager_ids') is not None:
            self.manager_ids = m.get('manager_ids')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_depart_id') is not None:
            self.third_depart_id = m.get('third_depart_id')
        if m.get('third_depart_pid') is not None:
            self.third_depart_pid = m.get('third_depart_pid')
        return self


class DepartmentSaveRequest(TeaModel):
    def __init__(
        self,
        depart_list: List[DepartmentSaveRequestDepartList] = None,
    ):
        self.depart_list = depart_list

    def validate(self):
        if self.depart_list:
            for k in self.depart_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['depart_list'] = []
        if self.depart_list is not None:
            for k in self.depart_list:
                result['depart_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.depart_list = []
        if m.get('depart_list') is not None:
            for k in m.get('depart_list'):
                temp_model = DepartmentSaveRequestDepartList()
                self.depart_list.append(temp_model.from_map(k))
        return self


class DepartmentSaveShrinkRequest(TeaModel):
    def __init__(
        self,
        depart_list_shrink: str = None,
    ):
        self.depart_list_shrink = depart_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.depart_list_shrink is not None:
            result['depart_list'] = self.depart_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('depart_list') is not None:
            self.depart_list_shrink = m.get('depart_list')
        return self


class DepartmentSaveResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class DepartmentSaveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DepartmentSaveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DepartmentSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EntityAddHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class EntityAddRequestEntityDOList(TeaModel):
    def __init__(
        self,
        entity_id: str = None,
        entity_type: str = None,
    ):
        self.entity_id = entity_id
        self.entity_type = entity_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class EntityAddRequest(TeaModel):
    def __init__(
        self,
        entity_dolist: List[EntityAddRequestEntityDOList] = None,
        thirdpart_id: str = None,
    ):
        self.entity_dolist = entity_dolist
        # This parameter is required.
        self.thirdpart_id = thirdpart_id

    def validate(self):
        if self.entity_dolist:
            for k in self.entity_dolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['entity_d_o_list'] = []
        if self.entity_dolist is not None:
            for k in self.entity_dolist:
                result['entity_d_o_list'].append(k.to_map() if k else None)
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.entity_dolist = []
        if m.get('entity_d_o_list') is not None:
            for k in m.get('entity_d_o_list'):
                temp_model = EntityAddRequestEntityDOList()
                self.entity_dolist.append(temp_model.from_map(k))
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntityAddShrinkRequest(TeaModel):
    def __init__(
        self,
        entity_dolist_shrink: str = None,
        thirdpart_id: str = None,
    ):
        self.entity_dolist_shrink = entity_dolist_shrink
        # This parameter is required.
        self.thirdpart_id = thirdpart_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_dolist_shrink is not None:
            result['entity_d_o_list'] = self.entity_dolist_shrink
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entity_d_o_list') is not None:
            self.entity_dolist_shrink = m.get('entity_d_o_list')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntityAddResponseBodyModule(TeaModel):
    def __init__(
        self,
        add_num: int = None,
        selected_user_num: int = None,
    ):
        self.add_num = add_num
        self.selected_user_num = selected_user_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_num is not None:
            result['add_num'] = self.add_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('add_num') is not None:
            self.add_num = m.get('add_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class EntityAddResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: EntityAddResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = EntityAddResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class EntityAddResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: EntityAddResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EntityAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EntityDeleteHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class EntityDeleteRequestEntityDOList(TeaModel):
    def __init__(
        self,
        entity_id: str = None,
        entity_type: str = None,
    ):
        # This parameter is required.
        self.entity_id = entity_id
        # This parameter is required.
        self.entity_type = entity_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class EntityDeleteRequest(TeaModel):
    def __init__(
        self,
        del_all: bool = None,
        entity_dolist: List[EntityDeleteRequestEntityDOList] = None,
        thirdpart_id: str = None,
    ):
        # This parameter is required.
        self.del_all = del_all
        self.entity_dolist = entity_dolist
        # This parameter is required.
        self.thirdpart_id = thirdpart_id

    def validate(self):
        if self.entity_dolist:
            for k in self.entity_dolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        result['entity_d_o_list'] = []
        if self.entity_dolist is not None:
            for k in self.entity_dolist:
                result['entity_d_o_list'].append(k.to_map() if k else None)
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        self.entity_dolist = []
        if m.get('entity_d_o_list') is not None:
            for k in m.get('entity_d_o_list'):
                temp_model = EntityDeleteRequestEntityDOList()
                self.entity_dolist.append(temp_model.from_map(k))
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntityDeleteShrinkRequest(TeaModel):
    def __init__(
        self,
        del_all: bool = None,
        entity_dolist_shrink: str = None,
        thirdpart_id: str = None,
    ):
        # This parameter is required.
        self.del_all = del_all
        self.entity_dolist_shrink = entity_dolist_shrink
        # This parameter is required.
        self.thirdpart_id = thirdpart_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        if self.entity_dolist_shrink is not None:
            result['entity_d_o_list'] = self.entity_dolist_shrink
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        if m.get('entity_d_o_list') is not None:
            self.entity_dolist_shrink = m.get('entity_d_o_list')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntityDeleteResponseBodyModule(TeaModel):
    def __init__(
        self,
        remove_num: int = None,
        selected_user_num: int = None,
    ):
        self.remove_num = remove_num
        self.selected_user_num = selected_user_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.remove_num is not None:
            result['remove_num'] = self.remove_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('remove_num') is not None:
            self.remove_num = m.get('remove_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class EntityDeleteResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: EntityDeleteResponseBodyModule = None,
        more_page: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.more_page = more_page
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.more_page is not None:
            result['more_page'] = self.more_page
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = EntityDeleteResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('more_page') is not None:
            self.more_page = m.get('more_page')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class EntityDeleteResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: EntityDeleteResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EntityDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EntitySetHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class EntitySetRequestEntityDOList(TeaModel):
    def __init__(
        self,
        entity_id: str = None,
        entity_type: str = None,
    ):
        # This parameter is required.
        self.entity_id = entity_id
        # This parameter is required.
        self.entity_type = entity_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class EntitySetRequest(TeaModel):
    def __init__(
        self,
        entity_dolist: List[EntitySetRequestEntityDOList] = None,
        thirdpart_id: str = None,
    ):
        self.entity_dolist = entity_dolist
        # This parameter is required.
        self.thirdpart_id = thirdpart_id

    def validate(self):
        if self.entity_dolist:
            for k in self.entity_dolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['entity_d_o_list'] = []
        if self.entity_dolist is not None:
            for k in self.entity_dolist:
                result['entity_d_o_list'].append(k.to_map() if k else None)
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.entity_dolist = []
        if m.get('entity_d_o_list') is not None:
            for k in m.get('entity_d_o_list'):
                temp_model = EntitySetRequestEntityDOList()
                self.entity_dolist.append(temp_model.from_map(k))
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntitySetShrinkRequest(TeaModel):
    def __init__(
        self,
        entity_dolist_shrink: str = None,
        thirdpart_id: str = None,
    ):
        self.entity_dolist_shrink = entity_dolist_shrink
        # This parameter is required.
        self.thirdpart_id = thirdpart_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_dolist_shrink is not None:
            result['entity_d_o_list'] = self.entity_dolist_shrink
        if self.thirdpart_id is not None:
            result['thirdpart_id'] = self.thirdpart_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entity_d_o_list') is not None:
            self.entity_dolist_shrink = m.get('entity_d_o_list')
        if m.get('thirdpart_id') is not None:
            self.thirdpart_id = m.get('thirdpart_id')
        return self


class EntitySetResponseBodyModule(TeaModel):
    def __init__(
        self,
        add_num: int = None,
        remove_num: int = None,
        selected_user_num: int = None,
    ):
        self.add_num = add_num
        self.remove_num = remove_num
        self.selected_user_num = selected_user_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_num is not None:
            result['add_num'] = self.add_num
        if self.remove_num is not None:
            result['remove_num'] = self.remove_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('add_num') is not None:
            self.add_num = m.get('add_num')
        if m.get('remove_num') is not None:
            self.remove_num = m.get('remove_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class EntitySetResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: EntitySetResponseBodyModule = None,
        more_page: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.more_page = more_page
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.more_page is not None:
            result['more_page'] = self.more_page
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = EntitySetResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('more_page') is not None:
            self.more_page = m.get('more_page')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class EntitySetResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: EntitySetResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EntitySetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class EstimatedPriceQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class EstimatedPriceQueryRequest(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        category: str = None,
        dep_city: str = None,
        end_time: int = None,
        itinerary_id: str = None,
        start_time: int = None,
        sub_corp_id: str = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.arr_city = arr_city
        # This parameter is required.
        self.category = category
        # This parameter is required.
        self.dep_city = dep_city
        # This parameter is required.
        self.end_time = end_time
        self.itinerary_id = itinerary_id
        # This parameter is required.
        self.start_time = start_time
        self.sub_corp_id = sub_corp_id
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.category is not None:
            result['category'] = self.category
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class EstimatedPriceQueryResponseBodyModuleHotelFeeDetail(TeaModel):
    def __init__(
        self,
        city: str = None,
        criterion: int = None,
        itinerary_id: str = None,
        total: int = None,
        trip_days: int = None,
    ):
        self.city = city
        self.criterion = criterion
        self.itinerary_id = itinerary_id
        self.total = total
        self.trip_days = trip_days

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city is not None:
            result['city'] = self.city
        if self.criterion is not None:
            result['criterion'] = self.criterion
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.total is not None:
            result['total'] = self.total
        if self.trip_days is not None:
            result['trip_days'] = self.trip_days
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('criterion') is not None:
            self.criterion = m.get('criterion')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('total') is not None:
            self.total = m.get('total')
        if m.get('trip_days') is not None:
            self.trip_days = m.get('trip_days')
        return self


class EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest(TeaModel):
    def __init__(
        self,
        arr_time: str = None,
        dep_time: str = None,
        fee: int = None,
        seat_grade: str = None,
        vehicle_no: str = None,
    ):
        self.arr_time = arr_time
        self.dep_time = dep_time
        self.fee = fee
        self.seat_grade = seat_grade
        self.vehicle_no = vehicle_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.fee is not None:
            result['fee'] = self.fee
        if self.seat_grade is not None:
            result['seat_grade'] = self.seat_grade
        if self.vehicle_no is not None:
            result['vehicle_no'] = self.vehicle_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        if m.get('seat_grade') is not None:
            self.seat_grade = m.get('seat_grade')
        if m.get('vehicle_no') is not None:
            self.vehicle_no = m.get('vehicle_no')
        return self


class EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive(TeaModel):
    def __init__(
        self,
        arr_time: str = None,
        dep_time: str = None,
        fee: int = None,
        seat_grade: str = None,
        vehicle_no: str = None,
    ):
        self.arr_time = arr_time
        self.dep_time = dep_time
        self.fee = fee
        self.seat_grade = seat_grade
        self.vehicle_no = vehicle_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.fee is not None:
            result['fee'] = self.fee
        if self.seat_grade is not None:
            result['seat_grade'] = self.seat_grade
        if self.vehicle_no is not None:
            result['vehicle_no'] = self.vehicle_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        if m.get('seat_grade') is not None:
            self.seat_grade = m.get('seat_grade')
        if m.get('vehicle_no') is not None:
            self.vehicle_no = m.get('vehicle_no')
        return self


class EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        arr_date: int = None,
        cheapest: EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest = None,
        dep_city: str = None,
        dep_date: int = None,
        err_msg: str = None,
        itinerary_id: str = None,
        most_expensive: EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive = None,
        success: bool = None,
    ):
        self.arr_city = arr_city
        self.arr_date = arr_date
        self.cheapest = cheapest
        self.dep_city = dep_city
        self.dep_date = dep_date
        self.err_msg = err_msg
        self.itinerary_id = itinerary_id
        self.most_expensive = most_expensive
        self.success = success

    def validate(self):
        if self.cheapest:
            self.cheapest.validate()
        if self.most_expensive:
            self.most_expensive.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cheapest is not None:
            result['cheapest'] = self.cheapest.to_map()
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.err_msg is not None:
            result['err_msg'] = self.err_msg
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.most_expensive is not None:
            result['most_expensive'] = self.most_expensive.to_map()
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cheapest') is not None:
            temp_model = EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesCheapest()
            self.cheapest = temp_model.from_map(m['cheapest'])
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('err_msg') is not None:
            self.err_msg = m.get('err_msg')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('most_expensive') is not None:
            temp_model = EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutesMostExpensive()
            self.most_expensive = temp_model.from_map(m['most_expensive'])
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class EstimatedPriceQueryResponseBodyModuleTrafficFee(TeaModel):
    def __init__(
        self,
        btrip_routes: List[EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes] = None,
        err_msg: str = None,
        max_fee: int = None,
        min_fee: int = None,
        success: bool = None,
    ):
        self.btrip_routes = btrip_routes
        self.err_msg = err_msg
        self.max_fee = max_fee
        self.min_fee = min_fee
        self.success = success

    def validate(self):
        if self.btrip_routes:
            for k in self.btrip_routes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['btrip_routes'] = []
        if self.btrip_routes is not None:
            for k in self.btrip_routes:
                result['btrip_routes'].append(k.to_map() if k else None)
        if self.err_msg is not None:
            result['err_msg'] = self.err_msg
        if self.max_fee is not None:
            result['max_fee'] = self.max_fee
        if self.min_fee is not None:
            result['min_fee'] = self.min_fee
        if self.success is not None:
            result['success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.btrip_routes = []
        if m.get('btrip_routes') is not None:
            for k in m.get('btrip_routes'):
                temp_model = EstimatedPriceQueryResponseBodyModuleTrafficFeeBtripRoutes()
                self.btrip_routes.append(temp_model.from_map(k))
        if m.get('err_msg') is not None:
            self.err_msg = m.get('err_msg')
        if m.get('max_fee') is not None:
            self.max_fee = m.get('max_fee')
        if m.get('min_fee') is not None:
            self.min_fee = m.get('min_fee')
        if m.get('success') is not None:
            self.success = m.get('success')
        return self


class EstimatedPriceQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        hotel_fee_detail: List[EstimatedPriceQueryResponseBodyModuleHotelFeeDetail] = None,
        total_hotel_fee: int = None,
        traffic_fee: EstimatedPriceQueryResponseBodyModuleTrafficFee = None,
    ):
        self.hotel_fee_detail = hotel_fee_detail
        # 酒店费用总额，单位为元
        self.total_hotel_fee = total_hotel_fee
        self.traffic_fee = traffic_fee

    def validate(self):
        if self.hotel_fee_detail:
            for k in self.hotel_fee_detail:
                if k:
                    k.validate()
        if self.traffic_fee:
            self.traffic_fee.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['hotel_fee_detail'] = []
        if self.hotel_fee_detail is not None:
            for k in self.hotel_fee_detail:
                result['hotel_fee_detail'].append(k.to_map() if k else None)
        if self.total_hotel_fee is not None:
            result['total_hotel_fee'] = self.total_hotel_fee
        if self.traffic_fee is not None:
            result['traffic_fee'] = self.traffic_fee.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.hotel_fee_detail = []
        if m.get('hotel_fee_detail') is not None:
            for k in m.get('hotel_fee_detail'):
                temp_model = EstimatedPriceQueryResponseBodyModuleHotelFeeDetail()
                self.hotel_fee_detail.append(temp_model.from_map(k))
        if m.get('total_hotel_fee') is not None:
            self.total_hotel_fee = m.get('total_hotel_fee')
        if m.get('traffic_fee') is not None:
            temp_model = EstimatedPriceQueryResponseBodyModuleTrafficFee()
            self.traffic_fee = temp_model.from_map(m['traffic_fee'])
        return self


class EstimatedPriceQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: int = None,
        message: str = None,
        module: EstimatedPriceQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = EstimatedPriceQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class EstimatedPriceQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: EstimatedPriceQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = EstimatedPriceQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExceedApplySyncHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ExceedApplySyncRequest(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        biz_category: int = None,
        remark: str = None,
        status: int = None,
        thirdparty_flow_id: str = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.apply_id = apply_id
        self.biz_category = biz_category
        self.remark = remark
        # This parameter is required.
        self.status = status
        self.thirdparty_flow_id = thirdparty_flow_id
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.biz_category is not None:
            result['biz_category'] = self.biz_category
        if self.remark is not None:
            result['remark'] = self.remark
        if self.status is not None:
            result['status'] = self.status
        if self.thirdparty_flow_id is not None:
            result['thirdparty_flow_id'] = self.thirdparty_flow_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('biz_category') is not None:
            self.biz_category = m.get('biz_category')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('thirdparty_flow_id') is not None:
            self.thirdparty_flow_id = m.get('thirdparty_flow_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class ExceedApplySyncResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ExceedApplySyncResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ExceedApplySyncResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExceedApplySyncResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExternalUserAddHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class ExternalUserAddRequestCertRequestList(TeaModel):
    def __init__(
        self,
        cert_expired_time: str = None,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        nationality: str = None,
    ):
        self.cert_expired_time = cert_expired_time
        self.cert_nation = cert_nation
        # This parameter is required.
        self.cert_no = cert_no
        # This parameter is required.
        self.cert_type = cert_type
        self.nationality = nationality

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_expired_time is not None:
            result['cert_expired_time'] = self.cert_expired_time
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.nationality is not None:
            result['nationality'] = self.nationality
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_expired_time') is not None:
            self.cert_expired_time = m.get('cert_expired_time')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        return self


class ExternalUserAddRequest(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cert_request_list: List[ExternalUserAddRequestCertRequestList] = None,
        email: str = None,
        external_user_id: str = None,
        phone: str = None,
        real_name: str = None,
        real_name_en: str = None,
        user_type: int = None,
    ):
        self.birthday = birthday
        self.cert_request_list = cert_request_list
        self.email = email
        # This parameter is required.
        self.external_user_id = external_user_id
        self.phone = phone
        # This parameter is required.
        self.real_name = real_name
        self.real_name_en = real_name_en
        # This parameter is required.
        self.user_type = user_type

    def validate(self):
        if self.cert_request_list:
            for k in self.cert_request_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        result['cert_request_list'] = []
        if self.cert_request_list is not None:
            for k in self.cert_request_list:
                result['cert_request_list'].append(k.to_map() if k else None)
        if self.email is not None:
            result['email'] = self.email
        if self.external_user_id is not None:
            result['external_user_id'] = self.external_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        self.cert_request_list = []
        if m.get('cert_request_list') is not None:
            for k in m.get('cert_request_list'):
                temp_model = ExternalUserAddRequestCertRequestList()
                self.cert_request_list.append(temp_model.from_map(k))
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('external_user_id') is not None:
            self.external_user_id = m.get('external_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class ExternalUserAddShrinkRequest(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cert_request_list_shrink: str = None,
        email: str = None,
        external_user_id: str = None,
        phone: str = None,
        real_name: str = None,
        real_name_en: str = None,
        user_type: int = None,
    ):
        self.birthday = birthday
        self.cert_request_list_shrink = cert_request_list_shrink
        self.email = email
        # This parameter is required.
        self.external_user_id = external_user_id
        self.phone = phone
        # This parameter is required.
        self.real_name = real_name
        self.real_name_en = real_name_en
        # This parameter is required.
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_request_list_shrink is not None:
            result['cert_request_list'] = self.cert_request_list_shrink
        if self.email is not None:
            result['email'] = self.email
        if self.external_user_id is not None:
            result['external_user_id'] = self.external_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_request_list') is not None:
            self.cert_request_list_shrink = m.get('cert_request_list')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('external_user_id') is not None:
            self.external_user_id = m.get('external_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class ExternalUserAddResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ExternalUserAddResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ExternalUserAddResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExternalUserAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExternalUserDeleteHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class ExternalUserDeleteResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ExternalUserDeleteResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ExternalUserDeleteResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExternalUserDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExternalUserQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class ExternalUserQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        corp_id: str = None,
        email: str = None,
        external_user_id: str = None,
        phone: str = None,
        real_name: str = None,
        real_name_en: str = None,
        user_id: str = None,
        user_nick: str = None,
        user_type: int = None,
    ):
        self.birthday = birthday
        self.corp_id = corp_id
        self.email = email
        self.external_user_id = external_user_id
        self.phone = phone
        self.real_name = real_name
        self.real_name_en = real_name_en
        self.user_id = user_id
        self.user_nick = user_nick
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.email is not None:
            result['email'] = self.email
        if self.external_user_id is not None:
            result['external_user_id'] = self.external_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_nick is not None:
            result['user_nick'] = self.user_nick
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('external_user_id') is not None:
            self.external_user_id = m.get('external_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_nick') is not None:
            self.user_nick = m.get('user_nick')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class ExternalUserQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        module: ExternalUserQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = ExternalUserQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ExternalUserQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ExternalUserQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExternalUserQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExternalUserUpdateHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class ExternalUserUpdateRequestCertRequestList(TeaModel):
    def __init__(
        self,
        cert_expired_time: str = None,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        nationality: str = None,
    ):
        self.cert_expired_time = cert_expired_time
        self.cert_nation = cert_nation
        # This parameter is required.
        self.cert_no = cert_no
        # This parameter is required.
        self.cert_type = cert_type
        self.nationality = nationality

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_expired_time is not None:
            result['cert_expired_time'] = self.cert_expired_time
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.nationality is not None:
            result['nationality'] = self.nationality
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_expired_time') is not None:
            self.cert_expired_time = m.get('cert_expired_time')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        return self


class ExternalUserUpdateRequest(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cert_request_list: List[ExternalUserUpdateRequestCertRequestList] = None,
        email: str = None,
        phone: str = None,
        real_name: str = None,
        real_name_en: str = None,
    ):
        self.birthday = birthday
        self.cert_request_list = cert_request_list
        self.email = email
        self.phone = phone
        self.real_name = real_name
        self.real_name_en = real_name_en

    def validate(self):
        if self.cert_request_list:
            for k in self.cert_request_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        result['cert_request_list'] = []
        if self.cert_request_list is not None:
            for k in self.cert_request_list:
                result['cert_request_list'].append(k.to_map() if k else None)
        if self.email is not None:
            result['email'] = self.email
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        self.cert_request_list = []
        if m.get('cert_request_list') is not None:
            for k in m.get('cert_request_list'):
                temp_model = ExternalUserUpdateRequestCertRequestList()
                self.cert_request_list.append(temp_model.from_map(k))
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        return self


class ExternalUserUpdateShrinkRequest(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cert_request_list_shrink: str = None,
        email: str = None,
        phone: str = None,
        real_name: str = None,
        real_name_en: str = None,
    ):
        self.birthday = birthday
        self.cert_request_list_shrink = cert_request_list_shrink
        self.email = email
        self.phone = phone
        self.real_name = real_name
        self.real_name_en = real_name_en

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_request_list_shrink is not None:
            result['cert_request_list'] = self.cert_request_list_shrink
        if self.email is not None:
            result['email'] = self.email
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_request_list') is not None:
            self.cert_request_list_shrink = m.get('cert_request_list')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        return self


class ExternalUserUpdateResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ExternalUserUpdateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ExternalUserUpdateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExternalUserUpdateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightBillSettlementQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class FlightBillSettlementQueryRequest(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        period_end: str = None,
        period_start: str = None,
    ):
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.period_end = period_end
        # This parameter is required.
        self.period_start = period_start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class FlightBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(
        self,
        advance_day: int = None,
        airline_corp_code: str = None,
        airline_corp_name: str = None,
        alipay_id: str = None,
        alipay_trade_no: str = None,
        apply_arr_city_code: str = None,
        apply_arr_city_name: str = None,
        apply_dep_city_code: str = None,
        apply_dep_city_name: str = None,
        apply_extend_field: str = None,
        apply_id: str = None,
        arr_airport_code: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_date: str = None,
        arr_station: str = None,
        arr_time: str = None,
        bill_record_time: str = None,
        book_time: str = None,
        booker_id: str = None,
        booker_job_no: str = None,
        booker_name: str = None,
        btrip_coupon_fee: float = None,
        build_fee: float = None,
        business_trip_result: str = None,
        cabin: str = None,
        cabin_class: str = None,
        capital_direction: str = None,
        cascade_department: str = None,
        change_fee: float = None,
        change_result: str = None,
        corp_pay_order_fee: float = None,
        corp_settle_price: float = None,
        cost_center: str = None,
        cost_center_number: str = None,
        coupon: float = None,
        dep_airport_code: str = None,
        dep_city_code: str = None,
        department: str = None,
        department_id: str = None,
        dept_city: str = None,
        dept_date: str = None,
        dept_station: str = None,
        dept_time: str = None,
        discount: str = None,
        exceed_reason: str = None,
        fee_type: str = None,
        flight_no: str = None,
        index: str = None,
        ins_order_id: str = None,
        insurance_fee: float = None,
        insurance_number: str = None,
        invoice_title: str = None,
        item_type: str = None,
        itinerary_num: str = None,
        itinerary_price: float = None,
        mileage: str = None,
        most_difference_dept_time: str = None,
        most_difference_discount: str = None,
        most_difference_flight_no: str = None,
        most_difference_price: float = None,
        most_difference_reason: str = None,
        most_price: float = None,
        negotiation_coupon_fee: float = None,
        oil_fee: float = None,
        order_id: str = None,
        over_apply_id: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        person_settle_price: float = None,
        pre_book_tip: str = None,
        primary_id: int = None,
        project_code: str = None,
        project_name: str = None,
        refund_affiliate_no: str = None,
        refund_apply_id: str = None,
        refund_fee: float = None,
        refund_result: str = None,
        refund_upgrade_cost: float = None,
        remark: str = None,
        repeat_refund: str = None,
        scene_id: str = None,
        scene_name: str = None,
        seal_price: float = None,
        service_fee: float = None,
        settlement_fee: float = None,
        settlement_grant_fee: float = None,
        settlement_time: str = None,
        settlement_type: str = None,
        status: int = None,
        tax_rate: str = None,
        third_itinerary_id: str = None,
        ticket_id: str = None,
        trade: str = None,
        traveler_id: str = None,
        traveler_job_no: str = None,
        traveler_member_type_name: str = None,
        traveler_name: str = None,
        upgrade_cost: float = None,
        voucher_type: int = None,
        voyage_name: str = None,
    ):
        self.advance_day = advance_day
        self.airline_corp_code = airline_corp_code
        self.airline_corp_name = airline_corp_name
        self.alipay_id = alipay_id
        self.alipay_trade_no = alipay_trade_no
        self.apply_arr_city_code = apply_arr_city_code
        self.apply_arr_city_name = apply_arr_city_name
        self.apply_dep_city_code = apply_dep_city_code
        self.apply_dep_city_name = apply_dep_city_name
        # 审批扩展自定义字段
        self.apply_extend_field = apply_extend_field
        self.apply_id = apply_id
        self.arr_airport_code = arr_airport_code
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_date = arr_date
        self.arr_station = arr_station
        self.arr_time = arr_time
        self.bill_record_time = bill_record_time
        self.book_time = book_time
        self.booker_id = booker_id
        self.booker_job_no = booker_job_no
        self.booker_name = booker_name
        self.btrip_coupon_fee = btrip_coupon_fee
        self.build_fee = build_fee
        self.business_trip_result = business_trip_result
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.capital_direction = capital_direction
        self.cascade_department = cascade_department
        self.change_fee = change_fee
        self.change_result = change_result
        self.corp_pay_order_fee = corp_pay_order_fee
        self.corp_settle_price = corp_settle_price
        self.cost_center = cost_center
        self.cost_center_number = cost_center_number
        self.coupon = coupon
        self.dep_airport_code = dep_airport_code
        self.dep_city_code = dep_city_code
        self.department = department
        self.department_id = department_id
        self.dept_city = dept_city
        self.dept_date = dept_date
        self.dept_station = dept_station
        self.dept_time = dept_time
        self.discount = discount
        self.exceed_reason = exceed_reason
        self.fee_type = fee_type
        self.flight_no = flight_no
        self.index = index
        self.ins_order_id = ins_order_id
        self.insurance_fee = insurance_fee
        self.insurance_number = insurance_number
        self.invoice_title = invoice_title
        self.item_type = item_type
        self.itinerary_num = itinerary_num
        self.itinerary_price = itinerary_price
        self.mileage = mileage
        self.most_difference_dept_time = most_difference_dept_time
        self.most_difference_discount = most_difference_discount
        self.most_difference_flight_no = most_difference_flight_no
        self.most_difference_price = most_difference_price
        self.most_difference_reason = most_difference_reason
        self.most_price = most_price
        self.negotiation_coupon_fee = negotiation_coupon_fee
        self.oil_fee = oil_fee
        self.order_id = order_id
        self.over_apply_id = over_apply_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.person_settle_price = person_settle_price
        self.pre_book_tip = pre_book_tip
        self.primary_id = primary_id
        self.project_code = project_code
        self.project_name = project_name
        self.refund_affiliate_no = refund_affiliate_no
        self.refund_apply_id = refund_apply_id
        self.refund_fee = refund_fee
        self.refund_result = refund_result
        self.refund_upgrade_cost = refund_upgrade_cost
        self.remark = remark
        self.repeat_refund = repeat_refund
        self.scene_id = scene_id
        self.scene_name = scene_name
        self.seal_price = seal_price
        self.service_fee = service_fee
        self.settlement_fee = settlement_fee
        self.settlement_grant_fee = settlement_grant_fee
        self.settlement_time = settlement_time
        self.settlement_type = settlement_type
        self.status = status
        # 税率
        self.tax_rate = tax_rate
        self.third_itinerary_id = third_itinerary_id
        self.ticket_id = ticket_id
        self.trade = trade
        self.traveler_id = traveler_id
        self.traveler_job_no = traveler_job_no
        self.traveler_member_type_name = traveler_member_type_name
        self.traveler_name = traveler_name
        self.upgrade_cost = upgrade_cost
        self.voucher_type = voucher_type
        self.voyage_name = voyage_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.advance_day is not None:
            result['advance_day'] = self.advance_day
        if self.airline_corp_code is not None:
            result['airline_corp_code'] = self.airline_corp_code
        if self.airline_corp_name is not None:
            result['airline_corp_name'] = self.airline_corp_name
        if self.alipay_id is not None:
            result['alipay_id'] = self.alipay_id
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.btrip_coupon_fee is not None:
            result['btrip_coupon_fee'] = self.btrip_coupon_fee
        if self.build_fee is not None:
            result['build_fee'] = self.build_fee
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.change_result is not None:
            result['change_result'] = self.change_result
        if self.corp_pay_order_fee is not None:
            result['corp_pay_order_fee'] = self.corp_pay_order_fee
        if self.corp_settle_price is not None:
            result['corp_settle_price'] = self.corp_settle_price
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.coupon is not None:
            result['coupon'] = self.coupon
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.dept_city is not None:
            result['dept_city'] = self.dept_city
        if self.dept_date is not None:
            result['dept_date'] = self.dept_date
        if self.dept_station is not None:
            result['dept_station'] = self.dept_station
        if self.dept_time is not None:
            result['dept_time'] = self.dept_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.index is not None:
            result['index'] = self.index
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        if self.insurance_fee is not None:
            result['insurance_fee'] = self.insurance_fee
        if self.insurance_number is not None:
            result['insurance_number'] = self.insurance_number
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.item_type is not None:
            result['item_type'] = self.item_type
        if self.itinerary_num is not None:
            result['itinerary_num'] = self.itinerary_num
        if self.itinerary_price is not None:
            result['itinerary_price'] = self.itinerary_price
        if self.mileage is not None:
            result['mileage'] = self.mileage
        if self.most_difference_dept_time is not None:
            result['most_difference_dept_time'] = self.most_difference_dept_time
        if self.most_difference_discount is not None:
            result['most_difference_discount'] = self.most_difference_discount
        if self.most_difference_flight_no is not None:
            result['most_difference_flight_no'] = self.most_difference_flight_no
        if self.most_difference_price is not None:
            result['most_difference_price'] = self.most_difference_price
        if self.most_difference_reason is not None:
            result['most_difference_reason'] = self.most_difference_reason
        if self.most_price is not None:
            result['most_price'] = self.most_price
        if self.negotiation_coupon_fee is not None:
            result['negotiation_coupon_fee'] = self.negotiation_coupon_fee
        if self.oil_fee is not None:
            result['oil_fee'] = self.oil_fee
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.person_settle_price is not None:
            result['person_settle_price'] = self.person_settle_price
        if self.pre_book_tip is not None:
            result['pre_book_tip'] = self.pre_book_tip
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.refund_affiliate_no is not None:
            result['refund_affiliate_no'] = self.refund_affiliate_no
        if self.refund_apply_id is not None:
            result['refund_apply_id'] = self.refund_apply_id
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_result is not None:
            result['refund_result'] = self.refund_result
        if self.refund_upgrade_cost is not None:
            result['refund_upgrade_cost'] = self.refund_upgrade_cost
        if self.remark is not None:
            result['remark'] = self.remark
        if self.repeat_refund is not None:
            result['repeat_refund'] = self.repeat_refund
        if self.scene_id is not None:
            result['scene_id'] = self.scene_id
        if self.scene_name is not None:
            result['scene_name'] = self.scene_name
        if self.seal_price is not None:
            result['seal_price'] = self.seal_price
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.status is not None:
            result['status'] = self.status
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.ticket_id is not None:
            result['ticket_id'] = self.ticket_id
        if self.trade is not None:
            result['trade'] = self.trade
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.upgrade_cost is not None:
            result['upgrade_cost'] = self.upgrade_cost
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        if self.voyage_name is not None:
            result['voyage_name'] = self.voyage_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('advance_day') is not None:
            self.advance_day = m.get('advance_day')
        if m.get('airline_corp_code') is not None:
            self.airline_corp_code = m.get('airline_corp_code')
        if m.get('airline_corp_name') is not None:
            self.airline_corp_name = m.get('airline_corp_name')
        if m.get('alipay_id') is not None:
            self.alipay_id = m.get('alipay_id')
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('btrip_coupon_fee') is not None:
            self.btrip_coupon_fee = m.get('btrip_coupon_fee')
        if m.get('build_fee') is not None:
            self.build_fee = m.get('build_fee')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('change_result') is not None:
            self.change_result = m.get('change_result')
        if m.get('corp_pay_order_fee') is not None:
            self.corp_pay_order_fee = m.get('corp_pay_order_fee')
        if m.get('corp_settle_price') is not None:
            self.corp_settle_price = m.get('corp_settle_price')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('coupon') is not None:
            self.coupon = m.get('coupon')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('dept_city') is not None:
            self.dept_city = m.get('dept_city')
        if m.get('dept_date') is not None:
            self.dept_date = m.get('dept_date')
        if m.get('dept_station') is not None:
            self.dept_station = m.get('dept_station')
        if m.get('dept_time') is not None:
            self.dept_time = m.get('dept_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        if m.get('insurance_fee') is not None:
            self.insurance_fee = m.get('insurance_fee')
        if m.get('insurance_number') is not None:
            self.insurance_number = m.get('insurance_number')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('item_type') is not None:
            self.item_type = m.get('item_type')
        if m.get('itinerary_num') is not None:
            self.itinerary_num = m.get('itinerary_num')
        if m.get('itinerary_price') is not None:
            self.itinerary_price = m.get('itinerary_price')
        if m.get('mileage') is not None:
            self.mileage = m.get('mileage')
        if m.get('most_difference_dept_time') is not None:
            self.most_difference_dept_time = m.get('most_difference_dept_time')
        if m.get('most_difference_discount') is not None:
            self.most_difference_discount = m.get('most_difference_discount')
        if m.get('most_difference_flight_no') is not None:
            self.most_difference_flight_no = m.get('most_difference_flight_no')
        if m.get('most_difference_price') is not None:
            self.most_difference_price = m.get('most_difference_price')
        if m.get('most_difference_reason') is not None:
            self.most_difference_reason = m.get('most_difference_reason')
        if m.get('most_price') is not None:
            self.most_price = m.get('most_price')
        if m.get('negotiation_coupon_fee') is not None:
            self.negotiation_coupon_fee = m.get('negotiation_coupon_fee')
        if m.get('oil_fee') is not None:
            self.oil_fee = m.get('oil_fee')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('person_settle_price') is not None:
            self.person_settle_price = m.get('person_settle_price')
        if m.get('pre_book_tip') is not None:
            self.pre_book_tip = m.get('pre_book_tip')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('refund_affiliate_no') is not None:
            self.refund_affiliate_no = m.get('refund_affiliate_no')
        if m.get('refund_apply_id') is not None:
            self.refund_apply_id = m.get('refund_apply_id')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_result') is not None:
            self.refund_result = m.get('refund_result')
        if m.get('refund_upgrade_cost') is not None:
            self.refund_upgrade_cost = m.get('refund_upgrade_cost')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('repeat_refund') is not None:
            self.repeat_refund = m.get('repeat_refund')
        if m.get('scene_id') is not None:
            self.scene_id = m.get('scene_id')
        if m.get('scene_name') is not None:
            self.scene_name = m.get('scene_name')
        if m.get('seal_price') is not None:
            self.seal_price = m.get('seal_price')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('ticket_id') is not None:
            self.ticket_id = m.get('ticket_id')
        if m.get('trade') is not None:
            self.trade = m.get('trade')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('upgrade_cost') is not None:
            self.upgrade_cost = m.get('upgrade_cost')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        if m.get('voyage_name') is not None:
            self.voyage_name = m.get('voyage_name')
        return self


class FlightBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        category: int = None,
        corp_id: str = None,
        data_list: List[FlightBillSettlementQueryResponseBodyModuleDataList] = None,
        period_end: str = None,
        period_start: str = None,
        total_num: int = None,
    ):
        self.category = category
        self.corp_id = corp_id
        self.data_list = data_list
        self.period_end = period_end
        self.period_start = period_start
        self.total_num = total_num

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = FlightBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        return self


class FlightBillSettlementQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightBillSettlementQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightBillSettlementQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightBillSettlementQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightCancelOrderHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightCancelOrderRequest(TeaModel):
    def __init__(
        self,
        dis_order_id: str = None,
    ):
        # This parameter is required.
        self.dis_order_id = dis_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        return self


class FlightCancelOrderResponseBodyModule(TeaModel):
    def __init__(
        self,
        cancel_time: str = None,
        fail_code: str = None,
        fail_reason: str = None,
        order_status: str = None,
    ):
        self.cancel_time = cancel_time
        self.fail_code = fail_code
        self.fail_reason = fail_reason
        self.order_status = order_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        if self.fail_code is not None:
            result['fail_code'] = self.fail_code
        if self.fail_reason is not None:
            result['fail_reason'] = self.fail_reason
        if self.order_status is not None:
            result['order_status'] = self.order_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        if m.get('fail_code') is not None:
            self.fail_code = m.get('fail_code')
        if m.get('fail_reason') is not None:
            self.fail_reason = m.get('fail_reason')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        return self


class FlightCancelOrderResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightCancelOrderResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightCancelOrderResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightCancelOrderResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightCancelOrderResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightCancelOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightCancelOrderV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightCancelOrderV2Request(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
    ):
        # This parameter is required.
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class FlightCancelOrderV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        cancel_time: str = None,
    ):
        self.cancel_time = cancel_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        return self


class FlightCancelOrderV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightCancelOrderV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightCancelOrderV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightCancelOrderV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightCancelOrderV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightCancelOrderV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightCreateOrderHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightCreateOrderRequestContactInfo(TeaModel):
    def __init__(
        self,
        contact_email: str = None,
        contact_name: str = None,
        contact_phone: str = None,
    ):
        self.contact_email = contact_email
        # This parameter is required.
        self.contact_name = contact_name
        # This parameter is required.
        self.contact_phone = contact_phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        return self


class FlightCreateOrderRequestTravelerInfoList(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: str = None,
        cert_valid_date: str = None,
        name: str = None,
        nationality: str = None,
        nationality_code: str = None,
        out_user_id: str = None,
        phone: str = None,
        sex: int = None,
        type: str = None,
    ):
        self.birthday = birthday
        self.cert_nation = cert_nation
        # This parameter is required.
        self.cert_no = cert_no
        # This parameter is required.
        self.cert_type = cert_type
        self.cert_valid_date = cert_valid_date
        # This parameter is required.
        self.name = name
        # 国籍
        self.nationality = nationality
        # 国籍二字码
        self.nationality_code = nationality_code
        # This parameter is required.
        self.out_user_id = out_user_id
        # This parameter is required.
        self.phone = phone
        self.sex = sex
        # This parameter is required.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.cert_valid_date is not None:
            result['cert_valid_date'] = self.cert_valid_date
        if self.name is not None:
            result['name'] = self.name
        if self.nationality is not None:
            result['nationality'] = self.nationality
        if self.nationality_code is not None:
            result['nationality_code'] = self.nationality_code
        if self.out_user_id is not None:
            result['out_user_id'] = self.out_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.sex is not None:
            result['sex'] = self.sex
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('cert_valid_date') is not None:
            self.cert_valid_date = m.get('cert_valid_date')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        if m.get('nationality_code') is not None:
            self.nationality_code = m.get('nationality_code')
        if m.get('out_user_id') is not None:
            self.out_user_id = m.get('out_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('sex') is not None:
            self.sex = m.get('sex')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightCreateOrderRequest(TeaModel):
    def __init__(
        self,
        arr_airport_code: str = None,
        arr_city_code: str = None,
        auto_pay: int = None,
        buyer_name: str = None,
        buyer_unique_key: str = None,
        contact_info: FlightCreateOrderRequestContactInfo = None,
        dep_airport_code: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        dis_order_id: str = None,
        order_attr: Dict[str, Any] = None,
        order_params: str = None,
        ota_item_id: str = None,
        price: int = None,
        receipt_address: str = None,
        receipt_target: int = None,
        receipt_title: str = None,
        traveler_info_list: List[FlightCreateOrderRequestTravelerInfoList] = None,
        trip_type: int = None,
    ):
        self.arr_airport_code = arr_airport_code
        # This parameter is required.
        self.arr_city_code = arr_city_code
        self.auto_pay = auto_pay
        self.buyer_name = buyer_name
        # This parameter is required.
        self.buyer_unique_key = buyer_unique_key
        # This parameter is required.
        self.contact_info = contact_info
        self.dep_airport_code = dep_airport_code
        # This parameter is required.
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.dis_order_id = dis_order_id
        self.order_attr = order_attr
        # This parameter is required.
        self.order_params = order_params
        # This parameter is required.
        self.ota_item_id = ota_item_id
        # This parameter is required.
        self.price = price
        self.receipt_address = receipt_address
        self.receipt_target = receipt_target
        self.receipt_title = receipt_title
        # This parameter is required.
        self.traveler_info_list = traveler_info_list
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        if self.contact_info:
            self.contact_info.validate()
        if self.traveler_info_list:
            for k in self.traveler_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.auto_pay is not None:
            result['auto_pay'] = self.auto_pay
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.buyer_unique_key is not None:
            result['buyer_unique_key'] = self.buyer_unique_key
        if self.contact_info is not None:
            result['contact_info'] = self.contact_info.to_map()
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.order_attr is not None:
            result['order_attr'] = self.order_attr
        if self.order_params is not None:
            result['order_params'] = self.order_params
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.receipt_address is not None:
            result['receipt_address'] = self.receipt_address
        if self.receipt_target is not None:
            result['receipt_target'] = self.receipt_target
        if self.receipt_title is not None:
            result['receipt_title'] = self.receipt_title
        result['traveler_info_list'] = []
        if self.traveler_info_list is not None:
            for k in self.traveler_info_list:
                result['traveler_info_list'].append(k.to_map() if k else None)
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('auto_pay') is not None:
            self.auto_pay = m.get('auto_pay')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('buyer_unique_key') is not None:
            self.buyer_unique_key = m.get('buyer_unique_key')
        if m.get('contact_info') is not None:
            temp_model = FlightCreateOrderRequestContactInfo()
            self.contact_info = temp_model.from_map(m['contact_info'])
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('order_attr') is not None:
            self.order_attr = m.get('order_attr')
        if m.get('order_params') is not None:
            self.order_params = m.get('order_params')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('receipt_address') is not None:
            self.receipt_address = m.get('receipt_address')
        if m.get('receipt_target') is not None:
            self.receipt_target = m.get('receipt_target')
        if m.get('receipt_title') is not None:
            self.receipt_title = m.get('receipt_title')
        self.traveler_info_list = []
        if m.get('traveler_info_list') is not None:
            for k in m.get('traveler_info_list'):
                temp_model = FlightCreateOrderRequestTravelerInfoList()
                self.traveler_info_list.append(temp_model.from_map(k))
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightCreateOrderShrinkRequest(TeaModel):
    def __init__(
        self,
        arr_airport_code: str = None,
        arr_city_code: str = None,
        auto_pay: int = None,
        buyer_name: str = None,
        buyer_unique_key: str = None,
        contact_info_shrink: str = None,
        dep_airport_code: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        dis_order_id: str = None,
        order_attr_shrink: str = None,
        order_params: str = None,
        ota_item_id: str = None,
        price: int = None,
        receipt_address: str = None,
        receipt_target: int = None,
        receipt_title: str = None,
        traveler_info_list_shrink: str = None,
        trip_type: int = None,
    ):
        self.arr_airport_code = arr_airport_code
        # This parameter is required.
        self.arr_city_code = arr_city_code
        self.auto_pay = auto_pay
        self.buyer_name = buyer_name
        # This parameter is required.
        self.buyer_unique_key = buyer_unique_key
        # This parameter is required.
        self.contact_info_shrink = contact_info_shrink
        self.dep_airport_code = dep_airport_code
        # This parameter is required.
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.dis_order_id = dis_order_id
        self.order_attr_shrink = order_attr_shrink
        # This parameter is required.
        self.order_params = order_params
        # This parameter is required.
        self.ota_item_id = ota_item_id
        # This parameter is required.
        self.price = price
        self.receipt_address = receipt_address
        self.receipt_target = receipt_target
        self.receipt_title = receipt_title
        # This parameter is required.
        self.traveler_info_list_shrink = traveler_info_list_shrink
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.auto_pay is not None:
            result['auto_pay'] = self.auto_pay
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.buyer_unique_key is not None:
            result['buyer_unique_key'] = self.buyer_unique_key
        if self.contact_info_shrink is not None:
            result['contact_info'] = self.contact_info_shrink
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.order_attr_shrink is not None:
            result['order_attr'] = self.order_attr_shrink
        if self.order_params is not None:
            result['order_params'] = self.order_params
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.receipt_address is not None:
            result['receipt_address'] = self.receipt_address
        if self.receipt_target is not None:
            result['receipt_target'] = self.receipt_target
        if self.receipt_title is not None:
            result['receipt_title'] = self.receipt_title
        if self.traveler_info_list_shrink is not None:
            result['traveler_info_list'] = self.traveler_info_list_shrink
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('auto_pay') is not None:
            self.auto_pay = m.get('auto_pay')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('buyer_unique_key') is not None:
            self.buyer_unique_key = m.get('buyer_unique_key')
        if m.get('contact_info') is not None:
            self.contact_info_shrink = m.get('contact_info')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('order_attr') is not None:
            self.order_attr_shrink = m.get('order_attr')
        if m.get('order_params') is not None:
            self.order_params = m.get('order_params')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('receipt_address') is not None:
            self.receipt_address = m.get('receipt_address')
        if m.get('receipt_target') is not None:
            self.receipt_target = m.get('receipt_target')
        if m.get('receipt_title') is not None:
            self.receipt_title = m.get('receipt_title')
        if m.get('traveler_info_list') is not None:
            self.traveler_info_list_shrink = m.get('traveler_info_list')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightCreateOrderResponseBodyModule(TeaModel):
    def __init__(
        self,
        alipay_trade_no: str = None,
        btrip_order_id: int = None,
        dis_order_id: str = None,
        last_pay_time: str = None,
        order_status: int = None,
        pay_status: int = None,
        payment_price: int = None,
        total_price: int = None,
    ):
        self.alipay_trade_no = alipay_trade_no
        self.btrip_order_id = btrip_order_id
        self.dis_order_id = dis_order_id
        self.last_pay_time = last_pay_time
        self.order_status = order_status
        self.pay_status = pay_status
        self.payment_price = payment_price
        self.total_price = total_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.payment_price is not None:
            result['payment_price'] = self.payment_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('payment_price') is not None:
            self.payment_price = m.get('payment_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class FlightCreateOrderResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightCreateOrderResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightCreateOrderResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightCreateOrderResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightCreateOrderResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightCreateOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightCreateOrderV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightCreateOrderV2RequestContactInfo(TeaModel):
    def __init__(
        self,
        contact_email: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        send_msg_to_passenger: bool = None,
    ):
        self.contact_email = contact_email
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.send_msg_to_passenger = send_msg_to_passenger

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.send_msg_to_passenger is not None:
            result['send_msg_to_passenger'] = self.send_msg_to_passenger
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('send_msg_to_passenger') is not None:
            self.send_msg_to_passenger = m.get('send_msg_to_passenger')
        return self


class FlightCreateOrderV2RequestTravelers(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        cert_valid_date: str = None,
        cost_center_name: str = None,
        cost_center_number: str = None,
        dept_id: str = None,
        dept_name: str = None,
        gender: int = None,
        invoice_title: str = None,
        nationality: str = None,
        nationality_code: str = None,
        passenger_name: str = None,
        passenger_type: int = None,
        phone: str = None,
        project_code: str = None,
        project_title: str = None,
        user_id: str = None,
        user_type: int = None,
    ):
        # This parameter is required.
        self.birthday = birthday
        self.cert_nation = cert_nation
        # This parameter is required.
        self.cert_no = cert_no
        # This parameter is required.
        self.cert_type = cert_type
        self.cert_valid_date = cert_valid_date
        self.cost_center_name = cost_center_name
        self.cost_center_number = cost_center_number
        self.dept_id = dept_id
        self.dept_name = dept_name
        # This parameter is required.
        self.gender = gender
        self.invoice_title = invoice_title
        self.nationality = nationality
        self.nationality_code = nationality_code
        # This parameter is required.
        self.passenger_name = passenger_name
        # This parameter is required.
        self.passenger_type = passenger_type
        # This parameter is required.
        self.phone = phone
        self.project_code = project_code
        self.project_title = project_title
        # This parameter is required.
        self.user_id = user_id
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.cert_valid_date is not None:
            result['cert_valid_date'] = self.cert_valid_date
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.gender is not None:
            result['gender'] = self.gender
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.nationality is not None:
            result['nationality'] = self.nationality
        if self.nationality_code is not None:
            result['nationality_code'] = self.nationality_code
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('cert_valid_date') is not None:
            self.cert_valid_date = m.get('cert_valid_date')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        if m.get('nationality_code') is not None:
            self.nationality_code = m.get('nationality_code')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class FlightCreateOrderV2Request(TeaModel):
    def __init__(
        self,
        async_create_order_key: str = None,
        async_create_order_mode: bool = None,
        btrip_user_id: str = None,
        buyer_name: str = None,
        contact_info: FlightCreateOrderV2RequestContactInfo = None,
        isv_name: str = None,
        ota_item_id: str = None,
        out_order_id: str = None,
        total_price_cent: int = None,
        travelers: List[FlightCreateOrderV2RequestTravelers] = None,
    ):
        self.async_create_order_key = async_create_order_key
        self.async_create_order_mode = async_create_order_mode
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        # This parameter is required.
        self.contact_info = contact_info
        # This parameter is required.
        self.isv_name = isv_name
        # This parameter is required.
        self.ota_item_id = ota_item_id
        # This parameter is required.
        self.out_order_id = out_order_id
        self.total_price_cent = total_price_cent
        # This parameter is required.
        self.travelers = travelers

    def validate(self):
        if self.contact_info:
            self.contact_info.validate()
        if self.travelers:
            for k in self.travelers:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_create_order_key is not None:
            result['async_create_order_key'] = self.async_create_order_key
        if self.async_create_order_mode is not None:
            result['async_create_order_mode'] = self.async_create_order_mode
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.contact_info is not None:
            result['contact_info'] = self.contact_info.to_map()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.total_price_cent is not None:
            result['total_price_cent'] = self.total_price_cent
        result['travelers'] = []
        if self.travelers is not None:
            for k in self.travelers:
                result['travelers'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('async_create_order_key') is not None:
            self.async_create_order_key = m.get('async_create_order_key')
        if m.get('async_create_order_mode') is not None:
            self.async_create_order_mode = m.get('async_create_order_mode')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('contact_info') is not None:
            temp_model = FlightCreateOrderV2RequestContactInfo()
            self.contact_info = temp_model.from_map(m['contact_info'])
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('total_price_cent') is not None:
            self.total_price_cent = m.get('total_price_cent')
        self.travelers = []
        if m.get('travelers') is not None:
            for k in m.get('travelers'):
                temp_model = FlightCreateOrderV2RequestTravelers()
                self.travelers.append(temp_model.from_map(k))
        return self


class FlightCreateOrderV2ShrinkRequest(TeaModel):
    def __init__(
        self,
        async_create_order_key: str = None,
        async_create_order_mode: bool = None,
        btrip_user_id: str = None,
        buyer_name: str = None,
        contact_info_shrink: str = None,
        isv_name: str = None,
        ota_item_id: str = None,
        out_order_id: str = None,
        total_price_cent: int = None,
        travelers_shrink: str = None,
    ):
        self.async_create_order_key = async_create_order_key
        self.async_create_order_mode = async_create_order_mode
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        # This parameter is required.
        self.contact_info_shrink = contact_info_shrink
        # This parameter is required.
        self.isv_name = isv_name
        # This parameter is required.
        self.ota_item_id = ota_item_id
        # This parameter is required.
        self.out_order_id = out_order_id
        self.total_price_cent = total_price_cent
        # This parameter is required.
        self.travelers_shrink = travelers_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_create_order_key is not None:
            result['async_create_order_key'] = self.async_create_order_key
        if self.async_create_order_mode is not None:
            result['async_create_order_mode'] = self.async_create_order_mode
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.contact_info_shrink is not None:
            result['contact_info'] = self.contact_info_shrink
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.total_price_cent is not None:
            result['total_price_cent'] = self.total_price_cent
        if self.travelers_shrink is not None:
            result['travelers'] = self.travelers_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('async_create_order_key') is not None:
            self.async_create_order_key = m.get('async_create_order_key')
        if m.get('async_create_order_mode') is not None:
            self.async_create_order_mode = m.get('async_create_order_mode')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('contact_info') is not None:
            self.contact_info_shrink = m.get('contact_info')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('total_price_cent') is not None:
            self.total_price_cent = m.get('total_price_cent')
        if m.get('travelers') is not None:
            self.travelers_shrink = m.get('travelers')
        return self


class FlightCreateOrderV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        async_create_order_key: str = None,
        latest_pay_time: str = None,
        order_id: int = None,
        out_order_id: str = None,
        status: int = None,
        total_price: int = None,
    ):
        self.async_create_order_key = async_create_order_key
        self.latest_pay_time = latest_pay_time
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.status = status
        self.total_price = total_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_create_order_key is not None:
            result['async_create_order_key'] = self.async_create_order_key
        if self.latest_pay_time is not None:
            result['latest_pay_time'] = self.latest_pay_time
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.status is not None:
            result['status'] = self.status
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('async_create_order_key') is not None:
            self.async_create_order_key = m.get('async_create_order_key')
        if m.get('latest_pay_time') is not None:
            self.latest_pay_time = m.get('latest_pay_time')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class FlightCreateOrderV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightCreateOrderV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightCreateOrderV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightCreateOrderV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightCreateOrderV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightCreateOrderV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightExceedApplyQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class FlightExceedApplyQueryRequest(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        business_instance_id: str = None,
    ):
        self.apply_id = apply_id
        self.business_instance_id = business_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.business_instance_id is not None:
            result['business_instance_id'] = self.business_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('business_instance_id') is not None:
            self.business_instance_id = m.get('business_instance_id')
        return self


class FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo(TeaModel):
    def __init__(
        self,
        arr_airport_name: str = None,
        arr_city: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        cabin: str = None,
        cabin_class: int = None,
        cabin_class_str: str = None,
        dep_airport_name: str = None,
        dep_city: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        discount: str = None,
        flight_no: str = None,
        price: int = None,
        type: int = None,
    ):
        self.arr_airport_name = arr_airport_name
        self.arr_city = arr_city
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_str = cabin_class_str
        self.dep_airport_name = dep_airport_name
        self.dep_city = dep_city
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.discount = discount
        self.flight_no = flight_no
        self.price = price
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_str is not None:
            result['cabin_class_str'] = self.cabin_class_str
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.price is not None:
            result['price'] = self.price
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_str') is not None:
            self.cabin_class_str = m.get('cabin_class_str')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDoList(TeaModel):
    def __init__(
        self,
        arr_airport_name: str = None,
        arr_city: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        cabin: str = None,
        cabin_class: int = None,
        cabin_class_str: str = None,
        dep_airport_name: str = None,
        dep_city: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        discount: str = None,
        flight_no: str = None,
        price: int = None,
        type: int = None,
    ):
        self.arr_airport_name = arr_airport_name
        self.arr_city = arr_city
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_str = cabin_class_str
        self.dep_airport_name = dep_airport_name
        self.dep_city = dep_city
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.discount = discount
        self.flight_no = flight_no
        self.price = price
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_str is not None:
            result['cabin_class_str'] = self.cabin_class_str
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.price is not None:
            result['price'] = self.price
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_str') is not None:
            self.cabin_class_str = m.get('cabin_class_str')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightExceedApplyQueryResponseBodyModuleApplyRecommendFlights(TeaModel):
    def __init__(
        self,
        arr_airport_name: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        cabin: str = None,
        cabin_class: int = None,
        cabin_class_str: str = None,
        dep_airport_name: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        discount: str = None,
        flight_no: str = None,
        price: int = None,
        transfer_airport_name: str = None,
    ):
        self.arr_airport_name = arr_airport_name
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_str = cabin_class_str
        self.dep_airport_name = dep_airport_name
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.discount = discount
        self.flight_no = flight_no
        self.price = price
        self.transfer_airport_name = transfer_airport_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_str is not None:
            result['cabin_class_str'] = self.cabin_class_str
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.price is not None:
            result['price'] = self.price
        if self.transfer_airport_name is not None:
            result['transfer_airport_name'] = self.transfer_airport_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_str') is not None:
            self.cabin_class_str = m.get('cabin_class_str')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('transfer_airport_name') is not None:
            self.transfer_airport_name = m.get('transfer_airport_name')
        return self


class FlightExceedApplyQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        apply_intention_info_do: FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo = None,
        apply_intention_info_do_list: List[FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDoList] = None,
        apply_recommend_flights: FlightExceedApplyQueryResponseBodyModuleApplyRecommendFlights = None,
        btrip_cause: str = None,
        corp_id: str = None,
        exceed_reason: str = None,
        exceed_type: int = None,
        origin_standard: str = None,
        status: int = None,
        submit_time: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_corp_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_id = apply_id
        self.apply_intention_info_do = apply_intention_info_do
        self.apply_intention_info_do_list = apply_intention_info_do_list
        self.apply_recommend_flights = apply_recommend_flights
        self.btrip_cause = btrip_cause
        self.corp_id = corp_id
        self.exceed_reason = exceed_reason
        self.exceed_type = exceed_type
        self.origin_standard = origin_standard
        self.status = status
        self.submit_time = submit_time
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_corp_id = thirdpart_corp_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.apply_intention_info_do:
            self.apply_intention_info_do.validate()
        if self.apply_intention_info_do_list:
            for k in self.apply_intention_info_do_list:
                if k:
                    k.validate()
        if self.apply_recommend_flights:
            self.apply_recommend_flights.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.apply_intention_info_do is not None:
            result['apply_intention_info_do'] = self.apply_intention_info_do.to_map()
        result['apply_intention_info_do_list'] = []
        if self.apply_intention_info_do_list is not None:
            for k in self.apply_intention_info_do_list:
                result['apply_intention_info_do_list'].append(k.to_map() if k else None)
        if self.apply_recommend_flights is not None:
            result['apply_recommend_flights'] = self.apply_recommend_flights.to_map()
        if self.btrip_cause is not None:
            result['btrip_cause'] = self.btrip_cause
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.exceed_type is not None:
            result['exceed_type'] = self.exceed_type
        if self.origin_standard is not None:
            result['origin_standard'] = self.origin_standard
        if self.status is not None:
            result['status'] = self.status
        if self.submit_time is not None:
            result['submit_time'] = self.submit_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('apply_intention_info_do') is not None:
            temp_model = FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo()
            self.apply_intention_info_do = temp_model.from_map(m['apply_intention_info_do'])
        self.apply_intention_info_do_list = []
        if m.get('apply_intention_info_do_list') is not None:
            for k in m.get('apply_intention_info_do_list'):
                temp_model = FlightExceedApplyQueryResponseBodyModuleApplyIntentionInfoDoList()
                self.apply_intention_info_do_list.append(temp_model.from_map(k))
        if m.get('apply_recommend_flights') is not None:
            temp_model = FlightExceedApplyQueryResponseBodyModuleApplyRecommendFlights()
            self.apply_recommend_flights = temp_model.from_map(m['apply_recommend_flights'])
        if m.get('btrip_cause') is not None:
            self.btrip_cause = m.get('btrip_cause')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('exceed_type') is not None:
            self.exceed_type = m.get('exceed_type')
        if m.get('origin_standard') is not None:
            self.origin_standard = m.get('origin_standard')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('submit_time') is not None:
            self.submit_time = m.get('submit_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class FlightExceedApplyQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightExceedApplyQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightExceedApplyQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightExceedApplyQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightExceedApplyQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightExceedApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightItineraryScanQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class FlightItineraryScanQueryRequest(TeaModel):
    def __init__(
        self,
        bill_date: str = None,
        bill_id: int = None,
        invoice_sub_task_id: int = None,
        itinerary_num: str = None,
        page_no: int = None,
        page_size: int = None,
        ticket_no: str = None,
    ):
        # This parameter is required.
        self.bill_date = bill_date
        self.bill_id = bill_id
        self.invoice_sub_task_id = invoice_sub_task_id
        self.itinerary_num = itinerary_num
        self.page_no = page_no
        self.page_size = page_size
        self.ticket_no = ticket_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.bill_id is not None:
            result['bill_id'] = self.bill_id
        if self.invoice_sub_task_id is not None:
            result['invoice_sub_task_id'] = self.invoice_sub_task_id
        if self.itinerary_num is not None:
            result['itinerary_num'] = self.itinerary_num
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('bill_id') is not None:
            self.bill_id = m.get('bill_id')
        if m.get('invoice_sub_task_id') is not None:
            self.invoice_sub_task_id = m.get('invoice_sub_task_id')
        if m.get('itinerary_num') is not None:
            self.itinerary_num = m.get('itinerary_num')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        return self


class FlightItineraryScanQueryResponseBodyModuleItemsFlights(TeaModel):
    def __init__(
        self,
        arrival_station: str = None,
        cabin_class: str = None,
        carrier: str = None,
        departure_station: str = None,
        flight_date: str = None,
        flight_number: str = None,
        flight_time: str = None,
        free_baggage_allowance: str = None,
        index: str = None,
        seat_class: str = None,
        valid_from_date: str = None,
        valid_to_date: str = None,
    ):
        # 航班至
        self.arrival_station = arrival_station
        # 座位等级
        self.cabin_class = cabin_class
        # 承运人
        self.carrier = carrier
        # 航班从
        self.departure_station = departure_station
        # 日期
        self.flight_date = flight_date
        # 航班号
        self.flight_number = flight_number
        # 时间
        self.flight_time = flight_time
        # 免费行李
        self.free_baggage_allowance = free_baggage_allowance
        # 行号
        self.index = index
        # 客票级别
        self.seat_class = seat_class
        # 客票生效日期
        self.valid_from_date = valid_from_date
        # 有效截止日期
        self.valid_to_date = valid_to_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arrival_station is not None:
            result['arrival_station'] = self.arrival_station
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.carrier is not None:
            result['carrier'] = self.carrier
        if self.departure_station is not None:
            result['departure_station'] = self.departure_station
        if self.flight_date is not None:
            result['flight_date'] = self.flight_date
        if self.flight_number is not None:
            result['flight_number'] = self.flight_number
        if self.flight_time is not None:
            result['flight_time'] = self.flight_time
        if self.free_baggage_allowance is not None:
            result['free_baggage_allowance'] = self.free_baggage_allowance
        if self.index is not None:
            result['index'] = self.index
        if self.seat_class is not None:
            result['seat_class'] = self.seat_class
        if self.valid_from_date is not None:
            result['valid_from_date'] = self.valid_from_date
        if self.valid_to_date is not None:
            result['valid_to_date'] = self.valid_to_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arrival_station') is not None:
            self.arrival_station = m.get('arrival_station')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('carrier') is not None:
            self.carrier = m.get('carrier')
        if m.get('departure_station') is not None:
            self.departure_station = m.get('departure_station')
        if m.get('flight_date') is not None:
            self.flight_date = m.get('flight_date')
        if m.get('flight_number') is not None:
            self.flight_number = m.get('flight_number')
        if m.get('flight_time') is not None:
            self.flight_time = m.get('flight_time')
        if m.get('free_baggage_allowance') is not None:
            self.free_baggage_allowance = m.get('free_baggage_allowance')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('seat_class') is not None:
            self.seat_class = m.get('seat_class')
        if m.get('valid_from_date') is not None:
            self.valid_from_date = m.get('valid_from_date')
        if m.get('valid_to_date') is not None:
            self.valid_to_date = m.get('valid_to_date')
        return self


class FlightItineraryScanQueryResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        agent_code: str = None,
        apply_id: str = None,
        bill_date: str = None,
        build: str = None,
        cost_center: str = None,
        department: str = None,
        flights: List[FlightItineraryScanQueryResponseBodyModuleItemsFlights] = None,
        fuel_surcharge: str = None,
        id: str = None,
        insurance: str = None,
        invoice_title: str = None,
        invoice_type: int = None,
        issue_company: str = None,
        issue_date: str = None,
        itinerary_num: str = None,
        ofd_oss_url: str = None,
        order_id: int = None,
        oss_url: str = None,
        passenger_name: str = None,
        project: str = None,
        prompt_message: str = None,
        purchaser_name: str = None,
        purchaser_type: int = None,
        tax_amount: str = None,
        tax_rate: str = None,
        ticket_no: str = None,
        ticket_price: str = None,
        total_price: str = None,
        validation_code: str = None,
    ):
        # 销售单位代号
        self.agent_code = agent_code
        self.apply_id = apply_id
        self.bill_date = bill_date
        self.build = build
        self.cost_center = cost_center
        self.department = department
        # 机票行程明细
        self.flights = flights
        self.fuel_surcharge = fuel_surcharge
        # UK
        self.id = id
        self.insurance = insurance
        self.invoice_title = invoice_title
        self.invoice_type = invoice_type
        # 填开单位
        self.issue_company = issue_company
        # 填开日期
        self.issue_date = issue_date
        self.itinerary_num = itinerary_num
        self.ofd_oss_url = ofd_oss_url
        self.order_id = order_id
        self.oss_url = oss_url
        self.passenger_name = passenger_name
        self.project = project
        # 提示信息
        self.prompt_message = prompt_message
        self.purchaser_name = purchaser_name
        self.purchaser_type = purchaser_type
        self.tax_amount = tax_amount
        self.tax_rate = tax_rate
        self.ticket_no = ticket_no
        self.ticket_price = ticket_price
        self.total_price = total_price
        # 验证码
        self.validation_code = validation_code

    def validate(self):
        if self.flights:
            for k in self.flights:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_code is not None:
            result['agent_code'] = self.agent_code
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.build is not None:
            result['build'] = self.build
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.department is not None:
            result['department'] = self.department
        result['flights'] = []
        if self.flights is not None:
            for k in self.flights:
                result['flights'].append(k.to_map() if k else None)
        if self.fuel_surcharge is not None:
            result['fuel_surcharge'] = self.fuel_surcharge
        if self.id is not None:
            result['id'] = self.id
        if self.insurance is not None:
            result['insurance'] = self.insurance
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.issue_company is not None:
            result['issue_company'] = self.issue_company
        if self.issue_date is not None:
            result['issue_date'] = self.issue_date
        if self.itinerary_num is not None:
            result['itinerary_num'] = self.itinerary_num
        if self.ofd_oss_url is not None:
            result['ofd_oss_url'] = self.ofd_oss_url
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.oss_url is not None:
            result['oss_url'] = self.oss_url
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.project is not None:
            result['project'] = self.project
        if self.prompt_message is not None:
            result['prompt_message'] = self.prompt_message
        if self.purchaser_name is not None:
            result['purchaser_name'] = self.purchaser_name
        if self.purchaser_type is not None:
            result['purchaser_type'] = self.purchaser_type
        if self.tax_amount is not None:
            result['tax_amount'] = self.tax_amount
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.validation_code is not None:
            result['validation_code'] = self.validation_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('agent_code') is not None:
            self.agent_code = m.get('agent_code')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('build') is not None:
            self.build = m.get('build')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('department') is not None:
            self.department = m.get('department')
        self.flights = []
        if m.get('flights') is not None:
            for k in m.get('flights'):
                temp_model = FlightItineraryScanQueryResponseBodyModuleItemsFlights()
                self.flights.append(temp_model.from_map(k))
        if m.get('fuel_surcharge') is not None:
            self.fuel_surcharge = m.get('fuel_surcharge')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('insurance') is not None:
            self.insurance = m.get('insurance')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('issue_company') is not None:
            self.issue_company = m.get('issue_company')
        if m.get('issue_date') is not None:
            self.issue_date = m.get('issue_date')
        if m.get('itinerary_num') is not None:
            self.itinerary_num = m.get('itinerary_num')
        if m.get('ofd_oss_url') is not None:
            self.ofd_oss_url = m.get('ofd_oss_url')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('oss_url') is not None:
            self.oss_url = m.get('oss_url')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('project') is not None:
            self.project = m.get('project')
        if m.get('prompt_message') is not None:
            self.prompt_message = m.get('prompt_message')
        if m.get('purchaser_name') is not None:
            self.purchaser_name = m.get('purchaser_name')
        if m.get('purchaser_type') is not None:
            self.purchaser_type = m.get('purchaser_type')
        if m.get('tax_amount') is not None:
            self.tax_amount = m.get('tax_amount')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('validation_code') is not None:
            self.validation_code = m.get('validation_code')
        return self


class FlightItineraryScanQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        items: List[FlightItineraryScanQueryResponseBodyModuleItems] = None,
        page_no: int = None,
        page_size: int = None,
        total_page: int = None,
        total_size: int = None,
    ):
        self.items = items
        self.page_no = page_no
        self.page_size = page_size
        self.total_page = total_page
        self.total_size = total_size

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_page is not None:
            result['total_page'] = self.total_page
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = FlightItineraryScanQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class FlightItineraryScanQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightItineraryScanQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightItineraryScanQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightItineraryScanQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightItineraryScanQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightItineraryScanQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightListingSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightListingSearchRequest(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        arr_city_code: str = None,
        cabin_class: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
    ):
        self.airline_code = airline_code
        # This parameter is required.
        self.arr_city_code = arr_city_code
        self.cabin_class = cabin_class
        # This parameter is required.
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.dep_date = dep_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        return self


class FlightListingSearchResponseBodyModuleFlightListAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        airline_simple_name: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.airline_simple_name = airline_simple_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class FlightListingSearchResponseBodyModuleFlightListArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightListingSearchResponseBodyModuleFlightListDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(
        self,
        desc: str = None,
        icon: str = None,
        image: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.icon = icon
        self.image = image
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(
        self,
        image: str = None,
        largest: str = None,
        middle: str = None,
        smallest: str = None,
    ):
        self.image = image
        self.largest = largest
        self.middle = middle
        self.smallest = smallest

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(
        self,
        baggage_desc: List[str] = None,
        baggage_sub_content_type: int = None,
        description: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription = None,
        image_do: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO = None,
        is_highlight: bool = None,
        sub_title: str = None,
    ):
        self.baggage_desc = baggage_desc
        self.baggage_sub_content_type = baggage_sub_content_type
        self.description = description
        self.image_do = image_do
        self.is_highlight = is_highlight
        self.sub_title = sub_title

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(
        self,
        baggage_sub_content_visualizes: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes] = None,
        extra_content_visualizes: List[Any] = None,
        is_struct: bool = None,
        ptc: str = None,
        title: str = None,
    ):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes
        self.extra_content_visualizes = extra_content_visualizes
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.title = title

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips(TeaModel):
    def __init__(
        self,
        logo: str = None,
        tips_desc: str = None,
        tips_image: str = None,
    ):
        self.logo = logo
        self.tips_desc = tips_desc
        self.tips_image = tips_image

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem(TeaModel):
    def __init__(
        self,
        baggage_sub_items: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems] = None,
        index: int = None,
        table_head: str = None,
        tips: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips = None,
        title: str = None,
        type: int = None,
    ):
        self.baggage_sub_items = baggage_sub_items
        self.index = index
        self.table_head = table_head
        self.tips = tips
        self.title = title
        self.type = type

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        # isStruct : true
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightListingSearchResponseBodyModuleFlightListFlightRuleList(TeaModel):
    def __init__(
        self,
        baggage_info: str = None,
        baggage_item: FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem = None,
        change_rule: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule = None,
        change_rule_item: FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem = None,
        extra: str = None,
        refund_rule: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule = None,
        refund_rule_item: FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem = None,
        sign_rule: FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule = None,
        tuigaiqian_info: str = None,
        upgrade_rule: FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule = None,
    ):
        self.baggage_info = baggage_info
        self.baggage_item = baggage_item
        self.change_rule = change_rule
        self.change_rule_item = change_rule_item
        self.extra = extra
        self.refund_rule = refund_rule
        self.refund_rule_item = refund_rule_item
        self.sign_rule = sign_rule
        self.tuigaiqian_info = tuigaiqian_info
        self.upgrade_rule = upgrade_rule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightListingSearchResponseBodyModuleFlightList(TeaModel):
    def __init__(
        self,
        airline_info: FlightListingSearchResponseBodyModuleFlightListAirlineInfo = None,
        arr_airport_info: FlightListingSearchResponseBodyModuleFlightListArrAirportInfo = None,
        arr_date: str = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        cabin: str = None,
        cabin_class: str = None,
        carrier_airline: str = None,
        carrier_no: str = None,
        dep_airport_info: FlightListingSearchResponseBodyModuleFlightListDepAirportInfo = None,
        dep_city_code: str = None,
        dep_date: str = None,
        discount: int = None,
        flight_no: str = None,
        flight_rule_list: List[FlightListingSearchResponseBodyModuleFlightListFlightRuleList] = None,
        flight_rule_list_str: str = None,
        flight_size: str = None,
        flight_type: str = None,
        invoice_type: int = None,
        is_protocol: bool = None,
        is_share: bool = None,
        is_stop: bool = None,
        is_transfer: bool = None,
        meal_desc: str = None,
        oil_price: int = None,
        ota_item_id: str = None,
        price: int = None,
        product_type: int = None,
        product_type_desc: str = None,
        promotion_price: str = None,
        remained_seat_count: str = None,
        secret_params: str = None,
        segment_number: str = None,
        stop_arr_time: str = None,
        stop_city: str = None,
        stop_dep_time: str = None,
        ticket_price: int = None,
        total_price: str = None,
        trip_type: int = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.arr_date = arr_date
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.carrier_airline = carrier_airline
        self.carrier_no = carrier_no
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.dep_date = dep_date
        self.discount = discount
        self.flight_no = flight_no
        self.flight_rule_list = flight_rule_list
        self.flight_rule_list_str = flight_rule_list_str
        self.flight_size = flight_size
        self.flight_type = flight_type
        self.invoice_type = invoice_type
        self.is_protocol = is_protocol
        self.is_share = is_share
        self.is_stop = is_stop
        self.is_transfer = is_transfer
        self.meal_desc = meal_desc
        self.oil_price = oil_price
        self.ota_item_id = ota_item_id
        self.price = price
        self.product_type = product_type
        self.product_type_desc = product_type_desc
        self.promotion_price = promotion_price
        self.remained_seat_count = remained_seat_count
        self.secret_params = secret_params
        self.segment_number = segment_number
        self.stop_arr_time = stop_arr_time
        self.stop_city = stop_city
        self.stop_dep_time = stop_dep_time
        self.ticket_price = ticket_price
        self.total_price = total_price
        self.trip_type = trip_type

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_rule_list:
            for k in self.flight_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.carrier_airline is not None:
            result['carrier_airline'] = self.carrier_airline
        if self.carrier_no is not None:
            result['carrier_no'] = self.carrier_no
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        result['flight_rule_list'] = []
        if self.flight_rule_list is not None:
            for k in self.flight_rule_list:
                result['flight_rule_list'].append(k.to_map() if k else None)
        if self.flight_rule_list_str is not None:
            result['flight_rule_list_str'] = self.flight_rule_list_str
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.is_share is not None:
            result['is_share'] = self.is_share
        if self.is_stop is not None:
            result['is_stop'] = self.is_stop
        if self.is_transfer is not None:
            result['is_transfer'] = self.is_transfer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.product_type_desc is not None:
            result['product_type_desc'] = self.product_type_desc
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.remained_seat_count is not None:
            result['remained_seat_count'] = self.remained_seat_count
        if self.secret_params is not None:
            result['secret_params'] = self.secret_params
        if self.segment_number is not None:
            result['segment_number'] = self.segment_number
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('carrier_airline') is not None:
            self.carrier_airline = m.get('carrier_airline')
        if m.get('carrier_no') is not None:
            self.carrier_no = m.get('carrier_no')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightListingSearchResponseBodyModuleFlightListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        self.flight_rule_list = []
        if m.get('flight_rule_list') is not None:
            for k in m.get('flight_rule_list'):
                temp_model = FlightListingSearchResponseBodyModuleFlightListFlightRuleList()
                self.flight_rule_list.append(temp_model.from_map(k))
        if m.get('flight_rule_list_str') is not None:
            self.flight_rule_list_str = m.get('flight_rule_list_str')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('is_share') is not None:
            self.is_share = m.get('is_share')
        if m.get('is_stop') is not None:
            self.is_stop = m.get('is_stop')
        if m.get('is_transfer') is not None:
            self.is_transfer = m.get('is_transfer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('product_type_desc') is not None:
            self.product_type_desc = m.get('product_type_desc')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('remained_seat_count') is not None:
            self.remained_seat_count = m.get('remained_seat_count')
        if m.get('secret_params') is not None:
            self.secret_params = m.get('secret_params')
        if m.get('segment_number') is not None:
            self.segment_number = m.get('segment_number')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightListingSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_list: List[FlightListingSearchResponseBodyModuleFlightList] = None,
    ):
        self.flight_list = flight_list

    def validate(self):
        if self.flight_list:
            for k in self.flight_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_list'] = []
        if self.flight_list is not None:
            for k in self.flight_list:
                result['flight_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_list = []
        if m.get('flight_list') is not None:
            for k in m.get('flight_list'):
                temp_model = FlightListingSearchResponseBodyModuleFlightList()
                self.flight_list.append(temp_model.from_map(k))
        return self


class FlightListingSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightListingSearchResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightListingSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightListingSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightListingSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightListingSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightListingSearchV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightListingSearchV2RequestSearchJourneysSelectedFlights(TeaModel):
    def __init__(
        self,
        arr_airport_code: str = None,
        arr_city_code: str = None,
        dep_airport_code: str = None,
        dep_city_code: str = None,
        flight_time: str = None,
        market_flight_no: str = None,
        operate_flight_no: str = None,
    ):
        self.arr_airport_code = arr_airport_code
        self.arr_city_code = arr_city_code
        self.dep_airport_code = dep_airport_code
        self.dep_city_code = dep_city_code
        self.flight_time = flight_time
        self.market_flight_no = market_flight_no
        self.operate_flight_no = operate_flight_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.flight_time is not None:
            result['flight_time'] = self.flight_time
        if self.market_flight_no is not None:
            result['market_flight_no'] = self.market_flight_no
        if self.operate_flight_no is not None:
            result['operate_flight_no'] = self.operate_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('flight_time') is not None:
            self.flight_time = m.get('flight_time')
        if m.get('market_flight_no') is not None:
            self.market_flight_no = m.get('market_flight_no')
        if m.get('operate_flight_no') is not None:
            self.operate_flight_no = m.get('operate_flight_no')
        return self


class FlightListingSearchV2RequestSearchJourneys(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        selected_flights: List[FlightListingSearchV2RequestSearchJourneysSelectedFlights] = None,
    ):
        # This parameter is required.
        self.arr_city_code = arr_city_code
        # This parameter is required.
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.dep_date = dep_date
        self.selected_flights = selected_flights

    def validate(self):
        if self.selected_flights:
            for k in self.selected_flights:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        result['selected_flights'] = []
        if self.selected_flights is not None:
            for k in self.selected_flights:
                result['selected_flights'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        self.selected_flights = []
        if m.get('selected_flights') is not None:
            for k in m.get('selected_flights'):
                temp_model = FlightListingSearchV2RequestSearchJourneysSelectedFlights()
                self.selected_flights.append(temp_model.from_map(k))
        return self


class FlightListingSearchV2Request(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        cabin_type_list: List[int] = None,
        direct_only: bool = None,
        isv_name: str = None,
        need_multi_class_price: bool = None,
        need_query_service_fee: bool = None,
        need_share_flight: bool = None,
        need_ycbest_price: bool = None,
        search_journeys: List[FlightListingSearchV2RequestSearchJourneys] = None,
        search_mode: int = None,
        trip_type: int = None,
    ):
        self.airline_code = airline_code
        self.cabin_type_list = cabin_type_list
        self.direct_only = direct_only
        # This parameter is required.
        self.isv_name = isv_name
        self.need_multi_class_price = need_multi_class_price
        self.need_query_service_fee = need_query_service_fee
        self.need_share_flight = need_share_flight
        self.need_ycbest_price = need_ycbest_price
        # This parameter is required.
        self.search_journeys = search_journeys
        # This parameter is required.
        self.search_mode = search_mode
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        if self.search_journeys:
            for k in self.search_journeys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.cabin_type_list is not None:
            result['cabin_type_list'] = self.cabin_type_list
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.need_multi_class_price is not None:
            result['need_multi_class_price'] = self.need_multi_class_price
        if self.need_query_service_fee is not None:
            result['need_query_service_fee'] = self.need_query_service_fee
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        if self.need_ycbest_price is not None:
            result['need_y_c_best_price'] = self.need_ycbest_price
        result['search_journeys'] = []
        if self.search_journeys is not None:
            for k in self.search_journeys:
                result['search_journeys'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('cabin_type_list') is not None:
            self.cabin_type_list = m.get('cabin_type_list')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('need_multi_class_price') is not None:
            self.need_multi_class_price = m.get('need_multi_class_price')
        if m.get('need_query_service_fee') is not None:
            self.need_query_service_fee = m.get('need_query_service_fee')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        if m.get('need_y_c_best_price') is not None:
            self.need_ycbest_price = m.get('need_y_c_best_price')
        self.search_journeys = []
        if m.get('search_journeys') is not None:
            for k in m.get('search_journeys'):
                temp_model = FlightListingSearchV2RequestSearchJourneys()
                self.search_journeys.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightListingSearchV2ShrinkRequest(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        cabin_type_list_shrink: str = None,
        direct_only: bool = None,
        isv_name: str = None,
        need_multi_class_price: bool = None,
        need_query_service_fee: bool = None,
        need_share_flight: bool = None,
        need_ycbest_price: bool = None,
        search_journeys_shrink: str = None,
        search_mode: int = None,
        trip_type: int = None,
    ):
        self.airline_code = airline_code
        self.cabin_type_list_shrink = cabin_type_list_shrink
        self.direct_only = direct_only
        # This parameter is required.
        self.isv_name = isv_name
        self.need_multi_class_price = need_multi_class_price
        self.need_query_service_fee = need_query_service_fee
        self.need_share_flight = need_share_flight
        self.need_ycbest_price = need_ycbest_price
        # This parameter is required.
        self.search_journeys_shrink = search_journeys_shrink
        # This parameter is required.
        self.search_mode = search_mode
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.cabin_type_list_shrink is not None:
            result['cabin_type_list'] = self.cabin_type_list_shrink
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.need_multi_class_price is not None:
            result['need_multi_class_price'] = self.need_multi_class_price
        if self.need_query_service_fee is not None:
            result['need_query_service_fee'] = self.need_query_service_fee
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        if self.need_ycbest_price is not None:
            result['need_y_c_best_price'] = self.need_ycbest_price
        if self.search_journeys_shrink is not None:
            result['search_journeys'] = self.search_journeys_shrink
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('cabin_type_list') is not None:
            self.cabin_type_list_shrink = m.get('cabin_type_list')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('need_multi_class_price') is not None:
            self.need_multi_class_price = m.get('need_multi_class_price')
        if m.get('need_query_service_fee') is not None:
            self.need_query_service_fee = m.get('need_query_service_fee')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        if m.get('need_y_c_best_price') is not None:
            self.need_ycbest_price = m.get('need_y_c_best_price')
        if m.get('search_journeys') is not None:
            self.search_journeys_shrink = m.get('search_journeys')
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItemSubItems(TeaModel):
    def __init__(
        self,
        shopping_item_map: Dict[str, ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue] = None,
        uniq_key: str = None,
    ):
        self.shopping_item_map = shopping_item_map
        self.uniq_key = uniq_key

    def validate(self):
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        if self.uniq_key is not None:
            result['uniq_key'] = self.uniq_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleFlightItemListBestPriceItemSubItemsShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        if m.get('uniq_key') is not None:
            self.uniq_key = m.get('uniq_key')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItem(TeaModel):
    def __init__(
        self,
        flight_rule_infos: Dict[str, ModuleFlightItemListBestPriceItemFlightRuleInfosValue] = None,
        item_id: str = None,
        shopping_item_map: Dict[str, ModuleFlightItemListBestPriceItemShoppingItemMapValue] = None,
        sub_item_position_map: Dict[str, List[ModuleFlightItemListBestPriceItemSubItemPositionMapValue]] = None,
        sub_items: List[FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItemSubItems] = None,
    ):
        self.flight_rule_infos = flight_rule_infos
        self.item_id = item_id
        self.shopping_item_map = shopping_item_map
        self.sub_item_position_map = sub_item_position_map
        self.sub_items = sub_items

    def validate(self):
        if self.flight_rule_infos:
            for v in self.flight_rule_infos.values():
                if v:
                    v.validate()
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()
        if self.sub_item_position_map:
            for v in self.sub_item_position_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.sub_items:
            for k in self.sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_rule_infos'] = {}
        if self.flight_rule_infos is not None:
            for k, v in self.flight_rule_infos.items():
                result['flight_rule_infos'][k] = v.to_map()
        if self.item_id is not None:
            result['item_id'] = self.item_id
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        result['sub_item_position_map'] = {}
        if self.sub_item_position_map is not None:
            for k, v in self.sub_item_position_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['sub_item_position_map'][k] = l1
        result['sub_items'] = []
        if self.sub_items is not None:
            for k in self.sub_items:
                result['sub_items'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_rule_infos = {}
        if m.get('flight_rule_infos') is not None:
            for k, v in m.get('flight_rule_infos').items():
                temp_model = ModuleFlightItemListBestPriceItemFlightRuleInfosValue()
                self.flight_rule_infos[k] = temp_model.from_map(v)
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        self.sub_item_position_map = {}
        if m.get('sub_item_position_map') is not None:
            for k, v in m.get('sub_item_position_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleFlightItemListBestPriceItemSubItemPositionMapValue()
                    l1.append(temp_model.from_map(k1))
                self.sub_item_position_map['k'] = l1
        self.sub_items = []
        if m.get('sub_items') is not None:
            for k in m.get('sub_items'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItemSubItems()
                self.sub_items.append(temp_model.from_map(k))
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_name_color: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_name_color = airport_name_color
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_name_color is not None:
            result['airport_name_color'] = self.airport_name_color
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_name_color') is not None:
            self.airport_name_color = m.get('airport_name_color')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_name_color: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_name_color = airport_name_color
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_name_color is not None:
            result['airport_name_color'] = self.airport_name_color
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_name_color') is not None:
            self.airport_name_color = m.get('airport_name_color')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo(TeaModel):
    def __init__(
        self,
        operating_airline_info: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo = None,
        operating_flight_no: str = None,
    ):
        self.operating_airline_info = operating_airline_info
        self.operating_flight_no = operating_flight_no

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo(TeaModel):
    def __init__(
        self,
        stop_airport: str = None,
        stop_airport_name: str = None,
        stop_arr_term: str = None,
        stop_arr_time: str = None,
        stop_city_code: str = None,
        stop_city_name: str = None,
        stop_city_names: List[str] = None,
        stop_dep_term: str = None,
        stop_dep_time: str = None,
        stop_time: str = None,
    ):
        self.stop_airport = stop_airport
        self.stop_airport_name = stop_airport_name
        self.stop_arr_term = stop_arr_term
        self.stop_arr_time = stop_arr_time
        self.stop_city_code = stop_city_code
        self.stop_city_name = stop_city_name
        self.stop_city_names = stop_city_names
        self.stop_dep_term = stop_dep_term
        self.stop_dep_time = stop_dep_time
        self.stop_time = stop_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_airport_name is not None:
            result['stop_airport_name'] = self.stop_airport_name
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_city_names is not None:
            result['stop_city_names'] = self.stop_city_names
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_time is not None:
            result['stop_time'] = self.stop_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_airport_name') is not None:
            self.stop_airport_name = m.get('stop_airport_name')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_city_names') is not None:
            self.stop_city_names = m.get('stop_city_names')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_time') is not None:
            self.stop_time = m.get('stop_time')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos(TeaModel):
    def __init__(
        self,
        airline_info: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo = None,
        arr_airport_info: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        baggage_desc: str = None,
        dep_airport_info: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        duration: int = None,
        extra_info: Dict[str, Any] = None,
        flight_no: str = None,
        flight_share_info: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo = None,
        flight_size: str = None,
        flight_stop_info: FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo = None,
        flight_type: str = None,
        manufacturer: str = None,
        meal_desc: str = None,
        miles: int = None,
        on_time_rate: str = None,
        one_more: int = None,
        one_more_show: str = None,
        segment_index: int = None,
        share: bool = None,
        short_flight_size: str = None,
        stop: bool = None,
        total_time: str = None,
        transfer_time: str = None,
        transfer_time_number: int = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.baggage_desc = baggage_desc
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        # duration
        self.duration = duration
        self.extra_info = extra_info
        self.flight_no = flight_no
        self.flight_share_info = flight_share_info
        self.flight_size = flight_size
        self.flight_stop_info = flight_stop_info
        self.flight_type = flight_type
        self.manufacturer = manufacturer
        self.meal_desc = meal_desc
        self.miles = miles
        self.on_time_rate = on_time_rate
        self.one_more = one_more
        self.one_more_show = one_more_show
        self.segment_index = segment_index
        self.share = share
        self.short_flight_size = short_flight_size
        self.stop = stop
        self.total_time = total_time
        self.transfer_time = transfer_time
        self.transfer_time_number = transfer_time_number

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.extra_info is not None:
            result['extra_info'] = self.extra_info
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.miles is not None:
            result['miles'] = self.miles
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        if self.one_more is not None:
            result['one_more'] = self.one_more
        if self.one_more_show is not None:
            result['one_more_show'] = self.one_more_show
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.stop is not None:
            result['stop'] = self.stop
        if self.total_time is not None:
            result['total_time'] = self.total_time
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        if self.transfer_time_number is not None:
            result['transfer_time_number'] = self.transfer_time_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('extra_info') is not None:
            self.extra_info = m.get('extra_info')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('miles') is not None:
            self.miles = m.get('miles')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        if m.get('one_more') is not None:
            self.one_more = m.get('one_more')
        if m.get('one_more_show') is not None:
            self.one_more_show = m.get('one_more_show')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('total_time') is not None:
            self.total_time = m.get('total_time')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        if m.get('transfer_time_number') is not None:
            self.transfer_time_number = m.get('transfer_time_number')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfos(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        duration: int = None,
        extensions: Dict[str, str] = None,
        flight_segment_infos: List[FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos] = None,
        journey_index: int = None,
        transfer_time: int = None,
    ):
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.duration = duration
        self.extensions = extensions
        self.flight_segment_infos = flight_segment_infos
        self.journey_index = journey_index
        self.transfer_time = transfer_time

    def validate(self):
        if self.flight_segment_infos:
            for k in self.flight_segment_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.extensions is not None:
            result['extensions'] = self.extensions
        result['flight_segment_infos'] = []
        if self.flight_segment_infos is not None:
            for k in self.flight_segment_infos:
                result['flight_segment_infos'].append(k.to_map() if k else None)
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('extensions') is not None:
            self.extensions = m.get('extensions')
        self.flight_segment_infos = []
        if m.get('flight_segment_infos') is not None:
            for k in m.get('flight_segment_infos'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos()
                self.flight_segment_infos.append(temp_model.from_map(k))
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListItemListSubItems(TeaModel):
    def __init__(
        self,
        shopping_item_map: Dict[str, ModuleFlightItemListItemListSubItemsShoppingItemMapValue] = None,
        tag: str = None,
        uniq_key: str = None,
    ):
        self.shopping_item_map = shopping_item_map
        self.tag = tag
        self.uniq_key = uniq_key

    def validate(self):
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        if self.tag is not None:
            result['tag'] = self.tag
        if self.uniq_key is not None:
            result['uniq_key'] = self.uniq_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleFlightItemListItemListSubItemsShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        if m.get('tag') is not None:
            self.tag = m.get('tag')
        if m.get('uniq_key') is not None:
            self.uniq_key = m.get('uniq_key')
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemListItemList(TeaModel):
    def __init__(
        self,
        flight_rule_infos: Dict[str, ModuleFlightItemListItemListFlightRuleInfosValue] = None,
        item_id: str = None,
        shopping_item_map: Dict[str, ModuleFlightItemListItemListShoppingItemMapValue] = None,
        sub_item_position_map: Dict[str, List[ModuleFlightItemListItemListSubItemPositionMapValue]] = None,
        sub_items: List[FlightListingSearchV2ResponseBodyModuleFlightItemListItemListSubItems] = None,
    ):
        self.flight_rule_infos = flight_rule_infos
        self.item_id = item_id
        self.shopping_item_map = shopping_item_map
        self.sub_item_position_map = sub_item_position_map
        self.sub_items = sub_items

    def validate(self):
        if self.flight_rule_infos:
            for v in self.flight_rule_infos.values():
                if v:
                    v.validate()
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()
        if self.sub_item_position_map:
            for v in self.sub_item_position_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.sub_items:
            for k in self.sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_rule_infos'] = {}
        if self.flight_rule_infos is not None:
            for k, v in self.flight_rule_infos.items():
                result['flight_rule_infos'][k] = v.to_map()
        if self.item_id is not None:
            result['item_id'] = self.item_id
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        result['sub_item_position_map'] = {}
        if self.sub_item_position_map is not None:
            for k, v in self.sub_item_position_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['sub_item_position_map'][k] = l1
        result['sub_items'] = []
        if self.sub_items is not None:
            for k in self.sub_items:
                result['sub_items'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_rule_infos = {}
        if m.get('flight_rule_infos') is not None:
            for k, v in m.get('flight_rule_infos').items():
                temp_model = ModuleFlightItemListItemListFlightRuleInfosValue()
                self.flight_rule_infos[k] = temp_model.from_map(v)
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleFlightItemListItemListShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        self.sub_item_position_map = {}
        if m.get('sub_item_position_map') is not None:
            for k, v in m.get('sub_item_position_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleFlightItemListItemListSubItemPositionMapValue()
                    l1.append(temp_model.from_map(k1))
                self.sub_item_position_map['k'] = l1
        self.sub_items = []
        if m.get('sub_items') is not None:
            for k in m.get('sub_items'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListItemListSubItems()
                self.sub_items.append(temp_model.from_map(k))
        return self


class FlightListingSearchV2ResponseBodyModuleFlightItemList(TeaModel):
    def __init__(
        self,
        best_price_item: FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItem = None,
        flight_journey_infos: List[FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfos] = None,
        item_list: List[FlightListingSearchV2ResponseBodyModuleFlightItemListItemList] = None,
    ):
        self.best_price_item = best_price_item
        self.flight_journey_infos = flight_journey_infos
        self.item_list = item_list

    def validate(self):
        if self.best_price_item:
            self.best_price_item.validate()
        if self.flight_journey_infos:
            for k in self.flight_journey_infos:
                if k:
                    k.validate()
        if self.item_list:
            for k in self.item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.best_price_item is not None:
            result['best_price_item'] = self.best_price_item.to_map()
        result['flight_journey_infos'] = []
        if self.flight_journey_infos is not None:
            for k in self.flight_journey_infos:
                result['flight_journey_infos'].append(k.to_map() if k else None)
        result['item_list'] = []
        if self.item_list is not None:
            for k in self.item_list:
                result['item_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('best_price_item') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListBestPriceItem()
            self.best_price_item = temp_model.from_map(m['best_price_item'])
        self.flight_journey_infos = []
        if m.get('flight_journey_infos') is not None:
            for k in m.get('flight_journey_infos'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListFlightJourneyInfos()
                self.flight_journey_infos.append(temp_model.from_map(k))
        self.item_list = []
        if m.get('item_list') is not None:
            for k in m.get('item_list'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemListItemList()
                self.item_list.append(temp_model.from_map(k))
        return self


class FlightListingSearchV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_item_list: List[FlightListingSearchV2ResponseBodyModuleFlightItemList] = None,
        search_mode: int = None,
        trip_type: int = None,
    ):
        self.flight_item_list = flight_item_list
        self.search_mode = search_mode
        self.trip_type = trip_type

    def validate(self):
        if self.flight_item_list:
            for k in self.flight_item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_item_list'] = []
        if self.flight_item_list is not None:
            for k in self.flight_item_list:
                result['flight_item_list'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_item_list = []
        if m.get('flight_item_list') is not None:
            for k in m.get('flight_item_list'):
                temp_model = FlightListingSearchV2ResponseBodyModuleFlightItemList()
                self.flight_item_list.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightListingSearchV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightListingSearchV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightListingSearchV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightListingSearchV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightListingSearchV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightListingSearchV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyApplyV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyApplyV2RequestPassengerSegmentRelations(TeaModel):
    def __init__(
        self,
        passenger_id: str = None,
        segment_id_list: List[str] = None,
    ):
        self.passenger_id = passenger_id
        self.segment_id_list = segment_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.segment_id_list is not None:
            result['segment_id_list'] = self.segment_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('segment_id_list') is not None:
            self.segment_id_list = m.get('segment_id_list')
        return self


class FlightModifyApplyV2Request(TeaModel):
    def __init__(
        self,
        cache_key: str = None,
        contact_phone: str = None,
        isv_name: str = None,
        item_id: str = None,
        order_id: int = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        passenger_segment_relations: List[FlightModifyApplyV2RequestPassengerSegmentRelations] = None,
        reason: str = None,
        session_id: str = None,
        voluntary: bool = None,
    ):
        self.cache_key = cache_key
        self.contact_phone = contact_phone
        self.isv_name = isv_name
        self.item_id = item_id
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.passenger_segment_relations = passenger_segment_relations
        self.reason = reason
        # sessionId
        self.session_id = session_id
        self.voluntary = voluntary

    def validate(self):
        if self.passenger_segment_relations:
            for k in self.passenger_segment_relations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cache_key is not None:
            result['cache_key'] = self.cache_key
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        result['passenger_segment_relations'] = []
        if self.passenger_segment_relations is not None:
            for k in self.passenger_segment_relations:
                result['passenger_segment_relations'].append(k.to_map() if k else None)
        if self.reason is not None:
            result['reason'] = self.reason
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cache_key') is not None:
            self.cache_key = m.get('cache_key')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        self.passenger_segment_relations = []
        if m.get('passenger_segment_relations') is not None:
            for k in m.get('passenger_segment_relations'):
                temp_model = FlightModifyApplyV2RequestPassengerSegmentRelations()
                self.passenger_segment_relations.append(temp_model.from_map(k))
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyApplyV2ShrinkRequest(TeaModel):
    def __init__(
        self,
        cache_key: str = None,
        contact_phone: str = None,
        isv_name: str = None,
        item_id: str = None,
        order_id: int = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        passenger_segment_relations_shrink: str = None,
        reason: str = None,
        session_id: str = None,
        voluntary: bool = None,
    ):
        self.cache_key = cache_key
        self.contact_phone = contact_phone
        self.isv_name = isv_name
        self.item_id = item_id
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.passenger_segment_relations_shrink = passenger_segment_relations_shrink
        self.reason = reason
        # sessionId
        self.session_id = session_id
        self.voluntary = voluntary

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cache_key is not None:
            result['cache_key'] = self.cache_key
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.passenger_segment_relations_shrink is not None:
            result['passenger_segment_relations'] = self.passenger_segment_relations_shrink
        if self.reason is not None:
            result['reason'] = self.reason
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cache_key') is not None:
            self.cache_key = m.get('cache_key')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('passenger_segment_relations') is not None:
            self.passenger_segment_relations_shrink = m.get('passenger_segment_relations')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyApplyV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        sub_order_id: str = None,
    ):
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.sub_order_id = sub_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class FlightModifyApplyV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightModifyApplyV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightModifyApplyV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyApplyV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightModifyApplyV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyApplyV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyCancelV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyCancelV2Request(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: int = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        sub_order_id: int = None,
    ):
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.sub_order_id = sub_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class FlightModifyCancelV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: Dict[str, Any] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyCancelV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightModifyCancelV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyCancelV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyListingSearchV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyListingSearchV2RequestPassengerSegmentRelations(TeaModel):
    def __init__(
        self,
        passenger_id: str = None,
        segment_id_list: List[str] = None,
    ):
        self.passenger_id = passenger_id
        self.segment_id_list = segment_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.segment_id_list is not None:
            result['segment_id_list'] = self.segment_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('segment_id_list') is not None:
            self.segment_id_list = m.get('segment_id_list')
        return self


class FlightModifyListingSearchV2RequestSelectedSegments(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        dep_city_code: str = None,
        dep_date_time: str = None,
        journey_seq: int = None,
        marketing_flight_no: str = None,
        operating_flight_no: str = None,
        segment_seq: int = None,
    ):
        self.arr_city_code = arr_city_code
        self.dep_city_code = dep_city_code
        self.dep_date_time = dep_date_time
        self.journey_seq = journey_seq
        self.marketing_flight_no = marketing_flight_no
        self.operating_flight_no = operating_flight_no
        self.segment_seq = segment_seq

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date_time is not None:
            result['dep_date_time'] = self.dep_date_time
        if self.journey_seq is not None:
            result['journey_seq'] = self.journey_seq
        if self.marketing_flight_no is not None:
            result['marketing_flight_no'] = self.marketing_flight_no
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        if self.segment_seq is not None:
            result['segment_seq'] = self.segment_seq
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date_time') is not None:
            self.dep_date_time = m.get('dep_date_time')
        if m.get('journey_seq') is not None:
            self.journey_seq = m.get('journey_seq')
        if m.get('marketing_flight_no') is not None:
            self.marketing_flight_no = m.get('marketing_flight_no')
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        if m.get('segment_seq') is not None:
            self.segment_seq = m.get('segment_seq')
        return self


class FlightModifyListingSearchV2Request(TeaModel):
    def __init__(
        self,
        cabin_class: List[int] = None,
        dep_date: List[str] = None,
        interface_caller_is_support_retry: bool = None,
        isv_name: str = None,
        order_id: int = None,
        out_order_id: str = None,
        passenger_segment_relations: List[FlightModifyListingSearchV2RequestPassengerSegmentRelations] = None,
        search_mode: int = None,
        search_retry_token: str = None,
        selected_segments: List[FlightModifyListingSearchV2RequestSelectedSegments] = None,
        session_id: str = None,
        voluntary: bool = None,
    ):
        self.cabin_class = cabin_class
        self.dep_date = dep_date
        self.interface_caller_is_support_retry = interface_caller_is_support_retry
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.passenger_segment_relations = passenger_segment_relations
        self.search_mode = search_mode
        self.search_retry_token = search_retry_token
        self.selected_segments = selected_segments
        self.session_id = session_id
        self.voluntary = voluntary

    def validate(self):
        if self.passenger_segment_relations:
            for k in self.passenger_segment_relations:
                if k:
                    k.validate()
        if self.selected_segments:
            for k in self.selected_segments:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.interface_caller_is_support_retry is not None:
            result['interface_caller_is_support_retry'] = self.interface_caller_is_support_retry
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_segment_relations'] = []
        if self.passenger_segment_relations is not None:
            for k in self.passenger_segment_relations:
                result['passenger_segment_relations'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.search_retry_token is not None:
            result['search_retry_token'] = self.search_retry_token
        result['selected_segments'] = []
        if self.selected_segments is not None:
            for k in self.selected_segments:
                result['selected_segments'].append(k.to_map() if k else None)
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('interface_caller_is_support_retry') is not None:
            self.interface_caller_is_support_retry = m.get('interface_caller_is_support_retry')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_segment_relations = []
        if m.get('passenger_segment_relations') is not None:
            for k in m.get('passenger_segment_relations'):
                temp_model = FlightModifyListingSearchV2RequestPassengerSegmentRelations()
                self.passenger_segment_relations.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('search_retry_token') is not None:
            self.search_retry_token = m.get('search_retry_token')
        self.selected_segments = []
        if m.get('selected_segments') is not None:
            for k in m.get('selected_segments'):
                temp_model = FlightModifyListingSearchV2RequestSelectedSegments()
                self.selected_segments.append(temp_model.from_map(k))
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyListingSearchV2ShrinkRequest(TeaModel):
    def __init__(
        self,
        cabin_class_shrink: str = None,
        dep_date_shrink: str = None,
        interface_caller_is_support_retry: bool = None,
        isv_name: str = None,
        order_id: int = None,
        out_order_id: str = None,
        passenger_segment_relations_shrink: str = None,
        search_mode: int = None,
        search_retry_token: str = None,
        selected_segments_shrink: str = None,
        session_id: str = None,
        voluntary: bool = None,
    ):
        self.cabin_class_shrink = cabin_class_shrink
        self.dep_date_shrink = dep_date_shrink
        self.interface_caller_is_support_retry = interface_caller_is_support_retry
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.passenger_segment_relations_shrink = passenger_segment_relations_shrink
        self.search_mode = search_mode
        self.search_retry_token = search_retry_token
        self.selected_segments_shrink = selected_segments_shrink
        self.session_id = session_id
        self.voluntary = voluntary

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class_shrink is not None:
            result['cabin_class'] = self.cabin_class_shrink
        if self.dep_date_shrink is not None:
            result['dep_date'] = self.dep_date_shrink
        if self.interface_caller_is_support_retry is not None:
            result['interface_caller_is_support_retry'] = self.interface_caller_is_support_retry
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.passenger_segment_relations_shrink is not None:
            result['passenger_segment_relations'] = self.passenger_segment_relations_shrink
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.search_retry_token is not None:
            result['search_retry_token'] = self.search_retry_token
        if self.selected_segments_shrink is not None:
            result['selected_segments'] = self.selected_segments_shrink
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class_shrink = m.get('cabin_class')
        if m.get('dep_date') is not None:
            self.dep_date_shrink = m.get('dep_date')
        if m.get('interface_caller_is_support_retry') is not None:
            self.interface_caller_is_support_retry = m.get('interface_caller_is_support_retry')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('passenger_segment_relations') is not None:
            self.passenger_segment_relations_shrink = m.get('passenger_segment_relations')
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('search_retry_token') is not None:
            self.search_retry_token = m.get('search_retry_token')
        if m.get('selected_segments') is not None:
            self.selected_segments_shrink = m.get('selected_segments')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfo(TeaModel):
    def __init__(
        self,
        operating_airline_info: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfoOperatingAirlineInfo = None,
        operating_flight_no: str = None,
    ):
        self.operating_airline_info = operating_airline_info
        self.operating_flight_no = operating_flight_no

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightStopInfo(TeaModel):
    def __init__(
        self,
        stop_airport: str = None,
        stop_arr_term: str = None,
        stop_arr_time: str = None,
        stop_city_code: str = None,
        stop_city_name: str = None,
        stop_dep_term: str = None,
        stop_dep_time: str = None,
    ):
        self.stop_airport = stop_airport
        self.stop_arr_term = stop_arr_term
        self.stop_arr_time = stop_arr_time
        self.stop_city_code = stop_city_code
        self.stop_city_name = stop_city_name
        self.stop_dep_term = stop_dep_term
        self.stop_dep_time = stop_dep_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfoTransferAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfo(TeaModel):
    def __init__(
        self,
        transfer_airline_info: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfoTransferAirlineInfo = None,
        transfer_city_code: str = None,
        transfer_city_name: str = None,
        transfer_dep_time: str = None,
        transfer_flight_no: str = None,
        transfer_flight_size: str = None,
        transfer_share: bool = None,
        transfer_stop_time: int = None,
    ):
        self.transfer_airline_info = transfer_airline_info
        self.transfer_city_code = transfer_city_code
        self.transfer_city_name = transfer_city_name
        self.transfer_dep_time = transfer_dep_time
        self.transfer_flight_no = transfer_flight_no
        self.transfer_flight_size = transfer_flight_size
        self.transfer_share = transfer_share
        self.transfer_stop_time = transfer_stop_time

    def validate(self):
        if self.transfer_airline_info:
            self.transfer_airline_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.transfer_airline_info is not None:
            result['transfer_airline_info'] = self.transfer_airline_info.to_map()
        if self.transfer_city_code is not None:
            result['transfer_city_code'] = self.transfer_city_code
        if self.transfer_city_name is not None:
            result['transfer_city_name'] = self.transfer_city_name
        if self.transfer_dep_time is not None:
            result['transfer_dep_time'] = self.transfer_dep_time
        if self.transfer_flight_no is not None:
            result['transfer_flight_no'] = self.transfer_flight_no
        if self.transfer_flight_size is not None:
            result['transfer_flight_size'] = self.transfer_flight_size
        if self.transfer_share is not None:
            result['transfer_share'] = self.transfer_share
        if self.transfer_stop_time is not None:
            result['transfer_stop_time'] = self.transfer_stop_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('transfer_airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfoTransferAirlineInfo()
            self.transfer_airline_info = temp_model.from_map(m['transfer_airline_info'])
        if m.get('transfer_city_code') is not None:
            self.transfer_city_code = m.get('transfer_city_code')
        if m.get('transfer_city_name') is not None:
            self.transfer_city_name = m.get('transfer_city_name')
        if m.get('transfer_dep_time') is not None:
            self.transfer_dep_time = m.get('transfer_dep_time')
        if m.get('transfer_flight_no') is not None:
            self.transfer_flight_no = m.get('transfer_flight_no')
        if m.get('transfer_flight_size') is not None:
            self.transfer_flight_size = m.get('transfer_flight_size')
        if m.get('transfer_share') is not None:
            self.transfer_share = m.get('transfer_share')
        if m.get('transfer_stop_time') is not None:
            self.transfer_stop_time = m.get('transfer_stop_time')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTOReShopPriceInfoDTO(TeaModel):
    def __init__(
        self,
        re_shop_adult_change_fee: int = None,
        re_shop_adult_price: int = None,
        re_shop_adult_price_gap: int = None,
        re_shop_child_change_fee: int = None,
        re_shop_child_price: int = None,
        re_shop_child_price_gap: int = None,
        re_shop_inf_change_fee: int = None,
        re_shop_inf_price: int = None,
        re_shop_inf_price_gap: int = None,
    ):
        self.re_shop_adult_change_fee = re_shop_adult_change_fee
        self.re_shop_adult_price = re_shop_adult_price
        self.re_shop_adult_price_gap = re_shop_adult_price_gap
        self.re_shop_child_change_fee = re_shop_child_change_fee
        self.re_shop_child_price = re_shop_child_price
        self.re_shop_child_price_gap = re_shop_child_price_gap
        self.re_shop_inf_change_fee = re_shop_inf_change_fee
        self.re_shop_inf_price = re_shop_inf_price
        self.re_shop_inf_price_gap = re_shop_inf_price_gap

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.re_shop_adult_change_fee is not None:
            result['re_shop_adult_change_fee'] = self.re_shop_adult_change_fee
        if self.re_shop_adult_price is not None:
            result['re_shop_adult_price'] = self.re_shop_adult_price
        if self.re_shop_adult_price_gap is not None:
            result['re_shop_adult_price_gap'] = self.re_shop_adult_price_gap
        if self.re_shop_child_change_fee is not None:
            result['re_shop_child_change_fee'] = self.re_shop_child_change_fee
        if self.re_shop_child_price is not None:
            result['re_shop_child_price'] = self.re_shop_child_price
        if self.re_shop_child_price_gap is not None:
            result['re_shop_child_price_gap'] = self.re_shop_child_price_gap
        if self.re_shop_inf_change_fee is not None:
            result['re_shop_inf_change_fee'] = self.re_shop_inf_change_fee
        if self.re_shop_inf_price is not None:
            result['re_shop_inf_price'] = self.re_shop_inf_price
        if self.re_shop_inf_price_gap is not None:
            result['re_shop_inf_price_gap'] = self.re_shop_inf_price_gap
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('re_shop_adult_change_fee') is not None:
            self.re_shop_adult_change_fee = m.get('re_shop_adult_change_fee')
        if m.get('re_shop_adult_price') is not None:
            self.re_shop_adult_price = m.get('re_shop_adult_price')
        if m.get('re_shop_adult_price_gap') is not None:
            self.re_shop_adult_price_gap = m.get('re_shop_adult_price_gap')
        if m.get('re_shop_child_change_fee') is not None:
            self.re_shop_child_change_fee = m.get('re_shop_child_change_fee')
        if m.get('re_shop_child_price') is not None:
            self.re_shop_child_price = m.get('re_shop_child_price')
        if m.get('re_shop_child_price_gap') is not None:
            self.re_shop_child_price_gap = m.get('re_shop_child_price_gap')
        if m.get('re_shop_inf_change_fee') is not None:
            self.re_shop_inf_change_fee = m.get('re_shop_inf_change_fee')
        if m.get('re_shop_inf_price') is not None:
            self.re_shop_inf_price = m.get('re_shop_inf_price')
        if m.get('re_shop_inf_price_gap') is not None:
            self.re_shop_inf_price_gap = m.get('re_shop_inf_price_gap')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTO(TeaModel):
    def __init__(
        self,
        adult_price: int = None,
        adult_tax: int = None,
        adult_total_price: int = None,
        before_control_price: int = None,
        child_price: int = None,
        child_tax: int = None,
        child_total_price: int = None,
        infant_price: int = None,
        infant_tax: int = None,
        infant_total_price: int = None,
        original_adult_price: int = None,
        original_adult_total_price: int = None,
        re_shop_price_info_dto: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTOReShopPriceInfoDTO = None,
    ):
        self.adult_price = adult_price
        self.adult_tax = adult_tax
        self.adult_total_price = adult_total_price
        self.before_control_price = before_control_price
        self.child_price = child_price
        self.child_tax = child_tax
        self.child_total_price = child_total_price
        self.infant_price = infant_price
        self.infant_tax = infant_tax
        self.infant_total_price = infant_total_price
        self.original_adult_price = original_adult_price
        self.original_adult_total_price = original_adult_total_price
        self.re_shop_price_info_dto = re_shop_price_info_dto

    def validate(self):
        if self.re_shop_price_info_dto:
            self.re_shop_price_info_dto.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_price is not None:
            result['adult_price'] = self.adult_price
        if self.adult_tax is not None:
            result['adult_tax'] = self.adult_tax
        if self.adult_total_price is not None:
            result['adult_total_price'] = self.adult_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.child_price is not None:
            result['child_price'] = self.child_price
        if self.child_tax is not None:
            result['child_tax'] = self.child_tax
        if self.child_total_price is not None:
            result['child_total_price'] = self.child_total_price
        if self.infant_price is not None:
            result['infant_price'] = self.infant_price
        if self.infant_tax is not None:
            result['infant_tax'] = self.infant_tax
        if self.infant_total_price is not None:
            result['infant_total_price'] = self.infant_total_price
        if self.original_adult_price is not None:
            result['original_adult_price'] = self.original_adult_price
        if self.original_adult_total_price is not None:
            result['original_adult_total_price'] = self.original_adult_total_price
        if self.re_shop_price_info_dto is not None:
            result['re_shop_price_info_d_t_o'] = self.re_shop_price_info_dto.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adult_price') is not None:
            self.adult_price = m.get('adult_price')
        if m.get('adult_tax') is not None:
            self.adult_tax = m.get('adult_tax')
        if m.get('adult_total_price') is not None:
            self.adult_total_price = m.get('adult_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('child_price') is not None:
            self.child_price = m.get('child_price')
        if m.get('child_tax') is not None:
            self.child_tax = m.get('child_tax')
        if m.get('child_total_price') is not None:
            self.child_total_price = m.get('child_total_price')
        if m.get('infant_price') is not None:
            self.infant_price = m.get('infant_price')
        if m.get('infant_tax') is not None:
            self.infant_tax = m.get('infant_tax')
        if m.get('infant_total_price') is not None:
            self.infant_total_price = m.get('infant_total_price')
        if m.get('original_adult_price') is not None:
            self.original_adult_price = m.get('original_adult_price')
        if m.get('original_adult_total_price') is not None:
            self.original_adult_total_price = m.get('original_adult_total_price')
        if m.get('re_shop_price_info_d_t_o') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTOReShopPriceInfoDTO()
            self.re_shop_price_info_dto = temp_model.from_map(m['re_shop_price_info_d_t_o'])
        return self


class FlightModifyListingSearchV2ResponseBodyModuleDirectFlightList(TeaModel):
    def __init__(
        self,
        airline_info: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListAirlineInfo = None,
        arr_airport_info: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListArrAirportInfo = None,
        arr_city_code: str = None,
        arr_time: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        dep_airport_info: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListDepAirportInfo = None,
        dep_city_code: str = None,
        dep_time: str = None,
        duration: int = None,
        flight_no: str = None,
        flight_share_info: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfo = None,
        flight_size: str = None,
        flight_stop_info: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightStopInfo = None,
        flight_transfer_info: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfo = None,
        flight_type: str = None,
        journey_seq: int = None,
        left_num: str = None,
        manufacturer: str = None,
        meal_desc: str = None,
        price_info_dto: FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTO = None,
        segment_seq: int = None,
        share: bool = None,
        short_flight_size: str = None,
        span_day: str = None,
        stop: bool = None,
        transfer: bool = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.arr_city_code = arr_city_code
        self.arr_time = arr_time
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.dep_time = dep_time
        self.duration = duration
        self.flight_no = flight_no
        self.flight_share_info = flight_share_info
        self.flight_size = flight_size
        self.flight_stop_info = flight_stop_info
        self.flight_transfer_info = flight_transfer_info
        self.flight_type = flight_type
        self.journey_seq = journey_seq
        self.left_num = left_num
        self.manufacturer = manufacturer
        self.meal_desc = meal_desc
        self.price_info_dto = price_info_dto
        self.segment_seq = segment_seq
        self.share = share
        self.short_flight_size = short_flight_size
        self.span_day = span_day
        self.stop = stop
        self.transfer = transfer

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()
        if self.flight_transfer_info:
            self.flight_transfer_info.validate()
        if self.price_info_dto:
            self.price_info_dto.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin_class is not None:
            result['cabinClass'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabinClassName'] = self.cabin_class_name
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_transfer_info is not None:
            result['flight_transfer_info'] = self.flight_transfer_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.journey_seq is not None:
            result['journey_seq'] = self.journey_seq
        if self.left_num is not None:
            result['left_num'] = self.left_num
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.price_info_dto is not None:
            result['price_info_d_t_o'] = self.price_info_dto.to_map()
        if self.segment_seq is not None:
            result['segment_seq'] = self.segment_seq
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.span_day is not None:
            result['span_day'] = self.span_day
        if self.stop is not None:
            result['stop'] = self.stop
        if self.transfer is not None:
            result['transfer'] = self.transfer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabinClass') is not None:
            self.cabin_class = m.get('cabinClass')
        if m.get('cabinClassName') is not None:
            self.cabin_class_name = m.get('cabinClassName')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_transfer_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListFlightTransferInfo()
            self.flight_transfer_info = temp_model.from_map(m['flight_transfer_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('journey_seq') is not None:
            self.journey_seq = m.get('journey_seq')
        if m.get('left_num') is not None:
            self.left_num = m.get('left_num')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('price_info_d_t_o') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightListPriceInfoDTO()
            self.price_info_dto = temp_model.from_map(m['price_info_d_t_o'])
        if m.get('segment_seq') is not None:
            self.segment_seq = m.get('segment_seq')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('span_day') is not None:
            self.span_day = m.get('span_day')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('transfer') is not None:
            self.transfer = m.get('transfer')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfo(TeaModel):
    def __init__(
        self,
        operating_airline_info: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfoOperatingAirlineInfo = None,
        operating_flight_no: str = None,
    ):
        self.operating_airline_info = operating_airline_info
        self.operating_flight_no = operating_flight_no

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightStopInfo(TeaModel):
    def __init__(
        self,
        stop_airport: str = None,
        stop_arr_term: str = None,
        stop_arr_time: str = None,
        stop_city_code: str = None,
        stop_city_name: str = None,
        stop_dep_term: str = None,
        stop_dep_time: str = None,
    ):
        self.stop_airport = stop_airport
        self.stop_arr_term = stop_arr_term
        self.stop_arr_time = stop_arr_time
        self.stop_city_code = stop_city_code
        self.stop_city_name = stop_city_name
        self.stop_dep_term = stop_dep_term
        self.stop_dep_time = stop_dep_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfoTransferAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfo(TeaModel):
    def __init__(
        self,
        transfer_airline_info: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfoTransferAirlineInfo = None,
        transfer_city_code: str = None,
        transfer_city_name: str = None,
        transfer_dep_time: str = None,
        transfer_flight_no: str = None,
        transfer_flight_size: str = None,
        transfer_share: bool = None,
        transfer_stop_time: int = None,
    ):
        self.transfer_airline_info = transfer_airline_info
        self.transfer_city_code = transfer_city_code
        self.transfer_city_name = transfer_city_name
        self.transfer_dep_time = transfer_dep_time
        self.transfer_flight_no = transfer_flight_no
        self.transfer_flight_size = transfer_flight_size
        self.transfer_share = transfer_share
        self.transfer_stop_time = transfer_stop_time

    def validate(self):
        if self.transfer_airline_info:
            self.transfer_airline_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.transfer_airline_info is not None:
            result['transfer_airline_info'] = self.transfer_airline_info.to_map()
        if self.transfer_city_code is not None:
            result['transfer_city_code'] = self.transfer_city_code
        if self.transfer_city_name is not None:
            result['transfer_city_name'] = self.transfer_city_name
        if self.transfer_dep_time is not None:
            result['transfer_dep_time'] = self.transfer_dep_time
        if self.transfer_flight_no is not None:
            result['transfer_flight_no'] = self.transfer_flight_no
        if self.transfer_flight_size is not None:
            result['transfer_flight_size'] = self.transfer_flight_size
        if self.transfer_share is not None:
            result['transfer_share'] = self.transfer_share
        if self.transfer_stop_time is not None:
            result['transfer_stop_time'] = self.transfer_stop_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('transfer_airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfoTransferAirlineInfo()
            self.transfer_airline_info = temp_model.from_map(m['transfer_airline_info'])
        if m.get('transfer_city_code') is not None:
            self.transfer_city_code = m.get('transfer_city_code')
        if m.get('transfer_city_name') is not None:
            self.transfer_city_name = m.get('transfer_city_name')
        if m.get('transfer_dep_time') is not None:
            self.transfer_dep_time = m.get('transfer_dep_time')
        if m.get('transfer_flight_no') is not None:
            self.transfer_flight_no = m.get('transfer_flight_no')
        if m.get('transfer_flight_size') is not None:
            self.transfer_flight_size = m.get('transfer_flight_size')
        if m.get('transfer_share') is not None:
            self.transfer_share = m.get('transfer_share')
        if m.get('transfer_stop_time') is not None:
            self.transfer_stop_time = m.get('transfer_stop_time')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTOReShopPriceInfoDTO(TeaModel):
    def __init__(
        self,
        re_shop_adult_change_fee: int = None,
        re_shop_adult_price: int = None,
        re_shop_adult_price_gap: int = None,
        re_shop_child_change_fee: int = None,
        re_shop_child_price: int = None,
        re_shop_child_price_gap: int = None,
        re_shop_inf_change_fee: int = None,
        re_shop_inf_price: int = None,
        re_shop_inf_price_gap: int = None,
    ):
        self.re_shop_adult_change_fee = re_shop_adult_change_fee
        self.re_shop_adult_price = re_shop_adult_price
        self.re_shop_adult_price_gap = re_shop_adult_price_gap
        self.re_shop_child_change_fee = re_shop_child_change_fee
        self.re_shop_child_price = re_shop_child_price
        self.re_shop_child_price_gap = re_shop_child_price_gap
        self.re_shop_inf_change_fee = re_shop_inf_change_fee
        self.re_shop_inf_price = re_shop_inf_price
        self.re_shop_inf_price_gap = re_shop_inf_price_gap

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.re_shop_adult_change_fee is not None:
            result['re_shop_adult_change_fee'] = self.re_shop_adult_change_fee
        if self.re_shop_adult_price is not None:
            result['re_shop_adult_price'] = self.re_shop_adult_price
        if self.re_shop_adult_price_gap is not None:
            result['re_shop_adult_price_gap'] = self.re_shop_adult_price_gap
        if self.re_shop_child_change_fee is not None:
            result['re_shop_child_change_fee'] = self.re_shop_child_change_fee
        if self.re_shop_child_price is not None:
            result['re_shop_child_price'] = self.re_shop_child_price
        if self.re_shop_child_price_gap is not None:
            result['re_shop_child_price_gap'] = self.re_shop_child_price_gap
        if self.re_shop_inf_change_fee is not None:
            result['re_shop_inf_change_fee'] = self.re_shop_inf_change_fee
        if self.re_shop_inf_price is not None:
            result['re_shop_inf_price'] = self.re_shop_inf_price
        if self.re_shop_inf_price_gap is not None:
            result['re_shop_inf_price_gap'] = self.re_shop_inf_price_gap
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('re_shop_adult_change_fee') is not None:
            self.re_shop_adult_change_fee = m.get('re_shop_adult_change_fee')
        if m.get('re_shop_adult_price') is not None:
            self.re_shop_adult_price = m.get('re_shop_adult_price')
        if m.get('re_shop_adult_price_gap') is not None:
            self.re_shop_adult_price_gap = m.get('re_shop_adult_price_gap')
        if m.get('re_shop_child_change_fee') is not None:
            self.re_shop_child_change_fee = m.get('re_shop_child_change_fee')
        if m.get('re_shop_child_price') is not None:
            self.re_shop_child_price = m.get('re_shop_child_price')
        if m.get('re_shop_child_price_gap') is not None:
            self.re_shop_child_price_gap = m.get('re_shop_child_price_gap')
        if m.get('re_shop_inf_change_fee') is not None:
            self.re_shop_inf_change_fee = m.get('re_shop_inf_change_fee')
        if m.get('re_shop_inf_price') is not None:
            self.re_shop_inf_price = m.get('re_shop_inf_price')
        if m.get('re_shop_inf_price_gap') is not None:
            self.re_shop_inf_price_gap = m.get('re_shop_inf_price_gap')
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTO(TeaModel):
    def __init__(
        self,
        adult_price: int = None,
        adult_tax: int = None,
        adult_total_price: int = None,
        before_control_price: int = None,
        child_price: int = None,
        child_tax: int = None,
        child_total_price: int = None,
        infant_price: int = None,
        infant_tax: int = None,
        infant_total_price: int = None,
        original_adult_price: int = None,
        original_adult_total_price: int = None,
        re_shop_price_info_dto: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTOReShopPriceInfoDTO = None,
    ):
        self.adult_price = adult_price
        self.adult_tax = adult_tax
        self.adult_total_price = adult_total_price
        self.before_control_price = before_control_price
        self.child_price = child_price
        self.child_tax = child_tax
        self.child_total_price = child_total_price
        self.infant_price = infant_price
        self.infant_tax = infant_tax
        self.infant_total_price = infant_total_price
        self.original_adult_price = original_adult_price
        self.original_adult_total_price = original_adult_total_price
        self.re_shop_price_info_dto = re_shop_price_info_dto

    def validate(self):
        if self.re_shop_price_info_dto:
            self.re_shop_price_info_dto.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_price is not None:
            result['adult_price'] = self.adult_price
        if self.adult_tax is not None:
            result['adult_tax'] = self.adult_tax
        if self.adult_total_price is not None:
            result['adult_total_price'] = self.adult_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.child_price is not None:
            result['child_price'] = self.child_price
        if self.child_tax is not None:
            result['child_tax'] = self.child_tax
        if self.child_total_price is not None:
            result['child_total_price'] = self.child_total_price
        if self.infant_price is not None:
            result['infant_price'] = self.infant_price
        if self.infant_tax is not None:
            result['infant_tax'] = self.infant_tax
        if self.infant_total_price is not None:
            result['infant_total_price'] = self.infant_total_price
        if self.original_adult_price is not None:
            result['original_adult_price'] = self.original_adult_price
        if self.original_adult_total_price is not None:
            result['original_adult_total_price'] = self.original_adult_total_price
        if self.re_shop_price_info_dto is not None:
            result['re_shop_price_info_d_t_o'] = self.re_shop_price_info_dto.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adult_price') is not None:
            self.adult_price = m.get('adult_price')
        if m.get('adult_tax') is not None:
            self.adult_tax = m.get('adult_tax')
        if m.get('adult_total_price') is not None:
            self.adult_total_price = m.get('adult_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('child_price') is not None:
            self.child_price = m.get('child_price')
        if m.get('child_tax') is not None:
            self.child_tax = m.get('child_tax')
        if m.get('child_total_price') is not None:
            self.child_total_price = m.get('child_total_price')
        if m.get('infant_price') is not None:
            self.infant_price = m.get('infant_price')
        if m.get('infant_tax') is not None:
            self.infant_tax = m.get('infant_tax')
        if m.get('infant_total_price') is not None:
            self.infant_total_price = m.get('infant_total_price')
        if m.get('original_adult_price') is not None:
            self.original_adult_price = m.get('original_adult_price')
        if m.get('original_adult_total_price') is not None:
            self.original_adult_total_price = m.get('original_adult_total_price')
        if m.get('re_shop_price_info_d_t_o') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTOReShopPriceInfoDTO()
            self.re_shop_price_info_dto = temp_model.from_map(m['re_shop_price_info_d_t_o'])
        return self


class FlightModifyListingSearchV2ResponseBodyModuleTransferFlightList(TeaModel):
    def __init__(
        self,
        airline_info: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListAirlineInfo = None,
        arr_airport_info: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListArrAirportInfo = None,
        arr_city_code: str = None,
        arr_time: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        dep_airport_info: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListDepAirportInfo = None,
        dep_city_code: str = None,
        dep_time: str = None,
        duration: int = None,
        flight_no: str = None,
        flight_share_info: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfo = None,
        flight_size: str = None,
        flight_stop_info: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightStopInfo = None,
        flight_transfer_info: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfo = None,
        flight_type: str = None,
        journey_seq: int = None,
        left_num: str = None,
        manufacturer: str = None,
        meal_desc: str = None,
        price_info_dto: FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTO = None,
        segment_seq: int = None,
        share: bool = None,
        short_flight_size: str = None,
        span_day: str = None,
        stop: bool = None,
        transfer: bool = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.arr_city_code = arr_city_code
        self.arr_time = arr_time
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.dep_time = dep_time
        self.duration = duration
        self.flight_no = flight_no
        self.flight_share_info = flight_share_info
        self.flight_size = flight_size
        self.flight_stop_info = flight_stop_info
        self.flight_transfer_info = flight_transfer_info
        self.flight_type = flight_type
        self.journey_seq = journey_seq
        self.left_num = left_num
        self.manufacturer = manufacturer
        self.meal_desc = meal_desc
        self.price_info_dto = price_info_dto
        self.segment_seq = segment_seq
        self.share = share
        self.short_flight_size = short_flight_size
        self.span_day = span_day
        self.stop = stop
        self.transfer = transfer

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()
        if self.flight_transfer_info:
            self.flight_transfer_info.validate()
        if self.price_info_dto:
            self.price_info_dto.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin_class is not None:
            result['cabinClass'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabinClassName'] = self.cabin_class_name
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_transfer_info is not None:
            result['flight_transfer_info'] = self.flight_transfer_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.journey_seq is not None:
            result['journey_seq'] = self.journey_seq
        if self.left_num is not None:
            result['left_num'] = self.left_num
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.price_info_dto is not None:
            result['price_info_d_t_o'] = self.price_info_dto.to_map()
        if self.segment_seq is not None:
            result['segment_seq'] = self.segment_seq
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.span_day is not None:
            result['span_day'] = self.span_day
        if self.stop is not None:
            result['stop'] = self.stop
        if self.transfer is not None:
            result['transfer'] = self.transfer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabinClass') is not None:
            self.cabin_class = m.get('cabinClass')
        if m.get('cabinClassName') is not None:
            self.cabin_class_name = m.get('cabinClassName')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_transfer_info') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListFlightTransferInfo()
            self.flight_transfer_info = temp_model.from_map(m['flight_transfer_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('journey_seq') is not None:
            self.journey_seq = m.get('journey_seq')
        if m.get('left_num') is not None:
            self.left_num = m.get('left_num')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('price_info_d_t_o') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightListPriceInfoDTO()
            self.price_info_dto = temp_model.from_map(m['price_info_d_t_o'])
        if m.get('segment_seq') is not None:
            self.segment_seq = m.get('segment_seq')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('span_day') is not None:
            self.span_day = m.get('span_day')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('transfer') is not None:
            self.transfer = m.get('transfer')
        return self


class FlightModifyListingSearchV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        direct_flight_list: List[FlightModifyListingSearchV2ResponseBodyModuleDirectFlightList] = None,
        next_req_wait_time: int = None,
        retry: bool = None,
        search_retry_token: str = None,
        session_id: str = None,
        transfer_flight_list: List[FlightModifyListingSearchV2ResponseBodyModuleTransferFlightList] = None,
        transfer_title: str = None,
    ):
        self.direct_flight_list = direct_flight_list
        self.next_req_wait_time = next_req_wait_time
        self.retry = retry
        self.search_retry_token = search_retry_token
        self.session_id = session_id
        self.transfer_flight_list = transfer_flight_list
        self.transfer_title = transfer_title

    def validate(self):
        if self.direct_flight_list:
            for k in self.direct_flight_list:
                if k:
                    k.validate()
        if self.transfer_flight_list:
            for k in self.transfer_flight_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['direct_flight_list'] = []
        if self.direct_flight_list is not None:
            for k in self.direct_flight_list:
                result['direct_flight_list'].append(k.to_map() if k else None)
        if self.next_req_wait_time is not None:
            result['next_req_wait_time'] = self.next_req_wait_time
        if self.retry is not None:
            result['retry'] = self.retry
        if self.search_retry_token is not None:
            result['search_retry_token'] = self.search_retry_token
        if self.session_id is not None:
            result['session_id'] = self.session_id
        result['transfer_flight_list'] = []
        if self.transfer_flight_list is not None:
            for k in self.transfer_flight_list:
                result['transfer_flight_list'].append(k.to_map() if k else None)
        if self.transfer_title is not None:
            result['transfer_title'] = self.transfer_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.direct_flight_list = []
        if m.get('direct_flight_list') is not None:
            for k in m.get('direct_flight_list'):
                temp_model = FlightModifyListingSearchV2ResponseBodyModuleDirectFlightList()
                self.direct_flight_list.append(temp_model.from_map(k))
        if m.get('next_req_wait_time') is not None:
            self.next_req_wait_time = m.get('next_req_wait_time')
        if m.get('retry') is not None:
            self.retry = m.get('retry')
        if m.get('search_retry_token') is not None:
            self.search_retry_token = m.get('search_retry_token')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        self.transfer_flight_list = []
        if m.get('transfer_flight_list') is not None:
            for k in m.get('transfer_flight_list'):
                temp_model = FlightModifyListingSearchV2ResponseBodyModuleTransferFlightList()
                self.transfer_flight_list.append(temp_model.from_map(k))
        if m.get('transfer_title') is not None:
            self.transfer_title = m.get('transfer_title')
        return self


class FlightModifyListingSearchV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightModifyListingSearchV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # requestId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyListingSearchV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightModifyListingSearchV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyListingSearchV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyOrderDetailV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyOrderDetailV2Request(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        modify_apply_id: str = None,
        need_query_service_fee: bool = None,
        order_id: str = None,
        out_modify_apply_id: str = None,
        out_order_id: str = None,
    ):
        self.isv_name = isv_name
        self.modify_apply_id = modify_apply_id
        self.need_query_service_fee = need_query_service_fee
        self.order_id = order_id
        self.out_modify_apply_id = out_modify_apply_id
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.modify_apply_id is not None:
            result['modify_apply_id'] = self.modify_apply_id
        if self.need_query_service_fee is not None:
            result['need_query_service_fee'] = self.need_query_service_fee
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_modify_apply_id is not None:
            result['out_modify_apply_id'] = self.out_modify_apply_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('modify_apply_id') is not None:
            self.modify_apply_id = m.get('modify_apply_id')
        if m.get('need_query_service_fee') is not None:
            self.need_query_service_fee = m.get('need_query_service_fee')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_modify_apply_id') is not None:
            self.out_modify_apply_id = m.get('out_modify_apply_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleAttributes(TeaModel):
    def __init__(
        self,
        baggage_rule: str = None,
        change_rule: str = None,
        latest_pay_time: Any = None,
        latest_pay_time_str: str = None,
        refund_rule: str = None,
    ):
        self.baggage_rule = baggage_rule
        self.change_rule = change_rule
        self.latest_pay_time = latest_pay_time
        self.latest_pay_time_str = latest_pay_time_str
        self.refund_rule = refund_rule

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_rule is not None:
            result['baggage_rule'] = self.baggage_rule
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule
        if self.latest_pay_time is not None:
            result['latest_pay_time'] = self.latest_pay_time
        if self.latest_pay_time_str is not None:
            result['latest_pay_time_str'] = self.latest_pay_time_str
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_rule') is not None:
            self.baggage_rule = m.get('baggage_rule')
        if m.get('change_rule') is not None:
            self.change_rule = m.get('change_rule')
        if m.get('latest_pay_time') is not None:
            self.latest_pay_time = m.get('latest_pay_time')
        if m.get('latest_pay_time_str') is not None:
            self.latest_pay_time_str = m.get('latest_pay_time_str')
        if m.get('refund_rule') is not None:
            self.refund_rule = m.get('refund_rule')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleContactInfoDTO(TeaModel):
    def __init__(
        self,
        contact_email: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        send_msg_to_passenger: bool = None,
    ):
        self.contact_email = contact_email
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.send_msg_to_passenger = send_msg_to_passenger

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.send_msg_to_passenger is not None:
            result['send_msg_to_passenger'] = self.send_msg_to_passenger
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('send_msg_to_passenger') is not None:
            self.send_msg_to_passenger = m.get('send_msg_to_passenger')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSFlightChange(TeaModel):
    def __init__(
        self,
        change_desc: str = None,
        change_status: str = None,
        change_status_code: str = None,
        new_segment: Any = None,
        passenger_names: List[str] = None,
    ):
        self.change_desc = change_desc
        self.change_status = change_status
        self.change_status_code = change_status_code
        self.new_segment = new_segment
        self.passenger_names = passenger_names

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_desc is not None:
            result['change_desc'] = self.change_desc
        if self.change_status is not None:
            result['change_status'] = self.change_status
        if self.change_status_code is not None:
            result['change_status_code'] = self.change_status_code
        if self.new_segment is not None:
            result['new_segment'] = self.new_segment
        if self.passenger_names is not None:
            result['passenger_names'] = self.passenger_names
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_desc') is not None:
            self.change_desc = m.get('change_desc')
        if m.get('change_status') is not None:
            self.change_status = m.get('change_status')
        if m.get('change_status_code') is not None:
            self.change_status_code = m.get('change_status_code')
        if m.get('new_segment') is not None:
            self.new_segment = m.get('new_segment')
        if m.get('passenger_names') is not None:
            self.passenger_names = m.get('passenger_names')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOS(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_icon_url: str = None,
        airline_name: str = None,
        arr_airport_code: str = None,
        arr_airport_name: str = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_terminal: str = None,
        arr_time: str = None,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        cabin_discount: int = None,
        carrier_airline_code: str = None,
        carrier_airline_icon_url: str = None,
        carrier_airline_name: str = None,
        carrier_flight_no: str = None,
        dep_airport_code: str = None,
        dep_airport_name: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_terminal: str = None,
        dep_time: str = None,
        flight_change: FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSFlightChange = None,
        flight_no: str = None,
        flight_type: str = None,
        meal_desc: str = None,
        segment_iid: str = None,
        segment_position: FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSSegmentPosition = None,
        stop_arr_time: str = None,
        stop_city: str = None,
        stop_dep_time: str = None,
    ):
        self.airline_code = airline_code
        self.airline_icon_url = airline_icon_url
        self.airline_name = airline_name
        self.arr_airport_code = arr_airport_code
        self.arr_airport_name = arr_airport_name
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_terminal = arr_terminal
        self.arr_time = arr_time
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.cabin_discount = cabin_discount
        self.carrier_airline_code = carrier_airline_code
        self.carrier_airline_icon_url = carrier_airline_icon_url
        self.carrier_airline_name = carrier_airline_name
        self.carrier_flight_no = carrier_flight_no
        self.dep_airport_code = dep_airport_code
        self.dep_airport_name = dep_airport_name
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_terminal = dep_terminal
        self.dep_time = dep_time
        self.flight_change = flight_change
        self.flight_no = flight_no
        self.flight_type = flight_type
        self.meal_desc = meal_desc
        self.segment_iid = segment_iid
        self.segment_position = segment_position
        self.stop_arr_time = stop_arr_time
        self.stop_city = stop_city
        self.stop_dep_time = stop_dep_time

    def validate(self):
        if self.flight_change:
            self.flight_change.validate()
        if self.segment_position:
            self.segment_position.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon_url is not None:
            result['airline_icon_url'] = self.airline_icon_url
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_terminal is not None:
            result['arr_terminal'] = self.arr_terminal
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_discount is not None:
            result['cabin_discount'] = self.cabin_discount
        if self.carrier_airline_code is not None:
            result['carrier_airline_code'] = self.carrier_airline_code
        if self.carrier_airline_icon_url is not None:
            result['carrier_airline_icon_url'] = self.carrier_airline_icon_url
        if self.carrier_airline_name is not None:
            result['carrier_airline_name'] = self.carrier_airline_name
        if self.carrier_flight_no is not None:
            result['carrier_flight_no'] = self.carrier_flight_no
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_terminal is not None:
            result['dep_terminal'] = self.dep_terminal
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_change is not None:
            result['flight_change'] = self.flight_change.to_map()
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.segment_iid is not None:
            result['segmentI_id'] = self.segment_iid
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon_url') is not None:
            self.airline_icon_url = m.get('airline_icon_url')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_terminal') is not None:
            self.arr_terminal = m.get('arr_terminal')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_discount') is not None:
            self.cabin_discount = m.get('cabin_discount')
        if m.get('carrier_airline_code') is not None:
            self.carrier_airline_code = m.get('carrier_airline_code')
        if m.get('carrier_airline_icon_url') is not None:
            self.carrier_airline_icon_url = m.get('carrier_airline_icon_url')
        if m.get('carrier_airline_name') is not None:
            self.carrier_airline_name = m.get('carrier_airline_name')
        if m.get('carrier_flight_no') is not None:
            self.carrier_flight_no = m.get('carrier_flight_no')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_terminal') is not None:
            self.dep_terminal = m.get('dep_terminal')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_change') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSFlightChange()
            self.flight_change = temp_model.from_map(m['flight_change'])
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('segmentI_id') is not None:
            self.segment_iid = m.get('segmentI_id')
        if m.get('segment_position') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOSSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOSChangeFee(TeaModel):
    def __init__(
        self,
        change_fee: int = None,
        service_fee: int = None,
        upgrade_price: int = None,
    ):
        self.change_fee = change_fee
        self.service_fee = service_fee
        self.upgrade_price = upgrade_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.upgrade_price is not None:
            result['upgrade_price'] = self.upgrade_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('upgrade_price') is not None:
            self.upgrade_price = m.get('upgrade_price')
        return self


class FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOS(TeaModel):
    def __init__(
        self,
        birth_date: str = None,
        cert_no: str = None,
        cert_type: int = None,
        change_fee: FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOSChangeFee = None,
        gender: int = None,
        origin_ticket_nos: List[str] = None,
        passenger_id: str = None,
        passenger_name: str = None,
        passenger_type: int = None,
        phone: str = None,
        pid: int = None,
        ticket_nos: List[str] = None,
    ):
        self.birth_date = birth_date
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.change_fee = change_fee
        self.gender = gender
        self.origin_ticket_nos = origin_ticket_nos
        self.passenger_id = passenger_id
        self.passenger_name = passenger_name
        self.passenger_type = passenger_type
        self.phone = phone
        self.pid = pid
        self.ticket_nos = ticket_nos

    def validate(self):
        if self.change_fee:
            self.change_fee.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee.to_map()
        if self.gender is not None:
            result['gender'] = self.gender
        if self.origin_ticket_nos is not None:
            result['origin_ticket_nos'] = self.origin_ticket_nos
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.pid is not None:
            result['pid'] = self.pid
        if self.ticket_nos is not None:
            result['ticket_nos'] = self.ticket_nos
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('change_fee') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOSChangeFee()
            self.change_fee = temp_model.from_map(m['change_fee'])
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('origin_ticket_nos') is not None:
            self.origin_ticket_nos = m.get('origin_ticket_nos')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('pid') is not None:
            self.pid = m.get('pid')
        if m.get('ticket_nos') is not None:
            self.ticket_nos = m.get('ticket_nos')
        return self


class FlightModifyOrderDetailV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_time: str = None,
        attributes: FlightModifyOrderDetailV2ResponseBodyModuleAttributes = None,
        book_user_email: str = None,
        book_user_name: str = None,
        bookuser_phone: str = None,
        change_fail_reason: str = None,
        contact_info_dto: FlightModifyOrderDetailV2ResponseBodyModuleContactInfoDTO = None,
        dest_flight_info_dtos: List[FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOS] = None,
        last_pay_time: str = None,
        order_id: int = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        pay_time: str = None,
        reason: str = None,
        status: int = None,
        sub_order_id: int = None,
        ticket_time: str = None,
        total_price: int = None,
        total_service_fee_price: int = None,
        traveler_info_dtos: List[FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOS] = None,
    ):
        self.apply_time = apply_time
        self.attributes = attributes
        self.book_user_email = book_user_email
        self.book_user_name = book_user_name
        self.bookuser_phone = bookuser_phone
        self.change_fail_reason = change_fail_reason
        self.contact_info_dto = contact_info_dto
        self.dest_flight_info_dtos = dest_flight_info_dtos
        self.last_pay_time = last_pay_time
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.pay_time = pay_time
        self.reason = reason
        self.status = status
        self.sub_order_id = sub_order_id
        self.ticket_time = ticket_time
        self.total_price = total_price
        self.total_service_fee_price = total_service_fee_price
        self.traveler_info_dtos = traveler_info_dtos

    def validate(self):
        if self.attributes:
            self.attributes.validate()
        if self.contact_info_dto:
            self.contact_info_dto.validate()
        if self.dest_flight_info_dtos:
            for k in self.dest_flight_info_dtos:
                if k:
                    k.validate()
        if self.traveler_info_dtos:
            for k in self.traveler_info_dtos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_time is not None:
            result['apply_time'] = self.apply_time
        if self.attributes is not None:
            result['attributes'] = self.attributes.to_map()
        if self.book_user_email is not None:
            result['book_user_email'] = self.book_user_email
        if self.book_user_name is not None:
            result['book_user_name'] = self.book_user_name
        if self.bookuser_phone is not None:
            result['bookuser_phone'] = self.bookuser_phone
        if self.change_fail_reason is not None:
            result['change_fail_reason'] = self.change_fail_reason
        if self.contact_info_dto is not None:
            result['contact_info_d_t_o'] = self.contact_info_dto.to_map()
        result['dest_flight_info_d_t_o_s'] = []
        if self.dest_flight_info_dtos is not None:
            for k in self.dest_flight_info_dtos:
                result['dest_flight_info_d_t_o_s'].append(k.to_map() if k else None)
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.reason is not None:
            result['reason'] = self.reason
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.ticket_time is not None:
            result['ticket_time'] = self.ticket_time
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.total_service_fee_price is not None:
            result['total_service_fee_price'] = self.total_service_fee_price
        result['traveler_info_d_t_o_s'] = []
        if self.traveler_info_dtos is not None:
            for k in self.traveler_info_dtos:
                result['traveler_info_d_t_o_s'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_time') is not None:
            self.apply_time = m.get('apply_time')
        if m.get('attributes') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBodyModuleAttributes()
            self.attributes = temp_model.from_map(m['attributes'])
        if m.get('book_user_email') is not None:
            self.book_user_email = m.get('book_user_email')
        if m.get('book_user_name') is not None:
            self.book_user_name = m.get('book_user_name')
        if m.get('bookuser_phone') is not None:
            self.bookuser_phone = m.get('bookuser_phone')
        if m.get('change_fail_reason') is not None:
            self.change_fail_reason = m.get('change_fail_reason')
        if m.get('contact_info_d_t_o') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBodyModuleContactInfoDTO()
            self.contact_info_dto = temp_model.from_map(m['contact_info_d_t_o'])
        self.dest_flight_info_dtos = []
        if m.get('dest_flight_info_d_t_o_s') is not None:
            for k in m.get('dest_flight_info_d_t_o_s'):
                temp_model = FlightModifyOrderDetailV2ResponseBodyModuleDestFlightInfoDTOS()
                self.dest_flight_info_dtos.append(temp_model.from_map(k))
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('ticket_time') is not None:
            self.ticket_time = m.get('ticket_time')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('total_service_fee_price') is not None:
            self.total_service_fee_price = m.get('total_service_fee_price')
        self.traveler_info_dtos = []
        if m.get('traveler_info_d_t_o_s') is not None:
            for k in m.get('traveler_info_d_t_o_s'):
                temp_model = FlightModifyOrderDetailV2ResponseBodyModuleTravelerInfoDTOS()
                self.traveler_info_dtos.append(temp_model.from_map(k))
        return self


class FlightModifyOrderDetailV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightModifyOrderDetailV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyOrderDetailV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightModifyOrderDetailV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyOrderDetailV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyOtaSearchV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyOtaSearchV2RequestPassengerSegmentRelations(TeaModel):
    def __init__(
        self,
        passenger_id: str = None,
        segment_id_list: List[str] = None,
    ):
        self.passenger_id = passenger_id
        self.segment_id_list = segment_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.segment_id_list is not None:
            result['segment_id_list'] = self.segment_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('segment_id_list') is not None:
            self.segment_id_list = m.get('segment_id_list')
        return self


class FlightModifyOtaSearchV2RequestSelectedSegments(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        dep_city_code: str = None,
        dep_date_time: str = None,
        journey_seq: int = None,
        marketing_flight_no: str = None,
        operating_flight_no: str = None,
        segment_seq: int = None,
    ):
        self.arr_city_code = arr_city_code
        self.dep_city_code = dep_city_code
        self.dep_date_time = dep_date_time
        self.journey_seq = journey_seq
        self.marketing_flight_no = marketing_flight_no
        self.operating_flight_no = operating_flight_no
        self.segment_seq = segment_seq

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date_time is not None:
            result['dep_date_time'] = self.dep_date_time
        if self.journey_seq is not None:
            result['journey_seq'] = self.journey_seq
        if self.marketing_flight_no is not None:
            result['marketing_flight_no'] = self.marketing_flight_no
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        if self.segment_seq is not None:
            result['segment_seq'] = self.segment_seq
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date_time') is not None:
            self.dep_date_time = m.get('dep_date_time')
        if m.get('journey_seq') is not None:
            self.journey_seq = m.get('journey_seq')
        if m.get('marketing_flight_no') is not None:
            self.marketing_flight_no = m.get('marketing_flight_no')
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        if m.get('segment_seq') is not None:
            self.segment_seq = m.get('segment_seq')
        return self


class FlightModifyOtaSearchV2Request(TeaModel):
    def __init__(
        self,
        cabin_class: List[int] = None,
        dep_date: List[str] = None,
        isv_name: str = None,
        order_id: int = None,
        out_order_id: str = None,
        passenger_segment_relations: List[FlightModifyOtaSearchV2RequestPassengerSegmentRelations] = None,
        selected_segments: List[FlightModifyOtaSearchV2RequestSelectedSegments] = None,
        session_id: str = None,
        voluntary: bool = None,
    ):
        self.cabin_class = cabin_class
        self.dep_date = dep_date
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.passenger_segment_relations = passenger_segment_relations
        self.selected_segments = selected_segments
        self.session_id = session_id
        self.voluntary = voluntary

    def validate(self):
        if self.passenger_segment_relations:
            for k in self.passenger_segment_relations:
                if k:
                    k.validate()
        if self.selected_segments:
            for k in self.selected_segments:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_segment_relations'] = []
        if self.passenger_segment_relations is not None:
            for k in self.passenger_segment_relations:
                result['passenger_segment_relations'].append(k.to_map() if k else None)
        result['selected_segments'] = []
        if self.selected_segments is not None:
            for k in self.selected_segments:
                result['selected_segments'].append(k.to_map() if k else None)
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_segment_relations = []
        if m.get('passenger_segment_relations') is not None:
            for k in m.get('passenger_segment_relations'):
                temp_model = FlightModifyOtaSearchV2RequestPassengerSegmentRelations()
                self.passenger_segment_relations.append(temp_model.from_map(k))
        self.selected_segments = []
        if m.get('selected_segments') is not None:
            for k in m.get('selected_segments'):
                temp_model = FlightModifyOtaSearchV2RequestSelectedSegments()
                self.selected_segments.append(temp_model.from_map(k))
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyOtaSearchV2ShrinkRequest(TeaModel):
    def __init__(
        self,
        cabin_class_shrink: str = None,
        dep_date_shrink: str = None,
        isv_name: str = None,
        order_id: int = None,
        out_order_id: str = None,
        passenger_segment_relations_shrink: str = None,
        selected_segments_shrink: str = None,
        session_id: str = None,
        voluntary: bool = None,
    ):
        self.cabin_class_shrink = cabin_class_shrink
        self.dep_date_shrink = dep_date_shrink
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.passenger_segment_relations_shrink = passenger_segment_relations_shrink
        self.selected_segments_shrink = selected_segments_shrink
        self.session_id = session_id
        self.voluntary = voluntary

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class_shrink is not None:
            result['cabin_class'] = self.cabin_class_shrink
        if self.dep_date_shrink is not None:
            result['dep_date'] = self.dep_date_shrink
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.passenger_segment_relations_shrink is not None:
            result['passenger_segment_relations'] = self.passenger_segment_relations_shrink
        if self.selected_segments_shrink is not None:
            result['selected_segments'] = self.selected_segments_shrink
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class_shrink = m.get('cabin_class')
        if m.get('dep_date') is not None:
            self.dep_date_shrink = m.get('dep_date')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('passenger_segment_relations') is not None:
            self.passenger_segment_relations_shrink = m.get('passenger_segment_relations')
        if m.get('selected_segments') is not None:
            self.selected_segments_shrink = m.get('selected_segments')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosCabinClassInfo(TeaModel):
    def __init__(
        self,
        cabin_class: str = None,
        class_name: str = None,
        inner_cabin_class: int = None,
        quantity: str = None,
    ):
        self.cabin_class = cabin_class
        self.class_name = class_name
        self.inner_cabin_class = inner_cabin_class
        self.quantity = quantity

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.class_name is not None:
            result['class_name'] = self.class_name
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        if self.quantity is not None:
            result['quantity'] = self.quantity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('class_name') is not None:
            self.class_name = m.get('class_name')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTOReShopPriceInfoDTO(TeaModel):
    def __init__(
        self,
        re_shop_adult_change_fee: int = None,
        re_shop_adult_price: int = None,
        re_shop_adult_price_gap: int = None,
        re_shop_child_change_fee: int = None,
        re_shop_child_price: int = None,
        re_shop_child_price_gap: int = None,
        re_shop_inf_change_fee: int = None,
        re_shop_inf_price: int = None,
        re_shop_inf_price_gap: int = None,
    ):
        self.re_shop_adult_change_fee = re_shop_adult_change_fee
        self.re_shop_adult_price = re_shop_adult_price
        self.re_shop_adult_price_gap = re_shop_adult_price_gap
        self.re_shop_child_change_fee = re_shop_child_change_fee
        self.re_shop_child_price = re_shop_child_price
        self.re_shop_child_price_gap = re_shop_child_price_gap
        self.re_shop_inf_change_fee = re_shop_inf_change_fee
        self.re_shop_inf_price = re_shop_inf_price
        self.re_shop_inf_price_gap = re_shop_inf_price_gap

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.re_shop_adult_change_fee is not None:
            result['re_shop_adult_change_fee'] = self.re_shop_adult_change_fee
        if self.re_shop_adult_price is not None:
            result['re_shop_adult_price'] = self.re_shop_adult_price
        if self.re_shop_adult_price_gap is not None:
            result['re_shop_adult_price_gap'] = self.re_shop_adult_price_gap
        if self.re_shop_child_change_fee is not None:
            result['re_shop_child_change_fee'] = self.re_shop_child_change_fee
        if self.re_shop_child_price is not None:
            result['re_shop_child_price'] = self.re_shop_child_price
        if self.re_shop_child_price_gap is not None:
            result['re_shop_child_price_gap'] = self.re_shop_child_price_gap
        if self.re_shop_inf_change_fee is not None:
            result['re_shop_inf_change_fee'] = self.re_shop_inf_change_fee
        if self.re_shop_inf_price is not None:
            result['re_shop_inf_price'] = self.re_shop_inf_price
        if self.re_shop_inf_price_gap is not None:
            result['re_shop_inf_price_gap'] = self.re_shop_inf_price_gap
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('re_shop_adult_change_fee') is not None:
            self.re_shop_adult_change_fee = m.get('re_shop_adult_change_fee')
        if m.get('re_shop_adult_price') is not None:
            self.re_shop_adult_price = m.get('re_shop_adult_price')
        if m.get('re_shop_adult_price_gap') is not None:
            self.re_shop_adult_price_gap = m.get('re_shop_adult_price_gap')
        if m.get('re_shop_child_change_fee') is not None:
            self.re_shop_child_change_fee = m.get('re_shop_child_change_fee')
        if m.get('re_shop_child_price') is not None:
            self.re_shop_child_price = m.get('re_shop_child_price')
        if m.get('re_shop_child_price_gap') is not None:
            self.re_shop_child_price_gap = m.get('re_shop_child_price_gap')
        if m.get('re_shop_inf_change_fee') is not None:
            self.re_shop_inf_change_fee = m.get('re_shop_inf_change_fee')
        if m.get('re_shop_inf_price') is not None:
            self.re_shop_inf_price = m.get('re_shop_inf_price')
        if m.get('re_shop_inf_price_gap') is not None:
            self.re_shop_inf_price_gap = m.get('re_shop_inf_price_gap')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTO(TeaModel):
    def __init__(
        self,
        adult_price: int = None,
        adult_tax: int = None,
        adult_total_price: int = None,
        before_control_price: int = None,
        child_price: int = None,
        child_tax: int = None,
        child_total_price: int = None,
        infant_price: int = None,
        infant_tax: int = None,
        infant_total_price: int = None,
        original_adult_price: int = None,
        original_adult_total_price: int = None,
        re_shop_price_info_dto: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTOReShopPriceInfoDTO = None,
    ):
        self.adult_price = adult_price
        self.adult_tax = adult_tax
        self.adult_total_price = adult_total_price
        self.before_control_price = before_control_price
        self.child_price = child_price
        self.child_tax = child_tax
        self.child_total_price = child_total_price
        self.infant_price = infant_price
        self.infant_tax = infant_tax
        self.infant_total_price = infant_total_price
        self.original_adult_price = original_adult_price
        self.original_adult_total_price = original_adult_total_price
        self.re_shop_price_info_dto = re_shop_price_info_dto

    def validate(self):
        if self.re_shop_price_info_dto:
            self.re_shop_price_info_dto.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_price is not None:
            result['adult_price'] = self.adult_price
        if self.adult_tax is not None:
            result['adult_tax'] = self.adult_tax
        if self.adult_total_price is not None:
            result['adult_total_price'] = self.adult_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.child_price is not None:
            result['child_price'] = self.child_price
        if self.child_tax is not None:
            result['child_tax'] = self.child_tax
        if self.child_total_price is not None:
            result['child_total_price'] = self.child_total_price
        if self.infant_price is not None:
            result['infant_price'] = self.infant_price
        if self.infant_tax is not None:
            result['infant_tax'] = self.infant_tax
        if self.infant_total_price is not None:
            result['infant_total_price'] = self.infant_total_price
        if self.original_adult_price is not None:
            result['original_adult_price'] = self.original_adult_price
        if self.original_adult_total_price is not None:
            result['original_adult_total_price'] = self.original_adult_total_price
        if self.re_shop_price_info_dto is not None:
            result['re_shop_price_info_d_t_o'] = self.re_shop_price_info_dto.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adult_price') is not None:
            self.adult_price = m.get('adult_price')
        if m.get('adult_tax') is not None:
            self.adult_tax = m.get('adult_tax')
        if m.get('adult_total_price') is not None:
            self.adult_total_price = m.get('adult_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('child_price') is not None:
            self.child_price = m.get('child_price')
        if m.get('child_tax') is not None:
            self.child_tax = m.get('child_tax')
        if m.get('child_total_price') is not None:
            self.child_total_price = m.get('child_total_price')
        if m.get('infant_price') is not None:
            self.infant_price = m.get('infant_price')
        if m.get('infant_tax') is not None:
            self.infant_tax = m.get('infant_tax')
        if m.get('infant_total_price') is not None:
            self.infant_total_price = m.get('infant_total_price')
        if m.get('original_adult_price') is not None:
            self.original_adult_price = m.get('original_adult_price')
        if m.get('original_adult_total_price') is not None:
            self.original_adult_total_price = m.get('original_adult_total_price')
        if m.get('re_shop_price_info_d_t_o') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTOReShopPriceInfoDTO()
            self.re_shop_price_info_dto = temp_model.from_map(m['re_shop_price_info_d_t_o'])
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfos(TeaModel):
    def __init__(
        self,
        attribute_show_info_map: Dict[str, List[ModuleAgentInfosAttributeShowInfoMapValue]] = None,
        best_discount: float = None,
        cabin_class_info: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosCabinClassInfo = None,
        cabin_code: int = None,
        cabin_name: str = None,
        item_id: str = None,
        modify_type_desc: str = None,
        modify_type_name: str = None,
        price_info_dto: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTO = None,
        quantity: int = None,
        support_child_ticket: bool = None,
    ):
        self.attribute_show_info_map = attribute_show_info_map
        self.best_discount = best_discount
        self.cabin_class_info = cabin_class_info
        self.cabin_code = cabin_code
        self.cabin_name = cabin_name
        self.item_id = item_id
        self.modify_type_desc = modify_type_desc
        self.modify_type_name = modify_type_name
        self.price_info_dto = price_info_dto
        self.quantity = quantity
        self.support_child_ticket = support_child_ticket

    def validate(self):
        if self.attribute_show_info_map:
            for v in self.attribute_show_info_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.cabin_class_info:
            self.cabin_class_info.validate()
        if self.price_info_dto:
            self.price_info_dto.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['attribute_show_info_map'] = {}
        if self.attribute_show_info_map is not None:
            for k, v in self.attribute_show_info_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['attribute_show_info_map'][k] = l1
        if self.best_discount is not None:
            result['best_discount'] = self.best_discount
        if self.cabin_class_info is not None:
            result['cabin_class_info'] = self.cabin_class_info.to_map()
        if self.cabin_code is not None:
            result['cabin_code'] = self.cabin_code
        if self.cabin_name is not None:
            result['cabin_name'] = self.cabin_name
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.modify_type_desc is not None:
            result['modify_type_desc'] = self.modify_type_desc
        if self.modify_type_name is not None:
            result['modify_type_name'] = self.modify_type_name
        if self.price_info_dto is not None:
            result['price_info_d_t_o'] = self.price_info_dto.to_map()
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.support_child_ticket is not None:
            result['support_child_ticket'] = self.support_child_ticket
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_show_info_map = {}
        if m.get('attribute_show_info_map') is not None:
            for k, v in m.get('attribute_show_info_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleAgentInfosAttributeShowInfoMapValue()
                    l1.append(temp_model.from_map(k1))
                self.attribute_show_info_map['k'] = l1
        if m.get('best_discount') is not None:
            self.best_discount = m.get('best_discount')
        if m.get('cabin_class_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosCabinClassInfo()
            self.cabin_class_info = temp_model.from_map(m['cabin_class_info'])
        if m.get('cabin_code') is not None:
            self.cabin_code = m.get('cabin_code')
        if m.get('cabin_name') is not None:
            self.cabin_name = m.get('cabin_name')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('modify_type_desc') is not None:
            self.modify_type_desc = m.get('modify_type_desc')
        if m.get('modify_type_name') is not None:
            self.modify_type_name = m.get('modify_type_name')
        if m.get('price_info_d_t_o') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfosPriceInfoDTO()
            self.price_info_dto = temp_model.from_map(m['price_info_d_t_o'])
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('support_child_ticket') is not None:
            self.support_child_ticket = m.get('support_child_ticket')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoCabinClassInfo(TeaModel):
    def __init__(
        self,
        cabin_class: str = None,
        class_name: str = None,
        inner_cabin_class: int = None,
        quantity: str = None,
    ):
        self.cabin_class = cabin_class
        self.class_name = class_name
        # inner_cabin_class
        self.inner_cabin_class = inner_cabin_class
        self.quantity = quantity

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.class_name is not None:
            result['class_name'] = self.class_name
        if self.inner_cabin_class is not None:
            result['inner_cabin_class'] = self.inner_cabin_class
        if self.quantity is not None:
            result['quantity'] = self.quantity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('class_name') is not None:
            self.class_name = m.get('class_name')
        if m.get('inner_cabin_class') is not None:
            self.inner_cabin_class = m.get('inner_cabin_class')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTOReShopPriceInfoDTO(TeaModel):
    def __init__(
        self,
        re_shop_adult_change_fee: int = None,
        re_shop_adult_price: int = None,
        re_shop_adult_price_gap: int = None,
        re_shop_child_change_fee: int = None,
        re_shop_child_price: int = None,
        re_shop_child_price_gap: int = None,
        re_shop_inf_change_fee: int = None,
        re_shop_inf_price: int = None,
        re_shop_inf_price_gap: int = None,
    ):
        self.re_shop_adult_change_fee = re_shop_adult_change_fee
        self.re_shop_adult_price = re_shop_adult_price
        self.re_shop_adult_price_gap = re_shop_adult_price_gap
        self.re_shop_child_change_fee = re_shop_child_change_fee
        self.re_shop_child_price = re_shop_child_price
        self.re_shop_child_price_gap = re_shop_child_price_gap
        self.re_shop_inf_change_fee = re_shop_inf_change_fee
        self.re_shop_inf_price = re_shop_inf_price
        self.re_shop_inf_price_gap = re_shop_inf_price_gap

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.re_shop_adult_change_fee is not None:
            result['re_shop_adult_change_fee'] = self.re_shop_adult_change_fee
        if self.re_shop_adult_price is not None:
            result['re_shop_adult_price'] = self.re_shop_adult_price
        if self.re_shop_adult_price_gap is not None:
            result['re_shop_adult_price_gap'] = self.re_shop_adult_price_gap
        if self.re_shop_child_change_fee is not None:
            result['re_shop_child_change_fee'] = self.re_shop_child_change_fee
        if self.re_shop_child_price is not None:
            result['re_shop_child_price'] = self.re_shop_child_price
        if self.re_shop_child_price_gap is not None:
            result['re_shop_child_price_gap'] = self.re_shop_child_price_gap
        if self.re_shop_inf_change_fee is not None:
            result['re_shop_inf_change_fee'] = self.re_shop_inf_change_fee
        if self.re_shop_inf_price is not None:
            result['re_shop_inf_price'] = self.re_shop_inf_price
        if self.re_shop_inf_price_gap is not None:
            result['re_shop_inf_price_gap'] = self.re_shop_inf_price_gap
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('re_shop_adult_change_fee') is not None:
            self.re_shop_adult_change_fee = m.get('re_shop_adult_change_fee')
        if m.get('re_shop_adult_price') is not None:
            self.re_shop_adult_price = m.get('re_shop_adult_price')
        if m.get('re_shop_adult_price_gap') is not None:
            self.re_shop_adult_price_gap = m.get('re_shop_adult_price_gap')
        if m.get('re_shop_child_change_fee') is not None:
            self.re_shop_child_change_fee = m.get('re_shop_child_change_fee')
        if m.get('re_shop_child_price') is not None:
            self.re_shop_child_price = m.get('re_shop_child_price')
        if m.get('re_shop_child_price_gap') is not None:
            self.re_shop_child_price_gap = m.get('re_shop_child_price_gap')
        if m.get('re_shop_inf_change_fee') is not None:
            self.re_shop_inf_change_fee = m.get('re_shop_inf_change_fee')
        if m.get('re_shop_inf_price') is not None:
            self.re_shop_inf_price = m.get('re_shop_inf_price')
        if m.get('re_shop_inf_price_gap') is not None:
            self.re_shop_inf_price_gap = m.get('re_shop_inf_price_gap')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTO(TeaModel):
    def __init__(
        self,
        adult_price: int = None,
        adult_tax: int = None,
        adult_total_price: int = None,
        before_control_price: int = None,
        child_price: int = None,
        child_tax: int = None,
        child_total_price: int = None,
        infant_price: int = None,
        infant_tax: int = None,
        infant_total_price: int = None,
        original_adult_price: int = None,
        original_adult_total_price: int = None,
        re_shop_price_info_dto: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTOReShopPriceInfoDTO = None,
    ):
        self.adult_price = adult_price
        self.adult_tax = adult_tax
        self.adult_total_price = adult_total_price
        self.before_control_price = before_control_price
        self.child_price = child_price
        self.child_tax = child_tax
        self.child_total_price = child_total_price
        self.infant_price = infant_price
        self.infant_tax = infant_tax
        self.infant_total_price = infant_total_price
        self.original_adult_price = original_adult_price
        self.original_adult_total_price = original_adult_total_price
        self.re_shop_price_info_dto = re_shop_price_info_dto

    def validate(self):
        if self.re_shop_price_info_dto:
            self.re_shop_price_info_dto.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_price is not None:
            result['adult_price'] = self.adult_price
        if self.adult_tax is not None:
            result['adult_tax'] = self.adult_tax
        if self.adult_total_price is not None:
            result['adult_total_price'] = self.adult_total_price
        if self.before_control_price is not None:
            result['before_control_price'] = self.before_control_price
        if self.child_price is not None:
            result['child_price'] = self.child_price
        if self.child_tax is not None:
            result['child_tax'] = self.child_tax
        if self.child_total_price is not None:
            result['child_total_price'] = self.child_total_price
        if self.infant_price is not None:
            result['infant_price'] = self.infant_price
        if self.infant_tax is not None:
            result['infant_tax'] = self.infant_tax
        if self.infant_total_price is not None:
            result['infant_total_price'] = self.infant_total_price
        if self.original_adult_price is not None:
            result['original_adult_price'] = self.original_adult_price
        if self.original_adult_total_price is not None:
            result['original_adult_total_price'] = self.original_adult_total_price
        if self.re_shop_price_info_dto is not None:
            result['re_shop_price_info_d_t_o'] = self.re_shop_price_info_dto.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adult_price') is not None:
            self.adult_price = m.get('adult_price')
        if m.get('adult_tax') is not None:
            self.adult_tax = m.get('adult_tax')
        if m.get('adult_total_price') is not None:
            self.adult_total_price = m.get('adult_total_price')
        if m.get('before_control_price') is not None:
            self.before_control_price = m.get('before_control_price')
        if m.get('child_price') is not None:
            self.child_price = m.get('child_price')
        if m.get('child_tax') is not None:
            self.child_tax = m.get('child_tax')
        if m.get('child_total_price') is not None:
            self.child_total_price = m.get('child_total_price')
        if m.get('infant_price') is not None:
            self.infant_price = m.get('infant_price')
        if m.get('infant_tax') is not None:
            self.infant_tax = m.get('infant_tax')
        if m.get('infant_total_price') is not None:
            self.infant_total_price = m.get('infant_total_price')
        if m.get('original_adult_price') is not None:
            self.original_adult_price = m.get('original_adult_price')
        if m.get('original_adult_total_price') is not None:
            self.original_adult_total_price = m.get('original_adult_total_price')
        if m.get('re_shop_price_info_d_t_o') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTOReShopPriceInfoDTO()
            self.re_shop_price_info_dto = temp_model.from_map(m['re_shop_price_info_d_t_o'])
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleAgentInfo(TeaModel):
    def __init__(
        self,
        attribute_show_info_map: Dict[str, List[ModuleAgentInfoAttributeShowInfoMapValue]] = None,
        best_discount: float = None,
        cabin_class_info: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoCabinClassInfo = None,
        cabin_code: int = None,
        cabin_name: str = None,
        item_id: str = None,
        modify_type_desc: str = None,
        modify_type_name: str = None,
        price_info_dto: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTO = None,
        quantity: int = None,
        support_child_ticket: bool = None,
    ):
        self.attribute_show_info_map = attribute_show_info_map
        self.best_discount = best_discount
        self.cabin_class_info = cabin_class_info
        self.cabin_code = cabin_code
        self.cabin_name = cabin_name
        # item_id
        self.item_id = item_id
        self.modify_type_desc = modify_type_desc
        self.modify_type_name = modify_type_name
        self.price_info_dto = price_info_dto
        self.quantity = quantity
        self.support_child_ticket = support_child_ticket

    def validate(self):
        if self.attribute_show_info_map:
            for v in self.attribute_show_info_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.cabin_class_info:
            self.cabin_class_info.validate()
        if self.price_info_dto:
            self.price_info_dto.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['attribute_show_info_map'] = {}
        if self.attribute_show_info_map is not None:
            for k, v in self.attribute_show_info_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['attribute_show_info_map'][k] = l1
        if self.best_discount is not None:
            result['best_discount'] = self.best_discount
        if self.cabin_class_info is not None:
            result['cabin_class_info'] = self.cabin_class_info.to_map()
        if self.cabin_code is not None:
            result['cabin_code'] = self.cabin_code
        if self.cabin_name is not None:
            result['cabin_name'] = self.cabin_name
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.modify_type_desc is not None:
            result['modify_type_desc'] = self.modify_type_desc
        if self.modify_type_name is not None:
            result['modify_type_name'] = self.modify_type_name
        if self.price_info_dto is not None:
            result['price_info_d_t_o'] = self.price_info_dto.to_map()
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.support_child_ticket is not None:
            result['support_child_ticket'] = self.support_child_ticket
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.attribute_show_info_map = {}
        if m.get('attribute_show_info_map') is not None:
            for k, v in m.get('attribute_show_info_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleAgentInfoAttributeShowInfoMapValue()
                    l1.append(temp_model.from_map(k1))
                self.attribute_show_info_map['k'] = l1
        if m.get('best_discount') is not None:
            self.best_discount = m.get('best_discount')
        if m.get('cabin_class_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoCabinClassInfo()
            self.cabin_class_info = temp_model.from_map(m['cabin_class_info'])
        if m.get('cabin_code') is not None:
            self.cabin_code = m.get('cabin_code')
        if m.get('cabin_name') is not None:
            self.cabin_name = m.get('cabin_name')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('modify_type_desc') is not None:
            self.modify_type_desc = m.get('modify_type_desc')
        if m.get('modify_type_name') is not None:
            self.modify_type_name = m.get('modify_type_name')
        if m.get('price_info_d_t_o') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfoPriceInfoDTO()
            self.price_info_dto = temp_model.from_map(m['price_info_d_t_o'])
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('support_child_ticket') is not None:
            self.support_child_ticket = m.get('support_child_ticket')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_code = airline_code
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfoOperatingAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_code = airline_code
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfo(TeaModel):
    def __init__(
        self,
        operating_flight_no: str = None,
        operating_airline_info: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfoOperatingAirlineInfo = None,
    ):
        self.operating_flight_no = operating_flight_no
        self.operating_airline_info = operating_airline_info

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        if m.get('operating_airline_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightStopInfo(TeaModel):
    def __init__(
        self,
        stop_city_name: str = None,
        stop_arr_time: str = None,
        stop_dep_time: str = None,
        stop_city_code: str = None,
        stop_airport: str = None,
        stop_arr_term: str = None,
        stop_dep_term: str = None,
    ):
        self.stop_city_name = stop_city_name
        self.stop_arr_time = stop_arr_time
        self.stop_dep_time = stop_dep_time
        self.stop_city_code = stop_city_code
        self.stop_airport = stop_airport
        self.stop_arr_term = stop_arr_term
        self.stop_dep_term = stop_dep_term

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        return self


class FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfos(TeaModel):
    def __init__(
        self,
        journey_seq: int = None,
        segment_seq: int = None,
        flight_no: str = None,
        dep_city_code: str = None,
        arr_city_code: str = None,
        dep_city_name: str = None,
        arr_city_name: str = None,
        dep_airport_info: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosDepAirportInfo = None,
        arr_airport_info: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosArrAirportInfo = None,
        dep_time: str = None,
        arr_time: str = None,
        airline_info: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosAirlineInfo = None,
        share: bool = None,
        flight_shared_info: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfo = None,
        stop: bool = None,
        flight_stop_info: FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightStopInfo = None,
        transfer_time: int = None,
        duration: int = None,
        manufacturer: str = None,
        flight_type: str = None,
        flight_size: str = None,
        meal_desc: str = None,
        on_time_rate: str = None,
    ):
        self.journey_seq = journey_seq
        self.segment_seq = segment_seq
        self.flight_no = flight_no
        self.dep_city_code = dep_city_code
        self.arr_city_code = arr_city_code
        self.dep_city_name = dep_city_name
        self.arr_city_name = arr_city_name
        self.dep_airport_info = dep_airport_info
        self.arr_airport_info = arr_airport_info
        self.dep_time = dep_time
        self.arr_time = arr_time
        self.airline_info = airline_info
        self.share = share
        self.flight_shared_info = flight_shared_info
        self.stop = stop
        self.flight_stop_info = flight_stop_info
        self.transfer_time = transfer_time
        self.duration = duration
        self.manufacturer = manufacturer
        self.flight_type = flight_type
        self.flight_size = flight_size
        self.meal_desc = meal_desc
        self.on_time_rate = on_time_rate

    def validate(self):
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.airline_info:
            self.airline_info.validate()
        if self.flight_shared_info:
            self.flight_shared_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_seq is not None:
            result['journey_seq'] = self.journey_seq
        if self.segment_seq is not None:
            result['segment_seq'] = self.segment_seq
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.share is not None:
            result['share'] = self.share
        if self.flight_shared_info is not None:
            result['flight_shared_info'] = self.flight_shared_info.to_map()
        if self.stop is not None:
            result['stop'] = self.stop
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_seq') is not None:
            self.journey_seq = m.get('journey_seq')
        if m.get('segment_seq') is not None:
            self.segment_seq = m.get('segment_seq')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('airline_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('flight_shared_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightSharedInfo()
            self.flight_shared_info = temp_model.from_map(m['flight_shared_info'])
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('flight_stop_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfosFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        return self


class FlightModifyOtaSearchV2ResponseBodyModulePassengerCount(TeaModel):
    def __init__(
        self,
        adult_passenger_num: int = None,
        child_passenger_num: int = None,
        infant_passenger_num: int = None,
    ):
        self.adult_passenger_num = adult_passenger_num
        self.child_passenger_num = child_passenger_num
        self.infant_passenger_num = infant_passenger_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_passenger_num is not None:
            result['adult_passenger_num'] = self.adult_passenger_num
        if self.child_passenger_num is not None:
            result['child_passenger_num'] = self.child_passenger_num
        if self.infant_passenger_num is not None:
            result['infant_passenger_num'] = self.infant_passenger_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adult_passenger_num') is not None:
            self.adult_passenger_num = m.get('adult_passenger_num')
        if m.get('child_passenger_num') is not None:
            self.child_passenger_num = m.get('child_passenger_num')
        if m.get('infant_passenger_num') is not None:
            self.infant_passenger_num = m.get('infant_passenger_num')
        return self


class FlightModifyOtaSearchV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        agent_infos: List[FlightModifyOtaSearchV2ResponseBodyModuleAgentInfos] = None,
        agent_info: FlightModifyOtaSearchV2ResponseBodyModuleAgentInfo = None,
        cache_key: str = None,
        flight_segment_infos: List[List[FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfos]] = None,
        passenger_count: FlightModifyOtaSearchV2ResponseBodyModulePassengerCount = None,
        session_id: str = None,
    ):
        self.agent_infos = agent_infos
        self.agent_info = agent_info
        self.cache_key = cache_key
        self.flight_segment_infos = flight_segment_infos
        self.passenger_count = passenger_count
        self.session_id = session_id

    def validate(self):
        if self.agent_infos:
            for k in self.agent_infos:
                if k:
                    k.validate()
        if self.agent_info:
            self.agent_info.validate()
        if self.flight_segment_infos:
            for k in self.flight_segment_infos:
                for k1 in k:
                    if k1:
                        k1.validate()
        if self.passenger_count:
            self.passenger_count.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['agentInfos'] = []
        if self.agent_infos is not None:
            for k in self.agent_infos:
                result['agentInfos'].append(k.to_map() if k else None)
        if self.agent_info is not None:
            result['agent_info'] = self.agent_info.to_map()
        if self.cache_key is not None:
            result['cache_key'] = self.cache_key
        result['flight_segment_infos'] = []
        if self.flight_segment_infos is not None:
            for k in self.flight_segment_infos:
                l1 = []
                for k1 in k:
                    l1.append(k1.to_map() if k1 else None)
                result['flight_segment_infos'].append(l1)
        if self.passenger_count is not None:
            result['passenger_count'] = self.passenger_count.to_map()
        if self.session_id is not None:
            result['session_id'] = self.session_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.agent_infos = []
        if m.get('agentInfos') is not None:
            for k in m.get('agentInfos'):
                temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfos()
                self.agent_infos.append(temp_model.from_map(k))
        if m.get('agent_info') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModuleAgentInfo()
            self.agent_info = temp_model.from_map(m['agent_info'])
        if m.get('cache_key') is not None:
            self.cache_key = m.get('cache_key')
        self.flight_segment_infos = []
        if m.get('flight_segment_infos') is not None:
            for k in m.get('flight_segment_infos'):
                l1 = []
                for k1 in k:
                    temp_model = FlightModifyOtaSearchV2ResponseBodyModuleFlightSegmentInfos()
                    l1.append(temp_model.from_map(k1))
                self.flight_segment_infos.append(l1)
        if m.get('passenger_count') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModulePassengerCount()
            self.passenger_count = temp_model.from_map(m['passenger_count'])
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        return self


class FlightModifyOtaSearchV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightModifyOtaSearchV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyOtaSearchV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightModifyOtaSearchV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyOtaSearchV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightModifyPayV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightModifyPayV2Request(TeaModel):
    def __init__(
        self,
        ext_params: Dict[str, Any] = None,
        isv_name: str = None,
        modify_pay_amount: int = None,
        order_id: int = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        sub_order_id: int = None,
    ):
        self.ext_params = ext_params
        self.isv_name = isv_name
        self.modify_pay_amount = modify_pay_amount
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.sub_order_id = sub_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_params is not None:
            result['ext_params'] = self.ext_params
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.modify_pay_amount is not None:
            result['modify_pay_amount'] = self.modify_pay_amount
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ext_params') is not None:
            self.ext_params = m.get('ext_params')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('modify_pay_amount') is not None:
            self.modify_pay_amount = m.get('modify_pay_amount')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class FlightModifyPayV2ShrinkRequest(TeaModel):
    def __init__(
        self,
        ext_params_shrink: str = None,
        isv_name: str = None,
        modify_pay_amount: int = None,
        order_id: int = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        sub_order_id: int = None,
    ):
        self.ext_params_shrink = ext_params_shrink
        self.isv_name = isv_name
        self.modify_pay_amount = modify_pay_amount
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.sub_order_id = sub_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_params_shrink is not None:
            result['ext_params'] = self.ext_params_shrink
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.modify_pay_amount is not None:
            result['modify_pay_amount'] = self.modify_pay_amount
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ext_params') is not None:
            self.ext_params_shrink = m.get('ext_params')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('modify_pay_amount') is not None:
            self.modify_pay_amount = m.get('modify_pay_amount')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class FlightModifyPayV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: Dict[str, Any] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightModifyPayV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightModifyPayV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightModifyPayV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOrderDetailInfoHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightOrderDetailInfoRequest(TeaModel):
    def __init__(
        self,
        dis_order_id: str = None,
    ):
        # This parameter is required.
        self.dis_order_id = dis_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        return self


class FlightOrderDetailInfoResponseBodyModuleFlightInfoList(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        airline_simple_name: str = None,
        arr_airport: str = None,
        arr_airport_code: str = None,
        arr_airport_code_name: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_terminal: str = None,
        arr_time: str = None,
        baggage: str = None,
        build_price: int = None,
        cabin: str = None,
        cabin_class: str = None,
        carrier: str = None,
        dep_airport: str = None,
        dep_airport_code: str = None,
        dep_airport_code_name: str = None,
        dep_city: str = None,
        dep_city_code: str = None,
        dep_terminal: str = None,
        dep_time: str = None,
        flight_no: str = None,
        last_cabin: str = None,
        last_flight_no: str = None,
        meal: str = None,
        oil_price: int = None,
        segment_type: int = None,
        stop_arr_time: str = None,
        stop_city: str = None,
        stop_dep_time: str = None,
        ticket_price: int = None,
        tuigaiqian_info: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.airline_simple_name = airline_simple_name
        self.arr_airport = arr_airport
        self.arr_airport_code = arr_airport_code
        self.arr_airport_code_name = arr_airport_code_name
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_terminal = arr_terminal
        self.arr_time = arr_time
        self.baggage = baggage
        self.build_price = build_price
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.carrier = carrier
        self.dep_airport = dep_airport
        self.dep_airport_code = dep_airport_code
        self.dep_airport_code_name = dep_airport_code_name
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        self.dep_terminal = dep_terminal
        self.dep_time = dep_time
        self.flight_no = flight_no
        self.last_cabin = last_cabin
        self.last_flight_no = last_flight_no
        self.meal = meal
        self.oil_price = oil_price
        self.segment_type = segment_type
        self.stop_arr_time = stop_arr_time
        self.stop_city = stop_city
        self.stop_dep_time = stop_dep_time
        self.ticket_price = ticket_price
        self.tuigaiqian_info = tuigaiqian_info

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        if self.arr_airport is not None:
            result['arr_airport'] = self.arr_airport
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_code_name is not None:
            result['arr_airport_code_name'] = self.arr_airport_code_name
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_terminal is not None:
            result['arr_terminal'] = self.arr_terminal
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage is not None:
            result['baggage'] = self.baggage
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.carrier is not None:
            result['carrier'] = self.carrier
        if self.dep_airport is not None:
            result['dep_airport'] = self.dep_airport
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_code_name is not None:
            result['dep_airport_code_name'] = self.dep_airport_code_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_terminal is not None:
            result['dep_terminal'] = self.dep_terminal
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.last_cabin is not None:
            result['last_cabin'] = self.last_cabin
        if self.last_flight_no is not None:
            result['last_flight_no'] = self.last_flight_no
        if self.meal is not None:
            result['meal'] = self.meal
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.segment_type is not None:
            result['segment_type'] = self.segment_type
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        if m.get('arr_airport') is not None:
            self.arr_airport = m.get('arr_airport')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_code_name') is not None:
            self.arr_airport_code_name = m.get('arr_airport_code_name')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_terminal') is not None:
            self.arr_terminal = m.get('arr_terminal')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage') is not None:
            self.baggage = m.get('baggage')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('carrier') is not None:
            self.carrier = m.get('carrier')
        if m.get('dep_airport') is not None:
            self.dep_airport = m.get('dep_airport')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_code_name') is not None:
            self.dep_airport_code_name = m.get('dep_airport_code_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_terminal') is not None:
            self.dep_terminal = m.get('dep_terminal')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('last_cabin') is not None:
            self.last_cabin = m.get('last_cabin')
        if m.get('last_flight_no') is not None:
            self.last_flight_no = m.get('last_flight_no')
        if m.get('meal') is not None:
            self.meal = m.get('meal')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('segment_type') is not None:
            self.segment_type = m.get('segment_type')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        return self


class FlightOrderDetailInfoResponseBodyModuleTicketInfoList(TeaModel):
    def __init__(
        self,
        open_ticket_status: str = None,
        pnr_code: str = None,
        ticket_no: str = None,
        ticket_status: str = None,
    ):
        self.open_ticket_status = open_ticket_status
        self.pnr_code = pnr_code
        self.ticket_no = ticket_no
        self.ticket_status = ticket_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.pnr_code is not None:
            result['pnr_code'] = self.pnr_code
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('pnr_code') is not None:
            self.pnr_code = m.get('pnr_code')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        return self


class FlightOrderDetailInfoResponseBodyModuleTravelerInfoList(TeaModel):
    def __init__(
        self,
        birth_date: str = None,
        cert_no: str = None,
        cert_type: str = None,
        open_ticket_status: int = None,
        passenger_name: str = None,
        passenger_type: str = None,
        phone: str = None,
        ticket_no: str = None,
        user_id: str = None,
    ):
        self.birth_date = birth_date
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.open_ticket_status = open_ticket_status
        self.passenger_name = passenger_name
        self.passenger_type = passenger_type
        self.phone = phone
        self.ticket_no = ticket_no
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderDetailInfoResponseBodyModule(TeaModel):
    def __init__(
        self,
        alipay_trade_no: str = None,
        book_user_id: str = None,
        btrip_order_id: int = None,
        contact_name: str = None,
        contact_phone: str = None,
        dis_order_id: str = None,
        extra: str = None,
        flight_info_list: List[FlightOrderDetailInfoResponseBodyModuleFlightInfoList] = None,
        last_pay_time: str = None,
        pay_status: int = None,
        pay_time: str = None,
        promotion_price: int = None,
        settle_amount: int = None,
        settle_type: int = None,
        status: int = None,
        ticket_info_list: List[FlightOrderDetailInfoResponseBodyModuleTicketInfoList] = None,
        total_build_price: int = None,
        total_oil_price: int = None,
        total_order_price: int = None,
        traveler_info_list: List[FlightOrderDetailInfoResponseBodyModuleTravelerInfoList] = None,
    ):
        self.alipay_trade_no = alipay_trade_no
        self.book_user_id = book_user_id
        self.btrip_order_id = btrip_order_id
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.dis_order_id = dis_order_id
        self.extra = extra
        self.flight_info_list = flight_info_list
        self.last_pay_time = last_pay_time
        self.pay_status = pay_status
        self.pay_time = pay_time
        self.promotion_price = promotion_price
        self.settle_amount = settle_amount
        self.settle_type = settle_type
        self.status = status
        self.ticket_info_list = ticket_info_list
        self.total_build_price = total_build_price
        self.total_oil_price = total_oil_price
        self.total_order_price = total_order_price
        self.traveler_info_list = traveler_info_list

    def validate(self):
        if self.flight_info_list:
            for k in self.flight_info_list:
                if k:
                    k.validate()
        if self.ticket_info_list:
            for k in self.ticket_info_list:
                if k:
                    k.validate()
        if self.traveler_info_list:
            for k in self.traveler_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.book_user_id is not None:
            result['book_user_id'] = self.book_user_id
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        result['flight_info_list'] = []
        if self.flight_info_list is not None:
            for k in self.flight_info_list:
                result['flight_info_list'].append(k.to_map() if k else None)
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.settle_amount is not None:
            result['settle_amount'] = self.settle_amount
        if self.settle_type is not None:
            result['settle_type'] = self.settle_type
        if self.status is not None:
            result['status'] = self.status
        result['ticket_info_list'] = []
        if self.ticket_info_list is not None:
            for k in self.ticket_info_list:
                result['ticket_info_list'].append(k.to_map() if k else None)
        if self.total_build_price is not None:
            result['total_build_price'] = self.total_build_price
        if self.total_oil_price is not None:
            result['total_oil_price'] = self.total_oil_price
        if self.total_order_price is not None:
            result['total_order_price'] = self.total_order_price
        result['traveler_info_list'] = []
        if self.traveler_info_list is not None:
            for k in self.traveler_info_list:
                result['traveler_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('book_user_id') is not None:
            self.book_user_id = m.get('book_user_id')
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        self.flight_info_list = []
        if m.get('flight_info_list') is not None:
            for k in m.get('flight_info_list'):
                temp_model = FlightOrderDetailInfoResponseBodyModuleFlightInfoList()
                self.flight_info_list.append(temp_model.from_map(k))
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('settle_amount') is not None:
            self.settle_amount = m.get('settle_amount')
        if m.get('settle_type') is not None:
            self.settle_type = m.get('settle_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        self.ticket_info_list = []
        if m.get('ticket_info_list') is not None:
            for k in m.get('ticket_info_list'):
                temp_model = FlightOrderDetailInfoResponseBodyModuleTicketInfoList()
                self.ticket_info_list.append(temp_model.from_map(k))
        if m.get('total_build_price') is not None:
            self.total_build_price = m.get('total_build_price')
        if m.get('total_oil_price') is not None:
            self.total_oil_price = m.get('total_oil_price')
        if m.get('total_order_price') is not None:
            self.total_order_price = m.get('total_order_price')
        self.traveler_info_list = []
        if m.get('traveler_info_list') is not None:
            for k in m.get('traveler_info_list'):
                temp_model = FlightOrderDetailInfoResponseBodyModuleTravelerInfoList()
                self.traveler_info_list.append(temp_model.from_map(k))
        return self


class FlightOrderDetailInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightOrderDetailInfoResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOrderDetailInfoResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOrderDetailInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightOrderDetailInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOrderDetailInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOrderDetailV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightOrderDetailV2Request(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: int = None,
        out_order_id: str = None,
    ):
        # This parameter is required.
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class FlightOrderDetailV2ResponseBodyModuleContactInfoDTO(TeaModel):
    def __init__(
        self,
        contact_email: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        send_msg_to_passenger: bool = None,
    ):
        self.contact_email = contact_email
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.send_msg_to_passenger = send_msg_to_passenger

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.send_msg_to_passenger is not None:
            result['send_msg_to_passenger'] = self.send_msg_to_passenger
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('send_msg_to_passenger') is not None:
            self.send_msg_to_passenger = m.get('send_msg_to_passenger')
        return self


class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListFlightChange(TeaModel):
    def __init__(
        self,
        change_desc: str = None,
        change_status: str = None,
        change_status_code: str = None,
        new_segment: Any = None,
        passenger_names: List[str] = None,
    ):
        self.change_desc = change_desc
        self.change_status = change_status
        self.change_status_code = change_status_code
        self.new_segment = new_segment
        self.passenger_names = passenger_names

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_desc is not None:
            result['change_desc'] = self.change_desc
        if self.change_status is not None:
            result['change_status'] = self.change_status
        if self.change_status_code is not None:
            result['change_status_code'] = self.change_status_code
        if self.new_segment is not None:
            result['new_segment'] = self.new_segment
        if self.passenger_names is not None:
            result['passenger_names'] = self.passenger_names
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_desc') is not None:
            self.change_desc = m.get('change_desc')
        if m.get('change_status') is not None:
            self.change_status = m.get('change_status')
        if m.get('change_status_code') is not None:
            self.change_status_code = m.get('change_status_code')
        if m.get('new_segment') is not None:
            self.new_segment = m.get('new_segment')
        if m.get('passenger_names') is not None:
            self.passenger_names = m.get('passenger_names')
        return self


class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentList(TeaModel):
    def __init__(
        self,
        air_line_code: str = None,
        air_line_english_name: str = None,
        air_line_name: str = None,
        air_line_phone: str = None,
        airline_icon_url: str = None,
        airline_short_name: str = None,
        arr_airport_code: str = None,
        arr_airport_name: str = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        arrive_terminal: str = None,
        cabin: str = None,
        cabin_and_discount: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        code_share: bool = None,
        deadline_text: str = None,
        dep_airport_code: str = None,
        dep_airport_name: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_date: str = None,
        dep_time: str = None,
        depart_terminal: str = None,
        discount: float = None,
        flight_change: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListFlightChange = None,
        flight_no: str = None,
        flight_type: str = None,
        fly_duration: int = None,
        manufacturer: str = None,
        meal_desc: str = None,
        on_time_rate: str = None,
        operating_air_short_name: str = None,
        operating_airline_code: str = None,
        operating_airline_english_name: str = None,
        operating_airline_icon_url: str = None,
        operating_airline_name: str = None,
        operating_airline_phone: str = None,
        operating_flight_no: str = None,
        plane_type: str = None,
        raise_price: int = None,
        segment_id: str = None,
        segment_index: int = None,
        segment_position: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListSegmentPosition = None,
        stop_airport: str = None,
        stop_arr_time: str = None,
        stop_city: str = None,
        stop_city_name: str = None,
        stop_dep_time: str = None,
        stop_quantity: int = None,
    ):
        self.air_line_code = air_line_code
        self.air_line_english_name = air_line_english_name
        self.air_line_name = air_line_name
        self.air_line_phone = air_line_phone
        self.airline_icon_url = airline_icon_url
        self.airline_short_name = airline_short_name
        self.arr_airport_code = arr_airport_code
        self.arr_airport_name = arr_airport_name
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.arrive_terminal = arrive_terminal
        # cabin
        self.cabin = cabin
        self.cabin_and_discount = cabin_and_discount
        # cabin_class
        self.cabin_class = cabin_class
        # cabin_class_name
        self.cabin_class_name = cabin_class_name
        self.code_share = code_share
        self.deadline_text = deadline_text
        self.dep_airport_code = dep_airport_code
        self.dep_airport_name = dep_airport_name
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_date = dep_date
        self.dep_time = dep_time
        self.depart_terminal = depart_terminal
        self.discount = discount
        self.flight_change = flight_change
        self.flight_no = flight_no
        self.flight_type = flight_type
        self.fly_duration = fly_duration
        self.manufacturer = manufacturer
        self.meal_desc = meal_desc
        self.on_time_rate = on_time_rate
        self.operating_air_short_name = operating_air_short_name
        self.operating_airline_code = operating_airline_code
        self.operating_airline_english_name = operating_airline_english_name
        self.operating_airline_icon_url = operating_airline_icon_url
        self.operating_airline_name = operating_airline_name
        self.operating_airline_phone = operating_airline_phone
        self.operating_flight_no = operating_flight_no
        self.plane_type = plane_type
        self.raise_price = raise_price
        self.segment_id = segment_id
        # segmentIndex
        self.segment_index = segment_index
        self.segment_position = segment_position
        self.stop_airport = stop_airport
        self.stop_arr_time = stop_arr_time
        self.stop_city = stop_city
        self.stop_city_name = stop_city_name
        self.stop_dep_time = stop_dep_time
        self.stop_quantity = stop_quantity

    def validate(self):
        if self.flight_change:
            self.flight_change.validate()
        if self.segment_position:
            self.segment_position.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.air_line_code is not None:
            result['air_line_code'] = self.air_line_code
        if self.air_line_english_name is not None:
            result['air_line_english_name'] = self.air_line_english_name
        if self.air_line_name is not None:
            result['air_line_name'] = self.air_line_name
        if self.air_line_phone is not None:
            result['air_line_phone'] = self.air_line_phone
        if self.airline_icon_url is not None:
            result['airline_icon_url'] = self.airline_icon_url
        if self.airline_short_name is not None:
            result['airline_short_name'] = self.airline_short_name
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.arrive_terminal is not None:
            result['arrive_terminal'] = self.arrive_terminal
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_and_discount is not None:
            result['cabin_and_discount'] = self.cabin_and_discount
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.code_share is not None:
            result['code_share'] = self.code_share
        if self.deadline_text is not None:
            result['deadline_text'] = self.deadline_text
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.depart_terminal is not None:
            result['depart_terminal'] = self.depart_terminal
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_change is not None:
            result['flight_change'] = self.flight_change.to_map()
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.fly_duration is not None:
            result['fly_duration'] = self.fly_duration
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        if self.operating_air_short_name is not None:
            result['operating_air_short_name'] = self.operating_air_short_name
        if self.operating_airline_code is not None:
            result['operating_airline_code'] = self.operating_airline_code
        if self.operating_airline_english_name is not None:
            result['operating_airline_english_name'] = self.operating_airline_english_name
        if self.operating_airline_icon_url is not None:
            result['operating_airline_icon_url'] = self.operating_airline_icon_url
        if self.operating_airline_name is not None:
            result['operating_airline_name'] = self.operating_airline_name
        if self.operating_airline_phone is not None:
            result['operating_airline_phone'] = self.operating_airline_phone
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        if self.plane_type is not None:
            result['plane_type'] = self.plane_type
        if self.raise_price is not None:
            result['raise_price'] = self.raise_price
        if self.segment_id is not None:
            result['segment_id'] = self.segment_id
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_quantity is not None:
            result['stop_quantity'] = self.stop_quantity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('air_line_code') is not None:
            self.air_line_code = m.get('air_line_code')
        if m.get('air_line_english_name') is not None:
            self.air_line_english_name = m.get('air_line_english_name')
        if m.get('air_line_name') is not None:
            self.air_line_name = m.get('air_line_name')
        if m.get('air_line_phone') is not None:
            self.air_line_phone = m.get('air_line_phone')
        if m.get('airline_icon_url') is not None:
            self.airline_icon_url = m.get('airline_icon_url')
        if m.get('airline_short_name') is not None:
            self.airline_short_name = m.get('airline_short_name')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('arrive_terminal') is not None:
            self.arrive_terminal = m.get('arrive_terminal')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_and_discount') is not None:
            self.cabin_and_discount = m.get('cabin_and_discount')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('code_share') is not None:
            self.code_share = m.get('code_share')
        if m.get('deadline_text') is not None:
            self.deadline_text = m.get('deadline_text')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('depart_terminal') is not None:
            self.depart_terminal = m.get('depart_terminal')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_change') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListFlightChange()
            self.flight_change = temp_model.from_map(m['flight_change'])
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('fly_duration') is not None:
            self.fly_duration = m.get('fly_duration')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        if m.get('operating_air_short_name') is not None:
            self.operating_air_short_name = m.get('operating_air_short_name')
        if m.get('operating_airline_code') is not None:
            self.operating_airline_code = m.get('operating_airline_code')
        if m.get('operating_airline_english_name') is not None:
            self.operating_airline_english_name = m.get('operating_airline_english_name')
        if m.get('operating_airline_icon_url') is not None:
            self.operating_airline_icon_url = m.get('operating_airline_icon_url')
        if m.get('operating_airline_name') is not None:
            self.operating_airline_name = m.get('operating_airline_name')
        if m.get('operating_airline_phone') is not None:
            self.operating_airline_phone = m.get('operating_airline_phone')
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        if m.get('plane_type') is not None:
            self.plane_type = m.get('plane_type')
        if m.get('raise_price') is not None:
            self.raise_price = m.get('raise_price')
        if m.get('segment_id') is not None:
            self.segment_id = m.get('segment_id')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('segment_position') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_quantity') is not None:
            self.stop_quantity = m.get('stop_quantity')
        return self


class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneys(TeaModel):
    def __init__(
        self,
        all_fly_duration: int = None,
        all_fly_duration_after_change: int = None,
        apply_id: int = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        baggage_details: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        flight_status: str = None,
        iata_no: str = None,
        is_reshop_journey: bool = None,
        is_transfer: bool = None,
        journey_title: str = None,
        refund_change_details: str = None,
        segment_list: List[FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentList] = None,
    ):
        self.all_fly_duration = all_fly_duration
        self.all_fly_duration_after_change = all_fly_duration_after_change
        self.apply_id = apply_id
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.baggage_details = baggage_details
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.flight_status = flight_status
        # iata_no
        self.iata_no = iata_no
        self.is_reshop_journey = is_reshop_journey
        self.is_transfer = is_transfer
        self.journey_title = journey_title
        self.refund_change_details = refund_change_details
        self.segment_list = segment_list

    def validate(self):
        if self.segment_list:
            for k in self.segment_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_fly_duration is not None:
            result['all_fly_duration'] = self.all_fly_duration
        if self.all_fly_duration_after_change is not None:
            result['all_fly_duration_after_change'] = self.all_fly_duration_after_change
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage_details is not None:
            result['baggage_details'] = self.baggage_details
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_status is not None:
            result['flight_status'] = self.flight_status
        if self.iata_no is not None:
            result['iata_no'] = self.iata_no
        if self.is_reshop_journey is not None:
            result['is_reshop_journey'] = self.is_reshop_journey
        if self.is_transfer is not None:
            result['is_transfer'] = self.is_transfer
        if self.journey_title is not None:
            result['journey_title'] = self.journey_title
        if self.refund_change_details is not None:
            result['refund_change_details'] = self.refund_change_details
        result['segment_list'] = []
        if self.segment_list is not None:
            for k in self.segment_list:
                result['segment_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('all_fly_duration') is not None:
            self.all_fly_duration = m.get('all_fly_duration')
        if m.get('all_fly_duration_after_change') is not None:
            self.all_fly_duration_after_change = m.get('all_fly_duration_after_change')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage_details') is not None:
            self.baggage_details = m.get('baggage_details')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_status') is not None:
            self.flight_status = m.get('flight_status')
        if m.get('iata_no') is not None:
            self.iata_no = m.get('iata_no')
        if m.get('is_reshop_journey') is not None:
            self.is_reshop_journey = m.get('is_reshop_journey')
        if m.get('is_transfer') is not None:
            self.is_transfer = m.get('is_transfer')
        if m.get('journey_title') is not None:
            self.journey_title = m.get('journey_title')
        if m.get('refund_change_details') is not None:
            self.refund_change_details = m.get('refund_change_details')
        self.segment_list = []
        if m.get('segment_list') is not None:
            for k in m.get('segment_list'):
                temp_model = FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneysSegmentList()
                self.segment_list.append(temp_model.from_map(k))
        return self


class FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTO(TeaModel):
    def __init__(
        self,
        journeys: List[FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneys] = None,
        notice_tips: str = None,
        trip_type: str = None,
        trip_type_code: int = None,
    ):
        self.journeys = journeys
        self.notice_tips = notice_tips
        self.trip_type = trip_type
        self.trip_type_code = trip_type_code

    def validate(self):
        if self.journeys:
            for k in self.journeys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['journeys'] = []
        if self.journeys is not None:
            for k in self.journeys:
                result['journeys'].append(k.to_map() if k else None)
        if self.notice_tips is not None:
            result['notice_tips'] = self.notice_tips
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        if self.trip_type_code is not None:
            result['trip_type_code'] = self.trip_type_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.journeys = []
        if m.get('journeys') is not None:
            for k in m.get('journeys'):
                temp_model = FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTOJourneys()
                self.journeys.append(temp_model.from_map(k))
        if m.get('notice_tips') is not None:
            self.notice_tips = m.get('notice_tips')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        if m.get('trip_type_code') is not None:
            self.trip_type_code = m.get('trip_type_code')
        return self


class FlightOrderDetailV2ResponseBodyModulePassengerListCredential(TeaModel):
    def __init__(
        self,
        birth_date: str = None,
        cert_issue_date: str = None,
        cert_issue_place: str = None,
        credential_no: str = None,
        drive_licence_first: str = None,
        drive_licence_type: str = None,
        expire_date: str = None,
        holder_nationality: str = None,
        id: int = None,
        id_check_code: str = None,
        issue_country: str = None,
        type: int = None,
    ):
        self.birth_date = birth_date
        self.cert_issue_date = cert_issue_date
        self.cert_issue_place = cert_issue_place
        self.credential_no = credential_no
        self.drive_licence_first = drive_licence_first
        self.drive_licence_type = drive_licence_type
        self.expire_date = expire_date
        self.holder_nationality = holder_nationality
        self.id = id
        self.id_check_code = id_check_code
        self.issue_country = issue_country
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_issue_date is not None:
            result['cert_issue_date'] = self.cert_issue_date
        if self.cert_issue_place is not None:
            result['cert_issue_place'] = self.cert_issue_place
        if self.credential_no is not None:
            result['credential_no'] = self.credential_no
        if self.drive_licence_first is not None:
            result['drive_licence_first'] = self.drive_licence_first
        if self.drive_licence_type is not None:
            result['drive_licence_type'] = self.drive_licence_type
        if self.expire_date is not None:
            result['expire_date'] = self.expire_date
        if self.holder_nationality is not None:
            result['holder_nationality'] = self.holder_nationality
        if self.id is not None:
            result['id'] = self.id
        if self.id_check_code is not None:
            result['id_check_code'] = self.id_check_code
        if self.issue_country is not None:
            result['issue_country'] = self.issue_country
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_issue_date') is not None:
            self.cert_issue_date = m.get('cert_issue_date')
        if m.get('cert_issue_place') is not None:
            self.cert_issue_place = m.get('cert_issue_place')
        if m.get('credential_no') is not None:
            self.credential_no = m.get('credential_no')
        if m.get('drive_licence_first') is not None:
            self.drive_licence_first = m.get('drive_licence_first')
        if m.get('drive_licence_type') is not None:
            self.drive_licence_type = m.get('drive_licence_type')
        if m.get('expire_date') is not None:
            self.expire_date = m.get('expire_date')
        if m.get('holder_nationality') is not None:
            self.holder_nationality = m.get('holder_nationality')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('id_check_code') is not None:
            self.id_check_code = m.get('id_check_code')
        if m.get('issue_country') is not None:
            self.issue_country = m.get('issue_country')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOrderDetailV2ResponseBodyModulePassengerListCredentials(TeaModel):
    def __init__(
        self,
        birth_date: str = None,
        cert_issue_date: str = None,
        cert_issue_place: str = None,
        credential_no: str = None,
        drive_licence_first: str = None,
        drive_licence_type: str = None,
        expire_date: str = None,
        holder_nationality: str = None,
        id: int = None,
        id_check_code: str = None,
        issue_country: str = None,
        type: int = None,
    ):
        self.birth_date = birth_date
        self.cert_issue_date = cert_issue_date
        self.cert_issue_place = cert_issue_place
        self.credential_no = credential_no
        self.drive_licence_first = drive_licence_first
        self.drive_licence_type = drive_licence_type
        self.expire_date = expire_date
        self.holder_nationality = holder_nationality
        self.id = id
        self.id_check_code = id_check_code
        self.issue_country = issue_country
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_issue_date is not None:
            result['cert_issue_date'] = self.cert_issue_date
        if self.cert_issue_place is not None:
            result['cert_issue_place'] = self.cert_issue_place
        if self.credential_no is not None:
            result['credential_no'] = self.credential_no
        if self.drive_licence_first is not None:
            result['drive_licence_first'] = self.drive_licence_first
        if self.drive_licence_type is not None:
            result['drive_licence_type'] = self.drive_licence_type
        if self.expire_date is not None:
            result['expire_date'] = self.expire_date
        if self.holder_nationality is not None:
            result['holder_nationality'] = self.holder_nationality
        if self.id is not None:
            result['id'] = self.id
        if self.id_check_code is not None:
            result['id_check_code'] = self.id_check_code
        if self.issue_country is not None:
            result['issue_country'] = self.issue_country
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_issue_date') is not None:
            self.cert_issue_date = m.get('cert_issue_date')
        if m.get('cert_issue_place') is not None:
            self.cert_issue_place = m.get('cert_issue_place')
        if m.get('credential_no') is not None:
            self.credential_no = m.get('credential_no')
        if m.get('drive_licence_first') is not None:
            self.drive_licence_first = m.get('drive_licence_first')
        if m.get('drive_licence_type') is not None:
            self.drive_licence_type = m.get('drive_licence_type')
        if m.get('expire_date') is not None:
            self.expire_date = m.get('expire_date')
        if m.get('holder_nationality') is not None:
            self.holder_nationality = m.get('holder_nationality')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('id_check_code') is not None:
            self.id_check_code = m.get('id_check_code')
        if m.get('issue_country') is not None:
            self.issue_country = m.get('issue_country')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOrderDetailV2ResponseBodyModulePassengerListTicketsSegmentOpenTicketList(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        open_ticket_status: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.open_ticket_status = open_ticket_status
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class FlightOrderDetailV2ResponseBodyModulePassengerListTickets(TeaModel):
    def __init__(
        self,
        channel: str = None,
        journey_title: str = None,
        open_ticket_status: str = None,
        pcc: str = None,
        segment_open_ticket_list: List[FlightOrderDetailV2ResponseBodyModulePassengerListTicketsSegmentOpenTicketList] = None,
        ticket_auth_memo: str = None,
        ticket_auth_status: int = None,
        ticket_no: str = None,
        ticket_price: int = None,
        ticket_status: str = None,
    ):
        self.channel = channel
        self.journey_title = journey_title
        self.open_ticket_status = open_ticket_status
        # pcc/office
        self.pcc = pcc
        self.segment_open_ticket_list = segment_open_ticket_list
        self.ticket_auth_memo = ticket_auth_memo
        self.ticket_auth_status = ticket_auth_status
        self.ticket_no = ticket_no
        self.ticket_price = ticket_price
        self.ticket_status = ticket_status

    def validate(self):
        if self.segment_open_ticket_list:
            for k in self.segment_open_ticket_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel is not None:
            result['channel'] = self.channel
        if self.journey_title is not None:
            result['journey_title'] = self.journey_title
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.pcc is not None:
            result['pcc'] = self.pcc
        result['segment_open_ticket_list'] = []
        if self.segment_open_ticket_list is not None:
            for k in self.segment_open_ticket_list:
                result['segment_open_ticket_list'].append(k.to_map() if k else None)
        if self.ticket_auth_memo is not None:
            result['ticket_auth_memo'] = self.ticket_auth_memo
        if self.ticket_auth_status is not None:
            result['ticket_auth_status'] = self.ticket_auth_status
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('channel') is not None:
            self.channel = m.get('channel')
        if m.get('journey_title') is not None:
            self.journey_title = m.get('journey_title')
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('pcc') is not None:
            self.pcc = m.get('pcc')
        self.segment_open_ticket_list = []
        if m.get('segment_open_ticket_list') is not None:
            for k in m.get('segment_open_ticket_list'):
                temp_model = FlightOrderDetailV2ResponseBodyModulePassengerListTicketsSegmentOpenTicketList()
                self.segment_open_ticket_list.append(temp_model.from_map(k))
        if m.get('ticket_auth_memo') is not None:
            self.ticket_auth_memo = m.get('ticket_auth_memo')
        if m.get('ticket_auth_status') is not None:
            self.ticket_auth_status = m.get('ticket_auth_status')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        return self


class FlightOrderDetailV2ResponseBodyModulePassengerList(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        btrip_user_id: str = None,
        code: int = None,
        country: str = None,
        country_code: str = None,
        credential: FlightOrderDetailV2ResponseBodyModulePassengerListCredential = None,
        credentials: List[FlightOrderDetailV2ResponseBodyModulePassengerListCredentials] = None,
        email: str = None,
        en_first_name: str = None,
        en_last_name: str = None,
        english_name: str = None,
        gender: int = None,
        id: str = None,
        is_complete: bool = None,
        is_frequently: bool = None,
        memo: str = None,
        mobile_country_code: str = None,
        mobile_phone_number: str = None,
        name: str = None,
        oneself: bool = None,
        order_name: str = None,
        out_passenger_id: str = None,
        phone: str = None,
        sheng_pi_pinyin: str = None,
        ticket_nos: List[str] = None,
        tickets: List[FlightOrderDetailV2ResponseBodyModulePassengerListTickets] = None,
        type: int = None,
        user_id: str = None,
    ):
        self.birthday = birthday
        self.btrip_user_id = btrip_user_id
        self.code = code
        self.country = country
        self.country_code = country_code
        self.credential = credential
        self.credentials = credentials
        self.email = email
        self.en_first_name = en_first_name
        self.en_last_name = en_last_name
        self.english_name = english_name
        self.gender = gender
        self.id = id
        self.is_complete = is_complete
        self.is_frequently = is_frequently
        self.memo = memo
        self.mobile_country_code = mobile_country_code
        self.mobile_phone_number = mobile_phone_number
        self.name = name
        self.oneself = oneself
        self.order_name = order_name
        self.out_passenger_id = out_passenger_id
        self.phone = phone
        self.sheng_pi_pinyin = sheng_pi_pinyin
        self.ticket_nos = ticket_nos
        self.tickets = tickets
        self.type = type
        self.user_id = user_id

    def validate(self):
        if self.credential:
            self.credential.validate()
        if self.credentials:
            for k in self.credentials:
                if k:
                    k.validate()
        if self.tickets:
            for k in self.tickets:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.code is not None:
            result['code'] = self.code
        if self.country is not None:
            result['country'] = self.country
        if self.country_code is not None:
            result['country_code'] = self.country_code
        if self.credential is not None:
            result['credential'] = self.credential.to_map()
        result['credentials'] = []
        if self.credentials is not None:
            for k in self.credentials:
                result['credentials'].append(k.to_map() if k else None)
        if self.email is not None:
            result['email'] = self.email
        if self.en_first_name is not None:
            result['en_first_name'] = self.en_first_name
        if self.en_last_name is not None:
            result['en_last_name'] = self.en_last_name
        if self.english_name is not None:
            result['english_name'] = self.english_name
        if self.gender is not None:
            result['gender'] = self.gender
        if self.id is not None:
            result['id'] = self.id
        if self.is_complete is not None:
            result['is_complete'] = self.is_complete
        if self.is_frequently is not None:
            result['is_frequently'] = self.is_frequently
        if self.memo is not None:
            result['memo'] = self.memo
        if self.mobile_country_code is not None:
            result['mobile_country_code'] = self.mobile_country_code
        if self.mobile_phone_number is not None:
            result['mobile_phone_number'] = self.mobile_phone_number
        if self.name is not None:
            result['name'] = self.name
        if self.oneself is not None:
            result['oneself'] = self.oneself
        if self.order_name is not None:
            result['order_name'] = self.order_name
        if self.out_passenger_id is not None:
            result['out_passenger_id'] = self.out_passenger_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.sheng_pi_pinyin is not None:
            result['sheng_pi_pinyin'] = self.sheng_pi_pinyin
        if self.ticket_nos is not None:
            result['ticket_nos'] = self.ticket_nos
        result['tickets'] = []
        if self.tickets is not None:
            for k in self.tickets:
                result['tickets'].append(k.to_map() if k else None)
        if self.type is not None:
            result['type'] = self.type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('country_code') is not None:
            self.country_code = m.get('country_code')
        if m.get('credential') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModulePassengerListCredential()
            self.credential = temp_model.from_map(m['credential'])
        self.credentials = []
        if m.get('credentials') is not None:
            for k in m.get('credentials'):
                temp_model = FlightOrderDetailV2ResponseBodyModulePassengerListCredentials()
                self.credentials.append(temp_model.from_map(k))
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('en_first_name') is not None:
            self.en_first_name = m.get('en_first_name')
        if m.get('en_last_name') is not None:
            self.en_last_name = m.get('en_last_name')
        if m.get('english_name') is not None:
            self.english_name = m.get('english_name')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('is_complete') is not None:
            self.is_complete = m.get('is_complete')
        if m.get('is_frequently') is not None:
            self.is_frequently = m.get('is_frequently')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('mobile_country_code') is not None:
            self.mobile_country_code = m.get('mobile_country_code')
        if m.get('mobile_phone_number') is not None:
            self.mobile_phone_number = m.get('mobile_phone_number')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('oneself') is not None:
            self.oneself = m.get('oneself')
        if m.get('order_name') is not None:
            self.order_name = m.get('order_name')
        if m.get('out_passenger_id') is not None:
            self.out_passenger_id = m.get('out_passenger_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('sheng_pi_pinyin') is not None:
            self.sheng_pi_pinyin = m.get('sheng_pi_pinyin')
        if m.get('ticket_nos') is not None:
            self.ticket_nos = m.get('ticket_nos')
        self.tickets = []
        if m.get('tickets') is not None:
            for k in m.get('tickets'):
                temp_model = FlightOrderDetailV2ResponseBodyModulePassengerListTickets()
                self.tickets.append(temp_model.from_map(k))
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderDetailV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        b_2g_vip_code: str = None,
        book_succ_time: str = None,
        book_user_id: str = None,
        book_user_name: str = None,
        build_price: int = None,
        contact_info_dto: FlightOrderDetailV2ResponseBodyModuleContactInfoDTO = None,
        create_time: str = None,
        facevalue: int = None,
        flight_tale_info_dto: FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTO = None,
        is_protocol: bool = None,
        isemergency: bool = None,
        issendmessage: bool = None,
        oil_price: int = None,
        order_id: int = None,
        order_price: int = None,
        out_order_id: str = None,
        passenger_list: List[FlightOrderDetailV2ResponseBodyModulePassengerList] = None,
        passenger_segment_map: Dict[str, str] = None,
        pay_time: str = None,
        saleprice: int = None,
        sendcpsms: bool = None,
        status: int = None,
        total_service_fee_price: int = None,
    ):
        self.b_2g_vip_code = b_2g_vip_code
        self.book_succ_time = book_succ_time
        self.book_user_id = book_user_id
        self.book_user_name = book_user_name
        self.build_price = build_price
        self.contact_info_dto = contact_info_dto
        self.create_time = create_time
        self.facevalue = facevalue
        self.flight_tale_info_dto = flight_tale_info_dto
        self.is_protocol = is_protocol
        self.isemergency = isemergency
        self.issendmessage = issendmessage
        self.oil_price = oil_price
        self.order_id = order_id
        self.order_price = order_price
        self.out_order_id = out_order_id
        self.passenger_list = passenger_list
        # key :passengerId
        # 
        # value :segmentId
        self.passenger_segment_map = passenger_segment_map
        self.pay_time = pay_time
        self.saleprice = saleprice
        self.sendcpsms = sendcpsms
        self.status = status
        self.total_service_fee_price = total_service_fee_price

    def validate(self):
        if self.contact_info_dto:
            self.contact_info_dto.validate()
        if self.flight_tale_info_dto:
            self.flight_tale_info_dto.validate()
        if self.passenger_list:
            for k in self.passenger_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.b_2g_vip_code is not None:
            result['b2g_vip_code'] = self.b_2g_vip_code
        if self.book_succ_time is not None:
            result['book_succ_time'] = self.book_succ_time
        if self.book_user_id is not None:
            result['book_user_id'] = self.book_user_id
        if self.book_user_name is not None:
            result['book_user_name'] = self.book_user_name
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.contact_info_dto is not None:
            result['contact_info_d_t_o'] = self.contact_info_dto.to_map()
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.facevalue is not None:
            result['facevalue'] = self.facevalue
        if self.flight_tale_info_dto is not None:
            result['flight_tale_info_d_t_o'] = self.flight_tale_info_dto.to_map()
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.isemergency is not None:
            result['isemergency'] = self.isemergency
        if self.issendmessage is not None:
            result['issendmessage'] = self.issendmessage
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_list'] = []
        if self.passenger_list is not None:
            for k in self.passenger_list:
                result['passenger_list'].append(k.to_map() if k else None)
        if self.passenger_segment_map is not None:
            result['passenger_segment_map'] = self.passenger_segment_map
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.saleprice is not None:
            result['saleprice'] = self.saleprice
        if self.sendcpsms is not None:
            result['sendcpsms'] = self.sendcpsms
        if self.status is not None:
            result['status'] = self.status
        if self.total_service_fee_price is not None:
            result['total_service_fee_price'] = self.total_service_fee_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('b2g_vip_code') is not None:
            self.b_2g_vip_code = m.get('b2g_vip_code')
        if m.get('book_succ_time') is not None:
            self.book_succ_time = m.get('book_succ_time')
        if m.get('book_user_id') is not None:
            self.book_user_id = m.get('book_user_id')
        if m.get('book_user_name') is not None:
            self.book_user_name = m.get('book_user_name')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('contact_info_d_t_o') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModuleContactInfoDTO()
            self.contact_info_dto = temp_model.from_map(m['contact_info_d_t_o'])
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('facevalue') is not None:
            self.facevalue = m.get('facevalue')
        if m.get('flight_tale_info_d_t_o') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModuleFlightTaleInfoDTO()
            self.flight_tale_info_dto = temp_model.from_map(m['flight_tale_info_d_t_o'])
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('isemergency') is not None:
            self.isemergency = m.get('isemergency')
        if m.get('issendmessage') is not None:
            self.issendmessage = m.get('issendmessage')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_list = []
        if m.get('passenger_list') is not None:
            for k in m.get('passenger_list'):
                temp_model = FlightOrderDetailV2ResponseBodyModulePassengerList()
                self.passenger_list.append(temp_model.from_map(k))
        if m.get('passenger_segment_map') is not None:
            self.passenger_segment_map = m.get('passenger_segment_map')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('saleprice') is not None:
            self.saleprice = m.get('saleprice')
        if m.get('sendcpsms') is not None:
            self.sendcpsms = m.get('sendcpsms')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('total_service_fee_price') is not None:
            self.total_service_fee_price = m.get('total_service_fee_price')
        return self


class FlightOrderDetailV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightOrderDetailV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOrderDetailV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOrderDetailV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightOrderDetailV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOrderDetailV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOrderListQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class FlightOrderListQueryRequest(TeaModel):
    def __init__(
        self,
        all_apply: bool = None,
        apply_id: int = None,
        depart_id: str = None,
        end_time: str = None,
        page: int = None,
        page_size: int = None,
        start_time: str = None,
        thirdpart_apply_id: str = None,
        update_end_time: str = None,
        update_start_time: str = None,
        user_id: str = None,
    ):
        self.all_apply = all_apply
        self.apply_id = apply_id
        self.depart_id = depart_id
        self.end_time = end_time
        self.page = page
        self.page_size = page_size
        self.start_time = start_time
        self.thirdpart_apply_id = thirdpart_apply_id
        self.update_end_time = update_end_time
        self.update_start_time = update_start_time
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_apply is not None:
            result['all_apply'] = self.all_apply
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.update_end_time is not None:
            result['update_end_time'] = self.update_end_time
        if self.update_start_time is not None:
            result['update_start_time'] = self.update_start_time
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('all_apply') is not None:
            self.all_apply = m.get('all_apply')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('update_end_time') is not None:
            self.update_end_time = m.get('update_end_time')
        if m.get('update_start_time') is not None:
            self.update_start_time = m.get('update_start_time')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderListQueryResponseBodyModuleCostCenter(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        id: int = None,
        name: str = None,
        number: str = None,
    ):
        self.corp_id = corp_id
        self.id = id
        self.name = name
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class FlightOrderListQueryResponseBodyModuleInsureInfoList(TeaModel):
    def __init__(
        self,
        insure_no: str = None,
        name: str = None,
        status: int = None,
    ):
        self.insure_no = insure_no
        self.name = name
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.insure_no is not None:
            result['insure_no'] = self.insure_no
        if self.name is not None:
            result['name'] = self.name
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('insure_no') is not None:
            self.insure_no = m.get('insure_no')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class FlightOrderListQueryResponseBodyModuleInvoice(TeaModel):
    def __init__(
        self,
        id: int = None,
        title: str = None,
    ):
        self.id = id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOrderListQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(
        self,
        category_code: int = None,
        category_type: int = None,
        change_flight_no: str = None,
        discount: str = None,
        end_time: str = None,
        gmt_create: str = None,
        original_ticket_no: str = None,
        passenger_name: str = None,
        pay_type: int = None,
        price: float = None,
        start_time: str = None,
        ticket_no: str = None,
        trade_id: str = None,
        type: int = None,
    ):
        self.category_code = category_code
        self.category_type = category_type
        self.change_flight_no = change_flight_no
        self.discount = discount
        self.end_time = end_time
        self.gmt_create = gmt_create
        self.original_ticket_no = original_ticket_no
        self.passenger_name = passenger_name
        self.pay_type = pay_type
        self.price = price
        self.start_time = start_time
        self.ticket_no = ticket_no
        self.trade_id = trade_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.category_type is not None:
            result['category_type'] = self.category_type
        if self.change_flight_no is not None:
            result['change_flight_no'] = self.change_flight_no
        if self.discount is not None:
            result['discount'] = self.discount
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.original_ticket_no is not None:
            result['original_ticket_no'] = self.original_ticket_no
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('category_type') is not None:
            self.category_type = m.get('category_type')
        if m.get('change_flight_no') is not None:
            self.change_flight_no = m.get('change_flight_no')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('original_ticket_no') is not None:
            self.original_ticket_no = m.get('original_ticket_no')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOrderListQueryResponseBodyModuleUserAffiliateList(TeaModel):
    def __init__(
        self,
        user_id: str = None,
        user_name: str = None,
    ):
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class FlightOrderListQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        arr_airport: str = None,
        arr_city: str = None,
        arr_city_ad_code: str = None,
        btrip_title: str = None,
        cabin_class: str = None,
        contact_name: str = None,
        corp_id: str = None,
        corp_name: str = None,
        cost_center: FlightOrderListQueryResponseBodyModuleCostCenter = None,
        dep_airport: str = None,
        dep_city: str = None,
        dep_city_ad_code: str = None,
        dep_date: str = None,
        depart_id: str = None,
        depart_name: str = None,
        discount: str = None,
        flight_no: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        insure_info_list: List[FlightOrderListQueryResponseBodyModuleInsureInfoList] = None,
        invoice: FlightOrderListQueryResponseBodyModuleInvoice = None,
        passenger_count: int = None,
        passenger_name: str = None,
        price_info_list: List[FlightOrderListQueryResponseBodyModulePriceInfoList] = None,
        project_code: str = None,
        project_id: int = None,
        project_title: str = None,
        ret_date: str = None,
        status: int = None,
        third_part_project_id: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
        thirdpart_itinerary_id: str = None,
        trip_type: int = None,
        user_affiliate_list: List[FlightOrderListQueryResponseBodyModuleUserAffiliateList] = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_id = apply_id
        self.arr_airport = arr_airport
        self.arr_city = arr_city
        self.arr_city_ad_code = arr_city_ad_code
        self.btrip_title = btrip_title
        self.cabin_class = cabin_class
        self.contact_name = contact_name
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.cost_center = cost_center
        self.dep_airport = dep_airport
        self.dep_city = dep_city
        self.dep_city_ad_code = dep_city_ad_code
        self.dep_date = dep_date
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.discount = discount
        self.flight_no = flight_no
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.insure_info_list = insure_info_list
        self.invoice = invoice
        self.passenger_count = passenger_count
        self.passenger_name = passenger_name
        self.price_info_list = price_info_list
        self.project_code = project_code
        self.project_id = project_id
        self.project_title = project_title
        self.ret_date = ret_date
        self.status = status
        self.third_part_project_id = third_part_project_id
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.trip_type = trip_type
        self.user_affiliate_list = user_affiliate_list
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.cost_center:
            self.cost_center.validate()
        if self.insure_info_list:
            for k in self.insure_info_list:
                if k:
                    k.validate()
        if self.invoice:
            self.invoice.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.user_affiliate_list:
            for k in self.user_affiliate_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_airport is not None:
            result['arr_airport'] = self.arr_airport
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_ad_code is not None:
            result['arr_city_ad_code'] = self.arr_city_ad_code
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center.to_map()
        if self.dep_airport is not None:
            result['dep_airport'] = self.dep_airport
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_ad_code is not None:
            result['dep_city_ad_code'] = self.dep_city_ad_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        result['insure_info_list'] = []
        if self.insure_info_list is not None:
            for k in self.insure_info_list:
                result['insure_info_list'].append(k.to_map() if k else None)
        if self.invoice is not None:
            result['invoice'] = self.invoice.to_map()
        if self.passenger_count is not None:
            result['passenger_count'] = self.passenger_count
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.ret_date is not None:
            result['ret_date'] = self.ret_date
        if self.status is not None:
            result['status'] = self.status
        if self.third_part_project_id is not None:
            result['third_part_project_id'] = self.third_part_project_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        result['user_affiliate_list'] = []
        if self.user_affiliate_list is not None:
            for k in self.user_affiliate_list:
                result['user_affiliate_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_airport') is not None:
            self.arr_airport = m.get('arr_airport')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_ad_code') is not None:
            self.arr_city_ad_code = m.get('arr_city_ad_code')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('cost_center') is not None:
            temp_model = FlightOrderListQueryResponseBodyModuleCostCenter()
            self.cost_center = temp_model.from_map(m['cost_center'])
        if m.get('dep_airport') is not None:
            self.dep_airport = m.get('dep_airport')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_ad_code') is not None:
            self.dep_city_ad_code = m.get('dep_city_ad_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        self.insure_info_list = []
        if m.get('insure_info_list') is not None:
            for k in m.get('insure_info_list'):
                temp_model = FlightOrderListQueryResponseBodyModuleInsureInfoList()
                self.insure_info_list.append(temp_model.from_map(k))
        if m.get('invoice') is not None:
            temp_model = FlightOrderListQueryResponseBodyModuleInvoice()
            self.invoice = temp_model.from_map(m['invoice'])
        if m.get('passenger_count') is not None:
            self.passenger_count = m.get('passenger_count')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = FlightOrderListQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('ret_date') is not None:
            self.ret_date = m.get('ret_date')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_part_project_id') is not None:
            self.third_part_project_id = m.get('third_part_project_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        self.user_affiliate_list = []
        if m.get('user_affiliate_list') is not None:
            for k in m.get('user_affiliate_list'):
                temp_model = FlightOrderListQueryResponseBodyModuleUserAffiliateList()
                self.user_affiliate_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class FlightOrderListQueryResponseBodyPageInfo(TeaModel):
    def __init__(
        self,
        page: int = None,
        page_size: int = None,
        total_number: int = None,
    ):
        self.page = page
        self.page_size = page_size
        self.total_number = total_number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_number is not None:
            result['total_number'] = self.total_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_number') is not None:
            self.total_number = m.get('total_number')
        return self


class FlightOrderListQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[FlightOrderListQueryResponseBodyModule] = None,
        page_info: FlightOrderListQueryResponseBodyPageInfo = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.page_info = page_info
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()
        if self.page_info:
            self.page_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.page_info is not None:
            result['page_info'] = self.page_info.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = FlightOrderListQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('page_info') is not None:
            temp_model = FlightOrderListQueryResponseBodyPageInfo()
            self.page_info = temp_model.from_map(m['page_info'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOrderListQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightOrderListQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOrderListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOrderQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class FlightOrderQueryRequest(TeaModel):
    def __init__(
        self,
        order_id: int = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.order_id = order_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        arr_airport: str = None,
        arr_airport_code: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_time: str = None,
        change_cabin: str = None,
        change_cabin_level: str = None,
        change_fee: float = None,
        change_flight_no: str = None,
        change_order_id: int = None,
        change_reason: str = None,
        change_type: int = None,
        dep_airport: str = None,
        dep_airport_code: str = None,
        dep_city: str = None,
        dep_city_code: str = None,
        dep_time: str = None,
        discount: str = None,
        gmt_create: str = None,
        gmt_modify: str = None,
        origin_ticket_no: str = None,
        out_apply_id: str = None,
        stop_city: str = None,
        ticket_no: str = None,
        ticket_status: str = None,
        ticket_status_code: int = None,
        upgrade_fee: float = None,
    ):
        self.apply_id = apply_id
        self.arr_airport = arr_airport
        self.arr_airport_code = arr_airport_code
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_time = arr_time
        self.change_cabin = change_cabin
        self.change_cabin_level = change_cabin_level
        self.change_fee = change_fee
        self.change_flight_no = change_flight_no
        self.change_order_id = change_order_id
        self.change_reason = change_reason
        self.change_type = change_type
        self.dep_airport = dep_airport
        self.dep_airport_code = dep_airport_code
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        self.dep_time = dep_time
        self.discount = discount
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.origin_ticket_no = origin_ticket_no
        self.out_apply_id = out_apply_id
        self.stop_city = stop_city
        self.ticket_no = ticket_no
        self.ticket_status = ticket_status
        self.ticket_status_code = ticket_status_code
        self.upgrade_fee = upgrade_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_airport is not None:
            result['arr_airport'] = self.arr_airport
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.change_cabin is not None:
            result['change_cabin'] = self.change_cabin
        if self.change_cabin_level is not None:
            result['change_cabin_level'] = self.change_cabin_level
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.change_flight_no is not None:
            result['change_flight_no'] = self.change_flight_no
        if self.change_order_id is not None:
            result['change_order_id'] = self.change_order_id
        if self.change_reason is not None:
            result['change_reason'] = self.change_reason
        if self.change_type is not None:
            result['change_type'] = self.change_type
        if self.dep_airport is not None:
            result['dep_airport'] = self.dep_airport
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.origin_ticket_no is not None:
            result['origin_ticket_no'] = self.origin_ticket_no
        if self.out_apply_id is not None:
            result['out_apply_id'] = self.out_apply_id
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        if self.ticket_status_code is not None:
            result['ticket_status_code'] = self.ticket_status_code
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_airport') is not None:
            self.arr_airport = m.get('arr_airport')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('change_cabin') is not None:
            self.change_cabin = m.get('change_cabin')
        if m.get('change_cabin_level') is not None:
            self.change_cabin_level = m.get('change_cabin_level')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('change_flight_no') is not None:
            self.change_flight_no = m.get('change_flight_no')
        if m.get('change_order_id') is not None:
            self.change_order_id = m.get('change_order_id')
        if m.get('change_reason') is not None:
            self.change_reason = m.get('change_reason')
        if m.get('change_type') is not None:
            self.change_type = m.get('change_type')
        if m.get('dep_airport') is not None:
            self.dep_airport = m.get('dep_airport')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('origin_ticket_no') is not None:
            self.origin_ticket_no = m.get('origin_ticket_no')
        if m.get('out_apply_id') is not None:
            self.out_apply_id = m.get('out_apply_id')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        if m.get('ticket_status_code') is not None:
            self.ticket_status_code = m.get('ticket_status_code')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        return self


class FlightOrderQueryResponseBodyModuleFlightInfoList(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        arr_airport_code: str = None,
        arr_airport_name: str = None,
        arr_city_ad_code: str = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        cabin: str = None,
        cabin_level: str = None,
        dep_airport_code: str = None,
        dep_airport_name: str = None,
        dep_city_ad_code: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        flight_mile: int = None,
        flight_no: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.arr_airport_code = arr_airport_code
        self.arr_airport_name = arr_airport_name
        self.arr_city_ad_code = arr_city_ad_code
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.cabin = cabin
        self.cabin_level = cabin_level
        self.dep_airport_code = dep_airport_code
        self.dep_airport_name = dep_airport_name
        self.dep_city_ad_code = dep_city_ad_code
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.flight_mile = flight_mile
        self.flight_no = flight_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_ad_code is not None:
            result['arr_city_ad_code'] = self.arr_city_ad_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_level is not None:
            result['cabin_level'] = self.cabin_level
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_ad_code is not None:
            result['dep_city_ad_code'] = self.dep_city_ad_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_mile is not None:
            result['flight_mile'] = self.flight_mile
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_ad_code') is not None:
            self.arr_city_ad_code = m.get('arr_city_ad_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_level') is not None:
            self.cabin_level = m.get('cabin_level')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_ad_code') is not None:
            self.dep_city_ad_code = m.get('dep_city_ad_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_mile') is not None:
            self.flight_mile = m.get('flight_mile')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        return self


class FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        arr_airport: str = None,
        arr_airport_code: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        company_refund_ticket_fee: float = None,
        dep_airport: str = None,
        dep_airport_code: str = None,
        dep_city: str = None,
        dep_city_code: str = None,
        flight_no: str = None,
        gmt_create: str = None,
        gmt_modify: str = None,
        out_apply_id: str = None,
        personal_refund_ticket_fee: float = None,
        refund_order_id: int = None,
        refund_reason: str = None,
        refund_ticket_fee: float = None,
        refund_type: int = None,
        ticket_no: str = None,
    ):
        self.apply_id = apply_id
        self.arr_airport = arr_airport
        self.arr_airport_code = arr_airport_code
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.company_refund_ticket_fee = company_refund_ticket_fee
        self.dep_airport = dep_airport
        self.dep_airport_code = dep_airport_code
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        self.flight_no = flight_no
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.out_apply_id = out_apply_id
        self.personal_refund_ticket_fee = personal_refund_ticket_fee
        self.refund_order_id = refund_order_id
        self.refund_reason = refund_reason
        self.refund_ticket_fee = refund_ticket_fee
        self.refund_type = refund_type
        self.ticket_no = ticket_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_airport is not None:
            result['arr_airport'] = self.arr_airport
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.company_refund_ticket_fee is not None:
            result['company_refund_ticket_fee'] = self.company_refund_ticket_fee
        if self.dep_airport is not None:
            result['dep_airport'] = self.dep_airport
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.out_apply_id is not None:
            result['out_apply_id'] = self.out_apply_id
        if self.personal_refund_ticket_fee is not None:
            result['personal_refund_ticket_fee'] = self.personal_refund_ticket_fee
        if self.refund_order_id is not None:
            result['refund_order_id'] = self.refund_order_id
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.refund_ticket_fee is not None:
            result['refund_ticket_fee'] = self.refund_ticket_fee
        if self.refund_type is not None:
            result['refund_type'] = self.refund_type
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_airport') is not None:
            self.arr_airport = m.get('arr_airport')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('company_refund_ticket_fee') is not None:
            self.company_refund_ticket_fee = m.get('company_refund_ticket_fee')
        if m.get('dep_airport') is not None:
            self.dep_airport = m.get('dep_airport')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('out_apply_id') is not None:
            self.out_apply_id = m.get('out_apply_id')
        if m.get('personal_refund_ticket_fee') is not None:
            self.personal_refund_ticket_fee = m.get('personal_refund_ticket_fee')
        if m.get('refund_order_id') is not None:
            self.refund_order_id = m.get('refund_order_id')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('refund_ticket_fee') is not None:
            self.refund_ticket_fee = m.get('refund_ticket_fee')
        if m.get('refund_type') is not None:
            self.refund_type = m.get('refund_type')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        return self


class FlightOrderQueryResponseBodyModuleFlightTicketInfoList(TeaModel):
    def __init__(
        self,
        arr_airport: str = None,
        arr_airport_code: str = None,
        build_price: float = None,
        changed: bool = None,
        dep_airport: str = None,
        dep_airport_code: str = None,
        discount: int = None,
        flight_no: str = None,
        gmt_create: str = None,
        gmt_modify: str = None,
        oil_price: float = None,
        pay_type: int = None,
        personal_price: float = None,
        settle_price: float = None,
        ticket_no: str = None,
        ticket_price: float = None,
        ticket_status: str = None,
        ticket_status_code: int = None,
        user_id: str = None,
    ):
        self.arr_airport = arr_airport
        self.arr_airport_code = arr_airport_code
        self.build_price = build_price
        self.changed = changed
        self.dep_airport = dep_airport
        self.dep_airport_code = dep_airport_code
        self.discount = discount
        self.flight_no = flight_no
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.oil_price = oil_price
        self.pay_type = pay_type
        self.personal_price = personal_price
        self.settle_price = settle_price
        self.ticket_no = ticket_no
        self.ticket_price = ticket_price
        self.ticket_status = ticket_status
        self.ticket_status_code = ticket_status_code
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport is not None:
            result['arr_airport'] = self.arr_airport
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.changed is not None:
            result['changed'] = self.changed
        if self.dep_airport is not None:
            result['dep_airport'] = self.dep_airport
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.personal_price is not None:
            result['personal_price'] = self.personal_price
        if self.settle_price is not None:
            result['settle_price'] = self.settle_price
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        if self.ticket_status_code is not None:
            result['ticket_status_code'] = self.ticket_status_code
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport') is not None:
            self.arr_airport = m.get('arr_airport')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('changed') is not None:
            self.changed = m.get('changed')
        if m.get('dep_airport') is not None:
            self.dep_airport = m.get('dep_airport')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('personal_price') is not None:
            self.personal_price = m.get('personal_price')
        if m.get('settle_price') is not None:
            self.settle_price = m.get('settle_price')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        if m.get('ticket_status_code') is not None:
            self.ticket_status_code = m.get('ticket_status_code')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderQueryResponseBodyModuleInsuranceInfoList(TeaModel):
    def __init__(
        self,
        amount: float = None,
        insurance_no: str = None,
        status: int = None,
        type: str = None,
    ):
        self.amount = amount
        self.insurance_no = insurance_no
        self.status = status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.insurance_no is not None:
            result['insurance_no'] = self.insurance_no
        if self.status is not None:
            result['status'] = self.status
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('insurance_no') is not None:
            self.insurance_no = m.get('insurance_no')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOrderQueryResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(
        self,
        id: int = None,
        title: str = None,
    ):
        self.id = id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOrderQueryResponseBodyModuleOrderBaseInfo(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        btrip_title: str = None,
        contact_name: str = None,
        corp_id: str = None,
        corp_name: str = None,
        depart_id: str = None,
        depart_name: str = None,
        exceed_apply_id: str = None,
        exceed_third_part_apply_id: str = None,
        gmt_create: str = None,
        gmt_modify: str = None,
        itinerary_id: str = None,
        order_id: int = None,
        order_status: int = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
        thirdpart_corp_id: str = None,
        thirdpart_itinerary_id: str = None,
        trip_type: int = None,
        user_id: str = None,
    ):
        self.apply_id = apply_id
        self.btrip_title = btrip_title
        self.contact_name = contact_name
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.exceed_apply_id = exceed_apply_id
        self.exceed_third_part_apply_id = exceed_third_part_apply_id
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.itinerary_id = itinerary_id
        self.order_id = order_id
        self.order_status = order_status
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_corp_id = thirdpart_corp_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.trip_type = trip_type
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.exceed_apply_id is not None:
            result['exceed_apply_id'] = self.exceed_apply_id
        if self.exceed_third_part_apply_id is not None:
            result['exceed_third_part_apply_id'] = self.exceed_third_part_apply_id
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('exceed_apply_id') is not None:
            self.exceed_apply_id = m.get('exceed_apply_id')
        if m.get('exceed_third_part_apply_id') is not None:
            self.exceed_third_part_apply_id = m.get('exceed_third_part_apply_id')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightOrderQueryResponseBodyModulePassengerInfoList(TeaModel):
    def __init__(
        self,
        cost_center_id: int = None,
        cost_center_name: str = None,
        cost_center_number: str = None,
        project_code: str = None,
        project_id: int = None,
        project_title: str = None,
        thirdpart_project_id: str = None,
        user_id: str = None,
        user_name: str = None,
        user_type: int = None,
    ):
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.cost_center_number = cost_center_number
        self.project_code = project_code
        self.project_id = project_id
        self.project_title = project_title
        self.thirdpart_project_id = thirdpart_project_id
        self.user_id = user_id
        self.user_name = user_name
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class FlightOrderQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(
        self,
        category_code: int = None,
        gmt_create: str = None,
        passenger_name: str = None,
        pay_type: int = None,
        price: float = None,
        trade_id: str = None,
        type: int = None,
    ):
        self.category_code = category_code
        self.gmt_create = gmt_create
        self.passenger_name = passenger_name
        self.pay_type = pay_type
        self.price = price
        self.trade_id = trade_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOrderQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_change_ticket_info_list: List[FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList] = None,
        flight_info_list: List[FlightOrderQueryResponseBodyModuleFlightInfoList] = None,
        flight_refund_ticket_info_list: List[FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList] = None,
        flight_ticket_info_list: List[FlightOrderQueryResponseBodyModuleFlightTicketInfoList] = None,
        insurance_info_list: List[FlightOrderQueryResponseBodyModuleInsuranceInfoList] = None,
        invoice_info: FlightOrderQueryResponseBodyModuleInvoiceInfo = None,
        order_base_info: FlightOrderQueryResponseBodyModuleOrderBaseInfo = None,
        passenger_info_list: List[FlightOrderQueryResponseBodyModulePassengerInfoList] = None,
        price_info_list: List[FlightOrderQueryResponseBodyModulePriceInfoList] = None,
    ):
        self.flight_change_ticket_info_list = flight_change_ticket_info_list
        self.flight_info_list = flight_info_list
        self.flight_refund_ticket_info_list = flight_refund_ticket_info_list
        self.flight_ticket_info_list = flight_ticket_info_list
        self.insurance_info_list = insurance_info_list
        self.invoice_info = invoice_info
        self.order_base_info = order_base_info
        self.passenger_info_list = passenger_info_list
        self.price_info_list = price_info_list

    def validate(self):
        if self.flight_change_ticket_info_list:
            for k in self.flight_change_ticket_info_list:
                if k:
                    k.validate()
        if self.flight_info_list:
            for k in self.flight_info_list:
                if k:
                    k.validate()
        if self.flight_refund_ticket_info_list:
            for k in self.flight_refund_ticket_info_list:
                if k:
                    k.validate()
        if self.flight_ticket_info_list:
            for k in self.flight_ticket_info_list:
                if k:
                    k.validate()
        if self.insurance_info_list:
            for k in self.insurance_info_list:
                if k:
                    k.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.order_base_info:
            self.order_base_info.validate()
        if self.passenger_info_list:
            for k in self.passenger_info_list:
                if k:
                    k.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_change_ticket_info_list'] = []
        if self.flight_change_ticket_info_list is not None:
            for k in self.flight_change_ticket_info_list:
                result['flight_change_ticket_info_list'].append(k.to_map() if k else None)
        result['flight_info_list'] = []
        if self.flight_info_list is not None:
            for k in self.flight_info_list:
                result['flight_info_list'].append(k.to_map() if k else None)
        result['flight_refund_ticket_info_list'] = []
        if self.flight_refund_ticket_info_list is not None:
            for k in self.flight_refund_ticket_info_list:
                result['flight_refund_ticket_info_list'].append(k.to_map() if k else None)
        result['flight_ticket_info_list'] = []
        if self.flight_ticket_info_list is not None:
            for k in self.flight_ticket_info_list:
                result['flight_ticket_info_list'].append(k.to_map() if k else None)
        result['insurance_info_list'] = []
        if self.insurance_info_list is not None:
            for k in self.insurance_info_list:
                result['insurance_info_list'].append(k.to_map() if k else None)
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.order_base_info is not None:
            result['order_base_info'] = self.order_base_info.to_map()
        result['passenger_info_list'] = []
        if self.passenger_info_list is not None:
            for k in self.passenger_info_list:
                result['passenger_info_list'].append(k.to_map() if k else None)
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_change_ticket_info_list = []
        if m.get('flight_change_ticket_info_list') is not None:
            for k in m.get('flight_change_ticket_info_list'):
                temp_model = FlightOrderQueryResponseBodyModuleFlightChangeTicketInfoList()
                self.flight_change_ticket_info_list.append(temp_model.from_map(k))
        self.flight_info_list = []
        if m.get('flight_info_list') is not None:
            for k in m.get('flight_info_list'):
                temp_model = FlightOrderQueryResponseBodyModuleFlightInfoList()
                self.flight_info_list.append(temp_model.from_map(k))
        self.flight_refund_ticket_info_list = []
        if m.get('flight_refund_ticket_info_list') is not None:
            for k in m.get('flight_refund_ticket_info_list'):
                temp_model = FlightOrderQueryResponseBodyModuleFlightRefundTicketInfoList()
                self.flight_refund_ticket_info_list.append(temp_model.from_map(k))
        self.flight_ticket_info_list = []
        if m.get('flight_ticket_info_list') is not None:
            for k in m.get('flight_ticket_info_list'):
                temp_model = FlightOrderQueryResponseBodyModuleFlightTicketInfoList()
                self.flight_ticket_info_list.append(temp_model.from_map(k))
        self.insurance_info_list = []
        if m.get('insurance_info_list') is not None:
            for k in m.get('insurance_info_list'):
                temp_model = FlightOrderQueryResponseBodyModuleInsuranceInfoList()
                self.insurance_info_list.append(temp_model.from_map(k))
        if m.get('invoice_info') is not None:
            temp_model = FlightOrderQueryResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('order_base_info') is not None:
            temp_model = FlightOrderQueryResponseBodyModuleOrderBaseInfo()
            self.order_base_info = temp_model.from_map(m['order_base_info'])
        self.passenger_info_list = []
        if m.get('passenger_info_list') is not None:
            for k in m.get('passenger_info_list'):
                temp_model = FlightOrderQueryResponseBodyModulePassengerInfoList()
                self.passenger_info_list.append(temp_model.from_map(k))
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = FlightOrderQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        return self


class FlightOrderQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightOrderQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOrderQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOrderQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightOrderQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOrderQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOtaItemDetailHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightOtaItemDetailRequest(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        ota_item_id: str = None,
    ):
        # This parameter is required.
        self.isv_name = isv_name
        # This parameter is required.
        self.ota_item_id = ota_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(
        self,
        desc: str = None,
        icon: str = None,
        image: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.icon = icon
        self.image = image
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(
        self,
        image: str = None,
        largest: str = None,
        middle: str = None,
        smallest: str = None,
    ):
        self.image = image
        self.largest = largest
        self.middle = middle
        self.smallest = smallest

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(
        self,
        baggage_desc: List[str] = None,
        baggage_sub_content_type: int = None,
        description: FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesDescription = None,
        image_do: FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesImageDO = None,
        is_highlight: bool = None,
        sub_title: str = None,
    ):
        # baggage_desc
        self.baggage_desc = baggage_desc
        self.baggage_sub_content_type = baggage_sub_content_type
        self.description = description
        self.image_do = image_do
        self.is_highlight = is_highlight
        self.sub_title = sub_title

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItems(TeaModel):
    def __init__(
        self,
        baggage_sub_content_visualizes: List[FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizes] = None,
        extra_content_visualizes: List[Any] = None,
        is_struct: bool = None,
        ptc: str = None,
        title: str = None,
    ):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes
        self.extra_content_visualizes = extra_content_visualizes
        self.is_struct = is_struct
        self.ptc = ptc
        self.title = title

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRuleTips(TeaModel):
    def __init__(
        self,
        logo: str = None,
        tips_desc: str = None,
        tips_image: str = None,
    ):
        self.logo = logo
        self.tips_desc = tips_desc
        self.tips_image = tips_image

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightOtaItemDetailResponseBodyModuleBaggageRule(TeaModel):
    def __init__(
        self,
        baggage_sub_items: List[FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItems] = None,
        index: int = None,
        table_head: str = None,
        tips: FlightOtaItemDetailResponseBodyModuleBaggageRuleTips = None,
        title: str = None,
        type: int = None,
    ):
        self.baggage_sub_items = baggage_sub_items
        self.index = index
        self.table_head = table_head
        self.tips = tips
        self.title = title
        self.type = type

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRuleBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRuleTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaItemDetailResponseBodyModuleChangeRuleExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleChangeRule(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightOtaItemDetailResponseBodyModuleChangeRuleExtraContents] = None,
        flight_no: str = None,
        free_baggage: int = None,
        index: int = None,
        level: int = None,
        refund_sub_items: List[FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.flight_no = flight_no
        self.free_baggage = free_baggage
        self.index = index
        self.level = level
        self.refund_sub_items = refund_sub_items
        # subTableHead
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.free_baggage is not None:
            result['free_baggage'] = self.free_baggage
        if self.index is not None:
            result['index'] = self.index
        if self.level is not None:
            result['level'] = self.level
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaItemDetailResponseBodyModuleChangeRuleExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('free_baggage') is not None:
            self.free_baggage = m.get('free_baggage')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('level') is not None:
            self.level = m.get('level')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaItemDetailResponseBodyModuleChangeRuleRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaItemDetailResponseBodyModuleRefundRuleExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaItemDetailResponseBodyModuleRefundRule(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightOtaItemDetailResponseBodyModuleRefundRuleExtraContents] = None,
        flight_no: str = None,
        free_baggage: int = None,
        index: int = None,
        level: int = None,
        refund_sub_items: List[FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.flight_no = flight_no
        self.free_baggage = free_baggage
        self.index = index
        self.level = level
        self.refund_sub_items = refund_sub_items
        # subTableHead
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.free_baggage is not None:
            result['free_baggage'] = self.free_baggage
        if self.index is not None:
            result['index'] = self.index
        if self.level is not None:
            result['level'] = self.level
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaItemDetailResponseBodyModuleRefundRuleExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('free_baggage') is not None:
            self.free_baggage = m.get('free_baggage')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('level') is not None:
            self.level = m.get('level')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaItemDetailResponseBodyModuleRefundRuleRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaItemDetailResponseBodyModule(TeaModel):
    def __init__(
        self,
        baggage_rule: List[FlightOtaItemDetailResponseBodyModuleBaggageRule] = None,
        change_rule: List[FlightOtaItemDetailResponseBodyModuleChangeRule] = None,
        refund_rule: List[FlightOtaItemDetailResponseBodyModuleRefundRule] = None,
        sell_price: int = None,
        sell_price_list: List[int] = None,
        trip_type: int = None,
    ):
        self.baggage_rule = baggage_rule
        self.change_rule = change_rule
        self.refund_rule = refund_rule
        self.sell_price = sell_price
        self.sell_price_list = sell_price_list
        self.trip_type = trip_type

    def validate(self):
        if self.baggage_rule:
            for k in self.baggage_rule:
                if k:
                    k.validate()
        if self.change_rule:
            for k in self.change_rule:
                if k:
                    k.validate()
        if self.refund_rule:
            for k in self.refund_rule:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_rule'] = []
        if self.baggage_rule is not None:
            for k in self.baggage_rule:
                result['baggage_rule'].append(k.to_map() if k else None)
        result['change_rule'] = []
        if self.change_rule is not None:
            for k in self.change_rule:
                result['change_rule'].append(k.to_map() if k else None)
        result['refund_rule'] = []
        if self.refund_rule is not None:
            for k in self.refund_rule:
                result['refund_rule'].append(k.to_map() if k else None)
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.sell_price_list is not None:
            result['sell_price_list'] = self.sell_price_list
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_rule = []
        if m.get('baggage_rule') is not None:
            for k in m.get('baggage_rule'):
                temp_model = FlightOtaItemDetailResponseBodyModuleBaggageRule()
                self.baggage_rule.append(temp_model.from_map(k))
        self.change_rule = []
        if m.get('change_rule') is not None:
            for k in m.get('change_rule'):
                temp_model = FlightOtaItemDetailResponseBodyModuleChangeRule()
                self.change_rule.append(temp_model.from_map(k))
        self.refund_rule = []
        if m.get('refund_rule') is not None:
            for k in m.get('refund_rule'):
                temp_model = FlightOtaItemDetailResponseBodyModuleRefundRule()
                self.refund_rule.append(temp_model.from_map(k))
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('sell_price_list') is not None:
            self.sell_price_list = m.get('sell_price_list')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightOtaItemDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightOtaItemDetailResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOtaItemDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOtaItemDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightOtaItemDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOtaItemDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOtaSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightOtaSearchRequest(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        arr_city_code: str = None,
        cabin_class: str = None,
        carrier_flight_no: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        flight_no: str = None,
    ):
        self.airline_code = airline_code
        # This parameter is required.
        self.arr_city_code = arr_city_code
        self.cabin_class = cabin_class
        self.carrier_flight_no = carrier_flight_no
        # This parameter is required.
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.flight_no = flight_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.carrier_flight_no is not None:
            result['carrier_flight_no'] = self.carrier_flight_no
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('carrier_flight_no') is not None:
            self.carrier_flight_no = m.get('carrier_flight_no')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        return self


class FlightOtaSearchResponseBodyModuleFlightListAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        airline_simple_name: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.airline_simple_name = airline_simple_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(
        self,
        desc: str = None,
        icon: str = None,
        image: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.icon = icon
        self.image = image
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(
        self,
        image: str = None,
        largest: str = None,
        middle: str = None,
        smallest: str = None,
    ):
        self.image = image
        self.largest = largest
        self.middle = middle
        self.smallest = smallest

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(
        self,
        baggage_desc: List[str] = None,
        baggage_sub_content_type: int = None,
        description: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription = None,
        image_do: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO = None,
        is_highlight: bool = None,
        sub_title: str = None,
    ):
        self.baggage_desc = baggage_desc
        self.baggage_sub_content_type = baggage_sub_content_type
        self.description = description
        self.image_do = image_do
        self.is_highlight = is_highlight
        self.sub_title = sub_title

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(
        self,
        baggage_sub_content_visualizes: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes] = None,
        extra_content_visualizes: List[Any] = None,
        is_struct: bool = None,
        ptc: str = None,
        title: str = None,
    ):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes
        self.extra_content_visualizes = extra_content_visualizes
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.title = title

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips(TeaModel):
    def __init__(
        self,
        logo: str = None,
        tips_desc: str = None,
        tips_image: str = None,
    ):
        self.logo = logo
        self.tips_desc = tips_desc
        self.tips_image = tips_image

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem(TeaModel):
    def __init__(
        self,
        baggage_sub_items: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems] = None,
        index: int = None,
        table_head: str = None,
        tips: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips = None,
        title: str = None,
        type: int = None,
    ):
        self.baggage_sub_items = baggage_sub_items
        self.index = index
        self.table_head = table_head
        self.tips = tips
        self.title = title
        self.type = type

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList(TeaModel):
    def __init__(
        self,
        baggage_info: str = None,
        baggage_item: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem = None,
        change_rule: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule = None,
        change_rule_item: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem = None,
        extra: str = None,
        refund_rule: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule = None,
        refund_rule_item: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem = None,
        sign_rule: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule = None,
        tuigaiqian_info: str = None,
        upgrade_rule: FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule = None,
    ):
        self.baggage_info = baggage_info
        self.baggage_item = baggage_item
        self.change_rule = change_rule
        self.change_rule_item = change_rule_item
        self.extra = extra
        self.refund_rule = refund_rule
        self.refund_rule_item = refund_rule_item
        self.sign_rule = sign_rule
        self.tuigaiqian_info = tuigaiqian_info
        self.upgrade_rule = upgrade_rule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightOtaSearchResponseBodyModuleFlightListCabinInfoList(TeaModel):
    def __init__(
        self,
        agent_id: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        child_cabin: str = None,
        class_name: str = None,
        class_rule: str = None,
        discount: str = None,
        flight_rule_list: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList] = None,
        flight_rule_list_str: str = None,
        invoice_type: int = None,
        is_protocol: bool = None,
        oil_price: int = None,
        order_params: str = None,
        ota_item_id: str = None,
        price: int = None,
        product_type: int = None,
        product_type_desc: str = None,
        promotion_price: str = None,
        remained_seat_count: str = None,
        ticket_price: int = None,
        total_price: int = None,
    ):
        self.agent_id = agent_id
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.child_cabin = child_cabin
        self.class_name = class_name
        self.class_rule = class_rule
        self.discount = discount
        self.flight_rule_list = flight_rule_list
        self.flight_rule_list_str = flight_rule_list_str
        self.invoice_type = invoice_type
        self.is_protocol = is_protocol
        self.oil_price = oil_price
        self.order_params = order_params
        self.ota_item_id = ota_item_id
        self.price = price
        self.product_type = product_type
        self.product_type_desc = product_type_desc
        self.promotion_price = promotion_price
        self.remained_seat_count = remained_seat_count
        self.ticket_price = ticket_price
        self.total_price = total_price

    def validate(self):
        if self.flight_rule_list:
            for k in self.flight_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['agent_id'] = self.agent_id
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.child_cabin is not None:
            result['child_cabin'] = self.child_cabin
        if self.class_name is not None:
            result['class_name'] = self.class_name
        if self.class_rule is not None:
            result['class_rule'] = self.class_rule
        if self.discount is not None:
            result['discount'] = self.discount
        result['flight_rule_list'] = []
        if self.flight_rule_list is not None:
            for k in self.flight_rule_list:
                result['flight_rule_list'].append(k.to_map() if k else None)
        if self.flight_rule_list_str is not None:
            result['flight_rule_list_str'] = self.flight_rule_list_str
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.order_params is not None:
            result['order_params'] = self.order_params
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.product_type_desc is not None:
            result['product_type_desc'] = self.product_type_desc
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.remained_seat_count is not None:
            result['remained_seat_count'] = self.remained_seat_count
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('agent_id') is not None:
            self.agent_id = m.get('agent_id')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('child_cabin') is not None:
            self.child_cabin = m.get('child_cabin')
        if m.get('class_name') is not None:
            self.class_name = m.get('class_name')
        if m.get('class_rule') is not None:
            self.class_rule = m.get('class_rule')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        self.flight_rule_list = []
        if m.get('flight_rule_list') is not None:
            for k in m.get('flight_rule_list'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoListFlightRuleList()
                self.flight_rule_list.append(temp_model.from_map(k))
        if m.get('flight_rule_list_str') is not None:
            self.flight_rule_list_str = m.get('flight_rule_list_str')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('order_params') is not None:
            self.order_params = m.get('order_params')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('product_type_desc') is not None:
            self.product_type_desc = m.get('product_type_desc')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('remained_seat_count') is not None:
            self.remained_seat_count = m.get('remained_seat_count')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(
        self,
        desc: str = None,
        icon: str = None,
        image: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.icon = icon
        self.image = image
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(
        self,
        image: str = None,
        largest: str = None,
        middle: str = None,
        smallest: str = None,
    ):
        self.image = image
        self.largest = largest
        self.middle = middle
        self.smallest = smallest

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(
        self,
        baggage_desc: List[str] = None,
        baggage_sub_content_type: int = None,
        description: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription = None,
        image_do: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO = None,
        is_highlight: bool = None,
        sub_title: str = None,
    ):
        self.baggage_desc = baggage_desc
        self.baggage_sub_content_type = baggage_sub_content_type
        self.description = description
        self.image_do = image_do
        self.is_highlight = is_highlight
        self.sub_title = sub_title

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(
        self,
        baggage_sub_content_visualizes: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes] = None,
        extra_content_visualizes: List[Any] = None,
        is_struct: bool = None,
        ptc: str = None,
        title: str = None,
    ):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes
        self.extra_content_visualizes = extra_content_visualizes
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.title = title

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips(TeaModel):
    def __init__(
        self,
        logo: str = None,
        tips_desc: str = None,
        tips_image: str = None,
    ):
        self.logo = logo
        self.tips_desc = tips_desc
        self.tips_image = tips_image

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem(TeaModel):
    def __init__(
        self,
        baggage_sub_items: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems] = None,
        index: int = None,
        table_head: str = None,
        tips: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips = None,
        title: str = None,
        type: int = None,
    ):
        self.baggage_sub_items = baggage_sub_items
        self.index = index
        self.table_head = table_head
        self.tips = tips
        self.title = title
        self.type = type

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        # isStruct : true
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBodyModuleFlightListFlightRuleList(TeaModel):
    def __init__(
        self,
        baggage_info: str = None,
        baggage_item: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem = None,
        change_rule: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule = None,
        change_rule_item: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem = None,
        extra: str = None,
        refund_rule: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule = None,
        refund_rule_item: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem = None,
        sign_rule: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule = None,
        tuigaiqian_info: str = None,
        upgrade_rule: FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule = None,
    ):
        self.baggage_info = baggage_info
        self.baggage_item = baggage_item
        self.change_rule = change_rule
        self.change_rule_item = change_rule_item
        self.extra = extra
        self.refund_rule = refund_rule
        self.refund_rule_item = refund_rule_item
        self.sign_rule = sign_rule
        self.tuigaiqian_info = tuigaiqian_info
        self.upgrade_rule = upgrade_rule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightOtaSearchResponseBodyModuleFlightList(TeaModel):
    def __init__(
        self,
        airline_info: FlightOtaSearchResponseBodyModuleFlightListAirlineInfo = None,
        arr_airport_info: FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo = None,
        arr_date: str = None,
        build_price: int = None,
        cabin: str = None,
        cabin_class: str = None,
        cabin_info_list: List[FlightOtaSearchResponseBodyModuleFlightListCabinInfoList] = None,
        carrier_airline: str = None,
        carrier_no: str = None,
        dep_airport_info: FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo = None,
        dep_city_code: str = None,
        dep_date: str = None,
        discount: int = None,
        flight_no: str = None,
        flight_rule_list: List[FlightOtaSearchResponseBodyModuleFlightListFlightRuleList] = None,
        flight_rule_list_str: str = None,
        flight_size: str = None,
        flight_type: str = None,
        invoice_type: int = None,
        is_protocol: bool = None,
        is_share: bool = None,
        is_stop: bool = None,
        is_transfer: bool = None,
        meal_desc: str = None,
        oil_price: int = None,
        ota_item_id: str = None,
        price: int = None,
        product_type: int = None,
        product_type_desc: str = None,
        promotion_price: str = None,
        remained_seat_count: str = None,
        secret_params: str = None,
        segment_number: str = None,
        stop_arr_time: str = None,
        stop_city: str = None,
        stop_dep_time: str = None,
        ticket_price: int = None,
        total_price: str = None,
        trip_type: int = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.arr_date = arr_date
        self.build_price = build_price
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_info_list = cabin_info_list
        self.carrier_airline = carrier_airline
        self.carrier_no = carrier_no
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.dep_date = dep_date
        self.discount = discount
        self.flight_no = flight_no
        self.flight_rule_list = flight_rule_list
        self.flight_rule_list_str = flight_rule_list_str
        self.flight_size = flight_size
        self.flight_type = flight_type
        self.invoice_type = invoice_type
        self.is_protocol = is_protocol
        self.is_share = is_share
        self.is_stop = is_stop
        self.is_transfer = is_transfer
        self.meal_desc = meal_desc
        self.oil_price = oil_price
        self.ota_item_id = ota_item_id
        self.price = price
        self.product_type = product_type
        self.product_type_desc = product_type_desc
        self.promotion_price = promotion_price
        self.remained_seat_count = remained_seat_count
        self.secret_params = secret_params
        self.segment_number = segment_number
        self.stop_arr_time = stop_arr_time
        self.stop_city = stop_city
        self.stop_dep_time = stop_dep_time
        self.ticket_price = ticket_price
        self.total_price = total_price
        self.trip_type = trip_type

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.cabin_info_list:
            for k in self.cabin_info_list:
                if k:
                    k.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_rule_list:
            for k in self.flight_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        result['cabin_info_list'] = []
        if self.cabin_info_list is not None:
            for k in self.cabin_info_list:
                result['cabin_info_list'].append(k.to_map() if k else None)
        if self.carrier_airline is not None:
            result['carrier_airline'] = self.carrier_airline
        if self.carrier_no is not None:
            result['carrier_no'] = self.carrier_no
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        result['flight_rule_list'] = []
        if self.flight_rule_list is not None:
            for k in self.flight_rule_list:
                result['flight_rule_list'].append(k.to_map() if k else None)
        if self.flight_rule_list_str is not None:
            result['flight_rule_list_str'] = self.flight_rule_list_str
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.is_share is not None:
            result['is_share'] = self.is_share
        if self.is_stop is not None:
            result['is_stop'] = self.is_stop
        if self.is_transfer is not None:
            result['is_transfer'] = self.is_transfer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.product_type_desc is not None:
            result['product_type_desc'] = self.product_type_desc
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.remained_seat_count is not None:
            result['remained_seat_count'] = self.remained_seat_count
        if self.secret_params is not None:
            result['secret_params'] = self.secret_params
        if self.segment_number is not None:
            result['segment_number'] = self.segment_number
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        self.cabin_info_list = []
        if m.get('cabin_info_list') is not None:
            for k in m.get('cabin_info_list'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListCabinInfoList()
                self.cabin_info_list.append(temp_model.from_map(k))
        if m.get('carrier_airline') is not None:
            self.carrier_airline = m.get('carrier_airline')
        if m.get('carrier_no') is not None:
            self.carrier_no = m.get('carrier_no')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightOtaSearchResponseBodyModuleFlightListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        self.flight_rule_list = []
        if m.get('flight_rule_list') is not None:
            for k in m.get('flight_rule_list'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightListFlightRuleList()
                self.flight_rule_list.append(temp_model.from_map(k))
        if m.get('flight_rule_list_str') is not None:
            self.flight_rule_list_str = m.get('flight_rule_list_str')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('is_share') is not None:
            self.is_share = m.get('is_share')
        if m.get('is_stop') is not None:
            self.is_stop = m.get('is_stop')
        if m.get('is_transfer') is not None:
            self.is_transfer = m.get('is_transfer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('product_type_desc') is not None:
            self.product_type_desc = m.get('product_type_desc')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('remained_seat_count') is not None:
            self.remained_seat_count = m.get('remained_seat_count')
        if m.get('secret_params') is not None:
            self.secret_params = m.get('secret_params')
        if m.get('segment_number') is not None:
            self.segment_number = m.get('segment_number')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightOtaSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_list: List[FlightOtaSearchResponseBodyModuleFlightList] = None,
    ):
        self.flight_list = flight_list

    def validate(self):
        if self.flight_list:
            for k in self.flight_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_list'] = []
        if self.flight_list is not None:
            for k in self.flight_list:
                result['flight_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_list = []
        if m.get('flight_list') is not None:
            for k in m.get('flight_list'):
                temp_model = FlightOtaSearchResponseBodyModuleFlightList()
                self.flight_list.append(temp_model.from_map(k))
        return self


class FlightOtaSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightOtaSearchResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOtaSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOtaSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightOtaSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOtaSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightOtaSearchV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightOtaSearchV2RequestSearchJourneysSelectedFlights(TeaModel):
    def __init__(
        self,
        arr_airport_code: str = None,
        arr_city_code: str = None,
        dep_airport_code: str = None,
        dep_city_code: str = None,
        flight_time: str = None,
        market_flight_no: str = None,
        operate_flight_no: str = None,
    ):
        self.arr_airport_code = arr_airport_code
        self.arr_city_code = arr_city_code
        self.dep_airport_code = dep_airport_code
        self.dep_city_code = dep_city_code
        self.flight_time = flight_time
        # This parameter is required.
        self.market_flight_no = market_flight_no
        self.operate_flight_no = operate_flight_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.flight_time is not None:
            result['flight_time'] = self.flight_time
        if self.market_flight_no is not None:
            result['market_flight_no'] = self.market_flight_no
        if self.operate_flight_no is not None:
            result['operate_flight_no'] = self.operate_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('flight_time') is not None:
            self.flight_time = m.get('flight_time')
        if m.get('market_flight_no') is not None:
            self.market_flight_no = m.get('market_flight_no')
        if m.get('operate_flight_no') is not None:
            self.operate_flight_no = m.get('operate_flight_no')
        return self


class FlightOtaSearchV2RequestSearchJourneys(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        selected_flights: List[FlightOtaSearchV2RequestSearchJourneysSelectedFlights] = None,
    ):
        # This parameter is required.
        self.arr_city_code = arr_city_code
        # This parameter is required.
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.selected_flights = selected_flights

    def validate(self):
        if self.selected_flights:
            for k in self.selected_flights:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        result['selected_flights'] = []
        if self.selected_flights is not None:
            for k in self.selected_flights:
                result['selected_flights'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        self.selected_flights = []
        if m.get('selected_flights') is not None:
            for k in m.get('selected_flights'):
                temp_model = FlightOtaSearchV2RequestSearchJourneysSelectedFlights()
                self.selected_flights.append(temp_model.from_map(k))
        return self


class FlightOtaSearchV2Request(TeaModel):
    def __init__(
        self,
        cabin_type_list: List[int] = None,
        direct_only: bool = None,
        isv_name: str = None,
        need_share_flight: bool = None,
        search_journeys: List[FlightOtaSearchV2RequestSearchJourneys] = None,
        search_mode: int = None,
        trip_type: int = None,
    ):
        self.cabin_type_list = cabin_type_list
        self.direct_only = direct_only
        # This parameter is required.
        self.isv_name = isv_name
        self.need_share_flight = need_share_flight
        # This parameter is required.
        self.search_journeys = search_journeys
        # This parameter is required.
        self.search_mode = search_mode
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        if self.search_journeys:
            for k in self.search_journeys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_type_list is not None:
            result['cabin_type_list'] = self.cabin_type_list
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        result['search_journeys'] = []
        if self.search_journeys is not None:
            for k in self.search_journeys:
                result['search_journeys'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin_type_list') is not None:
            self.cabin_type_list = m.get('cabin_type_list')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        self.search_journeys = []
        if m.get('search_journeys') is not None:
            for k in m.get('search_journeys'):
                temp_model = FlightOtaSearchV2RequestSearchJourneys()
                self.search_journeys.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightOtaSearchV2ShrinkRequest(TeaModel):
    def __init__(
        self,
        cabin_type_list_shrink: str = None,
        direct_only: bool = None,
        isv_name: str = None,
        need_share_flight: bool = None,
        search_journeys_shrink: str = None,
        search_mode: int = None,
        trip_type: int = None,
    ):
        self.cabin_type_list_shrink = cabin_type_list_shrink
        self.direct_only = direct_only
        # This parameter is required.
        self.isv_name = isv_name
        self.need_share_flight = need_share_flight
        # This parameter is required.
        self.search_journeys_shrink = search_journeys_shrink
        # This parameter is required.
        self.search_mode = search_mode
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin_type_list_shrink is not None:
            result['cabin_type_list'] = self.cabin_type_list_shrink
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        if self.search_journeys_shrink is not None:
            result['search_journeys'] = self.search_journeys_shrink
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin_type_list') is not None:
            self.cabin_type_list_shrink = m.get('cabin_type_list')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        if m.get('search_journeys') is not None:
            self.search_journeys_shrink = m.get('search_journeys')
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_name_color: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_name_color = airport_name_color
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_name_color is not None:
            result['airport_name_color'] = self.airport_name_color
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_name_color') is not None:
            self.airport_name_color = m.get('airport_name_color')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_name_color: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_name_color = airport_name_color
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_name_color is not None:
            result['airport_name_color'] = self.airport_name_color
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_name_color') is not None:
            self.airport_name_color = m.get('airport_name_color')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo(TeaModel):
    def __init__(
        self,
        operating_airline_info: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo = None,
        operating_flight_no: str = None,
    ):
        self.operating_airline_info = operating_airline_info
        self.operating_flight_no = operating_flight_no

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo(TeaModel):
    def __init__(
        self,
        stop_airport: str = None,
        stop_airport_name: str = None,
        stop_arr_term: str = None,
        stop_arr_time: str = None,
        stop_city_code: str = None,
        stop_city_name: str = None,
        stop_city_names: List[str] = None,
        stop_dep_term: str = None,
        stop_dep_time: str = None,
        stop_time: str = None,
    ):
        self.stop_airport = stop_airport
        self.stop_airport_name = stop_airport_name
        self.stop_arr_term = stop_arr_term
        self.stop_arr_time = stop_arr_time
        self.stop_city_code = stop_city_code
        self.stop_city_name = stop_city_name
        self.stop_city_names = stop_city_names
        self.stop_dep_term = stop_dep_term
        self.stop_dep_time = stop_dep_time
        self.stop_time = stop_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_airport_name is not None:
            result['stop_airport_name'] = self.stop_airport_name
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_city_names is not None:
            result['stop_city_names'] = self.stop_city_names
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_time is not None:
            result['stop_time'] = self.stop_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_airport_name') is not None:
            self.stop_airport_name = m.get('stop_airport_name')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_city_names') is not None:
            self.stop_city_names = m.get('stop_city_names')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_time') is not None:
            self.stop_time = m.get('stop_time')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfos(TeaModel):
    def __init__(
        self,
        airline_info: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo = None,
        arr_airport_info: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        baggage_desc: str = None,
        dep_airport_info: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        duration: int = None,
        extra_info: Dict[str, Any] = None,
        flight_no: str = None,
        flight_share_info: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo = None,
        flight_size: str = None,
        flight_stop_info: FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo = None,
        flight_type: str = None,
        manufacturer: str = None,
        meal_desc: str = None,
        miles: int = None,
        on_time_rate: str = None,
        one_more: int = None,
        one_more_show: str = None,
        segment_index: int = None,
        share: bool = None,
        short_flight_size: str = None,
        stop: bool = None,
        total_time: str = None,
        transfer_time: str = None,
        transfer_time_number: int = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.baggage_desc = baggage_desc
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        # duration
        self.duration = duration
        self.extra_info = extra_info
        self.flight_no = flight_no
        self.flight_share_info = flight_share_info
        self.flight_size = flight_size
        self.flight_stop_info = flight_stop_info
        self.flight_type = flight_type
        self.manufacturer = manufacturer
        self.meal_desc = meal_desc
        self.miles = miles
        self.on_time_rate = on_time_rate
        self.one_more = one_more
        self.one_more_show = one_more_show
        self.segment_index = segment_index
        self.share = share
        self.short_flight_size = short_flight_size
        self.stop = stop
        self.total_time = total_time
        self.transfer_time = transfer_time
        self.transfer_time_number = transfer_time_number

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.extra_info is not None:
            result['extra_info'] = self.extra_info
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.miles is not None:
            result['miles'] = self.miles
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        if self.one_more is not None:
            result['one_more'] = self.one_more
        if self.one_more_show is not None:
            result['one_more_show'] = self.one_more_show
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.stop is not None:
            result['stop'] = self.stop
        if self.total_time is not None:
            result['total_time'] = self.total_time
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        if self.transfer_time_number is not None:
            result['transfer_time_number'] = self.transfer_time_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('extra_info') is not None:
            self.extra_info = m.get('extra_info')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('miles') is not None:
            self.miles = m.get('miles')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        if m.get('one_more') is not None:
            self.one_more = m.get('one_more')
        if m.get('one_more_show') is not None:
            self.one_more_show = m.get('one_more_show')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('total_time') is not None:
            self.total_time = m.get('total_time')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        if m.get('transfer_time_number') is not None:
            self.transfer_time_number = m.get('transfer_time_number')
        return self


class FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfos(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        duration: int = None,
        extensions: Dict[str, str] = None,
        flight_segment_infos: List[FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfos] = None,
        journey_index: int = None,
        transfer_time: int = None,
    ):
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.duration = duration
        self.extensions = extensions
        self.flight_segment_infos = flight_segment_infos
        self.journey_index = journey_index
        self.transfer_time = transfer_time

    def validate(self):
        if self.flight_segment_infos:
            for k in self.flight_segment_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.extensions is not None:
            result['extensions'] = self.extensions
        result['flight_segment_infos'] = []
        if self.flight_segment_infos is not None:
            for k in self.flight_segment_infos:
                result['flight_segment_infos'].append(k.to_map() if k else None)
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('extensions') is not None:
            self.extensions = m.get('extensions')
        self.flight_segment_infos = []
        if m.get('flight_segment_infos') is not None:
            for k in m.get('flight_segment_infos'):
                temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfosFlightSegmentInfos()
                self.flight_segment_infos.append(temp_model.from_map(k))
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        return self


class FlightOtaSearchV2ResponseBodyModuleItemListSubItems(TeaModel):
    def __init__(
        self,
        shopping_item_map: Dict[str, ModuleItemListSubItemsShoppingItemMapValue] = None,
        tag: str = None,
        uniq_key: str = None,
    ):
        self.shopping_item_map = shopping_item_map
        self.tag = tag
        self.uniq_key = uniq_key

    def validate(self):
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        if self.tag is not None:
            result['tag'] = self.tag
        if self.uniq_key is not None:
            result['uniq_key'] = self.uniq_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleItemListSubItemsShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        if m.get('tag') is not None:
            self.tag = m.get('tag')
        if m.get('uniq_key') is not None:
            self.uniq_key = m.get('uniq_key')
        return self


class FlightOtaSearchV2ResponseBodyModuleItemList(TeaModel):
    def __init__(
        self,
        flight_rule_infos: Dict[str, ModuleItemListFlightRuleInfosValue] = None,
        item_id: str = None,
        shopping_item_map: Dict[str, ModuleItemListShoppingItemMapValue] = None,
        sub_item_position_map: Dict[str, List[ModuleItemListSubItemPositionMapValue]] = None,
        sub_items: List[FlightOtaSearchV2ResponseBodyModuleItemListSubItems] = None,
    ):
        self.flight_rule_infos = flight_rule_infos
        self.item_id = item_id
        self.shopping_item_map = shopping_item_map
        self.sub_item_position_map = sub_item_position_map
        self.sub_items = sub_items

    def validate(self):
        if self.flight_rule_infos:
            for v in self.flight_rule_infos.values():
                if v:
                    v.validate()
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()
        if self.sub_item_position_map:
            for v in self.sub_item_position_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.sub_items:
            for k in self.sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_rule_infos'] = {}
        if self.flight_rule_infos is not None:
            for k, v in self.flight_rule_infos.items():
                result['flight_rule_infos'][k] = v.to_map()
        if self.item_id is not None:
            result['item_id'] = self.item_id
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        result['sub_item_position_map'] = {}
        if self.sub_item_position_map is not None:
            for k, v in self.sub_item_position_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['sub_item_position_map'][k] = l1
        result['sub_items'] = []
        if self.sub_items is not None:
            for k in self.sub_items:
                result['sub_items'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_rule_infos = {}
        if m.get('flight_rule_infos') is not None:
            for k, v in m.get('flight_rule_infos').items():
                temp_model = ModuleItemListFlightRuleInfosValue()
                self.flight_rule_infos[k] = temp_model.from_map(v)
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleItemListShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        self.sub_item_position_map = {}
        if m.get('sub_item_position_map') is not None:
            for k, v in m.get('sub_item_position_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleItemListSubItemPositionMapValue()
                    l1.append(temp_model.from_map(k1))
                self.sub_item_position_map['k'] = l1
        self.sub_items = []
        if m.get('sub_items') is not None:
            for k in m.get('sub_items'):
                temp_model = FlightOtaSearchV2ResponseBodyModuleItemListSubItems()
                self.sub_items.append(temp_model.from_map(k))
        return self


class FlightOtaSearchV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_journey_infos: List[FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfos] = None,
        item_list: List[FlightOtaSearchV2ResponseBodyModuleItemList] = None,
        search_mode: int = None,
        trip_type: int = None,
    ):
        self.flight_journey_infos = flight_journey_infos
        self.item_list = item_list
        self.search_mode = search_mode
        self.trip_type = trip_type

    def validate(self):
        if self.flight_journey_infos:
            for k in self.flight_journey_infos:
                if k:
                    k.validate()
        if self.item_list:
            for k in self.item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_journey_infos'] = []
        if self.flight_journey_infos is not None:
            for k in self.flight_journey_infos:
                result['flight_journey_infos'].append(k.to_map() if k else None)
        result['item_list'] = []
        if self.item_list is not None:
            for k in self.item_list:
                result['item_list'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_journey_infos = []
        if m.get('flight_journey_infos') is not None:
            for k in m.get('flight_journey_infos'):
                temp_model = FlightOtaSearchV2ResponseBodyModuleFlightJourneyInfos()
                self.flight_journey_infos.append(temp_model.from_map(k))
        self.item_list = []
        if m.get('item_list') is not None:
            for k in m.get('item_list'):
                temp_model = FlightOtaSearchV2ResponseBodyModuleItemList()
                self.item_list.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightOtaSearchV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightOtaSearchV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightOtaSearchV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightOtaSearchV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightOtaSearchV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightOtaSearchV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightPayOrderHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightPayOrderRequest(TeaModel):
    def __init__(
        self,
        corp_pay_price: int = None,
        dis_order_id: str = None,
        extra: Dict[str, str] = None,
        personal_pay_price: int = None,
        total_pay_price: int = None,
    ):
        # This parameter is required.
        self.corp_pay_price = corp_pay_price
        # This parameter is required.
        self.dis_order_id = dis_order_id
        self.extra = extra
        # This parameter is required.
        self.personal_pay_price = personal_pay_price
        # This parameter is required.
        self.total_pay_price = total_pay_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        if self.personal_pay_price is not None:
            result['personal_pay_price'] = self.personal_pay_price
        if self.total_pay_price is not None:
            result['total_pay_price'] = self.total_pay_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('personal_pay_price') is not None:
            self.personal_pay_price = m.get('personal_pay_price')
        if m.get('total_pay_price') is not None:
            self.total_pay_price = m.get('total_pay_price')
        return self


class FlightPayOrderShrinkRequest(TeaModel):
    def __init__(
        self,
        corp_pay_price: int = None,
        dis_order_id: str = None,
        extra_shrink: str = None,
        personal_pay_price: int = None,
        total_pay_price: int = None,
    ):
        # This parameter is required.
        self.corp_pay_price = corp_pay_price
        # This parameter is required.
        self.dis_order_id = dis_order_id
        self.extra_shrink = extra_shrink
        # This parameter is required.
        self.personal_pay_price = personal_pay_price
        # This parameter is required.
        self.total_pay_price = total_pay_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.extra_shrink is not None:
            result['extra'] = self.extra_shrink
        if self.personal_pay_price is not None:
            result['personal_pay_price'] = self.personal_pay_price
        if self.total_pay_price is not None:
            result['total_pay_price'] = self.total_pay_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('extra') is not None:
            self.extra_shrink = m.get('extra')
        if m.get('personal_pay_price') is not None:
            self.personal_pay_price = m.get('personal_pay_price')
        if m.get('total_pay_price') is not None:
            self.total_pay_price = m.get('total_pay_price')
        return self


class FlightPayOrderResponseBodyModule(TeaModel):
    def __init__(
        self,
        actual_pay_price: int = None,
        alipay_trade_no: str = None,
        last_pay_time: str = None,
        pay_status: int = None,
    ):
        self.actual_pay_price = actual_pay_price
        self.alipay_trade_no = alipay_trade_no
        self.last_pay_time = last_pay_time
        self.pay_status = pay_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_pay_price is not None:
            result['actual_pay_price'] = self.actual_pay_price
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('actual_pay_price') is not None:
            self.actual_pay_price = m.get('actual_pay_price')
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        return self


class FlightPayOrderResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightPayOrderResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightPayOrderResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightPayOrderResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightPayOrderResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightPayOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightPayOrderV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightPayOrderV2Request(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
        total_price: int = None,
        total_service_fee_price: int = None,
    ):
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.total_price = total_price
        self.total_service_fee_price = total_service_fee_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.total_service_fee_price is not None:
            result['total_service_fee_price'] = self.total_service_fee_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('total_service_fee_price') is not None:
            self.total_service_fee_price = m.get('total_service_fee_price')
        return self


class FlightPayOrderV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        price: int = None,
    ):
        self.price = price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.price is not None:
            result['price'] = self.price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('price') is not None:
            self.price = m.get('price')
        return self


class FlightPayOrderV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightPayOrderV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightPayOrderV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightPayOrderV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightPayOrderV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightPayOrderV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundApplyHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundApplyRequestPassengerSegmentInfoList(TeaModel):
    def __init__(
        self,
        flight_no: str = None,
        passenger_name: str = None,
        user_id: str = None,
    ):
        self.flight_no = flight_no
        self.passenger_name = passenger_name
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightRefundApplyRequest(TeaModel):
    def __init__(
        self,
        corp_refund_price: int = None,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
        display_refund_money: str = None,
        extra: Dict[str, str] = None,
        is_voluntary: int = None,
        item_unit_ids: str = None,
        passenger_segment_info_list: List[FlightRefundApplyRequestPassengerSegmentInfoList] = None,
        personal_refund_price: int = None,
        reason_detail: str = None,
        reason_type: int = None,
        refund_voucher_info: List[str] = None,
        session_id: str = None,
        total_refund_price: int = None,
    ):
        self.corp_refund_price = corp_refund_price
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.dis_sub_order_id = dis_sub_order_id
        # This parameter is required.
        self.display_refund_money = display_refund_money
        self.extra = extra
        # This parameter is required.
        self.is_voluntary = is_voluntary
        # This parameter is required.
        self.item_unit_ids = item_unit_ids
        self.passenger_segment_info_list = passenger_segment_info_list
        self.personal_refund_price = personal_refund_price
        self.reason_detail = reason_detail
        # This parameter is required.
        self.reason_type = reason_type
        self.refund_voucher_info = refund_voucher_info
        # This parameter is required.
        self.session_id = session_id
        self.total_refund_price = total_refund_price

    def validate(self):
        if self.passenger_segment_info_list:
            for k in self.passenger_segment_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_refund_price is not None:
            result['corp_refund_price'] = self.corp_refund_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.display_refund_money is not None:
            result['display_refund_money'] = self.display_refund_money
        if self.extra is not None:
            result['extra'] = self.extra
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.item_unit_ids is not None:
            result['item_unit_ids'] = self.item_unit_ids
        result['passenger_segment_info_list'] = []
        if self.passenger_segment_info_list is not None:
            for k in self.passenger_segment_info_list:
                result['passenger_segment_info_list'].append(k.to_map() if k else None)
        if self.personal_refund_price is not None:
            result['personal_refund_price'] = self.personal_refund_price
        if self.reason_detail is not None:
            result['reason_detail'] = self.reason_detail
        if self.reason_type is not None:
            result['reason_type'] = self.reason_type
        if self.refund_voucher_info is not None:
            result['refund_voucher_info'] = self.refund_voucher_info
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.total_refund_price is not None:
            result['total_refund_price'] = self.total_refund_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_refund_price') is not None:
            self.corp_refund_price = m.get('corp_refund_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('display_refund_money') is not None:
            self.display_refund_money = m.get('display_refund_money')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('item_unit_ids') is not None:
            self.item_unit_ids = m.get('item_unit_ids')
        self.passenger_segment_info_list = []
        if m.get('passenger_segment_info_list') is not None:
            for k in m.get('passenger_segment_info_list'):
                temp_model = FlightRefundApplyRequestPassengerSegmentInfoList()
                self.passenger_segment_info_list.append(temp_model.from_map(k))
        if m.get('personal_refund_price') is not None:
            self.personal_refund_price = m.get('personal_refund_price')
        if m.get('reason_detail') is not None:
            self.reason_detail = m.get('reason_detail')
        if m.get('reason_type') is not None:
            self.reason_type = m.get('reason_type')
        if m.get('refund_voucher_info') is not None:
            self.refund_voucher_info = m.get('refund_voucher_info')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('total_refund_price') is not None:
            self.total_refund_price = m.get('total_refund_price')
        return self


class FlightRefundApplyShrinkRequest(TeaModel):
    def __init__(
        self,
        corp_refund_price: int = None,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
        display_refund_money: str = None,
        extra_shrink: str = None,
        is_voluntary: int = None,
        item_unit_ids: str = None,
        passenger_segment_info_list_shrink: str = None,
        personal_refund_price: int = None,
        reason_detail: str = None,
        reason_type: int = None,
        refund_voucher_info_shrink: str = None,
        session_id: str = None,
        total_refund_price: int = None,
    ):
        self.corp_refund_price = corp_refund_price
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.dis_sub_order_id = dis_sub_order_id
        # This parameter is required.
        self.display_refund_money = display_refund_money
        self.extra_shrink = extra_shrink
        # This parameter is required.
        self.is_voluntary = is_voluntary
        # This parameter is required.
        self.item_unit_ids = item_unit_ids
        self.passenger_segment_info_list_shrink = passenger_segment_info_list_shrink
        self.personal_refund_price = personal_refund_price
        self.reason_detail = reason_detail
        # This parameter is required.
        self.reason_type = reason_type
        self.refund_voucher_info_shrink = refund_voucher_info_shrink
        # This parameter is required.
        self.session_id = session_id
        self.total_refund_price = total_refund_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_refund_price is not None:
            result['corp_refund_price'] = self.corp_refund_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.display_refund_money is not None:
            result['display_refund_money'] = self.display_refund_money
        if self.extra_shrink is not None:
            result['extra'] = self.extra_shrink
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.item_unit_ids is not None:
            result['item_unit_ids'] = self.item_unit_ids
        if self.passenger_segment_info_list_shrink is not None:
            result['passenger_segment_info_list'] = self.passenger_segment_info_list_shrink
        if self.personal_refund_price is not None:
            result['personal_refund_price'] = self.personal_refund_price
        if self.reason_detail is not None:
            result['reason_detail'] = self.reason_detail
        if self.reason_type is not None:
            result['reason_type'] = self.reason_type
        if self.refund_voucher_info_shrink is not None:
            result['refund_voucher_info'] = self.refund_voucher_info_shrink
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.total_refund_price is not None:
            result['total_refund_price'] = self.total_refund_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_refund_price') is not None:
            self.corp_refund_price = m.get('corp_refund_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('display_refund_money') is not None:
            self.display_refund_money = m.get('display_refund_money')
        if m.get('extra') is not None:
            self.extra_shrink = m.get('extra')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('item_unit_ids') is not None:
            self.item_unit_ids = m.get('item_unit_ids')
        if m.get('passenger_segment_info_list') is not None:
            self.passenger_segment_info_list_shrink = m.get('passenger_segment_info_list')
        if m.get('personal_refund_price') is not None:
            self.personal_refund_price = m.get('personal_refund_price')
        if m.get('reason_detail') is not None:
            self.reason_detail = m.get('reason_detail')
        if m.get('reason_type') is not None:
            self.reason_type = m.get('reason_type')
        if m.get('refund_voucher_info') is not None:
            self.refund_voucher_info_shrink = m.get('refund_voucher_info')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('total_refund_price') is not None:
            self.total_refund_price = m.get('total_refund_price')
        return self


class FlightRefundApplyResponseBodyModule(TeaModel):
    def __init__(
        self,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
        refund_apply_id: int = None,
        refund_fee: int = None,
        refund_money: int = None,
    ):
        self.dis_order_id = dis_order_id
        self.dis_sub_order_id = dis_sub_order_id
        self.refund_apply_id = refund_apply_id
        self.refund_fee = refund_fee
        self.refund_money = refund_money

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.refund_apply_id is not None:
            result['refund_apply_id'] = self.refund_apply_id
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_money is not None:
            result['refund_money'] = self.refund_money
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('refund_apply_id') is not None:
            self.refund_apply_id = m.get('refund_apply_id')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_money') is not None:
            self.refund_money = m.get('refund_money')
        return self


class FlightRefundApplyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightRefundApplyResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundApplyResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundApplyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightRefundApplyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundApplyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundApplyV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundApplyV2RequestPassengerSegmentRelations(TeaModel):
    def __init__(
        self,
        passenger_id: str = None,
        segment_id_list: List[str] = None,
    ):
        self.passenger_id = passenger_id
        self.segment_id_list = segment_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.segment_id_list is not None:
            result['segment_id_list'] = self.segment_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('segment_id_list') is not None:
            self.segment_id_list = m.get('segment_id_list')
        return self


class FlightRefundApplyV2Request(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        passenger_segment_relations: List[FlightRefundApplyV2RequestPassengerSegmentRelations] = None,
        pre_cal_type: int = None,
        refund_reason: str = None,
        refund_reason_type: int = None,
        ticket_nos: List[str] = None,
        total_refund_price: int = None,
        upload_pict_urls: str = None,
        voluntary: bool = None,
    ):
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.passenger_segment_relations = passenger_segment_relations
        self.pre_cal_type = pre_cal_type
        self.refund_reason = refund_reason
        self.refund_reason_type = refund_reason_type
        self.ticket_nos = ticket_nos
        self.total_refund_price = total_refund_price
        self.upload_pict_urls = upload_pict_urls
        self.voluntary = voluntary

    def validate(self):
        if self.passenger_segment_relations:
            for k in self.passenger_segment_relations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        result['passenger_segment_relations'] = []
        if self.passenger_segment_relations is not None:
            for k in self.passenger_segment_relations:
                result['passenger_segment_relations'].append(k.to_map() if k else None)
        if self.pre_cal_type is not None:
            result['pre_cal_type'] = self.pre_cal_type
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.refund_reason_type is not None:
            result['refund_reason_type'] = self.refund_reason_type
        if self.ticket_nos is not None:
            result['ticket_nos'] = self.ticket_nos
        if self.total_refund_price is not None:
            result['total_refund_price'] = self.total_refund_price
        if self.upload_pict_urls is not None:
            result['upload_pict_urls'] = self.upload_pict_urls
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        self.passenger_segment_relations = []
        if m.get('passenger_segment_relations') is not None:
            for k in m.get('passenger_segment_relations'):
                temp_model = FlightRefundApplyV2RequestPassengerSegmentRelations()
                self.passenger_segment_relations.append(temp_model.from_map(k))
        if m.get('pre_cal_type') is not None:
            self.pre_cal_type = m.get('pre_cal_type')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('refund_reason_type') is not None:
            self.refund_reason_type = m.get('refund_reason_type')
        if m.get('ticket_nos') is not None:
            self.ticket_nos = m.get('ticket_nos')
        if m.get('total_refund_price') is not None:
            self.total_refund_price = m.get('total_refund_price')
        if m.get('upload_pict_urls') is not None:
            self.upload_pict_urls = m.get('upload_pict_urls')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightRefundApplyV2ShrinkRequest(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        passenger_segment_relations_shrink: str = None,
        pre_cal_type: int = None,
        refund_reason: str = None,
        refund_reason_type: int = None,
        ticket_nos_shrink: str = None,
        total_refund_price: int = None,
        upload_pict_urls: str = None,
        voluntary: bool = None,
    ):
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.passenger_segment_relations_shrink = passenger_segment_relations_shrink
        self.pre_cal_type = pre_cal_type
        self.refund_reason = refund_reason
        self.refund_reason_type = refund_reason_type
        self.ticket_nos_shrink = ticket_nos_shrink
        self.total_refund_price = total_refund_price
        self.upload_pict_urls = upload_pict_urls
        self.voluntary = voluntary

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.passenger_segment_relations_shrink is not None:
            result['passenger_segment_relations'] = self.passenger_segment_relations_shrink
        if self.pre_cal_type is not None:
            result['pre_cal_type'] = self.pre_cal_type
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.refund_reason_type is not None:
            result['refund_reason_type'] = self.refund_reason_type
        if self.ticket_nos_shrink is not None:
            result['ticket_nos'] = self.ticket_nos_shrink
        if self.total_refund_price is not None:
            result['total_refund_price'] = self.total_refund_price
        if self.upload_pict_urls is not None:
            result['upload_pict_urls'] = self.upload_pict_urls
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('passenger_segment_relations') is not None:
            self.passenger_segment_relations_shrink = m.get('passenger_segment_relations')
        if m.get('pre_cal_type') is not None:
            self.pre_cal_type = m.get('pre_cal_type')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('refund_reason_type') is not None:
            self.refund_reason_type = m.get('refund_reason_type')
        if m.get('ticket_nos') is not None:
            self.ticket_nos_shrink = m.get('ticket_nos')
        if m.get('total_refund_price') is not None:
            self.total_refund_price = m.get('total_refund_price')
        if m.get('upload_pict_urls') is not None:
            self.upload_pict_urls = m.get('upload_pict_urls')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightRefundApplyV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        sub_order_id: str = None,
    ):
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.sub_order_id = sub_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        return self


class FlightRefundApplyV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightRefundApplyV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundApplyV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundApplyV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightRefundApplyV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundApplyV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundDetailHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundDetailRequest(TeaModel):
    def __init__(
        self,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
    ):
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.dis_sub_order_id = dis_sub_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        return self


class FlightRefundDetailResponseBodyModuleRefundFeeList(TeaModel):
    def __init__(
        self,
        alipay_trade_no: str = None,
        refund_fee: int = None,
        refund_price: int = None,
        status: str = None,
    ):
        self.alipay_trade_no = alipay_trade_no
        self.refund_fee = refund_fee
        self.refund_price = refund_price
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class FlightRefundDetailResponseBodyModule(TeaModel):
    def __init__(
        self,
        btrip_order_id: int = None,
        btrip_sub_order_id: int = None,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
        is_voluntary: int = None,
        reason: str = None,
        refund_fee: int = None,
        refund_fee_list: List[FlightRefundDetailResponseBodyModuleRefundFeeList] = None,
        refund_price: int = None,
        status: str = None,
    ):
        self.btrip_order_id = btrip_order_id
        self.btrip_sub_order_id = btrip_sub_order_id
        self.dis_order_id = dis_order_id
        self.dis_sub_order_id = dis_sub_order_id
        self.is_voluntary = is_voluntary
        self.reason = reason
        self.refund_fee = refund_fee
        self.refund_fee_list = refund_fee_list
        self.refund_price = refund_price
        self.status = status

    def validate(self):
        if self.refund_fee_list:
            for k in self.refund_fee_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.btrip_sub_order_id is not None:
            result['btrip_sub_order_id'] = self.btrip_sub_order_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.reason is not None:
            result['reason'] = self.reason
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        result['refund_fee_list'] = []
        if self.refund_fee_list is not None:
            for k in self.refund_fee_list:
                result['refund_fee_list'].append(k.to_map() if k else None)
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('btrip_sub_order_id') is not None:
            self.btrip_sub_order_id = m.get('btrip_sub_order_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        self.refund_fee_list = []
        if m.get('refund_fee_list') is not None:
            for k in m.get('refund_fee_list'):
                temp_model = FlightRefundDetailResponseBodyModuleRefundFeeList()
                self.refund_fee_list.append(temp_model.from_map(k))
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class FlightRefundDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightRefundDetailResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightRefundDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundDetailV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundDetailV2Request(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
        out_refund_apply_id: str = None,
        refund_apply_id: str = None,
    ):
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_refund_apply_id = out_refund_apply_id
        self.refund_apply_id = refund_apply_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_refund_apply_id is not None:
            result['out_refund_apply_id'] = self.out_refund_apply_id
        if self.refund_apply_id is not None:
            result['refund_apply_id'] = self.refund_apply_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_refund_apply_id') is not None:
            self.out_refund_apply_id = m.get('out_refund_apply_id')
        if m.get('refund_apply_id') is not None:
            self.refund_apply_id = m.get('refund_apply_id')
        return self


class FlightRefundDetailV2ResponseBodyModuleContactInfoDTO(TeaModel):
    def __init__(
        self,
        contact_email: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        send_msg_to_passenger: bool = None,
    ):
        self.contact_email = contact_email
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.send_msg_to_passenger = send_msg_to_passenger

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.send_msg_to_passenger is not None:
            result['send_msg_to_passenger'] = self.send_msg_to_passenger
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('send_msg_to_passenger') is not None:
            self.send_msg_to_passenger = m.get('send_msg_to_passenger')
        return self


class FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOSSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOS(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_icon_url: str = None,
        airline_name: str = None,
        arr_airport_code: str = None,
        arr_airport_name: str = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_terminal: str = None,
        arr_time: str = None,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        cabin_discount: int = None,
        carrier_airline_code: str = None,
        carrier_airline_icon_url: str = None,
        carrier_airline_name: str = None,
        carrier_flight_no: str = None,
        dep_airport_code: str = None,
        dep_airport_name: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_terminal: str = None,
        dep_time: str = None,
        flight_no: str = None,
        flight_type: str = None,
        meal_desc: str = None,
        segment_id: str = None,
        segment_position: FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOSSegmentPosition = None,
        stop_arr_time: str = None,
        stop_city: str = None,
        stop_dep_time: str = None,
    ):
        self.airline_code = airline_code
        self.airline_icon_url = airline_icon_url
        self.airline_name = airline_name
        self.arr_airport_code = arr_airport_code
        self.arr_airport_name = arr_airport_name
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_terminal = arr_terminal
        self.arr_time = arr_time
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.cabin_discount = cabin_discount
        self.carrier_airline_code = carrier_airline_code
        self.carrier_airline_icon_url = carrier_airline_icon_url
        self.carrier_airline_name = carrier_airline_name
        self.carrier_flight_no = carrier_flight_no
        self.dep_airport_code = dep_airport_code
        self.dep_airport_name = dep_airport_name
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_terminal = dep_terminal
        self.dep_time = dep_time
        self.flight_no = flight_no
        self.flight_type = flight_type
        self.meal_desc = meal_desc
        self.segment_id = segment_id
        self.segment_position = segment_position
        self.stop_arr_time = stop_arr_time
        self.stop_city = stop_city
        self.stop_dep_time = stop_dep_time

    def validate(self):
        if self.segment_position:
            self.segment_position.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon_url is not None:
            result['airline_icon_url'] = self.airline_icon_url
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_terminal is not None:
            result['arr_terminal'] = self.arr_terminal
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.cabin_discount is not None:
            result['cabin_discount'] = self.cabin_discount
        if self.carrier_airline_code is not None:
            result['carrier_airline_code'] = self.carrier_airline_code
        if self.carrier_airline_icon_url is not None:
            result['carrier_airline_icon_url'] = self.carrier_airline_icon_url
        if self.carrier_airline_name is not None:
            result['carrier_airline_name'] = self.carrier_airline_name
        if self.carrier_flight_no is not None:
            result['carrier_flight_no'] = self.carrier_flight_no
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_terminal is not None:
            result['dep_terminal'] = self.dep_terminal
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.segment_id is not None:
            result['segment_id'] = self.segment_id
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon_url') is not None:
            self.airline_icon_url = m.get('airline_icon_url')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_terminal') is not None:
            self.arr_terminal = m.get('arr_terminal')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('cabin_discount') is not None:
            self.cabin_discount = m.get('cabin_discount')
        if m.get('carrier_airline_code') is not None:
            self.carrier_airline_code = m.get('carrier_airline_code')
        if m.get('carrier_airline_icon_url') is not None:
            self.carrier_airline_icon_url = m.get('carrier_airline_icon_url')
        if m.get('carrier_airline_name') is not None:
            self.carrier_airline_name = m.get('carrier_airline_name')
        if m.get('carrier_flight_no') is not None:
            self.carrier_flight_no = m.get('carrier_flight_no')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_terminal') is not None:
            self.dep_terminal = m.get('dep_terminal')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('segment_id') is not None:
            self.segment_id = m.get('segment_id')
        if m.get('segment_position') is not None:
            temp_model = FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOSSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class FlightRefundDetailV2ResponseBodyModuleTravelerInfoDTOS(TeaModel):
    def __init__(
        self,
        birth_date: str = None,
        cert_no: str = None,
        cert_type: int = None,
        gender: int = None,
        origin_ticket_nos: List[str] = None,
        passenger_id: str = None,
        passenger_name: str = None,
        passenger_type: int = None,
        phone: str = None,
        pid: int = None,
        ticket_nos: List[str] = None,
    ):
        self.birth_date = birth_date
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.gender = gender
        self.origin_ticket_nos = origin_ticket_nos
        self.passenger_id = passenger_id
        self.passenger_name = passenger_name
        self.passenger_type = passenger_type
        self.phone = phone
        self.pid = pid
        self.ticket_nos = ticket_nos

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.gender is not None:
            result['gender'] = self.gender
        if self.origin_ticket_nos is not None:
            result['origin_ticket_nos'] = self.origin_ticket_nos
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.pid is not None:
            result['pid'] = self.pid
        if self.ticket_nos is not None:
            result['ticket_nos'] = self.ticket_nos
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('origin_ticket_nos') is not None:
            self.origin_ticket_nos = m.get('origin_ticket_nos')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('pid') is not None:
            self.pid = m.get('pid')
        if m.get('ticket_nos') is not None:
            self.ticket_nos = m.get('ticket_nos')
        return self


class FlightRefundDetailV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_time: str = None,
        contact_info_dto: FlightRefundDetailV2ResponseBodyModuleContactInfoDTO = None,
        flight_info_dtos: List[FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOS] = None,
        order_id: int = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        reason: str = None,
        reason_code: str = None,
        refund_fail_reason: str = None,
        refund_handling_fee: int = None,
        refund_money: int = None,
        status: int = None,
        sub_order_id: int = None,
        traveler_info_dtos: List[FlightRefundDetailV2ResponseBodyModuleTravelerInfoDTOS] = None,
    ):
        self.apply_time = apply_time
        self.contact_info_dto = contact_info_dto
        self.flight_info_dtos = flight_info_dtos
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.reason = reason
        self.reason_code = reason_code
        self.refund_fail_reason = refund_fail_reason
        self.refund_handling_fee = refund_handling_fee
        self.refund_money = refund_money
        self.status = status
        self.sub_order_id = sub_order_id
        self.traveler_info_dtos = traveler_info_dtos

    def validate(self):
        if self.contact_info_dto:
            self.contact_info_dto.validate()
        if self.flight_info_dtos:
            for k in self.flight_info_dtos:
                if k:
                    k.validate()
        if self.traveler_info_dtos:
            for k in self.traveler_info_dtos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_time is not None:
            result['apply_time'] = self.apply_time
        if self.contact_info_dto is not None:
            result['contact_info_d_t_o'] = self.contact_info_dto.to_map()
        result['flight_info_d_t_o_s'] = []
        if self.flight_info_dtos is not None:
            for k in self.flight_info_dtos:
                result['flight_info_d_t_o_s'].append(k.to_map() if k else None)
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.reason is not None:
            result['reason'] = self.reason
        if self.reason_code is not None:
            result['reason_code'] = self.reason_code
        if self.refund_fail_reason is not None:
            result['refund_fail_reason'] = self.refund_fail_reason
        if self.refund_handling_fee is not None:
            result['refund_handling_fee'] = self.refund_handling_fee
        if self.refund_money is not None:
            result['refund_money'] = self.refund_money
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        result['traveler_info_d_t_o_s'] = []
        if self.traveler_info_dtos is not None:
            for k in self.traveler_info_dtos:
                result['traveler_info_d_t_o_s'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_time') is not None:
            self.apply_time = m.get('apply_time')
        if m.get('contact_info_d_t_o') is not None:
            temp_model = FlightRefundDetailV2ResponseBodyModuleContactInfoDTO()
            self.contact_info_dto = temp_model.from_map(m['contact_info_d_t_o'])
        self.flight_info_dtos = []
        if m.get('flight_info_d_t_o_s') is not None:
            for k in m.get('flight_info_d_t_o_s'):
                temp_model = FlightRefundDetailV2ResponseBodyModuleFlightInfoDTOS()
                self.flight_info_dtos.append(temp_model.from_map(k))
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('reason_code') is not None:
            self.reason_code = m.get('reason_code')
        if m.get('refund_fail_reason') is not None:
            self.refund_fail_reason = m.get('refund_fail_reason')
        if m.get('refund_handling_fee') is not None:
            self.refund_handling_fee = m.get('refund_handling_fee')
        if m.get('refund_money') is not None:
            self.refund_money = m.get('refund_money')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        self.traveler_info_dtos = []
        if m.get('traveler_info_d_t_o_s') is not None:
            for k in m.get('traveler_info_d_t_o_s'):
                temp_model = FlightRefundDetailV2ResponseBodyModuleTravelerInfoDTOS()
                self.traveler_info_dtos.append(temp_model.from_map(k))
        return self


class FlightRefundDetailV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightRefundDetailV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundDetailV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundDetailV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightRefundDetailV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundDetailV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundPreCalHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundPreCalRequestPassengerSegmentInfoList(TeaModel):
    def __init__(
        self,
        flight_no: str = None,
        passenger_name: str = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.flight_no = flight_no
        # This parameter is required.
        self.passenger_name = passenger_name
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightRefundPreCalRequest(TeaModel):
    def __init__(
        self,
        dis_order_id: str = None,
        is_voluntary: str = None,
        passenger_segment_info_list: List[FlightRefundPreCalRequestPassengerSegmentInfoList] = None,
    ):
        # This parameter is required.
        self.dis_order_id = dis_order_id
        self.is_voluntary = is_voluntary
        # This parameter is required.
        self.passenger_segment_info_list = passenger_segment_info_list

    def validate(self):
        if self.passenger_segment_info_list:
            for k in self.passenger_segment_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        result['passenger_segment_info_list'] = []
        if self.passenger_segment_info_list is not None:
            for k in self.passenger_segment_info_list:
                result['passenger_segment_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        self.passenger_segment_info_list = []
        if m.get('passenger_segment_info_list') is not None:
            for k in m.get('passenger_segment_info_list'):
                temp_model = FlightRefundPreCalRequestPassengerSegmentInfoList()
                self.passenger_segment_info_list.append(temp_model.from_map(k))
        return self


class FlightRefundPreCalShrinkRequest(TeaModel):
    def __init__(
        self,
        dis_order_id: str = None,
        is_voluntary: str = None,
        passenger_segment_info_list_shrink: str = None,
    ):
        # This parameter is required.
        self.dis_order_id = dis_order_id
        self.is_voluntary = is_voluntary
        # This parameter is required.
        self.passenger_segment_info_list_shrink = passenger_segment_info_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.passenger_segment_info_list_shrink is not None:
            result['passenger_segment_info_list'] = self.passenger_segment_info_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('passenger_segment_info_list') is not None:
            self.passenger_segment_info_list_shrink = m.get('passenger_segment_info_list')
        return self


class FlightRefundPreCalResponseBodyModuleMultiRefundCalList(TeaModel):
    def __init__(
        self,
        can_apply_refund: bool = None,
        name: str = None,
        pre_refund_money: int = None,
        refund_fee: int = None,
        user_id: str = None,
    ):
        self.can_apply_refund = can_apply_refund
        self.name = name
        self.pre_refund_money = pre_refund_money
        self.refund_fee = refund_fee
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.can_apply_refund is not None:
            result['can_apply_refund'] = self.can_apply_refund
        if self.name is not None:
            result['name'] = self.name
        if self.pre_refund_money is not None:
            result['pre_refund_money'] = self.pre_refund_money
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('can_apply_refund') is not None:
            self.can_apply_refund = m.get('can_apply_refund')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('pre_refund_money') is not None:
            self.pre_refund_money = m.get('pre_refund_money')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class FlightRefundPreCalResponseBodyModuleReturnReason(TeaModel):
    def __init__(
        self,
        extend_desc: str = None,
        person: int = None,
        reason_code: int = None,
        reason_show: str = None,
        reason_type: int = None,
        volunteer: int = None,
    ):
        self.extend_desc = extend_desc
        self.person = person
        self.reason_code = reason_code
        self.reason_show = reason_show
        self.reason_type = reason_type
        self.volunteer = volunteer

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extend_desc is not None:
            result['extend_desc'] = self.extend_desc
        if self.person is not None:
            result['person'] = self.person
        if self.reason_code is not None:
            result['reason_code'] = self.reason_code
        if self.reason_show is not None:
            result['reason_show'] = self.reason_show
        if self.reason_type is not None:
            result['reason_type'] = self.reason_type
        if self.volunteer is not None:
            result['volunteer'] = self.volunteer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('extend_desc') is not None:
            self.extend_desc = m.get('extend_desc')
        if m.get('person') is not None:
            self.person = m.get('person')
        if m.get('reason_code') is not None:
            self.reason_code = m.get('reason_code')
        if m.get('reason_show') is not None:
            self.reason_show = m.get('reason_show')
        if m.get('reason_type') is not None:
            self.reason_type = m.get('reason_type')
        if m.get('volunteer') is not None:
            self.volunteer = m.get('volunteer')
        return self


class FlightRefundPreCalResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_change: bool = None,
        item_unit_id: str = None,
        multi_refund_cal_list: List[FlightRefundPreCalResponseBodyModuleMultiRefundCalList] = None,
        pre_refund_money: int = None,
        refund_fee: int = None,
        return_reason: List[FlightRefundPreCalResponseBodyModuleReturnReason] = None,
        session_id: str = None,
        tips: str = None,
    ):
        self.flight_change = flight_change
        self.item_unit_id = item_unit_id
        self.multi_refund_cal_list = multi_refund_cal_list
        self.pre_refund_money = pre_refund_money
        self.refund_fee = refund_fee
        self.return_reason = return_reason
        self.session_id = session_id
        self.tips = tips

    def validate(self):
        if self.multi_refund_cal_list:
            for k in self.multi_refund_cal_list:
                if k:
                    k.validate()
        if self.return_reason:
            for k in self.return_reason:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flight_change is not None:
            result['flight_change'] = self.flight_change
        if self.item_unit_id is not None:
            result['item_unit_id'] = self.item_unit_id
        result['multi_refund_cal_list'] = []
        if self.multi_refund_cal_list is not None:
            for k in self.multi_refund_cal_list:
                result['multi_refund_cal_list'].append(k.to_map() if k else None)
        if self.pre_refund_money is not None:
            result['pre_refund_money'] = self.pre_refund_money
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        result['return_reason'] = []
        if self.return_reason is not None:
            for k in self.return_reason:
                result['return_reason'].append(k.to_map() if k else None)
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.tips is not None:
            result['tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('flight_change') is not None:
            self.flight_change = m.get('flight_change')
        if m.get('item_unit_id') is not None:
            self.item_unit_id = m.get('item_unit_id')
        self.multi_refund_cal_list = []
        if m.get('multi_refund_cal_list') is not None:
            for k in m.get('multi_refund_cal_list'):
                temp_model = FlightRefundPreCalResponseBodyModuleMultiRefundCalList()
                self.multi_refund_cal_list.append(temp_model.from_map(k))
        if m.get('pre_refund_money') is not None:
            self.pre_refund_money = m.get('pre_refund_money')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        self.return_reason = []
        if m.get('return_reason') is not None:
            for k in m.get('return_reason'):
                temp_model = FlightRefundPreCalResponseBodyModuleReturnReason()
                self.return_reason.append(temp_model.from_map(k))
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('tips') is not None:
            self.tips = m.get('tips')
        return self


class FlightRefundPreCalResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightRefundPreCalResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundPreCalResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundPreCalResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightRefundPreCalResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundPreCalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightRefundPreCalV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightRefundPreCalV2RequestPassengerSegmentRelations(TeaModel):
    def __init__(
        self,
        passenger_id: str = None,
        segment_id_list: List[str] = None,
    ):
        self.passenger_id = passenger_id
        self.segment_id_list = segment_id_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.segment_id_list is not None:
            result['segment_id_list'] = self.segment_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('segment_id_list') is not None:
            self.segment_id_list = m.get('segment_id_list')
        return self


class FlightRefundPreCalV2Request(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
        passenger_segment_relations: List[FlightRefundPreCalV2RequestPassengerSegmentRelations] = None,
        pre_cal_type: int = None,
        ticket_nos: List[str] = None,
        voluntary: bool = None,
    ):
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.passenger_segment_relations = passenger_segment_relations
        self.pre_cal_type = pre_cal_type
        self.ticket_nos = ticket_nos
        self.voluntary = voluntary

    def validate(self):
        if self.passenger_segment_relations:
            for k in self.passenger_segment_relations:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_segment_relations'] = []
        if self.passenger_segment_relations is not None:
            for k in self.passenger_segment_relations:
                result['passenger_segment_relations'].append(k.to_map() if k else None)
        if self.pre_cal_type is not None:
            result['pre_cal_type'] = self.pre_cal_type
        if self.ticket_nos is not None:
            result['ticket_nos'] = self.ticket_nos
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_segment_relations = []
        if m.get('passenger_segment_relations') is not None:
            for k in m.get('passenger_segment_relations'):
                temp_model = FlightRefundPreCalV2RequestPassengerSegmentRelations()
                self.passenger_segment_relations.append(temp_model.from_map(k))
        if m.get('pre_cal_type') is not None:
            self.pre_cal_type = m.get('pre_cal_type')
        if m.get('ticket_nos') is not None:
            self.ticket_nos = m.get('ticket_nos')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightRefundPreCalV2ShrinkRequest(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
        passenger_segment_relations_shrink: str = None,
        pre_cal_type: int = None,
        ticket_nos_shrink: str = None,
        voluntary: bool = None,
    ):
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.passenger_segment_relations_shrink = passenger_segment_relations_shrink
        self.pre_cal_type = pre_cal_type
        self.ticket_nos_shrink = ticket_nos_shrink
        self.voluntary = voluntary

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.passenger_segment_relations_shrink is not None:
            result['passenger_segment_relations'] = self.passenger_segment_relations_shrink
        if self.pre_cal_type is not None:
            result['pre_cal_type'] = self.pre_cal_type
        if self.ticket_nos_shrink is not None:
            result['ticket_nos'] = self.ticket_nos_shrink
        if self.voluntary is not None:
            result['voluntary'] = self.voluntary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('passenger_segment_relations') is not None:
            self.passenger_segment_relations_shrink = m.get('passenger_segment_relations')
        if m.get('pre_cal_type') is not None:
            self.pre_cal_type = m.get('pre_cal_type')
        if m.get('ticket_nos') is not None:
            self.ticket_nos_shrink = m.get('ticket_nos')
        if m.get('voluntary') is not None:
            self.voluntary = m.get('voluntary')
        return self


class FlightRefundPreCalV2ResponseBodyModuleMultiRefundFeeDTOS(TeaModel):
    def __init__(
        self,
        passenger_id: str = None,
        passenger_name: str = None,
        pre_refund_money: int = None,
        refund_charge_fee: int = None,
    ):
        self.passenger_id = passenger_id
        self.passenger_name = passenger_name
        self.pre_refund_money = pre_refund_money
        self.refund_charge_fee = refund_charge_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pre_refund_money is not None:
            result['pre_refund_money'] = self.pre_refund_money
        if self.refund_charge_fee is not None:
            result['refund_charge_fee'] = self.refund_charge_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pre_refund_money') is not None:
            self.pre_refund_money = m.get('pre_refund_money')
        if m.get('refund_charge_fee') is not None:
            self.refund_charge_fee = m.get('refund_charge_fee')
        return self


class FlightRefundPreCalV2ResponseBodyModuleRefundReasonOptionDTOS(TeaModel):
    def __init__(
        self,
        reason: str = None,
        reason_type: int = None,
        volunteer: bool = None,
    ):
        self.reason = reason
        self.reason_type = reason_type
        self.volunteer = volunteer

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.reason is not None:
            result['reason'] = self.reason
        if self.reason_type is not None:
            result['reason_type'] = self.reason_type
        if self.volunteer is not None:
            result['volunteer'] = self.volunteer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('reason_type') is not None:
            self.reason_type = m.get('reason_type')
        if m.get('volunteer') is not None:
            self.volunteer = m.get('volunteer')
        return self


class FlightRefundPreCalV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        multi_refund_fee_dtos: List[FlightRefundPreCalV2ResponseBodyModuleMultiRefundFeeDTOS] = None,
        pre_refund_money: int = None,
        refund_charge_fee: int = None,
        refund_reason_option_dtos: List[FlightRefundPreCalV2ResponseBodyModuleRefundReasonOptionDTOS] = None,
        service_charge_fee: int = None,
    ):
        self.multi_refund_fee_dtos = multi_refund_fee_dtos
        self.pre_refund_money = pre_refund_money
        self.refund_charge_fee = refund_charge_fee
        self.refund_reason_option_dtos = refund_reason_option_dtos
        self.service_charge_fee = service_charge_fee

    def validate(self):
        if self.multi_refund_fee_dtos:
            for k in self.multi_refund_fee_dtos:
                if k:
                    k.validate()
        if self.refund_reason_option_dtos:
            for k in self.refund_reason_option_dtos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['multi_refund_fee_d_t_o_s'] = []
        if self.multi_refund_fee_dtos is not None:
            for k in self.multi_refund_fee_dtos:
                result['multi_refund_fee_d_t_o_s'].append(k.to_map() if k else None)
        if self.pre_refund_money is not None:
            result['pre_refund_money'] = self.pre_refund_money
        if self.refund_charge_fee is not None:
            result['refund_charge_fee'] = self.refund_charge_fee
        result['refund_reason_option_d_t_o_s'] = []
        if self.refund_reason_option_dtos is not None:
            for k in self.refund_reason_option_dtos:
                result['refund_reason_option_d_t_o_s'].append(k.to_map() if k else None)
        if self.service_charge_fee is not None:
            result['service_charge_fee'] = self.service_charge_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.multi_refund_fee_dtos = []
        if m.get('multi_refund_fee_d_t_o_s') is not None:
            for k in m.get('multi_refund_fee_d_t_o_s'):
                temp_model = FlightRefundPreCalV2ResponseBodyModuleMultiRefundFeeDTOS()
                self.multi_refund_fee_dtos.append(temp_model.from_map(k))
        if m.get('pre_refund_money') is not None:
            self.pre_refund_money = m.get('pre_refund_money')
        if m.get('refund_charge_fee') is not None:
            self.refund_charge_fee = m.get('refund_charge_fee')
        self.refund_reason_option_dtos = []
        if m.get('refund_reason_option_d_t_o_s') is not None:
            for k in m.get('refund_reason_option_d_t_o_s'):
                temp_model = FlightRefundPreCalV2ResponseBodyModuleRefundReasonOptionDTOS()
                self.refund_reason_option_dtos.append(temp_model.from_map(k))
        if m.get('service_charge_fee') is not None:
            self.service_charge_fee = m.get('service_charge_fee')
        return self


class FlightRefundPreCalV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightRefundPreCalV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightRefundPreCalV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightRefundPreCalV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightRefundPreCalV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightRefundPreCalV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FlightSearchListHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class FlightSearchListRequest(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_date: str = None,
        cabin_class: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_date: str = None,
        flight_no: str = None,
        need_multi_class_price: bool = None,
        transfer_city_code: str = None,
        transfer_flight_no: str = None,
        transfer_leave_date: str = None,
        trip_type: str = None,
    ):
        self.airline_code = airline_code
        # This parameter is required.
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_date = arr_date
        self.cabin_class = cabin_class
        # This parameter is required.
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        # This parameter is required.
        self.dep_date = dep_date
        self.flight_no = flight_no
        self.need_multi_class_price = need_multi_class_price
        self.transfer_city_code = transfer_city_code
        self.transfer_flight_no = transfer_flight_no
        self.transfer_leave_date = transfer_leave_date
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.need_multi_class_price is not None:
            result['need_multi_class_price'] = self.need_multi_class_price
        if self.transfer_city_code is not None:
            result['transfer_city_code'] = self.transfer_city_code
        if self.transfer_flight_no is not None:
            result['transfer_flight_no'] = self.transfer_flight_no
        if self.transfer_leave_date is not None:
            result['transfer_leave_date'] = self.transfer_leave_date
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('need_multi_class_price') is not None:
            self.need_multi_class_price = m.get('need_multi_class_price')
        if m.get('transfer_city_code') is not None:
            self.transfer_city_code = m.get('transfer_city_code')
        if m.get('transfer_flight_no') is not None:
            self.transfer_flight_no = m.get('transfer_flight_no')
        if m.get('transfer_leave_date') is not None:
            self.transfer_leave_date = m.get('transfer_leave_date')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightSearchListResponseBodyModuleFlightListAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        airline_simple_name: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.airline_simple_name = airline_simple_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class FlightSearchListResponseBodyModuleFlightListArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(
        self,
        desc: str = None,
        icon: str = None,
        image: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.icon = icon
        self.image = image
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(
        self,
        image: str = None,
        largest: str = None,
        middle: str = None,
        smallest: str = None,
    ):
        self.image = image
        self.largest = largest
        self.middle = middle
        self.smallest = smallest

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(
        self,
        baggage_desc: List[str] = None,
        baggage_sub_content_type: int = None,
        description: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription = None,
        image_do: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO = None,
        is_highlight: bool = None,
        sub_title: str = None,
    ):
        self.baggage_desc = baggage_desc
        self.baggage_sub_content_type = baggage_sub_content_type
        self.description = description
        self.image_do = image_do
        self.is_highlight = is_highlight
        self.sub_title = sub_title

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(
        self,
        baggage_sub_content_visualizes: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes] = None,
        extra_content_visualizes: List[Any] = None,
        is_struct: bool = None,
        ptc: str = None,
        title: str = None,
    ):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes
        self.extra_content_visualizes = extra_content_visualizes
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.title = title

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips(TeaModel):
    def __init__(
        self,
        logo: str = None,
        tips_desc: str = None,
        tips_image: str = None,
    ):
        self.logo = logo
        self.tips_desc = tips_desc
        self.tips_image = tips_image

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem(TeaModel):
    def __init__(
        self,
        baggage_sub_items: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems] = None,
        index: int = None,
        table_head: str = None,
        tips: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips = None,
        title: str = None,
        type: int = None,
    ):
        self.baggage_sub_items = baggage_sub_items
        self.index = index
        self.table_head = table_head
        self.tips = tips
        self.title = title
        self.type = type

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList(TeaModel):
    def __init__(
        self,
        baggage_info: str = None,
        baggage_item: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem = None,
        change_rule: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule = None,
        change_rule_item: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem = None,
        extra: str = None,
        refund_rule: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule = None,
        refund_rule_item: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem = None,
        sign_rule: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule = None,
        tuigaiqian_info: str = None,
        upgrade_rule: FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule = None,
    ):
        self.baggage_info = baggage_info
        self.baggage_item = baggage_item
        self.change_rule = change_rule
        self.change_rule_item = change_rule_item
        self.extra = extra
        self.refund_rule = refund_rule
        self.refund_rule_item = refund_rule_item
        self.sign_rule = sign_rule
        self.tuigaiqian_info = tuigaiqian_info
        self.upgrade_rule = upgrade_rule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightSearchListResponseBodyModuleFlightListCabinInfoList(TeaModel):
    def __init__(
        self,
        agent_id: int = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        cabin: str = None,
        cabin_class: str = None,
        cabin_class_name: str = None,
        child_cabin: str = None,
        class_name: str = None,
        class_rule: str = None,
        discount: str = None,
        flight_rule_list: List[FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList] = None,
        flight_rule_list_str: str = None,
        invoice_type: int = None,
        is_protocol: bool = None,
        memo: str = None,
        oil_price: int = None,
        order_params: str = None,
        ota_item_id: str = None,
        price: int = None,
        product_type: int = None,
        product_type_desc: str = None,
        promotion_price: str = None,
        remained_seat_count: str = None,
        ticket_price: int = None,
        total_price: int = None,
    ):
        self.agent_id = agent_id
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_class_name = cabin_class_name
        self.child_cabin = child_cabin
        self.class_name = class_name
        self.class_rule = class_rule
        self.discount = discount
        self.flight_rule_list = flight_rule_list
        self.flight_rule_list_str = flight_rule_list_str
        self.invoice_type = invoice_type
        self.is_protocol = is_protocol
        self.memo = memo
        self.oil_price = oil_price
        self.order_params = order_params
        self.ota_item_id = ota_item_id
        self.price = price
        self.product_type = product_type
        self.product_type_desc = product_type_desc
        self.promotion_price = promotion_price
        self.remained_seat_count = remained_seat_count
        self.ticket_price = ticket_price
        self.total_price = total_price

    def validate(self):
        if self.flight_rule_list:
            for k in self.flight_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agent_id is not None:
            result['agent_id'] = self.agent_id
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_class_name is not None:
            result['cabin_class_name'] = self.cabin_class_name
        if self.child_cabin is not None:
            result['child_cabin'] = self.child_cabin
        if self.class_name is not None:
            result['class_name'] = self.class_name
        if self.class_rule is not None:
            result['class_rule'] = self.class_rule
        if self.discount is not None:
            result['discount'] = self.discount
        result['flight_rule_list'] = []
        if self.flight_rule_list is not None:
            for k in self.flight_rule_list:
                result['flight_rule_list'].append(k.to_map() if k else None)
        if self.flight_rule_list_str is not None:
            result['flight_rule_list_str'] = self.flight_rule_list_str
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.memo is not None:
            result['memo'] = self.memo
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.order_params is not None:
            result['order_params'] = self.order_params
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.product_type_desc is not None:
            result['product_type_desc'] = self.product_type_desc
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.remained_seat_count is not None:
            result['remained_seat_count'] = self.remained_seat_count
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('agent_id') is not None:
            self.agent_id = m.get('agent_id')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_class_name') is not None:
            self.cabin_class_name = m.get('cabin_class_name')
        if m.get('child_cabin') is not None:
            self.child_cabin = m.get('child_cabin')
        if m.get('class_name') is not None:
            self.class_name = m.get('class_name')
        if m.get('class_rule') is not None:
            self.class_rule = m.get('class_rule')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        self.flight_rule_list = []
        if m.get('flight_rule_list') is not None:
            for k in m.get('flight_rule_list'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoListFlightRuleList()
                self.flight_rule_list.append(temp_model.from_map(k))
        if m.get('flight_rule_list_str') is not None:
            self.flight_rule_list_str = m.get('flight_rule_list_str')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('order_params') is not None:
            self.order_params = m.get('order_params')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('product_type_desc') is not None:
            self.product_type_desc = m.get('product_type_desc')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('remained_seat_count') is not None:
            self.remained_seat_count = m.get('remained_seat_count')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class FlightSearchListResponseBodyModuleFlightListDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(
        self,
        desc: str = None,
        icon: str = None,
        image: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.icon = icon
        self.image = image
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(
        self,
        image: str = None,
        largest: str = None,
        middle: str = None,
        smallest: str = None,
    ):
        self.image = image
        self.largest = largest
        self.middle = middle
        self.smallest = smallest

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(
        self,
        baggage_desc: List[str] = None,
        baggage_sub_content_type: int = None,
        description: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription = None,
        image_do: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO = None,
        is_highlight: bool = None,
        sub_title: str = None,
    ):
        self.baggage_desc = baggage_desc
        self.baggage_sub_content_type = baggage_sub_content_type
        self.description = description
        self.image_do = image_do
        self.is_highlight = is_highlight
        self.sub_title = sub_title

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(
        self,
        baggage_sub_content_visualizes: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes] = None,
        extra_content_visualizes: List[Any] = None,
        is_struct: bool = None,
        ptc: str = None,
        title: str = None,
    ):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes
        self.extra_content_visualizes = extra_content_visualizes
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.title = title

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips(TeaModel):
    def __init__(
        self,
        logo: str = None,
        tips_desc: str = None,
        tips_image: str = None,
    ):
        self.logo = logo
        self.tips_desc = tips_desc
        self.tips_image = tips_image

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem(TeaModel):
    def __init__(
        self,
        baggage_sub_items: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems] = None,
        index: int = None,
        table_head: str = None,
        tips: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips = None,
        title: str = None,
        type: int = None,
    ):
        self.baggage_sub_items = baggage_sub_items
        self.index = index
        self.table_head = table_head
        self.tips = tips
        self.title = title
        self.type = type

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListFlightRuleList(TeaModel):
    def __init__(
        self,
        baggage_info: str = None,
        baggage_item: FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem = None,
        change_rule: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule = None,
        change_rule_item: FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem = None,
        extra: str = None,
        refund_rule: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule = None,
        refund_rule_item: FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem = None,
        sign_rule: FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule = None,
        tuigaiqian_info: str = None,
        upgrade_rule: FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule = None,
    ):
        self.baggage_info = baggage_info
        self.baggage_item = baggage_item
        self.change_rule = change_rule
        self.change_rule_item = change_rule_item
        self.extra = extra
        self.refund_rule = refund_rule
        self.refund_rule_item = refund_rule_item
        self.sign_rule = sign_rule
        self.tuigaiqian_info = tuigaiqian_info
        self.upgrade_rule = upgrade_rule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        airline_simple_name: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.airline_simple_name = airline_simple_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(
        self,
        desc: str = None,
        icon: str = None,
        image: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.icon = icon
        self.image = image
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(
        self,
        image: str = None,
        largest: str = None,
        middle: str = None,
        smallest: str = None,
    ):
        self.image = image
        self.largest = largest
        self.middle = middle
        self.smallest = smallest

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(
        self,
        baggage_desc: List[str] = None,
        baggage_sub_content_type: int = None,
        description: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription = None,
        image_do: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO = None,
        is_highlight: bool = None,
        sub_title: str = None,
    ):
        self.baggage_desc = baggage_desc
        self.baggage_sub_content_type = baggage_sub_content_type
        self.description = description
        self.image_do = image_do
        self.is_highlight = is_highlight
        self.sub_title = sub_title

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['image_d_o'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('image_d_o') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['image_d_o'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems(TeaModel):
    def __init__(
        self,
        baggage_sub_content_visualizes: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes] = None,
        extra_content_visualizes: List[Any] = None,
        is_struct: bool = None,
        ptc: str = None,
        title: str = None,
    ):
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes
        self.extra_content_visualizes = extra_content_visualizes
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.title = title

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        if self.extra_content_visualizes is not None:
            result['extra_content_visualizes'] = self.extra_content_visualizes
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        if m.get('extra_content_visualizes') is not None:
            self.extra_content_visualizes = m.get('extra_content_visualizes')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips(TeaModel):
    def __init__(
        self,
        logo: str = None,
        tips_desc: str = None,
        tips_image: str = None,
    ):
        self.logo = logo
        self.tips_desc = tips_desc
        self.tips_image = tips_image

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem(TeaModel):
    def __init__(
        self,
        baggage_sub_items: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems] = None,
        index: int = None,
        table_head: str = None,
        tips: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips = None,
        title: str = None,
        type: int = None,
    ):
        self.baggage_sub_items = baggage_sub_items
        self.index = index
        self.table_head = table_head
        self.tips = tips
        self.title = title
        self.type = type

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItemTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        title: str = None,
    ):
        self.content = content
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: int = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems(TeaModel):
    def __init__(
        self,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.is_struct = is_struct
        # PTC
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem(TeaModel):
    def __init__(
        self,
        extra_contents: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents] = None,
        index: int = None,
        refund_sub_items: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems] = None,
        sub_table_head: List[str] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.sub_table_head = sub_table_head
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.sub_table_head is not None:
            result['sub_table_head'] = self.sub_table_head
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItemRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('sub_table_head') is not None:
            self.sub_table_head = m.get('sub_table_head')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo(TeaModel):
    def __init__(
        self,
        content: str = None,
        cost: int = None,
        cost_percent: int = None,
        time_stamp: int = None,
        time_type: str = None,
        title: str = None,
    ):
        self.content = content
        self.cost = cost
        self.cost_percent = cost_percent
        self.time_stamp = time_stamp
        self.time_type = time_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.cost is not None:
            result['cost'] = self.cost
        if self.cost_percent is not None:
            result['cost_percent'] = self.cost_percent
        if self.time_stamp is not None:
            result['time_stamp'] = self.time_stamp
        if self.time_type is not None:
            result['time_type'] = self.time_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('cost_percent') is not None:
            self.cost_percent = m.get('cost_percent')
        if m.get('time_stamp') is not None:
            self.time_stamp = m.get('time_stamp')
        if m.get('time_type') is not None:
            self.time_type = m.get('time_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule(TeaModel):
    def __init__(
        self,
        able: bool = None,
        info: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo] = None,
    ):
        self.able = able
        self.info = info

    def validate(self):
        if self.info:
            for k in self.info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.able is not None:
            result['able'] = self.able
        result['info'] = []
        if self.info is not None:
            for k in self.info:
                result['info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('able') is not None:
            self.able = m.get('able')
        self.info = []
        if m.get('info') is not None:
            for k in m.get('info'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRuleInfo()
                self.info.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList(TeaModel):
    def __init__(
        self,
        baggage_info: str = None,
        baggage_item: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem = None,
        change_rule: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule = None,
        change_rule_item: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem = None,
        extra: str = None,
        refund_rule: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule = None,
        refund_rule_item: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem = None,
        sign_rule: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule = None,
        tuigaiqian_info: str = None,
        upgrade_rule: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule = None,
    ):
        self.baggage_info = baggage_info
        self.baggage_item = baggage_item
        self.change_rule = change_rule
        self.change_rule_item = change_rule_item
        self.extra = extra
        self.refund_rule = refund_rule
        self.refund_rule_item = refund_rule_item
        self.sign_rule = sign_rule
        self.tuigaiqian_info = tuigaiqian_info
        self.upgrade_rule = upgrade_rule

    def validate(self):
        if self.baggage_item:
            self.baggage_item.validate()
        if self.change_rule:
            self.change_rule.validate()
        if self.change_rule_item:
            self.change_rule_item.validate()
        if self.refund_rule:
            self.refund_rule.validate()
        if self.refund_rule_item:
            self.refund_rule_item.validate()
        if self.sign_rule:
            self.sign_rule.validate()
        if self.upgrade_rule:
            self.upgrade_rule.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_info is not None:
            result['baggage_info'] = self.baggage_info
        if self.baggage_item is not None:
            result['baggage_item'] = self.baggage_item.to_map()
        if self.change_rule is not None:
            result['change_rule'] = self.change_rule.to_map()
        if self.change_rule_item is not None:
            result['change_rule_item'] = self.change_rule_item.to_map()
        if self.extra is not None:
            result['extra'] = self.extra
        if self.refund_rule is not None:
            result['refund_rule'] = self.refund_rule.to_map()
        if self.refund_rule_item is not None:
            result['refund_rule_item'] = self.refund_rule_item.to_map()
        if self.sign_rule is not None:
            result['sign_rule'] = self.sign_rule.to_map()
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        if self.upgrade_rule is not None:
            result['upgrade_rule'] = self.upgrade_rule.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_info') is not None:
            self.baggage_info = m.get('baggage_info')
        if m.get('baggage_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListBaggageItem()
            self.baggage_item = temp_model.from_map(m['baggage_item'])
        if m.get('change_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRule()
            self.change_rule = temp_model.from_map(m['change_rule'])
        if m.get('change_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListChangeRuleItem()
            self.change_rule_item = temp_model.from_map(m['change_rule_item'])
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('refund_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRule()
            self.refund_rule = temp_model.from_map(m['refund_rule'])
        if m.get('refund_rule_item') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListRefundRuleItem()
            self.refund_rule_item = temp_model.from_map(m['refund_rule_item'])
        if m.get('sign_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListSignRule()
            self.sign_rule = temp_model.from_map(m['sign_rule'])
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        if m.get('upgrade_rule') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleListUpgradeRule()
            self.upgrade_rule = temp_model.from_map(m['upgrade_rule'])
        return self


class FlightSearchListResponseBodyModuleFlightListTransferInfo(TeaModel):
    def __init__(
        self,
        flight_size: str = None,
        flight_type: str = None,
        transfer_airline_info: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo = None,
        transfer_arr_airport_info: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo = None,
        transfer_arr_date: str = None,
        transfer_dep_airport_info: FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo = None,
        transfer_dep_date: str = None,
        transfer_flight_no: str = None,
        transfer_flight_rule_list: List[FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList] = None,
    ):
        self.flight_size = flight_size
        self.flight_type = flight_type
        self.transfer_airline_info = transfer_airline_info
        self.transfer_arr_airport_info = transfer_arr_airport_info
        self.transfer_arr_date = transfer_arr_date
        self.transfer_dep_airport_info = transfer_dep_airport_info
        self.transfer_dep_date = transfer_dep_date
        self.transfer_flight_no = transfer_flight_no
        self.transfer_flight_rule_list = transfer_flight_rule_list

    def validate(self):
        if self.transfer_airline_info:
            self.transfer_airline_info.validate()
        if self.transfer_arr_airport_info:
            self.transfer_arr_airport_info.validate()
        if self.transfer_dep_airport_info:
            self.transfer_dep_airport_info.validate()
        if self.transfer_flight_rule_list:
            for k in self.transfer_flight_rule_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.transfer_airline_info is not None:
            result['transfer_airline_info'] = self.transfer_airline_info.to_map()
        if self.transfer_arr_airport_info is not None:
            result['transfer_arr_airport_info'] = self.transfer_arr_airport_info.to_map()
        if self.transfer_arr_date is not None:
            result['transfer_arr_date'] = self.transfer_arr_date
        if self.transfer_dep_airport_info is not None:
            result['transfer_dep_airport_info'] = self.transfer_dep_airport_info.to_map()
        if self.transfer_dep_date is not None:
            result['transfer_dep_date'] = self.transfer_dep_date
        if self.transfer_flight_no is not None:
            result['transfer_flight_no'] = self.transfer_flight_no
        result['transfer_flight_rule_list'] = []
        if self.transfer_flight_rule_list is not None:
            for k in self.transfer_flight_rule_list:
                result['transfer_flight_rule_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('transfer_airline_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferAirlineInfo()
            self.transfer_airline_info = temp_model.from_map(m['transfer_airline_info'])
        if m.get('transfer_arr_airport_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferArrAirportInfo()
            self.transfer_arr_airport_info = temp_model.from_map(m['transfer_arr_airport_info'])
        if m.get('transfer_arr_date') is not None:
            self.transfer_arr_date = m.get('transfer_arr_date')
        if m.get('transfer_dep_airport_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferDepAirportInfo()
            self.transfer_dep_airport_info = temp_model.from_map(m['transfer_dep_airport_info'])
        if m.get('transfer_dep_date') is not None:
            self.transfer_dep_date = m.get('transfer_dep_date')
        if m.get('transfer_flight_no') is not None:
            self.transfer_flight_no = m.get('transfer_flight_no')
        self.transfer_flight_rule_list = []
        if m.get('transfer_flight_rule_list') is not None:
            for k in m.get('transfer_flight_rule_list'):
                temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfoTransferFlightRuleList()
                self.transfer_flight_rule_list.append(temp_model.from_map(k))
        return self


class FlightSearchListResponseBodyModuleFlightList(TeaModel):
    def __init__(
        self,
        airline_info: FlightSearchListResponseBodyModuleFlightListAirlineInfo = None,
        arr_airport_info: FlightSearchListResponseBodyModuleFlightListArrAirportInfo = None,
        arr_date: str = None,
        basic_cabin_price: int = None,
        build_price: int = None,
        cabin: str = None,
        cabin_class: str = None,
        cabin_info_list: List[FlightSearchListResponseBodyModuleFlightListCabinInfoList] = None,
        carrier_airline: str = None,
        carrier_no: str = None,
        class_rule: str = None,
        dep_airport_info: FlightSearchListResponseBodyModuleFlightListDepAirportInfo = None,
        dep_city_code: str = None,
        dep_date: str = None,
        discount: int = None,
        flight_no: str = None,
        flight_rule_list: List[FlightSearchListResponseBodyModuleFlightListFlightRuleList] = None,
        flight_rule_list_str: str = None,
        flight_size: str = None,
        flight_type: str = None,
        invoice_type: int = None,
        is_protocol: bool = None,
        is_share: bool = None,
        is_stop: bool = None,
        is_transfer: bool = None,
        meal_desc: str = None,
        memo: str = None,
        oil_price: int = None,
        ota_item_id: str = None,
        price: int = None,
        product_type: int = None,
        product_type_desc: str = None,
        promotion_price: str = None,
        remained_seat_count: str = None,
        secret_params: str = None,
        segment_number: str = None,
        stop_arr_time: str = None,
        stop_city: str = None,
        stop_dep_time: str = None,
        ticket_price: int = None,
        total_price: str = None,
        transfer_info: FlightSearchListResponseBodyModuleFlightListTransferInfo = None,
        trip_type: int = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.arr_date = arr_date
        self.basic_cabin_price = basic_cabin_price
        self.build_price = build_price
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_info_list = cabin_info_list
        self.carrier_airline = carrier_airline
        self.carrier_no = carrier_no
        self.class_rule = class_rule
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.dep_date = dep_date
        self.discount = discount
        self.flight_no = flight_no
        self.flight_rule_list = flight_rule_list
        self.flight_rule_list_str = flight_rule_list_str
        self.flight_size = flight_size
        self.flight_type = flight_type
        self.invoice_type = invoice_type
        self.is_protocol = is_protocol
        self.is_share = is_share
        self.is_stop = is_stop
        self.is_transfer = is_transfer
        self.meal_desc = meal_desc
        self.memo = memo
        self.oil_price = oil_price
        self.ota_item_id = ota_item_id
        self.price = price
        self.product_type = product_type
        self.product_type_desc = product_type_desc
        self.promotion_price = promotion_price
        self.remained_seat_count = remained_seat_count
        self.secret_params = secret_params
        self.segment_number = segment_number
        self.stop_arr_time = stop_arr_time
        self.stop_city = stop_city
        self.stop_dep_time = stop_dep_time
        self.ticket_price = ticket_price
        self.total_price = total_price
        self.transfer_info = transfer_info
        self.trip_type = trip_type

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.cabin_info_list:
            for k in self.cabin_info_list:
                if k:
                    k.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_rule_list:
            for k in self.flight_rule_list:
                if k:
                    k.validate()
        if self.transfer_info:
            self.transfer_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.basic_cabin_price is not None:
            result['basic_cabin_price'] = self.basic_cabin_price
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        result['cabin_info_list'] = []
        if self.cabin_info_list is not None:
            for k in self.cabin_info_list:
                result['cabin_info_list'].append(k.to_map() if k else None)
        if self.carrier_airline is not None:
            result['carrier_airline'] = self.carrier_airline
        if self.carrier_no is not None:
            result['carrier_no'] = self.carrier_no
        if self.class_rule is not None:
            result['class_rule'] = self.class_rule
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.discount is not None:
            result['discount'] = self.discount
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        result['flight_rule_list'] = []
        if self.flight_rule_list is not None:
            for k in self.flight_rule_list:
                result['flight_rule_list'].append(k.to_map() if k else None)
        if self.flight_rule_list_str is not None:
            result['flight_rule_list_str'] = self.flight_rule_list_str
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.is_share is not None:
            result['is_share'] = self.is_share
        if self.is_stop is not None:
            result['is_stop'] = self.is_stop
        if self.is_transfer is not None:
            result['is_transfer'] = self.is_transfer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.memo is not None:
            result['memo'] = self.memo
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.price is not None:
            result['price'] = self.price
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.product_type_desc is not None:
            result['product_type_desc'] = self.product_type_desc
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.remained_seat_count is not None:
            result['remained_seat_count'] = self.remained_seat_count
        if self.secret_params is not None:
            result['secret_params'] = self.secret_params
        if self.segment_number is not None:
            result['segment_number'] = self.segment_number
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.transfer_info is not None:
            result['transfer_info'] = self.transfer_info.to_map()
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('basic_cabin_price') is not None:
            self.basic_cabin_price = m.get('basic_cabin_price')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        self.cabin_info_list = []
        if m.get('cabin_info_list') is not None:
            for k in m.get('cabin_info_list'):
                temp_model = FlightSearchListResponseBodyModuleFlightListCabinInfoList()
                self.cabin_info_list.append(temp_model.from_map(k))
        if m.get('carrier_airline') is not None:
            self.carrier_airline = m.get('carrier_airline')
        if m.get('carrier_no') is not None:
            self.carrier_no = m.get('carrier_no')
        if m.get('class_rule') is not None:
            self.class_rule = m.get('class_rule')
        if m.get('dep_airport_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        self.flight_rule_list = []
        if m.get('flight_rule_list') is not None:
            for k in m.get('flight_rule_list'):
                temp_model = FlightSearchListResponseBodyModuleFlightListFlightRuleList()
                self.flight_rule_list.append(temp_model.from_map(k))
        if m.get('flight_rule_list_str') is not None:
            self.flight_rule_list_str = m.get('flight_rule_list_str')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('is_share') is not None:
            self.is_share = m.get('is_share')
        if m.get('is_stop') is not None:
            self.is_stop = m.get('is_stop')
        if m.get('is_transfer') is not None:
            self.is_transfer = m.get('is_transfer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('product_type_desc') is not None:
            self.product_type_desc = m.get('product_type_desc')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('remained_seat_count') is not None:
            self.remained_seat_count = m.get('remained_seat_count')
        if m.get('secret_params') is not None:
            self.secret_params = m.get('secret_params')
        if m.get('segment_number') is not None:
            self.segment_number = m.get('segment_number')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('transfer_info') is not None:
            temp_model = FlightSearchListResponseBodyModuleFlightListTransferInfo()
            self.transfer_info = temp_model.from_map(m['transfer_info'])
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class FlightSearchListResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_list: List[FlightSearchListResponseBodyModuleFlightList] = None,
        is_replace_pnr: bool = None,
    ):
        self.flight_list = flight_list
        self.is_replace_pnr = is_replace_pnr

    def validate(self):
        if self.flight_list:
            for k in self.flight_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_list'] = []
        if self.flight_list is not None:
            for k in self.flight_list:
                result['flight_list'].append(k.to_map() if k else None)
        if self.is_replace_pnr is not None:
            result['is_replace_pnr'] = self.is_replace_pnr
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_list = []
        if m.get('flight_list') is not None:
            for k in m.get('flight_list'):
                temp_model = FlightSearchListResponseBodyModuleFlightList()
                self.flight_list.append(temp_model.from_map(k))
        if m.get('is_replace_pnr') is not None:
            self.is_replace_pnr = m.get('is_replace_pnr')
        return self


class FlightSearchListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: FlightSearchListResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = FlightSearchListResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class FlightSearchListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: FlightSearchListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = FlightSearchListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GroupCorpTokenHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_access_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_access_token = x_acs_btrip_access_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_access_token is not None:
            result['x-acs-btrip-access-token'] = self.x_acs_btrip_access_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-access-token') is not None:
            self.x_acs_btrip_access_token = m.get('x-acs-btrip-access-token')
        return self


class GroupCorpTokenRequest(TeaModel):
    def __init__(
        self,
        app_secret: str = None,
        corp_id: str = None,
        sub_corp_id: str = None,
    ):
        # This parameter is required.
        self.app_secret = app_secret
        # This parameter is required.
        self.corp_id = corp_id
        # This parameter is required.
        self.sub_corp_id = sub_corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_secret is not None:
            result['app_secret'] = self.app_secret
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('app_secret') is not None:
            self.app_secret = m.get('app_secret')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        return self


class GroupCorpTokenResponseBodyModule(TeaModel):
    def __init__(
        self,
        expire: int = None,
        start: int = None,
        token: str = None,
    ):
        self.expire = expire
        self.start = start
        self.token = token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.expire is not None:
            result['expire'] = self.expire
        if self.start is not None:
            result['start'] = self.start
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('expire') is not None:
            self.expire = m.get('expire')
        if m.get('start') is not None:
            self.start = m.get('start')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class GroupCorpTokenResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: GroupCorpTokenResponseBodyModule = None,
        request_id: str = None,
        success: str = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = GroupCorpTokenResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class GroupCorpTokenResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GroupCorpTokenResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GroupCorpTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GroupDepartSaveHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class GroupDepartSaveRequest(TeaModel):
    def __init__(
        self,
        dept_name: str = None,
        manager_ids: str = None,
        outer_dept_id: str = None,
        outer_dept_pid: str = None,
        status: int = None,
        sub_corp_id_list: List[str] = None,
        sync_group: bool = None,
    ):
        # This parameter is required.
        self.dept_name = dept_name
        self.manager_ids = manager_ids
        # This parameter is required.
        self.outer_dept_id = outer_dept_id
        self.outer_dept_pid = outer_dept_pid
        # This parameter is required.
        self.status = status
        self.sub_corp_id_list = sub_corp_id_list
        self.sync_group = sync_group

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.manager_ids is not None:
            result['manager_ids'] = self.manager_ids
        if self.outer_dept_id is not None:
            result['outer_dept_id'] = self.outer_dept_id
        if self.outer_dept_pid is not None:
            result['outer_dept_pid'] = self.outer_dept_pid
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id_list is not None:
            result['sub_corp_id_list'] = self.sub_corp_id_list
        if self.sync_group is not None:
            result['sync_group'] = self.sync_group
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('manager_ids') is not None:
            self.manager_ids = m.get('manager_ids')
        if m.get('outer_dept_id') is not None:
            self.outer_dept_id = m.get('outer_dept_id')
        if m.get('outer_dept_pid') is not None:
            self.outer_dept_pid = m.get('outer_dept_pid')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id_list') is not None:
            self.sub_corp_id_list = m.get('sub_corp_id_list')
        if m.get('sync_group') is not None:
            self.sync_group = m.get('sync_group')
        return self


class GroupDepartSaveShrinkRequest(TeaModel):
    def __init__(
        self,
        dept_name: str = None,
        manager_ids: str = None,
        outer_dept_id: str = None,
        outer_dept_pid: str = None,
        status: int = None,
        sub_corp_id_list_shrink: str = None,
        sync_group: bool = None,
    ):
        # This parameter is required.
        self.dept_name = dept_name
        self.manager_ids = manager_ids
        # This parameter is required.
        self.outer_dept_id = outer_dept_id
        self.outer_dept_pid = outer_dept_pid
        # This parameter is required.
        self.status = status
        self.sub_corp_id_list_shrink = sub_corp_id_list_shrink
        self.sync_group = sync_group

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.manager_ids is not None:
            result['manager_ids'] = self.manager_ids
        if self.outer_dept_id is not None:
            result['outer_dept_id'] = self.outer_dept_id
        if self.outer_dept_pid is not None:
            result['outer_dept_pid'] = self.outer_dept_pid
        if self.status is not None:
            result['status'] = self.status
        if self.sub_corp_id_list_shrink is not None:
            result['sub_corp_id_list'] = self.sub_corp_id_list_shrink
        if self.sync_group is not None:
            result['sync_group'] = self.sync_group
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('manager_ids') is not None:
            self.manager_ids = m.get('manager_ids')
        if m.get('outer_dept_id') is not None:
            self.outer_dept_id = m.get('outer_dept_id')
        if m.get('outer_dept_pid') is not None:
            self.outer_dept_pid = m.get('outer_dept_pid')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_corp_id_list') is not None:
            self.sub_corp_id_list_shrink = m.get('sub_corp_id_list')
        if m.get('sync_group') is not None:
            self.sync_group = m.get('sync_group')
        return self


class GroupDepartSaveResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class GroupDepartSaveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GroupDepartSaveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GroupDepartSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GroupUserSaveHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class GroupUserSaveRequestCertList(TeaModel):
    def __init__(
        self,
        cert_expired_time: str = None,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        nationality: str = None,
    ):
        self.cert_expired_time = cert_expired_time
        self.cert_nation = cert_nation
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.nationality = nationality

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_expired_time is not None:
            result['cert_expired_time'] = self.cert_expired_time
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.nationality is not None:
            result['nationality'] = self.nationality
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_expired_time') is not None:
            self.cert_expired_time = m.get('cert_expired_time')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        return self


class GroupUserSaveRequestSubCorpIdList(TeaModel):
    def __init__(
        self,
        depart_ids: List[str] = None,
        email: str = None,
        leave_status: int = None,
        manager_user_id: str = None,
        position_level: str = None,
        sub_corp_id: str = None,
    ):
        self.depart_ids = depart_ids
        self.email = email
        # This parameter is required.
        self.leave_status = leave_status
        self.manager_user_id = manager_user_id
        self.position_level = position_level
        # This parameter is required.
        self.sub_corp_id = sub_corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.depart_ids is not None:
            result['depart_ids'] = self.depart_ids
        if self.email is not None:
            result['email'] = self.email
        if self.leave_status is not None:
            result['leave_status'] = self.leave_status
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('depart_ids') is not None:
            self.depart_ids = m.get('depart_ids')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('leave_status') is not None:
            self.leave_status = m.get('leave_status')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        return self


class GroupUserSaveRequest(TeaModel):
    def __init__(
        self,
        base_city_code: str = None,
        birthday: str = None,
        cert_list: List[GroupUserSaveRequestCertList] = None,
        gender: str = None,
        job_no: str = None,
        phone: str = None,
        real_name_en: str = None,
        sub_corp_id_list: List[GroupUserSaveRequestSubCorpIdList] = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.base_city_code = base_city_code
        self.birthday = birthday
        self.cert_list = cert_list
        self.gender = gender
        self.job_no = job_no
        self.phone = phone
        self.real_name_en = real_name_en
        # This parameter is required.
        self.sub_corp_id_list = sub_corp_id_list
        # This parameter is required.
        self.user_id = user_id
        # This parameter is required.
        self.user_name = user_name

    def validate(self):
        if self.cert_list:
            for k in self.cert_list:
                if k:
                    k.validate()
        if self.sub_corp_id_list:
            for k in self.sub_corp_id_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.base_city_code is not None:
            result['base_city_code'] = self.base_city_code
        if self.birthday is not None:
            result['birthday'] = self.birthday
        result['cert_list'] = []
        if self.cert_list is not None:
            for k in self.cert_list:
                result['cert_list'].append(k.to_map() if k else None)
        if self.gender is not None:
            result['gender'] = self.gender
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        result['sub_corp_id_list'] = []
        if self.sub_corp_id_list is not None:
            for k in self.sub_corp_id_list:
                result['sub_corp_id_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('base_city_code') is not None:
            self.base_city_code = m.get('base_city_code')
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        self.cert_list = []
        if m.get('cert_list') is not None:
            for k in m.get('cert_list'):
                temp_model = GroupUserSaveRequestCertList()
                self.cert_list.append(temp_model.from_map(k))
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        self.sub_corp_id_list = []
        if m.get('sub_corp_id_list') is not None:
            for k in m.get('sub_corp_id_list'):
                temp_model = GroupUserSaveRequestSubCorpIdList()
                self.sub_corp_id_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class GroupUserSaveShrinkRequest(TeaModel):
    def __init__(
        self,
        base_city_code: str = None,
        birthday: str = None,
        cert_list_shrink: str = None,
        gender: str = None,
        job_no: str = None,
        phone: str = None,
        real_name_en: str = None,
        sub_corp_id_list_shrink: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.base_city_code = base_city_code
        self.birthday = birthday
        self.cert_list_shrink = cert_list_shrink
        self.gender = gender
        self.job_no = job_no
        self.phone = phone
        self.real_name_en = real_name_en
        # This parameter is required.
        self.sub_corp_id_list_shrink = sub_corp_id_list_shrink
        # This parameter is required.
        self.user_id = user_id
        # This parameter is required.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.base_city_code is not None:
            result['base_city_code'] = self.base_city_code
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_list_shrink is not None:
            result['cert_list'] = self.cert_list_shrink
        if self.gender is not None:
            result['gender'] = self.gender
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.sub_corp_id_list_shrink is not None:
            result['sub_corp_id_list'] = self.sub_corp_id_list_shrink
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('base_city_code') is not None:
            self.base_city_code = m.get('base_city_code')
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_list') is not None:
            self.cert_list_shrink = m.get('cert_list')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('sub_corp_id_list') is not None:
            self.sub_corp_id_list_shrink = m.get('sub_corp_id_list')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class GroupUserSaveResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class GroupUserSaveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GroupUserSaveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GroupUserSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelAskingPriceHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelAskingPriceRequest(TeaModel):
    def __init__(
        self,
        adult_num: str = None,
        btrip_user_id: str = None,
        check_in_date: str = None,
        check_out_date: str = None,
        city_code: str = None,
        city_name: str = None,
        dir: int = None,
        hotel_star: str = None,
        is_protocol: bool = None,
        payment_type: int = None,
        shids: List[int] = None,
        sort_code: int = None,
    ):
        self.adult_num = adult_num
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.check_in_date = check_in_date
        # This parameter is required.
        self.check_out_date = check_out_date
        self.city_code = city_code
        self.city_name = city_name
        self.dir = dir
        self.hotel_star = hotel_star
        self.is_protocol = is_protocol
        self.payment_type = payment_type
        # This parameter is required.
        self.shids = shids
        self.sort_code = sort_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_num is not None:
            result['adult_num'] = self.adult_num
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.check_out_date is not None:
            result['check_out_date'] = self.check_out_date
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.dir is not None:
            result['dir'] = self.dir
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.shids is not None:
            result['shids'] = self.shids
        if self.sort_code is not None:
            result['sort_code'] = self.sort_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adult_num') is not None:
            self.adult_num = m.get('adult_num')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('check_out_date') is not None:
            self.check_out_date = m.get('check_out_date')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('dir') is not None:
            self.dir = m.get('dir')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('shids') is not None:
            self.shids = m.get('shids')
        if m.get('sort_code') is not None:
            self.sort_code = m.get('sort_code')
        return self


class HotelAskingPriceShrinkRequest(TeaModel):
    def __init__(
        self,
        adult_num: str = None,
        btrip_user_id: str = None,
        check_in_date: str = None,
        check_out_date: str = None,
        city_code: str = None,
        city_name: str = None,
        dir: int = None,
        hotel_star: str = None,
        is_protocol: bool = None,
        payment_type: int = None,
        shids_shrink: str = None,
        sort_code: int = None,
    ):
        self.adult_num = adult_num
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.check_in_date = check_in_date
        # This parameter is required.
        self.check_out_date = check_out_date
        self.city_code = city_code
        self.city_name = city_name
        self.dir = dir
        self.hotel_star = hotel_star
        self.is_protocol = is_protocol
        self.payment_type = payment_type
        # This parameter is required.
        self.shids_shrink = shids_shrink
        self.sort_code = sort_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_num is not None:
            result['adult_num'] = self.adult_num
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.check_out_date is not None:
            result['check_out_date'] = self.check_out_date
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.dir is not None:
            result['dir'] = self.dir
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.shids_shrink is not None:
            result['shids'] = self.shids_shrink
        if self.sort_code is not None:
            result['sort_code'] = self.sort_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adult_num') is not None:
            self.adult_num = m.get('adult_num')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('check_out_date') is not None:
            self.check_out_date = m.get('check_out_date')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('dir') is not None:
            self.dir = m.get('dir')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('shids') is not None:
            self.shids_shrink = m.get('shids')
        if m.get('sort_code') is not None:
            self.sort_code = m.get('sort_code')
        return self


class HotelAskingPriceResponseBodyModuleHotelAskingPriceDetails(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        hotel_address: str = None,
        hotel_code: str = None,
        hotel_name: str = None,
        is_protocol: bool = None,
        min_price: float = None,
        original_min_price: float = None,
    ):
        self.city_code = city_code
        self.hotel_address = hotel_address
        self.hotel_code = hotel_code
        self.hotel_name = hotel_name
        self.is_protocol = is_protocol
        self.min_price = min_price
        self.original_min_price = original_min_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.hotel_address is not None:
            result['hotel_address'] = self.hotel_address
        if self.hotel_code is not None:
            result['hotel_code'] = self.hotel_code
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.min_price is not None:
            result['min_price'] = self.min_price
        if self.original_min_price is not None:
            result['original_min_price'] = self.original_min_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('hotel_address') is not None:
            self.hotel_address = m.get('hotel_address')
        if m.get('hotel_code') is not None:
            self.hotel_code = m.get('hotel_code')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('min_price') is not None:
            self.min_price = m.get('min_price')
        if m.get('original_min_price') is not None:
            self.original_min_price = m.get('original_min_price')
        return self


class HotelAskingPriceResponseBodyModule(TeaModel):
    def __init__(
        self,
        hotel_asking_price_details: List[HotelAskingPriceResponseBodyModuleHotelAskingPriceDetails] = None,
    ):
        self.hotel_asking_price_details = hotel_asking_price_details

    def validate(self):
        if self.hotel_asking_price_details:
            for k in self.hotel_asking_price_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['hotel_asking_price_details'] = []
        if self.hotel_asking_price_details is not None:
            for k in self.hotel_asking_price_details:
                result['hotel_asking_price_details'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.hotel_asking_price_details = []
        if m.get('hotel_asking_price_details') is not None:
            for k in m.get('hotel_asking_price_details'):
                temp_model = HotelAskingPriceResponseBodyModuleHotelAskingPriceDetails()
                self.hotel_asking_price_details.append(temp_model.from_map(k))
        return self


class HotelAskingPriceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelAskingPriceResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelAskingPriceResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelAskingPriceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelAskingPriceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelAskingPriceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelBillSettlementQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class HotelBillSettlementQueryRequest(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        period_end: str = None,
        period_start: str = None,
    ):
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.period_end = period_end
        # This parameter is required.
        self.period_start = period_start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class HotelBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(
        self,
        agreement_promotion_fee: float = None,
        alipay_trade_no: str = None,
        apply_arr_city_code: str = None,
        apply_arr_city_name: str = None,
        apply_dep_city_code: str = None,
        apply_dep_city_name: str = None,
        apply_extend_field: str = None,
        apply_id: str = None,
        average_nights: str = None,
        bill_record_time: str = None,
        billing_entity: str = None,
        book_reason: str = None,
        book_time: str = None,
        booker_id: str = None,
        booker_job_no: str = None,
        booker_name: str = None,
        brand_group: str = None,
        brand_name: str = None,
        business_trip_result: str = None,
        cancel_or_modify_reason: str = None,
        cancel_or_modify_scene: str = None,
        capital_direction: str = None,
        cascade_department: str = None,
        check_in_date: str = None,
        checkout_date: str = None,
        city: str = None,
        city_code: str = None,
        city_county: str = None,
        city_county_code: str = None,
        corp_refund_fee: float = None,
        corp_total_fee: float = None,
        cost_center: str = None,
        cost_center_number: str = None,
        department: str = None,
        department_id: str = None,
        exceed_reason: str = None,
        fee_type: str = None,
        fees: float = None,
        fines: float = None,
        fu_point_fee: float = None,
        hotel_name: str = None,
        index: str = None,
        ins_order_id: str = None,
        insurance_number: str = None,
        insurance_price: float = None,
        insurance_product_name: str = None,
        invoice_title: str = None,
        is_early_departure: str = None,
        is_negotiation: str = None,
        is_share_str: str = None,
        nights: int = None,
        order_id: str = None,
        order_price: float = None,
        order_type: str = None,
        original_reserve_rule: str = None,
        over_apply_id: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        person_refund_fee: float = None,
        person_settle_price: float = None,
        primary_id: int = None,
        project_code: str = None,
        project_name: str = None,
        promotion_fee: float = None,
        remark: str = None,
        reserve_rule: str = None,
        room_no: str = None,
        room_number: int = None,
        room_price: float = None,
        room_type: str = None,
        scene_id: str = None,
        scene_name: str = None,
        service_fee: float = None,
        settlement_fee: float = None,
        settlement_grant_fee: float = None,
        settlement_time: str = None,
        settlement_type: str = None,
        star: str = None,
        status: int = None,
        tax_rate: str = None,
        third_itinerary_id: str = None,
        total_nights: int = None,
        traveler_id: str = None,
        traveler_job_no: str = None,
        traveler_member_type_name: str = None,
        traveler_name: str = None,
        voucher_type: int = None,
    ):
        self.agreement_promotion_fee = agreement_promotion_fee
        self.alipay_trade_no = alipay_trade_no
        self.apply_arr_city_code = apply_arr_city_code
        self.apply_arr_city_name = apply_arr_city_name
        self.apply_dep_city_code = apply_dep_city_code
        self.apply_dep_city_name = apply_dep_city_name
        # 审批扩展自定义字段
        self.apply_extend_field = apply_extend_field
        self.apply_id = apply_id
        self.average_nights = average_nights
        self.bill_record_time = bill_record_time
        self.billing_entity = billing_entity
        self.book_reason = book_reason
        self.book_time = book_time
        self.booker_id = booker_id
        self.booker_job_no = booker_job_no
        self.booker_name = booker_name
        self.brand_group = brand_group
        self.brand_name = brand_name
        self.business_trip_result = business_trip_result
        self.cancel_or_modify_reason = cancel_or_modify_reason
        self.cancel_or_modify_scene = cancel_or_modify_scene
        self.capital_direction = capital_direction
        self.cascade_department = cascade_department
        self.check_in_date = check_in_date
        self.checkout_date = checkout_date
        self.city = city
        self.city_code = city_code
        self.city_county = city_county
        self.city_county_code = city_county_code
        self.corp_refund_fee = corp_refund_fee
        self.corp_total_fee = corp_total_fee
        self.cost_center = cost_center
        self.cost_center_number = cost_center_number
        self.department = department
        self.department_id = department_id
        self.exceed_reason = exceed_reason
        self.fee_type = fee_type
        self.fees = fees
        self.fines = fines
        self.fu_point_fee = fu_point_fee
        self.hotel_name = hotel_name
        self.index = index
        self.ins_order_id = ins_order_id
        self.insurance_number = insurance_number
        self.insurance_price = insurance_price
        self.insurance_product_name = insurance_product_name
        self.invoice_title = invoice_title
        self.is_early_departure = is_early_departure
        self.is_negotiation = is_negotiation
        self.is_share_str = is_share_str
        self.nights = nights
        self.order_id = order_id
        self.order_price = order_price
        self.order_type = order_type
        self.original_reserve_rule = original_reserve_rule
        self.over_apply_id = over_apply_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.person_refund_fee = person_refund_fee
        self.person_settle_price = person_settle_price
        self.primary_id = primary_id
        self.project_code = project_code
        self.project_name = project_name
        self.promotion_fee = promotion_fee
        self.remark = remark
        self.reserve_rule = reserve_rule
        self.room_no = room_no
        self.room_number = room_number
        self.room_price = room_price
        self.room_type = room_type
        self.scene_id = scene_id
        self.scene_name = scene_name
        self.service_fee = service_fee
        self.settlement_fee = settlement_fee
        self.settlement_grant_fee = settlement_grant_fee
        self.settlement_time = settlement_time
        self.settlement_type = settlement_type
        self.star = star
        self.status = status
        # 税率
        self.tax_rate = tax_rate
        self.third_itinerary_id = third_itinerary_id
        self.total_nights = total_nights
        self.traveler_id = traveler_id
        self.traveler_job_no = traveler_job_no
        self.traveler_member_type_name = traveler_member_type_name
        self.traveler_name = traveler_name
        self.voucher_type = voucher_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agreement_promotion_fee is not None:
            result['agreement_promotion_fee'] = self.agreement_promotion_fee
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.average_nights is not None:
            result['average_nights'] = self.average_nights
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.billing_entity is not None:
            result['billing_entity'] = self.billing_entity
        if self.book_reason is not None:
            result['book_reason'] = self.book_reason
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.brand_group is not None:
            result['brand_group'] = self.brand_group
        if self.brand_name is not None:
            result['brand_name'] = self.brand_name
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.cancel_or_modify_reason is not None:
            result['cancel_or_modify_reason'] = self.cancel_or_modify_reason
        if self.cancel_or_modify_scene is not None:
            result['cancel_or_modify_scene'] = self.cancel_or_modify_scene
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.checkout_date is not None:
            result['checkout_date'] = self.checkout_date
        if self.city is not None:
            result['city'] = self.city
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_county is not None:
            result['city_county'] = self.city_county
        if self.city_county_code is not None:
            result['city_county_code'] = self.city_county_code
        if self.corp_refund_fee is not None:
            result['corp_refund_fee'] = self.corp_refund_fee
        if self.corp_total_fee is not None:
            result['corp_total_fee'] = self.corp_total_fee
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.fees is not None:
            result['fees'] = self.fees
        if self.fines is not None:
            result['fines'] = self.fines
        if self.fu_point_fee is not None:
            result['fu_point_fee'] = self.fu_point_fee
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.index is not None:
            result['index'] = self.index
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        if self.insurance_number is not None:
            result['insurance_number'] = self.insurance_number
        if self.insurance_price is not None:
            result['insurance_price'] = self.insurance_price
        if self.insurance_product_name is not None:
            result['insurance_product_name'] = self.insurance_product_name
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.is_early_departure is not None:
            result['is_early_departure'] = self.is_early_departure
        if self.is_negotiation is not None:
            result['is_negotiation'] = self.is_negotiation
        if self.is_share_str is not None:
            result['is_share_str'] = self.is_share_str
        if self.nights is not None:
            result['nights'] = self.nights
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.order_type is not None:
            result['order_type'] = self.order_type
        if self.original_reserve_rule is not None:
            result['original_reserve_rule'] = self.original_reserve_rule
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.person_refund_fee is not None:
            result['person_refund_fee'] = self.person_refund_fee
        if self.person_settle_price is not None:
            result['person_settle_price'] = self.person_settle_price
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.promotion_fee is not None:
            result['promotion_fee'] = self.promotion_fee
        if self.remark is not None:
            result['remark'] = self.remark
        if self.reserve_rule is not None:
            result['reserve_rule'] = self.reserve_rule
        if self.room_no is not None:
            result['room_no'] = self.room_no
        if self.room_number is not None:
            result['room_number'] = self.room_number
        if self.room_price is not None:
            result['room_price'] = self.room_price
        if self.room_type is not None:
            result['room_type'] = self.room_type
        if self.scene_id is not None:
            result['scene_id'] = self.scene_id
        if self.scene_name is not None:
            result['scene_name'] = self.scene_name
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.star is not None:
            result['star'] = self.star
        if self.status is not None:
            result['status'] = self.status
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.total_nights is not None:
            result['total_nights'] = self.total_nights
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('agreement_promotion_fee') is not None:
            self.agreement_promotion_fee = m.get('agreement_promotion_fee')
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('average_nights') is not None:
            self.average_nights = m.get('average_nights')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('billing_entity') is not None:
            self.billing_entity = m.get('billing_entity')
        if m.get('book_reason') is not None:
            self.book_reason = m.get('book_reason')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('brand_group') is not None:
            self.brand_group = m.get('brand_group')
        if m.get('brand_name') is not None:
            self.brand_name = m.get('brand_name')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('cancel_or_modify_reason') is not None:
            self.cancel_or_modify_reason = m.get('cancel_or_modify_reason')
        if m.get('cancel_or_modify_scene') is not None:
            self.cancel_or_modify_scene = m.get('cancel_or_modify_scene')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('checkout_date') is not None:
            self.checkout_date = m.get('checkout_date')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_county') is not None:
            self.city_county = m.get('city_county')
        if m.get('city_county_code') is not None:
            self.city_county_code = m.get('city_county_code')
        if m.get('corp_refund_fee') is not None:
            self.corp_refund_fee = m.get('corp_refund_fee')
        if m.get('corp_total_fee') is not None:
            self.corp_total_fee = m.get('corp_total_fee')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('fees') is not None:
            self.fees = m.get('fees')
        if m.get('fines') is not None:
            self.fines = m.get('fines')
        if m.get('fu_point_fee') is not None:
            self.fu_point_fee = m.get('fu_point_fee')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        if m.get('insurance_number') is not None:
            self.insurance_number = m.get('insurance_number')
        if m.get('insurance_price') is not None:
            self.insurance_price = m.get('insurance_price')
        if m.get('insurance_product_name') is not None:
            self.insurance_product_name = m.get('insurance_product_name')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('is_early_departure') is not None:
            self.is_early_departure = m.get('is_early_departure')
        if m.get('is_negotiation') is not None:
            self.is_negotiation = m.get('is_negotiation')
        if m.get('is_share_str') is not None:
            self.is_share_str = m.get('is_share_str')
        if m.get('nights') is not None:
            self.nights = m.get('nights')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('order_type') is not None:
            self.order_type = m.get('order_type')
        if m.get('original_reserve_rule') is not None:
            self.original_reserve_rule = m.get('original_reserve_rule')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('person_refund_fee') is not None:
            self.person_refund_fee = m.get('person_refund_fee')
        if m.get('person_settle_price') is not None:
            self.person_settle_price = m.get('person_settle_price')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('promotion_fee') is not None:
            self.promotion_fee = m.get('promotion_fee')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('reserve_rule') is not None:
            self.reserve_rule = m.get('reserve_rule')
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        if m.get('room_number') is not None:
            self.room_number = m.get('room_number')
        if m.get('room_price') is not None:
            self.room_price = m.get('room_price')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        if m.get('scene_id') is not None:
            self.scene_id = m.get('scene_id')
        if m.get('scene_name') is not None:
            self.scene_name = m.get('scene_name')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('star') is not None:
            self.star = m.get('star')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('total_nights') is not None:
            self.total_nights = m.get('total_nights')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class HotelBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        category: int = None,
        corp_id: str = None,
        data_list: List[HotelBillSettlementQueryResponseBodyModuleDataList] = None,
        period_end: str = None,
        period_start: str = None,
        total_num: int = None,
    ):
        self.category = category
        self.corp_id = corp_id
        self.data_list = data_list
        self.period_end = period_end
        self.period_start = period_start
        self.total_num = total_num

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = HotelBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        return self


class HotelBillSettlementQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelBillSettlementQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelBillSettlementQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelBillSettlementQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelCityCodeListHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelCityCodeListRequest(TeaModel):
    def __init__(
        self,
        country_code: str = None,
    ):
        self.country_code = country_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.country_code is not None:
            result['country_code'] = self.country_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('country_code') is not None:
            self.country_code = m.get('country_code')
        return self


class HotelCityCodeListResponseBodyModuleCitysDistricts(TeaModel):
    def __init__(
        self,
        district_code: str = None,
        district_name: str = None,
    ):
        self.district_code = district_code
        self.district_name = district_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.district_code is not None:
            result['district_code'] = self.district_code
        if self.district_name is not None:
            result['district_name'] = self.district_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('district_code') is not None:
            self.district_code = m.get('district_code')
        if m.get('district_name') is not None:
            self.district_name = m.get('district_name')
        return self


class HotelCityCodeListResponseBodyModuleCitys(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        districts: List[HotelCityCodeListResponseBodyModuleCitysDistricts] = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.districts = districts

    def validate(self):
        if self.districts:
            for k in self.districts:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        result['districts'] = []
        if self.districts is not None:
            for k in self.districts:
                result['districts'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        self.districts = []
        if m.get('districts') is not None:
            for k in m.get('districts'):
                temp_model = HotelCityCodeListResponseBodyModuleCitysDistricts()
                self.districts.append(temp_model.from_map(k))
        return self


class HotelCityCodeListResponseBodyModule(TeaModel):
    def __init__(
        self,
        citys: List[HotelCityCodeListResponseBodyModuleCitys] = None,
        provice_code: str = None,
        province_name: str = None,
    ):
        self.citys = citys
        self.provice_code = provice_code
        self.province_name = province_name

    def validate(self):
        if self.citys:
            for k in self.citys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['citys'] = []
        if self.citys is not None:
            for k in self.citys:
                result['citys'].append(k.to_map() if k else None)
        if self.provice_code is not None:
            result['provice_code'] = self.provice_code
        if self.province_name is not None:
            result['province_name'] = self.province_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.citys = []
        if m.get('citys') is not None:
            for k in m.get('citys'):
                temp_model = HotelCityCodeListResponseBodyModuleCitys()
                self.citys.append(temp_model.from_map(k))
        if m.get('provice_code') is not None:
            self.provice_code = m.get('provice_code')
        if m.get('province_name') is not None:
            self.province_name = m.get('province_name')
        return self


class HotelCityCodeListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[HotelCityCodeListResponseBodyModule] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = HotelCityCodeListResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelCityCodeListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelCityCodeListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelCityCodeListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelExceedApplyQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class HotelExceedApplyQueryRequest(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        business_instance_id: str = None,
    ):
        self.apply_id = apply_id
        self.business_instance_id = business_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.business_instance_id is not None:
            result['business_instance_id'] = self.business_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('business_instance_id') is not None:
            self.business_instance_id = m.get('business_instance_id')
        return self


class HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo(TeaModel):
    def __init__(
        self,
        check_in: str = None,
        check_out: str = None,
        city_code: str = None,
        city_name: str = None,
        price: int = None,
        together: bool = None,
        type: int = None,
    ):
        self.check_in = check_in
        self.check_out = check_out
        self.city_code = city_code
        self.city_name = city_name
        self.price = price
        self.together = together
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.price is not None:
            result['price'] = self.price
        if self.together is not None:
            result['together'] = self.together
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('together') is not None:
            self.together = m.get('together')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class HotelExceedApplyQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        apply_intention_info_do: HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo = None,
        btrip_cause: str = None,
        corp_id: str = None,
        exceed_reason: str = None,
        exceed_type: int = None,
        origin_standard: str = None,
        status: int = None,
        submit_time: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_corp_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_id = apply_id
        self.apply_intention_info_do = apply_intention_info_do
        self.btrip_cause = btrip_cause
        self.corp_id = corp_id
        self.exceed_reason = exceed_reason
        self.exceed_type = exceed_type
        self.origin_standard = origin_standard
        self.status = status
        self.submit_time = submit_time
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_corp_id = thirdpart_corp_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.apply_intention_info_do:
            self.apply_intention_info_do.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.apply_intention_info_do is not None:
            result['apply_intention_info_do'] = self.apply_intention_info_do.to_map()
        if self.btrip_cause is not None:
            result['btrip_cause'] = self.btrip_cause
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.exceed_type is not None:
            result['exceed_type'] = self.exceed_type
        if self.origin_standard is not None:
            result['origin_standard'] = self.origin_standard
        if self.status is not None:
            result['status'] = self.status
        if self.submit_time is not None:
            result['submit_time'] = self.submit_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('apply_intention_info_do') is not None:
            temp_model = HotelExceedApplyQueryResponseBodyModuleApplyIntentionInfoDo()
            self.apply_intention_info_do = temp_model.from_map(m['apply_intention_info_do'])
        if m.get('btrip_cause') is not None:
            self.btrip_cause = m.get('btrip_cause')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('exceed_type') is not None:
            self.exceed_type = m.get('exceed_type')
        if m.get('origin_standard') is not None:
            self.origin_standard = m.get('origin_standard')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('submit_time') is not None:
            self.submit_time = m.get('submit_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class HotelExceedApplyQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelExceedApplyQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelExceedApplyQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelExceedApplyQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelExceedApplyQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelExceedApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelGoodsQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelGoodsQueryRequest(TeaModel):
    def __init__(
        self,
        adult_num: str = None,
        agreement_price: bool = None,
        begin_date: str = None,
        breakfast_included: bool = None,
        btrip_user_id: str = None,
        city_code: str = None,
        end_date: str = None,
        hotel_id: str = None,
        pay_over_type: int = None,
        payment_type: int = None,
        special_invoice: bool = None,
        super_man: int = None,
    ):
        self.adult_num = adult_num
        self.agreement_price = agreement_price
        # This parameter is required.
        self.begin_date = begin_date
        self.breakfast_included = breakfast_included
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        self.city_code = city_code
        # This parameter is required.
        self.end_date = end_date
        # This parameter is required.
        self.hotel_id = hotel_id
        self.pay_over_type = pay_over_type
        self.payment_type = payment_type
        self.special_invoice = special_invoice
        self.super_man = super_man

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_num is not None:
            result['adult_num'] = self.adult_num
        if self.agreement_price is not None:
            result['agreement_price'] = self.agreement_price
        if self.begin_date is not None:
            result['begin_date'] = self.begin_date
        if self.breakfast_included is not None:
            result['breakfast_included'] = self.breakfast_included
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.end_date is not None:
            result['end_date'] = self.end_date
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.pay_over_type is not None:
            result['pay_over_type'] = self.pay_over_type
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.special_invoice is not None:
            result['special_invoice'] = self.special_invoice
        if self.super_man is not None:
            result['super_man'] = self.super_man
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adult_num') is not None:
            self.adult_num = m.get('adult_num')
        if m.get('agreement_price') is not None:
            self.agreement_price = m.get('agreement_price')
        if m.get('begin_date') is not None:
            self.begin_date = m.get('begin_date')
        if m.get('breakfast_included') is not None:
            self.breakfast_included = m.get('breakfast_included')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('end_date') is not None:
            self.end_date = m.get('end_date')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('pay_over_type') is not None:
            self.pay_over_type = m.get('pay_over_type')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('special_invoice') is not None:
            self.special_invoice = m.get('special_invoice')
        if m.get('super_man') is not None:
            self.super_man = m.get('super_man')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList(TeaModel):
    def __init__(
        self,
        hour: int = None,
        value: int = None,
    ):
        self.hour = hour
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hour is not None:
            result['hour'] = self.hour
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hour') is not None:
            self.hour = m.get('hour')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTO(TeaModel):
    def __init__(
        self,
        btrip_hotel_cancel_policy_info_dtolist: List[HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList] = None,
        cancel_policy_type: int = None,
    ):
        self.btrip_hotel_cancel_policy_info_dtolist = btrip_hotel_cancel_policy_info_dtolist
        self.cancel_policy_type = cancel_policy_type

    def validate(self):
        if self.btrip_hotel_cancel_policy_info_dtolist:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['btrip_hotel_cancel_policy_info_d_t_o_list'] = []
        if self.btrip_hotel_cancel_policy_info_dtolist is not None:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                result['btrip_hotel_cancel_policy_info_d_t_o_list'].append(k.to_map() if k else None)
        if self.cancel_policy_type is not None:
            result['cancel_policy_type'] = self.cancel_policy_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.btrip_hotel_cancel_policy_info_dtolist = []
        if m.get('btrip_hotel_cancel_policy_info_d_t_o_list') is not None:
            for k in m.get('btrip_hotel_cancel_policy_info_d_t_o_list'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList()
                self.btrip_hotel_cancel_policy_info_dtolist.append(temp_model.from_map(k))
        if m.get('cancel_policy_type') is not None:
            self.cancel_policy_type = m.get('cancel_policy_type')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRule(TeaModel):
    def __init__(
        self,
        btrip_hotel_cancel_policy_dto: HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTO = None,
        cancel_policy_title: str = None,
        check_in: str = None,
    ):
        self.btrip_hotel_cancel_policy_dto = btrip_hotel_cancel_policy_dto
        self.cancel_policy_title = cancel_policy_title
        self.check_in = check_in

    def validate(self):
        if self.btrip_hotel_cancel_policy_dto:
            self.btrip_hotel_cancel_policy_dto.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_hotel_cancel_policy_dto is not None:
            result['btrip_hotel_cancel_policy_d_t_o'] = self.btrip_hotel_cancel_policy_dto.to_map()
        if self.cancel_policy_title is not None:
            result['cancel_policy_title'] = self.cancel_policy_title
        if self.check_in is not None:
            result['check_in'] = self.check_in
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_hotel_cancel_policy_d_t_o') is not None:
            temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRuleBtripHotelCancelPolicyDTO()
            self.btrip_hotel_cancel_policy_dto = temp_model.from_map(m['btrip_hotel_cancel_policy_d_t_o'])
        if m.get('cancel_policy_title') is not None:
            self.cancel_policy_title = m.get('cancel_policy_title')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesBtripHotelCancelDesc(TeaModel):
    def __init__(
        self,
        desc: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDescDiscountDetail(TeaModel):
    def __init__(
        self,
        label_name: List[str] = None,
        money_desc: str = None,
    ):
        self.label_name = label_name
        self.money_desc = money_desc

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label_name is not None:
            result['label_name'] = self.label_name
        if self.money_desc is not None:
            result['money_desc'] = self.money_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('label_name') is not None:
            self.label_name = m.get('label_name')
        if m.get('money_desc') is not None:
            self.money_desc = m.get('money_desc')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDesc(TeaModel):
    def __init__(
        self,
        cash_reduce_total: str = None,
        dinamic_label: str = None,
        discount_detail: List[HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDescDiscountDetail] = None,
        sub_title: str = None,
        title: str = None,
    ):
        self.cash_reduce_total = cash_reduce_total
        self.dinamic_label = dinamic_label
        self.discount_detail = discount_detail
        self.sub_title = sub_title
        self.title = title

    def validate(self):
        if self.discount_detail:
            for k in self.discount_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cash_reduce_total is not None:
            result['cash_reduce_total'] = self.cash_reduce_total
        if self.dinamic_label is not None:
            result['dinamic_label'] = self.dinamic_label
        result['discount_detail'] = []
        if self.discount_detail is not None:
            for k in self.discount_detail:
                result['discount_detail'].append(k.to_map() if k else None)
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cash_reduce_total') is not None:
            self.cash_reduce_total = m.get('cash_reduce_total')
        if m.get('dinamic_label') is not None:
            self.dinamic_label = m.get('dinamic_label')
        self.discount_detail = []
        if m.get('discount_detail') is not None:
            for k in m.get('discount_detail'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDescDiscountDetail()
                self.discount_detail.append(temp_model.from_map(k))
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRatesHotelDetailRatePriceDTO(TeaModel):
    def __init__(
        self,
        before_discount_price: int = None,
        breakfast: str = None,
        discount_price: int = None,
        last_discounts_price: int = None,
        last_discounts_rounding_price: int = None,
        last_num: int = None,
        rate_start_time: str = None,
        status: int = None,
    ):
        self.before_discount_price = before_discount_price
        self.breakfast = breakfast
        self.discount_price = discount_price
        self.last_discounts_price = last_discounts_price
        self.last_discounts_rounding_price = last_discounts_rounding_price
        self.last_num = last_num
        self.rate_start_time = rate_start_time
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.before_discount_price is not None:
            result['before_discount_price'] = self.before_discount_price
        if self.breakfast is not None:
            result['breakfast'] = self.breakfast
        if self.discount_price is not None:
            result['discount_price'] = self.discount_price
        if self.last_discounts_price is not None:
            result['last_discounts_price'] = self.last_discounts_price
        if self.last_discounts_rounding_price is not None:
            result['last_discounts_rounding_price'] = self.last_discounts_rounding_price
        if self.last_num is not None:
            result['last_num'] = self.last_num
        if self.rate_start_time is not None:
            result['rate_start_time'] = self.rate_start_time
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('before_discount_price') is not None:
            self.before_discount_price = m.get('before_discount_price')
        if m.get('breakfast') is not None:
            self.breakfast = m.get('breakfast')
        if m.get('discount_price') is not None:
            self.discount_price = m.get('discount_price')
        if m.get('last_discounts_price') is not None:
            self.last_discounts_price = m.get('last_discounts_price')
        if m.get('last_discounts_rounding_price') is not None:
            self.last_discounts_rounding_price = m.get('last_discounts_rounding_price')
        if m.get('last_num') is not None:
            self.last_num = m.get('last_num')
        if m.get('rate_start_time') is not None:
            self.rate_start_time = m.get('rate_start_time')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRates(TeaModel):
    def __init__(
        self,
        bed_desc: str = None,
        bed_type: str = None,
        breakfast: str = None,
        btrip_cancel_rule: HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRule = None,
        btrip_hotel_cancel_desc: List[HotelGoodsQueryResponseBodyModuleRoomsRatesBtripHotelCancelDesc] = None,
        can_smoking: bool = None,
        cancel_policy_desc: str = None,
        cancel_policy_type: int = None,
        company_aassist: str = None,
        confirm_type: int = None,
        currency_code: str = None,
        daily_price_format_yuan: str = None,
        daily_price_view: str = None,
        discount_desc: HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDesc = None,
        end_time_daily: str = None,
        hotel_detail_rate_price_dto: List[HotelGoodsQueryResponseBodyModuleRoomsRatesHotelDetailRatePriceDTO] = None,
        instant_confirm: bool = None,
        inventory_desc: str = None,
        inventory_price: str = None,
        is_business_pay_4goods: bool = None,
        is_guarantee: int = None,
        is_need_email: bool = None,
        item_id: int = None,
        last_cancel_time: str = None,
        max_occupancy: int = None,
        min_adv_hours: int = None,
        min_days: int = None,
        nod: int = None,
        nop: int = None,
        order_ship_time: int = None,
        payment_type: int = None,
        price_type: int = None,
        promotion_info: str = None,
        rate_id: int = None,
        rate_plan_name: str = None,
        rp_id: int = None,
        seller_id: int = None,
        start_time_daily: str = None,
        status: int = None,
        supplier_code: str = None,
        supplier_name: str = None,
        support_special_invoice: bool = None,
        unrounding_daily_price_format_yuan: str = None,
    ):
        self.bed_desc = bed_desc
        self.bed_type = bed_type
        self.breakfast = breakfast
        self.btrip_cancel_rule = btrip_cancel_rule
        self.btrip_hotel_cancel_desc = btrip_hotel_cancel_desc
        self.can_smoking = can_smoking
        self.cancel_policy_desc = cancel_policy_desc
        self.cancel_policy_type = cancel_policy_type
        self.company_aassist = company_aassist
        self.confirm_type = confirm_type
        self.currency_code = currency_code
        self.daily_price_format_yuan = daily_price_format_yuan
        self.daily_price_view = daily_price_view
        self.discount_desc = discount_desc
        self.end_time_daily = end_time_daily
        self.hotel_detail_rate_price_dto = hotel_detail_rate_price_dto
        self.instant_confirm = instant_confirm
        self.inventory_desc = inventory_desc
        self.inventory_price = inventory_price
        self.is_business_pay_4goods = is_business_pay_4goods
        self.is_guarantee = is_guarantee
        self.is_need_email = is_need_email
        self.item_id = item_id
        self.last_cancel_time = last_cancel_time
        self.max_occupancy = max_occupancy
        self.min_adv_hours = min_adv_hours
        self.min_days = min_days
        self.nod = nod
        self.nop = nop
        self.order_ship_time = order_ship_time
        self.payment_type = payment_type
        self.price_type = price_type
        self.promotion_info = promotion_info
        self.rate_id = rate_id
        self.rate_plan_name = rate_plan_name
        self.rp_id = rp_id
        self.seller_id = seller_id
        self.start_time_daily = start_time_daily
        self.status = status
        self.supplier_code = supplier_code
        self.supplier_name = supplier_name
        self.support_special_invoice = support_special_invoice
        self.unrounding_daily_price_format_yuan = unrounding_daily_price_format_yuan

    def validate(self):
        if self.btrip_cancel_rule:
            self.btrip_cancel_rule.validate()
        if self.btrip_hotel_cancel_desc:
            for k in self.btrip_hotel_cancel_desc:
                if k:
                    k.validate()
        if self.discount_desc:
            self.discount_desc.validate()
        if self.hotel_detail_rate_price_dto:
            for k in self.hotel_detail_rate_price_dto:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_desc is not None:
            result['bed_desc'] = self.bed_desc
        if self.bed_type is not None:
            result['bed_type'] = self.bed_type
        if self.breakfast is not None:
            result['breakfast'] = self.breakfast
        if self.btrip_cancel_rule is not None:
            result['btrip_cancel_rule'] = self.btrip_cancel_rule.to_map()
        result['btrip_hotel_cancel_desc'] = []
        if self.btrip_hotel_cancel_desc is not None:
            for k in self.btrip_hotel_cancel_desc:
                result['btrip_hotel_cancel_desc'].append(k.to_map() if k else None)
        if self.can_smoking is not None:
            result['can_smoking'] = self.can_smoking
        if self.cancel_policy_desc is not None:
            result['cancel_policy_desc'] = self.cancel_policy_desc
        if self.cancel_policy_type is not None:
            result['cancel_policy_type'] = self.cancel_policy_type
        if self.company_aassist is not None:
            result['company_aassist'] = self.company_aassist
        if self.confirm_type is not None:
            result['confirm_type'] = self.confirm_type
        if self.currency_code is not None:
            result['currency_code'] = self.currency_code
        if self.daily_price_format_yuan is not None:
            result['daily_price_format_yuan'] = self.daily_price_format_yuan
        if self.daily_price_view is not None:
            result['daily_price_view'] = self.daily_price_view
        if self.discount_desc is not None:
            result['discount_desc'] = self.discount_desc.to_map()
        if self.end_time_daily is not None:
            result['end_time_daily'] = self.end_time_daily
        result['hotel_detail_rate_price_d_t_o'] = []
        if self.hotel_detail_rate_price_dto is not None:
            for k in self.hotel_detail_rate_price_dto:
                result['hotel_detail_rate_price_d_t_o'].append(k.to_map() if k else None)
        if self.instant_confirm is not None:
            result['instant_confirm'] = self.instant_confirm
        if self.inventory_desc is not None:
            result['inventory_desc'] = self.inventory_desc
        if self.inventory_price is not None:
            result['inventory_price'] = self.inventory_price
        if self.is_business_pay_4goods is not None:
            result['is_business_pay4_goods'] = self.is_business_pay_4goods
        if self.is_guarantee is not None:
            result['is_guarantee'] = self.is_guarantee
        if self.is_need_email is not None:
            result['is_need_email'] = self.is_need_email
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.last_cancel_time is not None:
            result['last_cancel_time'] = self.last_cancel_time
        if self.max_occupancy is not None:
            result['max_occupancy'] = self.max_occupancy
        if self.min_adv_hours is not None:
            result['min_adv_hours'] = self.min_adv_hours
        if self.min_days is not None:
            result['min_days'] = self.min_days
        if self.nod is not None:
            result['nod'] = self.nod
        if self.nop is not None:
            result['nop'] = self.nop
        if self.order_ship_time is not None:
            result['order_ship_time'] = self.order_ship_time
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.price_type is not None:
            result['price_type'] = self.price_type
        if self.promotion_info is not None:
            result['promotion_info'] = self.promotion_info
        if self.rate_id is not None:
            result['rate_id'] = self.rate_id
        if self.rate_plan_name is not None:
            result['rate_plan_name'] = self.rate_plan_name
        if self.rp_id is not None:
            result['rp_id'] = self.rp_id
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.start_time_daily is not None:
            result['start_time_daily'] = self.start_time_daily
        if self.status is not None:
            result['status'] = self.status
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        if self.supplier_name is not None:
            result['supplier_name'] = self.supplier_name
        if self.support_special_invoice is not None:
            result['support_special_invoice'] = self.support_special_invoice
        if self.unrounding_daily_price_format_yuan is not None:
            result['unrounding_daily_price_format_yuan'] = self.unrounding_daily_price_format_yuan
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bed_desc') is not None:
            self.bed_desc = m.get('bed_desc')
        if m.get('bed_type') is not None:
            self.bed_type = m.get('bed_type')
        if m.get('breakfast') is not None:
            self.breakfast = m.get('breakfast')
        if m.get('btrip_cancel_rule') is not None:
            temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesBtripCancelRule()
            self.btrip_cancel_rule = temp_model.from_map(m['btrip_cancel_rule'])
        self.btrip_hotel_cancel_desc = []
        if m.get('btrip_hotel_cancel_desc') is not None:
            for k in m.get('btrip_hotel_cancel_desc'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesBtripHotelCancelDesc()
                self.btrip_hotel_cancel_desc.append(temp_model.from_map(k))
        if m.get('can_smoking') is not None:
            self.can_smoking = m.get('can_smoking')
        if m.get('cancel_policy_desc') is not None:
            self.cancel_policy_desc = m.get('cancel_policy_desc')
        if m.get('cancel_policy_type') is not None:
            self.cancel_policy_type = m.get('cancel_policy_type')
        if m.get('company_aassist') is not None:
            self.company_aassist = m.get('company_aassist')
        if m.get('confirm_type') is not None:
            self.confirm_type = m.get('confirm_type')
        if m.get('currency_code') is not None:
            self.currency_code = m.get('currency_code')
        if m.get('daily_price_format_yuan') is not None:
            self.daily_price_format_yuan = m.get('daily_price_format_yuan')
        if m.get('daily_price_view') is not None:
            self.daily_price_view = m.get('daily_price_view')
        if m.get('discount_desc') is not None:
            temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesDiscountDesc()
            self.discount_desc = temp_model.from_map(m['discount_desc'])
        if m.get('end_time_daily') is not None:
            self.end_time_daily = m.get('end_time_daily')
        self.hotel_detail_rate_price_dto = []
        if m.get('hotel_detail_rate_price_d_t_o') is not None:
            for k in m.get('hotel_detail_rate_price_d_t_o'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRatesHotelDetailRatePriceDTO()
                self.hotel_detail_rate_price_dto.append(temp_model.from_map(k))
        if m.get('instant_confirm') is not None:
            self.instant_confirm = m.get('instant_confirm')
        if m.get('inventory_desc') is not None:
            self.inventory_desc = m.get('inventory_desc')
        if m.get('inventory_price') is not None:
            self.inventory_price = m.get('inventory_price')
        if m.get('is_business_pay4_goods') is not None:
            self.is_business_pay_4goods = m.get('is_business_pay4_goods')
        if m.get('is_guarantee') is not None:
            self.is_guarantee = m.get('is_guarantee')
        if m.get('is_need_email') is not None:
            self.is_need_email = m.get('is_need_email')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('last_cancel_time') is not None:
            self.last_cancel_time = m.get('last_cancel_time')
        if m.get('max_occupancy') is not None:
            self.max_occupancy = m.get('max_occupancy')
        if m.get('min_adv_hours') is not None:
            self.min_adv_hours = m.get('min_adv_hours')
        if m.get('min_days') is not None:
            self.min_days = m.get('min_days')
        if m.get('nod') is not None:
            self.nod = m.get('nod')
        if m.get('nop') is not None:
            self.nop = m.get('nop')
        if m.get('order_ship_time') is not None:
            self.order_ship_time = m.get('order_ship_time')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('price_type') is not None:
            self.price_type = m.get('price_type')
        if m.get('promotion_info') is not None:
            self.promotion_info = m.get('promotion_info')
        if m.get('rate_id') is not None:
            self.rate_id = m.get('rate_id')
        if m.get('rate_plan_name') is not None:
            self.rate_plan_name = m.get('rate_plan_name')
        if m.get('rp_id') is not None:
            self.rp_id = m.get('rp_id')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('start_time_daily') is not None:
            self.start_time_daily = m.get('start_time_daily')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        if m.get('supplier_name') is not None:
            self.supplier_name = m.get('supplier_name')
        if m.get('support_special_invoice') is not None:
            self.support_special_invoice = m.get('support_special_invoice')
        if m.get('unrounding_daily_price_format_yuan') is not None:
            self.unrounding_daily_price_format_yuan = m.get('unrounding_daily_price_format_yuan')
        return self


class HotelGoodsQueryResponseBodyModuleRoomsRoomService(TeaModel):
    def __init__(
        self,
        color: str = None,
        desc: str = None,
        highlight_color_color: str = None,
        title: str = None,
    ):
        self.color = color
        self.desc = desc
        self.highlight_color_color = highlight_color_color
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.color is not None:
            result['color'] = self.color
        if self.desc is not None:
            result['desc'] = self.desc
        if self.highlight_color_color is not None:
            result['highlight_color_color'] = self.highlight_color_color
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('color') is not None:
            self.color = m.get('color')
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('highlight_color_color') is not None:
            self.highlight_color_color = m.get('highlight_color_color')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelGoodsQueryResponseBodyModuleRooms(TeaModel):
    def __init__(
        self,
        area: str = None,
        bed_type_string: str = None,
        extra_bed: bool = None,
        facility: str = None,
        floor: str = None,
        max_occupancy: int = None,
        name: str = None,
        network_service: str = None,
        pics: str = None,
        rates: List[HotelGoodsQueryResponseBodyModuleRoomsRates] = None,
        room_dasc: str = None,
        room_facility: List[str] = None,
        room_service: List[HotelGoodsQueryResponseBodyModuleRoomsRoomService] = None,
        srid: int = None,
        status: int = None,
        window_type: str = None,
    ):
        self.area = area
        self.bed_type_string = bed_type_string
        self.extra_bed = extra_bed
        self.facility = facility
        self.floor = floor
        self.max_occupancy = max_occupancy
        self.name = name
        self.network_service = network_service
        self.pics = pics
        self.rates = rates
        self.room_dasc = room_dasc
        self.room_facility = room_facility
        self.room_service = room_service
        self.srid = srid
        self.status = status
        self.window_type = window_type

    def validate(self):
        if self.rates:
            for k in self.rates:
                if k:
                    k.validate()
        if self.room_service:
            for k in self.room_service:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.area is not None:
            result['area'] = self.area
        if self.bed_type_string is not None:
            result['bed_type_string'] = self.bed_type_string
        if self.extra_bed is not None:
            result['extra_bed'] = self.extra_bed
        if self.facility is not None:
            result['facility'] = self.facility
        if self.floor is not None:
            result['floor'] = self.floor
        if self.max_occupancy is not None:
            result['max_occupancy'] = self.max_occupancy
        if self.name is not None:
            result['name'] = self.name
        if self.network_service is not None:
            result['network_service'] = self.network_service
        if self.pics is not None:
            result['pics'] = self.pics
        result['rates'] = []
        if self.rates is not None:
            for k in self.rates:
                result['rates'].append(k.to_map() if k else None)
        if self.room_dasc is not None:
            result['room_dasc'] = self.room_dasc
        if self.room_facility is not None:
            result['room_facility'] = self.room_facility
        result['room_service'] = []
        if self.room_service is not None:
            for k in self.room_service:
                result['room_service'].append(k.to_map() if k else None)
        if self.srid is not None:
            result['srid'] = self.srid
        if self.status is not None:
            result['status'] = self.status
        if self.window_type is not None:
            result['window_type'] = self.window_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('area') is not None:
            self.area = m.get('area')
        if m.get('bed_type_string') is not None:
            self.bed_type_string = m.get('bed_type_string')
        if m.get('extra_bed') is not None:
            self.extra_bed = m.get('extra_bed')
        if m.get('facility') is not None:
            self.facility = m.get('facility')
        if m.get('floor') is not None:
            self.floor = m.get('floor')
        if m.get('max_occupancy') is not None:
            self.max_occupancy = m.get('max_occupancy')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('network_service') is not None:
            self.network_service = m.get('network_service')
        if m.get('pics') is not None:
            self.pics = m.get('pics')
        self.rates = []
        if m.get('rates') is not None:
            for k in m.get('rates'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRates()
                self.rates.append(temp_model.from_map(k))
        if m.get('room_dasc') is not None:
            self.room_dasc = m.get('room_dasc')
        if m.get('room_facility') is not None:
            self.room_facility = m.get('room_facility')
        self.room_service = []
        if m.get('room_service') is not None:
            for k in m.get('room_service'):
                temp_model = HotelGoodsQueryResponseBodyModuleRoomsRoomService()
                self.room_service.append(temp_model.from_map(k))
        if m.get('srid') is not None:
            self.srid = m.get('srid')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('window_type') is not None:
            self.window_type = m.get('window_type')
        return self


class HotelGoodsQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        address: str = None,
        booking_instructions: Dict[str, str] = None,
        can_foreigner: bool = None,
        check_in: str = None,
        check_out: str = None,
        descriptions: List[str] = None,
        dinamic_banner_pic_urls: List[str] = None,
        early_arrival_time: str = None,
        hotel_id: int = None,
        hotel_name: str = None,
        late_arrival_time: str = None,
        rooms: List[HotelGoodsQueryResponseBodyModuleRooms] = None,
        search_id: str = None,
    ):
        self.address = address
        self.booking_instructions = booking_instructions
        self.can_foreigner = can_foreigner
        self.check_in = check_in
        self.check_out = check_out
        self.descriptions = descriptions
        self.dinamic_banner_pic_urls = dinamic_banner_pic_urls
        self.early_arrival_time = early_arrival_time
        self.hotel_id = hotel_id
        self.hotel_name = hotel_name
        self.late_arrival_time = late_arrival_time
        self.rooms = rooms
        self.search_id = search_id

    def validate(self):
        if self.rooms:
            for k in self.rooms:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.booking_instructions is not None:
            result['booking_instructions'] = self.booking_instructions
        if self.can_foreigner is not None:
            result['can_foreigner'] = self.can_foreigner
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.descriptions is not None:
            result['descriptions'] = self.descriptions
        if self.dinamic_banner_pic_urls is not None:
            result['dinamic_banner_pic_urls'] = self.dinamic_banner_pic_urls
        if self.early_arrival_time is not None:
            result['early_arrival_time'] = self.early_arrival_time
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.late_arrival_time is not None:
            result['late_arrival_time'] = self.late_arrival_time
        result['rooms'] = []
        if self.rooms is not None:
            for k in self.rooms:
                result['rooms'].append(k.to_map() if k else None)
        if self.search_id is not None:
            result['search_id'] = self.search_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('booking_instructions') is not None:
            self.booking_instructions = m.get('booking_instructions')
        if m.get('can_foreigner') is not None:
            self.can_foreigner = m.get('can_foreigner')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('descriptions') is not None:
            self.descriptions = m.get('descriptions')
        if m.get('dinamic_banner_pic_urls') is not None:
            self.dinamic_banner_pic_urls = m.get('dinamic_banner_pic_urls')
        if m.get('early_arrival_time') is not None:
            self.early_arrival_time = m.get('early_arrival_time')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('late_arrival_time') is not None:
            self.late_arrival_time = m.get('late_arrival_time')
        self.rooms = []
        if m.get('rooms') is not None:
            for k in m.get('rooms'):
                temp_model = HotelGoodsQueryResponseBodyModuleRooms()
                self.rooms.append(temp_model.from_map(k))
        if m.get('search_id') is not None:
            self.search_id = m.get('search_id')
        return self


class HotelGoodsQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelGoodsQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelGoodsQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelGoodsQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelGoodsQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelGoodsQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelIndexInfoHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelIndexInfoRequest(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        hotel_status: int = None,
        page_size: int = None,
        page_token: str = None,
    ):
        self.city_code = city_code
        self.hotel_status = hotel_status
        # This parameter is required.
        self.page_size = page_size
        self.page_token = page_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.hotel_status is not None:
            result['hotel_status'] = self.hotel_status
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.page_token is not None:
            result['page_token'] = self.page_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('hotel_status') is not None:
            self.hotel_status = m.get('hotel_status')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('page_token') is not None:
            self.page_token = m.get('page_token')
        return self


class HotelIndexInfoResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        hotel_id: str = None,
        hotel_status: str = None,
    ):
        self.hotel_id = hotel_id
        self.hotel_status = hotel_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.hotel_status is not None:
            result['hotel_status'] = self.hotel_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('hotel_status') is not None:
            self.hotel_status = m.get('hotel_status')
        return self


class HotelIndexInfoResponseBodyModule(TeaModel):
    def __init__(
        self,
        items: List[HotelIndexInfoResponseBodyModuleItems] = None,
        page_size: int = None,
        page_token: str = None,
    ):
        self.items = items
        self.page_size = page_size
        self.page_token = page_token

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.page_token is not None:
            result['page_token'] = self.page_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = HotelIndexInfoResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('page_token') is not None:
            self.page_token = m.get('page_token')
        return self


class HotelIndexInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelIndexInfoResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelIndexInfoResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelIndexInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelIndexInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelIndexInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderCancelHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderCancelRequest(TeaModel):
    def __init__(
        self,
        btrip_order_id: str = None,
        dis_order_id: str = None,
    ):
        self.btrip_order_id = btrip_order_id
        self.dis_order_id = dis_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        return self


class HotelOrderCancelResponseBodyModule(TeaModel):
    def __init__(
        self,
        cancel_success: bool = None,
        code: str = None,
        desc: str = None,
        forfeit_fee: int = None,
    ):
        self.cancel_success = cancel_success
        self.code = code
        self.desc = desc
        self.forfeit_fee = forfeit_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_success is not None:
            result['cancel_success'] = self.cancel_success
        if self.code is not None:
            result['code'] = self.code
        if self.desc is not None:
            result['desc'] = self.desc
        if self.forfeit_fee is not None:
            result['forfeit_fee'] = self.forfeit_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_success') is not None:
            self.cancel_success = m.get('cancel_success')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('forfeit_fee') is not None:
            self.forfeit_fee = m.get('forfeit_fee')
        return self


class HotelOrderCancelResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelOrderCancelResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderCancelResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderCancelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelOrderCancelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderCancelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderChangeApplyHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderChangeApplyRequestRoomInfoList(TeaModel):
    def __init__(
        self,
        cancel_date: List[str] = None,
        room_no: int = None,
    ):
        # This parameter is required.
        self.cancel_date = cancel_date
        # This parameter is required.
        self.room_no = room_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_date is not None:
            result['cancel_date'] = self.cancel_date
        if self.room_no is not None:
            result['room_no'] = self.room_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_date') is not None:
            self.cancel_date = m.get('cancel_date')
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        return self


class HotelOrderChangeApplyRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        dis_order_id: str = None,
        reason: str = None,
        room_info_list: List[HotelOrderChangeApplyRequestRoomInfoList] = None,
        sale_order_id: str = None,
    ):
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.reason = reason
        # This parameter is required.
        self.room_info_list = room_info_list
        # This parameter is required.
        self.sale_order_id = sale_order_id

    def validate(self):
        if self.room_info_list:
            for k in self.room_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.reason is not None:
            result['reason'] = self.reason
        result['room_info_list'] = []
        if self.room_info_list is not None:
            for k in self.room_info_list:
                result['room_info_list'].append(k.to_map() if k else None)
        if self.sale_order_id is not None:
            result['sale_order_id'] = self.sale_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        self.room_info_list = []
        if m.get('room_info_list') is not None:
            for k in m.get('room_info_list'):
                temp_model = HotelOrderChangeApplyRequestRoomInfoList()
                self.room_info_list.append(temp_model.from_map(k))
        if m.get('sale_order_id') is not None:
            self.sale_order_id = m.get('sale_order_id')
        return self


class HotelOrderChangeApplyShrinkRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        dis_order_id: str = None,
        reason: str = None,
        room_info_list_shrink: str = None,
        sale_order_id: str = None,
    ):
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.reason = reason
        # This parameter is required.
        self.room_info_list_shrink = room_info_list_shrink
        # This parameter is required.
        self.sale_order_id = sale_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.reason is not None:
            result['reason'] = self.reason
        if self.room_info_list_shrink is not None:
            result['room_info_list'] = self.room_info_list_shrink
        if self.sale_order_id is not None:
            result['sale_order_id'] = self.sale_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('room_info_list') is not None:
            self.room_info_list_shrink = m.get('room_info_list')
        if m.get('sale_order_id') is not None:
            self.sale_order_id = m.get('sale_order_id')
        return self


class HotelOrderChangeApplyResponseBodyModule(TeaModel):
    def __init__(
        self,
        change_order_id: str = None,
    ):
        self.change_order_id = change_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_order_id is not None:
            result['change_order_id'] = self.change_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_order_id') is not None:
            self.change_order_id = m.get('change_order_id')
        return self


class HotelOrderChangeApplyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelOrderChangeApplyResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderChangeApplyResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderChangeApplyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelOrderChangeApplyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderChangeApplyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderChangeDetailHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderChangeDetailRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        change_order_id: str = None,
        dis_order_id: str = None,
        sale_order_id: str = None,
    ):
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.change_order_id = change_order_id
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.sale_order_id = sale_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.change_order_id is not None:
            result['change_order_id'] = self.change_order_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.sale_order_id is not None:
            result['sale_order_id'] = self.sale_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('change_order_id') is not None:
            self.change_order_id = m.get('change_order_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('sale_order_id') is not None:
            self.sale_order_id = m.get('sale_order_id')
        return self


class HotelOrderChangeDetailResponseBodyModuleRoomInfoListRoomDailyRefundInfos(TeaModel):
    def __init__(
        self,
        check_in_date: str = None,
        penalty_price: int = None,
        price: int = None,
        refund_price: int = None,
    ):
        self.check_in_date = check_in_date
        self.penalty_price = penalty_price
        self.price = price
        self.refund_price = refund_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.penalty_price is not None:
            result['penalty_price'] = self.penalty_price
        if self.price is not None:
            result['price'] = self.price
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('penalty_price') is not None:
            self.penalty_price = m.get('penalty_price')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        return self


class HotelOrderChangeDetailResponseBodyModuleRoomInfoList(TeaModel):
    def __init__(
        self,
        cancel_date: List[str] = None,
        room_daily_refund_infos: List[HotelOrderChangeDetailResponseBodyModuleRoomInfoListRoomDailyRefundInfos] = None,
        room_no: int = None,
    ):
        self.cancel_date = cancel_date
        self.room_daily_refund_infos = room_daily_refund_infos
        self.room_no = room_no

    def validate(self):
        if self.room_daily_refund_infos:
            for k in self.room_daily_refund_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_date is not None:
            result['cancel_date'] = self.cancel_date
        result['room_daily_refund_infos'] = []
        if self.room_daily_refund_infos is not None:
            for k in self.room_daily_refund_infos:
                result['room_daily_refund_infos'].append(k.to_map() if k else None)
        if self.room_no is not None:
            result['room_no'] = self.room_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_date') is not None:
            self.cancel_date = m.get('cancel_date')
        self.room_daily_refund_infos = []
        if m.get('room_daily_refund_infos') is not None:
            for k in m.get('room_daily_refund_infos'):
                temp_model = HotelOrderChangeDetailResponseBodyModuleRoomInfoListRoomDailyRefundInfos()
                self.room_daily_refund_infos.append(temp_model.from_map(k))
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        return self


class HotelOrderChangeDetailResponseBodyModule(TeaModel):
    def __init__(
        self,
        change_order_id: str = None,
        change_type: int = None,
        corp_id: str = None,
        dis_order_id: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        reason: str = None,
        remarks: str = None,
        room_info_list: List[HotelOrderChangeDetailResponseBodyModuleRoomInfoList] = None,
        sale_order_id: str = None,
        source: int = None,
        status: int = None,
        work_order_id: str = None,
    ):
        self.change_order_id = change_order_id
        self.change_type = change_type
        self.corp_id = corp_id
        self.dis_order_id = dis_order_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.reason = reason
        self.remarks = remarks
        self.room_info_list = room_info_list
        self.sale_order_id = sale_order_id
        self.source = source
        self.status = status
        self.work_order_id = work_order_id

    def validate(self):
        if self.room_info_list:
            for k in self.room_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_order_id is not None:
            result['change_order_id'] = self.change_order_id
        if self.change_type is not None:
            result['change_type'] = self.change_type
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.reason is not None:
            result['reason'] = self.reason
        if self.remarks is not None:
            result['remarks'] = self.remarks
        result['room_info_list'] = []
        if self.room_info_list is not None:
            for k in self.room_info_list:
                result['room_info_list'].append(k.to_map() if k else None)
        if self.sale_order_id is not None:
            result['sale_order_id'] = self.sale_order_id
        if self.source is not None:
            result['source'] = self.source
        if self.status is not None:
            result['status'] = self.status
        if self.work_order_id is not None:
            result['work_order_id'] = self.work_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_order_id') is not None:
            self.change_order_id = m.get('change_order_id')
        if m.get('change_type') is not None:
            self.change_type = m.get('change_type')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('remarks') is not None:
            self.remarks = m.get('remarks')
        self.room_info_list = []
        if m.get('room_info_list') is not None:
            for k in m.get('room_info_list'):
                temp_model = HotelOrderChangeDetailResponseBodyModuleRoomInfoList()
                self.room_info_list.append(temp_model.from_map(k))
        if m.get('sale_order_id') is not None:
            self.sale_order_id = m.get('sale_order_id')
        if m.get('source') is not None:
            self.source = m.get('source')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('work_order_id') is not None:
            self.work_order_id = m.get('work_order_id')
        return self


class HotelOrderChangeDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelOrderChangeDetailResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderChangeDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderChangeDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelOrderChangeDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderChangeDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderCreateHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderCreateRequestInvoiceInfo(TeaModel):
    def __init__(
        self,
        buyer_add: str = None,
        buyer_bank_acc: str = None,
        buyer_bank_add: str = None,
        buyer_phone: str = None,
        buyer_tax_num: str = None,
        delivery_address: str = None,
        delivery_area: str = None,
        delivery_city: str = None,
        delivery_province: str = None,
        delivery_street: str = None,
        email: str = None,
        invoice_material: int = None,
        invoice_title: str = None,
        invoice_type: int = None,
        receiver_name: str = None,
        receiver_phone: str = None,
        remark: str = None,
    ):
        self.buyer_add = buyer_add
        self.buyer_bank_acc = buyer_bank_acc
        self.buyer_bank_add = buyer_bank_add
        self.buyer_phone = buyer_phone
        self.buyer_tax_num = buyer_tax_num
        self.delivery_address = delivery_address
        self.delivery_area = delivery_area
        self.delivery_city = delivery_city
        self.delivery_province = delivery_province
        self.delivery_street = delivery_street
        self.email = email
        self.invoice_material = invoice_material
        self.invoice_title = invoice_title
        self.invoice_type = invoice_type
        self.receiver_name = receiver_name
        self.receiver_phone = receiver_phone
        self.remark = remark

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.buyer_add is not None:
            result['buyer_add'] = self.buyer_add
        if self.buyer_bank_acc is not None:
            result['buyer_bank_acc'] = self.buyer_bank_acc
        if self.buyer_bank_add is not None:
            result['buyer_bank_add'] = self.buyer_bank_add
        if self.buyer_phone is not None:
            result['buyer_phone'] = self.buyer_phone
        if self.buyer_tax_num is not None:
            result['buyer_tax_num'] = self.buyer_tax_num
        if self.delivery_address is not None:
            result['delivery_address'] = self.delivery_address
        if self.delivery_area is not None:
            result['delivery_area'] = self.delivery_area
        if self.delivery_city is not None:
            result['delivery_city'] = self.delivery_city
        if self.delivery_province is not None:
            result['delivery_province'] = self.delivery_province
        if self.delivery_street is not None:
            result['delivery_street'] = self.delivery_street
        if self.email is not None:
            result['email'] = self.email
        if self.invoice_material is not None:
            result['invoice_material'] = self.invoice_material
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.receiver_name is not None:
            result['receiver_name'] = self.receiver_name
        if self.receiver_phone is not None:
            result['receiver_phone'] = self.receiver_phone
        if self.remark is not None:
            result['remark'] = self.remark
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('buyer_add') is not None:
            self.buyer_add = m.get('buyer_add')
        if m.get('buyer_bank_acc') is not None:
            self.buyer_bank_acc = m.get('buyer_bank_acc')
        if m.get('buyer_bank_add') is not None:
            self.buyer_bank_add = m.get('buyer_bank_add')
        if m.get('buyer_phone') is not None:
            self.buyer_phone = m.get('buyer_phone')
        if m.get('buyer_tax_num') is not None:
            self.buyer_tax_num = m.get('buyer_tax_num')
        if m.get('delivery_address') is not None:
            self.delivery_address = m.get('delivery_address')
        if m.get('delivery_area') is not None:
            self.delivery_area = m.get('delivery_area')
        if m.get('delivery_city') is not None:
            self.delivery_city = m.get('delivery_city')
        if m.get('delivery_province') is not None:
            self.delivery_province = m.get('delivery_province')
        if m.get('delivery_street') is not None:
            self.delivery_street = m.get('delivery_street')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('invoice_material') is not None:
            self.invoice_material = m.get('invoice_material')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('receiver_name') is not None:
            self.receiver_name = m.get('receiver_name')
        if m.get('receiver_phone') is not None:
            self.receiver_phone = m.get('receiver_phone')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        return self


class HotelOrderCreateRequestOccupantInfoList(TeaModel):
    def __init__(
        self,
        card_no: str = None,
        card_type: int = None,
        customer_type: int = None,
        department_id: str = None,
        department_name: str = None,
        email: str = None,
        employee_type: int = None,
        first_name: str = None,
        last_name: str = None,
        name: str = None,
        phone: str = None,
        room_no: int = None,
        staff_no: str = None,
        user_type: int = None,
    ):
        self.card_no = card_no
        self.card_type = card_type
        self.customer_type = customer_type
        self.department_id = department_id
        self.department_name = department_name
        self.email = email
        self.employee_type = employee_type
        self.first_name = first_name
        self.last_name = last_name
        # This parameter is required.
        self.name = name
        # This parameter is required.
        self.phone = phone
        self.room_no = room_no
        self.staff_no = staff_no
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.card_no is not None:
            result['card_no'] = self.card_no
        if self.card_type is not None:
            result['card_type'] = self.card_type
        if self.customer_type is not None:
            result['customer_type'] = self.customer_type
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.department_name is not None:
            result['department_name'] = self.department_name
        if self.email is not None:
            result['email'] = self.email
        if self.employee_type is not None:
            result['employee_type'] = self.employee_type
        if self.first_name is not None:
            result['first_name'] = self.first_name
        if self.last_name is not None:
            result['last_name'] = self.last_name
        if self.name is not None:
            result['name'] = self.name
        if self.phone is not None:
            result['phone'] = self.phone
        if self.room_no is not None:
            result['room_no'] = self.room_no
        if self.staff_no is not None:
            result['staff_no'] = self.staff_no
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('card_no') is not None:
            self.card_no = m.get('card_no')
        if m.get('card_type') is not None:
            self.card_type = m.get('card_type')
        if m.get('customer_type') is not None:
            self.customer_type = m.get('customer_type')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('department_name') is not None:
            self.department_name = m.get('department_name')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('employee_type') is not None:
            self.employee_type = m.get('employee_type')
        if m.get('first_name') is not None:
            self.first_name = m.get('first_name')
        if m.get('last_name') is not None:
            self.last_name = m.get('last_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        if m.get('staff_no') is not None:
            self.staff_no = m.get('staff_no')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class HotelOrderCreateRequestPromotionInfoPromotionDetailInfoList(TeaModel):
    def __init__(
        self,
        check_status: bool = None,
        need_check: bool = None,
        promotion_code: str = None,
        promotion_id: str = None,
        promotion_name: str = None,
        promotion_price: int = None,
        promotion_type: str = None,
    ):
        self.check_status = check_status
        self.need_check = need_check
        self.promotion_code = promotion_code
        self.promotion_id = promotion_id
        self.promotion_name = promotion_name
        self.promotion_price = promotion_price
        self.promotion_type = promotion_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_status is not None:
            result['check_status'] = self.check_status
        if self.need_check is not None:
            result['need_check'] = self.need_check
        if self.promotion_code is not None:
            result['promotion_code'] = self.promotion_code
        if self.promotion_id is not None:
            result['promotion_id'] = self.promotion_id
        if self.promotion_name is not None:
            result['promotion_name'] = self.promotion_name
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.promotion_type is not None:
            result['promotion_type'] = self.promotion_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('check_status') is not None:
            self.check_status = m.get('check_status')
        if m.get('need_check') is not None:
            self.need_check = m.get('need_check')
        if m.get('promotion_code') is not None:
            self.promotion_code = m.get('promotion_code')
        if m.get('promotion_id') is not None:
            self.promotion_id = m.get('promotion_id')
        if m.get('promotion_name') is not None:
            self.promotion_name = m.get('promotion_name')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('promotion_type') is not None:
            self.promotion_type = m.get('promotion_type')
        return self


class HotelOrderCreateRequestPromotionInfo(TeaModel):
    def __init__(
        self,
        promotion_detail_info_list: List[HotelOrderCreateRequestPromotionInfoPromotionDetailInfoList] = None,
        promotion_total_price: int = None,
    ):
        self.promotion_detail_info_list = promotion_detail_info_list
        self.promotion_total_price = promotion_total_price

    def validate(self):
        if self.promotion_detail_info_list:
            for k in self.promotion_detail_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['promotion_detail_info_list'] = []
        if self.promotion_detail_info_list is not None:
            for k in self.promotion_detail_info_list:
                result['promotion_detail_info_list'].append(k.to_map() if k else None)
        if self.promotion_total_price is not None:
            result['promotion_total_price'] = self.promotion_total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.promotion_detail_info_list = []
        if m.get('promotion_detail_info_list') is not None:
            for k in m.get('promotion_detail_info_list'):
                temp_model = HotelOrderCreateRequestPromotionInfoPromotionDetailInfoList()
                self.promotion_detail_info_list.append(temp_model.from_map(k))
        if m.get('promotion_total_price') is not None:
            self.promotion_total_price = m.get('promotion_total_price')
        return self


class HotelOrderCreateRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        check_in: str = None,
        check_out: str = None,
        contract_email: str = None,
        contract_name: str = None,
        contract_phone: str = None,
        corp_pay_price: int = None,
        dis_order_id: str = None,
        extra: str = None,
        invoice_info: HotelOrderCreateRequestInvoiceInfo = None,
        item_id: int = None,
        itinerary_no: str = None,
        occupant_info_list: List[HotelOrderCreateRequestOccupantInfoList] = None,
        person_pay_price: int = None,
        promotion_info: HotelOrderCreateRequestPromotionInfo = None,
        rate_plan_id: int = None,
        room_id: int = None,
        room_num: int = None,
        seller_id: int = None,
        shid: int = None,
        total_order_price: int = None,
        validate_res_key: str = None,
    ):
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.check_in = check_in
        # This parameter is required.
        self.check_out = check_out
        self.contract_email = contract_email
        self.contract_name = contract_name
        # This parameter is required.
        self.contract_phone = contract_phone
        # This parameter is required.
        self.corp_pay_price = corp_pay_price
        # This parameter is required.
        self.dis_order_id = dis_order_id
        self.extra = extra
        self.invoice_info = invoice_info
        # This parameter is required.
        self.item_id = item_id
        # This parameter is required.
        self.itinerary_no = itinerary_no
        # This parameter is required.
        self.occupant_info_list = occupant_info_list
        # This parameter is required.
        self.person_pay_price = person_pay_price
        self.promotion_info = promotion_info
        # This parameter is required.
        self.rate_plan_id = rate_plan_id
        # This parameter is required.
        self.room_id = room_id
        # This parameter is required.
        self.room_num = room_num
        # This parameter is required.
        self.seller_id = seller_id
        # This parameter is required.
        self.shid = shid
        # This parameter is required.
        self.total_order_price = total_order_price
        # This parameter is required.
        self.validate_res_key = validate_res_key

    def validate(self):
        if self.invoice_info:
            self.invoice_info.validate()
        if self.occupant_info_list:
            for k in self.occupant_info_list:
                if k:
                    k.validate()
        if self.promotion_info:
            self.promotion_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.contract_email is not None:
            result['contract_email'] = self.contract_email
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.contract_phone is not None:
            result['contract_phone'] = self.contract_phone
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.itinerary_no is not None:
            result['itinerary_no'] = self.itinerary_no
        result['occupant_info_list'] = []
        if self.occupant_info_list is not None:
            for k in self.occupant_info_list:
                result['occupant_info_list'].append(k.to_map() if k else None)
        if self.person_pay_price is not None:
            result['person_pay_price'] = self.person_pay_price
        if self.promotion_info is not None:
            result['promotion_info'] = self.promotion_info.to_map()
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.shid is not None:
            result['shid'] = self.shid
        if self.total_order_price is not None:
            result['total_order_price'] = self.total_order_price
        if self.validate_res_key is not None:
            result['validate_res_key'] = self.validate_res_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('contract_email') is not None:
            self.contract_email = m.get('contract_email')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('contract_phone') is not None:
            self.contract_phone = m.get('contract_phone')
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('invoice_info') is not None:
            temp_model = HotelOrderCreateRequestInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('itinerary_no') is not None:
            self.itinerary_no = m.get('itinerary_no')
        self.occupant_info_list = []
        if m.get('occupant_info_list') is not None:
            for k in m.get('occupant_info_list'):
                temp_model = HotelOrderCreateRequestOccupantInfoList()
                self.occupant_info_list.append(temp_model.from_map(k))
        if m.get('person_pay_price') is not None:
            self.person_pay_price = m.get('person_pay_price')
        if m.get('promotion_info') is not None:
            temp_model = HotelOrderCreateRequestPromotionInfo()
            self.promotion_info = temp_model.from_map(m['promotion_info'])
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('shid') is not None:
            self.shid = m.get('shid')
        if m.get('total_order_price') is not None:
            self.total_order_price = m.get('total_order_price')
        if m.get('validate_res_key') is not None:
            self.validate_res_key = m.get('validate_res_key')
        return self


class HotelOrderCreateShrinkRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        check_in: str = None,
        check_out: str = None,
        contract_email: str = None,
        contract_name: str = None,
        contract_phone: str = None,
        corp_pay_price: int = None,
        dis_order_id: str = None,
        extra: str = None,
        invoice_info_shrink: str = None,
        item_id: int = None,
        itinerary_no: str = None,
        occupant_info_list_shrink: str = None,
        person_pay_price: int = None,
        promotion_info_shrink: str = None,
        rate_plan_id: int = None,
        room_id: int = None,
        room_num: int = None,
        seller_id: int = None,
        shid: int = None,
        total_order_price: int = None,
        validate_res_key: str = None,
    ):
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.check_in = check_in
        # This parameter is required.
        self.check_out = check_out
        self.contract_email = contract_email
        self.contract_name = contract_name
        # This parameter is required.
        self.contract_phone = contract_phone
        # This parameter is required.
        self.corp_pay_price = corp_pay_price
        # This parameter is required.
        self.dis_order_id = dis_order_id
        self.extra = extra
        self.invoice_info_shrink = invoice_info_shrink
        # This parameter is required.
        self.item_id = item_id
        # This parameter is required.
        self.itinerary_no = itinerary_no
        # This parameter is required.
        self.occupant_info_list_shrink = occupant_info_list_shrink
        # This parameter is required.
        self.person_pay_price = person_pay_price
        self.promotion_info_shrink = promotion_info_shrink
        # This parameter is required.
        self.rate_plan_id = rate_plan_id
        # This parameter is required.
        self.room_id = room_id
        # This parameter is required.
        self.room_num = room_num
        # This parameter is required.
        self.seller_id = seller_id
        # This parameter is required.
        self.shid = shid
        # This parameter is required.
        self.total_order_price = total_order_price
        # This parameter is required.
        self.validate_res_key = validate_res_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.contract_email is not None:
            result['contract_email'] = self.contract_email
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.contract_phone is not None:
            result['contract_phone'] = self.contract_phone
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        if self.invoice_info_shrink is not None:
            result['invoice_info'] = self.invoice_info_shrink
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.itinerary_no is not None:
            result['itinerary_no'] = self.itinerary_no
        if self.occupant_info_list_shrink is not None:
            result['occupant_info_list'] = self.occupant_info_list_shrink
        if self.person_pay_price is not None:
            result['person_pay_price'] = self.person_pay_price
        if self.promotion_info_shrink is not None:
            result['promotion_info'] = self.promotion_info_shrink
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.shid is not None:
            result['shid'] = self.shid
        if self.total_order_price is not None:
            result['total_order_price'] = self.total_order_price
        if self.validate_res_key is not None:
            result['validate_res_key'] = self.validate_res_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('contract_email') is not None:
            self.contract_email = m.get('contract_email')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('contract_phone') is not None:
            self.contract_phone = m.get('contract_phone')
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('invoice_info') is not None:
            self.invoice_info_shrink = m.get('invoice_info')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('itinerary_no') is not None:
            self.itinerary_no = m.get('itinerary_no')
        if m.get('occupant_info_list') is not None:
            self.occupant_info_list_shrink = m.get('occupant_info_list')
        if m.get('person_pay_price') is not None:
            self.person_pay_price = m.get('person_pay_price')
        if m.get('promotion_info') is not None:
            self.promotion_info_shrink = m.get('promotion_info')
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('shid') is not None:
            self.shid = m.get('shid')
        if m.get('total_order_price') is not None:
            self.total_order_price = m.get('total_order_price')
        if m.get('validate_res_key') is not None:
            self.validate_res_key = m.get('validate_res_key')
        return self


class HotelOrderCreateResponseBodyModule(TeaModel):
    def __init__(
        self,
        btrip_order_id: int = None,
        total_price: int = None,
    ):
        self.btrip_order_id = btrip_order_id
        self.total_price = total_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class HotelOrderCreateResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelOrderCreateResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderCreateResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderCreateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelOrderCreateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderDetailInfoHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderDetailInfoRequest(TeaModel):
    def __init__(
        self,
        btrip_order_id: str = None,
        dis_order_id: str = None,
    ):
        self.btrip_order_id = btrip_order_id
        self.dis_order_id = dis_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        return self


class HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList(TeaModel):
    def __init__(
        self,
        hour: int = None,
        value: int = None,
    ):
        self.hour = hour
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hour is not None:
            result['hour'] = self.hour
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hour') is not None:
            self.hour = m.get('hour')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTO(TeaModel):
    def __init__(
        self,
        btrip_hotel_cancel_policy_info_dtolist: List[HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList] = None,
        cancel_policy_type: int = None,
    ):
        self.btrip_hotel_cancel_policy_info_dtolist = btrip_hotel_cancel_policy_info_dtolist
        self.cancel_policy_type = cancel_policy_type

    def validate(self):
        if self.btrip_hotel_cancel_policy_info_dtolist:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['btrip_hotel_cancel_policy_info_d_t_o_list'] = []
        if self.btrip_hotel_cancel_policy_info_dtolist is not None:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                result['btrip_hotel_cancel_policy_info_d_t_o_list'].append(k.to_map() if k else None)
        if self.cancel_policy_type is not None:
            result['cancel_policy_type'] = self.cancel_policy_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.btrip_hotel_cancel_policy_info_dtolist = []
        if m.get('btrip_hotel_cancel_policy_info_d_t_o_list') is not None:
            for k in m.get('btrip_hotel_cancel_policy_info_d_t_o_list'):
                temp_model = HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList()
                self.btrip_hotel_cancel_policy_info_dtolist.append(temp_model.from_map(k))
        if m.get('cancel_policy_type') is not None:
            self.cancel_policy_type = m.get('cancel_policy_type')
        return self


class HotelOrderDetailInfoResponseBodyModuleCancelInfo(TeaModel):
    def __init__(
        self,
        cancel_end_time: str = None,
        cancel_start_time: str = None,
    ):
        self.cancel_end_time = cancel_end_time
        self.cancel_start_time = cancel_start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_end_time is not None:
            result['cancel_end_time'] = self.cancel_end_time
        if self.cancel_start_time is not None:
            result['cancel_start_time'] = self.cancel_start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_end_time') is not None:
            self.cancel_end_time = m.get('cancel_end_time')
        if m.get('cancel_start_time') is not None:
            self.cancel_start_time = m.get('cancel_start_time')
        return self


class HotelOrderDetailInfoResponseBodyModuleHotelDetailInfo(TeaModel):
    def __init__(
        self,
        address: str = None,
        city_name: str = None,
        hotel_name: str = None,
        hotel_tel: str = None,
        shid: int = None,
    ):
        self.address = address
        self.city_name = city_name
        self.hotel_name = hotel_name
        self.hotel_tel = hotel_tel
        self.shid = shid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_tel is not None:
            result['hotel_tel'] = self.hotel_tel
        if self.shid is not None:
            result['shid'] = self.shid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_tel') is not None:
            self.hotel_tel = m.get('hotel_tel')
        if m.get('shid') is not None:
            self.shid = m.get('shid')
        return self


class HotelOrderDetailInfoResponseBodyModuleHotelSaleOrderRoomInfos(TeaModel):
    def __init__(
        self,
        checkin_date: str = None,
        checkout_date: str = None,
        penal_sum: int = None,
        real_checkout_date: str = None,
        refund_status: int = None,
        room_no: int = None,
        room_price: int = None,
        room_refund_price: int = None,
        traveler_id: str = None,
        traveler_name: str = None,
    ):
        self.checkin_date = checkin_date
        self.checkout_date = checkout_date
        self.penal_sum = penal_sum
        self.real_checkout_date = real_checkout_date
        self.refund_status = refund_status
        self.room_no = room_no
        self.room_price = room_price
        self.room_refund_price = room_refund_price
        self.traveler_id = traveler_id
        self.traveler_name = traveler_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.checkin_date is not None:
            result['checkin_date'] = self.checkin_date
        if self.checkout_date is not None:
            result['checkout_date'] = self.checkout_date
        if self.penal_sum is not None:
            result['penal_sum'] = self.penal_sum
        if self.real_checkout_date is not None:
            result['real_checkout_date'] = self.real_checkout_date
        if self.refund_status is not None:
            result['refund_status'] = self.refund_status
        if self.room_no is not None:
            result['room_no'] = self.room_no
        if self.room_price is not None:
            result['room_price'] = self.room_price
        if self.room_refund_price is not None:
            result['room_refund_price'] = self.room_refund_price
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('checkin_date') is not None:
            self.checkin_date = m.get('checkin_date')
        if m.get('checkout_date') is not None:
            self.checkout_date = m.get('checkout_date')
        if m.get('penal_sum') is not None:
            self.penal_sum = m.get('penal_sum')
        if m.get('real_checkout_date') is not None:
            self.real_checkout_date = m.get('real_checkout_date')
        if m.get('refund_status') is not None:
            self.refund_status = m.get('refund_status')
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        if m.get('room_price') is not None:
            self.room_price = m.get('room_price')
        if m.get('room_refund_price') is not None:
            self.room_refund_price = m.get('room_refund_price')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        return self


class HotelOrderDetailInfoResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(
        self,
        billing_money: int = None,
        buyer_add: str = None,
        buyer_bank_acc: str = None,
        buyer_bank_add: str = None,
        buyer_phone: str = None,
        buyer_tax_num: str = None,
        delivery_address: str = None,
        delivery_area: str = None,
        delivery_city: str = None,
        delivery_province: str = None,
        delivery_street: str = None,
        email: str = None,
        invoice_material: int = None,
        invoice_title: str = None,
        invoice_type: int = None,
        postage: int = None,
        receiver_name: str = None,
        receiver_phone: str = None,
        remark: str = None,
    ):
        self.billing_money = billing_money
        self.buyer_add = buyer_add
        self.buyer_bank_acc = buyer_bank_acc
        self.buyer_bank_add = buyer_bank_add
        self.buyer_phone = buyer_phone
        self.buyer_tax_num = buyer_tax_num
        self.delivery_address = delivery_address
        self.delivery_area = delivery_area
        self.delivery_city = delivery_city
        self.delivery_province = delivery_province
        self.delivery_street = delivery_street
        self.email = email
        self.invoice_material = invoice_material
        self.invoice_title = invoice_title
        self.invoice_type = invoice_type
        self.postage = postage
        self.receiver_name = receiver_name
        self.receiver_phone = receiver_phone
        self.remark = remark

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.billing_money is not None:
            result['billing_money'] = self.billing_money
        if self.buyer_add is not None:
            result['buyer_add'] = self.buyer_add
        if self.buyer_bank_acc is not None:
            result['buyer_bank_acc'] = self.buyer_bank_acc
        if self.buyer_bank_add is not None:
            result['buyer_bank_add'] = self.buyer_bank_add
        if self.buyer_phone is not None:
            result['buyer_phone'] = self.buyer_phone
        if self.buyer_tax_num is not None:
            result['buyer_tax_num'] = self.buyer_tax_num
        if self.delivery_address is not None:
            result['delivery_address'] = self.delivery_address
        if self.delivery_area is not None:
            result['delivery_area'] = self.delivery_area
        if self.delivery_city is not None:
            result['delivery_city'] = self.delivery_city
        if self.delivery_province is not None:
            result['delivery_province'] = self.delivery_province
        if self.delivery_street is not None:
            result['delivery_street'] = self.delivery_street
        if self.email is not None:
            result['email'] = self.email
        if self.invoice_material is not None:
            result['invoice_material'] = self.invoice_material
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.postage is not None:
            result['postage'] = self.postage
        if self.receiver_name is not None:
            result['receiver_name'] = self.receiver_name
        if self.receiver_phone is not None:
            result['receiver_phone'] = self.receiver_phone
        if self.remark is not None:
            result['remark'] = self.remark
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billing_money') is not None:
            self.billing_money = m.get('billing_money')
        if m.get('buyer_add') is not None:
            self.buyer_add = m.get('buyer_add')
        if m.get('buyer_bank_acc') is not None:
            self.buyer_bank_acc = m.get('buyer_bank_acc')
        if m.get('buyer_bank_add') is not None:
            self.buyer_bank_add = m.get('buyer_bank_add')
        if m.get('buyer_phone') is not None:
            self.buyer_phone = m.get('buyer_phone')
        if m.get('buyer_tax_num') is not None:
            self.buyer_tax_num = m.get('buyer_tax_num')
        if m.get('delivery_address') is not None:
            self.delivery_address = m.get('delivery_address')
        if m.get('delivery_area') is not None:
            self.delivery_area = m.get('delivery_area')
        if m.get('delivery_city') is not None:
            self.delivery_city = m.get('delivery_city')
        if m.get('delivery_province') is not None:
            self.delivery_province = m.get('delivery_province')
        if m.get('delivery_street') is not None:
            self.delivery_street = m.get('delivery_street')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('invoice_material') is not None:
            self.invoice_material = m.get('invoice_material')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('postage') is not None:
            self.postage = m.get('postage')
        if m.get('receiver_name') is not None:
            self.receiver_name = m.get('receiver_name')
        if m.get('receiver_phone') is not None:
            self.receiver_phone = m.get('receiver_phone')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        return self


class HotelOrderDetailInfoResponseBodyModuleOccupantInfoListCostCenterInfoList(TeaModel):
    def __init__(
        self,
        cost_center_id: str = None,
        cost_center_name: str = None,
        cost_center_no: str = None,
        cost_center_prices: int = None,
        cost_center_ratios: int = None,
        cost_center_subject_code: str = None,
        cost_center_subject_name: str = None,
        settle_subject_id: str = None,
        settle_subject_name: str = None,
        settle_subject_no: str = None,
    ):
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.cost_center_no = cost_center_no
        self.cost_center_prices = cost_center_prices
        self.cost_center_ratios = cost_center_ratios
        self.cost_center_subject_code = cost_center_subject_code
        self.cost_center_subject_name = cost_center_subject_name
        self.settle_subject_id = settle_subject_id
        self.settle_subject_name = settle_subject_name
        self.settle_subject_no = settle_subject_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_no is not None:
            result['cost_center_no'] = self.cost_center_no
        if self.cost_center_prices is not None:
            result['cost_center_prices'] = self.cost_center_prices
        if self.cost_center_ratios is not None:
            result['cost_center_ratios'] = self.cost_center_ratios
        if self.cost_center_subject_code is not None:
            result['cost_center_subject_code'] = self.cost_center_subject_code
        if self.cost_center_subject_name is not None:
            result['cost_center_subject_name'] = self.cost_center_subject_name
        if self.settle_subject_id is not None:
            result['settle_subject_id'] = self.settle_subject_id
        if self.settle_subject_name is not None:
            result['settle_subject_name'] = self.settle_subject_name
        if self.settle_subject_no is not None:
            result['settle_subject_no'] = self.settle_subject_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_no') is not None:
            self.cost_center_no = m.get('cost_center_no')
        if m.get('cost_center_prices') is not None:
            self.cost_center_prices = m.get('cost_center_prices')
        if m.get('cost_center_ratios') is not None:
            self.cost_center_ratios = m.get('cost_center_ratios')
        if m.get('cost_center_subject_code') is not None:
            self.cost_center_subject_code = m.get('cost_center_subject_code')
        if m.get('cost_center_subject_name') is not None:
            self.cost_center_subject_name = m.get('cost_center_subject_name')
        if m.get('settle_subject_id') is not None:
            self.settle_subject_id = m.get('settle_subject_id')
        if m.get('settle_subject_name') is not None:
            self.settle_subject_name = m.get('settle_subject_name')
        if m.get('settle_subject_no') is not None:
            self.settle_subject_no = m.get('settle_subject_no')
        return self


class HotelOrderDetailInfoResponseBodyModuleOccupantInfoList(TeaModel):
    def __init__(
        self,
        card_no: str = None,
        card_type: int = None,
        cost_center_info_list: List[HotelOrderDetailInfoResponseBodyModuleOccupantInfoListCostCenterInfoList] = None,
        customer_type: int = None,
        department_id: str = None,
        department_name: str = None,
        email: str = None,
        employee_type: int = None,
        first_name: str = None,
        is_booker: bool = None,
        last_name: str = None,
        name: str = None,
        phone: str = None,
        room_no: int = None,
        selected: bool = None,
        staff_no: str = None,
        user_type: int = None,
    ):
        self.card_no = card_no
        self.card_type = card_type
        self.cost_center_info_list = cost_center_info_list
        self.customer_type = customer_type
        self.department_id = department_id
        self.department_name = department_name
        self.email = email
        self.employee_type = employee_type
        self.first_name = first_name
        self.is_booker = is_booker
        self.last_name = last_name
        self.name = name
        self.phone = phone
        self.room_no = room_no
        self.selected = selected
        self.staff_no = staff_no
        self.user_type = user_type

    def validate(self):
        if self.cost_center_info_list:
            for k in self.cost_center_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.card_no is not None:
            result['card_no'] = self.card_no
        if self.card_type is not None:
            result['card_type'] = self.card_type
        result['cost_center_info_list'] = []
        if self.cost_center_info_list is not None:
            for k in self.cost_center_info_list:
                result['cost_center_info_list'].append(k.to_map() if k else None)
        if self.customer_type is not None:
            result['customer_type'] = self.customer_type
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.department_name is not None:
            result['department_name'] = self.department_name
        if self.email is not None:
            result['email'] = self.email
        if self.employee_type is not None:
            result['employee_type'] = self.employee_type
        if self.first_name is not None:
            result['first_name'] = self.first_name
        if self.is_booker is not None:
            result['is_booker'] = self.is_booker
        if self.last_name is not None:
            result['last_name'] = self.last_name
        if self.name is not None:
            result['name'] = self.name
        if self.phone is not None:
            result['phone'] = self.phone
        if self.room_no is not None:
            result['room_no'] = self.room_no
        if self.selected is not None:
            result['selected'] = self.selected
        if self.staff_no is not None:
            result['staff_no'] = self.staff_no
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('card_no') is not None:
            self.card_no = m.get('card_no')
        if m.get('card_type') is not None:
            self.card_type = m.get('card_type')
        self.cost_center_info_list = []
        if m.get('cost_center_info_list') is not None:
            for k in m.get('cost_center_info_list'):
                temp_model = HotelOrderDetailInfoResponseBodyModuleOccupantInfoListCostCenterInfoList()
                self.cost_center_info_list.append(temp_model.from_map(k))
        if m.get('customer_type') is not None:
            self.customer_type = m.get('customer_type')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('department_name') is not None:
            self.department_name = m.get('department_name')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('employee_type') is not None:
            self.employee_type = m.get('employee_type')
        if m.get('first_name') is not None:
            self.first_name = m.get('first_name')
        if m.get('is_booker') is not None:
            self.is_booker = m.get('is_booker')
        if m.get('last_name') is not None:
            self.last_name = m.get('last_name')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        if m.get('selected') is not None:
            self.selected = m.get('selected')
        if m.get('staff_no') is not None:
            self.staff_no = m.get('staff_no')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class HotelOrderDetailInfoResponseBodyModuleRoomNightPriceInfoList(TeaModel):
    def __init__(
        self,
        board: str = None,
        board_num: int = None,
        check_in: str = None,
        rate_plan_id: str = None,
        rate_plan_name: str = None,
        room_id: str = None,
        room_name: str = None,
        room_price: int = None,
    ):
        self.board = board
        self.board_num = board_num
        self.check_in = check_in
        self.rate_plan_id = rate_plan_id
        self.rate_plan_name = rate_plan_name
        self.room_id = room_id
        self.room_name = room_name
        self.room_price = room_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.board is not None:
            result['board'] = self.board
        if self.board_num is not None:
            result['board_num'] = self.board_num
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.rate_plan_name is not None:
            result['rate_plan_name'] = self.rate_plan_name
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_name is not None:
            result['room_name'] = self.room_name
        if self.room_price is not None:
            result['room_price'] = self.room_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('board') is not None:
            self.board = m.get('board')
        if m.get('board_num') is not None:
            self.board_num = m.get('board_num')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('rate_plan_name') is not None:
            self.rate_plan_name = m.get('rate_plan_name')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_name') is not None:
            self.room_name = m.get('room_name')
        if m.get('room_price') is not None:
            self.room_price = m.get('room_price')
        return self


class HotelOrderDetailInfoResponseBodyModule(TeaModel):
    def __init__(
        self,
        actual_check_in_time: str = None,
        actual_check_out_time: str = None,
        btrip_hotel_cancel_policy_dto: HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTO = None,
        btrip_order_id: str = None,
        cancel_fine: int = None,
        cancel_info: HotelOrderDetailInfoResponseBodyModuleCancelInfo = None,
        check_in: str = None,
        check_out: str = None,
        confirm_order_time: str = None,
        contract_name: str = None,
        contract_tel: str = None,
        create_order_time: str = None,
        early_arrival_time: str = None,
        early_departure: bool = None,
        guest_count: int = None,
        hotel_detail_info: HotelOrderDetailInfoResponseBodyModuleHotelDetailInfo = None,
        hotel_sale_order_room_infos: List[HotelOrderDetailInfoResponseBodyModuleHotelSaleOrderRoomInfos] = None,
        invoice_info: HotelOrderDetailInfoResponseBodyModuleInvoiceInfo = None,
        item_id: str = None,
        last_arrival_time: str = None,
        occupant_info_list: List[HotelOrderDetailInfoResponseBodyModuleOccupantInfoList] = None,
        order_status: int = None,
        order_status_desc: str = None,
        out_confirm_code: str = None,
        pay_time: str = None,
        product_type: int = None,
        purchase_order_id: str = None,
        refund_price: int = None,
        refund_reason: str = None,
        refund_service_fee: int = None,
        room_night_price_info_list: List[HotelOrderDetailInfoResponseBodyModuleRoomNightPriceInfoList] = None,
        room_number: int = None,
        room_type_name: str = None,
        seller_id: str = None,
        seller_name: str = None,
        service_fee: int = None,
        settle_type: str = None,
        supplier_order_id: str = None,
        total_price: int = None,
    ):
        self.actual_check_in_time = actual_check_in_time
        self.actual_check_out_time = actual_check_out_time
        self.btrip_hotel_cancel_policy_dto = btrip_hotel_cancel_policy_dto
        self.btrip_order_id = btrip_order_id
        self.cancel_fine = cancel_fine
        self.cancel_info = cancel_info
        self.check_in = check_in
        self.check_out = check_out
        self.confirm_order_time = confirm_order_time
        self.contract_name = contract_name
        self.contract_tel = contract_tel
        self.create_order_time = create_order_time
        self.early_arrival_time = early_arrival_time
        self.early_departure = early_departure
        self.guest_count = guest_count
        self.hotel_detail_info = hotel_detail_info
        self.hotel_sale_order_room_infos = hotel_sale_order_room_infos
        self.invoice_info = invoice_info
        self.item_id = item_id
        self.last_arrival_time = last_arrival_time
        self.occupant_info_list = occupant_info_list
        self.order_status = order_status
        self.order_status_desc = order_status_desc
        self.out_confirm_code = out_confirm_code
        self.pay_time = pay_time
        self.product_type = product_type
        self.purchase_order_id = purchase_order_id
        self.refund_price = refund_price
        self.refund_reason = refund_reason
        self.refund_service_fee = refund_service_fee
        self.room_night_price_info_list = room_night_price_info_list
        self.room_number = room_number
        self.room_type_name = room_type_name
        self.seller_id = seller_id
        self.seller_name = seller_name
        self.service_fee = service_fee
        self.settle_type = settle_type
        self.supplier_order_id = supplier_order_id
        self.total_price = total_price

    def validate(self):
        if self.btrip_hotel_cancel_policy_dto:
            self.btrip_hotel_cancel_policy_dto.validate()
        if self.cancel_info:
            self.cancel_info.validate()
        if self.hotel_detail_info:
            self.hotel_detail_info.validate()
        if self.hotel_sale_order_room_infos:
            for k in self.hotel_sale_order_room_infos:
                if k:
                    k.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.occupant_info_list:
            for k in self.occupant_info_list:
                if k:
                    k.validate()
        if self.room_night_price_info_list:
            for k in self.room_night_price_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actual_check_in_time is not None:
            result['actual_check_in_time'] = self.actual_check_in_time
        if self.actual_check_out_time is not None:
            result['actual_check_out_time'] = self.actual_check_out_time
        if self.btrip_hotel_cancel_policy_dto is not None:
            result['btrip_hotel_cancel_policy_d_t_o'] = self.btrip_hotel_cancel_policy_dto.to_map()
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.cancel_fine is not None:
            result['cancel_fine'] = self.cancel_fine
        if self.cancel_info is not None:
            result['cancel_info'] = self.cancel_info.to_map()
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.confirm_order_time is not None:
            result['confirm_order_time'] = self.confirm_order_time
        if self.contract_name is not None:
            result['contract_name'] = self.contract_name
        if self.contract_tel is not None:
            result['contract_tel'] = self.contract_tel
        if self.create_order_time is not None:
            result['create_order_time'] = self.create_order_time
        if self.early_arrival_time is not None:
            result['early_arrival_time'] = self.early_arrival_time
        if self.early_departure is not None:
            result['early_departure'] = self.early_departure
        if self.guest_count is not None:
            result['guest_count'] = self.guest_count
        if self.hotel_detail_info is not None:
            result['hotel_detail_info'] = self.hotel_detail_info.to_map()
        result['hotel_sale_order_room_infos'] = []
        if self.hotel_sale_order_room_infos is not None:
            for k in self.hotel_sale_order_room_infos:
                result['hotel_sale_order_room_infos'].append(k.to_map() if k else None)
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.last_arrival_time is not None:
            result['last_arrival_time'] = self.last_arrival_time
        result['occupant_info_list'] = []
        if self.occupant_info_list is not None:
            for k in self.occupant_info_list:
                result['occupant_info_list'].append(k.to_map() if k else None)
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.out_confirm_code is not None:
            result['out_confirm_code'] = self.out_confirm_code
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.product_type is not None:
            result['product_type'] = self.product_type
        if self.purchase_order_id is not None:
            result['purchase_order_id'] = self.purchase_order_id
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.refund_service_fee is not None:
            result['refund_service_fee'] = self.refund_service_fee
        result['room_night_price_info_list'] = []
        if self.room_night_price_info_list is not None:
            for k in self.room_night_price_info_list:
                result['room_night_price_info_list'].append(k.to_map() if k else None)
        if self.room_number is not None:
            result['room_number'] = self.room_number
        if self.room_type_name is not None:
            result['room_type_name'] = self.room_type_name
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.seller_name is not None:
            result['seller_name'] = self.seller_name
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settle_type is not None:
            result['settle_type'] = self.settle_type
        if self.supplier_order_id is not None:
            result['supplier_order_id'] = self.supplier_order_id
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('actual_check_in_time') is not None:
            self.actual_check_in_time = m.get('actual_check_in_time')
        if m.get('actual_check_out_time') is not None:
            self.actual_check_out_time = m.get('actual_check_out_time')
        if m.get('btrip_hotel_cancel_policy_d_t_o') is not None:
            temp_model = HotelOrderDetailInfoResponseBodyModuleBtripHotelCancelPolicyDTO()
            self.btrip_hotel_cancel_policy_dto = temp_model.from_map(m['btrip_hotel_cancel_policy_d_t_o'])
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('cancel_fine') is not None:
            self.cancel_fine = m.get('cancel_fine')
        if m.get('cancel_info') is not None:
            temp_model = HotelOrderDetailInfoResponseBodyModuleCancelInfo()
            self.cancel_info = temp_model.from_map(m['cancel_info'])
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('confirm_order_time') is not None:
            self.confirm_order_time = m.get('confirm_order_time')
        if m.get('contract_name') is not None:
            self.contract_name = m.get('contract_name')
        if m.get('contract_tel') is not None:
            self.contract_tel = m.get('contract_tel')
        if m.get('create_order_time') is not None:
            self.create_order_time = m.get('create_order_time')
        if m.get('early_arrival_time') is not None:
            self.early_arrival_time = m.get('early_arrival_time')
        if m.get('early_departure') is not None:
            self.early_departure = m.get('early_departure')
        if m.get('guest_count') is not None:
            self.guest_count = m.get('guest_count')
        if m.get('hotel_detail_info') is not None:
            temp_model = HotelOrderDetailInfoResponseBodyModuleHotelDetailInfo()
            self.hotel_detail_info = temp_model.from_map(m['hotel_detail_info'])
        self.hotel_sale_order_room_infos = []
        if m.get('hotel_sale_order_room_infos') is not None:
            for k in m.get('hotel_sale_order_room_infos'):
                temp_model = HotelOrderDetailInfoResponseBodyModuleHotelSaleOrderRoomInfos()
                self.hotel_sale_order_room_infos.append(temp_model.from_map(k))
        if m.get('invoice_info') is not None:
            temp_model = HotelOrderDetailInfoResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('last_arrival_time') is not None:
            self.last_arrival_time = m.get('last_arrival_time')
        self.occupant_info_list = []
        if m.get('occupant_info_list') is not None:
            for k in m.get('occupant_info_list'):
                temp_model = HotelOrderDetailInfoResponseBodyModuleOccupantInfoList()
                self.occupant_info_list.append(temp_model.from_map(k))
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('out_confirm_code') is not None:
            self.out_confirm_code = m.get('out_confirm_code')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('product_type') is not None:
            self.product_type = m.get('product_type')
        if m.get('purchase_order_id') is not None:
            self.purchase_order_id = m.get('purchase_order_id')
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('refund_service_fee') is not None:
            self.refund_service_fee = m.get('refund_service_fee')
        self.room_night_price_info_list = []
        if m.get('room_night_price_info_list') is not None:
            for k in m.get('room_night_price_info_list'):
                temp_model = HotelOrderDetailInfoResponseBodyModuleRoomNightPriceInfoList()
                self.room_night_price_info_list.append(temp_model.from_map(k))
        if m.get('room_number') is not None:
            self.room_number = m.get('room_number')
        if m.get('room_type_name') is not None:
            self.room_type_name = m.get('room_type_name')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('seller_name') is not None:
            self.seller_name = m.get('seller_name')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settle_type') is not None:
            self.settle_type = m.get('settle_type')
        if m.get('supplier_order_id') is not None:
            self.supplier_order_id = m.get('supplier_order_id')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class HotelOrderDetailInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelOrderDetailInfoResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderDetailInfoResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderDetailInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelOrderDetailInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderDetailInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderInfoQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderInfoQueryResponseBodyModuleBaseOrderInfo(TeaModel):
    def __init__(
        self,
        book_mode: str = None,
        booker_id: str = None,
        booker_name: str = None,
        btrip_corp_id: str = None,
        category: int = None,
        check_in_time: int = None,
        check_out_time: int = None,
        is_agreement_price: bool = None,
        nights: int = None,
        order_create_time: int = None,
        order_id: int = None,
        order_status: int = None,
        order_status_desc: str = None,
        pay_status: int = None,
        pay_time: int = None,
        room_num: int = None,
        settle_type: int = None,
        trip_mode: int = None,
    ):
        self.book_mode = book_mode
        self.booker_id = booker_id
        self.booker_name = booker_name
        self.btrip_corp_id = btrip_corp_id
        self.category = category
        self.check_in_time = check_in_time
        self.check_out_time = check_out_time
        self.is_agreement_price = is_agreement_price
        self.nights = nights
        self.order_create_time = order_create_time
        self.order_id = order_id
        self.order_status = order_status
        self.order_status_desc = order_status_desc
        self.pay_status = pay_status
        self.pay_time = pay_time
        self.room_num = room_num
        self.settle_type = settle_type
        self.trip_mode = trip_mode

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.book_mode is not None:
            result['book_mode'] = self.book_mode
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.btrip_corp_id is not None:
            result['btrip_corp_id'] = self.btrip_corp_id
        if self.category is not None:
            result['category'] = self.category
        if self.check_in_time is not None:
            result['check_in_time'] = self.check_in_time
        if self.check_out_time is not None:
            result['check_out_time'] = self.check_out_time
        if self.is_agreement_price is not None:
            result['is_agreement_price'] = self.is_agreement_price
        if self.nights is not None:
            result['nights'] = self.nights
        if self.order_create_time is not None:
            result['order_create_time'] = self.order_create_time
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.settle_type is not None:
            result['settle_type'] = self.settle_type
        if self.trip_mode is not None:
            result['trip_mode'] = self.trip_mode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('book_mode') is not None:
            self.book_mode = m.get('book_mode')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('btrip_corp_id') is not None:
            self.btrip_corp_id = m.get('btrip_corp_id')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('check_in_time') is not None:
            self.check_in_time = m.get('check_in_time')
        if m.get('check_out_time') is not None:
            self.check_out_time = m.get('check_out_time')
        if m.get('is_agreement_price') is not None:
            self.is_agreement_price = m.get('is_agreement_price')
        if m.get('nights') is not None:
            self.nights = m.get('nights')
        if m.get('order_create_time') is not None:
            self.order_create_time = m.get('order_create_time')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('settle_type') is not None:
            self.settle_type = m.get('settle_type')
        if m.get('trip_mode') is not None:
            self.trip_mode = m.get('trip_mode')
        return self


class HotelOrderInfoQueryResponseBodyModuleBookerInfoDepartment(TeaModel):
    def __init__(
        self,
        cascade_dept_mask: str = None,
        cascade_dept_name: str = None,
        depart_id: str = None,
        depart_name: str = None,
        out_depart_id: str = None,
    ):
        self.cascade_dept_mask = cascade_dept_mask
        self.cascade_dept_name = cascade_dept_name
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.out_depart_id = out_depart_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cascade_dept_mask is not None:
            result['cascade_dept_mask'] = self.cascade_dept_mask
        if self.cascade_dept_name is not None:
            result['cascade_dept_name'] = self.cascade_dept_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.out_depart_id is not None:
            result['out_depart_id'] = self.out_depart_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cascade_dept_mask') is not None:
            self.cascade_dept_mask = m.get('cascade_dept_mask')
        if m.get('cascade_dept_name') is not None:
            self.cascade_dept_name = m.get('cascade_dept_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('out_depart_id') is not None:
            self.out_depart_id = m.get('out_depart_id')
        return self


class HotelOrderInfoQueryResponseBodyModuleBookerInfo(TeaModel):
    def __init__(
        self,
        booker_role: str = None,
        contact_email: str = None,
        contact_phone: str = None,
        corp_id: str = None,
        department: HotelOrderInfoQueryResponseBodyModuleBookerInfoDepartment = None,
        en_name: str = None,
        job_no: str = None,
        need_apply: bool = None,
        real_name: str = None,
        user_id: str = None,
    ):
        self.booker_role = booker_role
        self.contact_email = contact_email
        self.contact_phone = contact_phone
        self.corp_id = corp_id
        self.department = department
        self.en_name = en_name
        self.job_no = job_no
        self.need_apply = need_apply
        self.real_name = real_name
        self.user_id = user_id

    def validate(self):
        if self.department:
            self.department.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.booker_role is not None:
            result['booker_role'] = self.booker_role
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.department is not None:
            result['department'] = self.department.to_map()
        if self.en_name is not None:
            result['en_name'] = self.en_name
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.need_apply is not None:
            result['need_apply'] = self.need_apply
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('booker_role') is not None:
            self.booker_role = m.get('booker_role')
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('department') is not None:
            temp_model = HotelOrderInfoQueryResponseBodyModuleBookerInfoDepartment()
            self.department = temp_model.from_map(m['department'])
        if m.get('en_name') is not None:
            self.en_name = m.get('en_name')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('need_apply') is not None:
            self.need_apply = m.get('need_apply')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class HotelOrderInfoQueryResponseBodyModuleHotelInfo(TeaModel):
    def __init__(
        self,
        city_code: str = None,
        city_name: str = None,
        country_code: str = None,
        country_name: str = None,
        district_code: str = None,
        district_name: str = None,
        hotel_address: str = None,
        hotel_brand_code: str = None,
        hotel_brand_name: str = None,
        hotel_group: str = None,
        hotel_id: str = None,
        hotel_name: str = None,
        hotel_name_en: str = None,
        star: str = None,
    ):
        self.city_code = city_code
        self.city_name = city_name
        self.country_code = country_code
        self.country_name = country_name
        self.district_code = district_code
        self.district_name = district_name
        self.hotel_address = hotel_address
        self.hotel_brand_code = hotel_brand_code
        self.hotel_brand_name = hotel_brand_name
        self.hotel_group = hotel_group
        self.hotel_id = hotel_id
        self.hotel_name = hotel_name
        self.hotel_name_en = hotel_name_en
        self.star = star

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.country_code is not None:
            result['country_code'] = self.country_code
        if self.country_name is not None:
            result['country_name'] = self.country_name
        if self.district_code is not None:
            result['district_code'] = self.district_code
        if self.district_name is not None:
            result['district_name'] = self.district_name
        if self.hotel_address is not None:
            result['hotel_address'] = self.hotel_address
        if self.hotel_brand_code is not None:
            result['hotel_brand_code'] = self.hotel_brand_code
        if self.hotel_brand_name is not None:
            result['hotel_brand_name'] = self.hotel_brand_name
        if self.hotel_group is not None:
            result['hotel_group'] = self.hotel_group
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_name_en is not None:
            result['hotel_name_en'] = self.hotel_name_en
        if self.star is not None:
            result['star'] = self.star
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('country_code') is not None:
            self.country_code = m.get('country_code')
        if m.get('country_name') is not None:
            self.country_name = m.get('country_name')
        if m.get('district_code') is not None:
            self.district_code = m.get('district_code')
        if m.get('district_name') is not None:
            self.district_name = m.get('district_name')
        if m.get('hotel_address') is not None:
            self.hotel_address = m.get('hotel_address')
        if m.get('hotel_brand_code') is not None:
            self.hotel_brand_code = m.get('hotel_brand_code')
        if m.get('hotel_brand_name') is not None:
            self.hotel_brand_name = m.get('hotel_brand_name')
        if m.get('hotel_group') is not None:
            self.hotel_group = m.get('hotel_group')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_name_en') is not None:
            self.hotel_name_en = m.get('hotel_name_en')
        if m.get('star') is not None:
            self.star = m.get('star')
        return self


class HotelOrderInfoQueryResponseBodyModuleHotelOrderFeeInfo(TeaModel):
    def __init__(
        self,
        order_amount: int = None,
        other_fee: int = None,
        pay_amount: int = None,
        promotion_amount: int = None,
        total_room_amount: int = None,
    ):
        self.order_amount = order_amount
        self.other_fee = other_fee
        self.pay_amount = pay_amount
        self.promotion_amount = promotion_amount
        self.total_room_amount = total_room_amount

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_amount is not None:
            result['order_amount'] = self.order_amount
        if self.other_fee is not None:
            result['other_fee'] = self.other_fee
        if self.pay_amount is not None:
            result['pay_amount'] = self.pay_amount
        if self.promotion_amount is not None:
            result['promotion_amount'] = self.promotion_amount
        if self.total_room_amount is not None:
            result['total_room_amount'] = self.total_room_amount
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_amount') is not None:
            self.order_amount = m.get('order_amount')
        if m.get('other_fee') is not None:
            self.other_fee = m.get('other_fee')
        if m.get('pay_amount') is not None:
            self.pay_amount = m.get('pay_amount')
        if m.get('promotion_amount') is not None:
            self.promotion_amount = m.get('promotion_amount')
        if m.get('total_room_amount') is not None:
            self.total_room_amount = m.get('total_room_amount')
        return self


class HotelOrderInfoQueryResponseBodyModuleHotelOrderRefundInfo(TeaModel):
    def __init__(
        self,
        cancel_fine: int = None,
        refund_apply_id: int = None,
        refund_end_time: int = None,
        refund_price: int = None,
        refund_reason: str = None,
        refund_start_time: int = None,
        refund_type: int = None,
    ):
        self.cancel_fine = cancel_fine
        self.refund_apply_id = refund_apply_id
        self.refund_end_time = refund_end_time
        self.refund_price = refund_price
        self.refund_reason = refund_reason
        self.refund_start_time = refund_start_time
        self.refund_type = refund_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_fine is not None:
            result['cancel_fine'] = self.cancel_fine
        if self.refund_apply_id is not None:
            result['refund_apply_id'] = self.refund_apply_id
        if self.refund_end_time is not None:
            result['refund_end_time'] = self.refund_end_time
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.refund_start_time is not None:
            result['refund_start_time'] = self.refund_start_time
        if self.refund_type is not None:
            result['refund_type'] = self.refund_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_fine') is not None:
            self.cancel_fine = m.get('cancel_fine')
        if m.get('refund_apply_id') is not None:
            self.refund_apply_id = m.get('refund_apply_id')
        if m.get('refund_end_time') is not None:
            self.refund_end_time = m.get('refund_end_time')
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('refund_start_time') is not None:
            self.refund_start_time = m.get('refund_start_time')
        if m.get('refund_type') is not None:
            self.refund_type = m.get('refund_type')
        return self


class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfoExceedApply(TeaModel):
    def __init__(
        self,
        exceed_reason: str = None,
        exceed_type: int = None,
        flow_no: int = None,
        id: int = None,
    ):
        self.exceed_reason = exceed_reason
        self.exceed_type = exceed_type
        self.flow_no = flow_no
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.exceed_type is not None:
            result['exceed_type'] = self.exceed_type
        if self.flow_no is not None:
            result['flow_no'] = self.flow_no
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('exceed_type') is not None:
            self.exceed_type = m.get('exceed_type')
        if m.get('flow_no') is not None:
            self.flow_no = m.get('flow_no')
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfo(TeaModel):
    def __init__(
        self,
        apply_business_id: str = None,
        apply_business_name: str = None,
        apply_id: str = None,
        exceed_apply: List[HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfoExceedApply] = None,
        itinerary_no: str = None,
    ):
        self.apply_business_id = apply_business_id
        self.apply_business_name = apply_business_name
        self.apply_id = apply_id
        self.exceed_apply = exceed_apply
        self.itinerary_no = itinerary_no

    def validate(self):
        if self.exceed_apply:
            for k in self.exceed_apply:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_business_id is not None:
            result['apply_business_id'] = self.apply_business_id
        if self.apply_business_name is not None:
            result['apply_business_name'] = self.apply_business_name
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        result['exceed_apply'] = []
        if self.exceed_apply is not None:
            for k in self.exceed_apply:
                result['exceed_apply'].append(k.to_map() if k else None)
        if self.itinerary_no is not None:
            result['itinerary_no'] = self.itinerary_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_business_id') is not None:
            self.apply_business_id = m.get('apply_business_id')
        if m.get('apply_business_name') is not None:
            self.apply_business_name = m.get('apply_business_name')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        self.exceed_apply = []
        if m.get('exceed_apply') is not None:
            for k in m.get('exceed_apply'):
                temp_model = HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfoExceedApply()
                self.exceed_apply.append(temp_model.from_map(k))
        if m.get('itinerary_no') is not None:
            self.itinerary_no = m.get('itinerary_no')
        return self


class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosDepartment(TeaModel):
    def __init__(
        self,
        cascade_dept_mask: str = None,
        cascade_dept_name: str = None,
        depart_id: str = None,
        depart_name: str = None,
        out_depart_id: str = None,
    ):
        self.cascade_dept_mask = cascade_dept_mask
        self.cascade_dept_name = cascade_dept_name
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.out_depart_id = out_depart_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cascade_dept_mask is not None:
            result['cascade_dept_mask'] = self.cascade_dept_mask
        if self.cascade_dept_name is not None:
            result['cascade_dept_name'] = self.cascade_dept_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.out_depart_id is not None:
            result['out_depart_id'] = self.out_depart_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cascade_dept_mask') is not None:
            self.cascade_dept_mask = m.get('cascade_dept_mask')
        if m.get('cascade_dept_name') is not None:
            self.cascade_dept_name = m.get('cascade_dept_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('out_depart_id') is not None:
            self.out_depart_id = m.get('out_depart_id')
        return self


class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosTripCostCenter(TeaModel):
    def __init__(
        self,
        cost_center_code: str = None,
        cost_center_id: str = None,
        cost_center_name: str = None,
        external_ext_field: str = None,
        fee_type: int = None,
        invoice_id: int = None,
        invoice_title: str = None,
        project_code: str = None,
        project_title: str = None,
    ):
        self.cost_center_code = cost_center_code
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.external_ext_field = external_ext_field
        self.fee_type = fee_type
        self.invoice_id = invoice_id
        self.invoice_title = invoice_title
        self.project_code = project_code
        self.project_title = project_title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_code is not None:
            result['cost_center_code'] = self.cost_center_code
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.external_ext_field is not None:
            result['external_ext_field'] = self.external_ext_field
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cost_center_code') is not None:
            self.cost_center_code = m.get('cost_center_code')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('external_ext_field') is not None:
            self.external_ext_field = m.get('external_ext_field')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        return self


class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfos(TeaModel):
    def __init__(
        self,
        apply_info: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfo = None,
        cert_no: str = None,
        cert_type: int = None,
        department: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosDepartment = None,
        job_no: str = None,
        telephone: str = None,
        traveler_id: str = None,
        traveler_name: str = None,
        traveler_type: int = None,
        trip_cost_center: HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosTripCostCenter = None,
        user_type: int = None,
    ):
        self.apply_info = apply_info
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.department = department
        self.job_no = job_no
        self.telephone = telephone
        self.traveler_id = traveler_id
        self.traveler_name = traveler_name
        self.traveler_type = traveler_type
        self.trip_cost_center = trip_cost_center
        self.user_type = user_type

    def validate(self):
        if self.apply_info:
            self.apply_info.validate()
        if self.department:
            self.department.validate()
        if self.trip_cost_center:
            self.trip_cost_center.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_info is not None:
            result['apply_info'] = self.apply_info.to_map()
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.department is not None:
            result['department'] = self.department.to_map()
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.telephone is not None:
            result['telephone'] = self.telephone
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.traveler_type is not None:
            result['traveler_type'] = self.traveler_type
        if self.trip_cost_center is not None:
            result['trip_cost_center'] = self.trip_cost_center.to_map()
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_info') is not None:
            temp_model = HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosApplyInfo()
            self.apply_info = temp_model.from_map(m['apply_info'])
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('department') is not None:
            temp_model = HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosDepartment()
            self.department = temp_model.from_map(m['department'])
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('telephone') is not None:
            self.telephone = m.get('telephone')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('traveler_type') is not None:
            self.traveler_type = m.get('traveler_type')
        if m.get('trip_cost_center') is not None:
            temp_model = HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfosTripCostCenter()
            self.trip_cost_center = temp_model.from_map(m['trip_cost_center'])
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class HotelOrderInfoQueryResponseBodyModuleRoomTraverInfo(TeaModel):
    def __init__(
        self,
        live_room_no: str = None,
        room_type_name: str = None,
        traver_infos: List[HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfos] = None,
    ):
        self.live_room_no = live_room_no
        self.room_type_name = room_type_name
        self.traver_infos = traver_infos

    def validate(self):
        if self.traver_infos:
            for k in self.traver_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.live_room_no is not None:
            result['live_room_no'] = self.live_room_no
        if self.room_type_name is not None:
            result['room_type_name'] = self.room_type_name
        result['traver_infos'] = []
        if self.traver_infos is not None:
            for k in self.traver_infos:
                result['traver_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('live_room_no') is not None:
            self.live_room_no = m.get('live_room_no')
        if m.get('room_type_name') is not None:
            self.room_type_name = m.get('room_type_name')
        self.traver_infos = []
        if m.get('traver_infos') is not None:
            for k in m.get('traver_infos'):
                temp_model = HotelOrderInfoQueryResponseBodyModuleRoomTraverInfoTraverInfos()
                self.traver_infos.append(temp_model.from_map(k))
        return self


class HotelOrderInfoQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        base_order_info: HotelOrderInfoQueryResponseBodyModuleBaseOrderInfo = None,
        booker_info: HotelOrderInfoQueryResponseBodyModuleBookerInfo = None,
        hotel_info: HotelOrderInfoQueryResponseBodyModuleHotelInfo = None,
        hotel_order_fee_info: HotelOrderInfoQueryResponseBodyModuleHotelOrderFeeInfo = None,
        hotel_order_refund_info: List[HotelOrderInfoQueryResponseBodyModuleHotelOrderRefundInfo] = None,
        room_traver_info: List[HotelOrderInfoQueryResponseBodyModuleRoomTraverInfo] = None,
    ):
        self.base_order_info = base_order_info
        self.booker_info = booker_info
        self.hotel_info = hotel_info
        self.hotel_order_fee_info = hotel_order_fee_info
        self.hotel_order_refund_info = hotel_order_refund_info
        self.room_traver_info = room_traver_info

    def validate(self):
        if self.base_order_info:
            self.base_order_info.validate()
        if self.booker_info:
            self.booker_info.validate()
        if self.hotel_info:
            self.hotel_info.validate()
        if self.hotel_order_fee_info:
            self.hotel_order_fee_info.validate()
        if self.hotel_order_refund_info:
            for k in self.hotel_order_refund_info:
                if k:
                    k.validate()
        if self.room_traver_info:
            for k in self.room_traver_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.base_order_info is not None:
            result['base_order_info'] = self.base_order_info.to_map()
        if self.booker_info is not None:
            result['booker_info'] = self.booker_info.to_map()
        if self.hotel_info is not None:
            result['hotel_info'] = self.hotel_info.to_map()
        if self.hotel_order_fee_info is not None:
            result['hotel_order_fee_info'] = self.hotel_order_fee_info.to_map()
        result['hotel_order_refund_info'] = []
        if self.hotel_order_refund_info is not None:
            for k in self.hotel_order_refund_info:
                result['hotel_order_refund_info'].append(k.to_map() if k else None)
        result['room_traver_info'] = []
        if self.room_traver_info is not None:
            for k in self.room_traver_info:
                result['room_traver_info'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('base_order_info') is not None:
            temp_model = HotelOrderInfoQueryResponseBodyModuleBaseOrderInfo()
            self.base_order_info = temp_model.from_map(m['base_order_info'])
        if m.get('booker_info') is not None:
            temp_model = HotelOrderInfoQueryResponseBodyModuleBookerInfo()
            self.booker_info = temp_model.from_map(m['booker_info'])
        if m.get('hotel_info') is not None:
            temp_model = HotelOrderInfoQueryResponseBodyModuleHotelInfo()
            self.hotel_info = temp_model.from_map(m['hotel_info'])
        if m.get('hotel_order_fee_info') is not None:
            temp_model = HotelOrderInfoQueryResponseBodyModuleHotelOrderFeeInfo()
            self.hotel_order_fee_info = temp_model.from_map(m['hotel_order_fee_info'])
        self.hotel_order_refund_info = []
        if m.get('hotel_order_refund_info') is not None:
            for k in m.get('hotel_order_refund_info'):
                temp_model = HotelOrderInfoQueryResponseBodyModuleHotelOrderRefundInfo()
                self.hotel_order_refund_info.append(temp_model.from_map(k))
        self.room_traver_info = []
        if m.get('room_traver_info') is not None:
            for k in m.get('room_traver_info'):
                temp_model = HotelOrderInfoQueryResponseBodyModuleRoomTraverInfo()
                self.room_traver_info.append(temp_model.from_map(k))
        return self


class HotelOrderInfoQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelOrderInfoQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderInfoQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderInfoQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelOrderInfoQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderInfoQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderListQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class HotelOrderListQueryRequest(TeaModel):
    def __init__(
        self,
        all_apply: bool = None,
        apply_id: int = None,
        depart_id: str = None,
        end_time: str = None,
        page: int = None,
        page_size: int = None,
        start_time: str = None,
        thirdpart_apply_id: str = None,
        update_end_time: str = None,
        update_start_time: str = None,
        user_id: str = None,
    ):
        self.all_apply = all_apply
        self.apply_id = apply_id
        self.depart_id = depart_id
        self.end_time = end_time
        self.page = page
        self.page_size = page_size
        self.start_time = start_time
        self.thirdpart_apply_id = thirdpart_apply_id
        self.update_end_time = update_end_time
        self.update_start_time = update_start_time
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_apply is not None:
            result['all_apply'] = self.all_apply
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.update_end_time is not None:
            result['update_end_time'] = self.update_end_time
        if self.update_start_time is not None:
            result['update_start_time'] = self.update_start_time
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('all_apply') is not None:
            self.all_apply = m.get('all_apply')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('update_end_time') is not None:
            self.update_end_time = m.get('update_end_time')
        if m.get('update_start_time') is not None:
            self.update_start_time = m.get('update_start_time')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class HotelOrderListQueryResponseBodyModuleCostCenter(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        id: int = None,
        name: str = None,
        number: str = None,
    ):
        self.corp_id = corp_id
        self.id = id
        self.name = name
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class HotelOrderListQueryResponseBodyModuleInvoice(TeaModel):
    def __init__(
        self,
        id: int = None,
        invoice_type: int = None,
        title: str = None,
    ):
        self.id = id
        self.invoice_type = invoice_type
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelOrderListQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(
        self,
        category_code: int = None,
        category_type: int = None,
        gmt_create: str = None,
        passenger_name: str = None,
        pay_type: int = None,
        price: float = None,
        trade_id: str = None,
        type: int = None,
    ):
        self.category_code = category_code
        self.category_type = category_type
        self.gmt_create = gmt_create
        self.passenger_name = passenger_name
        self.pay_type = pay_type
        self.price = price
        self.trade_id = trade_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.category_type is not None:
            result['category_type'] = self.category_type
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('category_type') is not None:
            self.category_type = m.get('category_type')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class HotelOrderListQueryResponseBodyModuleUserAffiliateList(TeaModel):
    def __init__(
        self,
        user_id: str = None,
        user_name: str = None,
    ):
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class HotelOrderListQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        btrip_title: str = None,
        check_in: str = None,
        check_out: str = None,
        city: str = None,
        city_ad_code: str = None,
        contact_name: str = None,
        corp_id: str = None,
        corp_name: str = None,
        cost_center: HotelOrderListQueryResponseBodyModuleCostCenter = None,
        depart_id: str = None,
        depart_name: str = None,
        extend_field: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        guest: str = None,
        hotel_name: str = None,
        hotel_support_vat_invoice_type: int = None,
        id: int = None,
        invoice: HotelOrderListQueryResponseBodyModuleInvoice = None,
        night: int = None,
        order_status: int = None,
        order_status_desc: str = None,
        order_type: int = None,
        order_type_desc: str = None,
        price_info_list: List[HotelOrderListQueryResponseBodyModulePriceInfoList] = None,
        project_code: str = None,
        project_id: int = None,
        project_title: str = None,
        room_num: int = None,
        room_type: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
        thirdpart_itinerary_id: str = None,
        thirdpart_project_id: str = None,
        user_affiliate_list: List[HotelOrderListQueryResponseBodyModuleUserAffiliateList] = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_id = apply_id
        self.btrip_title = btrip_title
        self.check_in = check_in
        self.check_out = check_out
        self.city = city
        self.city_ad_code = city_ad_code
        self.contact_name = contact_name
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.cost_center = cost_center
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.extend_field = extend_field
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.guest = guest
        self.hotel_name = hotel_name
        self.hotel_support_vat_invoice_type = hotel_support_vat_invoice_type
        self.id = id
        self.invoice = invoice
        self.night = night
        self.order_status = order_status
        self.order_status_desc = order_status_desc
        self.order_type = order_type
        self.order_type_desc = order_type_desc
        self.price_info_list = price_info_list
        self.project_code = project_code
        self.project_id = project_id
        self.project_title = project_title
        self.room_num = room_num
        self.room_type = room_type
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.thirdpart_project_id = thirdpart_project_id
        self.user_affiliate_list = user_affiliate_list
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.cost_center:
            self.cost_center.validate()
        if self.invoice:
            self.invoice.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.user_affiliate_list:
            for k in self.user_affiliate_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city is not None:
            result['city'] = self.city
        if self.city_ad_code is not None:
            result['city_ad_code'] = self.city_ad_code
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center.to_map()
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.guest is not None:
            result['guest'] = self.guest
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_support_vat_invoice_type is not None:
            result['hotel_support_vat_invoice_type'] = self.hotel_support_vat_invoice_type
        if self.id is not None:
            result['id'] = self.id
        if self.invoice is not None:
            result['invoice'] = self.invoice.to_map()
        if self.night is not None:
            result['night'] = self.night
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.order_type is not None:
            result['order_type'] = self.order_type
        if self.order_type_desc is not None:
            result['order_type_desc'] = self.order_type_desc
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.room_type is not None:
            result['room_type'] = self.room_type
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        result['user_affiliate_list'] = []
        if self.user_affiliate_list is not None:
            for k in self.user_affiliate_list:
                result['user_affiliate_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('city_ad_code') is not None:
            self.city_ad_code = m.get('city_ad_code')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('cost_center') is not None:
            temp_model = HotelOrderListQueryResponseBodyModuleCostCenter()
            self.cost_center = temp_model.from_map(m['cost_center'])
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('guest') is not None:
            self.guest = m.get('guest')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_support_vat_invoice_type') is not None:
            self.hotel_support_vat_invoice_type = m.get('hotel_support_vat_invoice_type')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice') is not None:
            temp_model = HotelOrderListQueryResponseBodyModuleInvoice()
            self.invoice = temp_model.from_map(m['invoice'])
        if m.get('night') is not None:
            self.night = m.get('night')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('order_type') is not None:
            self.order_type = m.get('order_type')
        if m.get('order_type_desc') is not None:
            self.order_type_desc = m.get('order_type_desc')
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = HotelOrderListQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        self.user_affiliate_list = []
        if m.get('user_affiliate_list') is not None:
            for k in m.get('user_affiliate_list'):
                temp_model = HotelOrderListQueryResponseBodyModuleUserAffiliateList()
                self.user_affiliate_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class HotelOrderListQueryResponseBodyPageInfo(TeaModel):
    def __init__(
        self,
        page: int = None,
        page_size: int = None,
        total_number: int = None,
    ):
        self.page = page
        self.page_size = page_size
        self.total_number = total_number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_number is not None:
            result['total_number'] = self.total_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_number') is not None:
            self.total_number = m.get('total_number')
        return self


class HotelOrderListQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[HotelOrderListQueryResponseBodyModule] = None,
        page_info: HotelOrderListQueryResponseBodyPageInfo = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.page_info = page_info
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()
        if self.page_info:
            self.page_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.page_info is not None:
            result['page_info'] = self.page_info.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = HotelOrderListQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('page_info') is not None:
            temp_model = HotelOrderListQueryResponseBodyPageInfo()
            self.page_info = temp_model.from_map(m['page_info'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderListQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelOrderListQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderPayHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderPayRequest(TeaModel):
    def __init__(
        self,
        btrip_order_id: int = None,
        btrip_user_id: str = None,
        company_pay_fee: int = None,
        person_pay_fee: int = None,
        third_pay_account: str = None,
        third_trade_no: str = None,
        total_price: int = None,
    ):
        # 供应商订单号（取自创单返回的订单号）
        # 
        # This parameter is required.
        self.btrip_order_id = btrip_order_id
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.company_pay_fee = company_pay_fee
        # This parameter is required.
        self.person_pay_fee = person_pay_fee
        self.third_pay_account = third_pay_account
        self.third_trade_no = third_trade_no
        # This parameter is required.
        self.total_price = total_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.company_pay_fee is not None:
            result['company_pay_fee'] = self.company_pay_fee
        if self.person_pay_fee is not None:
            result['person_pay_fee'] = self.person_pay_fee
        if self.third_pay_account is not None:
            result['third_pay_account'] = self.third_pay_account
        if self.third_trade_no is not None:
            result['third_trade_no'] = self.third_trade_no
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('company_pay_fee') is not None:
            self.company_pay_fee = m.get('company_pay_fee')
        if m.get('person_pay_fee') is not None:
            self.person_pay_fee = m.get('person_pay_fee')
        if m.get('third_pay_account') is not None:
            self.third_pay_account = m.get('third_pay_account')
        if m.get('third_trade_no') is not None:
            self.third_trade_no = m.get('third_trade_no')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class HotelOrderPayResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderPayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelOrderPayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderPayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderPreValidateHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelOrderPreValidateRequestDailyList(TeaModel):
    def __init__(
        self,
        board: str = None,
        price: int = None,
        rate_start_time: str = None,
        room_count: int = None,
    ):
        self.board = board
        self.price = price
        self.rate_start_time = rate_start_time
        self.room_count = room_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.board is not None:
            result['board'] = self.board
        if self.price is not None:
            result['price'] = self.price
        if self.rate_start_time is not None:
            result['rate_start_time'] = self.rate_start_time
        if self.room_count is not None:
            result['room_count'] = self.room_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('board') is not None:
            self.board = m.get('board')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('rate_start_time') is not None:
            self.rate_start_time = m.get('rate_start_time')
        if m.get('room_count') is not None:
            self.room_count = m.get('room_count')
        return self


class HotelOrderPreValidateRequestOccupantInfoList(TeaModel):
    def __init__(
        self,
        card_no: str = None,
        card_type: int = None,
        name: str = None,
        phone: str = None,
        staff_no: str = None,
        user_type: int = None,
    ):
        self.card_no = card_no
        self.card_type = card_type
        self.name = name
        self.phone = phone
        self.staff_no = staff_no
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.card_no is not None:
            result['card_no'] = self.card_no
        if self.card_type is not None:
            result['card_type'] = self.card_type
        if self.name is not None:
            result['name'] = self.name
        if self.phone is not None:
            result['phone'] = self.phone
        if self.staff_no is not None:
            result['staff_no'] = self.staff_no
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('card_no') is not None:
            self.card_no = m.get('card_no')
        if m.get('card_type') is not None:
            self.card_type = m.get('card_type')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('staff_no') is not None:
            self.staff_no = m.get('staff_no')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class HotelOrderPreValidateRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        check_in: str = None,
        check_out: str = None,
        daily_list: List[HotelOrderPreValidateRequestDailyList] = None,
        item_id: int = None,
        number_of_adults_per_room: int = None,
        occupant_info_list: List[HotelOrderPreValidateRequestOccupantInfoList] = None,
        rate_plan_id: int = None,
        room_id: int = None,
        room_num: int = None,
        search_room_price: int = None,
        seller_id: int = None,
        shid: int = None,
    ):
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.check_in = check_in
        # This parameter is required.
        self.check_out = check_out
        # This parameter is required.
        self.daily_list = daily_list
        # This parameter is required.
        self.item_id = item_id
        self.number_of_adults_per_room = number_of_adults_per_room
        self.occupant_info_list = occupant_info_list
        # This parameter is required.
        self.rate_plan_id = rate_plan_id
        # This parameter is required.
        self.room_id = room_id
        # This parameter is required.
        self.room_num = room_num
        # This parameter is required.
        self.search_room_price = search_room_price
        # This parameter is required.
        self.seller_id = seller_id
        # This parameter is required.
        self.shid = shid

    def validate(self):
        if self.daily_list:
            for k in self.daily_list:
                if k:
                    k.validate()
        if self.occupant_info_list:
            for k in self.occupant_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        result['daily_list'] = []
        if self.daily_list is not None:
            for k in self.daily_list:
                result['daily_list'].append(k.to_map() if k else None)
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.number_of_adults_per_room is not None:
            result['number_of_adults_per_room'] = self.number_of_adults_per_room
        result['occupant_info_list'] = []
        if self.occupant_info_list is not None:
            for k in self.occupant_info_list:
                result['occupant_info_list'].append(k.to_map() if k else None)
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.search_room_price is not None:
            result['search_room_price'] = self.search_room_price
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.shid is not None:
            result['shid'] = self.shid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        self.daily_list = []
        if m.get('daily_list') is not None:
            for k in m.get('daily_list'):
                temp_model = HotelOrderPreValidateRequestDailyList()
                self.daily_list.append(temp_model.from_map(k))
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('number_of_adults_per_room') is not None:
            self.number_of_adults_per_room = m.get('number_of_adults_per_room')
        self.occupant_info_list = []
        if m.get('occupant_info_list') is not None:
            for k in m.get('occupant_info_list'):
                temp_model = HotelOrderPreValidateRequestOccupantInfoList()
                self.occupant_info_list.append(temp_model.from_map(k))
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('search_room_price') is not None:
            self.search_room_price = m.get('search_room_price')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('shid') is not None:
            self.shid = m.get('shid')
        return self


class HotelOrderPreValidateShrinkRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        check_in: str = None,
        check_out: str = None,
        daily_list_shrink: str = None,
        item_id: int = None,
        number_of_adults_per_room: int = None,
        occupant_info_list_shrink: str = None,
        rate_plan_id: int = None,
        room_id: int = None,
        room_num: int = None,
        search_room_price: int = None,
        seller_id: int = None,
        shid: int = None,
    ):
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.check_in = check_in
        # This parameter is required.
        self.check_out = check_out
        # This parameter is required.
        self.daily_list_shrink = daily_list_shrink
        # This parameter is required.
        self.item_id = item_id
        self.number_of_adults_per_room = number_of_adults_per_room
        self.occupant_info_list_shrink = occupant_info_list_shrink
        # This parameter is required.
        self.rate_plan_id = rate_plan_id
        # This parameter is required.
        self.room_id = room_id
        # This parameter is required.
        self.room_num = room_num
        # This parameter is required.
        self.search_room_price = search_room_price
        # This parameter is required.
        self.seller_id = seller_id
        # This parameter is required.
        self.shid = shid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.daily_list_shrink is not None:
            result['daily_list'] = self.daily_list_shrink
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.number_of_adults_per_room is not None:
            result['number_of_adults_per_room'] = self.number_of_adults_per_room
        if self.occupant_info_list_shrink is not None:
            result['occupant_info_list'] = self.occupant_info_list_shrink
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.search_room_price is not None:
            result['search_room_price'] = self.search_room_price
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.shid is not None:
            result['shid'] = self.shid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('daily_list') is not None:
            self.daily_list_shrink = m.get('daily_list')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('number_of_adults_per_room') is not None:
            self.number_of_adults_per_room = m.get('number_of_adults_per_room')
        if m.get('occupant_info_list') is not None:
            self.occupant_info_list_shrink = m.get('occupant_info_list')
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('search_room_price') is not None:
            self.search_room_price = m.get('search_room_price')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('shid') is not None:
            self.shid = m.get('shid')
        return self


class HotelOrderPreValidateResponseBodyModulePromotionInfoPromotionDetailInfoList(TeaModel):
    def __init__(
        self,
        check_status: bool = None,
        need_check: bool = None,
        promotion_code: str = None,
        promotion_id: str = None,
        promotion_name: str = None,
        promotion_price: int = None,
        promotion_type: str = None,
    ):
        self.check_status = check_status
        self.need_check = need_check
        self.promotion_code = promotion_code
        self.promotion_id = promotion_id
        self.promotion_name = promotion_name
        self.promotion_price = promotion_price
        self.promotion_type = promotion_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_status is not None:
            result['check_status'] = self.check_status
        if self.need_check is not None:
            result['need_check'] = self.need_check
        if self.promotion_code is not None:
            result['promotion_code'] = self.promotion_code
        if self.promotion_id is not None:
            result['promotion_id'] = self.promotion_id
        if self.promotion_name is not None:
            result['promotion_name'] = self.promotion_name
        if self.promotion_price is not None:
            result['promotion_price'] = self.promotion_price
        if self.promotion_type is not None:
            result['promotion_type'] = self.promotion_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('check_status') is not None:
            self.check_status = m.get('check_status')
        if m.get('need_check') is not None:
            self.need_check = m.get('need_check')
        if m.get('promotion_code') is not None:
            self.promotion_code = m.get('promotion_code')
        if m.get('promotion_id') is not None:
            self.promotion_id = m.get('promotion_id')
        if m.get('promotion_name') is not None:
            self.promotion_name = m.get('promotion_name')
        if m.get('promotion_price') is not None:
            self.promotion_price = m.get('promotion_price')
        if m.get('promotion_type') is not None:
            self.promotion_type = m.get('promotion_type')
        return self


class HotelOrderPreValidateResponseBodyModulePromotionInfo(TeaModel):
    def __init__(
        self,
        ext_attr_map: Dict[str, str] = None,
        promotion_detail_info_list: List[HotelOrderPreValidateResponseBodyModulePromotionInfoPromotionDetailInfoList] = None,
        promotion_total_price: int = None,
    ):
        self.ext_attr_map = ext_attr_map
        self.promotion_detail_info_list = promotion_detail_info_list
        self.promotion_total_price = promotion_total_price

    def validate(self):
        if self.promotion_detail_info_list:
            for k in self.promotion_detail_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_attr_map is not None:
            result['ext_attr_map'] = self.ext_attr_map
        result['promotion_detail_info_list'] = []
        if self.promotion_detail_info_list is not None:
            for k in self.promotion_detail_info_list:
                result['promotion_detail_info_list'].append(k.to_map() if k else None)
        if self.promotion_total_price is not None:
            result['promotion_total_price'] = self.promotion_total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ext_attr_map') is not None:
            self.ext_attr_map = m.get('ext_attr_map')
        self.promotion_detail_info_list = []
        if m.get('promotion_detail_info_list') is not None:
            for k in m.get('promotion_detail_info_list'):
                temp_model = HotelOrderPreValidateResponseBodyModulePromotionInfoPromotionDetailInfoList()
                self.promotion_detail_info_list.append(temp_model.from_map(k))
        if m.get('promotion_total_price') is not None:
            self.promotion_total_price = m.get('promotion_total_price')
        return self


class HotelOrderPreValidateResponseBodyModuleRatePlanDaily(TeaModel):
    def __init__(
        self,
        board: str = None,
        discount_price: str = None,
        max_booking_num: int = None,
        price: int = None,
        rate_start_time: str = None,
        room_count: int = None,
        rounding_discount_price: str = None,
        rounding_price: str = None,
        service_fee: int = None,
    ):
        self.board = board
        self.discount_price = discount_price
        self.max_booking_num = max_booking_num
        self.price = price
        self.rate_start_time = rate_start_time
        self.room_count = room_count
        self.rounding_discount_price = rounding_discount_price
        self.rounding_price = rounding_price
        self.service_fee = service_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.board is not None:
            result['board'] = self.board
        if self.discount_price is not None:
            result['discount_price'] = self.discount_price
        if self.max_booking_num is not None:
            result['max_booking_num'] = self.max_booking_num
        if self.price is not None:
            result['price'] = self.price
        if self.rate_start_time is not None:
            result['rate_start_time'] = self.rate_start_time
        if self.room_count is not None:
            result['room_count'] = self.room_count
        if self.rounding_discount_price is not None:
            result['rounding_discount_price'] = self.rounding_discount_price
        if self.rounding_price is not None:
            result['rounding_price'] = self.rounding_price
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('board') is not None:
            self.board = m.get('board')
        if m.get('discount_price') is not None:
            self.discount_price = m.get('discount_price')
        if m.get('max_booking_num') is not None:
            self.max_booking_num = m.get('max_booking_num')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('rate_start_time') is not None:
            self.rate_start_time = m.get('rate_start_time')
        if m.get('room_count') is not None:
            self.room_count = m.get('room_count')
        if m.get('rounding_discount_price') is not None:
            self.rounding_discount_price = m.get('rounding_discount_price')
        if m.get('rounding_price') is not None:
            self.rounding_price = m.get('rounding_price')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        return self


class HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList(TeaModel):
    def __init__(
        self,
        hour: int = None,
        value: int = None,
    ):
        self.hour = hour
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hour is not None:
            result['hour'] = self.hour
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hour') is not None:
            self.hour = m.get('hour')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTO(TeaModel):
    def __init__(
        self,
        btrip_hotel_cancel_policy_info_dtolist: List[HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList] = None,
        cancel_policy_type: int = None,
    ):
        self.btrip_hotel_cancel_policy_info_dtolist = btrip_hotel_cancel_policy_info_dtolist
        self.cancel_policy_type = cancel_policy_type

    def validate(self):
        if self.btrip_hotel_cancel_policy_info_dtolist:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['btrip_hotel_cancel_policy_info_d_t_o_list'] = []
        if self.btrip_hotel_cancel_policy_info_dtolist is not None:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                result['btrip_hotel_cancel_policy_info_d_t_o_list'].append(k.to_map() if k else None)
        if self.cancel_policy_type is not None:
            result['cancel_policy_type'] = self.cancel_policy_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.btrip_hotel_cancel_policy_info_dtolist = []
        if m.get('btrip_hotel_cancel_policy_info_d_t_o_list') is not None:
            for k in m.get('btrip_hotel_cancel_policy_info_d_t_o_list'):
                temp_model = HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTOBtripHotelCancelPolicyInfoDTOList()
                self.btrip_hotel_cancel_policy_info_dtolist.append(temp_model.from_map(k))
        if m.get('cancel_policy_type') is not None:
            self.cancel_policy_type = m.get('cancel_policy_type')
        return self


class HotelOrderPreValidateResponseBodyModuleRatePlanInfo(TeaModel):
    def __init__(
        self,
        bed_desc: str = None,
        btrip_hotel_cancel_policy_dto: HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTO = None,
        earliest_check_in_time: str = None,
        latest_check_out_time: str = None,
        max_booking_num: int = None,
        max_occupancy_num: int = None,
        need_certificate: bool = None,
        need_email: bool = None,
        need_english_name: bool = None,
        total_order_price: int = None,
        total_room_price: int = None,
    ):
        self.bed_desc = bed_desc
        self.btrip_hotel_cancel_policy_dto = btrip_hotel_cancel_policy_dto
        self.earliest_check_in_time = earliest_check_in_time
        self.latest_check_out_time = latest_check_out_time
        self.max_booking_num = max_booking_num
        self.max_occupancy_num = max_occupancy_num
        self.need_certificate = need_certificate
        self.need_email = need_email
        self.need_english_name = need_english_name
        self.total_order_price = total_order_price
        self.total_room_price = total_room_price

    def validate(self):
        if self.btrip_hotel_cancel_policy_dto:
            self.btrip_hotel_cancel_policy_dto.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_desc is not None:
            result['bed_desc'] = self.bed_desc
        if self.btrip_hotel_cancel_policy_dto is not None:
            result['btrip_hotel_cancel_policy_d_t_o'] = self.btrip_hotel_cancel_policy_dto.to_map()
        if self.earliest_check_in_time is not None:
            result['earliest_check_in_time'] = self.earliest_check_in_time
        if self.latest_check_out_time is not None:
            result['latest_check_out_time'] = self.latest_check_out_time
        if self.max_booking_num is not None:
            result['max_booking_num'] = self.max_booking_num
        if self.max_occupancy_num is not None:
            result['max_occupancy_num'] = self.max_occupancy_num
        if self.need_certificate is not None:
            result['need_certificate'] = self.need_certificate
        if self.need_email is not None:
            result['need_email'] = self.need_email
        if self.need_english_name is not None:
            result['need_english_name'] = self.need_english_name
        if self.total_order_price is not None:
            result['total_order_price'] = self.total_order_price
        if self.total_room_price is not None:
            result['total_room_price'] = self.total_room_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bed_desc') is not None:
            self.bed_desc = m.get('bed_desc')
        if m.get('btrip_hotel_cancel_policy_d_t_o') is not None:
            temp_model = HotelOrderPreValidateResponseBodyModuleRatePlanInfoBtripHotelCancelPolicyDTO()
            self.btrip_hotel_cancel_policy_dto = temp_model.from_map(m['btrip_hotel_cancel_policy_d_t_o'])
        if m.get('earliest_check_in_time') is not None:
            self.earliest_check_in_time = m.get('earliest_check_in_time')
        if m.get('latest_check_out_time') is not None:
            self.latest_check_out_time = m.get('latest_check_out_time')
        if m.get('max_booking_num') is not None:
            self.max_booking_num = m.get('max_booking_num')
        if m.get('max_occupancy_num') is not None:
            self.max_occupancy_num = m.get('max_occupancy_num')
        if m.get('need_certificate') is not None:
            self.need_certificate = m.get('need_certificate')
        if m.get('need_email') is not None:
            self.need_email = m.get('need_email')
        if m.get('need_english_name') is not None:
            self.need_english_name = m.get('need_english_name')
        if m.get('total_order_price') is not None:
            self.total_order_price = m.get('total_order_price')
        if m.get('total_room_price') is not None:
            self.total_room_price = m.get('total_room_price')
        return self


class HotelOrderPreValidateResponseBodyModule(TeaModel):
    def __init__(
        self,
        extend_info: str = None,
        itinerary_no: str = None,
        promotion_info: HotelOrderPreValidateResponseBodyModulePromotionInfo = None,
        rate_plan_daily: List[HotelOrderPreValidateResponseBodyModuleRatePlanDaily] = None,
        rate_plan_id: int = None,
        rate_plan_info: HotelOrderPreValidateResponseBodyModuleRatePlanInfo = None,
        validate_res_key: str = None,
    ):
        self.extend_info = extend_info
        self.itinerary_no = itinerary_no
        self.promotion_info = promotion_info
        self.rate_plan_daily = rate_plan_daily
        self.rate_plan_id = rate_plan_id
        self.rate_plan_info = rate_plan_info
        self.validate_res_key = validate_res_key

    def validate(self):
        if self.promotion_info:
            self.promotion_info.validate()
        if self.rate_plan_daily:
            for k in self.rate_plan_daily:
                if k:
                    k.validate()
        if self.rate_plan_info:
            self.rate_plan_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extend_info is not None:
            result['extend_info'] = self.extend_info
        if self.itinerary_no is not None:
            result['itinerary_no'] = self.itinerary_no
        if self.promotion_info is not None:
            result['promotion_info'] = self.promotion_info.to_map()
        result['rate_plan_daily'] = []
        if self.rate_plan_daily is not None:
            for k in self.rate_plan_daily:
                result['rate_plan_daily'].append(k.to_map() if k else None)
        if self.rate_plan_id is not None:
            result['rate_plan_id'] = self.rate_plan_id
        if self.rate_plan_info is not None:
            result['rate_plan_info'] = self.rate_plan_info.to_map()
        if self.validate_res_key is not None:
            result['validate_res_key'] = self.validate_res_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('extend_info') is not None:
            self.extend_info = m.get('extend_info')
        if m.get('itinerary_no') is not None:
            self.itinerary_no = m.get('itinerary_no')
        if m.get('promotion_info') is not None:
            temp_model = HotelOrderPreValidateResponseBodyModulePromotionInfo()
            self.promotion_info = temp_model.from_map(m['promotion_info'])
        self.rate_plan_daily = []
        if m.get('rate_plan_daily') is not None:
            for k in m.get('rate_plan_daily'):
                temp_model = HotelOrderPreValidateResponseBodyModuleRatePlanDaily()
                self.rate_plan_daily.append(temp_model.from_map(k))
        if m.get('rate_plan_id') is not None:
            self.rate_plan_id = m.get('rate_plan_id')
        if m.get('rate_plan_info') is not None:
            temp_model = HotelOrderPreValidateResponseBodyModuleRatePlanInfo()
            self.rate_plan_info = temp_model.from_map(m['rate_plan_info'])
        if m.get('validate_res_key') is not None:
            self.validate_res_key = m.get('validate_res_key')
        return self


class HotelOrderPreValidateResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelOrderPreValidateResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderPreValidateResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderPreValidateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelOrderPreValidateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderPreValidateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelOrderQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class HotelOrderQueryRequest(TeaModel):
    def __init__(
        self,
        order_id: int = None,
    ):
        # This parameter is required.
        self.order_id = order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class HotelOrderQueryResponseBodyModuleHotelInfo(TeaModel):
    def __init__(
        self,
        brand_code: str = None,
        brand_group: str = None,
        brand_name: str = None,
        check_in: int = None,
        check_out: int = None,
        city: str = None,
        city_ad_code: str = None,
        hotel_address: str = None,
        hotel_name: str = None,
        hotel_phone: str = None,
        hotel_support_vat_invoice_type: int = None,
        night: int = None,
        room_num: int = None,
        room_type: str = None,
    ):
        self.brand_code = brand_code
        self.brand_group = brand_group
        self.brand_name = brand_name
        self.check_in = check_in
        self.check_out = check_out
        self.city = city
        self.city_ad_code = city_ad_code
        self.hotel_address = hotel_address
        self.hotel_name = hotel_name
        self.hotel_phone = hotel_phone
        self.hotel_support_vat_invoice_type = hotel_support_vat_invoice_type
        self.night = night
        self.room_num = room_num
        self.room_type = room_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.brand_code is not None:
            result['brand_code'] = self.brand_code
        if self.brand_group is not None:
            result['brand_group'] = self.brand_group
        if self.brand_name is not None:
            result['brand_name'] = self.brand_name
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city is not None:
            result['city'] = self.city
        if self.city_ad_code is not None:
            result['city_ad_code'] = self.city_ad_code
        if self.hotel_address is not None:
            result['hotel_address'] = self.hotel_address
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_phone is not None:
            result['hotel_phone'] = self.hotel_phone
        if self.hotel_support_vat_invoice_type is not None:
            result['hotel_support_vat_invoice_type'] = self.hotel_support_vat_invoice_type
        if self.night is not None:
            result['night'] = self.night
        if self.room_num is not None:
            result['room_num'] = self.room_num
        if self.room_type is not None:
            result['room_type'] = self.room_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('brand_code') is not None:
            self.brand_code = m.get('brand_code')
        if m.get('brand_group') is not None:
            self.brand_group = m.get('brand_group')
        if m.get('brand_name') is not None:
            self.brand_name = m.get('brand_name')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('city_ad_code') is not None:
            self.city_ad_code = m.get('city_ad_code')
        if m.get('hotel_address') is not None:
            self.hotel_address = m.get('hotel_address')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_phone') is not None:
            self.hotel_phone = m.get('hotel_phone')
        if m.get('hotel_support_vat_invoice_type') is not None:
            self.hotel_support_vat_invoice_type = m.get('hotel_support_vat_invoice_type')
        if m.get('night') is not None:
            self.night = m.get('night')
        if m.get('room_num') is not None:
            self.room_num = m.get('room_num')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        return self


class HotelOrderQueryResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(
        self,
        id: int = None,
        title: str = None,
    ):
        self.id = id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelOrderQueryResponseBodyModuleOrderBaseInfo(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        btrip_title: str = None,
        corp_id: str = None,
        corp_name: str = None,
        depart_id: str = None,
        depart_name: str = None,
        exceed_apply_nos: List[str] = None,
        extend_field: str = None,
        gmt_create: int = None,
        gmt_modified: int = None,
        id: int = None,
        itinerary_id: str = None,
        order_status: int = None,
        order_type: int = None,
        thirdpart_apply_id: str = None,
        thirdpart_business_id: str = None,
        thirdpart_depart_id: str = None,
        thirdpart_itinerary_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_id = apply_id
        self.btrip_title = btrip_title
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.exceed_apply_nos = exceed_apply_nos
        self.extend_field = extend_field
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.itinerary_id = itinerary_id
        self.order_status = order_status
        self.order_type = order_type
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_business_id = thirdpart_business_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.exceed_apply_nos is not None:
            result['exceed_apply_nos'] = self.exceed_apply_nos
        if self.extend_field is not None:
            result['extend_field'] = self.extend_field
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.order_type is not None:
            result['order_type'] = self.order_type
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_business_id is not None:
            result['thirdpart_business_id'] = self.thirdpart_business_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('exceed_apply_nos') is not None:
            self.exceed_apply_nos = m.get('exceed_apply_nos')
        if m.get('extend_field') is not None:
            self.extend_field = m.get('extend_field')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('order_type') is not None:
            self.order_type = m.get('order_type')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_business_id') is not None:
            self.thirdpart_business_id = m.get('thirdpart_business_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class HotelOrderQueryResponseBodyModulePassengerList(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        cost_center_id: int = None,
        cost_center_name: str = None,
        cost_center_number: str = None,
        itinerary_id: str = None,
        occupant_type: int = None,
        project_code: str = None,
        project_id: int = None,
        project_title: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_project_id: str = None,
        user_id: str = None,
        user_name: str = None,
        user_type: int = None,
    ):
        self.apply_id = apply_id
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.cost_center_number = cost_center_number
        self.itinerary_id = itinerary_id
        self.occupant_type = occupant_type
        self.project_code = project_code
        self.project_id = project_id
        self.project_title = project_title
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_project_id = thirdpart_project_id
        self.user_id = user_id
        self.user_name = user_name
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.occupant_type is not None:
            result['occupant_type'] = self.occupant_type
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('occupant_type') is not None:
            self.occupant_type = m.get('occupant_type')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class HotelOrderQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(
        self,
        category_code: int = None,
        gmt_create: int = None,
        pay_type: int = None,
        price: float = None,
        trade_id: str = None,
        type: int = None,
    ):
        self.category_code = category_code
        self.gmt_create = gmt_create
        self.pay_type = pay_type
        self.price = price
        self.trade_id = trade_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class HotelOrderQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        hotel_info: HotelOrderQueryResponseBodyModuleHotelInfo = None,
        invoice_info: HotelOrderQueryResponseBodyModuleInvoiceInfo = None,
        order_base_info: HotelOrderQueryResponseBodyModuleOrderBaseInfo = None,
        passenger_list: List[HotelOrderQueryResponseBodyModulePassengerList] = None,
        price_info_list: List[HotelOrderQueryResponseBodyModulePriceInfoList] = None,
    ):
        self.hotel_info = hotel_info
        self.invoice_info = invoice_info
        self.order_base_info = order_base_info
        self.passenger_list = passenger_list
        self.price_info_list = price_info_list

    def validate(self):
        if self.hotel_info:
            self.hotel_info.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.order_base_info:
            self.order_base_info.validate()
        if self.passenger_list:
            for k in self.passenger_list:
                if k:
                    k.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_info is not None:
            result['hotel_info'] = self.hotel_info.to_map()
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.order_base_info is not None:
            result['order_base_info'] = self.order_base_info.to_map()
        result['passenger_list'] = []
        if self.passenger_list is not None:
            for k in self.passenger_list:
                result['passenger_list'].append(k.to_map() if k else None)
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hotel_info') is not None:
            temp_model = HotelOrderQueryResponseBodyModuleHotelInfo()
            self.hotel_info = temp_model.from_map(m['hotel_info'])
        if m.get('invoice_info') is not None:
            temp_model = HotelOrderQueryResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('order_base_info') is not None:
            temp_model = HotelOrderQueryResponseBodyModuleOrderBaseInfo()
            self.order_base_info = temp_model.from_map(m['order_base_info'])
        self.passenger_list = []
        if m.get('passenger_list') is not None:
            for k in m.get('passenger_list'):
                temp_model = HotelOrderQueryResponseBodyModulePassengerList()
                self.passenger_list.append(temp_model.from_map(k))
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = HotelOrderQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        return self


class HotelOrderQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelOrderQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelOrderQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelOrderQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelOrderQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelOrderQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelPricePullHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelPricePullRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        check_in: str = None,
        check_out: str = None,
        city_code: int = None,
        hotel_ids: List[str] = None,
        payment_type: int = None,
    ):
        self.btrip_user_id = btrip_user_id
        self.check_in = check_in
        self.check_out = check_out
        self.city_code = city_code
        self.hotel_ids = hotel_ids
        self.payment_type = payment_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.hotel_ids is not None:
            result['hotel_ids'] = self.hotel_ids
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('hotel_ids') is not None:
            self.hotel_ids = m.get('hotel_ids')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        return self


class HotelPricePullShrinkRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        check_in: str = None,
        check_out: str = None,
        city_code: int = None,
        hotel_ids_shrink: str = None,
        payment_type: int = None,
    ):
        self.btrip_user_id = btrip_user_id
        self.check_in = check_in
        self.check_out = check_out
        self.city_code = city_code
        self.hotel_ids_shrink = hotel_ids_shrink
        self.payment_type = payment_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.hotel_ids_shrink is not None:
            result['hotel_ids'] = self.hotel_ids_shrink
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('hotel_ids') is not None:
            self.hotel_ids_shrink = m.get('hotel_ids')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicyBtripHotelCancelPolicyInfoDTOList(TeaModel):
    def __init__(
        self,
        hour: int = None,
        value: int = None,
    ):
        self.hour = hour
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hour is not None:
            result['hour'] = self.hour
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hour') is not None:
            self.hour = m.get('hour')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicy(TeaModel):
    def __init__(
        self,
        btrip_hotel_cancel_policy_info_dtolist: List[HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicyBtripHotelCancelPolicyInfoDTOList] = None,
        cancel_policy_type: int = None,
    ):
        self.btrip_hotel_cancel_policy_info_dtolist = btrip_hotel_cancel_policy_info_dtolist
        self.cancel_policy_type = cancel_policy_type

    def validate(self):
        if self.btrip_hotel_cancel_policy_info_dtolist:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['btrip_hotel_cancel_policy_info_d_t_o_list'] = []
        if self.btrip_hotel_cancel_policy_info_dtolist is not None:
            for k in self.btrip_hotel_cancel_policy_info_dtolist:
                result['btrip_hotel_cancel_policy_info_d_t_o_list'].append(k.to_map() if k else None)
        if self.cancel_policy_type is not None:
            result['cancel_policy_type'] = self.cancel_policy_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.btrip_hotel_cancel_policy_info_dtolist = []
        if m.get('btrip_hotel_cancel_policy_info_d_t_o_list') is not None:
            for k in m.get('btrip_hotel_cancel_policy_info_d_t_o_list'):
                temp_model = HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicyBtripHotelCancelPolicyInfoDTOList()
                self.btrip_hotel_cancel_policy_info_dtolist.append(temp_model.from_map(k))
        if m.get('cancel_policy_type') is not None:
            self.cancel_policy_type = m.get('cancel_policy_type')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesRateDailys(TeaModel):
    def __init__(
        self,
        discount_price: int = None,
        last_discounts_price: int = None,
        price: int = None,
        start_date: str = None,
    ):
        self.discount_price = discount_price
        self.last_discounts_price = last_discounts_price
        self.price = price
        self.start_date = start_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount_price is not None:
            result['discount_price'] = self.discount_price
        if self.last_discounts_price is not None:
            result['last_discounts_price'] = self.last_discounts_price
        if self.price is not None:
            result['price'] = self.price
        if self.start_date is not None:
            result['start_date'] = self.start_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount_price') is not None:
            self.discount_price = m.get('discount_price')
        if m.get('last_discounts_price') is not None:
            self.last_discounts_price = m.get('last_discounts_price')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('start_date') is not None:
            self.start_date = m.get('start_date')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRates(TeaModel):
    def __init__(
        self,
        breakfast: str = None,
        breakfast_count: int = None,
        btrip_hotel_cancel_policy: HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicy = None,
        cancel_policy_desc: str = None,
        company_aassist: str = None,
        currency_code: str = None,
        instant_confirm: bool = None,
        item_id: str = None,
        max_adv_hours: int = None,
        max_days: int = None,
        min_adv_hours: int = None,
        min_days: int = None,
        nod: int = None,
        nop: int = None,
        payment_type: int = None,
        price: int = None,
        promotion_info: str = None,
        quota: int = None,
        rate_dailys: List[HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesRateDailys] = None,
        rate_id: str = None,
        rate_plan_name: str = None,
        rp_id: str = None,
        seller_id: str = None,
        support_special_invoice: bool = None,
    ):
        self.breakfast = breakfast
        self.breakfast_count = breakfast_count
        self.btrip_hotel_cancel_policy = btrip_hotel_cancel_policy
        self.cancel_policy_desc = cancel_policy_desc
        self.company_aassist = company_aassist
        self.currency_code = currency_code
        self.instant_confirm = instant_confirm
        self.item_id = item_id
        self.max_adv_hours = max_adv_hours
        self.max_days = max_days
        self.min_adv_hours = min_adv_hours
        self.min_days = min_days
        self.nod = nod
        self.nop = nop
        self.payment_type = payment_type
        self.price = price
        self.promotion_info = promotion_info
        self.quota = quota
        self.rate_dailys = rate_dailys
        self.rate_id = rate_id
        self.rate_plan_name = rate_plan_name
        self.rp_id = rp_id
        self.seller_id = seller_id
        self.support_special_invoice = support_special_invoice

    def validate(self):
        if self.btrip_hotel_cancel_policy:
            self.btrip_hotel_cancel_policy.validate()
        if self.rate_dailys:
            for k in self.rate_dailys:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.breakfast is not None:
            result['breakfast'] = self.breakfast
        if self.breakfast_count is not None:
            result['breakfast_count'] = self.breakfast_count
        if self.btrip_hotel_cancel_policy is not None:
            result['btrip_hotel_cancel_policy'] = self.btrip_hotel_cancel_policy.to_map()
        if self.cancel_policy_desc is not None:
            result['cancel_policy_desc'] = self.cancel_policy_desc
        if self.company_aassist is not None:
            result['company_aassist'] = self.company_aassist
        if self.currency_code is not None:
            result['currency_code'] = self.currency_code
        if self.instant_confirm is not None:
            result['instant_confirm'] = self.instant_confirm
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.max_adv_hours is not None:
            result['max_adv_hours'] = self.max_adv_hours
        if self.max_days is not None:
            result['max_days'] = self.max_days
        if self.min_adv_hours is not None:
            result['min_adv_hours'] = self.min_adv_hours
        if self.min_days is not None:
            result['min_days'] = self.min_days
        if self.nod is not None:
            result['nod'] = self.nod
        if self.nop is not None:
            result['nop'] = self.nop
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.price is not None:
            result['price'] = self.price
        if self.promotion_info is not None:
            result['promotion_info'] = self.promotion_info
        if self.quota is not None:
            result['quota'] = self.quota
        result['rate_dailys'] = []
        if self.rate_dailys is not None:
            for k in self.rate_dailys:
                result['rate_dailys'].append(k.to_map() if k else None)
        if self.rate_id is not None:
            result['rate_id'] = self.rate_id
        if self.rate_plan_name is not None:
            result['rate_plan_name'] = self.rate_plan_name
        if self.rp_id is not None:
            result['rp_id'] = self.rp_id
        if self.seller_id is not None:
            result['seller_id'] = self.seller_id
        if self.support_special_invoice is not None:
            result['support_special_invoice'] = self.support_special_invoice
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('breakfast') is not None:
            self.breakfast = m.get('breakfast')
        if m.get('breakfast_count') is not None:
            self.breakfast_count = m.get('breakfast_count')
        if m.get('btrip_hotel_cancel_policy') is not None:
            temp_model = HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesBtripHotelCancelPolicy()
            self.btrip_hotel_cancel_policy = temp_model.from_map(m['btrip_hotel_cancel_policy'])
        if m.get('cancel_policy_desc') is not None:
            self.cancel_policy_desc = m.get('cancel_policy_desc')
        if m.get('company_aassist') is not None:
            self.company_aassist = m.get('company_aassist')
        if m.get('currency_code') is not None:
            self.currency_code = m.get('currency_code')
        if m.get('instant_confirm') is not None:
            self.instant_confirm = m.get('instant_confirm')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('max_adv_hours') is not None:
            self.max_adv_hours = m.get('max_adv_hours')
        if m.get('max_days') is not None:
            self.max_days = m.get('max_days')
        if m.get('min_adv_hours') is not None:
            self.min_adv_hours = m.get('min_adv_hours')
        if m.get('min_days') is not None:
            self.min_days = m.get('min_days')
        if m.get('nod') is not None:
            self.nod = m.get('nod')
        if m.get('nop') is not None:
            self.nop = m.get('nop')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('promotion_info') is not None:
            self.promotion_info = m.get('promotion_info')
        if m.get('quota') is not None:
            self.quota = m.get('quota')
        self.rate_dailys = []
        if m.get('rate_dailys') is not None:
            for k in m.get('rate_dailys'):
                temp_model = HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRatesRateDailys()
                self.rate_dailys.append(temp_model.from_map(k))
        if m.get('rate_id') is not None:
            self.rate_id = m.get('rate_id')
        if m.get('rate_plan_name') is not None:
            self.rate_plan_name = m.get('rate_plan_name')
        if m.get('rp_id') is not None:
            self.rp_id = m.get('rp_id')
        if m.get('seller_id') is not None:
            self.seller_id = m.get('seller_id')
        if m.get('support_special_invoice') is not None:
            self.support_special_invoice = m.get('support_special_invoice')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfosRooms(TeaModel):
    def __init__(
        self,
        area: str = None,
        bed: str = None,
        bed_type_string: str = None,
        facility: str = None,
        floor: str = None,
        max_occupancy: int = None,
        network_service: str = None,
        pics: List[str] = None,
        rates: List[HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRates] = None,
        room_id: str = None,
        room_name: str = None,
        status: int = None,
        window_type: str = None,
    ):
        self.area = area
        self.bed = bed
        self.bed_type_string = bed_type_string
        self.facility = facility
        self.floor = floor
        self.max_occupancy = max_occupancy
        self.network_service = network_service
        self.pics = pics
        self.rates = rates
        self.room_id = room_id
        self.room_name = room_name
        self.status = status
        self.window_type = window_type

    def validate(self):
        if self.rates:
            for k in self.rates:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.area is not None:
            result['area'] = self.area
        if self.bed is not None:
            result['bed'] = self.bed
        if self.bed_type_string is not None:
            result['bed_type_string'] = self.bed_type_string
        if self.facility is not None:
            result['facility'] = self.facility
        if self.floor is not None:
            result['floor'] = self.floor
        if self.max_occupancy is not None:
            result['max_occupancy'] = self.max_occupancy
        if self.network_service is not None:
            result['network_service'] = self.network_service
        if self.pics is not None:
            result['pics'] = self.pics
        result['rates'] = []
        if self.rates is not None:
            for k in self.rates:
                result['rates'].append(k.to_map() if k else None)
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_name is not None:
            result['room_name'] = self.room_name
        if self.status is not None:
            result['status'] = self.status
        if self.window_type is not None:
            result['window_type'] = self.window_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('area') is not None:
            self.area = m.get('area')
        if m.get('bed') is not None:
            self.bed = m.get('bed')
        if m.get('bed_type_string') is not None:
            self.bed_type_string = m.get('bed_type_string')
        if m.get('facility') is not None:
            self.facility = m.get('facility')
        if m.get('floor') is not None:
            self.floor = m.get('floor')
        if m.get('max_occupancy') is not None:
            self.max_occupancy = m.get('max_occupancy')
        if m.get('network_service') is not None:
            self.network_service = m.get('network_service')
        if m.get('pics') is not None:
            self.pics = m.get('pics')
        self.rates = []
        if m.get('rates') is not None:
            for k in m.get('rates'):
                temp_model = HotelPricePullResponseBodyModuleHotelPriceInfosRoomsRates()
                self.rates.append(temp_model.from_map(k))
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_name') is not None:
            self.room_name = m.get('room_name')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('window_type') is not None:
            self.window_type = m.get('window_type')
        return self


class HotelPricePullResponseBodyModuleHotelPriceInfos(TeaModel):
    def __init__(
        self,
        address: str = None,
        hotel_id: str = None,
        hotel_name: str = None,
        rooms: List[HotelPricePullResponseBodyModuleHotelPriceInfosRooms] = None,
        search_id: str = None,
    ):
        self.address = address
        self.hotel_id = hotel_id
        self.hotel_name = hotel_name
        self.rooms = rooms
        self.search_id = search_id

    def validate(self):
        if self.rooms:
            for k in self.rooms:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        result['rooms'] = []
        if self.rooms is not None:
            for k in self.rooms:
                result['rooms'].append(k.to_map() if k else None)
        if self.search_id is not None:
            result['search_id'] = self.search_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        self.rooms = []
        if m.get('rooms') is not None:
            for k in m.get('rooms'):
                temp_model = HotelPricePullResponseBodyModuleHotelPriceInfosRooms()
                self.rooms.append(temp_model.from_map(k))
        if m.get('search_id') is not None:
            self.search_id = m.get('search_id')
        return self


class HotelPricePullResponseBodyModule(TeaModel):
    def __init__(
        self,
        hotel_price_infos: List[HotelPricePullResponseBodyModuleHotelPriceInfos] = None,
    ):
        self.hotel_price_infos = hotel_price_infos

    def validate(self):
        if self.hotel_price_infos:
            for k in self.hotel_price_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['hotel_price_infos'] = []
        if self.hotel_price_infos is not None:
            for k in self.hotel_price_infos:
                result['hotel_price_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.hotel_price_infos = []
        if m.get('hotel_price_infos') is not None:
            for k in m.get('hotel_price_infos'):
                temp_model = HotelPricePullResponseBodyModuleHotelPriceInfos()
                self.hotel_price_infos.append(temp_model.from_map(k))
        return self


class HotelPricePullResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelPricePullResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelPricePullResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelPricePullResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelPricePullResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelPricePullResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelRoomInfoHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelRoomInfoRequest(TeaModel):
    def __init__(
        self,
        room_ids: List[int] = None,
    ):
        # This parameter is required.
        self.room_ids = room_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_ids is not None:
            result['room_ids'] = self.room_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('room_ids') is not None:
            self.room_ids = m.get('room_ids')
        return self


class HotelRoomInfoShrinkRequest(TeaModel):
    def __init__(
        self,
        room_ids_shrink: str = None,
    ):
        # This parameter is required.
        self.room_ids_shrink = room_ids_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.room_ids_shrink is not None:
            result['room_ids'] = self.room_ids_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('room_ids') is not None:
            self.room_ids_shrink = m.get('room_ids')
        return self


class HotelRoomInfoResponseBodyModuleBedInfoGroupListBedInfos(TeaModel):
    def __init__(
        self,
        bed_desc: str = None,
        bed_num: int = None,
        bed_size: str = None,
        bed_type: str = None,
        length: str = None,
        width: str = None,
    ):
        self.bed_desc = bed_desc
        self.bed_num = bed_num
        self.bed_size = bed_size
        self.bed_type = bed_type
        self.length = length
        self.width = width

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_desc is not None:
            result['bed_desc'] = self.bed_desc
        if self.bed_num is not None:
            result['bed_num'] = self.bed_num
        if self.bed_size is not None:
            result['bed_size'] = self.bed_size
        if self.bed_type is not None:
            result['bed_type'] = self.bed_type
        if self.length is not None:
            result['length'] = self.length
        if self.width is not None:
            result['width'] = self.width
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bed_desc') is not None:
            self.bed_desc = m.get('bed_desc')
        if m.get('bed_num') is not None:
            self.bed_num = m.get('bed_num')
        if m.get('bed_size') is not None:
            self.bed_size = m.get('bed_size')
        if m.get('bed_type') is not None:
            self.bed_type = m.get('bed_type')
        if m.get('length') is not None:
            self.length = m.get('length')
        if m.get('width') is not None:
            self.width = m.get('width')
        return self


class HotelRoomInfoResponseBodyModuleBedInfoGroupList(TeaModel):
    def __init__(
        self,
        bed_infos: List[HotelRoomInfoResponseBodyModuleBedInfoGroupListBedInfos] = None,
    ):
        self.bed_infos = bed_infos

    def validate(self):
        if self.bed_infos:
            for k in self.bed_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['bed_infos'] = []
        if self.bed_infos is not None:
            for k in self.bed_infos:
                result['bed_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.bed_infos = []
        if m.get('bed_infos') is not None:
            for k in m.get('bed_infos'):
                temp_model = HotelRoomInfoResponseBodyModuleBedInfoGroupListBedInfos()
                self.bed_infos.append(temp_model.from_map(k))
        return self


class HotelRoomInfoResponseBodyModuleBedInfos(TeaModel):
    def __init__(
        self,
        bed_desc: str = None,
        bed_num: int = None,
        bed_size: str = None,
        bed_type: str = None,
        length: str = None,
        width: str = None,
    ):
        self.bed_desc = bed_desc
        self.bed_num = bed_num
        self.bed_size = bed_size
        self.bed_type = bed_type
        self.length = length
        self.width = width

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_desc is not None:
            result['bed_desc'] = self.bed_desc
        if self.bed_num is not None:
            result['bed_num'] = self.bed_num
        if self.bed_size is not None:
            result['bed_size'] = self.bed_size
        if self.bed_type is not None:
            result['bed_type'] = self.bed_type
        if self.length is not None:
            result['length'] = self.length
        if self.width is not None:
            result['width'] = self.width
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bed_desc') is not None:
            self.bed_desc = m.get('bed_desc')
        if m.get('bed_num') is not None:
            self.bed_num = m.get('bed_num')
        if m.get('bed_size') is not None:
            self.bed_size = m.get('bed_size')
        if m.get('bed_type') is not None:
            self.bed_type = m.get('bed_type')
        if m.get('length') is not None:
            self.length = m.get('length')
        if m.get('width') is not None:
            self.width = m.get('width')
        return self


class HotelRoomInfoResponseBodyModuleRoomImages(TeaModel):
    def __init__(
        self,
        bed_infos_2: str = None,
        tag: int = None,
        url: str = None,
    ):
        self.bed_infos_2 = bed_infos_2
        self.tag = tag
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_infos_2 is not None:
            result['bed_infos2'] = self.bed_infos_2
        if self.tag is not None:
            result['tag'] = self.tag
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bed_infos2') is not None:
            self.bed_infos_2 = m.get('bed_infos2')
        if m.get('tag') is not None:
            self.tag = m.get('tag')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class HotelRoomInfoResponseBodyModule(TeaModel):
    def __init__(
        self,
        bed_info_group_list: List[HotelRoomInfoResponseBodyModuleBedInfoGroupList] = None,
        bed_infos: List[HotelRoomInfoResponseBodyModuleBedInfos] = None,
        extra_bed: int = None,
        extra_bed_desc: str = None,
        floor: str = None,
        internet_way: str = None,
        max_occupancy: int = None,
        room_desc: str = None,
        room_facilities: str = None,
        room_facility_list: List[str] = None,
        room_id: str = None,
        room_image: str = None,
        room_images: List[HotelRoomInfoResponseBodyModuleRoomImages] = None,
        room_name: str = None,
        room_type: int = None,
        roomarea: str = None,
        rooms: int = None,
        smoke: str = None,
        window: str = None,
        window_bad: str = None,
        window_view: str = None,
    ):
        self.bed_info_group_list = bed_info_group_list
        self.bed_infos = bed_infos
        self.extra_bed = extra_bed
        self.extra_bed_desc = extra_bed_desc
        self.floor = floor
        self.internet_way = internet_way
        self.max_occupancy = max_occupancy
        self.room_desc = room_desc
        self.room_facilities = room_facilities
        self.room_facility_list = room_facility_list
        self.room_id = room_id
        self.room_image = room_image
        self.room_images = room_images
        self.room_name = room_name
        self.room_type = room_type
        self.roomarea = roomarea
        self.rooms = rooms
        self.smoke = smoke
        self.window = window
        self.window_bad = window_bad
        self.window_view = window_view

    def validate(self):
        if self.bed_info_group_list:
            for k in self.bed_info_group_list:
                if k:
                    k.validate()
        if self.bed_infos:
            for k in self.bed_infos:
                if k:
                    k.validate()
        if self.room_images:
            for k in self.room_images:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['bed_info_group_list'] = []
        if self.bed_info_group_list is not None:
            for k in self.bed_info_group_list:
                result['bed_info_group_list'].append(k.to_map() if k else None)
        result['bed_infos'] = []
        if self.bed_infos is not None:
            for k in self.bed_infos:
                result['bed_infos'].append(k.to_map() if k else None)
        if self.extra_bed is not None:
            result['extra_bed'] = self.extra_bed
        if self.extra_bed_desc is not None:
            result['extra_bed_desc'] = self.extra_bed_desc
        if self.floor is not None:
            result['floor'] = self.floor
        if self.internet_way is not None:
            result['internet_way'] = self.internet_way
        if self.max_occupancy is not None:
            result['max_occupancy'] = self.max_occupancy
        if self.room_desc is not None:
            result['room_desc'] = self.room_desc
        if self.room_facilities is not None:
            result['room_facilities'] = self.room_facilities
        if self.room_facility_list is not None:
            result['room_facility_list'] = self.room_facility_list
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_image is not None:
            result['room_image'] = self.room_image
        result['room_images'] = []
        if self.room_images is not None:
            for k in self.room_images:
                result['room_images'].append(k.to_map() if k else None)
        if self.room_name is not None:
            result['room_name'] = self.room_name
        if self.room_type is not None:
            result['room_type'] = self.room_type
        if self.roomarea is not None:
            result['roomarea'] = self.roomarea
        if self.rooms is not None:
            result['rooms'] = self.rooms
        if self.smoke is not None:
            result['smoke'] = self.smoke
        if self.window is not None:
            result['window'] = self.window
        if self.window_bad is not None:
            result['window_bad'] = self.window_bad
        if self.window_view is not None:
            result['window_view'] = self.window_view
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.bed_info_group_list = []
        if m.get('bed_info_group_list') is not None:
            for k in m.get('bed_info_group_list'):
                temp_model = HotelRoomInfoResponseBodyModuleBedInfoGroupList()
                self.bed_info_group_list.append(temp_model.from_map(k))
        self.bed_infos = []
        if m.get('bed_infos') is not None:
            for k in m.get('bed_infos'):
                temp_model = HotelRoomInfoResponseBodyModuleBedInfos()
                self.bed_infos.append(temp_model.from_map(k))
        if m.get('extra_bed') is not None:
            self.extra_bed = m.get('extra_bed')
        if m.get('extra_bed_desc') is not None:
            self.extra_bed_desc = m.get('extra_bed_desc')
        if m.get('floor') is not None:
            self.floor = m.get('floor')
        if m.get('internet_way') is not None:
            self.internet_way = m.get('internet_way')
        if m.get('max_occupancy') is not None:
            self.max_occupancy = m.get('max_occupancy')
        if m.get('room_desc') is not None:
            self.room_desc = m.get('room_desc')
        if m.get('room_facilities') is not None:
            self.room_facilities = m.get('room_facilities')
        if m.get('room_facility_list') is not None:
            self.room_facility_list = m.get('room_facility_list')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_image') is not None:
            self.room_image = m.get('room_image')
        self.room_images = []
        if m.get('room_images') is not None:
            for k in m.get('room_images'):
                temp_model = HotelRoomInfoResponseBodyModuleRoomImages()
                self.room_images.append(temp_model.from_map(k))
        if m.get('room_name') is not None:
            self.room_name = m.get('room_name')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        if m.get('roomarea') is not None:
            self.roomarea = m.get('roomarea')
        if m.get('rooms') is not None:
            self.rooms = m.get('rooms')
        if m.get('smoke') is not None:
            self.smoke = m.get('smoke')
        if m.get('window') is not None:
            self.window = m.get('window')
        if m.get('window_bad') is not None:
            self.window_bad = m.get('window_bad')
        if m.get('window_view') is not None:
            self.window_view = m.get('window_view')
        return self


class HotelRoomInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[HotelRoomInfoResponseBodyModule] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = HotelRoomInfoResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelRoomInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelRoomInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelRoomInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelSearchRequest(TeaModel):
    def __init__(
        self,
        adult_num: str = None,
        brand_code: List[str] = None,
        btrip_user_id: str = None,
        check_in_date: str = None,
        check_out_date: str = None,
        city_code: str = None,
        dir: int = None,
        distance: int = None,
        district_code: str = None,
        hotel_star: str = None,
        is_protocol: bool = None,
        key_words: str = None,
        location: str = None,
        max_price: float = None,
        min_price: float = None,
        page_no: int = None,
        page_size: int = None,
        pay_over_type: int = None,
        payment_type: int = None,
        shids: List[int] = None,
        sort_code: int = None,
        super_man: int = None,
    ):
        self.adult_num = adult_num
        self.brand_code = brand_code
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.check_in_date = check_in_date
        # This parameter is required.
        self.check_out_date = check_out_date
        self.city_code = city_code
        self.dir = dir
        self.distance = distance
        self.district_code = district_code
        self.hotel_star = hotel_star
        self.is_protocol = is_protocol
        self.key_words = key_words
        self.location = location
        self.max_price = max_price
        self.min_price = min_price
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        self.pay_over_type = pay_over_type
        self.payment_type = payment_type
        self.shids = shids
        # This parameter is required.
        self.sort_code = sort_code
        self.super_man = super_man

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_num is not None:
            result['adult_num'] = self.adult_num
        if self.brand_code is not None:
            result['brand_code'] = self.brand_code
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.check_out_date is not None:
            result['check_out_date'] = self.check_out_date
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.dir is not None:
            result['dir'] = self.dir
        if self.distance is not None:
            result['distance'] = self.distance
        if self.district_code is not None:
            result['district_code'] = self.district_code
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.key_words is not None:
            result['key_words'] = self.key_words
        if self.location is not None:
            result['location'] = self.location
        if self.max_price is not None:
            result['max_price'] = self.max_price
        if self.min_price is not None:
            result['min_price'] = self.min_price
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.pay_over_type is not None:
            result['pay_over_type'] = self.pay_over_type
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.shids is not None:
            result['shids'] = self.shids
        if self.sort_code is not None:
            result['sort_code'] = self.sort_code
        if self.super_man is not None:
            result['super_man'] = self.super_man
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adult_num') is not None:
            self.adult_num = m.get('adult_num')
        if m.get('brand_code') is not None:
            self.brand_code = m.get('brand_code')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('check_out_date') is not None:
            self.check_out_date = m.get('check_out_date')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('dir') is not None:
            self.dir = m.get('dir')
        if m.get('distance') is not None:
            self.distance = m.get('distance')
        if m.get('district_code') is not None:
            self.district_code = m.get('district_code')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('key_words') is not None:
            self.key_words = m.get('key_words')
        if m.get('location') is not None:
            self.location = m.get('location')
        if m.get('max_price') is not None:
            self.max_price = m.get('max_price')
        if m.get('min_price') is not None:
            self.min_price = m.get('min_price')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('pay_over_type') is not None:
            self.pay_over_type = m.get('pay_over_type')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('shids') is not None:
            self.shids = m.get('shids')
        if m.get('sort_code') is not None:
            self.sort_code = m.get('sort_code')
        if m.get('super_man') is not None:
            self.super_man = m.get('super_man')
        return self


class HotelSearchShrinkRequest(TeaModel):
    def __init__(
        self,
        adult_num: str = None,
        brand_code_shrink: str = None,
        btrip_user_id: str = None,
        check_in_date: str = None,
        check_out_date: str = None,
        city_code: str = None,
        dir: int = None,
        distance: int = None,
        district_code: str = None,
        hotel_star: str = None,
        is_protocol: bool = None,
        key_words: str = None,
        location: str = None,
        max_price: float = None,
        min_price: float = None,
        page_no: int = None,
        page_size: int = None,
        pay_over_type: int = None,
        payment_type: int = None,
        shids_shrink: str = None,
        sort_code: int = None,
        super_man: int = None,
    ):
        self.adult_num = adult_num
        self.brand_code_shrink = brand_code_shrink
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.check_in_date = check_in_date
        # This parameter is required.
        self.check_out_date = check_out_date
        self.city_code = city_code
        self.dir = dir
        self.distance = distance
        self.district_code = district_code
        self.hotel_star = hotel_star
        self.is_protocol = is_protocol
        self.key_words = key_words
        self.location = location
        self.max_price = max_price
        self.min_price = min_price
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        self.pay_over_type = pay_over_type
        self.payment_type = payment_type
        self.shids_shrink = shids_shrink
        # This parameter is required.
        self.sort_code = sort_code
        self.super_man = super_man

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.adult_num is not None:
            result['adult_num'] = self.adult_num
        if self.brand_code_shrink is not None:
            result['brand_code'] = self.brand_code_shrink
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.check_out_date is not None:
            result['check_out_date'] = self.check_out_date
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.dir is not None:
            result['dir'] = self.dir
        if self.distance is not None:
            result['distance'] = self.distance
        if self.district_code is not None:
            result['district_code'] = self.district_code
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.key_words is not None:
            result['key_words'] = self.key_words
        if self.location is not None:
            result['location'] = self.location
        if self.max_price is not None:
            result['max_price'] = self.max_price
        if self.min_price is not None:
            result['min_price'] = self.min_price
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.pay_over_type is not None:
            result['pay_over_type'] = self.pay_over_type
        if self.payment_type is not None:
            result['payment_type'] = self.payment_type
        if self.shids_shrink is not None:
            result['shids'] = self.shids_shrink
        if self.sort_code is not None:
            result['sort_code'] = self.sort_code
        if self.super_man is not None:
            result['super_man'] = self.super_man
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('adult_num') is not None:
            self.adult_num = m.get('adult_num')
        if m.get('brand_code') is not None:
            self.brand_code_shrink = m.get('brand_code')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('check_out_date') is not None:
            self.check_out_date = m.get('check_out_date')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('dir') is not None:
            self.dir = m.get('dir')
        if m.get('distance') is not None:
            self.distance = m.get('distance')
        if m.get('district_code') is not None:
            self.district_code = m.get('district_code')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('key_words') is not None:
            self.key_words = m.get('key_words')
        if m.get('location') is not None:
            self.location = m.get('location')
        if m.get('max_price') is not None:
            self.max_price = m.get('max_price')
        if m.get('min_price') is not None:
            self.min_price = m.get('min_price')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('pay_over_type') is not None:
            self.pay_over_type = m.get('pay_over_type')
        if m.get('payment_type') is not None:
            self.payment_type = m.get('payment_type')
        if m.get('shids') is not None:
            self.shids_shrink = m.get('shids')
        if m.get('sort_code') is not None:
            self.sort_code = m.get('sort_code')
        if m.get('super_man') is not None:
            self.super_man = m.get('super_man')
        return self


class HotelSearchResponseBodyModuleItemsDiscountDescDiscountDetail(TeaModel):
    def __init__(
        self,
        label_name: List[str] = None,
        money_desc: str = None,
    ):
        self.label_name = label_name
        self.money_desc = money_desc

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.label_name is not None:
            result['label_name'] = self.label_name
        if self.money_desc is not None:
            result['money_desc'] = self.money_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('label_name') is not None:
            self.label_name = m.get('label_name')
        if m.get('money_desc') is not None:
            self.money_desc = m.get('money_desc')
        return self


class HotelSearchResponseBodyModuleItemsDiscountDesc(TeaModel):
    def __init__(
        self,
        cash_reduce_total: str = None,
        dinamic_label: str = None,
        discount_detail: List[HotelSearchResponseBodyModuleItemsDiscountDescDiscountDetail] = None,
        sub_title: str = None,
        title: str = None,
    ):
        self.cash_reduce_total = cash_reduce_total
        self.dinamic_label = dinamic_label
        self.discount_detail = discount_detail
        self.sub_title = sub_title
        self.title = title

    def validate(self):
        if self.discount_detail:
            for k in self.discount_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cash_reduce_total is not None:
            result['cash_reduce_total'] = self.cash_reduce_total
        if self.dinamic_label is not None:
            result['dinamic_label'] = self.dinamic_label
        result['discount_detail'] = []
        if self.discount_detail is not None:
            for k in self.discount_detail:
                result['discount_detail'].append(k.to_map() if k else None)
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cash_reduce_total') is not None:
            self.cash_reduce_total = m.get('cash_reduce_total')
        if m.get('dinamic_label') is not None:
            self.dinamic_label = m.get('dinamic_label')
        self.discount_detail = []
        if m.get('discount_detail') is not None:
            for k in m.get('discount_detail'):
                temp_model = HotelSearchResponseBodyModuleItemsDiscountDescDiscountDetail()
                self.discount_detail.append(temp_model.from_map(k))
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelSearchResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        brand_name: str = None,
        btand_code: str = None,
        city_code: str = None,
        discount_desc: HotelSearchResponseBodyModuleItemsDiscountDesc = None,
        distance: int = None,
        district_code: str = None,
        hotel_address: str = None,
        hotel_code: str = None,
        hotel_en_name: str = None,
        hotel_name: str = None,
        hotel_star: str = None,
        image_url: str = None,
        is_protocol: bool = None,
        location: str = None,
        min_price: float = None,
        original_min_price: float = None,
        score: str = None,
        status: int = None,
        tel: str = None,
    ):
        self.brand_name = brand_name
        self.btand_code = btand_code
        self.city_code = city_code
        self.discount_desc = discount_desc
        self.distance = distance
        self.district_code = district_code
        self.hotel_address = hotel_address
        self.hotel_code = hotel_code
        self.hotel_en_name = hotel_en_name
        self.hotel_name = hotel_name
        self.hotel_star = hotel_star
        self.image_url = image_url
        self.is_protocol = is_protocol
        self.location = location
        self.min_price = min_price
        self.original_min_price = original_min_price
        self.score = score
        self.status = status
        self.tel = tel

    def validate(self):
        if self.discount_desc:
            self.discount_desc.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.brand_name is not None:
            result['brand_name'] = self.brand_name
        if self.btand_code is not None:
            result['btand_code'] = self.btand_code
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.discount_desc is not None:
            result['discount_desc'] = self.discount_desc.to_map()
        if self.distance is not None:
            result['distance'] = self.distance
        if self.district_code is not None:
            result['district_code'] = self.district_code
        if self.hotel_address is not None:
            result['hotel_address'] = self.hotel_address
        if self.hotel_code is not None:
            result['hotel_code'] = self.hotel_code
        if self.hotel_en_name is not None:
            result['hotel_en_name'] = self.hotel_en_name
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.image_url is not None:
            result['image_url'] = self.image_url
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.location is not None:
            result['location'] = self.location
        if self.min_price is not None:
            result['min_price'] = self.min_price
        if self.original_min_price is not None:
            result['original_min_price'] = self.original_min_price
        if self.score is not None:
            result['score'] = self.score
        if self.status is not None:
            result['status'] = self.status
        if self.tel is not None:
            result['tel'] = self.tel
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('brand_name') is not None:
            self.brand_name = m.get('brand_name')
        if m.get('btand_code') is not None:
            self.btand_code = m.get('btand_code')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('discount_desc') is not None:
            temp_model = HotelSearchResponseBodyModuleItemsDiscountDesc()
            self.discount_desc = temp_model.from_map(m['discount_desc'])
        if m.get('distance') is not None:
            self.distance = m.get('distance')
        if m.get('district_code') is not None:
            self.district_code = m.get('district_code')
        if m.get('hotel_address') is not None:
            self.hotel_address = m.get('hotel_address')
        if m.get('hotel_code') is not None:
            self.hotel_code = m.get('hotel_code')
        if m.get('hotel_en_name') is not None:
            self.hotel_en_name = m.get('hotel_en_name')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('image_url') is not None:
            self.image_url = m.get('image_url')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('location') is not None:
            self.location = m.get('location')
        if m.get('min_price') is not None:
            self.min_price = m.get('min_price')
        if m.get('original_min_price') is not None:
            self.original_min_price = m.get('original_min_price')
        if m.get('score') is not None:
            self.score = m.get('score')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tel') is not None:
            self.tel = m.get('tel')
        return self


class HotelSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        items: List[HotelSearchResponseBodyModuleItems] = None,
    ):
        self.items = items

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = HotelSearchResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        return self


class HotelSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelSearchResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelStaticInfoHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelStaticInfoRequest(TeaModel):
    def __init__(
        self,
        hotel_ids: List[str] = None,
    ):
        # This parameter is required.
        self.hotel_ids = hotel_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_ids is not None:
            result['hotel_ids'] = self.hotel_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hotel_ids') is not None:
            self.hotel_ids = m.get('hotel_ids')
        return self


class HotelStaticInfoShrinkRequest(TeaModel):
    def __init__(
        self,
        hotel_ids_shrink: str = None,
    ):
        # This parameter is required.
        self.hotel_ids_shrink = hotel_ids_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hotel_ids_shrink is not None:
            result['hotel_ids'] = self.hotel_ids_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('hotel_ids') is not None:
            self.hotel_ids_shrink = m.get('hotel_ids')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfosExpandInfo(TeaModel):
    def __init__(
        self,
        check_in: str = None,
        check_out: str = None,
        decorate_time: str = None,
        floors: str = None,
        hotel_facilities: List[str] = None,
        hotel_type: int = None,
        opening_time: str = None,
        room_facilities: List[str] = None,
        rooms: int = None,
        service: List[str] = None,
        theme_tag: str = None,
    ):
        self.check_in = check_in
        self.check_out = check_out
        self.decorate_time = decorate_time
        self.floors = floors
        self.hotel_facilities = hotel_facilities
        self.hotel_type = hotel_type
        self.opening_time = opening_time
        self.room_facilities = room_facilities
        self.rooms = rooms
        self.service = service
        self.theme_tag = theme_tag

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.decorate_time is not None:
            result['decorate_time'] = self.decorate_time
        if self.floors is not None:
            result['floors'] = self.floors
        if self.hotel_facilities is not None:
            result['hotel_facilities'] = self.hotel_facilities
        if self.hotel_type is not None:
            result['hotel_type'] = self.hotel_type
        if self.opening_time is not None:
            result['opening_time'] = self.opening_time
        if self.room_facilities is not None:
            result['room_facilities'] = self.room_facilities
        if self.rooms is not None:
            result['rooms'] = self.rooms
        if self.service is not None:
            result['service'] = self.service
        if self.theme_tag is not None:
            result['theme_tag'] = self.theme_tag
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('decorate_time') is not None:
            self.decorate_time = m.get('decorate_time')
        if m.get('floors') is not None:
            self.floors = m.get('floors')
        if m.get('hotel_facilities') is not None:
            self.hotel_facilities = m.get('hotel_facilities')
        if m.get('hotel_type') is not None:
            self.hotel_type = m.get('hotel_type')
        if m.get('opening_time') is not None:
            self.opening_time = m.get('opening_time')
        if m.get('room_facilities') is not None:
            self.room_facilities = m.get('room_facilities')
        if m.get('rooms') is not None:
            self.rooms = m.get('rooms')
        if m.get('service') is not None:
            self.service = m.get('service')
        if m.get('theme_tag') is not None:
            self.theme_tag = m.get('theme_tag')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfosImageinfos(TeaModel):
    def __init__(
        self,
        desc: str = None,
        tag: int = None,
        url: str = None,
    ):
        self.desc = desc
        self.tag = tag
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.tag is not None:
            result['tag'] = self.tag
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('tag') is not None:
            self.tag = m.get('tag')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupListBedInfos(TeaModel):
    def __init__(
        self,
        bed_desc: str = None,
        bed_num: int = None,
        bed_size: str = None,
        bed_type: str = None,
        length: str = None,
        width: str = None,
    ):
        self.bed_desc = bed_desc
        self.bed_num = bed_num
        self.bed_size = bed_size
        self.bed_type = bed_type
        self.length = length
        self.width = width

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_desc is not None:
            result['bed_desc'] = self.bed_desc
        if self.bed_num is not None:
            result['bed_num'] = self.bed_num
        if self.bed_size is not None:
            result['bed_size'] = self.bed_size
        if self.bed_type is not None:
            result['bed_type'] = self.bed_type
        if self.length is not None:
            result['length'] = self.length
        if self.width is not None:
            result['width'] = self.width
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bed_desc') is not None:
            self.bed_desc = m.get('bed_desc')
        if m.get('bed_num') is not None:
            self.bed_num = m.get('bed_num')
        if m.get('bed_size') is not None:
            self.bed_size = m.get('bed_size')
        if m.get('bed_type') is not None:
            self.bed_type = m.get('bed_type')
        if m.get('length') is not None:
            self.length = m.get('length')
        if m.get('width') is not None:
            self.width = m.get('width')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupList(TeaModel):
    def __init__(
        self,
        bed_infos: List[HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupListBedInfos] = None,
    ):
        self.bed_infos = bed_infos

    def validate(self):
        if self.bed_infos:
            for k in self.bed_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['bed_Infos'] = []
        if self.bed_infos is not None:
            for k in self.bed_infos:
                result['bed_Infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.bed_infos = []
        if m.get('bed_Infos') is not None:
            for k in m.get('bed_Infos'):
                temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupListBedInfos()
                self.bed_infos.append(temp_model.from_map(k))
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfos(TeaModel):
    def __init__(
        self,
        bed_desc: str = None,
        bed_num: int = None,
        bed_size: str = None,
        bed_type: str = None,
        length: str = None,
        width: str = None,
    ):
        self.bed_desc = bed_desc
        self.bed_num = bed_num
        self.bed_size = bed_size
        self.bed_type = bed_type
        self.length = length
        self.width = width

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bed_desc is not None:
            result['bed_desc'] = self.bed_desc
        if self.bed_num is not None:
            result['bed_num'] = self.bed_num
        if self.bed_size is not None:
            result['bed_size'] = self.bed_size
        if self.bed_type is not None:
            result['bed_type'] = self.bed_type
        if self.length is not None:
            result['length'] = self.length
        if self.width is not None:
            result['width'] = self.width
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bed_desc') is not None:
            self.bed_desc = m.get('bed_desc')
        if m.get('bed_num') is not None:
            self.bed_num = m.get('bed_num')
        if m.get('bed_size') is not None:
            self.bed_size = m.get('bed_size')
        if m.get('bed_type') is not None:
            self.bed_type = m.get('bed_type')
        if m.get('length') is not None:
            self.length = m.get('length')
        if m.get('width') is not None:
            self.width = m.get('width')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfos(TeaModel):
    def __init__(
        self,
        bed_info_group_list: List[HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupList] = None,
        bed_infos: List[HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfos] = None,
        extra_bed: int = None,
        extra_bed_desc: str = None,
        floor: str = None,
        internet_way: str = None,
        max_occupancy: int = None,
        room_facilities: str = None,
        room_facility_list: List[str] = None,
        room_id: str = None,
        room_image: str = None,
        room_images: List[str] = None,
        room_name: str = None,
        room_type: int = None,
        roomarea: str = None,
        rooms: int = None,
        window: str = None,
        window_bad: str = None,
        window_view: str = None,
    ):
        self.bed_info_group_list = bed_info_group_list
        self.bed_infos = bed_infos
        self.extra_bed = extra_bed
        self.extra_bed_desc = extra_bed_desc
        self.floor = floor
        self.internet_way = internet_way
        self.max_occupancy = max_occupancy
        self.room_facilities = room_facilities
        self.room_facility_list = room_facility_list
        self.room_id = room_id
        self.room_image = room_image
        self.room_images = room_images
        self.room_name = room_name
        self.room_type = room_type
        self.roomarea = roomarea
        self.rooms = rooms
        self.window = window
        self.window_bad = window_bad
        self.window_view = window_view

    def validate(self):
        if self.bed_info_group_list:
            for k in self.bed_info_group_list:
                if k:
                    k.validate()
        if self.bed_infos:
            for k in self.bed_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['bed_info_group_list'] = []
        if self.bed_info_group_list is not None:
            for k in self.bed_info_group_list:
                result['bed_info_group_list'].append(k.to_map() if k else None)
        result['bed_infos'] = []
        if self.bed_infos is not None:
            for k in self.bed_infos:
                result['bed_infos'].append(k.to_map() if k else None)
        if self.extra_bed is not None:
            result['extra_bed'] = self.extra_bed
        if self.extra_bed_desc is not None:
            result['extra_bed_desc'] = self.extra_bed_desc
        if self.floor is not None:
            result['floor'] = self.floor
        if self.internet_way is not None:
            result['internet_way'] = self.internet_way
        if self.max_occupancy is not None:
            result['max_occupancy'] = self.max_occupancy
        if self.room_facilities is not None:
            result['room_facilities'] = self.room_facilities
        if self.room_facility_list is not None:
            result['room_facility_list'] = self.room_facility_list
        if self.room_id is not None:
            result['room_id'] = self.room_id
        if self.room_image is not None:
            result['room_image'] = self.room_image
        if self.room_images is not None:
            result['room_images'] = self.room_images
        if self.room_name is not None:
            result['room_name'] = self.room_name
        if self.room_type is not None:
            result['room_type'] = self.room_type
        if self.roomarea is not None:
            result['roomarea'] = self.roomarea
        if self.rooms is not None:
            result['rooms'] = self.rooms
        if self.window is not None:
            result['window'] = self.window
        if self.window_bad is not None:
            result['window_bad'] = self.window_bad
        if self.window_view is not None:
            result['window_view'] = self.window_view
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.bed_info_group_list = []
        if m.get('bed_info_group_list') is not None:
            for k in m.get('bed_info_group_list'):
                temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfoGroupList()
                self.bed_info_group_list.append(temp_model.from_map(k))
        self.bed_infos = []
        if m.get('bed_infos') is not None:
            for k in m.get('bed_infos'):
                temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfosBedInfos()
                self.bed_infos.append(temp_model.from_map(k))
        if m.get('extra_bed') is not None:
            self.extra_bed = m.get('extra_bed')
        if m.get('extra_bed_desc') is not None:
            self.extra_bed_desc = m.get('extra_bed_desc')
        if m.get('floor') is not None:
            self.floor = m.get('floor')
        if m.get('internet_way') is not None:
            self.internet_way = m.get('internet_way')
        if m.get('max_occupancy') is not None:
            self.max_occupancy = m.get('max_occupancy')
        if m.get('room_facilities') is not None:
            self.room_facilities = m.get('room_facilities')
        if m.get('room_facility_list') is not None:
            self.room_facility_list = m.get('room_facility_list')
        if m.get('room_id') is not None:
            self.room_id = m.get('room_id')
        if m.get('room_image') is not None:
            self.room_image = m.get('room_image')
        if m.get('room_images') is not None:
            self.room_images = m.get('room_images')
        if m.get('room_name') is not None:
            self.room_name = m.get('room_name')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        if m.get('roomarea') is not None:
            self.roomarea = m.get('roomarea')
        if m.get('rooms') is not None:
            self.rooms = m.get('rooms')
        if m.get('window') is not None:
            self.window = m.get('window')
        if m.get('window_bad') is not None:
            self.window_bad = m.get('window_bad')
        if m.get('window_view') is not None:
            self.window_view = m.get('window_view')
        return self


class HotelStaticInfoResponseBodyModuleHotelStaticInfos(TeaModel):
    def __init__(
        self,
        block_room_type_information: Dict[str, str] = None,
        brand: str = None,
        brand_name: str = None,
        city_code: str = None,
        city_name: str = None,
        country: str = None,
        country_code: str = None,
        description: str = None,
        district: str = None,
        district_name: str = None,
        expand_info: HotelStaticInfoResponseBodyModuleHotelStaticInfosExpandInfo = None,
        hotel_address: str = None,
        hotel_en_address: str = None,
        hotel_en_name: str = None,
        hotel_id: str = None,
        hotel_name: str = None,
        hotel_open_time: str = None,
        hotel_phones: str = None,
        hotel_policies: str = None,
        hotelfax: str = None,
        hotelpics: str = None,
        imageinfos: List[HotelStaticInfoResponseBodyModuleHotelStaticInfosImageinfos] = None,
        invoice_provider_method: str = None,
        invoice_types: List[int] = None,
        location: str = None,
        province: str = None,
        province_name: str = None,
        rating_average: str = None,
        room_infos: List[HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfos] = None,
        star: str = None,
        star_rate: str = None,
        status: str = None,
        themes: str = None,
        visa_reminding: bool = None,
    ):
        self.block_room_type_information = block_room_type_information
        self.brand = brand
        self.brand_name = brand_name
        self.city_code = city_code
        self.city_name = city_name
        self.country = country
        self.country_code = country_code
        self.description = description
        self.district = district
        self.district_name = district_name
        self.expand_info = expand_info
        self.hotel_address = hotel_address
        self.hotel_en_address = hotel_en_address
        self.hotel_en_name = hotel_en_name
        self.hotel_id = hotel_id
        self.hotel_name = hotel_name
        self.hotel_open_time = hotel_open_time
        self.hotel_phones = hotel_phones
        self.hotel_policies = hotel_policies
        self.hotelfax = hotelfax
        self.hotelpics = hotelpics
        self.imageinfos = imageinfos
        self.invoice_provider_method = invoice_provider_method
        self.invoice_types = invoice_types
        self.location = location
        self.province = province
        self.province_name = province_name
        self.rating_average = rating_average
        self.room_infos = room_infos
        self.star = star
        self.star_rate = star_rate
        self.status = status
        self.themes = themes
        self.visa_reminding = visa_reminding

    def validate(self):
        if self.expand_info:
            self.expand_info.validate()
        if self.imageinfos:
            for k in self.imageinfos:
                if k:
                    k.validate()
        if self.room_infos:
            for k in self.room_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.block_room_type_information is not None:
            result['block_room_type_information'] = self.block_room_type_information
        if self.brand is not None:
            result['brand'] = self.brand
        if self.brand_name is not None:
            result['brand_name'] = self.brand_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.country is not None:
            result['country'] = self.country
        if self.country_code is not None:
            result['country_code'] = self.country_code
        if self.description is not None:
            result['description'] = self.description
        if self.district is not None:
            result['district'] = self.district
        if self.district_name is not None:
            result['district_name'] = self.district_name
        if self.expand_info is not None:
            result['expand_info'] = self.expand_info.to_map()
        if self.hotel_address is not None:
            result['hotel_address'] = self.hotel_address
        if self.hotel_en_address is not None:
            result['hotel_en_address'] = self.hotel_en_address
        if self.hotel_en_name is not None:
            result['hotel_en_name'] = self.hotel_en_name
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_open_time is not None:
            result['hotel_open_time'] = self.hotel_open_time
        if self.hotel_phones is not None:
            result['hotel_phones'] = self.hotel_phones
        if self.hotel_policies is not None:
            result['hotel_policies'] = self.hotel_policies
        if self.hotelfax is not None:
            result['hotelfax'] = self.hotelfax
        if self.hotelpics is not None:
            result['hotelpics'] = self.hotelpics
        result['imageinfos'] = []
        if self.imageinfos is not None:
            for k in self.imageinfos:
                result['imageinfos'].append(k.to_map() if k else None)
        if self.invoice_provider_method is not None:
            result['invoice_provider_method'] = self.invoice_provider_method
        if self.invoice_types is not None:
            result['invoice_types'] = self.invoice_types
        if self.location is not None:
            result['location'] = self.location
        if self.province is not None:
            result['province'] = self.province
        if self.province_name is not None:
            result['province_name'] = self.province_name
        if self.rating_average is not None:
            result['rating_average'] = self.rating_average
        result['room_infos'] = []
        if self.room_infos is not None:
            for k in self.room_infos:
                result['room_infos'].append(k.to_map() if k else None)
        if self.star is not None:
            result['star'] = self.star
        if self.star_rate is not None:
            result['star_rate'] = self.star_rate
        if self.status is not None:
            result['status'] = self.status
        if self.themes is not None:
            result['themes'] = self.themes
        if self.visa_reminding is not None:
            result['visa_reminding'] = self.visa_reminding
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('block_room_type_information') is not None:
            self.block_room_type_information = m.get('block_room_type_information')
        if m.get('brand') is not None:
            self.brand = m.get('brand')
        if m.get('brand_name') is not None:
            self.brand_name = m.get('brand_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('country_code') is not None:
            self.country_code = m.get('country_code')
        if m.get('description') is not None:
            self.description = m.get('description')
        if m.get('district') is not None:
            self.district = m.get('district')
        if m.get('district_name') is not None:
            self.district_name = m.get('district_name')
        if m.get('expand_info') is not None:
            temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfosExpandInfo()
            self.expand_info = temp_model.from_map(m['expand_info'])
        if m.get('hotel_address') is not None:
            self.hotel_address = m.get('hotel_address')
        if m.get('hotel_en_address') is not None:
            self.hotel_en_address = m.get('hotel_en_address')
        if m.get('hotel_en_name') is not None:
            self.hotel_en_name = m.get('hotel_en_name')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_open_time') is not None:
            self.hotel_open_time = m.get('hotel_open_time')
        if m.get('hotel_phones') is not None:
            self.hotel_phones = m.get('hotel_phones')
        if m.get('hotel_policies') is not None:
            self.hotel_policies = m.get('hotel_policies')
        if m.get('hotelfax') is not None:
            self.hotelfax = m.get('hotelfax')
        if m.get('hotelpics') is not None:
            self.hotelpics = m.get('hotelpics')
        self.imageinfos = []
        if m.get('imageinfos') is not None:
            for k in m.get('imageinfos'):
                temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfosImageinfos()
                self.imageinfos.append(temp_model.from_map(k))
        if m.get('invoice_provider_method') is not None:
            self.invoice_provider_method = m.get('invoice_provider_method')
        if m.get('invoice_types') is not None:
            self.invoice_types = m.get('invoice_types')
        if m.get('location') is not None:
            self.location = m.get('location')
        if m.get('province') is not None:
            self.province = m.get('province')
        if m.get('province_name') is not None:
            self.province_name = m.get('province_name')
        if m.get('rating_average') is not None:
            self.rating_average = m.get('rating_average')
        self.room_infos = []
        if m.get('room_infos') is not None:
            for k in m.get('room_infos'):
                temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfosRoomInfos()
                self.room_infos.append(temp_model.from_map(k))
        if m.get('star') is not None:
            self.star = m.get('star')
        if m.get('star_rate') is not None:
            self.star_rate = m.get('star_rate')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('themes') is not None:
            self.themes = m.get('themes')
        if m.get('visa_reminding') is not None:
            self.visa_reminding = m.get('visa_reminding')
        return self


class HotelStaticInfoResponseBodyModule(TeaModel):
    def __init__(
        self,
        hotel_static_infos: List[HotelStaticInfoResponseBodyModuleHotelStaticInfos] = None,
    ):
        self.hotel_static_infos = hotel_static_infos

    def validate(self):
        if self.hotel_static_infos:
            for k in self.hotel_static_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['hotel_static_infos'] = []
        if self.hotel_static_infos is not None:
            for k in self.hotel_static_infos:
                result['hotel_static_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.hotel_static_infos = []
        if m.get('hotel_static_infos') is not None:
            for k in m.get('hotel_static_infos'):
                temp_model = HotelStaticInfoResponseBodyModuleHotelStaticInfos()
                self.hotel_static_infos.append(temp_model.from_map(k))
        return self


class HotelStaticInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelStaticInfoResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelStaticInfoResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelStaticInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelStaticInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelStaticInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HotelSuggestV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class HotelSuggestV2Request(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        check_in: str = None,
        check_out: str = None,
        city_code: str = None,
        keyword: str = None,
        search_type: int = None,
    ):
        self.btrip_user_id = btrip_user_id
        self.check_in = check_in
        self.check_out = check_out
        self.city_code = city_code
        self.keyword = keyword
        # This parameter is required.
        self.search_type = search_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.check_in is not None:
            result['check_in'] = self.check_in
        if self.check_out is not None:
            result['check_out'] = self.check_out
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.keyword is not None:
            result['keyword'] = self.keyword
        if self.search_type is not None:
            result['search_type'] = self.search_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('check_in') is not None:
            self.check_in = m.get('check_in')
        if m.get('check_out') is not None:
            self.check_out = m.get('check_out')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('keyword') is not None:
            self.keyword = m.get('keyword')
        if m.get('search_type') is not None:
            self.search_type = m.get('search_type')
        return self


class HotelSuggestV2ResponseBodyModuleGuessSuggestInfos(TeaModel):
    def __init__(
        self,
        address: str = None,
        city_code: int = None,
        city_name: str = None,
        display_name: str = None,
        hotel_id: str = None,
        icon: str = None,
        point: str = None,
        price: str = None,
        region: int = None,
        type: int = None,
        type_desc: str = None,
    ):
        self.address = address
        self.city_code = city_code
        self.city_name = city_name
        self.display_name = display_name
        self.hotel_id = hotel_id
        self.icon = icon
        self.point = point
        self.price = price
        self.region = region
        self.type = type
        self.type_desc = type_desc

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.icon is not None:
            result['icon'] = self.icon
        if self.point is not None:
            result['point'] = self.point
        if self.price is not None:
            result['price'] = self.price
        if self.region is not None:
            result['region'] = self.region
        if self.type is not None:
            result['type'] = self.type
        if self.type_desc is not None:
            result['type_desc'] = self.type_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('point') is not None:
            self.point = m.get('point')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('type_desc') is not None:
            self.type_desc = m.get('type_desc')
        return self


class HotelSuggestV2ResponseBodyModuleKeywordSuggestInfosBusinessAreaWithCity(TeaModel):
    def __init__(
        self,
        address: str = None,
        city_code: int = None,
        city_name: str = None,
        display_name: str = None,
        hotel_id: str = None,
        icon: str = None,
        point: str = None,
        price: str = None,
        region: int = None,
        type: int = None,
        type_desc: str = None,
    ):
        self.address = address
        self.city_code = city_code
        self.city_name = city_name
        self.display_name = display_name
        self.hotel_id = hotel_id
        self.icon = icon
        self.point = point
        self.price = price
        self.region = region
        self.type = type
        self.type_desc = type_desc

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.icon is not None:
            result['icon'] = self.icon
        if self.point is not None:
            result['point'] = self.point
        if self.price is not None:
            result['price'] = self.price
        if self.region is not None:
            result['region'] = self.region
        if self.type is not None:
            result['type'] = self.type
        if self.type_desc is not None:
            result['type_desc'] = self.type_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('point') is not None:
            self.point = m.get('point')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('type_desc') is not None:
            self.type_desc = m.get('type_desc')
        return self


class HotelSuggestV2ResponseBodyModuleKeywordSuggestInfos(TeaModel):
    def __init__(
        self,
        address: str = None,
        business_area_with_city: List[HotelSuggestV2ResponseBodyModuleKeywordSuggestInfosBusinessAreaWithCity] = None,
        city_code: int = None,
        city_name: str = None,
        display_name: str = None,
        hotel_id: str = None,
        icon: str = None,
        point: str = None,
        price: str = None,
        region: int = None,
        type: int = None,
        type_desc: str = None,
    ):
        self.address = address
        self.business_area_with_city = business_area_with_city
        self.city_code = city_code
        self.city_name = city_name
        self.display_name = display_name
        self.hotel_id = hotel_id
        self.icon = icon
        self.point = point
        self.price = price
        self.region = region
        self.type = type
        self.type_desc = type_desc

    def validate(self):
        if self.business_area_with_city:
            for k in self.business_area_with_city:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        result['business_area_with_city'] = []
        if self.business_area_with_city is not None:
            for k in self.business_area_with_city:
                result['business_area_with_city'].append(k.to_map() if k else None)
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.display_name is not None:
            result['display_name'] = self.display_name
        if self.hotel_id is not None:
            result['hotel_id'] = self.hotel_id
        if self.icon is not None:
            result['icon'] = self.icon
        if self.point is not None:
            result['point'] = self.point
        if self.price is not None:
            result['price'] = self.price
        if self.region is not None:
            result['region'] = self.region
        if self.type is not None:
            result['type'] = self.type
        if self.type_desc is not None:
            result['type_desc'] = self.type_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        self.business_area_with_city = []
        if m.get('business_area_with_city') is not None:
            for k in m.get('business_area_with_city'):
                temp_model = HotelSuggestV2ResponseBodyModuleKeywordSuggestInfosBusinessAreaWithCity()
                self.business_area_with_city.append(temp_model.from_map(k))
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        if m.get('hotel_id') is not None:
            self.hotel_id = m.get('hotel_id')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('point') is not None:
            self.point = m.get('point')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('region') is not None:
            self.region = m.get('region')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('type_desc') is not None:
            self.type_desc = m.get('type_desc')
        return self


class HotelSuggestV2ResponseBodyModulePopularSuggestInfosPopularInfos(TeaModel):
    def __init__(
        self,
        display_name: str = None,
    ):
        self.display_name = display_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.display_name is not None:
            result['display_name'] = self.display_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('display_name') is not None:
            self.display_name = m.get('display_name')
        return self


class HotelSuggestV2ResponseBodyModulePopularSuggestInfos(TeaModel):
    def __init__(
        self,
        icon: str = None,
        popular_infos: List[HotelSuggestV2ResponseBodyModulePopularSuggestInfosPopularInfos] = None,
        title: str = None,
    ):
        self.icon = icon
        self.popular_infos = popular_infos
        self.title = title

    def validate(self):
        if self.popular_infos:
            for k in self.popular_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.icon is not None:
            result['icon'] = self.icon
        result['popular_infos'] = []
        if self.popular_infos is not None:
            for k in self.popular_infos:
                result['popular_infos'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        self.popular_infos = []
        if m.get('popular_infos') is not None:
            for k in m.get('popular_infos'):
                temp_model = HotelSuggestV2ResponseBodyModulePopularSuggestInfosPopularInfos()
                self.popular_infos.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class HotelSuggestV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        guess_suggest_infos: List[HotelSuggestV2ResponseBodyModuleGuessSuggestInfos] = None,
        keyword_suggest_infos: List[HotelSuggestV2ResponseBodyModuleKeywordSuggestInfos] = None,
        popular_suggest_infos: List[HotelSuggestV2ResponseBodyModulePopularSuggestInfos] = None,
        tips: str = None,
    ):
        self.guess_suggest_infos = guess_suggest_infos
        self.keyword_suggest_infos = keyword_suggest_infos
        self.popular_suggest_infos = popular_suggest_infos
        self.tips = tips

    def validate(self):
        if self.guess_suggest_infos:
            for k in self.guess_suggest_infos:
                if k:
                    k.validate()
        if self.keyword_suggest_infos:
            for k in self.keyword_suggest_infos:
                if k:
                    k.validate()
        if self.popular_suggest_infos:
            for k in self.popular_suggest_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['guess_suggest_infos'] = []
        if self.guess_suggest_infos is not None:
            for k in self.guess_suggest_infos:
                result['guess_suggest_infos'].append(k.to_map() if k else None)
        result['keyword_suggest_infos'] = []
        if self.keyword_suggest_infos is not None:
            for k in self.keyword_suggest_infos:
                result['keyword_suggest_infos'].append(k.to_map() if k else None)
        result['popular_suggest_infos'] = []
        if self.popular_suggest_infos is not None:
            for k in self.popular_suggest_infos:
                result['popular_suggest_infos'].append(k.to_map() if k else None)
        if self.tips is not None:
            result['tips'] = self.tips
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.guess_suggest_infos = []
        if m.get('guess_suggest_infos') is not None:
            for k in m.get('guess_suggest_infos'):
                temp_model = HotelSuggestV2ResponseBodyModuleGuessSuggestInfos()
                self.guess_suggest_infos.append(temp_model.from_map(k))
        self.keyword_suggest_infos = []
        if m.get('keyword_suggest_infos') is not None:
            for k in m.get('keyword_suggest_infos'):
                temp_model = HotelSuggestV2ResponseBodyModuleKeywordSuggestInfos()
                self.keyword_suggest_infos.append(temp_model.from_map(k))
        self.popular_suggest_infos = []
        if m.get('popular_suggest_infos') is not None:
            for k in m.get('popular_suggest_infos'):
                temp_model = HotelSuggestV2ResponseBodyModulePopularSuggestInfos()
                self.popular_suggest_infos.append(temp_model.from_map(k))
        if m.get('tips') is not None:
            self.tips = m.get('tips')
        return self


class HotelSuggestV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: HotelSuggestV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = HotelSuggestV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class HotelSuggestV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: HotelSuggestV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = HotelSuggestV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IeFlightBillSettlementQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class IeFlightBillSettlementQueryRequest(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        period_end: str = None,
        period_start: str = None,
    ):
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.period_end = period_end
        # This parameter is required.
        self.period_start = period_start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class IeFlightBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(
        self,
        advance_day: int = None,
        airline_corp_code: str = None,
        airline_corp_name: str = None,
        alipay_trade_no: str = None,
        apply_arr_city_code: str = None,
        apply_arr_city_name: str = None,
        apply_dep_city_code: str = None,
        apply_dep_city_name: str = None,
        apply_extend_field: str = None,
        apply_id: str = None,
        arr_airport_code: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_country: str = None,
        arr_country_code: str = None,
        arr_date: str = None,
        arr_station: str = None,
        arr_time: str = None,
        bill_record_time: str = None,
        book_mode: str = None,
        book_time: str = None,
        booker_id: str = None,
        booker_job_no: str = None,
        booker_name: str = None,
        btrip_coupon_fee: float = None,
        business_trip_result: str = None,
        cabin: str = None,
        cabin_class: str = None,
        capital_direction: str = None,
        cascade_department: str = None,
        change_fee: float = None,
        change_result: str = None,
        corp_pay_order_fee: float = None,
        cost_center: str = None,
        cost_center_number: str = None,
        coupon: float = None,
        dep_airport_code: str = None,
        dep_city_code: str = None,
        dep_country: str = None,
        dep_country_code: str = None,
        department: str = None,
        department_id: str = None,
        dept_city: str = None,
        dept_date: str = None,
        dept_station: str = None,
        dept_time: str = None,
        discount: str = None,
        exceed_reason: str = None,
        fee_type: str = None,
        flight_no: str = None,
        index: str = None,
        ins_order_id: str = None,
        insurance_fee: float = None,
        insurance_number: str = None,
        insurance_product_name: str = None,
        invoice_title: str = None,
        most_difference_dept_time: str = None,
        most_difference_discount: str = None,
        most_difference_flight_no: str = None,
        most_difference_price: float = None,
        most_difference_reason: str = None,
        most_price: float = None,
        negotiation_coupon_fee: float = None,
        order_id: str = None,
        order_status_desc: str = None,
        over_apply_id: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        primary_id: int = None,
        project_code: str = None,
        project_name: str = None,
        refund_change_cost: float = None,
        refund_fee: float = None,
        refund_result: str = None,
        remark: str = None,
        repeat_refund: str = None,
        seal_price: float = None,
        segment_type: str = None,
        service_fee: float = None,
        settlement_fee: float = None,
        settlement_grant_fee: float = None,
        settlement_time: str = None,
        settlement_type: str = None,
        status: int = None,
        sub_order_id: str = None,
        tax_fee: float = None,
        tax_rate: str = None,
        third_itinerary_id: str = None,
        ticket_id: str = None,
        trade: str = None,
        traveler_id: str = None,
        traveler_job_no: str = None,
        traveler_name: str = None,
        voucher_type: int = None,
        voyage_name: str = None,
    ):
        self.advance_day = advance_day
        self.airline_corp_code = airline_corp_code
        self.airline_corp_name = airline_corp_name
        self.alipay_trade_no = alipay_trade_no
        self.apply_arr_city_code = apply_arr_city_code
        self.apply_arr_city_name = apply_arr_city_name
        self.apply_dep_city_code = apply_dep_city_code
        self.apply_dep_city_name = apply_dep_city_name
        # 审批扩展自定义字段
        self.apply_extend_field = apply_extend_field
        self.apply_id = apply_id
        self.arr_airport_code = arr_airport_code
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_country = arr_country
        self.arr_country_code = arr_country_code
        self.arr_date = arr_date
        self.arr_station = arr_station
        self.arr_time = arr_time
        self.bill_record_time = bill_record_time
        self.book_mode = book_mode
        self.book_time = book_time
        self.booker_id = booker_id
        self.booker_job_no = booker_job_no
        self.booker_name = booker_name
        self.btrip_coupon_fee = btrip_coupon_fee
        self.business_trip_result = business_trip_result
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.capital_direction = capital_direction
        self.cascade_department = cascade_department
        self.change_fee = change_fee
        self.change_result = change_result
        self.corp_pay_order_fee = corp_pay_order_fee
        self.cost_center = cost_center
        self.cost_center_number = cost_center_number
        self.coupon = coupon
        self.dep_airport_code = dep_airport_code
        self.dep_city_code = dep_city_code
        self.dep_country = dep_country
        self.dep_country_code = dep_country_code
        self.department = department
        self.department_id = department_id
        self.dept_city = dept_city
        self.dept_date = dept_date
        self.dept_station = dept_station
        self.dept_time = dept_time
        self.discount = discount
        self.exceed_reason = exceed_reason
        self.fee_type = fee_type
        self.flight_no = flight_no
        self.index = index
        self.ins_order_id = ins_order_id
        self.insurance_fee = insurance_fee
        self.insurance_number = insurance_number
        self.insurance_product_name = insurance_product_name
        self.invoice_title = invoice_title
        self.most_difference_dept_time = most_difference_dept_time
        self.most_difference_discount = most_difference_discount
        self.most_difference_flight_no = most_difference_flight_no
        self.most_difference_price = most_difference_price
        self.most_difference_reason = most_difference_reason
        self.most_price = most_price
        self.negotiation_coupon_fee = negotiation_coupon_fee
        self.order_id = order_id
        self.order_status_desc = order_status_desc
        self.over_apply_id = over_apply_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.primary_id = primary_id
        self.project_code = project_code
        self.project_name = project_name
        self.refund_change_cost = refund_change_cost
        self.refund_fee = refund_fee
        self.refund_result = refund_result
        self.remark = remark
        self.repeat_refund = repeat_refund
        self.seal_price = seal_price
        self.segment_type = segment_type
        self.service_fee = service_fee
        self.settlement_fee = settlement_fee
        self.settlement_grant_fee = settlement_grant_fee
        self.settlement_time = settlement_time
        self.settlement_type = settlement_type
        self.status = status
        self.sub_order_id = sub_order_id
        self.tax_fee = tax_fee
        # 税率
        self.tax_rate = tax_rate
        self.third_itinerary_id = third_itinerary_id
        self.ticket_id = ticket_id
        self.trade = trade
        self.traveler_id = traveler_id
        self.traveler_job_no = traveler_job_no
        self.traveler_name = traveler_name
        self.voucher_type = voucher_type
        self.voyage_name = voyage_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.advance_day is not None:
            result['advance_day'] = self.advance_day
        if self.airline_corp_code is not None:
            result['airline_corp_code'] = self.airline_corp_code
        if self.airline_corp_name is not None:
            result['airline_corp_name'] = self.airline_corp_name
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_country is not None:
            result['arr_country'] = self.arr_country
        if self.arr_country_code is not None:
            result['arr_country_code'] = self.arr_country_code
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_mode is not None:
            result['book_mode'] = self.book_mode
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.btrip_coupon_fee is not None:
            result['btrip_coupon_fee'] = self.btrip_coupon_fee
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.change_result is not None:
            result['change_result'] = self.change_result
        if self.corp_pay_order_fee is not None:
            result['corp_pay_order_fee'] = self.corp_pay_order_fee
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.coupon is not None:
            result['coupon'] = self.coupon
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_country is not None:
            result['dep_country'] = self.dep_country
        if self.dep_country_code is not None:
            result['dep_country_code'] = self.dep_country_code
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.dept_city is not None:
            result['dept_city'] = self.dept_city
        if self.dept_date is not None:
            result['dept_date'] = self.dept_date
        if self.dept_station is not None:
            result['dept_station'] = self.dept_station
        if self.dept_time is not None:
            result['dept_time'] = self.dept_time
        if self.discount is not None:
            result['discount'] = self.discount
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.index is not None:
            result['index'] = self.index
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        if self.insurance_fee is not None:
            result['insurance_fee'] = self.insurance_fee
        if self.insurance_number is not None:
            result['insurance_number'] = self.insurance_number
        if self.insurance_product_name is not None:
            result['insurance_product_name'] = self.insurance_product_name
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.most_difference_dept_time is not None:
            result['most_difference_dept_time'] = self.most_difference_dept_time
        if self.most_difference_discount is not None:
            result['most_difference_discount'] = self.most_difference_discount
        if self.most_difference_flight_no is not None:
            result['most_difference_flight_no'] = self.most_difference_flight_no
        if self.most_difference_price is not None:
            result['most_difference_price'] = self.most_difference_price
        if self.most_difference_reason is not None:
            result['most_difference_reason'] = self.most_difference_reason
        if self.most_price is not None:
            result['most_price'] = self.most_price
        if self.negotiation_coupon_fee is not None:
            result['negotiation_coupon_fee'] = self.negotiation_coupon_fee
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.refund_change_cost is not None:
            result['refund_change_cost'] = self.refund_change_cost
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_result is not None:
            result['refund_result'] = self.refund_result
        if self.remark is not None:
            result['remark'] = self.remark
        if self.repeat_refund is not None:
            result['repeat_refund'] = self.repeat_refund
        if self.seal_price is not None:
            result['seal_price'] = self.seal_price
        if self.segment_type is not None:
            result['segment_type'] = self.segment_type
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.tax_fee is not None:
            result['tax_fee'] = self.tax_fee
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.ticket_id is not None:
            result['ticket_id'] = self.ticket_id
        if self.trade is not None:
            result['trade'] = self.trade
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        if self.voyage_name is not None:
            result['voyage_name'] = self.voyage_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('advance_day') is not None:
            self.advance_day = m.get('advance_day')
        if m.get('airline_corp_code') is not None:
            self.airline_corp_code = m.get('airline_corp_code')
        if m.get('airline_corp_name') is not None:
            self.airline_corp_name = m.get('airline_corp_name')
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_country') is not None:
            self.arr_country = m.get('arr_country')
        if m.get('arr_country_code') is not None:
            self.arr_country_code = m.get('arr_country_code')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_mode') is not None:
            self.book_mode = m.get('book_mode')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('btrip_coupon_fee') is not None:
            self.btrip_coupon_fee = m.get('btrip_coupon_fee')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('change_result') is not None:
            self.change_result = m.get('change_result')
        if m.get('corp_pay_order_fee') is not None:
            self.corp_pay_order_fee = m.get('corp_pay_order_fee')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('coupon') is not None:
            self.coupon = m.get('coupon')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_country') is not None:
            self.dep_country = m.get('dep_country')
        if m.get('dep_country_code') is not None:
            self.dep_country_code = m.get('dep_country_code')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('dept_city') is not None:
            self.dept_city = m.get('dept_city')
        if m.get('dept_date') is not None:
            self.dept_date = m.get('dept_date')
        if m.get('dept_station') is not None:
            self.dept_station = m.get('dept_station')
        if m.get('dept_time') is not None:
            self.dept_time = m.get('dept_time')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        if m.get('insurance_fee') is not None:
            self.insurance_fee = m.get('insurance_fee')
        if m.get('insurance_number') is not None:
            self.insurance_number = m.get('insurance_number')
        if m.get('insurance_product_name') is not None:
            self.insurance_product_name = m.get('insurance_product_name')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('most_difference_dept_time') is not None:
            self.most_difference_dept_time = m.get('most_difference_dept_time')
        if m.get('most_difference_discount') is not None:
            self.most_difference_discount = m.get('most_difference_discount')
        if m.get('most_difference_flight_no') is not None:
            self.most_difference_flight_no = m.get('most_difference_flight_no')
        if m.get('most_difference_price') is not None:
            self.most_difference_price = m.get('most_difference_price')
        if m.get('most_difference_reason') is not None:
            self.most_difference_reason = m.get('most_difference_reason')
        if m.get('most_price') is not None:
            self.most_price = m.get('most_price')
        if m.get('negotiation_coupon_fee') is not None:
            self.negotiation_coupon_fee = m.get('negotiation_coupon_fee')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('refund_change_cost') is not None:
            self.refund_change_cost = m.get('refund_change_cost')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_result') is not None:
            self.refund_result = m.get('refund_result')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('repeat_refund') is not None:
            self.repeat_refund = m.get('repeat_refund')
        if m.get('seal_price') is not None:
            self.seal_price = m.get('seal_price')
        if m.get('segment_type') is not None:
            self.segment_type = m.get('segment_type')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('tax_fee') is not None:
            self.tax_fee = m.get('tax_fee')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('ticket_id') is not None:
            self.ticket_id = m.get('ticket_id')
        if m.get('trade') is not None:
            self.trade = m.get('trade')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        if m.get('voyage_name') is not None:
            self.voyage_name = m.get('voyage_name')
        return self


class IeFlightBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        category: int = None,
        corp_id: str = None,
        data_list: List[IeFlightBillSettlementQueryResponseBodyModuleDataList] = None,
        period_end: str = None,
        period_start: str = None,
        total_num: int = None,
    ):
        self.category = category
        self.corp_id = corp_id
        self.data_list = data_list
        self.period_end = period_end
        self.period_start = period_start
        self.total_num = total_num

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = IeFlightBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        return self


class IeFlightBillSettlementQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: IeFlightBillSettlementQueryResponseBodyModule = None,
        more_page: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.more_page = more_page
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.more_page is not None:
            result['more_page'] = self.more_page
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = IeFlightBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('more_page') is not None:
            self.more_page = m.get('more_page')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IeFlightBillSettlementQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IeFlightBillSettlementQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IeFlightBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IeHotelBillSettlementQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class IeHotelBillSettlementQueryRequest(TeaModel):
    def __init__(
        self,
        category: int = None,
        page_no: int = None,
        page_size: int = None,
        period_end: str = None,
        period_start: str = None,
    ):
        self.category = category
        # This parameter is required.
        self.page_no = page_no
        self.page_size = page_size
        # This parameter is required.
        self.period_end = period_end
        # This parameter is required.
        self.period_start = period_start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class IeHotelBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(
        self,
        alipay_trade_no: str = None,
        amount_currency: str = None,
        apply_arr_city_code: str = None,
        apply_arr_city_name: str = None,
        apply_dep_city_code: str = None,
        apply_dep_city_name: str = None,
        apply_extend_field: str = None,
        apply_id: str = None,
        average_nights: float = None,
        bill_record_time: str = None,
        book_reason: str = None,
        book_time: str = None,
        booker_id: str = None,
        booker_job_no: str = None,
        booker_name: str = None,
        brand_group: str = None,
        brand_name: str = None,
        business_expense: int = None,
        business_trip_result: str = None,
        capital_direction: str = None,
        cascade_department: str = None,
        check_in_date: str = None,
        checkout_date: str = None,
        city: str = None,
        city_code: str = None,
        corp_refund_fee: float = None,
        corp_total_fee: float = None,
        cost_center: str = None,
        cost_center_number: str = None,
        country: str = None,
        country_code: str = None,
        department: str = None,
        department_id: str = None,
        exceed_reason: str = None,
        fee_type: str = None,
        fines: float = None,
        foreign_business_expense: int = None,
        hotel_name: str = None,
        hotel_star: str = None,
        index: str = None,
        invoice_title: str = None,
        is_early_departure: str = None,
        is_negotiation: str = None,
        is_share_str: str = None,
        main_apply_id: str = None,
        nights: int = None,
        order_id: str = None,
        order_price: float = None,
        order_status_desc: str = None,
        order_type: str = None,
        original_reserve_rule: str = None,
        over_apply_id: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        person_refund_fee: float = None,
        person_settle_price: float = None,
        primary_id: int = None,
        project_code: str = None,
        project_name: str = None,
        promotion_fee: float = None,
        rate: str = None,
        remark: str = None,
        reserve_rule: int = None,
        room_no: str = None,
        room_number: int = None,
        room_price: float = None,
        room_type: str = None,
        service_fee: float = None,
        settlement_fee: float = None,
        settlement_grant_fee: float = None,
        settlement_time: str = None,
        settlement_type: str = None,
        status: int = None,
        sub_order_id: str = None,
        tax_rate: str = None,
        third_invoice_id: str = None,
        third_itinerary_id: str = None,
        third_part_business_id: str = None,
        thirdpart_apply_id: str = None,
        total_nights: int = None,
        traveler_id: str = None,
        traveler_job_no: str = None,
        traveler_member_type: str = None,
        traveler_name: str = None,
        voucher_type: int = None,
    ):
        self.alipay_trade_no = alipay_trade_no
        self.amount_currency = amount_currency
        self.apply_arr_city_code = apply_arr_city_code
        self.apply_arr_city_name = apply_arr_city_name
        self.apply_dep_city_code = apply_dep_city_code
        self.apply_dep_city_name = apply_dep_city_name
        self.apply_extend_field = apply_extend_field
        self.apply_id = apply_id
        self.average_nights = average_nights
        self.bill_record_time = bill_record_time
        self.book_reason = book_reason
        self.book_time = book_time
        self.booker_id = booker_id
        self.booker_job_no = booker_job_no
        self.booker_name = booker_name
        self.brand_group = brand_group
        self.brand_name = brand_name
        self.business_expense = business_expense
        self.business_trip_result = business_trip_result
        self.capital_direction = capital_direction
        self.cascade_department = cascade_department
        self.check_in_date = check_in_date
        self.checkout_date = checkout_date
        self.city = city
        self.city_code = city_code
        self.corp_refund_fee = corp_refund_fee
        self.corp_total_fee = corp_total_fee
        self.cost_center = cost_center
        self.cost_center_number = cost_center_number
        self.country = country
        self.country_code = country_code
        self.department = department
        self.department_id = department_id
        self.exceed_reason = exceed_reason
        self.fee_type = fee_type
        self.fines = fines
        self.foreign_business_expense = foreign_business_expense
        self.hotel_name = hotel_name
        self.hotel_star = hotel_star
        self.index = index
        self.invoice_title = invoice_title
        self.is_early_departure = is_early_departure
        self.is_negotiation = is_negotiation
        self.is_share_str = is_share_str
        self.main_apply_id = main_apply_id
        self.nights = nights
        self.order_id = order_id
        self.order_price = order_price
        self.order_status_desc = order_status_desc
        self.order_type = order_type
        self.original_reserve_rule = original_reserve_rule
        self.over_apply_id = over_apply_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.person_refund_fee = person_refund_fee
        self.person_settle_price = person_settle_price
        self.primary_id = primary_id
        self.project_code = project_code
        self.project_name = project_name
        self.promotion_fee = promotion_fee
        self.rate = rate
        self.remark = remark
        self.reserve_rule = reserve_rule
        self.room_no = room_no
        self.room_number = room_number
        self.room_price = room_price
        self.room_type = room_type
        self.service_fee = service_fee
        self.settlement_fee = settlement_fee
        self.settlement_grant_fee = settlement_grant_fee
        self.settlement_time = settlement_time
        self.settlement_type = settlement_type
        self.status = status
        self.sub_order_id = sub_order_id
        self.tax_rate = tax_rate
        self.third_invoice_id = third_invoice_id
        self.third_itinerary_id = third_itinerary_id
        self.third_part_business_id = third_part_business_id
        self.thirdpart_apply_id = thirdpart_apply_id
        self.total_nights = total_nights
        self.traveler_id = traveler_id
        self.traveler_job_no = traveler_job_no
        self.traveler_member_type = traveler_member_type
        self.traveler_name = traveler_name
        self.voucher_type = voucher_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.amount_currency is not None:
            result['amount_currency'] = self.amount_currency
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.average_nights is not None:
            result['average_nights'] = self.average_nights
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_reason is not None:
            result['book_reason'] = self.book_reason
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.brand_group is not None:
            result['brand_group'] = self.brand_group
        if self.brand_name is not None:
            result['brand_name'] = self.brand_name
        if self.business_expense is not None:
            result['business_expense'] = self.business_expense
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.check_in_date is not None:
            result['check_in_date'] = self.check_in_date
        if self.checkout_date is not None:
            result['checkout_date'] = self.checkout_date
        if self.city is not None:
            result['city'] = self.city
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.corp_refund_fee is not None:
            result['corp_refund_fee'] = self.corp_refund_fee
        if self.corp_total_fee is not None:
            result['corp_total_fee'] = self.corp_total_fee
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.country is not None:
            result['country'] = self.country
        if self.country_code is not None:
            result['country_code'] = self.country_code
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.fines is not None:
            result['fines'] = self.fines
        if self.foreign_business_expense is not None:
            result['foreign_business_expense'] = self.foreign_business_expense
        if self.hotel_name is not None:
            result['hotel_name'] = self.hotel_name
        if self.hotel_star is not None:
            result['hotel_star'] = self.hotel_star
        if self.index is not None:
            result['index'] = self.index
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.is_early_departure is not None:
            result['is_early_departure'] = self.is_early_departure
        if self.is_negotiation is not None:
            result['is_negotiation'] = self.is_negotiation
        if self.is_share_str is not None:
            result['is_share_str'] = self.is_share_str
        if self.main_apply_id is not None:
            result['main_apply_id'] = self.main_apply_id
        if self.nights is not None:
            result['nights'] = self.nights
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.order_type is not None:
            result['order_type'] = self.order_type
        if self.original_reserve_rule is not None:
            result['original_reserve_rule'] = self.original_reserve_rule
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.person_refund_fee is not None:
            result['person_refund_fee'] = self.person_refund_fee
        if self.person_settle_price is not None:
            result['person_settle_price'] = self.person_settle_price
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.promotion_fee is not None:
            result['promotion_fee'] = self.promotion_fee
        if self.rate is not None:
            result['rate'] = self.rate
        if self.remark is not None:
            result['remark'] = self.remark
        if self.reserve_rule is not None:
            result['reserve_rule'] = self.reserve_rule
        if self.room_no is not None:
            result['room_no'] = self.room_no
        if self.room_number is not None:
            result['room_number'] = self.room_number
        if self.room_price is not None:
            result['room_price'] = self.room_price
        if self.room_type is not None:
            result['room_type'] = self.room_type
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.status is not None:
            result['status'] = self.status
        if self.sub_order_id is not None:
            result['sub_order_id'] = self.sub_order_id
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_invoice_id is not None:
            result['third_invoice_id'] = self.third_invoice_id
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.third_part_business_id is not None:
            result['third_part_business_id'] = self.third_part_business_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.total_nights is not None:
            result['total_nights'] = self.total_nights
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type is not None:
            result['traveler_member_type'] = self.traveler_member_type
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('amount_currency') is not None:
            self.amount_currency = m.get('amount_currency')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('average_nights') is not None:
            self.average_nights = m.get('average_nights')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_reason') is not None:
            self.book_reason = m.get('book_reason')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('brand_group') is not None:
            self.brand_group = m.get('brand_group')
        if m.get('brand_name') is not None:
            self.brand_name = m.get('brand_name')
        if m.get('business_expense') is not None:
            self.business_expense = m.get('business_expense')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('check_in_date') is not None:
            self.check_in_date = m.get('check_in_date')
        if m.get('checkout_date') is not None:
            self.checkout_date = m.get('checkout_date')
        if m.get('city') is not None:
            self.city = m.get('city')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('corp_refund_fee') is not None:
            self.corp_refund_fee = m.get('corp_refund_fee')
        if m.get('corp_total_fee') is not None:
            self.corp_total_fee = m.get('corp_total_fee')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('country') is not None:
            self.country = m.get('country')
        if m.get('country_code') is not None:
            self.country_code = m.get('country_code')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('fines') is not None:
            self.fines = m.get('fines')
        if m.get('foreign_business_expense') is not None:
            self.foreign_business_expense = m.get('foreign_business_expense')
        if m.get('hotel_name') is not None:
            self.hotel_name = m.get('hotel_name')
        if m.get('hotel_star') is not None:
            self.hotel_star = m.get('hotel_star')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('is_early_departure') is not None:
            self.is_early_departure = m.get('is_early_departure')
        if m.get('is_negotiation') is not None:
            self.is_negotiation = m.get('is_negotiation')
        if m.get('is_share_str') is not None:
            self.is_share_str = m.get('is_share_str')
        if m.get('main_apply_id') is not None:
            self.main_apply_id = m.get('main_apply_id')
        if m.get('nights') is not None:
            self.nights = m.get('nights')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('order_type') is not None:
            self.order_type = m.get('order_type')
        if m.get('original_reserve_rule') is not None:
            self.original_reserve_rule = m.get('original_reserve_rule')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('person_refund_fee') is not None:
            self.person_refund_fee = m.get('person_refund_fee')
        if m.get('person_settle_price') is not None:
            self.person_settle_price = m.get('person_settle_price')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('promotion_fee') is not None:
            self.promotion_fee = m.get('promotion_fee')
        if m.get('rate') is not None:
            self.rate = m.get('rate')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('reserve_rule') is not None:
            self.reserve_rule = m.get('reserve_rule')
        if m.get('room_no') is not None:
            self.room_no = m.get('room_no')
        if m.get('room_number') is not None:
            self.room_number = m.get('room_number')
        if m.get('room_price') is not None:
            self.room_price = m.get('room_price')
        if m.get('room_type') is not None:
            self.room_type = m.get('room_type')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_order_id') is not None:
            self.sub_order_id = m.get('sub_order_id')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_invoice_id') is not None:
            self.third_invoice_id = m.get('third_invoice_id')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('third_part_business_id') is not None:
            self.third_part_business_id = m.get('third_part_business_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('total_nights') is not None:
            self.total_nights = m.get('total_nights')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type') is not None:
            self.traveler_member_type = m.get('traveler_member_type')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class IeHotelBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        category: int = None,
        corp_id: str = None,
        data_list: List[IeHotelBillSettlementQueryResponseBodyModuleDataList] = None,
        order_id: str = None,
        period_end: str = None,
        period_start: str = None,
        total_size: int = None,
    ):
        self.category = category
        self.corp_id = corp_id
        self.data_list = data_list
        self.order_id = order_id
        self.period_end = period_end
        self.period_start = period_start
        self.total_size = total_size

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = IeHotelBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class IeHotelBillSettlementQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: IeHotelBillSettlementQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = IeHotelBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IeHotelBillSettlementQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IeHotelBillSettlementQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IeHotelBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsInvoiceScanQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InsInvoiceScanQueryRequest(TeaModel):
    def __init__(
        self,
        bill_date: str = None,
        bill_id: int = None,
        invoice_sub_task_id: int = None,
        page_no: int = None,
        page_size: int = None,
    ):
        self.bill_date = bill_date
        self.bill_id = bill_id
        self.invoice_sub_task_id = invoice_sub_task_id
        self.page_no = page_no
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.bill_id is not None:
            result['bill_id'] = self.bill_id
        if self.invoice_sub_task_id is not None:
            result['invoice_sub_task_id'] = self.invoice_sub_task_id
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('bill_id') is not None:
            self.bill_id = m.get('bill_id')
        if m.get('invoice_sub_task_id') is not None:
            self.invoice_sub_task_id = m.get('invoice_sub_task_id')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class InsInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails(TeaModel):
    def __init__(
        self,
        amount: str = None,
        index: str = None,
        item_name: str = None,
        quantity: str = None,
        specification: str = None,
        tax: str = None,
        tax_rate: str = None,
        unit: str = None,
        unit_price: str = None,
    ):
        # 金额
        self.amount = amount
        # 行号
        self.index = index
        # 货物或应税劳务、服务名称
        self.item_name = item_name
        # 数量
        self.quantity = quantity
        # 规格型号
        self.specification = specification
        # 税额
        self.tax = tax
        # 税率
        self.tax_rate = tax_rate
        # 单位
        self.unit = unit
        # 单价
        self.unit_price = unit_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.index is not None:
            result['index'] = self.index
        if self.item_name is not None:
            result['item_name'] = self.item_name
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.specification is not None:
            result['specification'] = self.specification
        if self.tax is not None:
            result['tax'] = self.tax
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.unit is not None:
            result['unit'] = self.unit
        if self.unit_price is not None:
            result['unit_price'] = self.unit_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('item_name') is not None:
            self.item_name = m.get('item_name')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('unit') is not None:
            self.unit = m.get('unit')
        if m.get('unit_price') is not None:
            self.unit_price = m.get('unit_price')
        return self


class InsInvoiceScanQueryResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        amount_with_tax: str = None,
        amount_without_tax: str = None,
        bill_date: str = None,
        category: int = None,
        check_code: str = None,
        cost_center: str = None,
        department: str = None,
        drawer: str = None,
        id: str = None,
        insurance_company: str = None,
        insurance_order_id: str = None,
        insurance_type: str = None,
        invoice_code: str = None,
        invoice_day: str = None,
        invoice_details: List[InsInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails] = None,
        invoice_location: str = None,
        invoice_no: str = None,
        invoice_title: str = None,
        invoice_type: int = None,
        machine_code: str = None,
        ofd_oss_url: str = None,
        order_id: int = None,
        oss_url: str = None,
        passenger: str = None,
        password_area: str = None,
        project: str = None,
        purchaser_bank_account_info: str = None,
        purchaser_contact_info: str = None,
        purchaser_name: str = None,
        purchaser_tax_no: str = None,
        recipient: str = None,
        remarks: str = None,
        reviewer: str = None,
        seller_bank_account_info: str = None,
        seller_contact_info: str = None,
        seller_name: str = None,
        seller_tax_no: str = None,
        smart_check_code: str = None,
        tax_amount: str = None,
        tax_rate: str = None,
        total_amount_in_words: str = None,
        xml_oss_url: str = None,
    ):
        self.amount_with_tax = amount_with_tax
        self.amount_without_tax = amount_without_tax
        self.bill_date = bill_date
        self.category = category
        # 校验码
        self.check_code = check_code
        self.cost_center = cost_center
        self.department = department
        # 开票人
        self.drawer = drawer
        # 应用ID
        self.id = id
        self.insurance_company = insurance_company
        self.insurance_order_id = insurance_order_id
        self.insurance_type = insurance_type
        self.invoice_code = invoice_code
        self.invoice_day = invoice_day
        # 发票明细
        self.invoice_details = invoice_details
        # 发票地区
        self.invoice_location = invoice_location
        self.invoice_no = invoice_no
        # 发票抬头
        self.invoice_title = invoice_title
        self.invoice_type = invoice_type
        # 机器码
        self.machine_code = machine_code
        self.ofd_oss_url = ofd_oss_url
        self.order_id = order_id
        self.oss_url = oss_url
        self.passenger = passenger
        # 密码区
        self.password_area = password_area
        self.project = project
        # 购方银行信息
        self.purchaser_bank_account_info = purchaser_bank_account_info
        # 购方联系方式
        self.purchaser_contact_info = purchaser_contact_info
        self.purchaser_name = purchaser_name
        self.purchaser_tax_no = purchaser_tax_no
        # 收款人
        self.recipient = recipient
        # 备注
        self.remarks = remarks
        # 复核人
        self.reviewer = reviewer
        # 销售方银行信息
        self.seller_bank_account_info = seller_bank_account_info
        # 销售方联系方式
        self.seller_contact_info = seller_contact_info
        self.seller_name = seller_name
        self.seller_tax_no = seller_tax_no
        # 校验码
        self.smart_check_code = smart_check_code
        self.tax_amount = tax_amount
        self.tax_rate = tax_rate
        # 大写金额
        self.total_amount_in_words = total_amount_in_words
        self.xml_oss_url = xml_oss_url

    def validate(self):
        if self.invoice_details:
            for k in self.invoice_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount_with_tax is not None:
            result['amount_with_tax'] = self.amount_with_tax
        if self.amount_without_tax is not None:
            result['amount_without_tax'] = self.amount_without_tax
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.category is not None:
            result['category'] = self.category
        if self.check_code is not None:
            result['check_code'] = self.check_code
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.department is not None:
            result['department'] = self.department
        if self.drawer is not None:
            result['drawer'] = self.drawer
        if self.id is not None:
            result['id'] = self.id
        if self.insurance_company is not None:
            result['insurance_company'] = self.insurance_company
        if self.insurance_order_id is not None:
            result['insurance_order_id'] = self.insurance_order_id
        if self.insurance_type is not None:
            result['insurance_type'] = self.insurance_type
        if self.invoice_code is not None:
            result['invoice_code'] = self.invoice_code
        if self.invoice_day is not None:
            result['invoice_day'] = self.invoice_day
        result['invoice_details'] = []
        if self.invoice_details is not None:
            for k in self.invoice_details:
                result['invoice_details'].append(k.to_map() if k else None)
        if self.invoice_location is not None:
            result['invoice_location'] = self.invoice_location
        if self.invoice_no is not None:
            result['invoice_no'] = self.invoice_no
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.machine_code is not None:
            result['machine_code'] = self.machine_code
        if self.ofd_oss_url is not None:
            result['ofd_oss_url'] = self.ofd_oss_url
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.oss_url is not None:
            result['oss_url'] = self.oss_url
        if self.passenger is not None:
            result['passenger'] = self.passenger
        if self.password_area is not None:
            result['password_area'] = self.password_area
        if self.project is not None:
            result['project'] = self.project
        if self.purchaser_bank_account_info is not None:
            result['purchaser_bank_account_info'] = self.purchaser_bank_account_info
        if self.purchaser_contact_info is not None:
            result['purchaser_contact_info'] = self.purchaser_contact_info
        if self.purchaser_name is not None:
            result['purchaser_name'] = self.purchaser_name
        if self.purchaser_tax_no is not None:
            result['purchaser_tax_no'] = self.purchaser_tax_no
        if self.recipient is not None:
            result['recipient'] = self.recipient
        if self.remarks is not None:
            result['remarks'] = self.remarks
        if self.reviewer is not None:
            result['reviewer'] = self.reviewer
        if self.seller_bank_account_info is not None:
            result['seller_bank_account_info'] = self.seller_bank_account_info
        if self.seller_contact_info is not None:
            result['seller_contact_info'] = self.seller_contact_info
        if self.seller_name is not None:
            result['seller_name'] = self.seller_name
        if self.seller_tax_no is not None:
            result['seller_tax_no'] = self.seller_tax_no
        if self.smart_check_code is not None:
            result['smart_check_code'] = self.smart_check_code
        if self.tax_amount is not None:
            result['tax_amount'] = self.tax_amount
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.total_amount_in_words is not None:
            result['total_amount_in_words'] = self.total_amount_in_words
        if self.xml_oss_url is not None:
            result['xml_oss_url'] = self.xml_oss_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('amount_with_tax') is not None:
            self.amount_with_tax = m.get('amount_with_tax')
        if m.get('amount_without_tax') is not None:
            self.amount_without_tax = m.get('amount_without_tax')
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('check_code') is not None:
            self.check_code = m.get('check_code')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('drawer') is not None:
            self.drawer = m.get('drawer')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('insurance_company') is not None:
            self.insurance_company = m.get('insurance_company')
        if m.get('insurance_order_id') is not None:
            self.insurance_order_id = m.get('insurance_order_id')
        if m.get('insurance_type') is not None:
            self.insurance_type = m.get('insurance_type')
        if m.get('invoice_code') is not None:
            self.invoice_code = m.get('invoice_code')
        if m.get('invoice_day') is not None:
            self.invoice_day = m.get('invoice_day')
        self.invoice_details = []
        if m.get('invoice_details') is not None:
            for k in m.get('invoice_details'):
                temp_model = InsInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails()
                self.invoice_details.append(temp_model.from_map(k))
        if m.get('invoice_location') is not None:
            self.invoice_location = m.get('invoice_location')
        if m.get('invoice_no') is not None:
            self.invoice_no = m.get('invoice_no')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('machine_code') is not None:
            self.machine_code = m.get('machine_code')
        if m.get('ofd_oss_url') is not None:
            self.ofd_oss_url = m.get('ofd_oss_url')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('oss_url') is not None:
            self.oss_url = m.get('oss_url')
        if m.get('passenger') is not None:
            self.passenger = m.get('passenger')
        if m.get('password_area') is not None:
            self.password_area = m.get('password_area')
        if m.get('project') is not None:
            self.project = m.get('project')
        if m.get('purchaser_bank_account_info') is not None:
            self.purchaser_bank_account_info = m.get('purchaser_bank_account_info')
        if m.get('purchaser_contact_info') is not None:
            self.purchaser_contact_info = m.get('purchaser_contact_info')
        if m.get('purchaser_name') is not None:
            self.purchaser_name = m.get('purchaser_name')
        if m.get('purchaser_tax_no') is not None:
            self.purchaser_tax_no = m.get('purchaser_tax_no')
        if m.get('recipient') is not None:
            self.recipient = m.get('recipient')
        if m.get('remarks') is not None:
            self.remarks = m.get('remarks')
        if m.get('reviewer') is not None:
            self.reviewer = m.get('reviewer')
        if m.get('seller_bank_account_info') is not None:
            self.seller_bank_account_info = m.get('seller_bank_account_info')
        if m.get('seller_contact_info') is not None:
            self.seller_contact_info = m.get('seller_contact_info')
        if m.get('seller_name') is not None:
            self.seller_name = m.get('seller_name')
        if m.get('seller_tax_no') is not None:
            self.seller_tax_no = m.get('seller_tax_no')
        if m.get('smart_check_code') is not None:
            self.smart_check_code = m.get('smart_check_code')
        if m.get('tax_amount') is not None:
            self.tax_amount = m.get('tax_amount')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('total_amount_in_words') is not None:
            self.total_amount_in_words = m.get('total_amount_in_words')
        if m.get('xml_oss_url') is not None:
            self.xml_oss_url = m.get('xml_oss_url')
        return self


class InsInvoiceScanQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        items: List[InsInvoiceScanQueryResponseBodyModuleItems] = None,
        page_no: int = None,
        page_size: int = None,
        total_page: int = None,
        total_size: int = None,
    ):
        self.items = items
        self.page_no = page_no
        self.page_size = page_size
        self.total_page = total_page
        self.total_size = total_size

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_page is not None:
            result['total_page'] = self.total_page
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = InsInvoiceScanQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class InsInvoiceScanQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: InsInvoiceScanQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InsInvoiceScanQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InsInvoiceScanQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InsInvoiceScanQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsInvoiceScanQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsureOrderApplyHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InsureOrderApplyRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        ins_order_id: str = None,
        isv_name: str = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        supplier_code: str = None,
    ):
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        # This parameter is required.
        self.ins_order_id = ins_order_id
        self.isv_name = isv_name
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.supplier_code = supplier_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        return self


class InsureOrderApplyResponseBodyModuleInsOrderPolicyList(TeaModel):
    def __init__(
        self,
        out_sub_ins_order_id: str = None,
        policy_no: str = None,
        status: str = None,
        sub_ins_order_id: str = None,
    ):
        self.out_sub_ins_order_id = out_sub_ins_order_id
        self.policy_no = policy_no
        self.status = status
        self.sub_ins_order_id = sub_ins_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.out_sub_ins_order_id is not None:
            result['out_sub_ins_order_id'] = self.out_sub_ins_order_id
        if self.policy_no is not None:
            result['policy_no'] = self.policy_no
        if self.status is not None:
            result['status'] = self.status
        if self.sub_ins_order_id is not None:
            result['sub_ins_order_id'] = self.sub_ins_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('out_sub_ins_order_id') is not None:
            self.out_sub_ins_order_id = m.get('out_sub_ins_order_id')
        if m.get('policy_no') is not None:
            self.policy_no = m.get('policy_no')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_ins_order_id') is not None:
            self.sub_ins_order_id = m.get('sub_ins_order_id')
        return self


class InsureOrderApplyResponseBodyModule(TeaModel):
    def __init__(
        self,
        ins_order_id: str = None,
        ins_order_policy_list: List[InsureOrderApplyResponseBodyModuleInsOrderPolicyList] = None,
    ):
        self.ins_order_id = ins_order_id
        self.ins_order_policy_list = ins_order_policy_list

    def validate(self):
        if self.ins_order_policy_list:
            for k in self.ins_order_policy_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        result['ins_order_policy_list'] = []
        if self.ins_order_policy_list is not None:
            for k in self.ins_order_policy_list:
                result['ins_order_policy_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        self.ins_order_policy_list = []
        if m.get('ins_order_policy_list') is not None:
            for k in m.get('ins_order_policy_list'):
                temp_model = InsureOrderApplyResponseBodyModuleInsOrderPolicyList()
                self.ins_order_policy_list.append(temp_model.from_map(k))
        return self


class InsureOrderApplyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: InsureOrderApplyResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InsureOrderApplyResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InsureOrderApplyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InsureOrderApplyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsureOrderApplyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsureOrderCancelHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InsureOrderCancelRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        isv_name: str = None,
        supplier_code: str = None,
    ):
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        self.isv_name = isv_name
        self.supplier_code = supplier_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        return self


class InsureOrderCancelResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InsureOrderCancelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InsureOrderCancelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsureOrderCancelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsureOrderCreateHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InsureOrderCreateRequestApplicant(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        btrip_user_id: str = None,
        cert_name: str = None,
        cert_no: str = None,
        cert_type: str = None,
        gender: str = None,
        phone: str = None,
    ):
        self.birthday = birthday
        self.btrip_user_id = btrip_user_id
        self.cert_name = cert_name
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.gender = gender
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.cert_name is not None:
            result['cert_name'] = self.cert_name
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.gender is not None:
            result['gender'] = self.gender
        if self.phone is not None:
            result['phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('cert_name') is not None:
            self.cert_name = m.get('cert_name')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        return self


class InsureOrderCreateRequestInsPersonAndSegmentListInsureSegment(TeaModel):
    def __init__(
        self,
        arr_airport_code: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_time: str = None,
        dep_airport_code: str = None,
        dep_city: str = None,
        dep_city_code: str = None,
        dep_time: str = None,
        flight_no: str = None,
    ):
        self.arr_airport_code = arr_airport_code
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_time = arr_time
        self.dep_airport_code = dep_airport_code
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        self.dep_time = dep_time
        self.flight_no = flight_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        return self


class InsureOrderCreateRequestInsPersonAndSegmentListInsured(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        btrip_user_id: str = None,
        cert_name: str = None,
        cert_no: str = None,
        cert_type: str = None,
        gender: str = None,
        phone: str = None,
    ):
        self.birthday = birthday
        self.btrip_user_id = btrip_user_id
        self.cert_name = cert_name
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.gender = gender
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.cert_name is not None:
            result['cert_name'] = self.cert_name
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.gender is not None:
            result['gender'] = self.gender
        if self.phone is not None:
            result['phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('cert_name') is not None:
            self.cert_name = m.get('cert_name')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        return self


class InsureOrderCreateRequestInsPersonAndSegmentList(TeaModel):
    def __init__(
        self,
        insure_segment: InsureOrderCreateRequestInsPersonAndSegmentListInsureSegment = None,
        insured: InsureOrderCreateRequestInsPersonAndSegmentListInsured = None,
        out_sub_ins_order_id: str = None,
    ):
        self.insure_segment = insure_segment
        self.insured = insured
        self.out_sub_ins_order_id = out_sub_ins_order_id

    def validate(self):
        if self.insure_segment:
            self.insure_segment.validate()
        if self.insured:
            self.insured.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.insure_segment is not None:
            result['insure_segment'] = self.insure_segment.to_map()
        if self.insured is not None:
            result['insured'] = self.insured.to_map()
        if self.out_sub_ins_order_id is not None:
            result['out_sub_ins_order_id'] = self.out_sub_ins_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('insure_segment') is not None:
            temp_model = InsureOrderCreateRequestInsPersonAndSegmentListInsureSegment()
            self.insure_segment = temp_model.from_map(m['insure_segment'])
        if m.get('insured') is not None:
            temp_model = InsureOrderCreateRequestInsPersonAndSegmentListInsured()
            self.insured = temp_model.from_map(m['insured'])
        if m.get('out_sub_ins_order_id') is not None:
            self.out_sub_ins_order_id = m.get('out_sub_ins_order_id')
        return self


class InsureOrderCreateRequest(TeaModel):
    def __init__(
        self,
        applicant: InsureOrderCreateRequestApplicant = None,
        btrip_user_id: str = None,
        buyer_name: str = None,
        ins_person_and_segment_list: List[InsureOrderCreateRequestInsPersonAndSegmentList] = None,
        isv_name: str = None,
        out_ins_order_id: str = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        supplier_code: str = None,
    ):
        # This parameter is required.
        self.applicant = applicant
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        # This parameter is required.
        self.ins_person_and_segment_list = ins_person_and_segment_list
        # This parameter is required.
        self.isv_name = isv_name
        self.out_ins_order_id = out_ins_order_id
        # This parameter is required.
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.supplier_code = supplier_code

    def validate(self):
        if self.applicant:
            self.applicant.validate()
        if self.ins_person_and_segment_list:
            for k in self.ins_person_and_segment_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applicant is not None:
            result['applicant'] = self.applicant.to_map()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        result['ins_person_and_segment_list'] = []
        if self.ins_person_and_segment_list is not None:
            for k in self.ins_person_and_segment_list:
                result['ins_person_and_segment_list'].append(k.to_map() if k else None)
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.out_ins_order_id is not None:
            result['out_ins_order_id'] = self.out_ins_order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('applicant') is not None:
            temp_model = InsureOrderCreateRequestApplicant()
            self.applicant = temp_model.from_map(m['applicant'])
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        self.ins_person_and_segment_list = []
        if m.get('ins_person_and_segment_list') is not None:
            for k in m.get('ins_person_and_segment_list'):
                temp_model = InsureOrderCreateRequestInsPersonAndSegmentList()
                self.ins_person_and_segment_list.append(temp_model.from_map(k))
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('out_ins_order_id') is not None:
            self.out_ins_order_id = m.get('out_ins_order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        return self


class InsureOrderCreateShrinkRequest(TeaModel):
    def __init__(
        self,
        applicant_shrink: str = None,
        btrip_user_id: str = None,
        buyer_name: str = None,
        ins_person_and_segment_list_shrink: str = None,
        isv_name: str = None,
        out_ins_order_id: str = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        supplier_code: str = None,
    ):
        # This parameter is required.
        self.applicant_shrink = applicant_shrink
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        # This parameter is required.
        self.ins_person_and_segment_list_shrink = ins_person_and_segment_list_shrink
        # This parameter is required.
        self.isv_name = isv_name
        self.out_ins_order_id = out_ins_order_id
        # This parameter is required.
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        self.supplier_code = supplier_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applicant_shrink is not None:
            result['applicant'] = self.applicant_shrink
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.ins_person_and_segment_list_shrink is not None:
            result['ins_person_and_segment_list'] = self.ins_person_and_segment_list_shrink
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.out_ins_order_id is not None:
            result['out_ins_order_id'] = self.out_ins_order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('applicant') is not None:
            self.applicant_shrink = m.get('applicant')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('ins_person_and_segment_list') is not None:
            self.ins_person_and_segment_list_shrink = m.get('ins_person_and_segment_list')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('out_ins_order_id') is not None:
            self.out_ins_order_id = m.get('out_ins_order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        return self


class InsureOrderCreateResponseBodyModuleInsureOrderDetailList(TeaModel):
    def __init__(
        self,
        out_sub_ins_order_id: str = None,
        policy_no: str = None,
        status: str = None,
        sub_ins_order_id: str = None,
    ):
        self.out_sub_ins_order_id = out_sub_ins_order_id
        self.policy_no = policy_no
        self.status = status
        self.sub_ins_order_id = sub_ins_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.out_sub_ins_order_id is not None:
            result['out_sub_ins_order_id'] = self.out_sub_ins_order_id
        if self.policy_no is not None:
            result['policy_no'] = self.policy_no
        if self.status is not None:
            result['status'] = self.status
        if self.sub_ins_order_id is not None:
            result['sub_ins_order_id'] = self.sub_ins_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('out_sub_ins_order_id') is not None:
            self.out_sub_ins_order_id = m.get('out_sub_ins_order_id')
        if m.get('policy_no') is not None:
            self.policy_no = m.get('policy_no')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_ins_order_id') is not None:
            self.sub_ins_order_id = m.get('sub_ins_order_id')
        return self


class InsureOrderCreateResponseBodyModule(TeaModel):
    def __init__(
        self,
        copies: int = None,
        insure_order_detail_list: List[InsureOrderCreateResponseBodyModuleInsureOrderDetailList] = None,
        insure_order_id: str = None,
        premium: int = None,
    ):
        self.copies = copies
        self.insure_order_detail_list = insure_order_detail_list
        self.insure_order_id = insure_order_id
        self.premium = premium

    def validate(self):
        if self.insure_order_detail_list:
            for k in self.insure_order_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.copies is not None:
            result['copies'] = self.copies
        result['insure_order_detail_list'] = []
        if self.insure_order_detail_list is not None:
            for k in self.insure_order_detail_list:
                result['insure_order_detail_list'].append(k.to_map() if k else None)
        if self.insure_order_id is not None:
            result['insure_order_id'] = self.insure_order_id
        if self.premium is not None:
            result['premium'] = self.premium
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('copies') is not None:
            self.copies = m.get('copies')
        self.insure_order_detail_list = []
        if m.get('insure_order_detail_list') is not None:
            for k in m.get('insure_order_detail_list'):
                temp_model = InsureOrderCreateResponseBodyModuleInsureOrderDetailList()
                self.insure_order_detail_list.append(temp_model.from_map(k))
        if m.get('insure_order_id') is not None:
            self.insure_order_id = m.get('insure_order_id')
        if m.get('premium') is not None:
            self.premium = m.get('premium')
        return self


class InsureOrderCreateResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: InsureOrderCreateResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InsureOrderCreateResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InsureOrderCreateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InsureOrderCreateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsureOrderCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsureOrderDetailHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InsureOrderDetailRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        ins_order_id: str = None,
        isv_name: str = None,
        supplier_code: str = None,
    ):
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        # This parameter is required.
        self.ins_order_id = ins_order_id
        self.isv_name = isv_name
        self.supplier_code = supplier_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        return self


class InsureOrderDetailResponseBodyModuleApplicant(TeaModel):
    def __init__(
        self,
        cert_name: str = None,
        cert_no: str = None,
        cert_type: str = None,
        phone: str = None,
    ):
        self.cert_name = cert_name
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_name is not None:
            result['cert_name'] = self.cert_name
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.phone is not None:
            result['phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_name') is not None:
            self.cert_name = m.get('cert_name')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        return self


class InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsureSegment(TeaModel):
    def __init__(
        self,
        arr_airport_code: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_time: str = None,
        dep_airport_code: str = None,
        dep_city: str = None,
        dep_city_code: str = None,
        dep_time: str = None,
        flight_no: str = None,
    ):
        self.arr_airport_code = arr_airport_code
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_time = arr_time
        self.dep_airport_code = dep_airport_code
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        self.dep_time = dep_time
        self.flight_no = flight_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        return self


class InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsured(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        btrip_user_id: str = None,
        cert_name: str = None,
        cert_no: str = None,
        cert_type: str = None,
        gender: str = None,
        phone: str = None,
    ):
        self.birthday = birthday
        self.btrip_user_id = btrip_user_id
        self.cert_name = cert_name
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.gender = gender
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.cert_name is not None:
            result['cert_name'] = self.cert_name
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.gender is not None:
            result['gender'] = self.gender
        if self.phone is not None:
            result['phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('cert_name') is not None:
            self.cert_name = m.get('cert_name')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        return self


class InsureOrderDetailResponseBodyModuleInsureOrderDetailList(TeaModel):
    def __init__(
        self,
        effective_end_time: str = None,
        effective_start_time: str = None,
        insure_segment: InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsureSegment = None,
        insure_time: str = None,
        insured: InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsured = None,
        out_sub_ins_order_id: str = None,
        policy_no: str = None,
        price: int = None,
        product_name: str = None,
        product_no: str = None,
        status: str = None,
        sub_ins_order_id: str = None,
    ):
        self.effective_end_time = effective_end_time
        self.effective_start_time = effective_start_time
        self.insure_segment = insure_segment
        self.insure_time = insure_time
        self.insured = insured
        self.out_sub_ins_order_id = out_sub_ins_order_id
        self.policy_no = policy_no
        self.price = price
        self.product_name = product_name
        self.product_no = product_no
        self.status = status
        self.sub_ins_order_id = sub_ins_order_id

    def validate(self):
        if self.insure_segment:
            self.insure_segment.validate()
        if self.insured:
            self.insured.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.effective_end_time is not None:
            result['effective_end_time'] = self.effective_end_time
        if self.effective_start_time is not None:
            result['effective_start_time'] = self.effective_start_time
        if self.insure_segment is not None:
            result['insure_segment'] = self.insure_segment.to_map()
        if self.insure_time is not None:
            result['insure_time'] = self.insure_time
        if self.insured is not None:
            result['insured'] = self.insured.to_map()
        if self.out_sub_ins_order_id is not None:
            result['out_sub_ins_order_id'] = self.out_sub_ins_order_id
        if self.policy_no is not None:
            result['policy_no'] = self.policy_no
        if self.price is not None:
            result['price'] = self.price
        if self.product_name is not None:
            result['product_name'] = self.product_name
        if self.product_no is not None:
            result['product_no'] = self.product_no
        if self.status is not None:
            result['status'] = self.status
        if self.sub_ins_order_id is not None:
            result['sub_ins_order_id'] = self.sub_ins_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('effective_end_time') is not None:
            self.effective_end_time = m.get('effective_end_time')
        if m.get('effective_start_time') is not None:
            self.effective_start_time = m.get('effective_start_time')
        if m.get('insure_segment') is not None:
            temp_model = InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsureSegment()
            self.insure_segment = temp_model.from_map(m['insure_segment'])
        if m.get('insure_time') is not None:
            self.insure_time = m.get('insure_time')
        if m.get('insured') is not None:
            temp_model = InsureOrderDetailResponseBodyModuleInsureOrderDetailListInsured()
            self.insured = temp_model.from_map(m['insured'])
        if m.get('out_sub_ins_order_id') is not None:
            self.out_sub_ins_order_id = m.get('out_sub_ins_order_id')
        if m.get('policy_no') is not None:
            self.policy_no = m.get('policy_no')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_name') is not None:
            self.product_name = m.get('product_name')
        if m.get('product_no') is not None:
            self.product_no = m.get('product_no')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_ins_order_id') is not None:
            self.sub_ins_order_id = m.get('sub_ins_order_id')
        return self


class InsureOrderDetailResponseBodyModule(TeaModel):
    def __init__(
        self,
        applicant: InsureOrderDetailResponseBodyModuleApplicant = None,
        ins_order_id: str = None,
        insure_order_detail_list: List[InsureOrderDetailResponseBodyModuleInsureOrderDetailList] = None,
        status: str = None,
    ):
        self.applicant = applicant
        self.ins_order_id = ins_order_id
        self.insure_order_detail_list = insure_order_detail_list
        self.status = status

    def validate(self):
        if self.applicant:
            self.applicant.validate()
        if self.insure_order_detail_list:
            for k in self.insure_order_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applicant is not None:
            result['applicant'] = self.applicant.to_map()
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        result['insure_order_detail_list'] = []
        if self.insure_order_detail_list is not None:
            for k in self.insure_order_detail_list:
                result['insure_order_detail_list'].append(k.to_map() if k else None)
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('applicant') is not None:
            temp_model = InsureOrderDetailResponseBodyModuleApplicant()
            self.applicant = temp_model.from_map(m['applicant'])
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        self.insure_order_detail_list = []
        if m.get('insure_order_detail_list') is not None:
            for k in m.get('insure_order_detail_list'):
                temp_model = InsureOrderDetailResponseBodyModuleInsureOrderDetailList()
                self.insure_order_detail_list.append(temp_model.from_map(k))
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class InsureOrderDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: InsureOrderDetailResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InsureOrderDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InsureOrderDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InsureOrderDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsureOrderDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsureOrderPayHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InsureOrderPayRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        isv_name: str = None,
        out_order_id: str = None,
        out_sub_order_id: str = None,
        payment_amount: int = None,
        supplier_code: str = None,
    ):
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        self.isv_name = isv_name
        self.out_order_id = out_order_id
        self.out_sub_order_id = out_sub_order_id
        # This parameter is required.
        self.payment_amount = payment_amount
        self.supplier_code = supplier_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_sub_order_id is not None:
            result['out_sub_order_id'] = self.out_sub_order_id
        if self.payment_amount is not None:
            result['payment_amount'] = self.payment_amount
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_sub_order_id') is not None:
            self.out_sub_order_id = m.get('out_sub_order_id')
        if m.get('payment_amount') is not None:
            self.payment_amount = m.get('payment_amount')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        return self


class InsureOrderPayResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InsureOrderPayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InsureOrderPayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsureOrderPayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsureOrderRefundHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InsureOrderRefundRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        isv_name: str = None,
        out_apply_id: str = None,
        policy_no_list: List[str] = None,
        sub_ins_order_ids: List[str] = None,
        supplier_code: str = None,
    ):
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        self.isv_name = isv_name
        self.out_apply_id = out_apply_id
        self.policy_no_list = policy_no_list
        self.sub_ins_order_ids = sub_ins_order_ids
        self.supplier_code = supplier_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.out_apply_id is not None:
            result['out_apply_id'] = self.out_apply_id
        if self.policy_no_list is not None:
            result['policy_no_list'] = self.policy_no_list
        if self.sub_ins_order_ids is not None:
            result['sub_ins_order_ids'] = self.sub_ins_order_ids
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('out_apply_id') is not None:
            self.out_apply_id = m.get('out_apply_id')
        if m.get('policy_no_list') is not None:
            self.policy_no_list = m.get('policy_no_list')
        if m.get('sub_ins_order_ids') is not None:
            self.sub_ins_order_ids = m.get('sub_ins_order_ids')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        return self


class InsureOrderRefundShrinkRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        isv_name: str = None,
        out_apply_id: str = None,
        policy_no_list_shrink: str = None,
        sub_ins_order_ids_shrink: str = None,
        supplier_code: str = None,
    ):
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        self.isv_name = isv_name
        self.out_apply_id = out_apply_id
        self.policy_no_list_shrink = policy_no_list_shrink
        self.sub_ins_order_ids_shrink = sub_ins_order_ids_shrink
        self.supplier_code = supplier_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.out_apply_id is not None:
            result['out_apply_id'] = self.out_apply_id
        if self.policy_no_list_shrink is not None:
            result['policy_no_list'] = self.policy_no_list_shrink
        if self.sub_ins_order_ids_shrink is not None:
            result['sub_ins_order_ids'] = self.sub_ins_order_ids_shrink
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('out_apply_id') is not None:
            self.out_apply_id = m.get('out_apply_id')
        if m.get('policy_no_list') is not None:
            self.policy_no_list_shrink = m.get('policy_no_list')
        if m.get('sub_ins_order_ids') is not None:
            self.sub_ins_order_ids_shrink = m.get('sub_ins_order_ids')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        return self


class InsureOrderRefundResponseBodyModuleInsRefundList(TeaModel):
    def __init__(
        self,
        policy_refund_no: str = None,
        refund_status: str = None,
        sub_ins_order_id: str = None,
    ):
        self.policy_refund_no = policy_refund_no
        self.refund_status = refund_status
        self.sub_ins_order_id = sub_ins_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.policy_refund_no is not None:
            result['policy_refund_no'] = self.policy_refund_no
        if self.refund_status is not None:
            result['refund_status'] = self.refund_status
        if self.sub_ins_order_id is not None:
            result['sub_ins_order_id'] = self.sub_ins_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('policy_refund_no') is not None:
            self.policy_refund_no = m.get('policy_refund_no')
        if m.get('refund_status') is not None:
            self.refund_status = m.get('refund_status')
        if m.get('sub_ins_order_id') is not None:
            self.sub_ins_order_id = m.get('sub_ins_order_id')
        return self


class InsureOrderRefundResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        ins_order_id: str = None,
        ins_refund_list: List[InsureOrderRefundResponseBodyModuleInsRefundList] = None,
        out_apply_id: str = None,
    ):
        self.apply_id = apply_id
        self.ins_order_id = ins_order_id
        self.ins_refund_list = ins_refund_list
        self.out_apply_id = out_apply_id

    def validate(self):
        if self.ins_refund_list:
            for k in self.ins_refund_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        result['ins_refund_list'] = []
        if self.ins_refund_list is not None:
            for k in self.ins_refund_list:
                result['ins_refund_list'].append(k.to_map() if k else None)
        if self.out_apply_id is not None:
            result['out_apply_id'] = self.out_apply_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        self.ins_refund_list = []
        if m.get('ins_refund_list') is not None:
            for k in m.get('ins_refund_list'):
                temp_model = InsureOrderRefundResponseBodyModuleInsRefundList()
                self.ins_refund_list.append(temp_model.from_map(k))
        if m.get('out_apply_id') is not None:
            self.out_apply_id = m.get('out_apply_id')
        return self


class InsureOrderRefundResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: InsureOrderRefundResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InsureOrderRefundResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InsureOrderRefundResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InsureOrderRefundResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsureOrderRefundResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsureOrderUrlDetailHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InsureOrderUrlDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InsureOrderUrlDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InsureOrderUrlDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsureOrderUrlDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InsureRefundDetailHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InsureRefundDetailRequest(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        btrip_user_id: str = None,
        buyer_name: str = None,
        ins_order_id: str = None,
        isv_name: str = None,
        out_apply_id: str = None,
        supplier_code: str = None,
    ):
        self.apply_id = apply_id
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        self.ins_order_id = ins_order_id
        self.isv_name = isv_name
        self.out_apply_id = out_apply_id
        self.supplier_code = supplier_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.out_apply_id is not None:
            result['out_apply_id'] = self.out_apply_id
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('out_apply_id') is not None:
            self.out_apply_id = m.get('out_apply_id')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        return self


class InsureRefundDetailResponseBodyModuleInsureOrderApplicant(TeaModel):
    def __init__(
        self,
        cert_name: str = None,
        cert_no: str = None,
        cert_type: str = None,
        phone: str = None,
    ):
        self.cert_name = cert_name
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_name is not None:
            result['cert_name'] = self.cert_name
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.phone is not None:
            result['phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_name') is not None:
            self.cert_name = m.get('cert_name')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        return self


class InsureRefundDetailResponseBodyModuleInsureOrder(TeaModel):
    def __init__(
        self,
        applicant: InsureRefundDetailResponseBodyModuleInsureOrderApplicant = None,
        biz_order_id: str = None,
        biz_type: int = None,
        close_time: str = None,
        ins_order_id: str = None,
        out_ins_order_id: str = None,
        pay_time: str = None,
        price: int = None,
        settle_type: int = None,
        status: str = None,
    ):
        self.applicant = applicant
        self.biz_order_id = biz_order_id
        self.biz_type = biz_type
        self.close_time = close_time
        self.ins_order_id = ins_order_id
        self.out_ins_order_id = out_ins_order_id
        self.pay_time = pay_time
        self.price = price
        self.settle_type = settle_type
        self.status = status

    def validate(self):
        if self.applicant:
            self.applicant.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applicant is not None:
            result['applicant'] = self.applicant.to_map()
        if self.biz_order_id is not None:
            result['biz_order_id'] = self.biz_order_id
        if self.biz_type is not None:
            result['biz_type'] = self.biz_type
        if self.close_time is not None:
            result['close_time'] = self.close_time
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        if self.out_ins_order_id is not None:
            result['out_ins_order_id'] = self.out_ins_order_id
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.price is not None:
            result['price'] = self.price
        if self.settle_type is not None:
            result['settle_type'] = self.settle_type
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('applicant') is not None:
            temp_model = InsureRefundDetailResponseBodyModuleInsureOrderApplicant()
            self.applicant = temp_model.from_map(m['applicant'])
        if m.get('biz_order_id') is not None:
            self.biz_order_id = m.get('biz_order_id')
        if m.get('biz_type') is not None:
            self.biz_type = m.get('biz_type')
        if m.get('close_time') is not None:
            self.close_time = m.get('close_time')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        if m.get('out_ins_order_id') is not None:
            self.out_ins_order_id = m.get('out_ins_order_id')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('settle_type') is not None:
            self.settle_type = m.get('settle_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class InsureRefundDetailResponseBodyModuleSubOrderRefundListInsureSegment(TeaModel):
    def __init__(
        self,
        arr_airport_code: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_time: str = None,
        dep_airport_code: str = None,
        dep_city: str = None,
        dep_city_code: str = None,
        dep_time: str = None,
        flight_no: str = None,
    ):
        self.arr_airport_code = arr_airport_code
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_time = arr_time
        self.dep_airport_code = dep_airport_code
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        self.dep_time = dep_time
        self.flight_no = flight_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        return self


class InsureRefundDetailResponseBodyModuleSubOrderRefundListInsured(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        btrip_user_id: str = None,
        cert_name: str = None,
        cert_no: str = None,
        cert_type: str = None,
        gender: str = None,
        phone: str = None,
    ):
        self.birthday = birthday
        self.btrip_user_id = btrip_user_id
        self.cert_name = cert_name
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.gender = gender
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.cert_name is not None:
            result['cert_name'] = self.cert_name
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.gender is not None:
            result['gender'] = self.gender
        if self.phone is not None:
            result['phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('cert_name') is not None:
            self.cert_name = m.get('cert_name')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        return self


class InsureRefundDetailResponseBodyModuleSubOrderRefundList(TeaModel):
    def __init__(
        self,
        effective_end_time: str = None,
        effective_start_time: str = None,
        insure_segment: InsureRefundDetailResponseBodyModuleSubOrderRefundListInsureSegment = None,
        insure_time: str = None,
        insured: InsureRefundDetailResponseBodyModuleSubOrderRefundListInsured = None,
        out_sub_ins_order_id: str = None,
        policy_no: str = None,
        policy_refund_no: str = None,
        price: int = None,
        product_name: str = None,
        product_no: str = None,
        refund_status: str = None,
        refund_time: str = None,
        status: str = None,
        sub_ins_order_id: str = None,
    ):
        self.effective_end_time = effective_end_time
        self.effective_start_time = effective_start_time
        self.insure_segment = insure_segment
        self.insure_time = insure_time
        self.insured = insured
        self.out_sub_ins_order_id = out_sub_ins_order_id
        self.policy_no = policy_no
        self.policy_refund_no = policy_refund_no
        self.price = price
        self.product_name = product_name
        self.product_no = product_no
        self.refund_status = refund_status
        self.refund_time = refund_time
        self.status = status
        self.sub_ins_order_id = sub_ins_order_id

    def validate(self):
        if self.insure_segment:
            self.insure_segment.validate()
        if self.insured:
            self.insured.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.effective_end_time is not None:
            result['effective_end_time'] = self.effective_end_time
        if self.effective_start_time is not None:
            result['effective_start_time'] = self.effective_start_time
        if self.insure_segment is not None:
            result['insure_segment'] = self.insure_segment.to_map()
        if self.insure_time is not None:
            result['insure_time'] = self.insure_time
        if self.insured is not None:
            result['insured'] = self.insured.to_map()
        if self.out_sub_ins_order_id is not None:
            result['out_sub_ins_order_id'] = self.out_sub_ins_order_id
        if self.policy_no is not None:
            result['policy_no'] = self.policy_no
        if self.policy_refund_no is not None:
            result['policy_refund_no'] = self.policy_refund_no
        if self.price is not None:
            result['price'] = self.price
        if self.product_name is not None:
            result['product_name'] = self.product_name
        if self.product_no is not None:
            result['product_no'] = self.product_no
        if self.refund_status is not None:
            result['refund_status'] = self.refund_status
        if self.refund_time is not None:
            result['refund_time'] = self.refund_time
        if self.status is not None:
            result['status'] = self.status
        if self.sub_ins_order_id is not None:
            result['sub_ins_order_id'] = self.sub_ins_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('effective_end_time') is not None:
            self.effective_end_time = m.get('effective_end_time')
        if m.get('effective_start_time') is not None:
            self.effective_start_time = m.get('effective_start_time')
        if m.get('insure_segment') is not None:
            temp_model = InsureRefundDetailResponseBodyModuleSubOrderRefundListInsureSegment()
            self.insure_segment = temp_model.from_map(m['insure_segment'])
        if m.get('insure_time') is not None:
            self.insure_time = m.get('insure_time')
        if m.get('insured') is not None:
            temp_model = InsureRefundDetailResponseBodyModuleSubOrderRefundListInsured()
            self.insured = temp_model.from_map(m['insured'])
        if m.get('out_sub_ins_order_id') is not None:
            self.out_sub_ins_order_id = m.get('out_sub_ins_order_id')
        if m.get('policy_no') is not None:
            self.policy_no = m.get('policy_no')
        if m.get('policy_refund_no') is not None:
            self.policy_refund_no = m.get('policy_refund_no')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('product_name') is not None:
            self.product_name = m.get('product_name')
        if m.get('product_no') is not None:
            self.product_no = m.get('product_no')
        if m.get('refund_status') is not None:
            self.refund_status = m.get('refund_status')
        if m.get('refund_time') is not None:
            self.refund_time = m.get('refund_time')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('sub_ins_order_id') is not None:
            self.sub_ins_order_id = m.get('sub_ins_order_id')
        return self


class InsureRefundDetailResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        ins_order_id: str = None,
        insure_order: InsureRefundDetailResponseBodyModuleInsureOrder = None,
        out_apply_id: str = None,
        sub_order_refund_list: List[InsureRefundDetailResponseBodyModuleSubOrderRefundList] = None,
    ):
        self.apply_id = apply_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.ins_order_id = ins_order_id
        self.insure_order = insure_order
        self.out_apply_id = out_apply_id
        self.sub_order_refund_list = sub_order_refund_list

    def validate(self):
        if self.insure_order:
            self.insure_order.validate()
        if self.sub_order_refund_list:
            for k in self.sub_order_refund_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.ins_order_id is not None:
            result['ins_order_id'] = self.ins_order_id
        if self.insure_order is not None:
            result['insure_order'] = self.insure_order.to_map()
        if self.out_apply_id is not None:
            result['out_apply_id'] = self.out_apply_id
        result['sub_order_refund_list'] = []
        if self.sub_order_refund_list is not None:
            for k in self.sub_order_refund_list:
                result['sub_order_refund_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('ins_order_id') is not None:
            self.ins_order_id = m.get('ins_order_id')
        if m.get('insure_order') is not None:
            temp_model = InsureRefundDetailResponseBodyModuleInsureOrder()
            self.insure_order = temp_model.from_map(m['insure_order'])
        if m.get('out_apply_id') is not None:
            self.out_apply_id = m.get('out_apply_id')
        self.sub_order_refund_list = []
        if m.get('sub_order_refund_list') is not None:
            for k in m.get('sub_order_refund_list'):
                temp_model = InsureRefundDetailResponseBodyModuleSubOrderRefundList()
                self.sub_order_refund_list.append(temp_model.from_map(k))
        return self


class InsureRefundDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: InsureRefundDetailResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InsureRefundDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InsureRefundDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InsureRefundDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InsureRefundDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IntlFlightCreateOrderHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class IntlFlightCreateOrderRequestContactInfo(TeaModel):
    def __init__(
        self,
        contact_email: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        send_msg_to_passenger: bool = None,
    ):
        # This parameter is required.
        self.contact_email = contact_email
        # This parameter is required.
        self.contact_name = contact_name
        # This parameter is required.
        self.contact_phone = contact_phone
        # This parameter is required.
        self.send_msg_to_passenger = send_msg_to_passenger

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.send_msg_to_passenger is not None:
            result['send_msg_to_passenger'] = self.send_msg_to_passenger
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('send_msg_to_passenger') is not None:
            self.send_msg_to_passenger = m.get('send_msg_to_passenger')
        return self


class IntlFlightCreateOrderRequestCostCenter(TeaModel):
    def __init__(
        self,
        cost_center_name: str = None,
        cost_center_number: str = None,
    ):
        # This parameter is required.
        self.cost_center_name = cost_center_name
        # This parameter is required.
        self.cost_center_number = cost_center_number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        return self


class IntlFlightCreateOrderRequestPassengerListCertInfo(TeaModel):
    def __init__(
        self,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        cert_valid_date: str = None,
        name: str = None,
    ):
        self.cert_nation = cert_nation
        # This parameter is required.
        self.cert_no = cert_no
        # This parameter is required.
        self.cert_type = cert_type
        self.cert_valid_date = cert_valid_date
        # This parameter is required.
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.cert_valid_date is not None:
            result['cert_valid_date'] = self.cert_valid_date
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('cert_valid_date') is not None:
            self.cert_valid_date = m.get('cert_valid_date')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class IntlFlightCreateOrderRequestPassengerListSubsidiaryCertInfoList(TeaModel):
    def __init__(
        self,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        cert_valid_date: str = None,
        name: str = None,
    ):
        self.cert_nation = cert_nation
        # This parameter is required.
        self.cert_no = cert_no
        # This parameter is required.
        self.cert_type = cert_type
        self.cert_valid_date = cert_valid_date
        # This parameter is required.
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.cert_valid_date is not None:
            result['cert_valid_date'] = self.cert_valid_date
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('cert_valid_date') is not None:
            self.cert_valid_date = m.get('cert_valid_date')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class IntlFlightCreateOrderRequestPassengerList(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cascade_dept_mask: str = None,
        cascade_dept_name: str = None,
        cert_info: IntlFlightCreateOrderRequestPassengerListCertInfo = None,
        cost_center_name: str = None,
        cost_center_number: str = None,
        dept_id: str = None,
        dept_name: str = None,
        gender: int = None,
        invoice_id: str = None,
        invoice_title: str = None,
        job_no: str = None,
        mobile_country_code: str = None,
        nationality: str = None,
        nationality_code: str = None,
        passenger_type: int = None,
        phone: str = None,
        project_code: str = None,
        project_title: str = None,
        subsidiary_cert_info_list: List[IntlFlightCreateOrderRequestPassengerListSubsidiaryCertInfoList] = None,
        user_id: str = None,
        user_type: int = None,
    ):
        # This parameter is required.
        self.birthday = birthday
        self.cascade_dept_mask = cascade_dept_mask
        self.cascade_dept_name = cascade_dept_name
        # This parameter is required.
        self.cert_info = cert_info
        self.cost_center_name = cost_center_name
        self.cost_center_number = cost_center_number
        self.dept_id = dept_id
        self.dept_name = dept_name
        self.gender = gender
        self.invoice_id = invoice_id
        self.invoice_title = invoice_title
        self.job_no = job_no
        self.mobile_country_code = mobile_country_code
        self.nationality = nationality
        self.nationality_code = nationality_code
        # This parameter is required.
        self.passenger_type = passenger_type
        # This parameter is required.
        self.phone = phone
        self.project_code = project_code
        self.project_title = project_title
        self.subsidiary_cert_info_list = subsidiary_cert_info_list
        # This parameter is required.
        self.user_id = user_id
        self.user_type = user_type

    def validate(self):
        if self.cert_info:
            self.cert_info.validate()
        if self.subsidiary_cert_info_list:
            for k in self.subsidiary_cert_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cascade_dept_mask is not None:
            result['cascade_dept_mask'] = self.cascade_dept_mask
        if self.cascade_dept_name is not None:
            result['cascade_dept_name'] = self.cascade_dept_name
        if self.cert_info is not None:
            result['cert_info'] = self.cert_info.to_map()
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.gender is not None:
            result['gender'] = self.gender
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.mobile_country_code is not None:
            result['mobile_country_code'] = self.mobile_country_code
        if self.nationality is not None:
            result['nationality'] = self.nationality
        if self.nationality_code is not None:
            result['nationality_code'] = self.nationality_code
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        result['subsidiary_cert_info_list'] = []
        if self.subsidiary_cert_info_list is not None:
            for k in self.subsidiary_cert_info_list:
                result['subsidiary_cert_info_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cascade_dept_mask') is not None:
            self.cascade_dept_mask = m.get('cascade_dept_mask')
        if m.get('cascade_dept_name') is not None:
            self.cascade_dept_name = m.get('cascade_dept_name')
        if m.get('cert_info') is not None:
            temp_model = IntlFlightCreateOrderRequestPassengerListCertInfo()
            self.cert_info = temp_model.from_map(m['cert_info'])
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('mobile_country_code') is not None:
            self.mobile_country_code = m.get('mobile_country_code')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        if m.get('nationality_code') is not None:
            self.nationality_code = m.get('nationality_code')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        self.subsidiary_cert_info_list = []
        if m.get('subsidiary_cert_info_list') is not None:
            for k in m.get('subsidiary_cert_info_list'):
                temp_model = IntlFlightCreateOrderRequestPassengerListSubsidiaryCertInfoList()
                self.subsidiary_cert_info_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class IntlFlightCreateOrderRequest(TeaModel):
    def __init__(
        self,
        async_create_order_key: str = None,
        async_create_order_mode: bool = None,
        contact_info: IntlFlightCreateOrderRequestContactInfo = None,
        cost_center: IntlFlightCreateOrderRequestCostCenter = None,
        extra_info: Dict[str, str] = None,
        isv_name: str = None,
        language: str = None,
        ota_item_id: str = None,
        out_order_id: str = None,
        passenger_list: List[IntlFlightCreateOrderRequestPassengerList] = None,
        render_key: str = None,
        total_price_cent: int = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.async_create_order_key = async_create_order_key
        # This parameter is required.
        self.async_create_order_mode = async_create_order_mode
        self.contact_info = contact_info
        self.cost_center = cost_center
        self.extra_info = extra_info
        self.isv_name = isv_name
        self.language = language
        self.ota_item_id = ota_item_id
        self.out_order_id = out_order_id
        self.passenger_list = passenger_list
        self.render_key = render_key
        self.total_price_cent = total_price_cent
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.contact_info:
            self.contact_info.validate()
        if self.cost_center:
            self.cost_center.validate()
        if self.passenger_list:
            for k in self.passenger_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_create_order_key is not None:
            result['async_create_order_key'] = self.async_create_order_key
        if self.async_create_order_mode is not None:
            result['async_create_order_mode'] = self.async_create_order_mode
        if self.contact_info is not None:
            result['contact_info'] = self.contact_info.to_map()
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center.to_map()
        if self.extra_info is not None:
            result['extra_info'] = self.extra_info
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.language is not None:
            result['language'] = self.language
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_list'] = []
        if self.passenger_list is not None:
            for k in self.passenger_list:
                result['passenger_list'].append(k.to_map() if k else None)
        if self.render_key is not None:
            result['render_key'] = self.render_key
        if self.total_price_cent is not None:
            result['total_price_cent'] = self.total_price_cent
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('async_create_order_key') is not None:
            self.async_create_order_key = m.get('async_create_order_key')
        if m.get('async_create_order_mode') is not None:
            self.async_create_order_mode = m.get('async_create_order_mode')
        if m.get('contact_info') is not None:
            temp_model = IntlFlightCreateOrderRequestContactInfo()
            self.contact_info = temp_model.from_map(m['contact_info'])
        if m.get('cost_center') is not None:
            temp_model = IntlFlightCreateOrderRequestCostCenter()
            self.cost_center = temp_model.from_map(m['cost_center'])
        if m.get('extra_info') is not None:
            self.extra_info = m.get('extra_info')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_list = []
        if m.get('passenger_list') is not None:
            for k in m.get('passenger_list'):
                temp_model = IntlFlightCreateOrderRequestPassengerList()
                self.passenger_list.append(temp_model.from_map(k))
        if m.get('render_key') is not None:
            self.render_key = m.get('render_key')
        if m.get('total_price_cent') is not None:
            self.total_price_cent = m.get('total_price_cent')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class IntlFlightCreateOrderShrinkRequest(TeaModel):
    def __init__(
        self,
        async_create_order_key: str = None,
        async_create_order_mode: bool = None,
        contact_info_shrink: str = None,
        cost_center_shrink: str = None,
        extra_info_shrink: str = None,
        isv_name: str = None,
        language: str = None,
        ota_item_id: str = None,
        out_order_id: str = None,
        passenger_list_shrink: str = None,
        render_key: str = None,
        total_price_cent: int = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.async_create_order_key = async_create_order_key
        # This parameter is required.
        self.async_create_order_mode = async_create_order_mode
        self.contact_info_shrink = contact_info_shrink
        self.cost_center_shrink = cost_center_shrink
        self.extra_info_shrink = extra_info_shrink
        self.isv_name = isv_name
        self.language = language
        self.ota_item_id = ota_item_id
        self.out_order_id = out_order_id
        self.passenger_list_shrink = passenger_list_shrink
        self.render_key = render_key
        self.total_price_cent = total_price_cent
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_create_order_key is not None:
            result['async_create_order_key'] = self.async_create_order_key
        if self.async_create_order_mode is not None:
            result['async_create_order_mode'] = self.async_create_order_mode
        if self.contact_info_shrink is not None:
            result['contact_info'] = self.contact_info_shrink
        if self.cost_center_shrink is not None:
            result['cost_center'] = self.cost_center_shrink
        if self.extra_info_shrink is not None:
            result['extra_info'] = self.extra_info_shrink
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.language is not None:
            result['language'] = self.language
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.passenger_list_shrink is not None:
            result['passenger_list'] = self.passenger_list_shrink
        if self.render_key is not None:
            result['render_key'] = self.render_key
        if self.total_price_cent is not None:
            result['total_price_cent'] = self.total_price_cent
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('async_create_order_key') is not None:
            self.async_create_order_key = m.get('async_create_order_key')
        if m.get('async_create_order_mode') is not None:
            self.async_create_order_mode = m.get('async_create_order_mode')
        if m.get('contact_info') is not None:
            self.contact_info_shrink = m.get('contact_info')
        if m.get('cost_center') is not None:
            self.cost_center_shrink = m.get('cost_center')
        if m.get('extra_info') is not None:
            self.extra_info_shrink = m.get('extra_info')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('passenger_list') is not None:
            self.passenger_list_shrink = m.get('passenger_list')
        if m.get('render_key') is not None:
            self.render_key = m.get('render_key')
        if m.get('total_price_cent') is not None:
            self.total_price_cent = m.get('total_price_cent')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class IntlFlightCreateOrderResponseBodyModule(TeaModel):
    def __init__(
        self,
        async_create_order_key: str = None,
        latest_pay_time: str = None,
        order_id: int = None,
        out_order_id: str = None,
        pay_status: int = None,
        status: int = None,
        total_price: int = None,
    ):
        self.async_create_order_key = async_create_order_key
        self.latest_pay_time = latest_pay_time
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.pay_status = pay_status
        self.status = status
        self.total_price = total_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.async_create_order_key is not None:
            result['async_create_order_key'] = self.async_create_order_key
        if self.latest_pay_time is not None:
            result['latest_pay_time'] = self.latest_pay_time
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.status is not None:
            result['status'] = self.status
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('async_create_order_key') is not None:
            self.async_create_order_key = m.get('async_create_order_key')
        if m.get('latest_pay_time') is not None:
            self.latest_pay_time = m.get('latest_pay_time')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class IntlFlightCreateOrderResponseBody(TeaModel):
    def __init__(
        self,
        http_status_code: int = None,
        module: IntlFlightCreateOrderResponseBodyModule = None,
        request_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.http_status_code = http_status_code
        self.module = module
        self.request_id = request_id
        self.result_code = result_code
        self.result_msg = result_msg
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.http_status_code is not None:
            result['http_status_code'] = self.http_status_code
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('http_status_code') is not None:
            self.http_status_code = m.get('http_status_code')
        if m.get('module') is not None:
            temp_model = IntlFlightCreateOrderResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IntlFlightCreateOrderResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IntlFlightCreateOrderResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IntlFlightCreateOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IntlFlightInventoryPriceCheckHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class IntlFlightInventoryPriceCheckRequestPassengerListCertInfo(TeaModel):
    def __init__(
        self,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        cert_valid_date: str = None,
        name: str = None,
    ):
        self.cert_nation = cert_nation
        # This parameter is required.
        self.cert_no = cert_no
        # This parameter is required.
        self.cert_type = cert_type
        self.cert_valid_date = cert_valid_date
        # This parameter is required.
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.cert_valid_date is not None:
            result['cert_valid_date'] = self.cert_valid_date
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('cert_valid_date') is not None:
            self.cert_valid_date = m.get('cert_valid_date')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class IntlFlightInventoryPriceCheckRequestPassengerListSubsidiaryCertInfoList(TeaModel):
    def __init__(
        self,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        cert_valid_date: str = None,
        name: str = None,
    ):
        self.cert_nation = cert_nation
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.cert_valid_date = cert_valid_date
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.cert_valid_date is not None:
            result['cert_valid_date'] = self.cert_valid_date
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('cert_valid_date') is not None:
            self.cert_valid_date = m.get('cert_valid_date')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class IntlFlightInventoryPriceCheckRequestPassengerList(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cascade_dept_mask: str = None,
        cascade_dept_name: str = None,
        cert_info: IntlFlightInventoryPriceCheckRequestPassengerListCertInfo = None,
        cost_center_name: str = None,
        cost_center_number: str = None,
        dept_id: str = None,
        dept_name: str = None,
        gender: int = None,
        invoice_id: str = None,
        invoice_title: str = None,
        job_no: str = None,
        mobile_country_code: str = None,
        nationality: str = None,
        nationality_code: str = None,
        passenger_type: int = None,
        phone: str = None,
        project_code: str = None,
        project_title: str = None,
        subsidiary_cert_info_list: List[IntlFlightInventoryPriceCheckRequestPassengerListSubsidiaryCertInfoList] = None,
        user_id: str = None,
        user_type: int = None,
    ):
        # This parameter is required.
        self.birthday = birthday
        self.cascade_dept_mask = cascade_dept_mask
        self.cascade_dept_name = cascade_dept_name
        # This parameter is required.
        self.cert_info = cert_info
        self.cost_center_name = cost_center_name
        self.cost_center_number = cost_center_number
        self.dept_id = dept_id
        self.dept_name = dept_name
        self.gender = gender
        self.invoice_id = invoice_id
        self.invoice_title = invoice_title
        self.job_no = job_no
        self.mobile_country_code = mobile_country_code
        self.nationality = nationality
        self.nationality_code = nationality_code
        # This parameter is required.
        self.passenger_type = passenger_type
        # This parameter is required.
        self.phone = phone
        self.project_code = project_code
        self.project_title = project_title
        self.subsidiary_cert_info_list = subsidiary_cert_info_list
        # This parameter is required.
        self.user_id = user_id
        self.user_type = user_type

    def validate(self):
        if self.cert_info:
            self.cert_info.validate()
        if self.subsidiary_cert_info_list:
            for k in self.subsidiary_cert_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cascade_dept_mask is not None:
            result['cascade_dept_mask'] = self.cascade_dept_mask
        if self.cascade_dept_name is not None:
            result['cascade_dept_name'] = self.cascade_dept_name
        if self.cert_info is not None:
            result['cert_info'] = self.cert_info.to_map()
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.gender is not None:
            result['gender'] = self.gender
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.mobile_country_code is not None:
            result['mobile_country_code'] = self.mobile_country_code
        if self.nationality is not None:
            result['nationality'] = self.nationality
        if self.nationality_code is not None:
            result['nationality_code'] = self.nationality_code
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        result['subsidiary_cert_info_list'] = []
        if self.subsidiary_cert_info_list is not None:
            for k in self.subsidiary_cert_info_list:
                result['subsidiary_cert_info_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cascade_dept_mask') is not None:
            self.cascade_dept_mask = m.get('cascade_dept_mask')
        if m.get('cascade_dept_name') is not None:
            self.cascade_dept_name = m.get('cascade_dept_name')
        if m.get('cert_info') is not None:
            temp_model = IntlFlightInventoryPriceCheckRequestPassengerListCertInfo()
            self.cert_info = temp_model.from_map(m['cert_info'])
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('mobile_country_code') is not None:
            self.mobile_country_code = m.get('mobile_country_code')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        if m.get('nationality_code') is not None:
            self.nationality_code = m.get('nationality_code')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        self.subsidiary_cert_info_list = []
        if m.get('subsidiary_cert_info_list') is not None:
            for k in m.get('subsidiary_cert_info_list'):
                temp_model = IntlFlightInventoryPriceCheckRequestPassengerListSubsidiaryCertInfoList()
                self.subsidiary_cert_info_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class IntlFlightInventoryPriceCheckRequest(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        language: str = None,
        order_price: int = None,
        ota_item_id: str = None,
        passenger_list: List[IntlFlightInventoryPriceCheckRequestPassengerList] = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.isv_name = isv_name
        self.language = language
        self.order_price = order_price
        # This parameter is required.
        self.ota_item_id = ota_item_id
        # This parameter is required.
        self.passenger_list = passenger_list
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.passenger_list:
            for k in self.passenger_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.language is not None:
            result['language'] = self.language
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        result['passenger_list'] = []
        if self.passenger_list is not None:
            for k in self.passenger_list:
                result['passenger_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        self.passenger_list = []
        if m.get('passenger_list') is not None:
            for k in m.get('passenger_list'):
                temp_model = IntlFlightInventoryPriceCheckRequestPassengerList()
                self.passenger_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class IntlFlightInventoryPriceCheckShrinkRequest(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        language: str = None,
        order_price: int = None,
        ota_item_id: str = None,
        passenger_list_shrink: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.isv_name = isv_name
        self.language = language
        self.order_price = order_price
        # This parameter is required.
        self.ota_item_id = ota_item_id
        # This parameter is required.
        self.passenger_list_shrink = passenger_list_shrink
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.language is not None:
            result['language'] = self.language
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.passenger_list_shrink is not None:
            result['passenger_list'] = self.passenger_list_shrink
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('passenger_list') is not None:
            self.passenger_list_shrink = m.get('passenger_list')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListChangedPrice(TeaModel):
    def __init__(
        self,
        build_price: int = None,
        oil_price: int = None,
        tax_price: int = None,
        ticket_price: int = None,
    ):
        self.build_price = build_price
        self.oil_price = oil_price
        self.tax_price = tax_price
        self.ticket_price = ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.tax_price is not None:
            result['tax_price'] = self.tax_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('tax_price') is not None:
            self.tax_price = m.get('tax_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        return self


class IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListOriginalPrice(TeaModel):
    def __init__(
        self,
        build_price: int = None,
        oil_price: int = None,
        tax_price: int = None,
        ticket_price: int = None,
    ):
        self.build_price = build_price
        self.oil_price = oil_price
        self.tax_price = tax_price
        self.ticket_price = ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.tax_price is not None:
            result['tax_price'] = self.tax_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('tax_price') is not None:
            self.tax_price = m.get('tax_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        return self


class IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoList(TeaModel):
    def __init__(
        self,
        changed: bool = None,
        changed_price: IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListChangedPrice = None,
        original_price: IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListOriginalPrice = None,
        passenger_type: int = None,
    ):
        self.changed = changed
        self.changed_price = changed_price
        self.original_price = original_price
        self.passenger_type = passenger_type

    def validate(self):
        if self.changed_price:
            self.changed_price.validate()
        if self.original_price:
            self.original_price.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.changed is not None:
            result['changed'] = self.changed
        if self.changed_price is not None:
            result['changed_price'] = self.changed_price.to_map()
        if self.original_price is not None:
            result['original_price'] = self.original_price.to_map()
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('changed') is not None:
            self.changed = m.get('changed')
        if m.get('changed_price') is not None:
            temp_model = IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListChangedPrice()
            self.changed_price = temp_model.from_map(m['changed_price'])
        if m.get('original_price') is not None:
            temp_model = IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoListOriginalPrice()
            self.original_price = temp_model.from_map(m['original_price'])
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        return self


class IntlFlightInventoryPriceCheckResponseBodyModule(TeaModel):
    def __init__(
        self,
        check_success: bool = None,
        fail_type: int = None,
        passenger_changed_price_info_list: List[IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoList] = None,
        render_key: str = None,
    ):
        self.check_success = check_success
        self.fail_type = fail_type
        self.passenger_changed_price_info_list = passenger_changed_price_info_list
        self.render_key = render_key

    def validate(self):
        if self.passenger_changed_price_info_list:
            for k in self.passenger_changed_price_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_success is not None:
            result['check_success'] = self.check_success
        if self.fail_type is not None:
            result['fail_type'] = self.fail_type
        result['passenger_changed_price_info_list'] = []
        if self.passenger_changed_price_info_list is not None:
            for k in self.passenger_changed_price_info_list:
                result['passenger_changed_price_info_list'].append(k.to_map() if k else None)
        if self.render_key is not None:
            result['render_key'] = self.render_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('check_success') is not None:
            self.check_success = m.get('check_success')
        if m.get('fail_type') is not None:
            self.fail_type = m.get('fail_type')
        self.passenger_changed_price_info_list = []
        if m.get('passenger_changed_price_info_list') is not None:
            for k in m.get('passenger_changed_price_info_list'):
                temp_model = IntlFlightInventoryPriceCheckResponseBodyModulePassengerChangedPriceInfoList()
                self.passenger_changed_price_info_list.append(temp_model.from_map(k))
        if m.get('render_key') is not None:
            self.render_key = m.get('render_key')
        return self


class IntlFlightInventoryPriceCheckResponseBody(TeaModel):
    def __init__(
        self,
        module: IntlFlightInventoryPriceCheckResponseBodyModule = None,
        request_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.module = module
        self.request_id = request_id
        self.result_code = result_code
        self.result_msg = result_msg
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('module') is not None:
            temp_model = IntlFlightInventoryPriceCheckResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IntlFlightInventoryPriceCheckResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IntlFlightInventoryPriceCheckResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IntlFlightInventoryPriceCheckResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IntlFlightListingSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class IntlFlightListingSearchRequestSearchJourneysSelectedFlights(TeaModel):
    def __init__(
        self,
        arr_airport_code: str = None,
        arr_city_code: str = None,
        cabin_type: int = None,
        dep_airport_code: str = None,
        dep_city_code: str = None,
        flight_time: str = None,
        market_flight_no: str = None,
        operate_flight_no: str = None,
    ):
        self.arr_airport_code = arr_airport_code
        # This parameter is required.
        self.arr_city_code = arr_city_code
        self.cabin_type = cabin_type
        self.dep_airport_code = dep_airport_code
        # This parameter is required.
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.flight_time = flight_time
        # This parameter is required.
        self.market_flight_no = market_flight_no
        self.operate_flight_no = operate_flight_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.cabin_type is not None:
            result['cabin_type'] = self.cabin_type
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.flight_time is not None:
            result['flight_time'] = self.flight_time
        if self.market_flight_no is not None:
            result['market_flight_no'] = self.market_flight_no
        if self.operate_flight_no is not None:
            result['operate_flight_no'] = self.operate_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('cabin_type') is not None:
            self.cabin_type = m.get('cabin_type')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('flight_time') is not None:
            self.flight_time = m.get('flight_time')
        if m.get('market_flight_no') is not None:
            self.market_flight_no = m.get('market_flight_no')
        if m.get('operate_flight_no') is not None:
            self.operate_flight_no = m.get('operate_flight_no')
        return self


class IntlFlightListingSearchRequestSearchJourneys(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        selected_flights: List[IntlFlightListingSearchRequestSearchJourneysSelectedFlights] = None,
    ):
        # This parameter is required.
        self.arr_city_code = arr_city_code
        # This parameter is required.
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.dep_date = dep_date
        self.selected_flights = selected_flights

    def validate(self):
        if self.selected_flights:
            for k in self.selected_flights:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        result['selected_flights'] = []
        if self.selected_flights is not None:
            for k in self.selected_flights:
                result['selected_flights'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        self.selected_flights = []
        if m.get('selected_flights') is not None:
            for k in m.get('selected_flights'):
                temp_model = IntlFlightListingSearchRequestSearchJourneysSelectedFlights()
                self.selected_flights.append(temp_model.from_map(k))
        return self


class IntlFlightListingSearchRequestSearchPassengerList(TeaModel):
    def __init__(
        self,
        cert_no: str = None,
        cert_type: int = None,
        full_name: str = None,
        type: int = None,
    ):
        # This parameter is required.
        self.cert_no = cert_no
        # This parameter is required.
        self.cert_type = cert_type
        # This parameter is required.
        self.full_name = full_name
        # This parameter is required.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.full_name is not None:
            result['full_name'] = self.full_name
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('full_name') is not None:
            self.full_name = m.get('full_name')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class IntlFlightListingSearchRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        cabin_type: int = None,
        direct_only: bool = None,
        isv_name: str = None,
        language: str = None,
        need_share_flight: bool = None,
        out_wheel_search: bool = None,
        query_record_id: str = None,
        search_journeys: List[IntlFlightListingSearchRequestSearchJourneys] = None,
        search_mode: int = None,
        search_passenger_list: List[IntlFlightListingSearchRequestSearchPassengerList] = None,
        supplier_code: str = None,
        token: str = None,
        trip_type: int = None,
    ):
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        # This parameter is required.
        self.cabin_type = cabin_type
        self.direct_only = direct_only
        # This parameter is required.
        self.isv_name = isv_name
        self.language = language
        self.need_share_flight = need_share_flight
        # This parameter is required.
        self.out_wheel_search = out_wheel_search
        self.query_record_id = query_record_id
        # This parameter is required.
        self.search_journeys = search_journeys
        # This parameter is required.
        self.search_mode = search_mode
        self.search_passenger_list = search_passenger_list
        self.supplier_code = supplier_code
        self.token = token
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        if self.search_journeys:
            for k in self.search_journeys:
                if k:
                    k.validate()
        if self.search_passenger_list:
            for k in self.search_passenger_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.cabin_type is not None:
            result['cabin_type'] = self.cabin_type
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.language is not None:
            result['language'] = self.language
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        if self.out_wheel_search is not None:
            result['out_wheel_search'] = self.out_wheel_search
        if self.query_record_id is not None:
            result['query_record_id'] = self.query_record_id
        result['search_journeys'] = []
        if self.search_journeys is not None:
            for k in self.search_journeys:
                result['search_journeys'].append(k.to_map() if k else None)
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        result['search_passenger_list'] = []
        if self.search_passenger_list is not None:
            for k in self.search_passenger_list:
                result['search_passenger_list'].append(k.to_map() if k else None)
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        if self.token is not None:
            result['token'] = self.token
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('cabin_type') is not None:
            self.cabin_type = m.get('cabin_type')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        if m.get('out_wheel_search') is not None:
            self.out_wheel_search = m.get('out_wheel_search')
        if m.get('query_record_id') is not None:
            self.query_record_id = m.get('query_record_id')
        self.search_journeys = []
        if m.get('search_journeys') is not None:
            for k in m.get('search_journeys'):
                temp_model = IntlFlightListingSearchRequestSearchJourneys()
                self.search_journeys.append(temp_model.from_map(k))
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        self.search_passenger_list = []
        if m.get('search_passenger_list') is not None:
            for k in m.get('search_passenger_list'):
                temp_model = IntlFlightListingSearchRequestSearchPassengerList()
                self.search_passenger_list.append(temp_model.from_map(k))
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        if m.get('token') is not None:
            self.token = m.get('token')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class IntlFlightListingSearchShrinkRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        cabin_type: int = None,
        direct_only: bool = None,
        isv_name: str = None,
        language: str = None,
        need_share_flight: bool = None,
        out_wheel_search: bool = None,
        query_record_id: str = None,
        search_journeys_shrink: str = None,
        search_mode: int = None,
        search_passenger_list_shrink: str = None,
        supplier_code: str = None,
        token: str = None,
        trip_type: int = None,
    ):
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        # This parameter is required.
        self.cabin_type = cabin_type
        self.direct_only = direct_only
        # This parameter is required.
        self.isv_name = isv_name
        self.language = language
        self.need_share_flight = need_share_flight
        # This parameter is required.
        self.out_wheel_search = out_wheel_search
        self.query_record_id = query_record_id
        # This parameter is required.
        self.search_journeys_shrink = search_journeys_shrink
        # This parameter is required.
        self.search_mode = search_mode
        self.search_passenger_list_shrink = search_passenger_list_shrink
        self.supplier_code = supplier_code
        self.token = token
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.cabin_type is not None:
            result['cabin_type'] = self.cabin_type
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.language is not None:
            result['language'] = self.language
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        if self.out_wheel_search is not None:
            result['out_wheel_search'] = self.out_wheel_search
        if self.query_record_id is not None:
            result['query_record_id'] = self.query_record_id
        if self.search_journeys_shrink is not None:
            result['search_journeys'] = self.search_journeys_shrink
        if self.search_mode is not None:
            result['search_mode'] = self.search_mode
        if self.search_passenger_list_shrink is not None:
            result['search_passenger_list'] = self.search_passenger_list_shrink
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        if self.token is not None:
            result['token'] = self.token
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('cabin_type') is not None:
            self.cabin_type = m.get('cabin_type')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        if m.get('out_wheel_search') is not None:
            self.out_wheel_search = m.get('out_wheel_search')
        if m.get('query_record_id') is not None:
            self.query_record_id = m.get('query_record_id')
        if m.get('search_journeys') is not None:
            self.search_journeys_shrink = m.get('search_journeys')
        if m.get('search_mode') is not None:
            self.search_mode = m.get('search_mode')
        if m.get('search_passenger_list') is not None:
            self.search_passenger_list_shrink = m.get('search_passenger_list')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        if m.get('token') is not None:
            self.token = m.get('token')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class IntlFlightListingSearchResponseBodyModuleFlightItemListBestPriceItem(TeaModel):
    def __init__(
        self,
        agreement_price_codes: List[str] = None,
        item_type: str = None,
        shopping_item_map: Dict[str, ModuleFlightItemListBestPriceItemShoppingItemMapValue] = None,
    ):
        self.agreement_price_codes = agreement_price_codes
        self.item_type = item_type
        self.shopping_item_map = shopping_item_map

    def validate(self):
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agreement_price_codes is not None:
            result['agreement_price_codes'] = self.agreement_price_codes
        if self.item_type is not None:
            result['item_type'] = self.item_type
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('agreement_price_codes') is not None:
            self.agreement_price_codes = m.get('agreement_price_codes')
        if m.get('item_type') is not None:
            self.item_type = m.get('item_type')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleFlightItemListBestPriceItemShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        return self


class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo(TeaModel):
    def __init__(
        self,
        operating_airline_info: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo = None,
        operating_flight_no: str = None,
    ):
        self.operating_airline_info = operating_airline_info
        self.operating_flight_no = operating_flight_no

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo(TeaModel):
    def __init__(
        self,
        stop_airport: str = None,
        stop_airport_name: str = None,
        stop_arr_term: str = None,
        stop_arr_time: str = None,
        stop_city_code: str = None,
        stop_city_name: str = None,
        stop_city_names: List[str] = None,
        stop_dep_term: str = None,
        stop_dep_time: str = None,
        stop_time: str = None,
    ):
        self.stop_airport = stop_airport
        self.stop_airport_name = stop_airport_name
        self.stop_arr_term = stop_arr_term
        self.stop_arr_time = stop_arr_time
        self.stop_city_code = stop_city_code
        self.stop_city_name = stop_city_name
        self.stop_city_names = stop_city_names
        self.stop_dep_term = stop_dep_term
        self.stop_dep_time = stop_dep_time
        self.stop_time = stop_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_airport_name is not None:
            result['stop_airport_name'] = self.stop_airport_name
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_city_names is not None:
            result['stop_city_names'] = self.stop_city_names
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_time is not None:
            result['stop_time'] = self.stop_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_airport_name') is not None:
            self.stop_airport_name = m.get('stop_airport_name')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_city_names') is not None:
            self.stop_city_names = m.get('stop_city_names')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_time') is not None:
            self.stop_time = m.get('stop_time')
        return self


class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos(TeaModel):
    def __init__(
        self,
        airline_info: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo = None,
        arr_airport_info: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        baggage_desc: str = None,
        dep_airport_info: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        duration: int = None,
        flight_no: str = None,
        flight_share_info: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo = None,
        flight_size: str = None,
        flight_stop_info: IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo = None,
        flight_type: str = None,
        manufacturer: str = None,
        meal_desc: str = None,
        miles: int = None,
        on_time_rate: str = None,
        one_more: int = None,
        one_more_show: str = None,
        segment_index: int = None,
        segment_key: str = None,
        share: bool = None,
        short_flight_size: str = None,
        stop: bool = None,
        total_time: str = None,
        transfer_time: str = None,
        transfer_time_number: int = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.baggage_desc = baggage_desc
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        # duration
        self.duration = duration
        self.flight_no = flight_no
        self.flight_share_info = flight_share_info
        self.flight_size = flight_size
        self.flight_stop_info = flight_stop_info
        self.flight_type = flight_type
        self.manufacturer = manufacturer
        self.meal_desc = meal_desc
        self.miles = miles
        self.on_time_rate = on_time_rate
        self.one_more = one_more
        self.one_more_show = one_more_show
        self.segment_index = segment_index
        self.segment_key = segment_key
        self.share = share
        self.short_flight_size = short_flight_size
        self.stop = stop
        self.total_time = total_time
        self.transfer_time = transfer_time
        self.transfer_time_number = transfer_time_number

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.miles is not None:
            result['miles'] = self.miles
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        if self.one_more is not None:
            result['one_more'] = self.one_more
        if self.one_more_show is not None:
            result['one_more_show'] = self.one_more_show
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.segment_key is not None:
            result['segment_key'] = self.segment_key
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.stop is not None:
            result['stop'] = self.stop
        if self.total_time is not None:
            result['total_time'] = self.total_time
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        if self.transfer_time_number is not None:
            result['transfer_time_number'] = self.transfer_time_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('dep_airport_info') is not None:
            temp_model = IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfosFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('miles') is not None:
            self.miles = m.get('miles')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        if m.get('one_more') is not None:
            self.one_more = m.get('one_more')
        if m.get('one_more_show') is not None:
            self.one_more_show = m.get('one_more_show')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('segment_key') is not None:
            self.segment_key = m.get('segment_key')
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('total_time') is not None:
            self.total_time = m.get('total_time')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        if m.get('transfer_time_number') is not None:
            self.transfer_time_number = m.get('transfer_time_number')
        return self


class IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfos(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        duration: int = None,
        flight_segment_infos: List[IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos] = None,
        journey_index: int = None,
        transfer_time: int = None,
    ):
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.duration = duration
        self.flight_segment_infos = flight_segment_infos
        self.journey_index = journey_index
        self.transfer_time = transfer_time

    def validate(self):
        if self.flight_segment_infos:
            for k in self.flight_segment_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        result['flight_segment_infos'] = []
        if self.flight_segment_infos is not None:
            for k in self.flight_segment_infos:
                result['flight_segment_infos'].append(k.to_map() if k else None)
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        self.flight_segment_infos = []
        if m.get('flight_segment_infos') is not None:
            for k in m.get('flight_segment_infos'):
                temp_model = IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfosFlightSegmentInfos()
                self.flight_segment_infos.append(temp_model.from_map(k))
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        return self


class IntlFlightListingSearchResponseBodyModuleFlightItemList(TeaModel):
    def __init__(
        self,
        best_price_item: IntlFlightListingSearchResponseBodyModuleFlightItemListBestPriceItem = None,
        flight_journey_infos: List[IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfos] = None,
    ):
        self.best_price_item = best_price_item
        self.flight_journey_infos = flight_journey_infos

    def validate(self):
        if self.best_price_item:
            self.best_price_item.validate()
        if self.flight_journey_infos:
            for k in self.flight_journey_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.best_price_item is not None:
            result['best_price_item'] = self.best_price_item.to_map()
        result['flight_journey_infos'] = []
        if self.flight_journey_infos is not None:
            for k in self.flight_journey_infos:
                result['flight_journey_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('best_price_item') is not None:
            temp_model = IntlFlightListingSearchResponseBodyModuleFlightItemListBestPriceItem()
            self.best_price_item = temp_model.from_map(m['best_price_item'])
        self.flight_journey_infos = []
        if m.get('flight_journey_infos') is not None:
            for k in m.get('flight_journey_infos'):
                temp_model = IntlFlightListingSearchResponseBodyModuleFlightItemListFlightJourneyInfos()
                self.flight_journey_infos.append(temp_model.from_map(k))
        return self


class IntlFlightListingSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_item_list: List[IntlFlightListingSearchResponseBodyModuleFlightItemList] = None,
        need_continue: bool = None,
        query_record_id: str = None,
        token: str = None,
    ):
        self.flight_item_list = flight_item_list
        self.need_continue = need_continue
        self.query_record_id = query_record_id
        self.token = token

    def validate(self):
        if self.flight_item_list:
            for k in self.flight_item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_item_list'] = []
        if self.flight_item_list is not None:
            for k in self.flight_item_list:
                result['flight_item_list'].append(k.to_map() if k else None)
        if self.need_continue is not None:
            result['need_continue'] = self.need_continue
        if self.query_record_id is not None:
            result['query_record_id'] = self.query_record_id
        if self.token is not None:
            result['token'] = self.token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_item_list = []
        if m.get('flight_item_list') is not None:
            for k in m.get('flight_item_list'):
                temp_model = IntlFlightListingSearchResponseBodyModuleFlightItemList()
                self.flight_item_list.append(temp_model.from_map(k))
        if m.get('need_continue') is not None:
            self.need_continue = m.get('need_continue')
        if m.get('query_record_id') is not None:
            self.query_record_id = m.get('query_record_id')
        if m.get('token') is not None:
            self.token = m.get('token')
        return self


class IntlFlightListingSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: IntlFlightListingSearchResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = IntlFlightListingSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IntlFlightListingSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IntlFlightListingSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IntlFlightListingSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IntlFlightOrderCancelHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class IntlFlightOrderCancelRequest(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        memo: str = None,
        order_id: str = None,
        out_order_id: str = None,
    ):
        self.isv_name = isv_name
        self.memo = memo
        self.order_id = order_id
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.memo is not None:
            result['memo'] = self.memo
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('memo') is not None:
            self.memo = m.get('memo')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class IntlFlightOrderCancelResponseBodyModule(TeaModel):
    def __init__(
        self,
        cancel_time: str = None,
    ):
        self.cancel_time = cancel_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        return self


class IntlFlightOrderCancelResponseBody(TeaModel):
    def __init__(
        self,
        module: IntlFlightOrderCancelResponseBodyModule = None,
        request_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.module = module
        self.request_id = request_id
        self.result_code = result_code
        self.result_msg = result_msg
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['trace_id'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('module') is not None:
            temp_model = IntlFlightOrderCancelResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('trace_id') is not None:
            self.trace_id = m.get('trace_id')
        return self


class IntlFlightOrderCancelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IntlFlightOrderCancelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IntlFlightOrderCancelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IntlFlightOrderDetailHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class IntlFlightOrderDetailRequest(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
    ):
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class IntlFlightOrderDetailResponseBodyModuleContactInfo(TeaModel):
    def __init__(
        self,
        contact_email: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        send_msg_to_passenger: bool = None,
    ):
        self.contact_email = contact_email
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.send_msg_to_passenger = send_msg_to_passenger

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact_email is not None:
            result['contact_email'] = self.contact_email
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.send_msg_to_passenger is not None:
            result['send_msg_to_passenger'] = self.send_msg_to_passenger
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contact_email') is not None:
            self.contact_email = m.get('contact_email')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('send_msg_to_passenger') is not None:
            self.send_msg_to_passenger = m.get('send_msg_to_passenger')
        return self


class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListFlightOtherInfo(TeaModel):
    def __init__(
        self,
        aircraft_age: str = None,
        avg_delay_time: str = None,
        equip_type: str = None,
        flight_cancel_rate: str = None,
        flight_distance: int = None,
        flight_duration: int = None,
        flight_size: str = None,
        jet_bridge_rate: str = None,
        manufacturer: str = None,
        meal: int = None,
        meal_desc: str = None,
        on_time_rate: str = None,
        wifi: bool = None,
    ):
        self.aircraft_age = aircraft_age
        self.avg_delay_time = avg_delay_time
        self.equip_type = equip_type
        self.flight_cancel_rate = flight_cancel_rate
        self.flight_distance = flight_distance
        self.flight_duration = flight_duration
        self.flight_size = flight_size
        self.jet_bridge_rate = jet_bridge_rate
        self.manufacturer = manufacturer
        self.meal = meal
        self.meal_desc = meal_desc
        self.on_time_rate = on_time_rate
        self.wifi = wifi

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aircraft_age is not None:
            result['aircraft_age'] = self.aircraft_age
        if self.avg_delay_time is not None:
            result['avg_delay_time'] = self.avg_delay_time
        if self.equip_type is not None:
            result['equip_type'] = self.equip_type
        if self.flight_cancel_rate is not None:
            result['flight_cancel_rate'] = self.flight_cancel_rate
        if self.flight_distance is not None:
            result['flight_distance'] = self.flight_distance
        if self.flight_duration is not None:
            result['flight_duration'] = self.flight_duration
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.jet_bridge_rate is not None:
            result['jet_bridge_rate'] = self.jet_bridge_rate
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal is not None:
            result['meal'] = self.meal
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        if self.wifi is not None:
            result['wifi'] = self.wifi
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('aircraft_age') is not None:
            self.aircraft_age = m.get('aircraft_age')
        if m.get('avg_delay_time') is not None:
            self.avg_delay_time = m.get('avg_delay_time')
        if m.get('equip_type') is not None:
            self.equip_type = m.get('equip_type')
        if m.get('flight_cancel_rate') is not None:
            self.flight_cancel_rate = m.get('flight_cancel_rate')
        if m.get('flight_distance') is not None:
            self.flight_distance = m.get('flight_distance')
        if m.get('flight_duration') is not None:
            self.flight_duration = m.get('flight_duration')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('jet_bridge_rate') is not None:
            self.jet_bridge_rate = m.get('jet_bridge_rate')
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal') is not None:
            self.meal = m.get('meal')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        if m.get('wifi') is not None:
            self.wifi = m.get('wifi')
        return self


class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListLuggageDirectInfo(TeaModel):
    def __init__(
        self,
        dep_city_luggage_direct: int = None,
        stop_city_luggage_direct: int = None,
    ):
        self.dep_city_luggage_direct = dep_city_luggage_direct
        self.stop_city_luggage_direct = stop_city_luggage_direct

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dep_city_luggage_direct is not None:
            result['dep_city_luggage_direct'] = self.dep_city_luggage_direct
        if self.stop_city_luggage_direct is not None:
            result['stop_city_luggage_direct'] = self.stop_city_luggage_direct
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dep_city_luggage_direct') is not None:
            self.dep_city_luggage_direct = m.get('dep_city_luggage_direct')
        if m.get('stop_city_luggage_direct') is not None:
            self.stop_city_luggage_direct = m.get('stop_city_luggage_direct')
        return self


class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListMarketingAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        alliance_name: str = None,
        cheap_airline: bool = None,
        icon_url: str = None,
        logo_url: str = None,
        short_name: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.alliance_name = alliance_name
        self.cheap_airline = cheap_airline
        self.icon_url = icon_url
        self.logo_url = logo_url
        self.short_name = short_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.alliance_name is not None:
            result['alliance_name'] = self.alliance_name
        if self.cheap_airline is not None:
            result['cheap_airline'] = self.cheap_airline
        if self.icon_url is not None:
            result['icon_url'] = self.icon_url
        if self.logo_url is not None:
            result['logo_url'] = self.logo_url
        if self.short_name is not None:
            result['short_name'] = self.short_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('alliance_name') is not None:
            self.alliance_name = m.get('alliance_name')
        if m.get('cheap_airline') is not None:
            self.cheap_airline = m.get('cheap_airline')
        if m.get('icon_url') is not None:
            self.icon_url = m.get('icon_url')
        if m.get('logo_url') is not None:
            self.logo_url = m.get('logo_url')
        if m.get('short_name') is not None:
            self.short_name = m.get('short_name')
        return self


class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListOperatingAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        alliance_name: str = None,
        cheap_airline: bool = None,
        icon_url: str = None,
        logo_url: str = None,
        short_name: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.alliance_name = alliance_name
        self.cheap_airline = cheap_airline
        self.icon_url = icon_url
        self.logo_url = logo_url
        self.short_name = short_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.alliance_name is not None:
            result['alliance_name'] = self.alliance_name
        if self.cheap_airline is not None:
            result['cheap_airline'] = self.cheap_airline
        if self.icon_url is not None:
            result['icon_url'] = self.icon_url
        if self.logo_url is not None:
            result['logo_url'] = self.logo_url
        if self.short_name is not None:
            result['short_name'] = self.short_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('alliance_name') is not None:
            self.alliance_name = m.get('alliance_name')
        if m.get('cheap_airline') is not None:
            self.cheap_airline = m.get('cheap_airline')
        if m.get('icon_url') is not None:
            self.icon_url = m.get('icon_url')
        if m.get('logo_url') is not None:
            self.logo_url = m.get('logo_url')
        if m.get('short_name') is not None:
            self.short_name = m.get('short_name')
        return self


class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListSegmentVisaRemark(TeaModel):
    def __init__(
        self,
        dep_city_visa_remark: str = None,
        dep_city_visa_type: int = None,
        stop_city_visa_remarks: List[str] = None,
        stop_city_visa_types: List[int] = None,
    ):
        self.dep_city_visa_remark = dep_city_visa_remark
        self.dep_city_visa_type = dep_city_visa_type
        self.stop_city_visa_remarks = stop_city_visa_remarks
        self.stop_city_visa_types = stop_city_visa_types

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dep_city_visa_remark is not None:
            result['dep_city_visa_remark'] = self.dep_city_visa_remark
        if self.dep_city_visa_type is not None:
            result['dep_city_visa_type'] = self.dep_city_visa_type
        if self.stop_city_visa_remarks is not None:
            result['stop_city_visa_remarks'] = self.stop_city_visa_remarks
        if self.stop_city_visa_types is not None:
            result['stop_city_visa_types'] = self.stop_city_visa_types
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dep_city_visa_remark') is not None:
            self.dep_city_visa_remark = m.get('dep_city_visa_remark')
        if m.get('dep_city_visa_type') is not None:
            self.dep_city_visa_type = m.get('dep_city_visa_type')
        if m.get('stop_city_visa_remarks') is not None:
            self.stop_city_visa_remarks = m.get('stop_city_visa_remarks')
        if m.get('stop_city_visa_types') is not None:
            self.stop_city_visa_types = m.get('stop_city_visa_types')
        return self


class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListStopCityList(TeaModel):
    def __init__(
        self,
        stop_airport: str = None,
        stop_airport_name: str = None,
        stop_arr_terminal: str = None,
        stop_arr_time: str = None,
        stop_city_code: str = None,
        stop_city_name: str = None,
        stop_dep_terminal: str = None,
        stop_dep_time: str = None,
    ):
        self.stop_airport = stop_airport
        self.stop_airport_name = stop_airport_name
        self.stop_arr_terminal = stop_arr_terminal
        self.stop_arr_time = stop_arr_time
        self.stop_city_code = stop_city_code
        self.stop_city_name = stop_city_name
        self.stop_dep_terminal = stop_dep_terminal
        self.stop_dep_time = stop_dep_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_airport_name is not None:
            result['stop_airport_name'] = self.stop_airport_name
        if self.stop_arr_terminal is not None:
            result['stop_arr_terminal'] = self.stop_arr_terminal
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_dep_terminal is not None:
            result['stop_dep_terminal'] = self.stop_dep_terminal
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_airport_name') is not None:
            self.stop_airport_name = m.get('stop_airport_name')
        if m.get('stop_arr_terminal') is not None:
            self.stop_arr_terminal = m.get('stop_arr_terminal')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_dep_terminal') is not None:
            self.stop_dep_terminal = m.get('stop_dep_terminal')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentList(TeaModel):
    def __init__(
        self,
        arr_airport_code: str = None,
        arr_airport_name: str = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_terminal: str = None,
        arr_time: str = None,
        code_share: bool = None,
        dep_airport_code: str = None,
        dep_airport_name: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_terminal: str = None,
        dep_time: str = None,
        flight_other_info: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListFlightOtherInfo = None,
        journey_index: int = None,
        luggage_direct_info: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListLuggageDirectInfo = None,
        marketing_airline: str = None,
        marketing_airline_info: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListMarketingAirlineInfo = None,
        marketing_flight_no: str = None,
        operating_airline: str = None,
        operating_airline_info: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListOperatingAirlineInfo = None,
        operating_flight_no: str = None,
        segment_index: int = None,
        segment_key: str = None,
        segment_visa_remark: IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListSegmentVisaRemark = None,
        stop_city_list: List[IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListStopCityList] = None,
        stop_quantity: int = None,
    ):
        self.arr_airport_code = arr_airport_code
        self.arr_airport_name = arr_airport_name
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_terminal = arr_terminal
        self.arr_time = arr_time
        self.code_share = code_share
        self.dep_airport_code = dep_airport_code
        self.dep_airport_name = dep_airport_name
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_terminal = dep_terminal
        self.dep_time = dep_time
        self.flight_other_info = flight_other_info
        self.journey_index = journey_index
        self.luggage_direct_info = luggage_direct_info
        self.marketing_airline = marketing_airline
        self.marketing_airline_info = marketing_airline_info
        self.marketing_flight_no = marketing_flight_no
        self.operating_airline = operating_airline
        self.operating_airline_info = operating_airline_info
        self.operating_flight_no = operating_flight_no
        self.segment_index = segment_index
        self.segment_key = segment_key
        self.segment_visa_remark = segment_visa_remark
        self.stop_city_list = stop_city_list
        self.stop_quantity = stop_quantity

    def validate(self):
        if self.flight_other_info:
            self.flight_other_info.validate()
        if self.luggage_direct_info:
            self.luggage_direct_info.validate()
        if self.marketing_airline_info:
            self.marketing_airline_info.validate()
        if self.operating_airline_info:
            self.operating_airline_info.validate()
        if self.segment_visa_remark:
            self.segment_visa_remark.validate()
        if self.stop_city_list:
            for k in self.stop_city_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_name is not None:
            result['arr_airport_name'] = self.arr_airport_name
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_terminal is not None:
            result['arr_terminal'] = self.arr_terminal
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.code_share is not None:
            result['code_share'] = self.code_share
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_name is not None:
            result['dep_airport_name'] = self.dep_airport_name
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_terminal is not None:
            result['dep_terminal'] = self.dep_terminal
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_other_info is not None:
            result['flight_other_info'] = self.flight_other_info.to_map()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.luggage_direct_info is not None:
            result['luggage_direct_info'] = self.luggage_direct_info.to_map()
        if self.marketing_airline is not None:
            result['marketing_airline'] = self.marketing_airline
        if self.marketing_airline_info is not None:
            result['marketing_airline_info'] = self.marketing_airline_info.to_map()
        if self.marketing_flight_no is not None:
            result['marketing_flight_no'] = self.marketing_flight_no
        if self.operating_airline is not None:
            result['operating_airline'] = self.operating_airline
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.segment_key is not None:
            result['segment_key'] = self.segment_key
        if self.segment_visa_remark is not None:
            result['segment_visa_remark'] = self.segment_visa_remark.to_map()
        result['stop_city_list'] = []
        if self.stop_city_list is not None:
            for k in self.stop_city_list:
                result['stop_city_list'].append(k.to_map() if k else None)
        if self.stop_quantity is not None:
            result['stop_quantity'] = self.stop_quantity
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_name') is not None:
            self.arr_airport_name = m.get('arr_airport_name')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_terminal') is not None:
            self.arr_terminal = m.get('arr_terminal')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('code_share') is not None:
            self.code_share = m.get('code_share')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_name') is not None:
            self.dep_airport_name = m.get('dep_airport_name')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_terminal') is not None:
            self.dep_terminal = m.get('dep_terminal')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_other_info') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListFlightOtherInfo()
            self.flight_other_info = temp_model.from_map(m['flight_other_info'])
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('luggage_direct_info') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListLuggageDirectInfo()
            self.luggage_direct_info = temp_model.from_map(m['luggage_direct_info'])
        if m.get('marketing_airline') is not None:
            self.marketing_airline = m.get('marketing_airline')
        if m.get('marketing_airline_info') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListMarketingAirlineInfo()
            self.marketing_airline_info = temp_model.from_map(m['marketing_airline_info'])
        if m.get('marketing_flight_no') is not None:
            self.marketing_flight_no = m.get('marketing_flight_no')
        if m.get('operating_airline') is not None:
            self.operating_airline = m.get('operating_airline')
        if m.get('operating_airline_info') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('segment_key') is not None:
            self.segment_key = m.get('segment_key')
        if m.get('segment_visa_remark') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListSegmentVisaRemark()
            self.segment_visa_remark = temp_model.from_map(m['segment_visa_remark'])
        self.stop_city_list = []
        if m.get('stop_city_list') is not None:
            for k in m.get('stop_city_list'):
                temp_model = IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentListStopCityList()
                self.stop_city_list.append(temp_model.from_map(k))
        if m.get('stop_quantity') is not None:
            self.stop_quantity = m.get('stop_quantity')
        return self


class IntlFlightOrderDetailResponseBodyModuleJourneyList(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        arr_city_name: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_date: str = None,
        journey_index: int = None,
        segment_list: List[IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentList] = None,
        transfer_count: int = None,
        transfer_time: int = None,
    ):
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_date = dep_date
        self.journey_index = journey_index
        self.segment_list = segment_list
        self.transfer_count = transfer_count
        self.transfer_time = transfer_time

    def validate(self):
        if self.segment_list:
            for k in self.segment_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        result['segment_list'] = []
        if self.segment_list is not None:
            for k in self.segment_list:
                result['segment_list'].append(k.to_map() if k else None)
        if self.transfer_count is not None:
            result['transfer_count'] = self.transfer_count
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        self.segment_list = []
        if m.get('segment_list') is not None:
            for k in m.get('segment_list'):
                temp_model = IntlFlightOrderDetailResponseBodyModuleJourneyListSegmentList()
                self.segment_list.append(temp_model.from_map(k))
        if m.get('transfer_count') is not None:
            self.transfer_count = m.get('transfer_count')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        return self


class IntlFlightOrderDetailResponseBodyModuleOrderItemListBaggageRule(TeaModel):
    def __init__(
        self,
        baggage_digest: str = None,
        baggage_info_map: Dict[str, List[ModuleOrderItemListBaggageRuleBaggageInfoMapValue]] = None,
        structured_baggage: bool = None,
    ):
        self.baggage_digest = baggage_digest
        self.baggage_info_map = baggage_info_map
        self.structured_baggage = structured_baggage

    def validate(self):
        if self.baggage_info_map:
            for v in self.baggage_info_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_digest is not None:
            result['baggage_digest'] = self.baggage_digest
        result['baggage_info_map'] = {}
        if self.baggage_info_map is not None:
            for k, v in self.baggage_info_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['baggage_info_map'][k] = l1
        if self.structured_baggage is not None:
            result['structured_baggage'] = self.structured_baggage
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_digest') is not None:
            self.baggage_digest = m.get('baggage_digest')
        self.baggage_info_map = {}
        if m.get('baggage_info_map') is not None:
            for k, v in m.get('baggage_info_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleOrderItemListBaggageRuleBaggageInfoMapValue()
                    l1.append(temp_model.from_map(k1))
                self.baggage_info_map['k'] = l1
        if m.get('structured_baggage') is not None:
            self.structured_baggage = m.get('structured_baggage')
        return self


class IntlFlightOrderDetailResponseBodyModuleOrderItemListPassengerPriceList(TeaModel):
    def __init__(
        self,
        discount: float = None,
        discount_info: str = None,
        modify_fee: int = None,
        modify_tax_spread: int = None,
        passenger_type: int = None,
        sell_price: int = None,
        tax: int = None,
        ticket_price: int = None,
        upgrade_fee: int = None,
    ):
        self.discount = discount
        self.discount_info = discount_info
        self.modify_fee = modify_fee
        self.modify_tax_spread = modify_tax_spread
        self.passenger_type = passenger_type
        self.sell_price = sell_price
        self.tax = tax
        self.ticket_price = ticket_price
        self.upgrade_fee = upgrade_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.discount is not None:
            result['discount'] = self.discount
        if self.discount_info is not None:
            result['discount_info'] = self.discount_info
        if self.modify_fee is not None:
            result['modify_fee'] = self.modify_fee
        if self.modify_tax_spread is not None:
            result['modify_tax_spread'] = self.modify_tax_spread
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('discount_info') is not None:
            self.discount_info = m.get('discount_info')
        if m.get('modify_fee') is not None:
            self.modify_fee = m.get('modify_fee')
        if m.get('modify_tax_spread') is not None:
            self.modify_tax_spread = m.get('modify_tax_spread')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        return self


class IntlFlightOrderDetailResponseBodyModuleOrderItemListRefundChangeRule(TeaModel):
    def __init__(
        self,
        cancel_fee_ind: bool = None,
        change_fee_ind: bool = None,
        offer_penalty_info_map: Dict[str, List[ModuleOrderItemListRefundChangeRuleOfferPenaltyInfoMapValue]] = None,
        refund_change_digest: str = None,
        structured_refund: bool = None,
    ):
        self.cancel_fee_ind = cancel_fee_ind
        self.change_fee_ind = change_fee_ind
        self.offer_penalty_info_map = offer_penalty_info_map
        self.refund_change_digest = refund_change_digest
        self.structured_refund = structured_refund

    def validate(self):
        if self.offer_penalty_info_map:
            for v in self.offer_penalty_info_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_fee_ind is not None:
            result['cancel_fee_ind'] = self.cancel_fee_ind
        if self.change_fee_ind is not None:
            result['change_fee_ind'] = self.change_fee_ind
        result['offer_penalty_info_map'] = {}
        if self.offer_penalty_info_map is not None:
            for k, v in self.offer_penalty_info_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['offer_penalty_info_map'][k] = l1
        if self.refund_change_digest is not None:
            result['refund_change_digest'] = self.refund_change_digest
        if self.structured_refund is not None:
            result['structured_refund'] = self.structured_refund
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_fee_ind') is not None:
            self.cancel_fee_ind = m.get('cancel_fee_ind')
        if m.get('change_fee_ind') is not None:
            self.change_fee_ind = m.get('change_fee_ind')
        self.offer_penalty_info_map = {}
        if m.get('offer_penalty_info_map') is not None:
            for k, v in m.get('offer_penalty_info_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleOrderItemListRefundChangeRuleOfferPenaltyInfoMapValue()
                    l1.append(temp_model.from_map(k1))
                self.offer_penalty_info_map['k'] = l1
        if m.get('refund_change_digest') is not None:
            self.refund_change_digest = m.get('refund_change_digest')
        if m.get('structured_refund') is not None:
            self.structured_refund = m.get('structured_refund')
        return self


class IntlFlightOrderDetailResponseBodyModuleOrderItemList(TeaModel):
    def __init__(
        self,
        baggage_rule: IntlFlightOrderDetailResponseBodyModuleOrderItemListBaggageRule = None,
        passenger_price_list: List[IntlFlightOrderDetailResponseBodyModuleOrderItemListPassengerPriceList] = None,
        refund_change_rule: IntlFlightOrderDetailResponseBodyModuleOrderItemListRefundChangeRule = None,
        segment_key_list: List[str] = None,
    ):
        self.baggage_rule = baggage_rule
        self.passenger_price_list = passenger_price_list
        self.refund_change_rule = refund_change_rule
        self.segment_key_list = segment_key_list

    def validate(self):
        if self.baggage_rule:
            self.baggage_rule.validate()
        if self.passenger_price_list:
            for k in self.passenger_price_list:
                if k:
                    k.validate()
        if self.refund_change_rule:
            self.refund_change_rule.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_rule is not None:
            result['baggage_rule'] = self.baggage_rule.to_map()
        result['passenger_price_list'] = []
        if self.passenger_price_list is not None:
            for k in self.passenger_price_list:
                result['passenger_price_list'].append(k.to_map() if k else None)
        if self.refund_change_rule is not None:
            result['refund_change_rule'] = self.refund_change_rule.to_map()
        if self.segment_key_list is not None:
            result['segment_key_list'] = self.segment_key_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_rule') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModuleOrderItemListBaggageRule()
            self.baggage_rule = temp_model.from_map(m['baggage_rule'])
        self.passenger_price_list = []
        if m.get('passenger_price_list') is not None:
            for k in m.get('passenger_price_list'):
                temp_model = IntlFlightOrderDetailResponseBodyModuleOrderItemListPassengerPriceList()
                self.passenger_price_list.append(temp_model.from_map(k))
        if m.get('refund_change_rule') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModuleOrderItemListRefundChangeRule()
            self.refund_change_rule = temp_model.from_map(m['refund_change_rule'])
        if m.get('segment_key_list') is not None:
            self.segment_key_list = m.get('segment_key_list')
        return self


class IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListPriceInfo(TeaModel):
    def __init__(
        self,
        modify_fee: int = None,
        modify_tax_spread: int = None,
        sell_price: int = None,
        tax: int = None,
        ticket_price: int = None,
        upgrade_fee: int = None,
    ):
        self.modify_fee = modify_fee
        self.modify_tax_spread = modify_tax_spread
        self.sell_price = sell_price
        self.tax = tax
        self.ticket_price = ticket_price
        self.upgrade_fee = upgrade_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.modify_fee is not None:
            result['modify_fee'] = self.modify_fee
        if self.modify_tax_spread is not None:
            result['modify_tax_spread'] = self.modify_tax_spread
        if self.sell_price is not None:
            result['sell_price'] = self.sell_price
        if self.tax is not None:
            result['tax'] = self.tax
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('modify_fee') is not None:
            self.modify_fee = m.get('modify_fee')
        if m.get('modify_tax_spread') is not None:
            self.modify_tax_spread = m.get('modify_tax_spread')
        if m.get('sell_price') is not None:
            self.sell_price = m.get('sell_price')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        return self


class IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListTicketSegmentList(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        modified: bool = None,
        open_ticket_status: str = None,
        refunded: bool = None,
        segment_key: str = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.modified = modified
        self.open_ticket_status = open_ticket_status
        self.refunded = refunded
        self.segment_key = segment_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.modified is not None:
            result['modified'] = self.modified
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.refunded is not None:
            result['refunded'] = self.refunded
        if self.segment_key is not None:
            result['segment_key'] = self.segment_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('modified') is not None:
            self.modified = m.get('modified')
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('refunded') is not None:
            self.refunded = m.get('refunded')
        if m.get('segment_key') is not None:
            self.segment_key = m.get('segment_key')
        return self


class IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketList(TeaModel):
    def __init__(
        self,
        issue_time: str = None,
        price_info: IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListPriceInfo = None,
        ticket_no: str = None,
        ticket_segment_list: List[IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListTicketSegmentList] = None,
    ):
        self.issue_time = issue_time
        self.price_info = price_info
        self.ticket_no = ticket_no
        self.ticket_segment_list = ticket_segment_list

    def validate(self):
        if self.price_info:
            self.price_info.validate()
        if self.ticket_segment_list:
            for k in self.ticket_segment_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.issue_time is not None:
            result['issue_time'] = self.issue_time
        if self.price_info is not None:
            result['price_info'] = self.price_info.to_map()
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        result['ticket_segment_list'] = []
        if self.ticket_segment_list is not None:
            for k in self.ticket_segment_list:
                result['ticket_segment_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('issue_time') is not None:
            self.issue_time = m.get('issue_time')
        if m.get('price_info') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListPriceInfo()
            self.price_info = temp_model.from_map(m['price_info'])
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        self.ticket_segment_list = []
        if m.get('ticket_segment_list') is not None:
            for k in m.get('ticket_segment_list'):
                temp_model = IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketListTicketSegmentList()
                self.ticket_segment_list.append(temp_model.from_map(k))
        return self


class IntlFlightOrderDetailResponseBodyModulePassengerItemDetailList(TeaModel):
    def __init__(
        self,
        passenger_id: int = None,
        ticket_list: List[IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketList] = None,
    ):
        self.passenger_id = passenger_id
        self.ticket_list = ticket_list

    def validate(self):
        if self.ticket_list:
            for k in self.ticket_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        result['ticket_list'] = []
        if self.ticket_list is not None:
            for k in self.ticket_list:
                result['ticket_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        self.ticket_list = []
        if m.get('ticket_list') is not None:
            for k in m.get('ticket_list'):
                temp_model = IntlFlightOrderDetailResponseBodyModulePassengerItemDetailListTicketList()
                self.ticket_list.append(temp_model.from_map(k))
        return self


class IntlFlightOrderDetailResponseBodyModulePassengerListCertInfo(TeaModel):
    def __init__(
        self,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        cert_valid_date: str = None,
        name: str = None,
    ):
        self.cert_nation = cert_nation
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.cert_valid_date = cert_valid_date
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.cert_valid_date is not None:
            result['cert_valid_date'] = self.cert_valid_date
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('cert_valid_date') is not None:
            self.cert_valid_date = m.get('cert_valid_date')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class IntlFlightOrderDetailResponseBodyModulePassengerListSubsidiaryCertInfoList(TeaModel):
    def __init__(
        self,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        cert_valid_date: str = None,
        name: str = None,
    ):
        self.cert_nation = cert_nation
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.cert_valid_date = cert_valid_date
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.cert_valid_date is not None:
            result['cert_valid_date'] = self.cert_valid_date
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('cert_valid_date') is not None:
            self.cert_valid_date = m.get('cert_valid_date')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class IntlFlightOrderDetailResponseBodyModulePassengerList(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cascade_dept_mask: str = None,
        cascade_dept_name: str = None,
        cert_info: IntlFlightOrderDetailResponseBodyModulePassengerListCertInfo = None,
        cost_center_name: str = None,
        cost_center_number: str = None,
        dept_id: str = None,
        dept_name: str = None,
        gender: int = None,
        invoice_id: str = None,
        invoice_title: str = None,
        job_no: str = None,
        mobile_country_code: str = None,
        nationality: str = None,
        nationality_code: str = None,
        passenger_id: int = None,
        passenger_type: int = None,
        phone: str = None,
        project_code: str = None,
        project_title: str = None,
        subsidiary_cert_info_list: List[IntlFlightOrderDetailResponseBodyModulePassengerListSubsidiaryCertInfoList] = None,
        user_id: str = None,
        user_type: int = None,
    ):
        self.birthday = birthday
        self.cascade_dept_mask = cascade_dept_mask
        self.cascade_dept_name = cascade_dept_name
        self.cert_info = cert_info
        self.cost_center_name = cost_center_name
        self.cost_center_number = cost_center_number
        self.dept_id = dept_id
        self.dept_name = dept_name
        self.gender = gender
        self.invoice_id = invoice_id
        self.invoice_title = invoice_title
        self.job_no = job_no
        self.mobile_country_code = mobile_country_code
        self.nationality = nationality
        self.nationality_code = nationality_code
        self.passenger_id = passenger_id
        self.passenger_type = passenger_type
        self.phone = phone
        self.project_code = project_code
        self.project_title = project_title
        self.subsidiary_cert_info_list = subsidiary_cert_info_list
        self.user_id = user_id
        self.user_type = user_type

    def validate(self):
        if self.cert_info:
            self.cert_info.validate()
        if self.subsidiary_cert_info_list:
            for k in self.subsidiary_cert_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cascade_dept_mask is not None:
            result['cascade_dept_mask'] = self.cascade_dept_mask
        if self.cascade_dept_name is not None:
            result['cascade_dept_name'] = self.cascade_dept_name
        if self.cert_info is not None:
            result['cert_info'] = self.cert_info.to_map()
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.gender is not None:
            result['gender'] = self.gender
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.mobile_country_code is not None:
            result['mobile_country_code'] = self.mobile_country_code
        if self.nationality is not None:
            result['nationality'] = self.nationality
        if self.nationality_code is not None:
            result['nationality_code'] = self.nationality_code
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        result['subsidiary_cert_info_list'] = []
        if self.subsidiary_cert_info_list is not None:
            for k in self.subsidiary_cert_info_list:
                result['subsidiary_cert_info_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cascade_dept_mask') is not None:
            self.cascade_dept_mask = m.get('cascade_dept_mask')
        if m.get('cascade_dept_name') is not None:
            self.cascade_dept_name = m.get('cascade_dept_name')
        if m.get('cert_info') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModulePassengerListCertInfo()
            self.cert_info = temp_model.from_map(m['cert_info'])
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('mobile_country_code') is not None:
            self.mobile_country_code = m.get('mobile_country_code')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        if m.get('nationality_code') is not None:
            self.nationality_code = m.get('nationality_code')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        self.subsidiary_cert_info_list = []
        if m.get('subsidiary_cert_info_list') is not None:
            for k in m.get('subsidiary_cert_info_list'):
                temp_model = IntlFlightOrderDetailResponseBodyModulePassengerListSubsidiaryCertInfoList()
                self.subsidiary_cert_info_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class IntlFlightOrderDetailResponseBodyModule(TeaModel):
    def __init__(
        self,
        book_user_id: str = None,
        book_user_name: str = None,
        close_reason: str = None,
        close_time: int = None,
        close_time_str: str = None,
        contact_info: IntlFlightOrderDetailResponseBodyModuleContactInfo = None,
        create_time: int = None,
        create_time_str: str = None,
        ext_info_map: Dict[str, str] = None,
        journey_list: List[IntlFlightOrderDetailResponseBodyModuleJourneyList] = None,
        order_id: int = None,
        order_item_list: List[IntlFlightOrderDetailResponseBodyModuleOrderItemList] = None,
        out_order_id: str = None,
        passenger_item_detail_list: List[IntlFlightOrderDetailResponseBodyModulePassengerItemDetailList] = None,
        passenger_list: List[IntlFlightOrderDetailResponseBodyModulePassengerList] = None,
        pay_expire_time: int = None,
        pay_expire_time_str: str = None,
        pay_status: int = None,
        pay_time: int = None,
        pay_time_str: str = None,
        pay_type: int = None,
        status: int = None,
        succeed_time: int = None,
        succeed_time_str: str = None,
        total_price: int = None,
        trip_type: int = None,
    ):
        self.book_user_id = book_user_id
        self.book_user_name = book_user_name
        self.close_reason = close_reason
        self.close_time = close_time
        self.close_time_str = close_time_str
        self.contact_info = contact_info
        self.create_time = create_time
        self.create_time_str = create_time_str
        self.ext_info_map = ext_info_map
        self.journey_list = journey_list
        self.order_id = order_id
        self.order_item_list = order_item_list
        self.out_order_id = out_order_id
        self.passenger_item_detail_list = passenger_item_detail_list
        self.passenger_list = passenger_list
        self.pay_expire_time = pay_expire_time
        self.pay_expire_time_str = pay_expire_time_str
        self.pay_status = pay_status
        self.pay_time = pay_time
        self.pay_time_str = pay_time_str
        self.pay_type = pay_type
        self.status = status
        self.succeed_time = succeed_time
        self.succeed_time_str = succeed_time_str
        self.total_price = total_price
        self.trip_type = trip_type

    def validate(self):
        if self.contact_info:
            self.contact_info.validate()
        if self.journey_list:
            for k in self.journey_list:
                if k:
                    k.validate()
        if self.order_item_list:
            for k in self.order_item_list:
                if k:
                    k.validate()
        if self.passenger_item_detail_list:
            for k in self.passenger_item_detail_list:
                if k:
                    k.validate()
        if self.passenger_list:
            for k in self.passenger_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.book_user_id is not None:
            result['book_user_id'] = self.book_user_id
        if self.book_user_name is not None:
            result['book_user_name'] = self.book_user_name
        if self.close_reason is not None:
            result['close_reason'] = self.close_reason
        if self.close_time is not None:
            result['close_time'] = self.close_time
        if self.close_time_str is not None:
            result['close_time_str'] = self.close_time_str
        if self.contact_info is not None:
            result['contact_info'] = self.contact_info.to_map()
        if self.create_time is not None:
            result['create_time'] = self.create_time
        if self.create_time_str is not None:
            result['create_time_str'] = self.create_time_str
        if self.ext_info_map is not None:
            result['ext_info_map'] = self.ext_info_map
        result['journey_list'] = []
        if self.journey_list is not None:
            for k in self.journey_list:
                result['journey_list'].append(k.to_map() if k else None)
        if self.order_id is not None:
            result['order_id'] = self.order_id
        result['order_item_list'] = []
        if self.order_item_list is not None:
            for k in self.order_item_list:
                result['order_item_list'].append(k.to_map() if k else None)
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_item_detail_list'] = []
        if self.passenger_item_detail_list is not None:
            for k in self.passenger_item_detail_list:
                result['passenger_item_detail_list'].append(k.to_map() if k else None)
        result['passenger_list'] = []
        if self.passenger_list is not None:
            for k in self.passenger_list:
                result['passenger_list'].append(k.to_map() if k else None)
        if self.pay_expire_time is not None:
            result['pay_expire_time'] = self.pay_expire_time
        if self.pay_expire_time_str is not None:
            result['pay_expire_time_str'] = self.pay_expire_time_str
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.pay_time_str is not None:
            result['pay_time_str'] = self.pay_time_str
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.status is not None:
            result['status'] = self.status
        if self.succeed_time is not None:
            result['succeed_time'] = self.succeed_time
        if self.succeed_time_str is not None:
            result['succeed_time_str'] = self.succeed_time_str
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('book_user_id') is not None:
            self.book_user_id = m.get('book_user_id')
        if m.get('book_user_name') is not None:
            self.book_user_name = m.get('book_user_name')
        if m.get('close_reason') is not None:
            self.close_reason = m.get('close_reason')
        if m.get('close_time') is not None:
            self.close_time = m.get('close_time')
        if m.get('close_time_str') is not None:
            self.close_time_str = m.get('close_time_str')
        if m.get('contact_info') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModuleContactInfo()
            self.contact_info = temp_model.from_map(m['contact_info'])
        if m.get('create_time') is not None:
            self.create_time = m.get('create_time')
        if m.get('create_time_str') is not None:
            self.create_time_str = m.get('create_time_str')
        if m.get('ext_info_map') is not None:
            self.ext_info_map = m.get('ext_info_map')
        self.journey_list = []
        if m.get('journey_list') is not None:
            for k in m.get('journey_list'):
                temp_model = IntlFlightOrderDetailResponseBodyModuleJourneyList()
                self.journey_list.append(temp_model.from_map(k))
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        self.order_item_list = []
        if m.get('order_item_list') is not None:
            for k in m.get('order_item_list'):
                temp_model = IntlFlightOrderDetailResponseBodyModuleOrderItemList()
                self.order_item_list.append(temp_model.from_map(k))
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_item_detail_list = []
        if m.get('passenger_item_detail_list') is not None:
            for k in m.get('passenger_item_detail_list'):
                temp_model = IntlFlightOrderDetailResponseBodyModulePassengerItemDetailList()
                self.passenger_item_detail_list.append(temp_model.from_map(k))
        self.passenger_list = []
        if m.get('passenger_list') is not None:
            for k in m.get('passenger_list'):
                temp_model = IntlFlightOrderDetailResponseBodyModulePassengerList()
                self.passenger_list.append(temp_model.from_map(k))
        if m.get('pay_expire_time') is not None:
            self.pay_expire_time = m.get('pay_expire_time')
        if m.get('pay_expire_time_str') is not None:
            self.pay_expire_time_str = m.get('pay_expire_time_str')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('pay_time_str') is not None:
            self.pay_time_str = m.get('pay_time_str')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('succeed_time') is not None:
            self.succeed_time = m.get('succeed_time')
        if m.get('succeed_time_str') is not None:
            self.succeed_time_str = m.get('succeed_time_str')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class IntlFlightOrderDetailResponseBody(TeaModel):
    def __init__(
        self,
        module: IntlFlightOrderDetailResponseBodyModule = None,
        request_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.module = module
        self.request_id = request_id
        self.result_code = result_code
        self.result_msg = result_msg
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['trace_id'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('module') is not None:
            temp_model = IntlFlightOrderDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('trace_id') is not None:
            self.trace_id = m.get('trace_id')
        return self


class IntlFlightOrderDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IntlFlightOrderDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IntlFlightOrderDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IntlFlightOrderPayHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class IntlFlightOrderPayRequest(TeaModel):
    def __init__(
        self,
        ext_params: Dict[str, Any] = None,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
        total_price: int = None,
    ):
        self.ext_params = ext_params
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.total_price = total_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_params is not None:
            result['ext_params'] = self.ext_params
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ext_params') is not None:
            self.ext_params = m.get('ext_params')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class IntlFlightOrderPayShrinkRequest(TeaModel):
    def __init__(
        self,
        ext_params_shrink: str = None,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
        total_price: int = None,
    ):
        self.ext_params_shrink = ext_params_shrink
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.total_price = total_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext_params_shrink is not None:
            result['ext_params'] = self.ext_params_shrink
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.total_price is not None:
            result['total_price'] = self.total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ext_params') is not None:
            self.ext_params_shrink = m.get('ext_params')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        return self


class IntlFlightOrderPayResponseBodyModule(TeaModel):
    def __init__(
        self,
        price: int = None,
    ):
        self.price = price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.price is not None:
            result['price'] = self.price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('price') is not None:
            self.price = m.get('price')
        return self


class IntlFlightOrderPayResponseBody(TeaModel):
    def __init__(
        self,
        module: IntlFlightOrderPayResponseBodyModule = None,
        request_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.module = module
        self.request_id = request_id
        self.result_code = result_code
        self.result_msg = result_msg
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['trace_id'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('module') is not None:
            temp_model = IntlFlightOrderPayResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('trace_id') is not None:
            self.trace_id = m.get('trace_id')
        return self


class IntlFlightOrderPayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IntlFlightOrderPayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IntlFlightOrderPayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IntlFlightOrderPayCheckHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class IntlFlightOrderPayCheckRequest(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        order_id: str = None,
        out_order_id: str = None,
    ):
        self.isv_name = isv_name
        self.order_id = order_id
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class IntlFlightOrderPayCheckResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.request_id = request_id
        self.result_code = result_code
        self.result_msg = result_msg
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['request_id'] = self.request_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['trace_id'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('request_id') is not None:
            self.request_id = m.get('request_id')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('trace_id') is not None:
            self.trace_id = m.get('trace_id')
        return self


class IntlFlightOrderPayCheckResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IntlFlightOrderPayCheckResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IntlFlightOrderPayCheckResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IntlFlightOtaItemDetailHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class IntlFlightOtaItemDetailRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        isv_name: str = None,
        language: str = None,
        supplier_code: str = None,
    ):
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        self.isv_name = isv_name
        self.language = language
        self.supplier_code = supplier_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.language is not None:
            result['language'] = self.language
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo(TeaModel):
    def __init__(
        self,
        operating_airline_info: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo = None,
        operating_flight_no: str = None,
    ):
        self.operating_airline_info = operating_airline_info
        self.operating_flight_no = operating_flight_no

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo(TeaModel):
    def __init__(
        self,
        stop_airport: str = None,
        stop_airport_name: str = None,
        stop_arr_term: str = None,
        stop_arr_time: str = None,
        stop_city_code: str = None,
        stop_city_name: str = None,
        stop_city_names: List[str] = None,
        stop_dep_term: str = None,
        stop_dep_time: str = None,
        stop_time: str = None,
    ):
        self.stop_airport = stop_airport
        self.stop_airport_name = stop_airport_name
        self.stop_arr_term = stop_arr_term
        self.stop_arr_time = stop_arr_time
        self.stop_city_code = stop_city_code
        self.stop_city_name = stop_city_name
        self.stop_city_names = stop_city_names
        self.stop_dep_term = stop_dep_term
        self.stop_dep_time = stop_dep_time
        self.stop_time = stop_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_airport_name is not None:
            result['stop_airport_name'] = self.stop_airport_name
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_city_names is not None:
            result['stop_city_names'] = self.stop_city_names
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_time is not None:
            result['stop_time'] = self.stop_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_airport_name') is not None:
            self.stop_airport_name = m.get('stop_airport_name')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_city_names') is not None:
            self.stop_city_names = m.get('stop_city_names')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_time') is not None:
            self.stop_time = m.get('stop_time')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo(TeaModel):
    def __init__(
        self,
        dep_city_luggage_direct: int = None,
        stop_city_luggage_direct: int = None,
    ):
        self.dep_city_luggage_direct = dep_city_luggage_direct
        self.stop_city_luggage_direct = stop_city_luggage_direct

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dep_city_luggage_direct is not None:
            result['dep_city_luggage_direct'] = self.dep_city_luggage_direct
        if self.stop_city_luggage_direct is not None:
            result['stop_city_luggage_direct'] = self.stop_city_luggage_direct
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dep_city_luggage_direct') is not None:
            self.dep_city_luggage_direct = m.get('dep_city_luggage_direct')
        if m.get('stop_city_luggage_direct') is not None:
            self.stop_city_luggage_direct = m.get('stop_city_luggage_direct')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark(TeaModel):
    def __init__(
        self,
        dep_city_visa_remark: str = None,
        dep_city_visa_type: int = None,
        stop_city_visa_remarks: List[str] = None,
        stop_city_visa_types: List[int] = None,
    ):
        self.dep_city_visa_remark = dep_city_visa_remark
        self.dep_city_visa_type = dep_city_visa_type
        self.stop_city_visa_remarks = stop_city_visa_remarks
        self.stop_city_visa_types = stop_city_visa_types

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dep_city_visa_remark is not None:
            result['dep_city_visa_remark'] = self.dep_city_visa_remark
        if self.dep_city_visa_type is not None:
            result['dep_city_visa_type'] = self.dep_city_visa_type
        if self.stop_city_visa_remarks is not None:
            result['stop_city_visa_remarks'] = self.stop_city_visa_remarks
        if self.stop_city_visa_types is not None:
            result['stop_city_visa_types'] = self.stop_city_visa_types
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dep_city_visa_remark') is not None:
            self.dep_city_visa_remark = m.get('dep_city_visa_remark')
        if m.get('dep_city_visa_type') is not None:
            self.dep_city_visa_type = m.get('dep_city_visa_type')
        if m.get('stop_city_visa_remarks') is not None:
            self.stop_city_visa_remarks = m.get('stop_city_visa_remarks')
        if m.get('stop_city_visa_types') is not None:
            self.stop_city_visa_types = m.get('stop_city_visa_types')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfos(TeaModel):
    def __init__(
        self,
        airline_info: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo = None,
        arr_airport_info: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        baggage_desc: str = None,
        dep_airport_info: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        duration: int = None,
        flight_no: str = None,
        flight_share_info: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo = None,
        flight_size: str = None,
        flight_stop_info: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo = None,
        flight_type: str = None,
        luggage_direct_info: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo = None,
        manufacturer: str = None,
        meal_desc: str = None,
        on_time_rate: str = None,
        one_more: int = None,
        one_more_show: str = None,
        segment_index: int = None,
        segment_key: str = None,
        segment_visa_remark: IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark = None,
        share: bool = None,
        short_flight_size: str = None,
        stop: bool = None,
        total_time: str = None,
        transfer_time: str = None,
        transfer_time_number: int = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.baggage_desc = baggage_desc
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.duration = duration
        self.flight_no = flight_no
        self.flight_share_info = flight_share_info
        self.flight_size = flight_size
        self.flight_stop_info = flight_stop_info
        self.flight_type = flight_type
        self.luggage_direct_info = luggage_direct_info
        self.manufacturer = manufacturer
        self.meal_desc = meal_desc
        self.on_time_rate = on_time_rate
        self.one_more = one_more
        self.one_more_show = one_more_show
        self.segment_index = segment_index
        self.segment_key = segment_key
        self.segment_visa_remark = segment_visa_remark
        self.share = share
        self.short_flight_size = short_flight_size
        self.stop = stop
        self.total_time = total_time
        self.transfer_time = transfer_time
        self.transfer_time_number = transfer_time_number

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()
        if self.luggage_direct_info:
            self.luggage_direct_info.validate()
        if self.segment_visa_remark:
            self.segment_visa_remark.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.luggage_direct_info is not None:
            result['luggage_direct_info'] = self.luggage_direct_info.to_map()
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        if self.one_more is not None:
            result['one_more'] = self.one_more
        if self.one_more_show is not None:
            result['one_more_show'] = self.one_more_show
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.segment_key is not None:
            result['segment_key'] = self.segment_key
        if self.segment_visa_remark is not None:
            result['segment_visa_remark'] = self.segment_visa_remark.to_map()
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.stop is not None:
            result['stop'] = self.stop
        if self.total_time is not None:
            result['total_time'] = self.total_time
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        if self.transfer_time_number is not None:
            result['transfer_time_number'] = self.transfer_time_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('dep_airport_info') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('luggage_direct_info') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo()
            self.luggage_direct_info = temp_model.from_map(m['luggage_direct_info'])
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        if m.get('one_more') is not None:
            self.one_more = m.get('one_more')
        if m.get('one_more_show') is not None:
            self.one_more_show = m.get('one_more_show')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('segment_key') is not None:
            self.segment_key = m.get('segment_key')
        if m.get('segment_visa_remark') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark()
            self.segment_visa_remark = temp_model.from_map(m['segment_visa_remark'])
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('total_time') is not None:
            self.total_time = m.get('total_time')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        if m.get('transfer_time_number') is not None:
            self.transfer_time_number = m.get('transfer_time_number')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfos(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        duration: int = None,
        extensions: Dict[str, str] = None,
        flight_segment_infos: List[IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfos] = None,
        journey_index: int = None,
        transfer_time: int = None,
    ):
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.duration = duration
        self.extensions = extensions
        self.flight_segment_infos = flight_segment_infos
        self.journey_index = journey_index
        self.transfer_time = transfer_time

    def validate(self):
        if self.flight_segment_infos:
            for k in self.flight_segment_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.extensions is not None:
            result['extensions'] = self.extensions
        result['flight_segment_infos'] = []
        if self.flight_segment_infos is not None:
            for k in self.flight_segment_infos:
                result['flight_segment_infos'].append(k.to_map() if k else None)
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('extensions') is not None:
            self.extensions = m.get('extensions')
        self.flight_segment_infos = []
        if m.get('flight_segment_infos') is not None:
            for k in m.get('flight_segment_infos'):
                temp_model = IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfosFlightSegmentInfos()
                self.flight_segment_infos.append(temp_model.from_map(k))
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListFlightRuleInfo(TeaModel):
    def __init__(
        self,
        baggage_desc: str = None,
        refund_change_rule_desc: str = None,
    ):
        self.baggage_desc = baggage_desc
        self.refund_change_rule_desc = refund_change_rule_desc

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.refund_change_rule_desc is not None:
            result['refund_change_rule_desc'] = self.refund_change_rule_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('refund_change_rule_desc') is not None:
            self.refund_change_rule_desc = m.get('refund_change_rule_desc')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoList(TeaModel):
    def __init__(
        self,
        flight_rule_info: IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListFlightRuleInfo = None,
        segment_position: IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListSegmentPosition = None,
    ):
        self.flight_rule_info = flight_rule_info
        self.segment_position = segment_position

    def validate(self):
        if self.flight_rule_info:
            self.flight_rule_info.validate()
        if self.segment_position:
            self.segment_position.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flight_rule_info is not None:
            result['flight_rule_info'] = self.flight_rule_info.to_map()
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('flight_rule_info') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListFlightRuleInfo()
            self.flight_rule_info = temp_model.from_map(m['flight_rule_info'])
        if m.get('segment_position') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        return self


class IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsBaggageRule(TeaModel):
    def __init__(
        self,
        baggage_digest: str = None,
        baggage_info_map: Dict[str, List[ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue]] = None,
        structured_baggage: bool = None,
    ):
        self.baggage_digest = baggage_digest
        self.baggage_info_map = baggage_info_map
        self.structured_baggage = structured_baggage

    def validate(self):
        if self.baggage_info_map:
            for v in self.baggage_info_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_digest is not None:
            result['baggage_digest'] = self.baggage_digest
        result['baggage_info_map'] = {}
        if self.baggage_info_map is not None:
            for k, v in self.baggage_info_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['baggage_info_map'][k] = l1
        if self.structured_baggage is not None:
            result['structured_baggage'] = self.structured_baggage
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_digest') is not None:
            self.baggage_digest = m.get('baggage_digest')
        self.baggage_info_map = {}
        if m.get('baggage_info_map') is not None:
            for k, v in m.get('baggage_info_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleGroupItemSubItemsBaggageRuleBaggageInfoMapValue()
                    l1.append(temp_model.from_map(k1))
                self.baggage_info_map['k'] = l1
        if m.get('structured_baggage') is not None:
            self.structured_baggage = m.get('structured_baggage')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsRefundChangeRule(TeaModel):
    def __init__(
        self,
        cancel_fee_ind: bool = None,
        change_fee_ind: bool = None,
        offer_penalty_info_map: Dict[str, List[ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue]] = None,
        refund_change_digest: str = None,
        structured_refund: bool = None,
    ):
        self.cancel_fee_ind = cancel_fee_ind
        self.change_fee_ind = change_fee_ind
        self.offer_penalty_info_map = offer_penalty_info_map
        self.refund_change_digest = refund_change_digest
        self.structured_refund = structured_refund

    def validate(self):
        if self.offer_penalty_info_map:
            for v in self.offer_penalty_info_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_fee_ind is not None:
            result['cancel_fee_ind'] = self.cancel_fee_ind
        if self.change_fee_ind is not None:
            result['change_fee_ind'] = self.change_fee_ind
        result['offer_penalty_info_map'] = {}
        if self.offer_penalty_info_map is not None:
            for k, v in self.offer_penalty_info_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['offer_penalty_info_map'][k] = l1
        if self.refund_change_digest is not None:
            result['refund_change_digest'] = self.refund_change_digest
        if self.structured_refund is not None:
            result['structured_refund'] = self.structured_refund
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_fee_ind') is not None:
            self.cancel_fee_ind = m.get('cancel_fee_ind')
        if m.get('change_fee_ind') is not None:
            self.change_fee_ind = m.get('change_fee_ind')
        self.offer_penalty_info_map = {}
        if m.get('offer_penalty_info_map') is not None:
            for k, v in m.get('offer_penalty_info_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleGroupItemSubItemsRefundChangeRuleOfferPenaltyInfoMapValue()
                    l1.append(temp_model.from_map(k1))
                self.offer_penalty_info_map['k'] = l1
        if m.get('refund_change_digest') is not None:
            self.refund_change_digest = m.get('refund_change_digest')
        if m.get('structured_refund') is not None:
            self.structured_refund = m.get('structured_refund')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItems(TeaModel):
    def __init__(
        self,
        baggage_rule: IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsBaggageRule = None,
        refund_change_rule: IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsRefundChangeRule = None,
        segment_keys: List[str] = None,
        shopping_item_map: Dict[str, ModuleGroupItemSubItemsShoppingItemMapValue] = None,
        uniq_key: str = None,
    ):
        self.baggage_rule = baggage_rule
        self.refund_change_rule = refund_change_rule
        self.segment_keys = segment_keys
        self.shopping_item_map = shopping_item_map
        self.uniq_key = uniq_key

    def validate(self):
        if self.baggage_rule:
            self.baggage_rule.validate()
        if self.refund_change_rule:
            self.refund_change_rule.validate()
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_rule is not None:
            result['baggage_rule'] = self.baggage_rule.to_map()
        if self.refund_change_rule is not None:
            result['refund_change_rule'] = self.refund_change_rule.to_map()
        if self.segment_keys is not None:
            result['segment_keys'] = self.segment_keys
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        if self.uniq_key is not None:
            result['uniq_key'] = self.uniq_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_rule') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsBaggageRule()
            self.baggage_rule = temp_model.from_map(m['baggage_rule'])
        if m.get('refund_change_rule') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItemsRefundChangeRule()
            self.refund_change_rule = temp_model.from_map(m['refund_change_rule'])
        if m.get('segment_keys') is not None:
            self.segment_keys = m.get('segment_keys')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleGroupItemSubItemsShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        if m.get('uniq_key') is not None:
            self.uniq_key = m.get('uniq_key')
        return self


class IntlFlightOtaItemDetailResponseBodyModuleGroupItem(TeaModel):
    def __init__(
        self,
        agreement_price_codes: List[str] = None,
        flight_rule_info_list: List[IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoList] = None,
        item_id: str = None,
        item_type: str = None,
        shopping_item_map: Dict[str, ModuleGroupItemShoppingItemMapValue] = None,
        sub_item_position_map: Dict[str, List[ModuleGroupItemSubItemPositionMapValue]] = None,
        sub_items: List[IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItems] = None,
    ):
        self.agreement_price_codes = agreement_price_codes
        self.flight_rule_info_list = flight_rule_info_list
        self.item_id = item_id
        self.item_type = item_type
        self.shopping_item_map = shopping_item_map
        self.sub_item_position_map = sub_item_position_map
        self.sub_items = sub_items

    def validate(self):
        if self.flight_rule_info_list:
            for k in self.flight_rule_info_list:
                if k:
                    k.validate()
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()
        if self.sub_item_position_map:
            for v in self.sub_item_position_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.sub_items:
            for k in self.sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agreement_price_codes is not None:
            result['agreement_price_codes'] = self.agreement_price_codes
        result['flight_rule_info_list'] = []
        if self.flight_rule_info_list is not None:
            for k in self.flight_rule_info_list:
                result['flight_rule_info_list'].append(k.to_map() if k else None)
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.item_type is not None:
            result['item_type'] = self.item_type
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        result['sub_item_position_map'] = {}
        if self.sub_item_position_map is not None:
            for k, v in self.sub_item_position_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['sub_item_position_map'][k] = l1
        result['sub_items'] = []
        if self.sub_items is not None:
            for k in self.sub_items:
                result['sub_items'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('agreement_price_codes') is not None:
            self.agreement_price_codes = m.get('agreement_price_codes')
        self.flight_rule_info_list = []
        if m.get('flight_rule_info_list') is not None:
            for k in m.get('flight_rule_info_list'):
                temp_model = IntlFlightOtaItemDetailResponseBodyModuleGroupItemFlightRuleInfoList()
                self.flight_rule_info_list.append(temp_model.from_map(k))
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('item_type') is not None:
            self.item_type = m.get('item_type')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleGroupItemShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        self.sub_item_position_map = {}
        if m.get('sub_item_position_map') is not None:
            for k, v in m.get('sub_item_position_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleGroupItemSubItemPositionMapValue()
                    l1.append(temp_model.from_map(k1))
                self.sub_item_position_map['k'] = l1
        self.sub_items = []
        if m.get('sub_items') is not None:
            for k in m.get('sub_items'):
                temp_model = IntlFlightOtaItemDetailResponseBodyModuleGroupItemSubItems()
                self.sub_items.append(temp_model.from_map(k))
        return self


class IntlFlightOtaItemDetailResponseBodyModuleShutterDocs(TeaModel):
    def __init__(
        self,
        contents: List[str] = None,
        main_title: str = None,
    ):
        self.contents = contents
        self.main_title = main_title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contents is not None:
            result['contents'] = self.contents
        if self.main_title is not None:
            result['main_title'] = self.main_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contents') is not None:
            self.contents = m.get('contents')
        if m.get('main_title') is not None:
            self.main_title = m.get('main_title')
        return self


class IntlFlightOtaItemDetailResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_journey_infos: List[IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfos] = None,
        group_item: IntlFlightOtaItemDetailResponseBodyModuleGroupItem = None,
        shutter_docs: List[IntlFlightOtaItemDetailResponseBodyModuleShutterDocs] = None,
        trip_type: int = None,
    ):
        self.flight_journey_infos = flight_journey_infos
        self.group_item = group_item
        self.shutter_docs = shutter_docs
        self.trip_type = trip_type

    def validate(self):
        if self.flight_journey_infos:
            for k in self.flight_journey_infos:
                if k:
                    k.validate()
        if self.group_item:
            self.group_item.validate()
        if self.shutter_docs:
            for k in self.shutter_docs:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_journey_infos'] = []
        if self.flight_journey_infos is not None:
            for k in self.flight_journey_infos:
                result['flight_journey_infos'].append(k.to_map() if k else None)
        if self.group_item is not None:
            result['group_item'] = self.group_item.to_map()
        result['shutter_docs'] = []
        if self.shutter_docs is not None:
            for k in self.shutter_docs:
                result['shutter_docs'].append(k.to_map() if k else None)
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_journey_infos = []
        if m.get('flight_journey_infos') is not None:
            for k in m.get('flight_journey_infos'):
                temp_model = IntlFlightOtaItemDetailResponseBodyModuleFlightJourneyInfos()
                self.flight_journey_infos.append(temp_model.from_map(k))
        if m.get('group_item') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModuleGroupItem()
            self.group_item = temp_model.from_map(m['group_item'])
        self.shutter_docs = []
        if m.get('shutter_docs') is not None:
            for k in m.get('shutter_docs'):
                temp_model = IntlFlightOtaItemDetailResponseBodyModuleShutterDocs()
                self.shutter_docs.append(temp_model.from_map(k))
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class IntlFlightOtaItemDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: IntlFlightOtaItemDetailResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IntlFlightOtaItemDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IntlFlightOtaItemDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IntlFlightOtaItemDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IntlFlightOtaSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class IntlFlightOtaSearchRequestSearchJourneysSelectedFlights(TeaModel):
    def __init__(
        self,
        arr_airport_code: str = None,
        arr_city_code: str = None,
        cabin_type: int = None,
        dep_airport_code: str = None,
        dep_city_code: str = None,
        flight_time: str = None,
        market_flight_no: str = None,
        operate_flight_no: str = None,
    ):
        self.arr_airport_code = arr_airport_code
        # This parameter is required.
        self.arr_city_code = arr_city_code
        self.cabin_type = cabin_type
        self.dep_airport_code = dep_airport_code
        # This parameter is required.
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.flight_time = flight_time
        # This parameter is required.
        self.market_flight_no = market_flight_no
        self.operate_flight_no = operate_flight_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.cabin_type is not None:
            result['cabin_type'] = self.cabin_type
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.flight_time is not None:
            result['flight_time'] = self.flight_time
        if self.market_flight_no is not None:
            result['market_flight_no'] = self.market_flight_no
        if self.operate_flight_no is not None:
            result['operate_flight_no'] = self.operate_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('cabin_type') is not None:
            self.cabin_type = m.get('cabin_type')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('flight_time') is not None:
            self.flight_time = m.get('flight_time')
        if m.get('market_flight_no') is not None:
            self.market_flight_no = m.get('market_flight_no')
        if m.get('operate_flight_no') is not None:
            self.operate_flight_no = m.get('operate_flight_no')
        return self


class IntlFlightOtaSearchRequestSearchJourneys(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        dep_city_code: str = None,
        dep_date: str = None,
        selected_flights: List[IntlFlightOtaSearchRequestSearchJourneysSelectedFlights] = None,
    ):
        # This parameter is required.
        self.arr_city_code = arr_city_code
        # This parameter is required.
        self.dep_city_code = dep_city_code
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.selected_flights = selected_flights

    def validate(self):
        if self.selected_flights:
            for k in self.selected_flights:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        result['selected_flights'] = []
        if self.selected_flights is not None:
            for k in self.selected_flights:
                result['selected_flights'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        self.selected_flights = []
        if m.get('selected_flights') is not None:
            for k in m.get('selected_flights'):
                temp_model = IntlFlightOtaSearchRequestSearchJourneysSelectedFlights()
                self.selected_flights.append(temp_model.from_map(k))
        return self


class IntlFlightOtaSearchRequestSearchPassengerList(TeaModel):
    def __init__(
        self,
        cert_no: str = None,
        cert_type: int = None,
        full_name: str = None,
        type: int = None,
    ):
        # This parameter is required.
        self.cert_no = cert_no
        # This parameter is required.
        self.cert_type = cert_type
        # This parameter is required.
        self.full_name = full_name
        # This parameter is required.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.full_name is not None:
            result['full_name'] = self.full_name
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('full_name') is not None:
            self.full_name = m.get('full_name')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class IntlFlightOtaSearchRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        cabin_type: int = None,
        direct_only: bool = None,
        isv_name: str = None,
        language: str = None,
        need_share_flight: bool = None,
        search_journeys: List[IntlFlightOtaSearchRequestSearchJourneys] = None,
        search_passenger_list: List[IntlFlightOtaSearchRequestSearchPassengerList] = None,
        supplier_code: str = None,
        trip_type: int = None,
    ):
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        # This parameter is required.
        self.cabin_type = cabin_type
        self.direct_only = direct_only
        self.isv_name = isv_name
        self.language = language
        self.need_share_flight = need_share_flight
        # This parameter is required.
        self.search_journeys = search_journeys
        self.search_passenger_list = search_passenger_list
        self.supplier_code = supplier_code
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        if self.search_journeys:
            for k in self.search_journeys:
                if k:
                    k.validate()
        if self.search_passenger_list:
            for k in self.search_passenger_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.cabin_type is not None:
            result['cabin_type'] = self.cabin_type
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.language is not None:
            result['language'] = self.language
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        result['search_journeys'] = []
        if self.search_journeys is not None:
            for k in self.search_journeys:
                result['search_journeys'].append(k.to_map() if k else None)
        result['search_passenger_list'] = []
        if self.search_passenger_list is not None:
            for k in self.search_passenger_list:
                result['search_passenger_list'].append(k.to_map() if k else None)
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('cabin_type') is not None:
            self.cabin_type = m.get('cabin_type')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        self.search_journeys = []
        if m.get('search_journeys') is not None:
            for k in m.get('search_journeys'):
                temp_model = IntlFlightOtaSearchRequestSearchJourneys()
                self.search_journeys.append(temp_model.from_map(k))
        self.search_passenger_list = []
        if m.get('search_passenger_list') is not None:
            for k in m.get('search_passenger_list'):
                temp_model = IntlFlightOtaSearchRequestSearchPassengerList()
                self.search_passenger_list.append(temp_model.from_map(k))
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class IntlFlightOtaSearchShrinkRequest(TeaModel):
    def __init__(
        self,
        btrip_user_id: str = None,
        buyer_name: str = None,
        cabin_type: int = None,
        direct_only: bool = None,
        isv_name: str = None,
        language: str = None,
        need_share_flight: bool = None,
        search_journeys_shrink: str = None,
        search_passenger_list_shrink: str = None,
        supplier_code: str = None,
        trip_type: int = None,
    ):
        self.btrip_user_id = btrip_user_id
        self.buyer_name = buyer_name
        # This parameter is required.
        self.cabin_type = cabin_type
        self.direct_only = direct_only
        self.isv_name = isv_name
        self.language = language
        self.need_share_flight = need_share_flight
        # This parameter is required.
        self.search_journeys_shrink = search_journeys_shrink
        self.search_passenger_list_shrink = search_passenger_list_shrink
        self.supplier_code = supplier_code
        # This parameter is required.
        self.trip_type = trip_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.buyer_name is not None:
            result['buyer_name'] = self.buyer_name
        if self.cabin_type is not None:
            result['cabin_type'] = self.cabin_type
        if self.direct_only is not None:
            result['direct_only'] = self.direct_only
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.language is not None:
            result['language'] = self.language
        if self.need_share_flight is not None:
            result['need_share_flight'] = self.need_share_flight
        if self.search_journeys_shrink is not None:
            result['search_journeys'] = self.search_journeys_shrink
        if self.search_passenger_list_shrink is not None:
            result['search_passenger_list'] = self.search_passenger_list_shrink
        if self.supplier_code is not None:
            result['supplier_code'] = self.supplier_code
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('buyer_name') is not None:
            self.buyer_name = m.get('buyer_name')
        if m.get('cabin_type') is not None:
            self.cabin_type = m.get('cabin_type')
        if m.get('direct_only') is not None:
            self.direct_only = m.get('direct_only')
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('need_share_flight') is not None:
            self.need_share_flight = m.get('need_share_flight')
        if m.get('search_journeys') is not None:
            self.search_journeys_shrink = m.get('search_journeys')
        if m.get('search_passenger_list') is not None:
            self.search_passenger_list_shrink = m.get('search_passenger_list')
        if m.get('supplier_code') is not None:
            self.supplier_code = m.get('supplier_code')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        return self


class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        airport_short_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.airport_short_name = airport_short_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.airport_short_name is not None:
            result['airport_short_name'] = self.airport_short_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('airport_short_name') is not None:
            self.airport_short_name = m.get('airport_short_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_chinese_name: str = None,
        airline_chinese_short_name: str = None,
        airline_code: str = None,
        airline_icon: str = None,
        cheap_flight: bool = None,
    ):
        self.airline_chinese_name = airline_chinese_name
        self.airline_chinese_short_name = airline_chinese_short_name
        self.airline_code = airline_code
        self.airline_icon = airline_icon
        self.cheap_flight = cheap_flight

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_chinese_name is not None:
            result['airline_chinese_name'] = self.airline_chinese_name
        if self.airline_chinese_short_name is not None:
            result['airline_chinese_short_name'] = self.airline_chinese_short_name
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_icon is not None:
            result['airline_icon'] = self.airline_icon
        if self.cheap_flight is not None:
            result['cheap_flight'] = self.cheap_flight
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_chinese_name') is not None:
            self.airline_chinese_name = m.get('airline_chinese_name')
        if m.get('airline_chinese_short_name') is not None:
            self.airline_chinese_short_name = m.get('airline_chinese_short_name')
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_icon') is not None:
            self.airline_icon = m.get('airline_icon')
        if m.get('cheap_flight') is not None:
            self.cheap_flight = m.get('cheap_flight')
        return self


class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo(TeaModel):
    def __init__(
        self,
        operating_airline_info: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo = None,
        operating_flight_no: str = None,
    ):
        self.operating_airline_info = operating_airline_info
        self.operating_flight_no = operating_flight_no

    def validate(self):
        if self.operating_airline_info:
            self.operating_airline_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.operating_airline_info is not None:
            result['operating_airline_info'] = self.operating_airline_info.to_map()
        if self.operating_flight_no is not None:
            result['operating_flight_no'] = self.operating_flight_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('operating_airline_info') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfoOperatingAirlineInfo()
            self.operating_airline_info = temp_model.from_map(m['operating_airline_info'])
        if m.get('operating_flight_no') is not None:
            self.operating_flight_no = m.get('operating_flight_no')
        return self


class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo(TeaModel):
    def __init__(
        self,
        stop_airport: str = None,
        stop_airport_name: str = None,
        stop_arr_term: str = None,
        stop_arr_time: str = None,
        stop_city_code: str = None,
        stop_city_name: str = None,
        stop_city_names: List[str] = None,
        stop_dep_term: str = None,
        stop_dep_time: str = None,
        stop_time: str = None,
    ):
        self.stop_airport = stop_airport
        self.stop_airport_name = stop_airport_name
        self.stop_arr_term = stop_arr_term
        self.stop_arr_time = stop_arr_time
        self.stop_city_code = stop_city_code
        self.stop_city_name = stop_city_name
        self.stop_city_names = stop_city_names
        self.stop_dep_term = stop_dep_term
        self.stop_dep_time = stop_dep_time
        self.stop_time = stop_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stop_airport is not None:
            result['stop_airport'] = self.stop_airport
        if self.stop_airport_name is not None:
            result['stop_airport_name'] = self.stop_airport_name
        if self.stop_arr_term is not None:
            result['stop_arr_term'] = self.stop_arr_term
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city_code is not None:
            result['stop_city_code'] = self.stop_city_code
        if self.stop_city_name is not None:
            result['stop_city_name'] = self.stop_city_name
        if self.stop_city_names is not None:
            result['stop_city_names'] = self.stop_city_names
        if self.stop_dep_term is not None:
            result['stop_dep_term'] = self.stop_dep_term
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.stop_time is not None:
            result['stop_time'] = self.stop_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stop_airport') is not None:
            self.stop_airport = m.get('stop_airport')
        if m.get('stop_airport_name') is not None:
            self.stop_airport_name = m.get('stop_airport_name')
        if m.get('stop_arr_term') is not None:
            self.stop_arr_term = m.get('stop_arr_term')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city_code') is not None:
            self.stop_city_code = m.get('stop_city_code')
        if m.get('stop_city_name') is not None:
            self.stop_city_name = m.get('stop_city_name')
        if m.get('stop_city_names') is not None:
            self.stop_city_names = m.get('stop_city_names')
        if m.get('stop_dep_term') is not None:
            self.stop_dep_term = m.get('stop_dep_term')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('stop_time') is not None:
            self.stop_time = m.get('stop_time')
        return self


class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo(TeaModel):
    def __init__(
        self,
        dep_city_luggage_direct: int = None,
        stop_city_luggage_direct: int = None,
    ):
        self.dep_city_luggage_direct = dep_city_luggage_direct
        self.stop_city_luggage_direct = stop_city_luggage_direct

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dep_city_luggage_direct is not None:
            result['dep_city_luggage_direct'] = self.dep_city_luggage_direct
        if self.stop_city_luggage_direct is not None:
            result['stop_city_luggage_direct'] = self.stop_city_luggage_direct
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dep_city_luggage_direct') is not None:
            self.dep_city_luggage_direct = m.get('dep_city_luggage_direct')
        if m.get('stop_city_luggage_direct') is not None:
            self.stop_city_luggage_direct = m.get('stop_city_luggage_direct')
        return self


class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark(TeaModel):
    def __init__(
        self,
        dep_city_visa_remark: str = None,
        dep_city_visa_type: int = None,
        stop_city_visa_remarks: List[str] = None,
        stop_city_visa_types: List[int] = None,
    ):
        self.dep_city_visa_remark = dep_city_visa_remark
        self.dep_city_visa_type = dep_city_visa_type
        self.stop_city_visa_remarks = stop_city_visa_remarks
        self.stop_city_visa_types = stop_city_visa_types

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dep_city_visa_remark is not None:
            result['dep_city_visa_remark'] = self.dep_city_visa_remark
        if self.dep_city_visa_type is not None:
            result['dep_city_visa_type'] = self.dep_city_visa_type
        if self.stop_city_visa_remarks is not None:
            result['stop_city_visa_remarks'] = self.stop_city_visa_remarks
        if self.stop_city_visa_types is not None:
            result['stop_city_visa_types'] = self.stop_city_visa_types
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dep_city_visa_remark') is not None:
            self.dep_city_visa_remark = m.get('dep_city_visa_remark')
        if m.get('dep_city_visa_type') is not None:
            self.dep_city_visa_type = m.get('dep_city_visa_type')
        if m.get('stop_city_visa_remarks') is not None:
            self.stop_city_visa_remarks = m.get('stop_city_visa_remarks')
        if m.get('stop_city_visa_types') is not None:
            self.stop_city_visa_types = m.get('stop_city_visa_types')
        return self


class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfos(TeaModel):
    def __init__(
        self,
        airline_info: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo = None,
        arr_airport_info: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        baggage_desc: str = None,
        dep_airport_info: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        duration: int = None,
        flight_no: str = None,
        flight_share_info: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo = None,
        flight_size: str = None,
        flight_stop_info: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo = None,
        flight_type: str = None,
        luggage_direct_info: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo = None,
        manufacturer: str = None,
        meal_desc: str = None,
        miles: int = None,
        on_time_rate: str = None,
        one_more: int = None,
        one_more_show: str = None,
        segment_index: int = None,
        segment_key: str = None,
        segment_visa_remark: IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark = None,
        share: bool = None,
        short_flight_size: str = None,
        stop: bool = None,
        total_time: str = None,
        transfer_time: str = None,
        transfer_time_number: int = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.baggage_desc = baggage_desc
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.duration = duration
        self.flight_no = flight_no
        self.flight_share_info = flight_share_info
        self.flight_size = flight_size
        self.flight_stop_info = flight_stop_info
        self.flight_type = flight_type
        self.luggage_direct_info = luggage_direct_info
        self.manufacturer = manufacturer
        self.meal_desc = meal_desc
        self.miles = miles
        self.on_time_rate = on_time_rate
        self.one_more = one_more
        self.one_more_show = one_more_show
        self.segment_index = segment_index
        self.segment_key = segment_key
        self.segment_visa_remark = segment_visa_remark
        self.share = share
        self.short_flight_size = short_flight_size
        self.stop = stop
        self.total_time = total_time
        self.transfer_time = transfer_time
        self.transfer_time_number = transfer_time_number

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.flight_share_info:
            self.flight_share_info.validate()
        if self.flight_stop_info:
            self.flight_stop_info.validate()
        if self.luggage_direct_info:
            self.luggage_direct_info.validate()
        if self.segment_visa_remark:
            self.segment_visa_remark.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_share_info is not None:
            result['flight_share_info'] = self.flight_share_info.to_map()
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_stop_info is not None:
            result['flight_stop_info'] = self.flight_stop_info.to_map()
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.luggage_direct_info is not None:
            result['luggage_direct_info'] = self.luggage_direct_info.to_map()
        if self.manufacturer is not None:
            result['manufacturer'] = self.manufacturer
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.miles is not None:
            result['miles'] = self.miles
        if self.on_time_rate is not None:
            result['on_time_rate'] = self.on_time_rate
        if self.one_more is not None:
            result['one_more'] = self.one_more
        if self.one_more_show is not None:
            result['one_more_show'] = self.one_more_show
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.segment_key is not None:
            result['segment_key'] = self.segment_key
        if self.segment_visa_remark is not None:
            result['segment_visa_remark'] = self.segment_visa_remark.to_map()
        if self.share is not None:
            result['share'] = self.share
        if self.short_flight_size is not None:
            result['short_flight_size'] = self.short_flight_size
        if self.stop is not None:
            result['stop'] = self.stop
        if self.total_time is not None:
            result['total_time'] = self.total_time
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        if self.transfer_time_number is not None:
            result['transfer_time_number'] = self.transfer_time_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('dep_airport_info') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_share_info') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightShareInfo()
            self.flight_share_info = temp_model.from_map(m['flight_share_info'])
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_stop_info') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosFlightStopInfo()
            self.flight_stop_info = temp_model.from_map(m['flight_stop_info'])
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('luggage_direct_info') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosLuggageDirectInfo()
            self.luggage_direct_info = temp_model.from_map(m['luggage_direct_info'])
        if m.get('manufacturer') is not None:
            self.manufacturer = m.get('manufacturer')
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('miles') is not None:
            self.miles = m.get('miles')
        if m.get('on_time_rate') is not None:
            self.on_time_rate = m.get('on_time_rate')
        if m.get('one_more') is not None:
            self.one_more = m.get('one_more')
        if m.get('one_more_show') is not None:
            self.one_more_show = m.get('one_more_show')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('segment_key') is not None:
            self.segment_key = m.get('segment_key')
        if m.get('segment_visa_remark') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfosSegmentVisaRemark()
            self.segment_visa_remark = temp_model.from_map(m['segment_visa_remark'])
        if m.get('share') is not None:
            self.share = m.get('share')
        if m.get('short_flight_size') is not None:
            self.short_flight_size = m.get('short_flight_size')
        if m.get('stop') is not None:
            self.stop = m.get('stop')
        if m.get('total_time') is not None:
            self.total_time = m.get('total_time')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        if m.get('transfer_time_number') is not None:
            self.transfer_time_number = m.get('transfer_time_number')
        return self


class IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfos(TeaModel):
    def __init__(
        self,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_time: str = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        dep_time: str = None,
        duration: int = None,
        flight_segment_infos: List[IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfos] = None,
        journey_index: int = None,
        transfer_time: int = None,
    ):
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_time = arr_time
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.dep_time = dep_time
        self.duration = duration
        self.flight_segment_infos = flight_segment_infos
        self.journey_index = journey_index
        self.transfer_time = transfer_time

    def validate(self):
        if self.flight_segment_infos:
            for k in self.flight_segment_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.duration is not None:
            result['duration'] = self.duration
        result['flight_segment_infos'] = []
        if self.flight_segment_infos is not None:
            for k in self.flight_segment_infos:
                result['flight_segment_infos'].append(k.to_map() if k else None)
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.transfer_time is not None:
            result['transfer_time'] = self.transfer_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('duration') is not None:
            self.duration = m.get('duration')
        self.flight_segment_infos = []
        if m.get('flight_segment_infos') is not None:
            for k in m.get('flight_segment_infos'):
                temp_model = IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfosFlightSegmentInfos()
                self.flight_segment_infos.append(temp_model.from_map(k))
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('transfer_time') is not None:
            self.transfer_time = m.get('transfer_time')
        return self


class IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListFlightRuleInfo(TeaModel):
    def __init__(
        self,
        baggage_desc: str = None,
        refund_change_rule_desc: str = None,
    ):
        self.baggage_desc = baggage_desc
        self.refund_change_rule_desc = refund_change_rule_desc

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.refund_change_rule_desc is not None:
            result['refund_change_rule_desc'] = self.refund_change_rule_desc
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('refund_change_rule_desc') is not None:
            self.refund_change_rule_desc = m.get('refund_change_rule_desc')
        return self


class IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoList(TeaModel):
    def __init__(
        self,
        flight_rule_info: IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListFlightRuleInfo = None,
        segment_position: IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListSegmentPosition = None,
    ):
        self.flight_rule_info = flight_rule_info
        self.segment_position = segment_position

    def validate(self):
        if self.flight_rule_info:
            self.flight_rule_info.validate()
        if self.segment_position:
            self.segment_position.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.flight_rule_info is not None:
            result['flight_rule_info'] = self.flight_rule_info.to_map()
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('flight_rule_info') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListFlightRuleInfo()
            self.flight_rule_info = temp_model.from_map(m['flight_rule_info'])
        if m.get('segment_position') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        return self


class IntlFlightOtaSearchResponseBodyModuleItemListSubItemsBaggageRule(TeaModel):
    def __init__(
        self,
        baggage_digest: str = None,
        baggage_info_map: Dict[str, List[ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue]] = None,
        structured_baggage: bool = None,
    ):
        self.baggage_digest = baggage_digest
        self.baggage_info_map = baggage_info_map
        self.structured_baggage = structured_baggage

    def validate(self):
        if self.baggage_info_map:
            for v in self.baggage_info_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_digest is not None:
            result['baggage_digest'] = self.baggage_digest
        result['baggage_info_map'] = {}
        if self.baggage_info_map is not None:
            for k, v in self.baggage_info_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['baggage_info_map'][k] = l1
        if self.structured_baggage is not None:
            result['structured_baggage'] = self.structured_baggage
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_digest') is not None:
            self.baggage_digest = m.get('baggage_digest')
        self.baggage_info_map = {}
        if m.get('baggage_info_map') is not None:
            for k, v in m.get('baggage_info_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleItemListSubItemsBaggageRuleBaggageInfoMapValue()
                    l1.append(temp_model.from_map(k1))
                self.baggage_info_map['k'] = l1
        if m.get('structured_baggage') is not None:
            self.structured_baggage = m.get('structured_baggage')
        return self


class IntlFlightOtaSearchResponseBodyModuleItemListSubItemsRefundChangeRule(TeaModel):
    def __init__(
        self,
        cancel_fee_ind: bool = None,
        change_fee_ind: bool = None,
        offer_penalty_info_map: Dict[str, List[ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue]] = None,
        refund_change_digest: str = None,
        structured_refund: bool = None,
    ):
        self.cancel_fee_ind = cancel_fee_ind
        self.change_fee_ind = change_fee_ind
        self.offer_penalty_info_map = offer_penalty_info_map
        self.refund_change_digest = refund_change_digest
        self.structured_refund = structured_refund

    def validate(self):
        if self.offer_penalty_info_map:
            for v in self.offer_penalty_info_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_fee_ind is not None:
            result['cancel_fee_ind'] = self.cancel_fee_ind
        if self.change_fee_ind is not None:
            result['change_fee_ind'] = self.change_fee_ind
        result['offer_penalty_info_map'] = {}
        if self.offer_penalty_info_map is not None:
            for k, v in self.offer_penalty_info_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['offer_penalty_info_map'][k] = l1
        if self.refund_change_digest is not None:
            result['refund_change_digest'] = self.refund_change_digest
        if self.structured_refund is not None:
            result['structured_refund'] = self.structured_refund
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_fee_ind') is not None:
            self.cancel_fee_ind = m.get('cancel_fee_ind')
        if m.get('change_fee_ind') is not None:
            self.change_fee_ind = m.get('change_fee_ind')
        self.offer_penalty_info_map = {}
        if m.get('offer_penalty_info_map') is not None:
            for k, v in m.get('offer_penalty_info_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleItemListSubItemsRefundChangeRuleOfferPenaltyInfoMapValue()
                    l1.append(temp_model.from_map(k1))
                self.offer_penalty_info_map['k'] = l1
        if m.get('refund_change_digest') is not None:
            self.refund_change_digest = m.get('refund_change_digest')
        if m.get('structured_refund') is not None:
            self.structured_refund = m.get('structured_refund')
        return self


class IntlFlightOtaSearchResponseBodyModuleItemListSubItems(TeaModel):
    def __init__(
        self,
        baggage_rule: IntlFlightOtaSearchResponseBodyModuleItemListSubItemsBaggageRule = None,
        refund_change_rule: IntlFlightOtaSearchResponseBodyModuleItemListSubItemsRefundChangeRule = None,
        segment_keys: List[str] = None,
        shopping_item_map: Dict[str, ModuleItemListSubItemsShoppingItemMapValue] = None,
        uniq_key: str = None,
    ):
        self.baggage_rule = baggage_rule
        self.refund_change_rule = refund_change_rule
        self.segment_keys = segment_keys
        self.shopping_item_map = shopping_item_map
        self.uniq_key = uniq_key

    def validate(self):
        if self.baggage_rule:
            self.baggage_rule.validate()
        if self.refund_change_rule:
            self.refund_change_rule.validate()
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_rule is not None:
            result['baggage_rule'] = self.baggage_rule.to_map()
        if self.refund_change_rule is not None:
            result['refund_change_rule'] = self.refund_change_rule.to_map()
        if self.segment_keys is not None:
            result['segment_keys'] = self.segment_keys
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        if self.uniq_key is not None:
            result['uniq_key'] = self.uniq_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_rule') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleItemListSubItemsBaggageRule()
            self.baggage_rule = temp_model.from_map(m['baggage_rule'])
        if m.get('refund_change_rule') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModuleItemListSubItemsRefundChangeRule()
            self.refund_change_rule = temp_model.from_map(m['refund_change_rule'])
        if m.get('segment_keys') is not None:
            self.segment_keys = m.get('segment_keys')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleItemListSubItemsShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        if m.get('uniq_key') is not None:
            self.uniq_key = m.get('uniq_key')
        return self


class IntlFlightOtaSearchResponseBodyModuleItemList(TeaModel):
    def __init__(
        self,
        agreement_price_codes: List[str] = None,
        flight_rule_info_list: List[IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoList] = None,
        item_id: str = None,
        item_type: str = None,
        shopping_item_map: Dict[str, ModuleItemListShoppingItemMapValue] = None,
        sub_item_position_map: Dict[str, List[ModuleItemListSubItemPositionMapValue]] = None,
        sub_items: List[IntlFlightOtaSearchResponseBodyModuleItemListSubItems] = None,
    ):
        self.agreement_price_codes = agreement_price_codes
        self.flight_rule_info_list = flight_rule_info_list
        self.item_id = item_id
        self.item_type = item_type
        self.shopping_item_map = shopping_item_map
        self.sub_item_position_map = sub_item_position_map
        self.sub_items = sub_items

    def validate(self):
        if self.flight_rule_info_list:
            for k in self.flight_rule_info_list:
                if k:
                    k.validate()
        if self.shopping_item_map:
            for v in self.shopping_item_map.values():
                if v:
                    v.validate()
        if self.sub_item_position_map:
            for v in self.sub_item_position_map.values():
                for k1 in v:
                    if k1:
                        k1.validate()
        if self.sub_items:
            for k in self.sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.agreement_price_codes is not None:
            result['agreement_price_codes'] = self.agreement_price_codes
        result['flight_rule_info_list'] = []
        if self.flight_rule_info_list is not None:
            for k in self.flight_rule_info_list:
                result['flight_rule_info_list'].append(k.to_map() if k else None)
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.item_type is not None:
            result['item_type'] = self.item_type
        result['shopping_item_map'] = {}
        if self.shopping_item_map is not None:
            for k, v in self.shopping_item_map.items():
                result['shopping_item_map'][k] = v.to_map()
        result['sub_item_position_map'] = {}
        if self.sub_item_position_map is not None:
            for k, v in self.sub_item_position_map.items():
                l1 = []
                for k1 in v:
                    l1.append(k1.to_map() if k1 else None)
                result['sub_item_position_map'][k] = l1
        result['sub_items'] = []
        if self.sub_items is not None:
            for k in self.sub_items:
                result['sub_items'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('agreement_price_codes') is not None:
            self.agreement_price_codes = m.get('agreement_price_codes')
        self.flight_rule_info_list = []
        if m.get('flight_rule_info_list') is not None:
            for k in m.get('flight_rule_info_list'):
                temp_model = IntlFlightOtaSearchResponseBodyModuleItemListFlightRuleInfoList()
                self.flight_rule_info_list.append(temp_model.from_map(k))
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('item_type') is not None:
            self.item_type = m.get('item_type')
        self.shopping_item_map = {}
        if m.get('shopping_item_map') is not None:
            for k, v in m.get('shopping_item_map').items():
                temp_model = ModuleItemListShoppingItemMapValue()
                self.shopping_item_map[k] = temp_model.from_map(v)
        self.sub_item_position_map = {}
        if m.get('sub_item_position_map') is not None:
            for k, v in m.get('sub_item_position_map').items():
                l1 = []
                for k1 in v:
                    temp_model = ModuleItemListSubItemPositionMapValue()
                    l1.append(temp_model.from_map(k1))
                self.sub_item_position_map['k'] = l1
        self.sub_items = []
        if m.get('sub_items') is not None:
            for k in m.get('sub_items'):
                temp_model = IntlFlightOtaSearchResponseBodyModuleItemListSubItems()
                self.sub_items.append(temp_model.from_map(k))
        return self


class IntlFlightOtaSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_journey_infos: List[IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfos] = None,
        item_list: List[IntlFlightOtaSearchResponseBodyModuleItemList] = None,
    ):
        self.flight_journey_infos = flight_journey_infos
        self.item_list = item_list

    def validate(self):
        if self.flight_journey_infos:
            for k in self.flight_journey_infos:
                if k:
                    k.validate()
        if self.item_list:
            for k in self.item_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_journey_infos'] = []
        if self.flight_journey_infos is not None:
            for k in self.flight_journey_infos:
                result['flight_journey_infos'].append(k.to_map() if k else None)
        result['item_list'] = []
        if self.item_list is not None:
            for k in self.item_list:
                result['item_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_journey_infos = []
        if m.get('flight_journey_infos') is not None:
            for k in m.get('flight_journey_infos'):
                temp_model = IntlFlightOtaSearchResponseBodyModuleFlightJourneyInfos()
                self.flight_journey_infos.append(temp_model.from_map(k))
        self.item_list = []
        if m.get('item_list') is not None:
            for k in m.get('item_list'):
                temp_model = IntlFlightOtaSearchResponseBodyModuleItemList()
                self.item_list.append(temp_model.from_map(k))
        return self


class IntlFlightOtaSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: IntlFlightOtaSearchResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = IntlFlightOtaSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IntlFlightOtaSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IntlFlightOtaSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IntlFlightOtaSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IntlFlightSegmentAvailableCertHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class IntlFlightSegmentAvailableCertRequest(TeaModel):
    def __init__(
        self,
        isv_name: str = None,
        language: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.isv_name = isv_name
        self.language = language
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.isv_name is not None:
            result['isv_name'] = self.isv_name
        if self.language is not None:
            result['language'] = self.language
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('isv_name') is not None:
            self.isv_name = m.get('isv_name')
        if m.get('language') is not None:
            self.language = m.get('language')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertListSegmentPosition(TeaModel):
    def __init__(
        self,
        journey_index: int = None,
        segment_index: int = None,
    ):
        self.journey_index = journey_index
        self.segment_index = segment_index

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.journey_index is not None:
            result['journey_index'] = self.journey_index
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('journey_index') is not None:
            self.journey_index = m.get('journey_index')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        return self


class IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertList(TeaModel):
    def __init__(
        self,
        cert_types: List[int] = None,
        segment_position: IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertListSegmentPosition = None,
    ):
        self.cert_types = cert_types
        self.segment_position = segment_position

    def validate(self):
        if self.segment_position:
            self.segment_position.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_types is not None:
            result['cert_types'] = self.cert_types
        if self.segment_position is not None:
            result['segment_position'] = self.segment_position.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_types') is not None:
            self.cert_types = m.get('cert_types')
        if m.get('segment_position') is not None:
            temp_model = IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertListSegmentPosition()
            self.segment_position = temp_model.from_map(m['segment_position'])
        return self


class IntlFlightSegmentAvailableCertResponseBodyModule(TeaModel):
    def __init__(
        self,
        segment_available_cert_list: List[IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertList] = None,
    ):
        self.segment_available_cert_list = segment_available_cert_list

    def validate(self):
        if self.segment_available_cert_list:
            for k in self.segment_available_cert_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['segment_available_cert_list'] = []
        if self.segment_available_cert_list is not None:
            for k in self.segment_available_cert_list:
                result['segment_available_cert_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.segment_available_cert_list = []
        if m.get('segment_available_cert_list') is not None:
            for k in m.get('segment_available_cert_list'):
                temp_model = IntlFlightSegmentAvailableCertResponseBodyModuleSegmentAvailableCertList()
                self.segment_available_cert_list.append(temp_model.from_map(k))
        return self


class IntlFlightSegmentAvailableCertResponseBody(TeaModel):
    def __init__(
        self,
        module: IntlFlightSegmentAvailableCertResponseBodyModule = None,
        request_id: str = None,
        result_code: str = None,
        result_msg: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.module = module
        self.request_id = request_id
        self.result_code = result_code
        self.result_msg = result_msg
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.result_code is not None:
            result['result_code'] = self.result_code
        if self.result_msg is not None:
            result['result_msg'] = self.result_msg
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('module') is not None:
            temp_model = IntlFlightSegmentAvailableCertResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('result_code') is not None:
            self.result_code = m.get('result_code')
        if m.get('result_msg') is not None:
            self.result_msg = m.get('result_msg')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IntlFlightSegmentAvailableCertResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IntlFlightSegmentAvailableCertResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IntlFlightSegmentAvailableCertResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceAddHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InvoiceAddRequest(TeaModel):
    def __init__(
        self,
        address: str = None,
        bank_name: str = None,
        bank_no: str = None,
        tax_no: str = None,
        tel: str = None,
        third_part_id: str = None,
        title: str = None,
        type: int = None,
        unit_type: int = None,
    ):
        self.address = address
        self.bank_name = bank_name
        self.bank_no = bank_no
        self.tax_no = tax_no
        self.tel = tel
        # This parameter is required.
        self.third_part_id = third_part_id
        # This parameter is required.
        self.title = title
        # This parameter is required.
        self.type = type
        self.unit_type = unit_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.bank_name is not None:
            result['bank_name'] = self.bank_name
        if self.bank_no is not None:
            result['bank_no'] = self.bank_no
        if self.tax_no is not None:
            result['tax_no'] = self.tax_no
        if self.tel is not None:
            result['tel'] = self.tel
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.unit_type is not None:
            result['unit_type'] = self.unit_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('bank_name') is not None:
            self.bank_name = m.get('bank_name')
        if m.get('bank_no') is not None:
            self.bank_no = m.get('bank_no')
        if m.get('tax_no') is not None:
            self.tax_no = m.get('tax_no')
        if m.get('tel') is not None:
            self.tel = m.get('tel')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('unit_type') is not None:
            self.unit_type = m.get('unit_type')
        return self


class InvoiceAddResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceAddResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InvoiceAddResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceDeleteHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InvoiceDeleteRequest(TeaModel):
    def __init__(
        self,
        third_part_id: str = None,
    ):
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceDeleteResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceDeleteResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InvoiceDeleteResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceModifyHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InvoiceModifyRequest(TeaModel):
    def __init__(
        self,
        address: str = None,
        bank_name: str = None,
        bank_no: str = None,
        tax_no: str = None,
        tel: str = None,
        third_part_id: str = None,
        title: str = None,
        type: int = None,
        unit_type: int = None,
    ):
        self.address = address
        self.bank_name = bank_name
        self.bank_no = bank_no
        self.tax_no = tax_no
        self.tel = tel
        # This parameter is required.
        self.third_part_id = third_part_id
        # This parameter is required.
        self.title = title
        # This parameter is required.
        self.type = type
        self.unit_type = unit_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.address is not None:
            result['address'] = self.address
        if self.bank_name is not None:
            result['bank_name'] = self.bank_name
        if self.bank_no is not None:
            result['bank_no'] = self.bank_no
        if self.tax_no is not None:
            result['tax_no'] = self.tax_no
        if self.tel is not None:
            result['tel'] = self.tel
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        if self.unit_type is not None:
            result['unit_type'] = self.unit_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('address') is not None:
            self.address = m.get('address')
        if m.get('bank_name') is not None:
            self.bank_name = m.get('bank_name')
        if m.get('bank_no') is not None:
            self.bank_no = m.get('bank_no')
        if m.get('tax_no') is not None:
            self.tax_no = m.get('tax_no')
        if m.get('tel') is not None:
            self.tel = m.get('tel')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('unit_type') is not None:
            self.unit_type = m.get('unit_type')
        return self


class InvoiceModifyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceModifyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InvoiceModifyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceModifyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceRuleAddHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InvoiceRuleAddRequestEntities(TeaModel):
    def __init__(
        self,
        entity_id: str = None,
        entity_name: str = None,
        entity_type: str = None,
    ):
        # This parameter is required.
        self.entity_id = entity_id
        # This parameter is required.
        self.entity_name = entity_name
        # This parameter is required.
        self.entity_type = entity_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_name is not None:
            result['entity_name'] = self.entity_name
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_name') is not None:
            self.entity_name = m.get('entity_name')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class InvoiceRuleAddRequest(TeaModel):
    def __init__(
        self,
        entities: List[InvoiceRuleAddRequestEntities] = None,
        third_part_id: str = None,
    ):
        # This parameter is required.
        self.entities = entities
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        if self.entities:
            for k in self.entities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['entities'] = []
        if self.entities is not None:
            for k in self.entities:
                result['entities'].append(k.to_map() if k else None)
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.entities = []
        if m.get('entities') is not None:
            for k in m.get('entities'):
                temp_model = InvoiceRuleAddRequestEntities()
                self.entities.append(temp_model.from_map(k))
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleAddShrinkRequest(TeaModel):
    def __init__(
        self,
        entities_shrink: str = None,
        third_part_id: str = None,
    ):
        # This parameter is required.
        self.entities_shrink = entities_shrink
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entities_shrink is not None:
            result['entities'] = self.entities_shrink
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entities') is not None:
            self.entities_shrink = m.get('entities')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleAddResponseBodyModule(TeaModel):
    def __init__(
        self,
        add_num: int = None,
        selected_user_num: int = None,
    ):
        self.add_num = add_num
        self.selected_user_num = selected_user_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_num is not None:
            result['add_num'] = self.add_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('add_num') is not None:
            self.add_num = m.get('add_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class InvoiceRuleAddResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: InvoiceRuleAddResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InvoiceRuleAddResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceRuleAddResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InvoiceRuleAddResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceRuleAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceRuleDeleteHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class InvoiceRuleDeleteRequestEntities(TeaModel):
    def __init__(
        self,
        entity_id: str = None,
        entity_type: str = None,
    ):
        self.entity_id = entity_id
        self.entity_type = entity_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class InvoiceRuleDeleteRequest(TeaModel):
    def __init__(
        self,
        del_all: bool = None,
        entities: List[InvoiceRuleDeleteRequestEntities] = None,
        third_part_id: str = None,
    ):
        self.del_all = del_all
        self.entities = entities
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        if self.entities:
            for k in self.entities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        result['entities'] = []
        if self.entities is not None:
            for k in self.entities:
                result['entities'].append(k.to_map() if k else None)
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        self.entities = []
        if m.get('entities') is not None:
            for k in m.get('entities'):
                temp_model = InvoiceRuleDeleteRequestEntities()
                self.entities.append(temp_model.from_map(k))
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleDeleteShrinkRequest(TeaModel):
    def __init__(
        self,
        del_all: bool = None,
        entities_shrink: str = None,
        third_part_id: str = None,
    ):
        self.del_all = del_all
        self.entities_shrink = entities_shrink
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_all is not None:
            result['del_all'] = self.del_all
        if self.entities_shrink is not None:
            result['entities'] = self.entities_shrink
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('del_all') is not None:
            self.del_all = m.get('del_all')
        if m.get('entities') is not None:
            self.entities_shrink = m.get('entities')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleDeleteResponseBodyModule(TeaModel):
    def __init__(
        self,
        remove_num: int = None,
        selected_user_num: int = None,
    ):
        self.remove_num = remove_num
        self.selected_user_num = selected_user_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.remove_num is not None:
            result['remove_num'] = self.remove_num
        if self.selected_user_num is not None:
            result['selected_user_num'] = self.selected_user_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('remove_num') is not None:
            self.remove_num = m.get('remove_num')
        if m.get('selected_user_num') is not None:
            self.selected_user_num = m.get('selected_user_num')
        return self


class InvoiceRuleDeleteResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: InvoiceRuleDeleteResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InvoiceRuleDeleteResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceRuleDeleteResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InvoiceRuleDeleteResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceRuleDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceRuleSaveHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InvoiceRuleSaveRequestEntities(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        type: int = None,
    ):
        self.id = id
        self.name = name
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class InvoiceRuleSaveRequest(TeaModel):
    def __init__(
        self,
        all_employe: bool = None,
        entities: List[InvoiceRuleSaveRequestEntities] = None,
        scope: int = None,
        third_part_id: str = None,
    ):
        self.all_employe = all_employe
        self.entities = entities
        self.scope = scope
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        if self.entities:
            for k in self.entities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_employe is not None:
            result['all_employe'] = self.all_employe
        result['entities'] = []
        if self.entities is not None:
            for k in self.entities:
                result['entities'].append(k.to_map() if k else None)
        if self.scope is not None:
            result['scope'] = self.scope
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('all_employe') is not None:
            self.all_employe = m.get('all_employe')
        self.entities = []
        if m.get('entities') is not None:
            for k in m.get('entities'):
                temp_model = InvoiceRuleSaveRequestEntities()
                self.entities.append(temp_model.from_map(k))
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleSaveShrinkRequest(TeaModel):
    def __init__(
        self,
        all_employe: bool = None,
        entities_shrink: str = None,
        scope: int = None,
        third_part_id: str = None,
    ):
        self.all_employe = all_employe
        self.entities_shrink = entities_shrink
        self.scope = scope
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_employe is not None:
            result['all_employe'] = self.all_employe
        if self.entities_shrink is not None:
            result['entities'] = self.entities_shrink
        if self.scope is not None:
            result['scope'] = self.scope
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('all_employe') is not None:
            self.all_employe = m.get('all_employe')
        if m.get('entities') is not None:
            self.entities_shrink = m.get('entities')
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class InvoiceRuleSaveResponseBodyModule(TeaModel):
    def __init__(
        self,
        add_num: int = None,
        remove_num: int = None,
    ):
        self.add_num = add_num
        self.remove_num = remove_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_num is not None:
            result['add_num'] = self.add_num
        if self.remove_num is not None:
            result['remove_num'] = self.remove_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('add_num') is not None:
            self.add_num = m.get('add_num')
        if m.get('remove_num') is not None:
            self.remove_num = m.get('remove_num')
        return self


class InvoiceRuleSaveResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: InvoiceRuleSaveResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = InvoiceRuleSaveResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceRuleSaveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InvoiceRuleSaveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceRuleSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvoiceSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class InvoiceSearchRequest(TeaModel):
    def __init__(
        self,
        third_part_id: str = None,
        title: str = None,
        user_id: str = None,
    ):
        self.third_part_id = third_part_id
        self.title = title
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        if self.title is not None:
            result['title'] = self.title
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class InvoiceSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        id: int = None,
        third_part_invoice_id: str = None,
        title: str = None,
    ):
        # ID
        self.id = id
        self.third_part_invoice_id = third_part_invoice_id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class InvoiceSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[InvoiceSearchResponseBodyModule] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = InvoiceSearchResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class InvoiceSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: InvoiceSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = InvoiceSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IsvRuleSaveHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class IsvRuleSaveRequestBookuserList(TeaModel):
    def __init__(
        self,
        entity_id: str = None,
        entity_type: int = None,
    ):
        # This parameter is required.
        self.entity_id = entity_id
        # This parameter is required.
        self.entity_type = entity_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.entity_id is not None:
            result['entity_id'] = self.entity_id
        if self.entity_type is not None:
            result['entity_type'] = self.entity_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('entity_id') is not None:
            self.entity_id = m.get('entity_id')
        if m.get('entity_type') is not None:
            self.entity_type = m.get('entity_type')
        return self


class IsvRuleSaveRequest(TeaModel):
    def __init__(
        self,
        apply_need: bool = None,
        book_type: str = None,
        bookuser_list: List[IsvRuleSaveRequestBookuserList] = None,
        rule_need: bool = None,
        status: int = None,
        user_id: str = None,
    ):
        self.apply_need = apply_need
        # This parameter is required.
        self.book_type = book_type
        self.bookuser_list = bookuser_list
        self.rule_need = rule_need
        # This parameter is required.
        self.status = status
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        if self.bookuser_list:
            for k in self.bookuser_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_need is not None:
            result['apply_need'] = self.apply_need
        if self.book_type is not None:
            result['book_type'] = self.book_type
        result['bookuser_list'] = []
        if self.bookuser_list is not None:
            for k in self.bookuser_list:
                result['bookuser_list'].append(k.to_map() if k else None)
        if self.rule_need is not None:
            result['rule_need'] = self.rule_need
        if self.status is not None:
            result['status'] = self.status
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_need') is not None:
            self.apply_need = m.get('apply_need')
        if m.get('book_type') is not None:
            self.book_type = m.get('book_type')
        self.bookuser_list = []
        if m.get('bookuser_list') is not None:
            for k in m.get('bookuser_list'):
                temp_model = IsvRuleSaveRequestBookuserList()
                self.bookuser_list.append(temp_model.from_map(k))
        if m.get('rule_need') is not None:
            self.rule_need = m.get('rule_need')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class IsvRuleSaveShrinkRequest(TeaModel):
    def __init__(
        self,
        apply_need: bool = None,
        book_type: str = None,
        bookuser_list_shrink: str = None,
        rule_need: bool = None,
        status: int = None,
        user_id: str = None,
    ):
        self.apply_need = apply_need
        # This parameter is required.
        self.book_type = book_type
        self.bookuser_list_shrink = bookuser_list_shrink
        self.rule_need = rule_need
        # This parameter is required.
        self.status = status
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_need is not None:
            result['apply_need'] = self.apply_need
        if self.book_type is not None:
            result['book_type'] = self.book_type
        if self.bookuser_list_shrink is not None:
            result['bookuser_list'] = self.bookuser_list_shrink
        if self.rule_need is not None:
            result['rule_need'] = self.rule_need
        if self.status is not None:
            result['status'] = self.status
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_need') is not None:
            self.apply_need = m.get('apply_need')
        if m.get('book_type') is not None:
            self.book_type = m.get('book_type')
        if m.get('bookuser_list') is not None:
            self.bookuser_list_shrink = m.get('bookuser_list')
        if m.get('rule_need') is not None:
            self.rule_need = m.get('rule_need')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class IsvRuleSaveResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IsvRuleSaveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IsvRuleSaveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IsvRuleSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class IsvUserSaveHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class IsvUserSaveRequestUserListCertList(TeaModel):
    def __init__(
        self,
        cert_expired_time: str = None,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        nationality: str = None,
    ):
        self.cert_expired_time = cert_expired_time
        self.cert_nation = cert_nation
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.nationality = nationality

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cert_expired_time is not None:
            result['cert_expired_time'] = self.cert_expired_time
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.nationality is not None:
            result['nationality'] = self.nationality
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cert_expired_time') is not None:
            self.cert_expired_time = m.get('cert_expired_time')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        return self


class IsvUserSaveRequestUserList(TeaModel):
    def __init__(
        self,
        base_city_code: str = None,
        birthday: str = None,
        cert_list: List[IsvUserSaveRequestUserListCertList] = None,
        depart_id: int = None,
        email: str = None,
        gender: str = None,
        is_admin: bool = None,
        job_no: str = None,
        leave_status: int = None,
        manager_user_id: str = None,
        phone: str = None,
        position: str = None,
        position_level: str = None,
        real_name_en: str = None,
        role_id_list: List[str] = None,
        third_depart_id: str = None,
        third_depart_id_list: List[str] = None,
        user_id: str = None,
        user_name: str = None,
        user_nick: str = None,
    ):
        self.base_city_code = base_city_code
        self.birthday = birthday
        self.cert_list = cert_list
        self.depart_id = depart_id
        self.email = email
        self.gender = gender
        self.is_admin = is_admin
        self.job_no = job_no
        self.leave_status = leave_status
        self.manager_user_id = manager_user_id
        self.phone = phone
        self.position = position
        self.position_level = position_level
        self.real_name_en = real_name_en
        self.role_id_list = role_id_list
        self.third_depart_id = third_depart_id
        self.third_depart_id_list = third_depart_id_list
        # This parameter is required.
        self.user_id = user_id
        # This parameter is required.
        self.user_name = user_name
        self.user_nick = user_nick

    def validate(self):
        if self.cert_list:
            for k in self.cert_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.base_city_code is not None:
            result['base_city_code'] = self.base_city_code
        if self.birthday is not None:
            result['birthday'] = self.birthday
        result['cert_list'] = []
        if self.cert_list is not None:
            for k in self.cert_list:
                result['cert_list'].append(k.to_map() if k else None)
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.email is not None:
            result['email'] = self.email
        if self.gender is not None:
            result['gender'] = self.gender
        if self.is_admin is not None:
            result['is_admin'] = self.is_admin
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.leave_status is not None:
            result['leave_status'] = self.leave_status
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.position is not None:
            result['position'] = self.position
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.role_id_list is not None:
            result['role_id_list'] = self.role_id_list
        if self.third_depart_id is not None:
            result['third_depart_id'] = self.third_depart_id
        if self.third_depart_id_list is not None:
            result['third_depart_id_list'] = self.third_depart_id_list
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_nick is not None:
            result['user_nick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('base_city_code') is not None:
            self.base_city_code = m.get('base_city_code')
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        self.cert_list = []
        if m.get('cert_list') is not None:
            for k in m.get('cert_list'):
                temp_model = IsvUserSaveRequestUserListCertList()
                self.cert_list.append(temp_model.from_map(k))
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('is_admin') is not None:
            self.is_admin = m.get('is_admin')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('leave_status') is not None:
            self.leave_status = m.get('leave_status')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('position') is not None:
            self.position = m.get('position')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('role_id_list') is not None:
            self.role_id_list = m.get('role_id_list')
        if m.get('third_depart_id') is not None:
            self.third_depart_id = m.get('third_depart_id')
        if m.get('third_depart_id_list') is not None:
            self.third_depart_id_list = m.get('third_depart_id_list')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_nick') is not None:
            self.user_nick = m.get('user_nick')
        return self


class IsvUserSaveRequest(TeaModel):
    def __init__(
        self,
        user_list: List[IsvUserSaveRequestUserList] = None,
    ):
        self.user_list = user_list

    def validate(self):
        if self.user_list:
            for k in self.user_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['user_list'] = []
        if self.user_list is not None:
            for k in self.user_list:
                result['user_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.user_list = []
        if m.get('user_list') is not None:
            for k in m.get('user_list'):
                temp_model = IsvUserSaveRequestUserList()
                self.user_list.append(temp_model.from_map(k))
        return self


class IsvUserSaveShrinkRequest(TeaModel):
    def __init__(
        self,
        user_list_shrink: str = None,
    ):
        self.user_list_shrink = user_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_list_shrink is not None:
            result['user_list'] = self.user_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('user_list') is not None:
            self.user_list_shrink = m.get('user_list')
        return self


class IsvUserSaveResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class IsvUserSaveResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: IsvUserSaveResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = IsvUserSaveResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MealBillSettlementQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class MealBillSettlementQueryRequest(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        period_end: str = None,
        period_start: str = None,
    ):
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.period_end = period_end
        # This parameter is required.
        self.period_start = period_start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class MealBillSettlementQueryResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        apply_extend_field: str = None,
        apply_id: str = None,
        bill_record_time: str = None,
        book_time: str = None,
        booker_id: str = None,
        booker_job_no: str = None,
        booker_name: str = None,
        capital_direction: str = None,
        cascade_department: str = None,
        consume_report_address: str = None,
        consume_report_city: str = None,
        consume_report_city_code: str = None,
        consumer_scene: str = None,
        corp_settle_fee: float = None,
        cost_center: str = None,
        cost_center_number: str = None,
        department: str = None,
        department_id: str = None,
        fee_type: str = None,
        index: str = None,
        invoice_title: str = None,
        main_apply_id: str = None,
        meal_address: str = None,
        meal_city: str = None,
        meal_city_code: str = None,
        meal_rule: str = None,
        meal_scene: str = None,
        merchant_category: str = None,
        merchant_name: str = None,
        order_id: str = None,
        order_price: float = None,
        order_status_desc: str = None,
        person_settle_price: float = None,
        primary_id: int = None,
        project_code: str = None,
        project_name: str = None,
        remark: str = None,
        service_fee: float = None,
        settlement_fee: float = None,
        settlement_time: str = None,
        settlement_type: str = None,
        share_dinner: str = None,
        status: int = None,
        store_address: str = None,
        tax_rate: str = None,
        third_invoice_id: str = None,
        third_part_business_id: str = None,
        thirdpart_apply_id: str = None,
        traveler_id: str = None,
        traveler_job_no: str = None,
        traveler_member_type_name: str = None,
        traveler_name: str = None,
        voucher_type: int = None,
    ):
        self.apply_extend_field = apply_extend_field
        self.apply_id = apply_id
        self.bill_record_time = bill_record_time
        self.book_time = book_time
        self.booker_id = booker_id
        self.booker_job_no = booker_job_no
        self.booker_name = booker_name
        self.capital_direction = capital_direction
        self.cascade_department = cascade_department
        self.consume_report_address = consume_report_address
        self.consume_report_city = consume_report_city
        self.consume_report_city_code = consume_report_city_code
        self.consumer_scene = consumer_scene
        self.corp_settle_fee = corp_settle_fee
        self.cost_center = cost_center
        self.cost_center_number = cost_center_number
        self.department = department
        self.department_id = department_id
        self.fee_type = fee_type
        self.index = index
        self.invoice_title = invoice_title
        self.main_apply_id = main_apply_id
        self.meal_address = meal_address
        self.meal_city = meal_city
        self.meal_city_code = meal_city_code
        self.meal_rule = meal_rule
        self.meal_scene = meal_scene
        self.merchant_category = merchant_category
        self.merchant_name = merchant_name
        self.order_id = order_id
        self.order_price = order_price
        self.order_status_desc = order_status_desc
        self.person_settle_price = person_settle_price
        self.primary_id = primary_id
        self.project_code = project_code
        self.project_name = project_name
        self.remark = remark
        self.service_fee = service_fee
        self.settlement_fee = settlement_fee
        self.settlement_time = settlement_time
        self.settlement_type = settlement_type
        self.share_dinner = share_dinner
        self.status = status
        self.store_address = store_address
        self.tax_rate = tax_rate
        self.third_invoice_id = third_invoice_id
        self.third_part_business_id = third_part_business_id
        self.thirdpart_apply_id = thirdpart_apply_id
        self.traveler_id = traveler_id
        self.traveler_job_no = traveler_job_no
        self.traveler_member_type_name = traveler_member_type_name
        self.traveler_name = traveler_name
        self.voucher_type = voucher_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.consume_report_address is not None:
            result['consume_report_address'] = self.consume_report_address
        if self.consume_report_city is not None:
            result['consume_report_city'] = self.consume_report_city
        if self.consume_report_city_code is not None:
            result['consume_report_city_code'] = self.consume_report_city_code
        if self.consumer_scene is not None:
            result['consumer_scene'] = self.consumer_scene
        if self.corp_settle_fee is not None:
            result['corp_settle_fee'] = self.corp_settle_fee
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.index is not None:
            result['index'] = self.index
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.main_apply_id is not None:
            result['main_apply_id'] = self.main_apply_id
        if self.meal_address is not None:
            result['meal_address'] = self.meal_address
        if self.meal_city is not None:
            result['meal_city'] = self.meal_city
        if self.meal_city_code is not None:
            result['meal_city_code'] = self.meal_city_code
        if self.meal_rule is not None:
            result['meal_rule'] = self.meal_rule
        if self.meal_scene is not None:
            result['meal_scene'] = self.meal_scene
        if self.merchant_category is not None:
            result['merchant_category'] = self.merchant_category
        if self.merchant_name is not None:
            result['merchant_name'] = self.merchant_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.order_status_desc is not None:
            result['order_status_desc'] = self.order_status_desc
        if self.person_settle_price is not None:
            result['person_settle_price'] = self.person_settle_price
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.remark is not None:
            result['remark'] = self.remark
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.share_dinner is not None:
            result['share_dinner'] = self.share_dinner
        if self.status is not None:
            result['status'] = self.status
        if self.store_address is not None:
            result['store_address'] = self.store_address
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_invoice_id is not None:
            result['third_invoice_id'] = self.third_invoice_id
        if self.third_part_business_id is not None:
            result['third_part_business_id'] = self.third_part_business_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('consume_report_address') is not None:
            self.consume_report_address = m.get('consume_report_address')
        if m.get('consume_report_city') is not None:
            self.consume_report_city = m.get('consume_report_city')
        if m.get('consume_report_city_code') is not None:
            self.consume_report_city_code = m.get('consume_report_city_code')
        if m.get('consumer_scene') is not None:
            self.consumer_scene = m.get('consumer_scene')
        if m.get('corp_settle_fee') is not None:
            self.corp_settle_fee = m.get('corp_settle_fee')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('main_apply_id') is not None:
            self.main_apply_id = m.get('main_apply_id')
        if m.get('meal_address') is not None:
            self.meal_address = m.get('meal_address')
        if m.get('meal_city') is not None:
            self.meal_city = m.get('meal_city')
        if m.get('meal_city_code') is not None:
            self.meal_city_code = m.get('meal_city_code')
        if m.get('meal_rule') is not None:
            self.meal_rule = m.get('meal_rule')
        if m.get('meal_scene') is not None:
            self.meal_scene = m.get('meal_scene')
        if m.get('merchant_category') is not None:
            self.merchant_category = m.get('merchant_category')
        if m.get('merchant_name') is not None:
            self.merchant_name = m.get('merchant_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('order_status_desc') is not None:
            self.order_status_desc = m.get('order_status_desc')
        if m.get('person_settle_price') is not None:
            self.person_settle_price = m.get('person_settle_price')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('share_dinner') is not None:
            self.share_dinner = m.get('share_dinner')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('store_address') is not None:
            self.store_address = m.get('store_address')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_invoice_id') is not None:
            self.third_invoice_id = m.get('third_invoice_id')
        if m.get('third_part_business_id') is not None:
            self.third_part_business_id = m.get('third_part_business_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class MealBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        category: int = None,
        corp_id: str = None,
        items: List[MealBillSettlementQueryResponseBodyModuleItems] = None,
        order_id: str = None,
        period_end: str = None,
        period_start: str = None,
        total_num: int = None,
        total_size: int = None,
    ):
        self.category = category
        self.corp_id = corp_id
        self.items = items
        self.order_id = order_id
        self.period_end = period_end
        self.period_start = period_start
        self.total_num = total_num
        self.total_size = total_size

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = MealBillSettlementQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class MealBillSettlementQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: int = None,
        message: str = None,
        module: MealBillSettlementQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = MealBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class MealBillSettlementQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: MealBillSettlementQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = MealBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MealOrderDetailQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class MealOrderDetailQueryRequest(TeaModel):
    def __init__(
        self,
        user_id: str = None,
    ):
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class MealOrderDetailQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        corp_code_order_id: str = None,
        corp_id: str = None,
        corp_pay_amount: int = None,
        corp_refund_amount: int = None,
        merchant_name: str = None,
        order_id: str = None,
        order_status: int = None,
        order_sub_status: int = None,
        order_type: str = None,
        pay_amount: int = None,
        pay_type: int = None,
        person_pay_amount: int = None,
        person_refund_amount: int = None,
        refund_amount: int = None,
        scene_name: str = None,
        settle_time: str = None,
        third_part_apply_id: str = None,
        user_alipay_id: str = None,
        user_id: str = None,
    ):
        self.apply_id = apply_id
        self.corp_code_order_id = corp_code_order_id
        self.corp_id = corp_id
        self.corp_pay_amount = corp_pay_amount
        self.corp_refund_amount = corp_refund_amount
        self.merchant_name = merchant_name
        self.order_id = order_id
        self.order_status = order_status
        self.order_sub_status = order_sub_status
        self.order_type = order_type
        self.pay_amount = pay_amount
        self.pay_type = pay_type
        self.person_pay_amount = person_pay_amount
        self.person_refund_amount = person_refund_amount
        self.refund_amount = refund_amount
        self.scene_name = scene_name
        self.settle_time = settle_time
        self.third_part_apply_id = third_part_apply_id
        self.user_alipay_id = user_alipay_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.corp_code_order_id is not None:
            result['corp_code_order_id'] = self.corp_code_order_id
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_pay_amount is not None:
            result['corp_pay_amount'] = self.corp_pay_amount
        if self.corp_refund_amount is not None:
            result['corp_refund_amount'] = self.corp_refund_amount
        if self.merchant_name is not None:
            result['merchant_name'] = self.merchant_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.order_sub_status is not None:
            result['order_sub_status'] = self.order_sub_status
        if self.order_type is not None:
            result['order_type'] = self.order_type
        if self.pay_amount is not None:
            result['pay_amount'] = self.pay_amount
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.person_pay_amount is not None:
            result['person_pay_amount'] = self.person_pay_amount
        if self.person_refund_amount is not None:
            result['person_refund_amount'] = self.person_refund_amount
        if self.refund_amount is not None:
            result['refund_amount'] = self.refund_amount
        if self.scene_name is not None:
            result['scene_name'] = self.scene_name
        if self.settle_time is not None:
            result['settle_time'] = self.settle_time
        if self.third_part_apply_id is not None:
            result['third_part_apply_id'] = self.third_part_apply_id
        if self.user_alipay_id is not None:
            result['user_alipay_id'] = self.user_alipay_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('corp_code_order_id') is not None:
            self.corp_code_order_id = m.get('corp_code_order_id')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_pay_amount') is not None:
            self.corp_pay_amount = m.get('corp_pay_amount')
        if m.get('corp_refund_amount') is not None:
            self.corp_refund_amount = m.get('corp_refund_amount')
        if m.get('merchant_name') is not None:
            self.merchant_name = m.get('merchant_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('order_sub_status') is not None:
            self.order_sub_status = m.get('order_sub_status')
        if m.get('order_type') is not None:
            self.order_type = m.get('order_type')
        if m.get('pay_amount') is not None:
            self.pay_amount = m.get('pay_amount')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('person_pay_amount') is not None:
            self.person_pay_amount = m.get('person_pay_amount')
        if m.get('person_refund_amount') is not None:
            self.person_refund_amount = m.get('person_refund_amount')
        if m.get('refund_amount') is not None:
            self.refund_amount = m.get('refund_amount')
        if m.get('scene_name') is not None:
            self.scene_name = m.get('scene_name')
        if m.get('settle_time') is not None:
            self.settle_time = m.get('settle_time')
        if m.get('third_part_apply_id') is not None:
            self.third_part_apply_id = m.get('third_part_apply_id')
        if m.get('user_alipay_id') is not None:
            self.user_alipay_id = m.get('user_alipay_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class MealOrderDetailQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: MealOrderDetailQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = MealOrderDetailQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class MealOrderDetailQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: MealOrderDetailQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = MealOrderDetailQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MealOrderListQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class MealOrderListQueryRequest(TeaModel):
    def __init__(
        self,
        user_id: str = None,
    ):
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class MealOrderListQueryResponseBodyModuleOrderList(TeaModel):
    def __init__(
        self,
        corp_pay_amount: int = None,
        merchant_name: str = None,
        order_id: str = None,
        order_status: int = None,
        order_type: str = None,
        pay_amount: int = None,
        person_pay_amount: int = None,
        settle_time: str = None,
    ):
        self.corp_pay_amount = corp_pay_amount
        self.merchant_name = merchant_name
        self.order_id = order_id
        self.order_status = order_status
        self.order_type = order_type
        self.pay_amount = pay_amount
        self.person_pay_amount = person_pay_amount
        self.settle_time = settle_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_pay_amount is not None:
            result['corp_pay_amount'] = self.corp_pay_amount
        if self.merchant_name is not None:
            result['merchant_name'] = self.merchant_name
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.order_type is not None:
            result['order_type'] = self.order_type
        if self.pay_amount is not None:
            result['pay_amount'] = self.pay_amount
        if self.person_pay_amount is not None:
            result['person_pay_amount'] = self.person_pay_amount
        if self.settle_time is not None:
            result['settle_time'] = self.settle_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_pay_amount') is not None:
            self.corp_pay_amount = m.get('corp_pay_amount')
        if m.get('merchant_name') is not None:
            self.merchant_name = m.get('merchant_name')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('order_type') is not None:
            self.order_type = m.get('order_type')
        if m.get('pay_amount') is not None:
            self.pay_amount = m.get('pay_amount')
        if m.get('person_pay_amount') is not None:
            self.person_pay_amount = m.get('person_pay_amount')
        if m.get('settle_time') is not None:
            self.settle_time = m.get('settle_time')
        return self


class MealOrderListQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        order_list: List[MealOrderListQueryResponseBodyModuleOrderList] = None,
    ):
        self.order_list = order_list

    def validate(self):
        if self.order_list:
            for k in self.order_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['order_list'] = []
        if self.order_list is not None:
            for k in self.order_list:
                result['order_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.order_list = []
        if m.get('order_list') is not None:
            for k in m.get('order_list'):
                temp_model = MealOrderListQueryResponseBodyModuleOrderList()
                self.order_list.append(temp_model.from_map(k))
        return self


class MealOrderListQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: MealOrderListQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = MealOrderListQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class MealOrderListQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: MealOrderListQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = MealOrderListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MonthBillConfirmHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class MonthBillConfirmRequest(TeaModel):
    def __init__(
        self,
        mail_bill_date: int = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.mail_bill_date = mail_bill_date
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.mail_bill_date is not None:
            result['mail_bill_date'] = self.mail_bill_date
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('mail_bill_date') is not None:
            self.mail_bill_date = m.get('mail_bill_date')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class MonthBillConfirmResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class MonthBillConfirmResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: MonthBillConfirmResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = MonthBillConfirmResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MonthBillGetHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class MonthBillGetRequest(TeaModel):
    def __init__(
        self,
        bill_month: str = None,
    ):
        self.bill_month = bill_month

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_month is not None:
            result['bill_month'] = self.bill_month
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bill_month') is not None:
            self.bill_month = m.get('bill_month')
        return self


class MonthBillGetResponseBodyModuleMonthAccountBillDetail(TeaModel):
    def __init__(
        self,
        bill_confirmed: int = None,
        car_amount: float = None,
        damage_amount: float = None,
        flight_amount: float = None,
        fu_point: float = None,
        hotel_amount: float = None,
        ie_flight_amount: float = None,
        ie_hotel_amount: float = None,
        mail_bill_date: int = None,
        service_amount: float = None,
        train_amount: float = None,
    ):
        self.bill_confirmed = bill_confirmed
        # 用车金额（单位：元）
        self.car_amount = car_amount
        # 违约金金额（单位：元）
        self.damage_amount = damage_amount
        # 机票金额（单位：元）
        self.flight_amount = flight_amount
        # 福豆金额（单位：元）
        self.fu_point = fu_point
        # 酒店金额（单位：元）
        self.hotel_amount = hotel_amount
        # 国际机票金额（单位：元）
        self.ie_flight_amount = ie_flight_amount
        self.ie_hotel_amount = ie_hotel_amount
        # 账期日：YYYYMMDD
        self.mail_bill_date = mail_bill_date
        # 服务费金额（单位：元）
        self.service_amount = service_amount
        # 火车票金额（单位：元）
        self.train_amount = train_amount

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_confirmed is not None:
            result['billConfirmed'] = self.bill_confirmed
        if self.car_amount is not None:
            result['carAmount'] = self.car_amount
        if self.damage_amount is not None:
            result['damageAmount'] = self.damage_amount
        if self.flight_amount is not None:
            result['flightAmount'] = self.flight_amount
        if self.fu_point is not None:
            result['fuPoint'] = self.fu_point
        if self.hotel_amount is not None:
            result['hotelAmount'] = self.hotel_amount
        if self.ie_flight_amount is not None:
            result['ieFlightAmount'] = self.ie_flight_amount
        if self.ie_hotel_amount is not None:
            result['ieHotelAmount'] = self.ie_hotel_amount
        if self.mail_bill_date is not None:
            result['mailBillDate'] = self.mail_bill_date
        if self.service_amount is not None:
            result['serviceAmount'] = self.service_amount
        if self.train_amount is not None:
            result['trainAmount'] = self.train_amount
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billConfirmed') is not None:
            self.bill_confirmed = m.get('billConfirmed')
        if m.get('carAmount') is not None:
            self.car_amount = m.get('carAmount')
        if m.get('damageAmount') is not None:
            self.damage_amount = m.get('damageAmount')
        if m.get('flightAmount') is not None:
            self.flight_amount = m.get('flightAmount')
        if m.get('fuPoint') is not None:
            self.fu_point = m.get('fuPoint')
        if m.get('hotelAmount') is not None:
            self.hotel_amount = m.get('hotelAmount')
        if m.get('ieFlightAmount') is not None:
            self.ie_flight_amount = m.get('ieFlightAmount')
        if m.get('ieHotelAmount') is not None:
            self.ie_hotel_amount = m.get('ieHotelAmount')
        if m.get('mailBillDate') is not None:
            self.mail_bill_date = m.get('mailBillDate')
        if m.get('serviceAmount') is not None:
            self.service_amount = m.get('serviceAmount')
        if m.get('trainAmount') is not None:
            self.train_amount = m.get('trainAmount')
        return self


class MonthBillGetResponseBodyModule(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        month_account_bill_detail: MonthBillGetResponseBodyModuleMonthAccountBillDetail = None,
        start_date: str = None,
        url: str = None,
    ):
        self.end_date = end_date
        # CorpMonthAccountBillFeeDetail
        self.month_account_bill_detail = month_account_bill_detail
        self.start_date = start_date
        self.url = url

    def validate(self):
        if self.month_account_bill_detail:
            self.month_account_bill_detail.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['end_date'] = self.end_date
        if self.month_account_bill_detail is not None:
            result['monthAccountBillDetail'] = self.month_account_bill_detail.to_map()
        if self.start_date is not None:
            result['start_date'] = self.start_date
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('end_date') is not None:
            self.end_date = m.get('end_date')
        if m.get('monthAccountBillDetail') is not None:
            temp_model = MonthBillGetResponseBodyModuleMonthAccountBillDetail()
            self.month_account_bill_detail = temp_model.from_map(m['monthAccountBillDetail'])
        if m.get('start_date') is not None:
            self.start_date = m.get('start_date')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class MonthBillGetResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[MonthBillGetResponseBodyModule] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = MonthBillGetResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class MonthBillGetResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: MonthBillGetResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = MonthBillGetResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectAddHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ProjectAddRequest(TeaModel):
    def __init__(
        self,
        code: str = None,
        project_name: str = None,
        third_part_cost_center_id: str = None,
        third_part_id: str = None,
        third_part_invoice_id: str = None,
    ):
        # This parameter is required.
        self.code = code
        # This parameter is required.
        self.project_name = project_name
        self.third_part_cost_center_id = third_part_cost_center_id
        # This parameter is required.
        self.third_part_id = third_part_id
        self.third_part_invoice_id = third_part_invoice_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.third_part_cost_center_id is not None:
            result['third_part_cost_center_id'] = self.third_part_cost_center_id
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('third_part_cost_center_id') is not None:
            self.third_part_cost_center_id = m.get('third_part_cost_center_id')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        return self


class ProjectAddResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: int = None,
        more_page: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.more_page = more_page
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.more_page is not None:
            result['more_page'] = self.more_page
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('more_page') is not None:
            self.more_page = m.get('more_page')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ProjectAddResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ProjectAddResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ProjectAddResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectDeleteHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ProjectDeleteRequest(TeaModel):
    def __init__(
        self,
        third_part_id: str = None,
    ):
        # This parameter is required.
        self.third_part_id = third_part_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        return self


class ProjectDeleteResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ProjectDeleteResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ProjectDeleteResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ProjectDeleteResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProjectModifyHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class ProjectModifyRequest(TeaModel):
    def __init__(
        self,
        code: str = None,
        project_name: str = None,
        third_part_cost_center_id: str = None,
        third_part_id: str = None,
        third_part_invoice_id: str = None,
    ):
        self.code = code
        # This parameter is required.
        self.project_name = project_name
        self.third_part_cost_center_id = third_part_cost_center_id
        # This parameter is required.
        self.third_part_id = third_part_id
        self.third_part_invoice_id = third_part_invoice_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.third_part_cost_center_id is not None:
            result['third_part_cost_center_id'] = self.third_part_cost_center_id
        if self.third_part_id is not None:
            result['third_part_id'] = self.third_part_id
        if self.third_part_invoice_id is not None:
            result['third_part_invoice_id'] = self.third_part_invoice_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('third_part_cost_center_id') is not None:
            self.third_part_cost_center_id = m.get('third_part_cost_center_id')
        if m.get('third_part_id') is not None:
            self.third_part_id = m.get('third_part_id')
        if m.get('third_part_invoice_id') is not None:
            self.third_part_invoice_id = m.get('third_part_invoice_id')
        return self


class ProjectModifyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class ProjectModifyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ProjectModifyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ProjectModifyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryGroupCorpListHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class QueryGroupCorpListRequest(TeaModel):
    def __init__(
        self,
        user_id: str = None,
    ):
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class QueryGroupCorpListResponseBodyModule(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        corp_name: str = None,
    ):
        self.corp_id = corp_id
        self.corp_name = corp_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        return self


class QueryGroupCorpListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: int = None,
        message: str = None,
        module: List[QueryGroupCorpListResponseBodyModule] = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.message = message
        self.module = module
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['trace_id'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = QueryGroupCorpListResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('trace_id') is not None:
            self.trace_id = m.get('trace_id')
        return self


class QueryGroupCorpListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryGroupCorpListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryGroupCorpListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryReimbursementOrderHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class QueryReimbursementOrderRequest(TeaModel):
    def __init__(
        self,
        reimb_order_no: str = None,
        sub_corp_id: str = None,
    ):
        # This parameter is required.
        self.reimb_order_no = reimb_order_no
        self.sub_corp_id = sub_corp_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.reimb_order_no is not None:
            result['reimb_order_no'] = self.reimb_order_no
        if self.sub_corp_id is not None:
            result['sub_corp_id'] = self.sub_corp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('reimb_order_no') is not None:
            self.reimb_order_no = m.get('reimb_order_no')
        if m.get('sub_corp_id') is not None:
            self.sub_corp_id = m.get('sub_corp_id')
        return self


class QueryReimbursementOrderResponseBodyModuleExpensesExpenseCompositions(TeaModel):
    def __init__(
        self,
        bill_settlement_id: int = None,
        capital_direction: str = None,
        fee_type: str = None,
        order_id: str = None,
        remark: str = None,
        remind_tag_list: List[str] = None,
        settlement_amount: str = None,
        settlement_time: str = None,
        voucher_type: int = None,
    ):
        self.bill_settlement_id = bill_settlement_id
        self.capital_direction = capital_direction
        self.fee_type = fee_type
        self.order_id = order_id
        self.remark = remark
        self.remind_tag_list = remind_tag_list
        self.settlement_amount = settlement_amount
        self.settlement_time = settlement_time
        self.voucher_type = voucher_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_settlement_id is not None:
            result['bill_settlement_id'] = self.bill_settlement_id
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.remind_tag_list is not None:
            result['remind_tag_list'] = self.remind_tag_list
        if self.settlement_amount is not None:
            result['settlement_amount'] = self.settlement_amount
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bill_settlement_id') is not None:
            self.bill_settlement_id = m.get('bill_settlement_id')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('remind_tag_list') is not None:
            self.remind_tag_list = m.get('remind_tag_list')
        if m.get('settlement_amount') is not None:
            self.settlement_amount = m.get('settlement_amount')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class QueryReimbursementOrderResponseBodyModuleExpensesInvoiceInfos(TeaModel):
    def __init__(
        self,
        amount: str = None,
        invoice_code: str = None,
        invoice_data: str = None,
        invoice_date: str = None,
        invoice_number: str = None,
        invoice_type: str = None,
    ):
        self.amount = amount
        self.invoice_code = invoice_code
        self.invoice_data = invoice_data
        self.invoice_date = invoice_date
        self.invoice_number = invoice_number
        self.invoice_type = invoice_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.invoice_code is not None:
            result['invoice_code'] = self.invoice_code
        if self.invoice_data is not None:
            result['invoice_data'] = self.invoice_data
        if self.invoice_date is not None:
            result['invoice_date'] = self.invoice_date
        if self.invoice_number is not None:
            result['invoice_number'] = self.invoice_number
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('invoice_code') is not None:
            self.invoice_code = m.get('invoice_code')
        if m.get('invoice_data') is not None:
            self.invoice_data = m.get('invoice_data')
        if m.get('invoice_date') is not None:
            self.invoice_date = m.get('invoice_date')
        if m.get('invoice_number') is not None:
            self.invoice_number = m.get('invoice_number')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        return self


class QueryReimbursementOrderResponseBodyModuleExpenses(TeaModel):
    def __init__(
        self,
        amount: str = None,
        currency: str = None,
        expense_city: str = None,
        expense_compositions: List[QueryReimbursementOrderResponseBodyModuleExpensesExpenseCompositions] = None,
        expense_time: str = None,
        expense_type: str = None,
        expense_type_code: str = None,
        invoice_infos: List[QueryReimbursementOrderResponseBodyModuleExpensesInvoiceInfos] = None,
        reimb_expense_id: int = None,
        remark: str = None,
        settlement_type: str = None,
    ):
        self.amount = amount
        self.currency = currency
        self.expense_city = expense_city
        self.expense_compositions = expense_compositions
        self.expense_time = expense_time
        self.expense_type = expense_type
        self.expense_type_code = expense_type_code
        self.invoice_infos = invoice_infos
        self.reimb_expense_id = reimb_expense_id
        self.remark = remark
        self.settlement_type = settlement_type

    def validate(self):
        if self.expense_compositions:
            for k in self.expense_compositions:
                if k:
                    k.validate()
        if self.invoice_infos:
            for k in self.invoice_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.currency is not None:
            result['currency'] = self.currency
        if self.expense_city is not None:
            result['expense_city'] = self.expense_city
        result['expense_compositions'] = []
        if self.expense_compositions is not None:
            for k in self.expense_compositions:
                result['expense_compositions'].append(k.to_map() if k else None)
        if self.expense_time is not None:
            result['expense_time'] = self.expense_time
        if self.expense_type is not None:
            result['expense_type'] = self.expense_type
        if self.expense_type_code is not None:
            result['expense_type_code'] = self.expense_type_code
        result['invoice_infos'] = []
        if self.invoice_infos is not None:
            for k in self.invoice_infos:
                result['invoice_infos'].append(k.to_map() if k else None)
        if self.reimb_expense_id is not None:
            result['reimb_expense_id'] = self.reimb_expense_id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('currency') is not None:
            self.currency = m.get('currency')
        if m.get('expense_city') is not None:
            self.expense_city = m.get('expense_city')
        self.expense_compositions = []
        if m.get('expense_compositions') is not None:
            for k in m.get('expense_compositions'):
                temp_model = QueryReimbursementOrderResponseBodyModuleExpensesExpenseCompositions()
                self.expense_compositions.append(temp_model.from_map(k))
        if m.get('expense_time') is not None:
            self.expense_time = m.get('expense_time')
        if m.get('expense_type') is not None:
            self.expense_type = m.get('expense_type')
        if m.get('expense_type_code') is not None:
            self.expense_type_code = m.get('expense_type_code')
        self.invoice_infos = []
        if m.get('invoice_infos') is not None:
            for k in m.get('invoice_infos'):
                temp_model = QueryReimbursementOrderResponseBodyModuleExpensesInvoiceInfos()
                self.invoice_infos.append(temp_model.from_map(k))
        if m.get('reimb_expense_id') is not None:
            self.reimb_expense_id = m.get('reimb_expense_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        return self


class QueryReimbursementOrderResponseBodyModuleItineraries(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        arr_date: str = None,
        dep_city: str = None,
        dep_date: str = None,
        traffic_way: str = None,
        trip_way: str = None,
    ):
        self.arr_city = arr_city
        self.arr_date = arr_date
        self.dep_city = dep_city
        self.dep_date = dep_date
        self.traffic_way = traffic_way
        self.trip_way = trip_way

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.traffic_way is not None:
            result['traffic_way'] = self.traffic_way
        if self.trip_way is not None:
            result['trip_way'] = self.trip_way
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('traffic_way') is not None:
            self.traffic_way = m.get('traffic_way')
        if m.get('trip_way') is not None:
            self.trip_way = m.get('trip_way')
        return self


class QueryReimbursementOrderResponseBodyModulePaymentInfos(TeaModel):
    def __init__(
        self,
        amount: str = None,
        payee_user_id: str = None,
    ):
        self.amount = amount
        self.payee_user_id = payee_user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.payee_user_id is not None:
            result['payee_user_id'] = self.payee_user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('payee_user_id') is not None:
            self.payee_user_id = m.get('payee_user_id')
        return self


class QueryReimbursementOrderResponseBodyModule(TeaModel):
    def __init__(
        self,
        company_amount: str = None,
        company_pay_amount: str = None,
        corp_id: str = None,
        cost_center_code: str = None,
        cost_center_name: str = None,
        expenses: List[QueryReimbursementOrderResponseBodyModuleExpenses] = None,
        expenses_cover_dept_id: str = None,
        expenses_cover_dept_name: str = None,
        expenses_cover_invoice_title: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        is_deleted: str = None,
        itineraries: List[QueryReimbursementOrderResponseBodyModuleItineraries] = None,
        payment_infos: List[QueryReimbursementOrderResponseBodyModulePaymentInfos] = None,
        personal_amount: str = None,
        project_code: str = None,
        project_name: str = None,
        reason: str = None,
        reimbursement_no: str = None,
        remark: str = None,
        status: str = None,
        travel_third_apply_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.company_amount = company_amount
        self.company_pay_amount = company_pay_amount
        self.corp_id = corp_id
        self.cost_center_code = cost_center_code
        self.cost_center_name = cost_center_name
        self.expenses = expenses
        self.expenses_cover_dept_id = expenses_cover_dept_id
        self.expenses_cover_dept_name = expenses_cover_dept_name
        self.expenses_cover_invoice_title = expenses_cover_invoice_title
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.is_deleted = is_deleted
        self.itineraries = itineraries
        self.payment_infos = payment_infos
        self.personal_amount = personal_amount
        self.project_code = project_code
        self.project_name = project_name
        self.reason = reason
        self.reimbursement_no = reimbursement_no
        self.remark = remark
        self.status = status
        self.travel_third_apply_id = travel_third_apply_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.expenses:
            for k in self.expenses:
                if k:
                    k.validate()
        if self.itineraries:
            for k in self.itineraries:
                if k:
                    k.validate()
        if self.payment_infos:
            for k in self.payment_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.company_amount is not None:
            result['company_amount'] = self.company_amount
        if self.company_pay_amount is not None:
            result['company_pay_amount'] = self.company_pay_amount
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.cost_center_code is not None:
            result['cost_center_code'] = self.cost_center_code
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        result['expenses'] = []
        if self.expenses is not None:
            for k in self.expenses:
                result['expenses'].append(k.to_map() if k else None)
        if self.expenses_cover_dept_id is not None:
            result['expenses_cover_dept_id'] = self.expenses_cover_dept_id
        if self.expenses_cover_dept_name is not None:
            result['expenses_cover_dept_name'] = self.expenses_cover_dept_name
        if self.expenses_cover_invoice_title is not None:
            result['expenses_cover_invoice_title'] = self.expenses_cover_invoice_title
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.is_deleted is not None:
            result['is_deleted'] = self.is_deleted
        result['itineraries'] = []
        if self.itineraries is not None:
            for k in self.itineraries:
                result['itineraries'].append(k.to_map() if k else None)
        result['payment_infos'] = []
        if self.payment_infos is not None:
            for k in self.payment_infos:
                result['payment_infos'].append(k.to_map() if k else None)
        if self.personal_amount is not None:
            result['personal_amount'] = self.personal_amount
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.reason is not None:
            result['reason'] = self.reason
        if self.reimbursement_no is not None:
            result['reimbursement_no'] = self.reimbursement_no
        if self.remark is not None:
            result['remark'] = self.remark
        if self.status is not None:
            result['status'] = self.status
        if self.travel_third_apply_id is not None:
            result['travel_third_apply_id'] = self.travel_third_apply_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('company_amount') is not None:
            self.company_amount = m.get('company_amount')
        if m.get('company_pay_amount') is not None:
            self.company_pay_amount = m.get('company_pay_amount')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('cost_center_code') is not None:
            self.cost_center_code = m.get('cost_center_code')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        self.expenses = []
        if m.get('expenses') is not None:
            for k in m.get('expenses'):
                temp_model = QueryReimbursementOrderResponseBodyModuleExpenses()
                self.expenses.append(temp_model.from_map(k))
        if m.get('expenses_cover_dept_id') is not None:
            self.expenses_cover_dept_id = m.get('expenses_cover_dept_id')
        if m.get('expenses_cover_dept_name') is not None:
            self.expenses_cover_dept_name = m.get('expenses_cover_dept_name')
        if m.get('expenses_cover_invoice_title') is not None:
            self.expenses_cover_invoice_title = m.get('expenses_cover_invoice_title')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('is_deleted') is not None:
            self.is_deleted = m.get('is_deleted')
        self.itineraries = []
        if m.get('itineraries') is not None:
            for k in m.get('itineraries'):
                temp_model = QueryReimbursementOrderResponseBodyModuleItineraries()
                self.itineraries.append(temp_model.from_map(k))
        self.payment_infos = []
        if m.get('payment_infos') is not None:
            for k in m.get('payment_infos'):
                temp_model = QueryReimbursementOrderResponseBodyModulePaymentInfos()
                self.payment_infos.append(temp_model.from_map(k))
        if m.get('personal_amount') is not None:
            self.personal_amount = m.get('personal_amount')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('reimbursement_no') is not None:
            self.reimbursement_no = m.get('reimbursement_no')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('travel_third_apply_id') is not None:
            self.travel_third_apply_id = m.get('travel_third_apply_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class QueryReimbursementOrderResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: QueryReimbursementOrderResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = QueryReimbursementOrderResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class QueryReimbursementOrderResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryReimbursementOrderResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryReimbursementOrderResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SyncSingleUserHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class SyncSingleUserRequest(TeaModel):
    def __init__(
        self,
        email: str = None,
        job_no: str = None,
        leave_status: int = None,
        manager_user_id: str = None,
        phone: str = None,
        position: str = None,
        position_level: str = None,
        real_name_en: str = None,
        third_depart_id_list: List[str] = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.email = email
        self.job_no = job_no
        self.leave_status = leave_status
        self.manager_user_id = manager_user_id
        self.phone = phone
        self.position = position
        self.position_level = position_level
        self.real_name_en = real_name_en
        self.third_depart_id_list = third_depart_id_list
        # This parameter is required.
        self.user_id = user_id
        # This parameter is required.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['email'] = self.email
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.leave_status is not None:
            result['leave_status'] = self.leave_status
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.position is not None:
            result['position'] = self.position
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.third_depart_id_list is not None:
            result['third_depart_id_list'] = self.third_depart_id_list
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('leave_status') is not None:
            self.leave_status = m.get('leave_status')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('position') is not None:
            self.position = m.get('position')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('third_depart_id_list') is not None:
            self.third_depart_id_list = m.get('third_depart_id_list')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class SyncSingleUserShrinkRequest(TeaModel):
    def __init__(
        self,
        email: str = None,
        job_no: str = None,
        leave_status: int = None,
        manager_user_id: str = None,
        phone: str = None,
        position: str = None,
        position_level: str = None,
        real_name_en: str = None,
        third_depart_id_list_shrink: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.email = email
        self.job_no = job_no
        self.leave_status = leave_status
        self.manager_user_id = manager_user_id
        self.phone = phone
        self.position = position
        self.position_level = position_level
        self.real_name_en = real_name_en
        self.third_depart_id_list_shrink = third_depart_id_list_shrink
        # This parameter is required.
        self.user_id = user_id
        # This parameter is required.
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['email'] = self.email
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.leave_status is not None:
            result['leave_status'] = self.leave_status
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.phone is not None:
            result['phone'] = self.phone
        if self.position is not None:
            result['position'] = self.position
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.third_depart_id_list_shrink is not None:
            result['third_depart_id_list'] = self.third_depart_id_list_shrink
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('leave_status') is not None:
            self.leave_status = m.get('leave_status')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('position') is not None:
            self.position = m.get('position')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('third_depart_id_list') is not None:
            self.third_depart_id_list_shrink = m.get('third_depart_id_list')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class SyncSingleUserResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class SyncSingleUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SyncSingleUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SyncSingleUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SyncThirdUserMappingHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class SyncThirdUserMappingRequest(TeaModel):
    def __init__(
        self,
        status: int = None,
        third_channel_type: str = None,
        third_user_id: str = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.status = status
        # This parameter is required.
        self.third_channel_type = third_channel_type
        # This parameter is required.
        self.third_user_id = third_user_id
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.status is not None:
            result['status'] = self.status
        if self.third_channel_type is not None:
            result['third_channel_type'] = self.third_channel_type
        if self.third_user_id is not None:
            result['third_user_id'] = self.third_user_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('third_channel_type') is not None:
            self.third_channel_type = m.get('third_channel_type')
        if m.get('third_user_id') is not None:
            self.third_user_id = m.get('third_user_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class SyncThirdUserMappingResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class SyncThirdUserMappingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SyncThirdUserMappingResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SyncThirdUserMappingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TBAccountInfoQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TBAccountInfoQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        tb_account: str = None,
        tb_bond: bool = None,
    ):
        self.tb_account = tb_account
        self.tb_bond = tb_bond

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tb_account is not None:
            result['tb_account'] = self.tb_account
        if self.tb_bond is not None:
            result['tb_bond'] = self.tb_bond
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('tb_account') is not None:
            self.tb_account = m.get('tb_account')
        if m.get('tb_bond') is not None:
            self.tb_bond = m.get('tb_bond')
        return self


class TBAccountInfoQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TBAccountInfoQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TBAccountInfoQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TBAccountInfoQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TBAccountInfoQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TBAccountInfoQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TBAccountUnbindHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TBAccountUnbindResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: bool = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            self.module = m.get('module')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TBAccountUnbindResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TBAccountUnbindResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TBAccountUnbindResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingApplyHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList(TeaModel):
    def __init__(
        self,
        origin_flight_no: str = None,
        out_user_id: str = None,
        passenger_name: str = None,
    ):
        # This parameter is required.
        self.origin_flight_no = origin_flight_no
        # This parameter is required.
        self.out_user_id = out_user_id
        # This parameter is required.
        self.passenger_name = passenger_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.origin_flight_no is not None:
            result['origin_flight_no'] = self.origin_flight_no
        if self.out_user_id is not None:
            result['out_user_id'] = self.out_user_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('origin_flight_no') is not None:
            self.origin_flight_no = m.get('origin_flight_no')
        if m.get('out_user_id') is not None:
            self.out_user_id = m.get('out_user_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        return self


class TicketChangingApplyRequestModifyFlightInfoList(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        cabin: str = None,
        dep_city: str = None,
        dep_date: str = None,
        flight_no: str = None,
        passenger_info_list: List[TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList] = None,
    ):
        # This parameter is required.
        self.arr_city = arr_city
        self.cabin = cabin
        # This parameter is required.
        self.dep_city = dep_city
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.flight_no = flight_no
        # This parameter is required.
        self.passenger_info_list = passenger_info_list

    def validate(self):
        if self.passenger_info_list:
            for k in self.passenger_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        result['passenger_info_list'] = []
        if self.passenger_info_list is not None:
            for k in self.passenger_info_list:
                result['passenger_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        self.passenger_info_list = []
        if m.get('passenger_info_list') is not None:
            for k in m.get('passenger_info_list'):
                temp_model = TicketChangingApplyRequestModifyFlightInfoListPassengerInfoList()
                self.passenger_info_list.append(temp_model.from_map(k))
        return self


class TicketChangingApplyRequest(TeaModel):
    def __init__(
        self,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
        is_voluntary: int = None,
        modify_flight_info_list: List[TicketChangingApplyRequestModifyFlightInfoList] = None,
        ota_item_id: str = None,
        reason: str = None,
        session_id: str = None,
        whether_retry: bool = None,
    ):
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.dis_sub_order_id = dis_sub_order_id
        self.is_voluntary = is_voluntary
        # This parameter is required.
        self.modify_flight_info_list = modify_flight_info_list
        # This parameter is required.
        self.ota_item_id = ota_item_id
        self.reason = reason
        # This parameter is required.
        self.session_id = session_id
        self.whether_retry = whether_retry

    def validate(self):
        if self.modify_flight_info_list:
            for k in self.modify_flight_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        result['modify_flight_info_list'] = []
        if self.modify_flight_info_list is not None:
            for k in self.modify_flight_info_list:
                result['modify_flight_info_list'].append(k.to_map() if k else None)
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.reason is not None:
            result['reason'] = self.reason
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.whether_retry is not None:
            result['whether_retry'] = self.whether_retry
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        self.modify_flight_info_list = []
        if m.get('modify_flight_info_list') is not None:
            for k in m.get('modify_flight_info_list'):
                temp_model = TicketChangingApplyRequestModifyFlightInfoList()
                self.modify_flight_info_list.append(temp_model.from_map(k))
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('whether_retry') is not None:
            self.whether_retry = m.get('whether_retry')
        return self


class TicketChangingApplyShrinkRequest(TeaModel):
    def __init__(
        self,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
        is_voluntary: int = None,
        modify_flight_info_list_shrink: str = None,
        ota_item_id: str = None,
        reason: str = None,
        session_id: str = None,
        whether_retry: bool = None,
    ):
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.dis_sub_order_id = dis_sub_order_id
        self.is_voluntary = is_voluntary
        # This parameter is required.
        self.modify_flight_info_list_shrink = modify_flight_info_list_shrink
        # This parameter is required.
        self.ota_item_id = ota_item_id
        self.reason = reason
        # This parameter is required.
        self.session_id = session_id
        self.whether_retry = whether_retry

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.modify_flight_info_list_shrink is not None:
            result['modify_flight_info_list'] = self.modify_flight_info_list_shrink
        if self.ota_item_id is not None:
            result['ota_item_id'] = self.ota_item_id
        if self.reason is not None:
            result['reason'] = self.reason
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.whether_retry is not None:
            result['whether_retry'] = self.whether_retry
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('modify_flight_info_list') is not None:
            self.modify_flight_info_list_shrink = m.get('modify_flight_info_list')
        if m.get('ota_item_id') is not None:
            self.ota_item_id = m.get('ota_item_id')
        if m.get('reason') is not None:
            self.reason = m.get('reason')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('whether_retry') is not None:
            self.whether_retry = m.get('whether_retry')
        return self


class TicketChangingApplyResponseBodyModule(TeaModel):
    def __init__(
        self,
        booking_changed_total_fee: int = None,
        booking_origin_total_fee: int = None,
        booking_price_changed: bool = None,
        btrip_order_id: int = None,
        btrip_sub_order_id: int = None,
        can_pay: bool = None,
        change_fee: int = None,
        deadline_time: str = None,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
        max_retry_times: int = None,
        next_retry_interval: int = None,
        retry: bool = None,
        retry_client_tips: str = None,
        status: int = None,
        upgrade_fee: int = None,
    ):
        self.booking_changed_total_fee = booking_changed_total_fee
        self.booking_origin_total_fee = booking_origin_total_fee
        self.booking_price_changed = booking_price_changed
        self.btrip_order_id = btrip_order_id
        self.btrip_sub_order_id = btrip_sub_order_id
        self.can_pay = can_pay
        self.change_fee = change_fee
        self.deadline_time = deadline_time
        self.dis_order_id = dis_order_id
        self.dis_sub_order_id = dis_sub_order_id
        self.max_retry_times = max_retry_times
        self.next_retry_interval = next_retry_interval
        self.retry = retry
        self.retry_client_tips = retry_client_tips
        self.status = status
        self.upgrade_fee = upgrade_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.booking_changed_total_fee is not None:
            result['booking_changed_total_fee'] = self.booking_changed_total_fee
        if self.booking_origin_total_fee is not None:
            result['booking_origin_total_fee'] = self.booking_origin_total_fee
        if self.booking_price_changed is not None:
            result['booking_price_changed'] = self.booking_price_changed
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.btrip_sub_order_id is not None:
            result['btrip_sub_order_id'] = self.btrip_sub_order_id
        if self.can_pay is not None:
            result['can_pay'] = self.can_pay
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.deadline_time is not None:
            result['deadline_time'] = self.deadline_time
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.max_retry_times is not None:
            result['max_retry_times'] = self.max_retry_times
        if self.next_retry_interval is not None:
            result['next_retry_interval'] = self.next_retry_interval
        if self.retry is not None:
            result['retry'] = self.retry
        if self.retry_client_tips is not None:
            result['retry_client_tips'] = self.retry_client_tips
        if self.status is not None:
            result['status'] = self.status
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('booking_changed_total_fee') is not None:
            self.booking_changed_total_fee = m.get('booking_changed_total_fee')
        if m.get('booking_origin_total_fee') is not None:
            self.booking_origin_total_fee = m.get('booking_origin_total_fee')
        if m.get('booking_price_changed') is not None:
            self.booking_price_changed = m.get('booking_price_changed')
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('btrip_sub_order_id') is not None:
            self.btrip_sub_order_id = m.get('btrip_sub_order_id')
        if m.get('can_pay') is not None:
            self.can_pay = m.get('can_pay')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('deadline_time') is not None:
            self.deadline_time = m.get('deadline_time')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('max_retry_times') is not None:
            self.max_retry_times = m.get('max_retry_times')
        if m.get('next_retry_interval') is not None:
            self.next_retry_interval = m.get('next_retry_interval')
        if m.get('retry') is not None:
            self.retry = m.get('retry')
        if m.get('retry_client_tips') is not None:
            self.retry_client_tips = m.get('retry_client_tips')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        return self


class TicketChangingApplyResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TicketChangingApplyResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingApplyResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingApplyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TicketChangingApplyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingApplyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingCancelHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingCancelRequest(TeaModel):
    def __init__(
        self,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
    ):
        self.dis_order_id = dis_order_id
        self.dis_sub_order_id = dis_sub_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        return self


class TicketChangingCancelResponseBodyModule(TeaModel):
    def __init__(
        self,
        cancel_time: str = None,
        dis_sub_order_id: str = None,
        status: str = None,
    ):
        self.cancel_time = cancel_time
        self.dis_sub_order_id = dis_sub_order_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cancel_time is not None:
            result['cancel_time'] = self.cancel_time
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cancel_time') is not None:
            self.cancel_time = m.get('cancel_time')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class TicketChangingCancelResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TicketChangingCancelResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingCancelResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingCancelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TicketChangingCancelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingCancelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingDetailHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingDetailRequest(TeaModel):
    def __init__(
        self,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
    ):
        self.dis_order_id = dis_order_id
        self.dis_sub_order_id = dis_sub_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        return self


class TicketChangingDetailResponseBodyModuleFlightInfoList(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        airline_simple_name: str = None,
        arr_airport: str = None,
        arr_airport_code: str = None,
        arr_airport_code_name: str = None,
        arr_city: str = None,
        arr_city_code: str = None,
        arr_terminal: str = None,
        arr_time: str = None,
        baggage: str = None,
        build_price: int = None,
        cabin: str = None,
        cabin_class: str = None,
        carrier: str = None,
        dep_airport: str = None,
        dep_airport_code: str = None,
        dep_airport_code_name: str = None,
        dep_city: str = None,
        dep_city_code: str = None,
        dep_terminal: str = None,
        dep_time: str = None,
        flight_no: str = None,
        last_cabin: str = None,
        last_flight_no: str = None,
        meal: str = None,
        oil_price: int = None,
        segment_type: int = None,
        stop_arr_time: str = None,
        stop_city: str = None,
        stop_dep_time: str = None,
        ticket_price: int = None,
        tuigaiqian_info: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.airline_simple_name = airline_simple_name
        self.arr_airport = arr_airport
        self.arr_airport_code = arr_airport_code
        self.arr_airport_code_name = arr_airport_code_name
        self.arr_city = arr_city
        self.arr_city_code = arr_city_code
        self.arr_terminal = arr_terminal
        self.arr_time = arr_time
        self.baggage = baggage
        self.build_price = build_price
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.carrier = carrier
        self.dep_airport = dep_airport
        self.dep_airport_code = dep_airport_code
        self.dep_airport_code_name = dep_airport_code_name
        self.dep_city = dep_city
        self.dep_city_code = dep_city_code
        self.dep_terminal = dep_terminal
        self.dep_time = dep_time
        self.flight_no = flight_no
        self.last_cabin = last_cabin
        self.last_flight_no = last_flight_no
        self.meal = meal
        self.oil_price = oil_price
        self.segment_type = segment_type
        self.stop_arr_time = stop_arr_time
        self.stop_city = stop_city
        self.stop_dep_time = stop_dep_time
        self.ticket_price = ticket_price
        self.tuigaiqian_info = tuigaiqian_info

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        if self.arr_airport is not None:
            result['arr_airport'] = self.arr_airport
        if self.arr_airport_code is not None:
            result['arr_airport_code'] = self.arr_airport_code
        if self.arr_airport_code_name is not None:
            result['arr_airport_code_name'] = self.arr_airport_code_name
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_terminal is not None:
            result['arr_terminal'] = self.arr_terminal
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.baggage is not None:
            result['baggage'] = self.baggage
        if self.build_price is not None:
            result['build_price'] = self.build_price
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.carrier is not None:
            result['carrier'] = self.carrier
        if self.dep_airport is not None:
            result['dep_airport'] = self.dep_airport
        if self.dep_airport_code is not None:
            result['dep_airport_code'] = self.dep_airport_code
        if self.dep_airport_code_name is not None:
            result['dep_airport_code_name'] = self.dep_airport_code_name
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_terminal is not None:
            result['dep_terminal'] = self.dep_terminal
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.last_cabin is not None:
            result['last_cabin'] = self.last_cabin
        if self.last_flight_no is not None:
            result['last_flight_no'] = self.last_flight_no
        if self.meal is not None:
            result['meal'] = self.meal
        if self.oil_price is not None:
            result['oil_price'] = self.oil_price
        if self.segment_type is not None:
            result['segment_type'] = self.segment_type
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.tuigaiqian_info is not None:
            result['tuigaiqian_info'] = self.tuigaiqian_info
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        if m.get('arr_airport') is not None:
            self.arr_airport = m.get('arr_airport')
        if m.get('arr_airport_code') is not None:
            self.arr_airport_code = m.get('arr_airport_code')
        if m.get('arr_airport_code_name') is not None:
            self.arr_airport_code_name = m.get('arr_airport_code_name')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_terminal') is not None:
            self.arr_terminal = m.get('arr_terminal')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('baggage') is not None:
            self.baggage = m.get('baggage')
        if m.get('build_price') is not None:
            self.build_price = m.get('build_price')
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('carrier') is not None:
            self.carrier = m.get('carrier')
        if m.get('dep_airport') is not None:
            self.dep_airport = m.get('dep_airport')
        if m.get('dep_airport_code') is not None:
            self.dep_airport_code = m.get('dep_airport_code')
        if m.get('dep_airport_code_name') is not None:
            self.dep_airport_code_name = m.get('dep_airport_code_name')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_terminal') is not None:
            self.dep_terminal = m.get('dep_terminal')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('last_cabin') is not None:
            self.last_cabin = m.get('last_cabin')
        if m.get('last_flight_no') is not None:
            self.last_flight_no = m.get('last_flight_no')
        if m.get('meal') is not None:
            self.meal = m.get('meal')
        if m.get('oil_price') is not None:
            self.oil_price = m.get('oil_price')
        if m.get('segment_type') is not None:
            self.segment_type = m.get('segment_type')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('tuigaiqian_info') is not None:
            self.tuigaiqian_info = m.get('tuigaiqian_info')
        return self


class TicketChangingDetailResponseBodyModuleTravelerInfoList(TeaModel):
    def __init__(
        self,
        birth_date: str = None,
        cert_no: str = None,
        cert_type: str = None,
        open_ticket_status: int = None,
        passenger_name: str = None,
        passenger_type: str = None,
        phone: str = None,
        ticket_no: str = None,
        user_id: str = None,
    ):
        self.birth_date = birth_date
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.open_ticket_status = open_ticket_status
        self.passenger_name = passenger_name
        self.passenger_type = passenger_type
        self.phone = phone
        self.ticket_no = ticket_no
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birth_date is not None:
            result['birth_date'] = self.birth_date
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.open_ticket_status is not None:
            result['open_ticket_status'] = self.open_ticket_status
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.phone is not None:
            result['phone'] = self.phone
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birth_date') is not None:
            self.birth_date = m.get('birth_date')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('open_ticket_status') is not None:
            self.open_ticket_status = m.get('open_ticket_status')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TicketChangingDetailResponseBodyModule(TeaModel):
    def __init__(
        self,
        alipay_trade_no: str = None,
        btrip_order_id: int = None,
        btrip_sub_order_id: int = None,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
        extra: str = None,
        flight_info_list: List[TicketChangingDetailResponseBodyModuleFlightInfoList] = None,
        last_pay_time: str = None,
        pay_status: int = None,
        pay_time: str = None,
        settle_price: int = None,
        settle_type: int = None,
        status: int = None,
        total_change_price: int = None,
        total_price: int = None,
        total_upgrade_price: int = None,
        traveler_info_list: List[TicketChangingDetailResponseBodyModuleTravelerInfoList] = None,
    ):
        self.alipay_trade_no = alipay_trade_no
        self.btrip_order_id = btrip_order_id
        self.btrip_sub_order_id = btrip_sub_order_id
        self.dis_order_id = dis_order_id
        self.dis_sub_order_id = dis_sub_order_id
        self.extra = extra
        self.flight_info_list = flight_info_list
        self.last_pay_time = last_pay_time
        self.pay_status = pay_status
        self.pay_time = pay_time
        self.settle_price = settle_price
        self.settle_type = settle_type
        self.status = status
        self.total_change_price = total_change_price
        self.total_price = total_price
        self.total_upgrade_price = total_upgrade_price
        self.traveler_info_list = traveler_info_list

    def validate(self):
        if self.flight_info_list:
            for k in self.flight_info_list:
                if k:
                    k.validate()
        if self.traveler_info_list:
            for k in self.traveler_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.btrip_order_id is not None:
            result['btrip_order_id'] = self.btrip_order_id
        if self.btrip_sub_order_id is not None:
            result['btrip_sub_order_id'] = self.btrip_sub_order_id
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        result['flight_info_list'] = []
        if self.flight_info_list is not None:
            for k in self.flight_info_list:
                result['flight_info_list'].append(k.to_map() if k else None)
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.settle_price is not None:
            result['settle_price'] = self.settle_price
        if self.settle_type is not None:
            result['settle_type'] = self.settle_type
        if self.status is not None:
            result['status'] = self.status
        if self.total_change_price is not None:
            result['total_change_price'] = self.total_change_price
        if self.total_price is not None:
            result['total_price'] = self.total_price
        if self.total_upgrade_price is not None:
            result['total_upgrade_price'] = self.total_upgrade_price
        result['traveler_info_list'] = []
        if self.traveler_info_list is not None:
            for k in self.traveler_info_list:
                result['traveler_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('btrip_order_id') is not None:
            self.btrip_order_id = m.get('btrip_order_id')
        if m.get('btrip_sub_order_id') is not None:
            self.btrip_sub_order_id = m.get('btrip_sub_order_id')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        self.flight_info_list = []
        if m.get('flight_info_list') is not None:
            for k in m.get('flight_info_list'):
                temp_model = TicketChangingDetailResponseBodyModuleFlightInfoList()
                self.flight_info_list.append(temp_model.from_map(k))
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('settle_price') is not None:
            self.settle_price = m.get('settle_price')
        if m.get('settle_type') is not None:
            self.settle_type = m.get('settle_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('total_change_price') is not None:
            self.total_change_price = m.get('total_change_price')
        if m.get('total_price') is not None:
            self.total_price = m.get('total_price')
        if m.get('total_upgrade_price') is not None:
            self.total_upgrade_price = m.get('total_upgrade_price')
        self.traveler_info_list = []
        if m.get('traveler_info_list') is not None:
            for k in m.get('traveler_info_list'):
                temp_model = TicketChangingDetailResponseBodyModuleTravelerInfoList()
                self.traveler_info_list.append(temp_model.from_map(k))
        return self


class TicketChangingDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TicketChangingDetailResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingDetailResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TicketChangingDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingEnquiryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingEnquiryRequest(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        dep_city: str = None,
        dis_order_id: str = None,
        is_voluntary: int = None,
        modify_depart_date: str = None,
        modify_flight_no: str = None,
        session_id: str = None,
    ):
        # This parameter is required.
        self.arr_city = arr_city
        # This parameter is required.
        self.dep_city = dep_city
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.is_voluntary = is_voluntary
        # This parameter is required.
        self.modify_depart_date = modify_depart_date
        # This parameter is required.
        self.modify_flight_no = modify_flight_no
        # This parameter is required.
        self.session_id = session_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.modify_depart_date is not None:
            result['modify_depart_date'] = self.modify_depart_date
        if self.modify_flight_no is not None:
            result['modify_flight_no'] = self.modify_flight_no
        if self.session_id is not None:
            result['session_id'] = self.session_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('modify_depart_date') is not None:
            self.modify_depart_date = m.get('modify_depart_date')
        if m.get('modify_flight_no') is not None:
            self.modify_flight_no = m.get('modify_flight_no')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        airline_simple_name: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.airline_simple_name = airline_simple_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription(TeaModel):
    def __init__(
        self,
        desc: str = None,
        icon: str = None,
        image: str = None,
        title: str = None,
    ):
        self.desc = desc
        self.icon = icon
        self.image = image
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.desc is not None:
            result['desc'] = self.desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.image is not None:
            result['image'] = self.image
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('desc') is not None:
            self.desc = m.get('desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO(TeaModel):
    def __init__(
        self,
        image: str = None,
        largest: str = None,
        middle: str = None,
        smallest: str = None,
    ):
        self.image = image
        self.largest = largest
        self.middle = middle
        self.smallest = smallest

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.image is not None:
            result['image'] = self.image
        if self.largest is not None:
            result['largest'] = self.largest
        if self.middle is not None:
            result['middle'] = self.middle
        if self.smallest is not None:
            result['smallest'] = self.smallest
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('image') is not None:
            self.image = m.get('image')
        if m.get('largest') is not None:
            self.largest = m.get('largest')
        if m.get('middle') is not None:
            self.middle = m.get('middle')
        if m.get('smallest') is not None:
            self.smallest = m.get('smallest')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes(TeaModel):
    def __init__(
        self,
        baggage_desc: List[str] = None,
        baggage_sub_content_type: int = None,
        description: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription = None,
        image_do: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO = None,
        is_highlight: bool = None,
        sub_title: str = None,
    ):
        self.baggage_desc = baggage_desc
        self.baggage_sub_content_type = baggage_sub_content_type
        self.description = description
        self.image_do = image_do
        self.is_highlight = is_highlight
        self.sub_title = sub_title

    def validate(self):
        if self.description:
            self.description.validate()
        if self.image_do:
            self.image_do.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.baggage_sub_content_type is not None:
            result['baggage_sub_content_type'] = self.baggage_sub_content_type
        if self.description is not None:
            result['description'] = self.description.to_map()
        if self.image_do is not None:
            result['imageDO'] = self.image_do.to_map()
        if self.is_highlight is not None:
            result['is_highlight'] = self.is_highlight
        if self.sub_title is not None:
            result['subTitle'] = self.sub_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('baggage_sub_content_type') is not None:
            self.baggage_sub_content_type = m.get('baggage_sub_content_type')
        if m.get('description') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesDescription()
            self.description = temp_model.from_map(m['description'])
        if m.get('imageDO') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizesImageDO()
            self.image_do = temp_model.from_map(m['imageDO'])
        if m.get('is_highlight') is not None:
            self.is_highlight = m.get('is_highlight')
        if m.get('subTitle') is not None:
            self.sub_title = m.get('subTitle')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents(TeaModel):
    def __init__(
        self,
        baggage_desc: str = None,
        icon: str = None,
        style: int = None,
        sub_title: str = None,
    ):
        self.baggage_desc = baggage_desc
        self.icon = icon
        self.style = style
        self.sub_title = sub_title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.baggage_desc is not None:
            result['baggage_desc'] = self.baggage_desc
        if self.icon is not None:
            result['icon'] = self.icon
        if self.style is not None:
            result['style'] = self.style
        if self.sub_title is not None:
            result['sub_title'] = self.sub_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('baggage_desc') is not None:
            self.baggage_desc = m.get('baggage_desc')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('style') is not None:
            self.style = m.get('style')
        if m.get('sub_title') is not None:
            self.sub_title = m.get('sub_title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems(TeaModel):
    def __init__(
        self,
        attributes: Dict[str, Any] = None,
        baggage_sub_content_visualizes: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes] = None,
        baggage_sub_contents: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents] = None,
        content: str = None,
        is_struct: bool = None,
        ptc: str = None,
        title: str = None,
    ):
        # attributes
        self.attributes = attributes
        self.baggage_sub_content_visualizes = baggage_sub_content_visualizes
        self.baggage_sub_contents = baggage_sub_contents
        self.content = content
        self.is_struct = is_struct
        self.ptc = ptc
        self.title = title

    def validate(self):
        if self.baggage_sub_content_visualizes:
            for k in self.baggage_sub_content_visualizes:
                if k:
                    k.validate()
        if self.baggage_sub_contents:
            for k in self.baggage_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.attributes is not None:
            result['attributes'] = self.attributes
        result['baggage_sub_content_visualizes'] = []
        if self.baggage_sub_content_visualizes is not None:
            for k in self.baggage_sub_content_visualizes:
                result['baggage_sub_content_visualizes'].append(k.to_map() if k else None)
        result['baggage_sub_contents'] = []
        if self.baggage_sub_contents is not None:
            for k in self.baggage_sub_contents:
                result['baggage_sub_contents'].append(k.to_map() if k else None)
        if self.content is not None:
            result['content'] = self.content
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('attributes') is not None:
            self.attributes = m.get('attributes')
        self.baggage_sub_content_visualizes = []
        if m.get('baggage_sub_content_visualizes') is not None:
            for k in m.get('baggage_sub_content_visualizes'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContentVisualizes()
                self.baggage_sub_content_visualizes.append(temp_model.from_map(k))
        self.baggage_sub_contents = []
        if m.get('baggage_sub_contents') is not None:
            for k in m.get('baggage_sub_contents'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItemsBaggageSubContents()
                self.baggage_sub_contents.append(temp_model.from_map(k))
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips(TeaModel):
    def __init__(
        self,
        logo: str = None,
        tips_desc: str = None,
        tips_image: str = None,
    ):
        self.logo = logo
        self.tips_desc = tips_desc
        self.tips_image = tips_image

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.logo is not None:
            result['logo'] = self.logo
        if self.tips_desc is not None:
            result['tips_desc'] = self.tips_desc
        if self.tips_image is not None:
            result['tips_image'] = self.tips_image
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('logo') is not None:
            self.logo = m.get('logo')
        if m.get('tips_desc') is not None:
            self.tips_desc = m.get('tips_desc')
        if m.get('tips_image') is not None:
            self.tips_image = m.get('tips_image')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails(TeaModel):
    def __init__(
        self,
        baggage_sub_items: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems] = None,
        index: int = None,
        table_head: str = None,
        tips: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips = None,
        title: str = None,
        type: int = None,
    ):
        self.baggage_sub_items = baggage_sub_items
        self.index = index
        self.table_head = table_head
        self.tips = tips
        self.title = title
        self.type = type

    def validate(self):
        if self.baggage_sub_items:
            for k in self.baggage_sub_items:
                if k:
                    k.validate()
        if self.tips:
            self.tips.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_sub_items'] = []
        if self.baggage_sub_items is not None:
            for k in self.baggage_sub_items:
                result['baggage_sub_items'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.tips is not None:
            result['tips'] = self.tips.to_map()
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_sub_items = []
        if m.get('baggage_sub_items') is not None:
            for k in m.get('baggage_sub_items'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsBaggageSubItems()
                self.baggage_sub_items.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('tips') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetailsTips()
            self.tips = temp_model.from_map(m['tips'])
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        icon: str = None,
        title: str = None,
    ):
        self.content = content
        self.icon = icon
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.icon is not None:
            result['icon'] = self.icon
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: str = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems(TeaModel):
    def __init__(
        self,
        content: str = None,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.content = content
        self.is_struct = is_struct
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails(TeaModel):
    def __init__(
        self,
        extra_contents: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents] = None,
        index: int = None,
        refund_sub_items: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetailsRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents(TeaModel):
    def __init__(
        self,
        content: str = None,
        icon: str = None,
        title: str = None,
    ):
        self.content = content
        self.icon = icon
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.icon is not None:
            result['icon'] = self.icon
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('icon') is not None:
            self.icon = m.get('icon')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents(TeaModel):
    def __init__(
        self,
        fee_desc: str = None,
        fee_range: str = None,
        style: str = None,
    ):
        self.fee_desc = fee_desc
        self.fee_range = fee_range
        self.style = style

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fee_desc is not None:
            result['fee_desc'] = self.fee_desc
        if self.fee_range is not None:
            result['fee_range'] = self.fee_range
        if self.style is not None:
            result['style'] = self.style
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fee_desc') is not None:
            self.fee_desc = m.get('fee_desc')
        if m.get('fee_range') is not None:
            self.fee_range = m.get('fee_range')
        if m.get('style') is not None:
            self.style = m.get('style')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems(TeaModel):
    def __init__(
        self,
        content: str = None,
        is_struct: bool = None,
        ptc: str = None,
        refund_sub_contents: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents] = None,
        title: str = None,
    ):
        self.content = content
        self.is_struct = is_struct
        self.ptc = ptc
        self.refund_sub_contents = refund_sub_contents
        self.title = title

    def validate(self):
        if self.refund_sub_contents:
            for k in self.refund_sub_contents:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['content'] = self.content
        if self.is_struct is not None:
            result['is_struct'] = self.is_struct
        if self.ptc is not None:
            result['ptc'] = self.ptc
        result['refund_sub_contents'] = []
        if self.refund_sub_contents is not None:
            for k in self.refund_sub_contents:
                result['refund_sub_contents'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('content') is not None:
            self.content = m.get('content')
        if m.get('is_struct') is not None:
            self.is_struct = m.get('is_struct')
        if m.get('ptc') is not None:
            self.ptc = m.get('ptc')
        self.refund_sub_contents = []
        if m.get('refund_sub_contents') is not None:
            for k in m.get('refund_sub_contents'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItemsRefundSubContents()
                self.refund_sub_contents.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails(TeaModel):
    def __init__(
        self,
        extra_contents: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents] = None,
        index: int = None,
        refund_sub_items: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems] = None,
        table_head: str = None,
        title: str = None,
        type: int = None,
    ):
        self.extra_contents = extra_contents
        self.index = index
        self.refund_sub_items = refund_sub_items
        self.table_head = table_head
        self.title = title
        self.type = type

    def validate(self):
        if self.extra_contents:
            for k in self.extra_contents:
                if k:
                    k.validate()
        if self.refund_sub_items:
            for k in self.refund_sub_items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['extra_contents'] = []
        if self.extra_contents is not None:
            for k in self.extra_contents:
                result['extra_contents'].append(k.to_map() if k else None)
        if self.index is not None:
            result['index'] = self.index
        result['refund_sub_items'] = []
        if self.refund_sub_items is not None:
            for k in self.refund_sub_items:
                result['refund_sub_items'].append(k.to_map() if k else None)
        if self.table_head is not None:
            result['table_head'] = self.table_head
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.extra_contents = []
        if m.get('extra_contents') is not None:
            for k in m.get('extra_contents'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsExtraContents()
                self.extra_contents.append(temp_model.from_map(k))
        if m.get('index') is not None:
            self.index = m.get('index')
        self.refund_sub_items = []
        if m.get('refund_sub_items') is not None:
            for k in m.get('refund_sub_items'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetailsRefundSubItems()
                self.refund_sub_items.append(temp_model.from_map(k))
        if m.get('table_head') is not None:
            self.table_head = m.get('table_head')
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq(TeaModel):
    def __init__(
        self,
        baggage_details: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails] = None,
        change_details: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails] = None,
        refund_details: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails] = None,
    ):
        self.baggage_details = baggage_details
        self.change_details = change_details
        self.refund_details = refund_details

    def validate(self):
        if self.baggage_details:
            for k in self.baggage_details:
                if k:
                    k.validate()
        if self.change_details:
            for k in self.change_details:
                if k:
                    k.validate()
        if self.refund_details:
            for k in self.refund_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['baggage_details'] = []
        if self.baggage_details is not None:
            for k in self.baggage_details:
                result['baggage_details'].append(k.to_map() if k else None)
        result['change_details'] = []
        if self.change_details is not None:
            for k in self.change_details:
                result['change_details'].append(k.to_map() if k else None)
        result['refund_details'] = []
        if self.refund_details is not None:
            for k in self.refund_details:
                result['refund_details'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.baggage_details = []
        if m.get('baggage_details') is not None:
            for k in m.get('baggage_details'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqBaggageDetails()
                self.baggage_details.append(temp_model.from_map(k))
        self.change_details = []
        if m.get('change_details') is not None:
            for k in m.get('change_details'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqChangeDetails()
                self.change_details.append(temp_model.from_map(k))
        self.refund_details = []
        if m.get('refund_details') is not None:
            for k in m.get('refund_details'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRqRefundDetails()
                self.refund_details.append(temp_model.from_map(k))
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList(TeaModel):
    def __init__(
        self,
        passenger_type: int = None,
        ticket_price: int = None,
        upgrade_fee: int = None,
        upgrade_price: int = None,
    ):
        self.passenger_type = passenger_type
        self.ticket_price = ticket_price
        self.upgrade_fee = upgrade_fee
        self.upgrade_price = upgrade_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        if self.upgrade_price is not None:
            result['upgrade_price'] = self.upgrade_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        if m.get('upgrade_price') is not None:
            self.upgrade_price = m.get('upgrade_price')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_desc: str = None,
        cabin_discount: int = None,
        change_ota_item_rule_rq: TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq = None,
        child_cabin: str = None,
        left_num: str = None,
        modify_price_list: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList] = None,
        ota_itemid: str = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_desc = cabin_desc
        self.cabin_discount = cabin_discount
        self.change_ota_item_rule_rq = change_ota_item_rule_rq
        self.child_cabin = child_cabin
        self.left_num = left_num
        self.modify_price_list = modify_price_list
        self.ota_itemid = ota_itemid

    def validate(self):
        if self.change_ota_item_rule_rq:
            self.change_ota_item_rule_rq.validate()
        if self.modify_price_list:
            for k in self.modify_price_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_desc is not None:
            result['cabin_desc'] = self.cabin_desc
        if self.cabin_discount is not None:
            result['cabin_discount'] = self.cabin_discount
        if self.change_ota_item_rule_rq is not None:
            result['change_ota_item_rule_rq'] = self.change_ota_item_rule_rq.to_map()
        if self.child_cabin is not None:
            result['child_cabin'] = self.child_cabin
        if self.left_num is not None:
            result['left_num'] = self.left_num
        result['modify_price_list'] = []
        if self.modify_price_list is not None:
            for k in self.modify_price_list:
                result['modify_price_list'].append(k.to_map() if k else None)
        if self.ota_itemid is not None:
            result['ota_itemid'] = self.ota_itemid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_desc') is not None:
            self.cabin_desc = m.get('cabin_desc')
        if m.get('cabin_discount') is not None:
            self.cabin_discount = m.get('cabin_discount')
        if m.get('change_ota_item_rule_rq') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListChangeOtaItemRuleRq()
            self.change_ota_item_rule_rq = temp_model.from_map(m['change_ota_item_rule_rq'])
        if m.get('child_cabin') is not None:
            self.child_cabin = m.get('child_cabin')
        if m.get('left_num') is not None:
            self.left_num = m.get('left_num')
        self.modify_price_list = []
        if m.get('modify_price_list') is not None:
            for k in m.get('modify_price_list'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinListModifyPriceList()
                self.modify_price_list.append(temp_model.from_map(k))
        if m.get('ota_itemid') is not None:
            self.ota_itemid = m.get('ota_itemid')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice(TeaModel):
    def __init__(
        self,
        passenger_type: int = None,
        ticket_price: int = None,
        upgrade_fee: int = None,
        upgrade_price: int = None,
    ):
        self.passenger_type = passenger_type
        self.ticket_price = ticket_price
        self.upgrade_fee = upgrade_fee
        self.upgrade_price = upgrade_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        if self.upgrade_price is not None:
            result['upgrade_price'] = self.upgrade_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        if m.get('upgrade_price') is not None:
            self.upgrade_price = m.get('upgrade_price')
        return self


class TicketChangingEnquiryResponseBodyModuleFlightInfoList(TeaModel):
    def __init__(
        self,
        airline_info: TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo = None,
        arr_airport_info: TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo = None,
        cabin_list: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList] = None,
        carrier_airline: str = None,
        carrier_no: str = None,
        dep_airport_info: TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo = None,
        dep_city_code: str = None,
        flight_no: str = None,
        is_share: bool = None,
        lowest_cabin: str = None,
        lowest_cabin_class: str = None,
        lowest_cabin_desc: str = None,
        lowest_cabin_num: str = None,
        lowest_cabin_price: List[TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice] = None,
        modify_flight_arr_time: str = None,
        modify_flight_dep_date: str = None,
        modify_flight_dep_time: str = None,
        session_id: str = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.cabin_list = cabin_list
        self.carrier_airline = carrier_airline
        self.carrier_no = carrier_no
        self.dep_airport_info = dep_airport_info
        self.dep_city_code = dep_city_code
        self.flight_no = flight_no
        self.is_share = is_share
        self.lowest_cabin = lowest_cabin
        self.lowest_cabin_class = lowest_cabin_class
        self.lowest_cabin_desc = lowest_cabin_desc
        self.lowest_cabin_num = lowest_cabin_num
        self.lowest_cabin_price = lowest_cabin_price
        self.modify_flight_arr_time = modify_flight_arr_time
        self.modify_flight_dep_date = modify_flight_dep_date
        self.modify_flight_dep_time = modify_flight_dep_time
        self.session_id = session_id

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.cabin_list:
            for k in self.cabin_list:
                if k:
                    k.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.lowest_cabin_price:
            for k in self.lowest_cabin_price:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        result['cabin_list'] = []
        if self.cabin_list is not None:
            for k in self.cabin_list:
                result['cabin_list'].append(k.to_map() if k else None)
        if self.carrier_airline is not None:
            result['carrier_airline'] = self.carrier_airline
        if self.carrier_no is not None:
            result['carrier_no'] = self.carrier_no
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.is_share is not None:
            result['is_share'] = self.is_share
        if self.lowest_cabin is not None:
            result['lowest_cabin'] = self.lowest_cabin
        if self.lowest_cabin_class is not None:
            result['lowest_cabin_class'] = self.lowest_cabin_class
        if self.lowest_cabin_desc is not None:
            result['lowest_cabin_desc'] = self.lowest_cabin_desc
        if self.lowest_cabin_num is not None:
            result['lowest_cabin_num'] = self.lowest_cabin_num
        result['lowest_cabin_price'] = []
        if self.lowest_cabin_price is not None:
            for k in self.lowest_cabin_price:
                result['lowest_cabin_price'].append(k.to_map() if k else None)
        if self.modify_flight_arr_time is not None:
            result['modify_flight_arr_time'] = self.modify_flight_arr_time
        if self.modify_flight_dep_date is not None:
            result['modify_flight_dep_date'] = self.modify_flight_dep_date
        if self.modify_flight_dep_time is not None:
            result['modify_flight_dep_time'] = self.modify_flight_dep_time
        if self.session_id is not None:
            result['session_id'] = self.session_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        self.cabin_list = []
        if m.get('cabin_list') is not None:
            for k in m.get('cabin_list'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListCabinList()
                self.cabin_list.append(temp_model.from_map(k))
        if m.get('carrier_airline') is not None:
            self.carrier_airline = m.get('carrier_airline')
        if m.get('carrier_no') is not None:
            self.carrier_no = m.get('carrier_no')
        if m.get('dep_airport_info') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('is_share') is not None:
            self.is_share = m.get('is_share')
        if m.get('lowest_cabin') is not None:
            self.lowest_cabin = m.get('lowest_cabin')
        if m.get('lowest_cabin_class') is not None:
            self.lowest_cabin_class = m.get('lowest_cabin_class')
        if m.get('lowest_cabin_desc') is not None:
            self.lowest_cabin_desc = m.get('lowest_cabin_desc')
        if m.get('lowest_cabin_num') is not None:
            self.lowest_cabin_num = m.get('lowest_cabin_num')
        self.lowest_cabin_price = []
        if m.get('lowest_cabin_price') is not None:
            for k in m.get('lowest_cabin_price'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoListLowestCabinPrice()
                self.lowest_cabin_price.append(temp_model.from_map(k))
        if m.get('modify_flight_arr_time') is not None:
            self.modify_flight_arr_time = m.get('modify_flight_arr_time')
        if m.get('modify_flight_dep_date') is not None:
            self.modify_flight_dep_date = m.get('modify_flight_dep_date')
        if m.get('modify_flight_dep_time') is not None:
            self.modify_flight_dep_time = m.get('modify_flight_dep_time')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        return self


class TicketChangingEnquiryResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_info_list: List[TicketChangingEnquiryResponseBodyModuleFlightInfoList] = None,
    ):
        self.flight_info_list = flight_info_list

    def validate(self):
        if self.flight_info_list:
            for k in self.flight_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_info_list'] = []
        if self.flight_info_list is not None:
            for k in self.flight_info_list:
                result['flight_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_info_list = []
        if m.get('flight_info_list') is not None:
            for k in m.get('flight_info_list'):
                temp_model = TicketChangingEnquiryResponseBodyModuleFlightInfoList()
                self.flight_info_list.append(temp_model.from_map(k))
        return self


class TicketChangingEnquiryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TicketChangingEnquiryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingEnquiryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingEnquiryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TicketChangingEnquiryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingEnquiryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingFlightListHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingFlightListRequestTravelerInfoList(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        dep_city: str = None,
        name: str = None,
        type: str = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.arr_city = arr_city
        # This parameter is required.
        self.dep_city = dep_city
        self.name = name
        self.type = type
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.name is not None:
            result['name'] = self.name
        if self.type is not None:
            result['type'] = self.type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('type') is not None:
            self.type = m.get('type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TicketChangingFlightListRequest(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        dep_city: str = None,
        dep_date: str = None,
        dis_order_id: str = None,
        is_voluntary: int = None,
        traveler_info_list: List[TicketChangingFlightListRequestTravelerInfoList] = None,
    ):
        self.arr_city = arr_city
        self.dep_city = dep_city
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.dis_order_id = dis_order_id
        self.is_voluntary = is_voluntary
        self.traveler_info_list = traveler_info_list

    def validate(self):
        if self.traveler_info_list:
            for k in self.traveler_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        result['traveler_info_list'] = []
        if self.traveler_info_list is not None:
            for k in self.traveler_info_list:
                result['traveler_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        self.traveler_info_list = []
        if m.get('traveler_info_list') is not None:
            for k in m.get('traveler_info_list'):
                temp_model = TicketChangingFlightListRequestTravelerInfoList()
                self.traveler_info_list.append(temp_model.from_map(k))
        return self


class TicketChangingFlightListShrinkRequest(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        dep_city: str = None,
        dep_date: str = None,
        dis_order_id: str = None,
        is_voluntary: int = None,
        traveler_info_list_shrink: str = None,
    ):
        self.arr_city = arr_city
        self.dep_city = dep_city
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.dis_order_id = dis_order_id
        self.is_voluntary = is_voluntary
        self.traveler_info_list_shrink = traveler_info_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.is_voluntary is not None:
            result['is_voluntary'] = self.is_voluntary
        if self.traveler_info_list_shrink is not None:
            result['traveler_info_list'] = self.traveler_info_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('is_voluntary') is not None:
            self.is_voluntary = m.get('is_voluntary')
        if m.get('traveler_info_list') is not None:
            self.traveler_info_list_shrink = m.get('traveler_info_list')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo(TeaModel):
    def __init__(
        self,
        airline_code: str = None,
        airline_name: str = None,
        airline_simple_name: str = None,
    ):
        self.airline_code = airline_code
        self.airline_name = airline_name
        self.airline_simple_name = airline_simple_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_code is not None:
            result['airline_code'] = self.airline_code
        if self.airline_name is not None:
            result['airline_name'] = self.airline_name
        if self.airline_simple_name is not None:
            result['airline_simple_name'] = self.airline_simple_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_code') is not None:
            self.airline_code = m.get('airline_code')
        if m.get('airline_name') is not None:
            self.airline_name = m.get('airline_name')
        if m.get('airline_simple_name') is not None:
            self.airline_simple_name = m.get('airline_simple_name')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList(TeaModel):
    def __init__(
        self,
        passenger_type: int = None,
        ticket_price: int = None,
        upgrade_fee: int = None,
        upgrade_price: int = None,
    ):
        self.passenger_type = passenger_type
        self.ticket_price = ticket_price
        self.upgrade_fee = upgrade_fee
        self.upgrade_price = upgrade_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        if self.upgrade_price is not None:
            result['upgrade_price'] = self.upgrade_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        if m.get('upgrade_price') is not None:
            self.upgrade_price = m.get('upgrade_price')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList(TeaModel):
    def __init__(
        self,
        cabin: str = None,
        cabin_class: str = None,
        cabin_desc: str = None,
        cabin_discount: int = None,
        child_cabin: str = None,
        left_num: str = None,
        modify_price_list: List[TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList] = None,
        ota_itemid: str = None,
    ):
        self.cabin = cabin
        self.cabin_class = cabin_class
        self.cabin_desc = cabin_desc
        self.cabin_discount = cabin_discount
        self.child_cabin = child_cabin
        self.left_num = left_num
        self.modify_price_list = modify_price_list
        self.ota_itemid = ota_itemid

    def validate(self):
        if self.modify_price_list:
            for k in self.modify_price_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cabin is not None:
            result['cabin'] = self.cabin
        if self.cabin_class is not None:
            result['cabin_class'] = self.cabin_class
        if self.cabin_desc is not None:
            result['cabin_desc'] = self.cabin_desc
        if self.cabin_discount is not None:
            result['cabin_discount'] = self.cabin_discount
        if self.child_cabin is not None:
            result['child_cabin'] = self.child_cabin
        if self.left_num is not None:
            result['left_num'] = self.left_num
        result['modify_price_list'] = []
        if self.modify_price_list is not None:
            for k in self.modify_price_list:
                result['modify_price_list'].append(k.to_map() if k else None)
        if self.ota_itemid is not None:
            result['ota_itemid'] = self.ota_itemid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cabin') is not None:
            self.cabin = m.get('cabin')
        if m.get('cabin_class') is not None:
            self.cabin_class = m.get('cabin_class')
        if m.get('cabin_desc') is not None:
            self.cabin_desc = m.get('cabin_desc')
        if m.get('cabin_discount') is not None:
            self.cabin_discount = m.get('cabin_discount')
        if m.get('child_cabin') is not None:
            self.child_cabin = m.get('child_cabin')
        if m.get('left_num') is not None:
            self.left_num = m.get('left_num')
        self.modify_price_list = []
        if m.get('modify_price_list') is not None:
            for k in m.get('modify_price_list'):
                temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListCabinListModifyPriceList()
                self.modify_price_list.append(temp_model.from_map(k))
        if m.get('ota_itemid') is not None:
            self.ota_itemid = m.get('ota_itemid')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo(TeaModel):
    def __init__(
        self,
        airport_code: str = None,
        airport_name: str = None,
        city_code: str = None,
        city_name: str = None,
        terminal: str = None,
    ):
        self.airport_code = airport_code
        self.airport_name = airport_name
        self.city_code = city_code
        self.city_name = city_name
        self.terminal = terminal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airport_code is not None:
            result['airport_code'] = self.airport_code
        if self.airport_name is not None:
            result['airport_name'] = self.airport_name
        if self.city_code is not None:
            result['city_code'] = self.city_code
        if self.city_name is not None:
            result['city_name'] = self.city_name
        if self.terminal is not None:
            result['terminal'] = self.terminal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airport_code') is not None:
            self.airport_code = m.get('airport_code')
        if m.get('airport_name') is not None:
            self.airport_name = m.get('airport_name')
        if m.get('city_code') is not None:
            self.city_code = m.get('city_code')
        if m.get('city_name') is not None:
            self.city_name = m.get('city_name')
        if m.get('terminal') is not None:
            self.terminal = m.get('terminal')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice(TeaModel):
    def __init__(
        self,
        passenger_type: int = None,
        ticket_price: int = None,
        upgrade_fee: int = None,
        upgrade_price: int = None,
    ):
        self.passenger_type = passenger_type
        self.ticket_price = ticket_price
        self.upgrade_fee = upgrade_fee
        self.upgrade_price = upgrade_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_type is not None:
            result['passenger_type'] = self.passenger_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.upgrade_fee is not None:
            result['upgrade_fee'] = self.upgrade_fee
        if self.upgrade_price is not None:
            result['upgrade_price'] = self.upgrade_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_type') is not None:
            self.passenger_type = m.get('passenger_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('upgrade_fee') is not None:
            self.upgrade_fee = m.get('upgrade_fee')
        if m.get('upgrade_price') is not None:
            self.upgrade_price = m.get('upgrade_price')
        return self


class TicketChangingFlightListResponseBodyModuleFlightInfoList(TeaModel):
    def __init__(
        self,
        airline_info: TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo = None,
        arr_airport_info: TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo = None,
        cabin_list: List[TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList] = None,
        carrier_airline: str = None,
        carrier_no: str = None,
        dep_airport_info: TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo = None,
        flight_no: str = None,
        flight_size: str = None,
        flight_type: str = None,
        is_protocol: bool = None,
        is_share: bool = None,
        is_stop: bool = None,
        lowest_cabin: str = None,
        lowest_cabin_class: str = None,
        lowest_cabin_desc: str = None,
        lowest_cabin_num: str = None,
        lowest_cabin_price: List[TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice] = None,
        meal_desc: str = None,
        modify_flight_arr_time: str = None,
        modify_flight_dep_date: str = None,
        modify_flight_dep_time: str = None,
        session_id: str = None,
        stop_arr_time: str = None,
        stop_city: str = None,
        stop_dep_time: str = None,
    ):
        self.airline_info = airline_info
        self.arr_airport_info = arr_airport_info
        self.cabin_list = cabin_list
        self.carrier_airline = carrier_airline
        self.carrier_no = carrier_no
        self.dep_airport_info = dep_airport_info
        self.flight_no = flight_no
        self.flight_size = flight_size
        self.flight_type = flight_type
        self.is_protocol = is_protocol
        self.is_share = is_share
        self.is_stop = is_stop
        self.lowest_cabin = lowest_cabin
        self.lowest_cabin_class = lowest_cabin_class
        self.lowest_cabin_desc = lowest_cabin_desc
        self.lowest_cabin_num = lowest_cabin_num
        self.lowest_cabin_price = lowest_cabin_price
        self.meal_desc = meal_desc
        self.modify_flight_arr_time = modify_flight_arr_time
        self.modify_flight_dep_date = modify_flight_dep_date
        self.modify_flight_dep_time = modify_flight_dep_time
        self.session_id = session_id
        self.stop_arr_time = stop_arr_time
        self.stop_city = stop_city
        self.stop_dep_time = stop_dep_time

    def validate(self):
        if self.airline_info:
            self.airline_info.validate()
        if self.arr_airport_info:
            self.arr_airport_info.validate()
        if self.cabin_list:
            for k in self.cabin_list:
                if k:
                    k.validate()
        if self.dep_airport_info:
            self.dep_airport_info.validate()
        if self.lowest_cabin_price:
            for k in self.lowest_cabin_price:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.airline_info is not None:
            result['airline_info'] = self.airline_info.to_map()
        if self.arr_airport_info is not None:
            result['arr_airport_info'] = self.arr_airport_info.to_map()
        result['cabin_list'] = []
        if self.cabin_list is not None:
            for k in self.cabin_list:
                result['cabin_list'].append(k.to_map() if k else None)
        if self.carrier_airline is not None:
            result['carrier_airline'] = self.carrier_airline
        if self.carrier_no is not None:
            result['carrier_no'] = self.carrier_no
        if self.dep_airport_info is not None:
            result['dep_airport_info'] = self.dep_airport_info.to_map()
        if self.flight_no is not None:
            result['flight_no'] = self.flight_no
        if self.flight_size is not None:
            result['flight_size'] = self.flight_size
        if self.flight_type is not None:
            result['flight_type'] = self.flight_type
        if self.is_protocol is not None:
            result['is_protocol'] = self.is_protocol
        if self.is_share is not None:
            result['is_share'] = self.is_share
        if self.is_stop is not None:
            result['is_stop'] = self.is_stop
        if self.lowest_cabin is not None:
            result['lowest_cabin'] = self.lowest_cabin
        if self.lowest_cabin_class is not None:
            result['lowest_cabin_class'] = self.lowest_cabin_class
        if self.lowest_cabin_desc is not None:
            result['lowest_cabin_desc'] = self.lowest_cabin_desc
        if self.lowest_cabin_num is not None:
            result['lowest_cabin_num'] = self.lowest_cabin_num
        result['lowest_cabin_price'] = []
        if self.lowest_cabin_price is not None:
            for k in self.lowest_cabin_price:
                result['lowest_cabin_price'].append(k.to_map() if k else None)
        if self.meal_desc is not None:
            result['meal_desc'] = self.meal_desc
        if self.modify_flight_arr_time is not None:
            result['modify_flight_arr_time'] = self.modify_flight_arr_time
        if self.modify_flight_dep_date is not None:
            result['modify_flight_dep_date'] = self.modify_flight_dep_date
        if self.modify_flight_dep_time is not None:
            result['modify_flight_dep_time'] = self.modify_flight_dep_time
        if self.session_id is not None:
            result['session_id'] = self.session_id
        if self.stop_arr_time is not None:
            result['stop_arr_time'] = self.stop_arr_time
        if self.stop_city is not None:
            result['stop_city'] = self.stop_city
        if self.stop_dep_time is not None:
            result['stop_dep_time'] = self.stop_dep_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('airline_info') is not None:
            temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListAirlineInfo()
            self.airline_info = temp_model.from_map(m['airline_info'])
        if m.get('arr_airport_info') is not None:
            temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListArrAirportInfo()
            self.arr_airport_info = temp_model.from_map(m['arr_airport_info'])
        self.cabin_list = []
        if m.get('cabin_list') is not None:
            for k in m.get('cabin_list'):
                temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListCabinList()
                self.cabin_list.append(temp_model.from_map(k))
        if m.get('carrier_airline') is not None:
            self.carrier_airline = m.get('carrier_airline')
        if m.get('carrier_no') is not None:
            self.carrier_no = m.get('carrier_no')
        if m.get('dep_airport_info') is not None:
            temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListDepAirportInfo()
            self.dep_airport_info = temp_model.from_map(m['dep_airport_info'])
        if m.get('flight_no') is not None:
            self.flight_no = m.get('flight_no')
        if m.get('flight_size') is not None:
            self.flight_size = m.get('flight_size')
        if m.get('flight_type') is not None:
            self.flight_type = m.get('flight_type')
        if m.get('is_protocol') is not None:
            self.is_protocol = m.get('is_protocol')
        if m.get('is_share') is not None:
            self.is_share = m.get('is_share')
        if m.get('is_stop') is not None:
            self.is_stop = m.get('is_stop')
        if m.get('lowest_cabin') is not None:
            self.lowest_cabin = m.get('lowest_cabin')
        if m.get('lowest_cabin_class') is not None:
            self.lowest_cabin_class = m.get('lowest_cabin_class')
        if m.get('lowest_cabin_desc') is not None:
            self.lowest_cabin_desc = m.get('lowest_cabin_desc')
        if m.get('lowest_cabin_num') is not None:
            self.lowest_cabin_num = m.get('lowest_cabin_num')
        self.lowest_cabin_price = []
        if m.get('lowest_cabin_price') is not None:
            for k in m.get('lowest_cabin_price'):
                temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoListLowestCabinPrice()
                self.lowest_cabin_price.append(temp_model.from_map(k))
        if m.get('meal_desc') is not None:
            self.meal_desc = m.get('meal_desc')
        if m.get('modify_flight_arr_time') is not None:
            self.modify_flight_arr_time = m.get('modify_flight_arr_time')
        if m.get('modify_flight_dep_date') is not None:
            self.modify_flight_dep_date = m.get('modify_flight_dep_date')
        if m.get('modify_flight_dep_time') is not None:
            self.modify_flight_dep_time = m.get('modify_flight_dep_time')
        if m.get('session_id') is not None:
            self.session_id = m.get('session_id')
        if m.get('stop_arr_time') is not None:
            self.stop_arr_time = m.get('stop_arr_time')
        if m.get('stop_city') is not None:
            self.stop_city = m.get('stop_city')
        if m.get('stop_dep_time') is not None:
            self.stop_dep_time = m.get('stop_dep_time')
        return self


class TicketChangingFlightListResponseBodyModule(TeaModel):
    def __init__(
        self,
        flight_info_list: List[TicketChangingFlightListResponseBodyModuleFlightInfoList] = None,
    ):
        self.flight_info_list = flight_info_list

    def validate(self):
        if self.flight_info_list:
            for k in self.flight_info_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['flight_info_list'] = []
        if self.flight_info_list is not None:
            for k in self.flight_info_list:
                result['flight_info_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.flight_info_list = []
        if m.get('flight_info_list') is not None:
            for k in m.get('flight_info_list'):
                temp_model = TicketChangingFlightListResponseBodyModuleFlightInfoList()
                self.flight_info_list.append(temp_model.from_map(k))
        return self


class TicketChangingFlightListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TicketChangingFlightListResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingFlightListResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingFlightListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TicketChangingFlightListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingFlightListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TicketChangingPayHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TicketChangingPayRequest(TeaModel):
    def __init__(
        self,
        corp_pay_price: int = None,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
        extra: Dict[str, str] = None,
        personal_pay_price: int = None,
        total_pay_price: int = None,
    ):
        self.corp_pay_price = corp_pay_price
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.dis_sub_order_id = dis_sub_order_id
        self.extra = extra
        self.personal_pay_price = personal_pay_price
        # This parameter is required.
        self.total_pay_price = total_pay_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.extra is not None:
            result['extra'] = self.extra
        if self.personal_pay_price is not None:
            result['personal_pay_price'] = self.personal_pay_price
        if self.total_pay_price is not None:
            result['total_pay_price'] = self.total_pay_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('extra') is not None:
            self.extra = m.get('extra')
        if m.get('personal_pay_price') is not None:
            self.personal_pay_price = m.get('personal_pay_price')
        if m.get('total_pay_price') is not None:
            self.total_pay_price = m.get('total_pay_price')
        return self


class TicketChangingPayShrinkRequest(TeaModel):
    def __init__(
        self,
        corp_pay_price: int = None,
        dis_order_id: str = None,
        dis_sub_order_id: str = None,
        extra_shrink: str = None,
        personal_pay_price: int = None,
        total_pay_price: int = None,
    ):
        self.corp_pay_price = corp_pay_price
        # This parameter is required.
        self.dis_order_id = dis_order_id
        # This parameter is required.
        self.dis_sub_order_id = dis_sub_order_id
        self.extra_shrink = extra_shrink
        self.personal_pay_price = personal_pay_price
        # This parameter is required.
        self.total_pay_price = total_pay_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_pay_price is not None:
            result['corp_pay_price'] = self.corp_pay_price
        if self.dis_order_id is not None:
            result['dis_order_id'] = self.dis_order_id
        if self.dis_sub_order_id is not None:
            result['dis_sub_order_id'] = self.dis_sub_order_id
        if self.extra_shrink is not None:
            result['extra'] = self.extra_shrink
        if self.personal_pay_price is not None:
            result['personal_pay_price'] = self.personal_pay_price
        if self.total_pay_price is not None:
            result['total_pay_price'] = self.total_pay_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_pay_price') is not None:
            self.corp_pay_price = m.get('corp_pay_price')
        if m.get('dis_order_id') is not None:
            self.dis_order_id = m.get('dis_order_id')
        if m.get('dis_sub_order_id') is not None:
            self.dis_sub_order_id = m.get('dis_sub_order_id')
        if m.get('extra') is not None:
            self.extra_shrink = m.get('extra')
        if m.get('personal_pay_price') is not None:
            self.personal_pay_price = m.get('personal_pay_price')
        if m.get('total_pay_price') is not None:
            self.total_pay_price = m.get('total_pay_price')
        return self


class TicketChangingPayResponseBodyModule(TeaModel):
    def __init__(
        self,
        can_retry: bool = None,
        pay_price: int = None,
        pay_status: int = None,
        pay_time: str = None,
        trade_no: str = None,
    ):
        self.can_retry = can_retry
        self.pay_price = pay_price
        self.pay_status = pay_status
        self.pay_time = pay_time
        self.trade_no = trade_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.can_retry is not None:
            result['can_retry'] = self.can_retry
        if self.pay_price is not None:
            result['pay_price'] = self.pay_price
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.pay_time is not None:
            result['pay_time'] = self.pay_time
        if self.trade_no is not None:
            result['trade_no'] = self.trade_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('can_retry') is not None:
            self.can_retry = m.get('can_retry')
        if m.get('pay_price') is not None:
            self.pay_price = m.get('pay_price')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('pay_time') is not None:
            self.pay_time = m.get('pay_time')
        if m.get('trade_no') is not None:
            self.trade_no = m.get('trade_no')
        return self


class TicketChangingPayResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TicketChangingPayResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TicketChangingPayResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TicketChangingPayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TicketChangingPayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TicketChangingPayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainApplyChangeHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoSPassengerInfo(TeaModel):
    def __init__(
        self,
        passenger_cert_no: str = None,
        passenger_cert_type: str = None,
        passenger_id: str = None,
        passenger_name: str = None,
    ):
        # This parameter is required.
        self.passenger_cert_no = passenger_cert_no
        # This parameter is required.
        self.passenger_cert_type = passenger_cert_type
        # This parameter is required.
        self.passenger_id = passenger_id
        # This parameter is required.
        self.passenger_name = passenger_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_cert_no is not None:
            result['passenger_cert_no'] = self.passenger_cert_no
        if self.passenger_cert_type is not None:
            result['passenger_cert_type'] = self.passenger_cert_type
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_cert_no') is not None:
            self.passenger_cert_no = m.get('passenger_cert_no')
        if m.get('passenger_cert_type') is not None:
            self.passenger_cert_type = m.get('passenger_cert_type')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        return self


class TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoS(TeaModel):
    def __init__(
        self,
        passenger_info: TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoSPassengerInfo = None,
        seat_type: str = None,
        ticket_price: str = None,
        ticket_type: str = None,
    ):
        # This parameter is required.
        self.passenger_info = passenger_info
        # This parameter is required.
        self.seat_type = seat_type
        # This parameter is required.
        self.ticket_price = ticket_price
        # This parameter is required.
        self.ticket_type = ticket_type

    def validate(self):
        if self.passenger_info:
            self.passenger_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_info is not None:
            result['passenger_info'] = self.passenger_info.to_map()
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_type is not None:
            result['ticket_type'] = self.ticket_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_info') is not None:
            temp_model = TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoSPassengerInfo()
            self.passenger_info = temp_model.from_map(m['passenger_info'])
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_type') is not None:
            self.ticket_type = m.get('ticket_type')
        return self


class TrainApplyChangeRequestChangeTrainInfoS(TeaModel):
    def __init__(
        self,
        arr_station_code: str = None,
        change_ticket_info_s: List[TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoS] = None,
        choose_bed_s: str = None,
        choose_seat_s: str = None,
        dep_station_code: str = None,
        dep_time: str = None,
        original_dep_time: str = None,
        original_train_no: str = None,
        train_no: str = None,
    ):
        # This parameter is required.
        self.arr_station_code = arr_station_code
        # This parameter is required.
        self.change_ticket_info_s = change_ticket_info_s
        self.choose_bed_s = choose_bed_s
        self.choose_seat_s = choose_seat_s
        # This parameter is required.
        self.dep_station_code = dep_station_code
        # This parameter is required.
        self.dep_time = dep_time
        # This parameter is required.
        self.original_dep_time = original_dep_time
        # This parameter is required.
        self.original_train_no = original_train_no
        # This parameter is required.
        self.train_no = train_no

    def validate(self):
        if self.change_ticket_info_s:
            for k in self.change_ticket_info_s:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        result['change_ticket_info_s'] = []
        if self.change_ticket_info_s is not None:
            for k in self.change_ticket_info_s:
                result['change_ticket_info_s'].append(k.to_map() if k else None)
        if self.choose_bed_s is not None:
            result['choose_bed_s'] = self.choose_bed_s
        if self.choose_seat_s is not None:
            result['choose_seat_s'] = self.choose_seat_s
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.original_dep_time is not None:
            result['original_dep_time'] = self.original_dep_time
        if self.original_train_no is not None:
            result['original_train_no'] = self.original_train_no
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        self.change_ticket_info_s = []
        if m.get('change_ticket_info_s') is not None:
            for k in m.get('change_ticket_info_s'):
                temp_model = TrainApplyChangeRequestChangeTrainInfoSChangeTicketInfoS()
                self.change_ticket_info_s.append(temp_model.from_map(k))
        if m.get('choose_bed_s') is not None:
            self.choose_bed_s = m.get('choose_bed_s')
        if m.get('choose_seat_s') is not None:
            self.choose_seat_s = m.get('choose_seat_s')
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('original_dep_time') is not None:
            self.original_dep_time = m.get('original_dep_time')
        if m.get('original_train_no') is not None:
            self.original_train_no = m.get('original_train_no')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainApplyChangeRequest(TeaModel):
    def __init__(
        self,
        accept_no_seat: str = None,
        change_train_info_s: List[TrainApplyChangeRequestChangeTrainInfoS] = None,
        force_match: str = None,
        is_pay_now: bool = None,
        order_id: str = None,
        out_change_apply_id: str = None,
        out_order_id: str = None,
    ):
        self.accept_no_seat = accept_no_seat
        # This parameter is required.
        self.change_train_info_s = change_train_info_s
        self.force_match = force_match
        self.is_pay_now = is_pay_now
        # This parameter is required.
        self.order_id = order_id
        # This parameter is required.
        self.out_change_apply_id = out_change_apply_id
        # This parameter is required.
        self.out_order_id = out_order_id

    def validate(self):
        if self.change_train_info_s:
            for k in self.change_train_info_s:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accept_no_seat is not None:
            result['accept_no_seat'] = self.accept_no_seat
        result['change_train_info_s'] = []
        if self.change_train_info_s is not None:
            for k in self.change_train_info_s:
                result['change_train_info_s'].append(k.to_map() if k else None)
        if self.force_match is not None:
            result['force_match'] = self.force_match
        if self.is_pay_now is not None:
            result['is_pay_now'] = self.is_pay_now
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_change_apply_id is not None:
            result['out_change_apply_id'] = self.out_change_apply_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('accept_no_seat') is not None:
            self.accept_no_seat = m.get('accept_no_seat')
        self.change_train_info_s = []
        if m.get('change_train_info_s') is not None:
            for k in m.get('change_train_info_s'):
                temp_model = TrainApplyChangeRequestChangeTrainInfoS()
                self.change_train_info_s.append(temp_model.from_map(k))
        if m.get('force_match') is not None:
            self.force_match = m.get('force_match')
        if m.get('is_pay_now') is not None:
            self.is_pay_now = m.get('is_pay_now')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_change_apply_id') is not None:
            self.out_change_apply_id = m.get('out_change_apply_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class TrainApplyChangeShrinkRequest(TeaModel):
    def __init__(
        self,
        accept_no_seat: str = None,
        change_train_info_sshrink: str = None,
        force_match: str = None,
        is_pay_now: bool = None,
        order_id: str = None,
        out_change_apply_id: str = None,
        out_order_id: str = None,
    ):
        self.accept_no_seat = accept_no_seat
        # This parameter is required.
        self.change_train_info_sshrink = change_train_info_sshrink
        self.force_match = force_match
        self.is_pay_now = is_pay_now
        # This parameter is required.
        self.order_id = order_id
        # This parameter is required.
        self.out_change_apply_id = out_change_apply_id
        # This parameter is required.
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accept_no_seat is not None:
            result['accept_no_seat'] = self.accept_no_seat
        if self.change_train_info_sshrink is not None:
            result['change_train_info_s'] = self.change_train_info_sshrink
        if self.force_match is not None:
            result['force_match'] = self.force_match
        if self.is_pay_now is not None:
            result['is_pay_now'] = self.is_pay_now
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_change_apply_id is not None:
            result['out_change_apply_id'] = self.out_change_apply_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('accept_no_seat') is not None:
            self.accept_no_seat = m.get('accept_no_seat')
        if m.get('change_train_info_s') is not None:
            self.change_train_info_sshrink = m.get('change_train_info_s')
        if m.get('force_match') is not None:
            self.force_match = m.get('force_match')
        if m.get('is_pay_now') is not None:
            self.is_pay_now = m.get('is_pay_now')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_change_apply_id') is not None:
            self.out_change_apply_id = m.get('out_change_apply_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class TrainApplyChangeResponseBodyModule(TeaModel):
    def __init__(
        self,
        change_order_id: str = None,
        order_id: str = None,
        out_order_id: str = None,
        pay_status: str = None,
    ):
        self.change_order_id = change_order_id
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.pay_status = pay_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_order_id is not None:
            result['change_order_id'] = self.change_order_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_order_id') is not None:
            self.change_order_id = m.get('change_order_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        return self


class TrainApplyChangeResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainApplyChangeResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainApplyChangeResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainApplyChangeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainApplyChangeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainApplyChangeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainApplyRefundHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainApplyRefundRequestRefundTrainInfosRefundPassengerInfos(TeaModel):
    def __init__(
        self,
        passenger_cert_no: str = None,
        passenger_cert_type: str = None,
        passenger_id: str = None,
        passenger_name: str = None,
    ):
        # This parameter is required.
        self.passenger_cert_no = passenger_cert_no
        # This parameter is required.
        self.passenger_cert_type = passenger_cert_type
        # This parameter is required.
        self.passenger_id = passenger_id
        # This parameter is required.
        self.passenger_name = passenger_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_cert_no is not None:
            result['passenger_cert_no'] = self.passenger_cert_no
        if self.passenger_cert_type is not None:
            result['passenger_cert_type'] = self.passenger_cert_type
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_cert_no') is not None:
            self.passenger_cert_no = m.get('passenger_cert_no')
        if m.get('passenger_cert_type') is not None:
            self.passenger_cert_type = m.get('passenger_cert_type')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        return self


class TrainApplyRefundRequestRefundTrainInfos(TeaModel):
    def __init__(
        self,
        dep_time: str = None,
        refund_passenger_infos: List[TrainApplyRefundRequestRefundTrainInfosRefundPassengerInfos] = None,
        train_no: str = None,
    ):
        # This parameter is required.
        self.dep_time = dep_time
        # This parameter is required.
        self.refund_passenger_infos = refund_passenger_infos
        # This parameter is required.
        self.train_no = train_no

    def validate(self):
        if self.refund_passenger_infos:
            for k in self.refund_passenger_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        result['refund_passenger_infos'] = []
        if self.refund_passenger_infos is not None:
            for k in self.refund_passenger_infos:
                result['refund_passenger_infos'].append(k.to_map() if k else None)
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        self.refund_passenger_infos = []
        if m.get('refund_passenger_infos') is not None:
            for k in m.get('refund_passenger_infos'):
                temp_model = TrainApplyRefundRequestRefundTrainInfosRefundPassengerInfos()
                self.refund_passenger_infos.append(temp_model.from_map(k))
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainApplyRefundRequest(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        out_order_id: str = None,
        out_refund_id: str = None,
        refund_train_infos: List[TrainApplyRefundRequestRefundTrainInfos] = None,
    ):
        # This parameter is required.
        self.order_id = order_id
        # This parameter is required.
        self.out_order_id = out_order_id
        # This parameter is required.
        self.out_refund_id = out_refund_id
        # This parameter is required.
        self.refund_train_infos = refund_train_infos

    def validate(self):
        if self.refund_train_infos:
            for k in self.refund_train_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_refund_id is not None:
            result['out_refund_id'] = self.out_refund_id
        result['refund_train_infos'] = []
        if self.refund_train_infos is not None:
            for k in self.refund_train_infos:
                result['refund_train_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_refund_id') is not None:
            self.out_refund_id = m.get('out_refund_id')
        self.refund_train_infos = []
        if m.get('refund_train_infos') is not None:
            for k in m.get('refund_train_infos'):
                temp_model = TrainApplyRefundRequestRefundTrainInfos()
                self.refund_train_infos.append(temp_model.from_map(k))
        return self


class TrainApplyRefundShrinkRequest(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        out_order_id: str = None,
        out_refund_id: str = None,
        refund_train_infos_shrink: str = None,
    ):
        # This parameter is required.
        self.order_id = order_id
        # This parameter is required.
        self.out_order_id = out_order_id
        # This parameter is required.
        self.out_refund_id = out_refund_id
        # This parameter is required.
        self.refund_train_infos_shrink = refund_train_infos_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.out_refund_id is not None:
            result['out_refund_id'] = self.out_refund_id
        if self.refund_train_infos_shrink is not None:
            result['refund_train_infos'] = self.refund_train_infos_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('out_refund_id') is not None:
            self.out_refund_id = m.get('out_refund_id')
        if m.get('refund_train_infos') is not None:
            self.refund_train_infos_shrink = m.get('refund_train_infos')
        return self


class TrainApplyRefundResponseBodyModule(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        out_order_id: str = None,
    ):
        self.order_id = order_id
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class TrainApplyRefundResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainApplyRefundResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainApplyRefundResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainApplyRefundResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainApplyRefundResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainApplyRefundResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainBillSettlementQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainBillSettlementQueryRequest(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        period_end: str = None,
        period_start: str = None,
    ):
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.period_end = period_end
        # This parameter is required.
        self.period_start = period_start

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        return self


class TrainBillSettlementQueryResponseBodyModuleDataList(TeaModel):
    def __init__(
        self,
        alipay_trade_no: str = None,
        apply_arr_city_code: str = None,
        apply_arr_city_name: str = None,
        apply_dep_city_code: str = None,
        apply_dep_city_name: str = None,
        apply_extend_field: str = None,
        apply_id: str = None,
        arr_city_code: str = None,
        arr_city_name: str = None,
        arr_date: str = None,
        arr_station: str = None,
        arr_time: str = None,
        bill_record_time: str = None,
        book_time: str = None,
        booker_id: str = None,
        booker_job_no: str = None,
        booker_name: str = None,
        business_trip_result: str = None,
        cabin_max_price: float = None,
        capital_direction: str = None,
        cascade_department: str = None,
        change_affiliate_no: str = None,
        change_apply_id: str = None,
        change_fee: float = None,
        change_result: str = None,
        coach_no: str = None,
        cost_center: str = None,
        cost_center_number: str = None,
        coupon: float = None,
        dep_city_code: str = None,
        dep_city_name: str = None,
        department: str = None,
        department_id: str = None,
        dept_date: str = None,
        dept_station: str = None,
        dept_time: str = None,
        exceed_reason: str = None,
        fee_type: str = None,
        index: str = None,
        invoice_title: str = None,
        is_transfer_order: str = None,
        max_cabin: str = None,
        order_id: str = None,
        order_price: float = None,
        over_apply_id: str = None,
        payment_department_id: str = None,
        payment_department_name: str = None,
        primary_id: int = None,
        print_ticket_price: float = None,
        project_code: str = None,
        project_name: str = None,
        refund_affiliate_no: str = None,
        refund_apply_id: str = None,
        refund_fee: float = None,
        refund_reason: str = None,
        remark: str = None,
        reserve_mode: str = None,
        run_time: str = None,
        scene_id: str = None,
        scene_name: str = None,
        seat_no: str = None,
        seat_type: str = None,
        service_fee: float = None,
        settlement_fee: float = None,
        settlement_grant_fee: float = None,
        settlement_time: str = None,
        settlement_type: str = None,
        short_ticket_no: str = None,
        speed_package_fee: float = None,
        status: int = None,
        tax_rate: str = None,
        third_itinerary_id: str = None,
        ticket_corp_pay_price: str = None,
        ticket_no: str = None,
        ticket_person_pay_price: str = None,
        ticket_price: float = None,
        train_no: str = None,
        train_type: str = None,
        traveler_id: str = None,
        traveler_job_no: str = None,
        traveler_member_type_name: str = None,
        traveler_name: str = None,
        voucher_type: int = None,
    ):
        self.alipay_trade_no = alipay_trade_no
        self.apply_arr_city_code = apply_arr_city_code
        self.apply_arr_city_name = apply_arr_city_name
        self.apply_dep_city_code = apply_dep_city_code
        self.apply_dep_city_name = apply_dep_city_name
        # 审批扩展自定义字段
        self.apply_extend_field = apply_extend_field
        self.apply_id = apply_id
        self.arr_city_code = arr_city_code
        self.arr_city_name = arr_city_name
        self.arr_date = arr_date
        self.arr_station = arr_station
        self.arr_time = arr_time
        self.bill_record_time = bill_record_time
        self.book_time = book_time
        self.booker_id = booker_id
        self.booker_job_no = booker_job_no
        self.booker_name = booker_name
        self.business_trip_result = business_trip_result
        self.cabin_max_price = cabin_max_price
        self.capital_direction = capital_direction
        self.cascade_department = cascade_department
        self.change_affiliate_no = change_affiliate_no
        self.change_apply_id = change_apply_id
        self.change_fee = change_fee
        self.change_result = change_result
        self.coach_no = coach_no
        self.cost_center = cost_center
        self.cost_center_number = cost_center_number
        self.coupon = coupon
        self.dep_city_code = dep_city_code
        self.dep_city_name = dep_city_name
        self.department = department
        self.department_id = department_id
        self.dept_date = dept_date
        self.dept_station = dept_station
        self.dept_time = dept_time
        self.exceed_reason = exceed_reason
        self.fee_type = fee_type
        self.index = index
        self.invoice_title = invoice_title
        self.is_transfer_order = is_transfer_order
        self.max_cabin = max_cabin
        self.order_id = order_id
        self.order_price = order_price
        self.over_apply_id = over_apply_id
        self.payment_department_id = payment_department_id
        self.payment_department_name = payment_department_name
        self.primary_id = primary_id
        self.print_ticket_price = print_ticket_price
        self.project_code = project_code
        self.project_name = project_name
        self.refund_affiliate_no = refund_affiliate_no
        self.refund_apply_id = refund_apply_id
        self.refund_fee = refund_fee
        self.refund_reason = refund_reason
        self.remark = remark
        self.reserve_mode = reserve_mode
        self.run_time = run_time
        self.scene_id = scene_id
        self.scene_name = scene_name
        self.seat_no = seat_no
        self.seat_type = seat_type
        self.service_fee = service_fee
        self.settlement_fee = settlement_fee
        self.settlement_grant_fee = settlement_grant_fee
        self.settlement_time = settlement_time
        self.settlement_type = settlement_type
        self.short_ticket_no = short_ticket_no
        self.speed_package_fee = speed_package_fee
        self.status = status
        # 税率
        self.tax_rate = tax_rate
        self.third_itinerary_id = third_itinerary_id
        self.ticket_corp_pay_price = ticket_corp_pay_price
        self.ticket_no = ticket_no
        self.ticket_person_pay_price = ticket_person_pay_price
        self.ticket_price = ticket_price
        self.train_no = train_no
        self.train_type = train_type
        self.traveler_id = traveler_id
        self.traveler_job_no = traveler_job_no
        self.traveler_member_type_name = traveler_member_type_name
        self.traveler_name = traveler_name
        self.voucher_type = voucher_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.alipay_trade_no is not None:
            result['alipay_trade_no'] = self.alipay_trade_no
        if self.apply_arr_city_code is not None:
            result['apply_arr_city_code'] = self.apply_arr_city_code
        if self.apply_arr_city_name is not None:
            result['apply_arr_city_name'] = self.apply_arr_city_name
        if self.apply_dep_city_code is not None:
            result['apply_dep_city_code'] = self.apply_dep_city_code
        if self.apply_dep_city_name is not None:
            result['apply_dep_city_name'] = self.apply_dep_city_name
        if self.apply_extend_field is not None:
            result['apply_extend_field'] = self.apply_extend_field
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_city_code is not None:
            result['arr_city_code'] = self.arr_city_code
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_date is not None:
            result['arr_date'] = self.arr_date
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.bill_record_time is not None:
            result['bill_record_time'] = self.bill_record_time
        if self.book_time is not None:
            result['book_time'] = self.book_time
        if self.booker_id is not None:
            result['booker_id'] = self.booker_id
        if self.booker_job_no is not None:
            result['booker_job_no'] = self.booker_job_no
        if self.booker_name is not None:
            result['booker_name'] = self.booker_name
        if self.business_trip_result is not None:
            result['business_trip_result'] = self.business_trip_result
        if self.cabin_max_price is not None:
            result['cabin_max_price'] = self.cabin_max_price
        if self.capital_direction is not None:
            result['capital_direction'] = self.capital_direction
        if self.cascade_department is not None:
            result['cascade_department'] = self.cascade_department
        if self.change_affiliate_no is not None:
            result['change_affiliate_no'] = self.change_affiliate_no
        if self.change_apply_id is not None:
            result['change_apply_id'] = self.change_apply_id
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.change_result is not None:
            result['change_result'] = self.change_result
        if self.coach_no is not None:
            result['coach_no'] = self.coach_no
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.coupon is not None:
            result['coupon'] = self.coupon
        if self.dep_city_code is not None:
            result['dep_city_code'] = self.dep_city_code
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.department is not None:
            result['department'] = self.department
        if self.department_id is not None:
            result['department_id'] = self.department_id
        if self.dept_date is not None:
            result['dept_date'] = self.dept_date
        if self.dept_station is not None:
            result['dept_station'] = self.dept_station
        if self.dept_time is not None:
            result['dept_time'] = self.dept_time
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.fee_type is not None:
            result['fee_type'] = self.fee_type
        if self.index is not None:
            result['index'] = self.index
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.is_transfer_order is not None:
            result['is_transfer_order'] = self.is_transfer_order
        if self.max_cabin is not None:
            result['max_cabin'] = self.max_cabin
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_price is not None:
            result['order_price'] = self.order_price
        if self.over_apply_id is not None:
            result['over_apply_id'] = self.over_apply_id
        if self.payment_department_id is not None:
            result['payment_department_id'] = self.payment_department_id
        if self.payment_department_name is not None:
            result['payment_department_name'] = self.payment_department_name
        if self.primary_id is not None:
            result['primary_id'] = self.primary_id
        if self.print_ticket_price is not None:
            result['print_ticket_price'] = self.print_ticket_price
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_name is not None:
            result['project_name'] = self.project_name
        if self.refund_affiliate_no is not None:
            result['refund_affiliate_no'] = self.refund_affiliate_no
        if self.refund_apply_id is not None:
            result['refund_apply_id'] = self.refund_apply_id
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_reason is not None:
            result['refund_reason'] = self.refund_reason
        if self.remark is not None:
            result['remark'] = self.remark
        if self.reserve_mode is not None:
            result['reserve_mode'] = self.reserve_mode
        if self.run_time is not None:
            result['run_time'] = self.run_time
        if self.scene_id is not None:
            result['scene_id'] = self.scene_id
        if self.scene_name is not None:
            result['scene_name'] = self.scene_name
        if self.seat_no is not None:
            result['seat_no'] = self.seat_no
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.settlement_fee is not None:
            result['settlement_fee'] = self.settlement_fee
        if self.settlement_grant_fee is not None:
            result['settlement_grant_fee'] = self.settlement_grant_fee
        if self.settlement_time is not None:
            result['settlement_time'] = self.settlement_time
        if self.settlement_type is not None:
            result['settlement_type'] = self.settlement_type
        if self.short_ticket_no is not None:
            result['short_ticket_no'] = self.short_ticket_no
        if self.speed_package_fee is not None:
            result['speed_package_fee'] = self.speed_package_fee
        if self.status is not None:
            result['status'] = self.status
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.third_itinerary_id is not None:
            result['third_itinerary_id'] = self.third_itinerary_id
        if self.ticket_corp_pay_price is not None:
            result['ticket_corp_pay_price'] = self.ticket_corp_pay_price
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_person_pay_price is not None:
            result['ticket_person_pay_price'] = self.ticket_person_pay_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.train_no is not None:
            result['train_no'] = self.train_no
        if self.train_type is not None:
            result['train_type'] = self.train_type
        if self.traveler_id is not None:
            result['traveler_id'] = self.traveler_id
        if self.traveler_job_no is not None:
            result['traveler_job_no'] = self.traveler_job_no
        if self.traveler_member_type_name is not None:
            result['traveler_member_type_name'] = self.traveler_member_type_name
        if self.traveler_name is not None:
            result['traveler_name'] = self.traveler_name
        if self.voucher_type is not None:
            result['voucher_type'] = self.voucher_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('alipay_trade_no') is not None:
            self.alipay_trade_no = m.get('alipay_trade_no')
        if m.get('apply_arr_city_code') is not None:
            self.apply_arr_city_code = m.get('apply_arr_city_code')
        if m.get('apply_arr_city_name') is not None:
            self.apply_arr_city_name = m.get('apply_arr_city_name')
        if m.get('apply_dep_city_code') is not None:
            self.apply_dep_city_code = m.get('apply_dep_city_code')
        if m.get('apply_dep_city_name') is not None:
            self.apply_dep_city_name = m.get('apply_dep_city_name')
        if m.get('apply_extend_field') is not None:
            self.apply_extend_field = m.get('apply_extend_field')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_city_code') is not None:
            self.arr_city_code = m.get('arr_city_code')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_date') is not None:
            self.arr_date = m.get('arr_date')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('bill_record_time') is not None:
            self.bill_record_time = m.get('bill_record_time')
        if m.get('book_time') is not None:
            self.book_time = m.get('book_time')
        if m.get('booker_id') is not None:
            self.booker_id = m.get('booker_id')
        if m.get('booker_job_no') is not None:
            self.booker_job_no = m.get('booker_job_no')
        if m.get('booker_name') is not None:
            self.booker_name = m.get('booker_name')
        if m.get('business_trip_result') is not None:
            self.business_trip_result = m.get('business_trip_result')
        if m.get('cabin_max_price') is not None:
            self.cabin_max_price = m.get('cabin_max_price')
        if m.get('capital_direction') is not None:
            self.capital_direction = m.get('capital_direction')
        if m.get('cascade_department') is not None:
            self.cascade_department = m.get('cascade_department')
        if m.get('change_affiliate_no') is not None:
            self.change_affiliate_no = m.get('change_affiliate_no')
        if m.get('change_apply_id') is not None:
            self.change_apply_id = m.get('change_apply_id')
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('change_result') is not None:
            self.change_result = m.get('change_result')
        if m.get('coach_no') is not None:
            self.coach_no = m.get('coach_no')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('coupon') is not None:
            self.coupon = m.get('coupon')
        if m.get('dep_city_code') is not None:
            self.dep_city_code = m.get('dep_city_code')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('department_id') is not None:
            self.department_id = m.get('department_id')
        if m.get('dept_date') is not None:
            self.dept_date = m.get('dept_date')
        if m.get('dept_station') is not None:
            self.dept_station = m.get('dept_station')
        if m.get('dept_time') is not None:
            self.dept_time = m.get('dept_time')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('fee_type') is not None:
            self.fee_type = m.get('fee_type')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('is_transfer_order') is not None:
            self.is_transfer_order = m.get('is_transfer_order')
        if m.get('max_cabin') is not None:
            self.max_cabin = m.get('max_cabin')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_price') is not None:
            self.order_price = m.get('order_price')
        if m.get('over_apply_id') is not None:
            self.over_apply_id = m.get('over_apply_id')
        if m.get('payment_department_id') is not None:
            self.payment_department_id = m.get('payment_department_id')
        if m.get('payment_department_name') is not None:
            self.payment_department_name = m.get('payment_department_name')
        if m.get('primary_id') is not None:
            self.primary_id = m.get('primary_id')
        if m.get('print_ticket_price') is not None:
            self.print_ticket_price = m.get('print_ticket_price')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_name') is not None:
            self.project_name = m.get('project_name')
        if m.get('refund_affiliate_no') is not None:
            self.refund_affiliate_no = m.get('refund_affiliate_no')
        if m.get('refund_apply_id') is not None:
            self.refund_apply_id = m.get('refund_apply_id')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_reason') is not None:
            self.refund_reason = m.get('refund_reason')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('reserve_mode') is not None:
            self.reserve_mode = m.get('reserve_mode')
        if m.get('run_time') is not None:
            self.run_time = m.get('run_time')
        if m.get('scene_id') is not None:
            self.scene_id = m.get('scene_id')
        if m.get('scene_name') is not None:
            self.scene_name = m.get('scene_name')
        if m.get('seat_no') is not None:
            self.seat_no = m.get('seat_no')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('settlement_fee') is not None:
            self.settlement_fee = m.get('settlement_fee')
        if m.get('settlement_grant_fee') is not None:
            self.settlement_grant_fee = m.get('settlement_grant_fee')
        if m.get('settlement_time') is not None:
            self.settlement_time = m.get('settlement_time')
        if m.get('settlement_type') is not None:
            self.settlement_type = m.get('settlement_type')
        if m.get('short_ticket_no') is not None:
            self.short_ticket_no = m.get('short_ticket_no')
        if m.get('speed_package_fee') is not None:
            self.speed_package_fee = m.get('speed_package_fee')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('third_itinerary_id') is not None:
            self.third_itinerary_id = m.get('third_itinerary_id')
        if m.get('ticket_corp_pay_price') is not None:
            self.ticket_corp_pay_price = m.get('ticket_corp_pay_price')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_person_pay_price') is not None:
            self.ticket_person_pay_price = m.get('ticket_person_pay_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        if m.get('train_type') is not None:
            self.train_type = m.get('train_type')
        if m.get('traveler_id') is not None:
            self.traveler_id = m.get('traveler_id')
        if m.get('traveler_job_no') is not None:
            self.traveler_job_no = m.get('traveler_job_no')
        if m.get('traveler_member_type_name') is not None:
            self.traveler_member_type_name = m.get('traveler_member_type_name')
        if m.get('traveler_name') is not None:
            self.traveler_name = m.get('traveler_name')
        if m.get('voucher_type') is not None:
            self.voucher_type = m.get('voucher_type')
        return self


class TrainBillSettlementQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        category: int = None,
        corp_id: str = None,
        data_list: List[TrainBillSettlementQueryResponseBodyModuleDataList] = None,
        period_end: str = None,
        period_start: str = None,
        total_num: int = None,
    ):
        self.category = category
        self.corp_id = corp_id
        self.data_list = data_list
        self.period_end = period_end
        self.period_start = period_start
        self.total_num = total_num

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['category'] = self.category
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.period_end is not None:
            result['period_end'] = self.period_end
        if self.period_start is not None:
            result['period_start'] = self.period_start
        if self.total_num is not None:
            result['total_num'] = self.total_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category') is not None:
            self.category = m.get('category')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = TrainBillSettlementQueryResponseBodyModuleDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('period_end') is not None:
            self.period_end = m.get('period_end')
        if m.get('period_start') is not None:
            self.period_start = m.get('period_start')
        if m.get('total_num') is not None:
            self.total_num = m.get('total_num')
        return self


class TrainBillSettlementQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainBillSettlementQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainBillSettlementQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainBillSettlementQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainBillSettlementQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainBillSettlementQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainExceedApplyQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainExceedApplyQueryRequest(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        business_instance_id: str = None,
    ):
        self.apply_id = apply_id
        self.business_instance_id = business_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.business_instance_id is not None:
            result['business_instance_id'] = self.business_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('business_instance_id') is not None:
            self.business_instance_id = m.get('business_instance_id')
        return self


class TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO(TeaModel):
    def __init__(
        self,
        arr_city: str = None,
        arr_city_name: str = None,
        arr_station: str = None,
        arr_time: str = None,
        dep_city: str = None,
        dep_city_name: str = None,
        dep_station: str = None,
        dep_time: str = None,
        price: int = None,
        seat_name: str = None,
        train_no: str = None,
        train_type_desc: str = None,
        type: int = None,
    ):
        self.arr_city = arr_city
        self.arr_city_name = arr_city_name
        self.arr_station = arr_station
        self.arr_time = arr_time
        self.dep_city = dep_city
        self.dep_city_name = dep_city_name
        self.dep_station = dep_station
        self.dep_time = dep_time
        self.price = price
        self.seat_name = seat_name
        self.train_no = train_no
        self.train_type_desc = train_type_desc
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_name is not None:
            result['arr_city_name'] = self.arr_city_name
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_name is not None:
            result['dep_city_name'] = self.dep_city_name
        if self.dep_station is not None:
            result['dep_station'] = self.dep_station
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.price is not None:
            result['price'] = self.price
        if self.seat_name is not None:
            result['seat_name'] = self.seat_name
        if self.train_no is not None:
            result['train_no'] = self.train_no
        if self.train_type_desc is not None:
            result['train_type_desc'] = self.train_type_desc
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_name') is not None:
            self.arr_city_name = m.get('arr_city_name')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_name') is not None:
            self.dep_city_name = m.get('dep_city_name')
        if m.get('dep_station') is not None:
            self.dep_station = m.get('dep_station')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('seat_name') is not None:
            self.seat_name = m.get('seat_name')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        if m.get('train_type_desc') is not None:
            self.train_type_desc = m.get('train_type_desc')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TrainExceedApplyQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        apply_intention_info_do: TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO = None,
        btrip_cause: str = None,
        corp_id: str = None,
        exceed_reason: str = None,
        exceed_type: int = None,
        origin_standard: str = None,
        status: int = None,
        submit_time: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_corp_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_id = apply_id
        self.apply_intention_info_do = apply_intention_info_do
        self.btrip_cause = btrip_cause
        self.corp_id = corp_id
        self.exceed_reason = exceed_reason
        self.exceed_type = exceed_type
        self.origin_standard = origin_standard
        self.status = status
        self.submit_time = submit_time
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_corp_id = thirdpart_corp_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.apply_intention_info_do:
            self.apply_intention_info_do.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.apply_intention_info_do is not None:
            result['apply_intention_info_d_o'] = self.apply_intention_info_do.to_map()
        if self.btrip_cause is not None:
            result['btrip_cause'] = self.btrip_cause
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.exceed_reason is not None:
            result['exceed_reason'] = self.exceed_reason
        if self.exceed_type is not None:
            result['exceed_type'] = self.exceed_type
        if self.origin_standard is not None:
            result['origin_standard'] = self.origin_standard
        if self.status is not None:
            result['status'] = self.status
        if self.submit_time is not None:
            result['submit_time'] = self.submit_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('apply_intention_info_d_o') is not None:
            temp_model = TrainExceedApplyQueryResponseBodyModuleApplyIntentionInfoDO()
            self.apply_intention_info_do = temp_model.from_map(m['apply_intention_info_d_o'])
        if m.get('btrip_cause') is not None:
            self.btrip_cause = m.get('btrip_cause')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('exceed_reason') is not None:
            self.exceed_reason = m.get('exceed_reason')
        if m.get('exceed_type') is not None:
            self.exceed_type = m.get('exceed_type')
        if m.get('origin_standard') is not None:
            self.origin_standard = m.get('origin_standard')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('submit_time') is not None:
            self.submit_time = m.get('submit_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class TrainExceedApplyQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainExceedApplyQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainExceedApplyQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainExceedApplyQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainExceedApplyQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainExceedApplyQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainFeeCalculateChangeHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainFeeCalculateChangeRequestChangeTrainDetailsPassengerInfo(TeaModel):
    def __init__(
        self,
        passenger_cert_no: str = None,
        passenger_cert_type: str = None,
        passenger_name: str = None,
    ):
        # This parameter is required.
        self.passenger_cert_no = passenger_cert_no
        # This parameter is required.
        self.passenger_cert_type = passenger_cert_type
        # This parameter is required.
        self.passenger_name = passenger_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_cert_no is not None:
            result['passenger_cert_no'] = self.passenger_cert_no
        if self.passenger_cert_type is not None:
            result['passenger_cert_type'] = self.passenger_cert_type
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_cert_no') is not None:
            self.passenger_cert_no = m.get('passenger_cert_no')
        if m.get('passenger_cert_type') is not None:
            self.passenger_cert_type = m.get('passenger_cert_type')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        return self


class TrainFeeCalculateChangeRequestChangeTrainDetails(TeaModel):
    def __init__(
        self,
        arr_station_code: str = None,
        dep_station_code: str = None,
        dep_time: str = None,
        original_dep_time: str = None,
        original_train_no: str = None,
        passenger_info: TrainFeeCalculateChangeRequestChangeTrainDetailsPassengerInfo = None,
        seat_type: str = None,
        train_no: str = None,
    ):
        # This parameter is required.
        self.arr_station_code = arr_station_code
        # This parameter is required.
        self.dep_station_code = dep_station_code
        # This parameter is required.
        self.dep_time = dep_time
        # This parameter is required.
        self.original_dep_time = original_dep_time
        # This parameter is required.
        self.original_train_no = original_train_no
        # This parameter is required.
        self.passenger_info = passenger_info
        # This parameter is required.
        self.seat_type = seat_type
        # This parameter is required.
        self.train_no = train_no

    def validate(self):
        if self.passenger_info:
            self.passenger_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.original_dep_time is not None:
            result['original_dep_time'] = self.original_dep_time
        if self.original_train_no is not None:
            result['original_train_no'] = self.original_train_no
        if self.passenger_info is not None:
            result['passenger_info'] = self.passenger_info.to_map()
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('original_dep_time') is not None:
            self.original_dep_time = m.get('original_dep_time')
        if m.get('original_train_no') is not None:
            self.original_train_no = m.get('original_train_no')
        if m.get('passenger_info') is not None:
            temp_model = TrainFeeCalculateChangeRequestChangeTrainDetailsPassengerInfo()
            self.passenger_info = temp_model.from_map(m['passenger_info'])
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainFeeCalculateChangeRequest(TeaModel):
    def __init__(
        self,
        change_train_details: List[TrainFeeCalculateChangeRequestChangeTrainDetails] = None,
        distribute_order_id: str = None,
        order_id: str = None,
    ):
        # This parameter is required.
        self.change_train_details = change_train_details
        # This parameter is required.
        self.distribute_order_id = distribute_order_id
        # This parameter is required.
        self.order_id = order_id

    def validate(self):
        if self.change_train_details:
            for k in self.change_train_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['change_train_details'] = []
        if self.change_train_details is not None:
            for k in self.change_train_details:
                result['change_train_details'].append(k.to_map() if k else None)
        if self.distribute_order_id is not None:
            result['distribute_order_id'] = self.distribute_order_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.change_train_details = []
        if m.get('change_train_details') is not None:
            for k in m.get('change_train_details'):
                temp_model = TrainFeeCalculateChangeRequestChangeTrainDetails()
                self.change_train_details.append(temp_model.from_map(k))
        if m.get('distribute_order_id') is not None:
            self.distribute_order_id = m.get('distribute_order_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class TrainFeeCalculateChangeShrinkRequest(TeaModel):
    def __init__(
        self,
        change_train_details_shrink: str = None,
        distribute_order_id: str = None,
        order_id: str = None,
    ):
        # This parameter is required.
        self.change_train_details_shrink = change_train_details_shrink
        # This parameter is required.
        self.distribute_order_id = distribute_order_id
        # This parameter is required.
        self.order_id = order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_train_details_shrink is not None:
            result['change_train_details'] = self.change_train_details_shrink
        if self.distribute_order_id is not None:
            result['distribute_order_id'] = self.distribute_order_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_train_details') is not None:
            self.change_train_details_shrink = m.get('change_train_details')
        if m.get('distribute_order_id') is not None:
            self.distribute_order_id = m.get('distribute_order_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetailsPassengerInfo(TeaModel):
    def __init__(
        self,
        passenger_cert_no: str = None,
        passenger_cert_type: str = None,
        passenger_id: str = None,
        passenger_name: str = None,
    ):
        self.passenger_cert_no = passenger_cert_no
        self.passenger_cert_type = passenger_cert_type
        self.passenger_id = passenger_id
        self.passenger_name = passenger_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_cert_no is not None:
            result['passenger_cert_no'] = self.passenger_cert_no
        if self.passenger_cert_type is not None:
            result['passenger_cert_type'] = self.passenger_cert_type
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_cert_no') is not None:
            self.passenger_cert_no = m.get('passenger_cert_no')
        if m.get('passenger_cert_type') is not None:
            self.passenger_cert_type = m.get('passenger_cert_type')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        return self


class TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetails(TeaModel):
    def __init__(
        self,
        change_fee: int = None,
        change_rate: int = None,
        change_refund_fee: int = None,
        change_refund_rate: int = None,
        passenger_info: TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetailsPassengerInfo = None,
        seat_type: str = None,
        ticket_price: int = None,
    ):
        self.change_fee = change_fee
        self.change_rate = change_rate
        self.change_refund_fee = change_refund_fee
        self.change_refund_rate = change_refund_rate
        self.passenger_info = passenger_info
        self.seat_type = seat_type
        self.ticket_price = ticket_price

    def validate(self):
        if self.passenger_info:
            self.passenger_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_fee is not None:
            result['change_fee'] = self.change_fee
        if self.change_rate is not None:
            result['change_rate'] = self.change_rate
        if self.change_refund_fee is not None:
            result['change_refund_fee'] = self.change_refund_fee
        if self.change_refund_rate is not None:
            result['change_refund_rate'] = self.change_refund_rate
        if self.passenger_info is not None:
            result['passenger_info'] = self.passenger_info.to_map()
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_fee') is not None:
            self.change_fee = m.get('change_fee')
        if m.get('change_rate') is not None:
            self.change_rate = m.get('change_rate')
        if m.get('change_refund_fee') is not None:
            self.change_refund_fee = m.get('change_refund_fee')
        if m.get('change_refund_rate') is not None:
            self.change_refund_rate = m.get('change_refund_rate')
        if m.get('passenger_info') is not None:
            temp_model = TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetailsPassengerInfo()
            self.passenger_info = temp_model.from_map(m['passenger_info'])
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        return self


class TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetails(TeaModel):
    def __init__(
        self,
        arr_station_code: str = None,
        change_ticket_details: List[TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetails] = None,
        dep_station_code: str = None,
        dep_time: str = None,
        train_no: str = None,
    ):
        self.arr_station_code = arr_station_code
        self.change_ticket_details = change_ticket_details
        self.dep_station_code = dep_station_code
        self.dep_time = dep_time
        self.train_no = train_no

    def validate(self):
        if self.change_ticket_details:
            for k in self.change_ticket_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        result['change_ticket_details'] = []
        if self.change_ticket_details is not None:
            for k in self.change_ticket_details:
                result['change_ticket_details'].append(k.to_map() if k else None)
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        self.change_ticket_details = []
        if m.get('change_ticket_details') is not None:
            for k in m.get('change_ticket_details'):
                temp_model = TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetailsChangeTicketDetails()
                self.change_ticket_details.append(temp_model.from_map(k))
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainFeeCalculateChangeResponseBodyModule(TeaModel):
    def __init__(
        self,
        change_train_details: List[TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetails] = None,
        distribute_order_id: str = None,
        order_id: str = None,
    ):
        self.change_train_details = change_train_details
        self.distribute_order_id = distribute_order_id
        self.order_id = order_id

    def validate(self):
        if self.change_train_details:
            for k in self.change_train_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['change_train_details'] = []
        if self.change_train_details is not None:
            for k in self.change_train_details:
                result['change_train_details'].append(k.to_map() if k else None)
        if self.distribute_order_id is not None:
            result['distribute_order_id'] = self.distribute_order_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.change_train_details = []
        if m.get('change_train_details') is not None:
            for k in m.get('change_train_details'):
                temp_model = TrainFeeCalculateChangeResponseBodyModuleChangeTrainDetails()
                self.change_train_details.append(temp_model.from_map(k))
        if m.get('distribute_order_id') is not None:
            self.distribute_order_id = m.get('distribute_order_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class TrainFeeCalculateChangeResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainFeeCalculateChangeResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainFeeCalculateChangeResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainFeeCalculateChangeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainFeeCalculateChangeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainFeeCalculateChangeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainFeeCalculateRefundHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainFeeCalculateRefundRequestRefundTrainInfosRefundPassengerInfos(TeaModel):
    def __init__(
        self,
        passenger_cert_no: str = None,
        passenger_cert_type: str = None,
        passenger_id: str = None,
        passenger_name: str = None,
    ):
        # This parameter is required.
        self.passenger_cert_no = passenger_cert_no
        # This parameter is required.
        self.passenger_cert_type = passenger_cert_type
        # This parameter is required.
        self.passenger_id = passenger_id
        # This parameter is required.
        self.passenger_name = passenger_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_cert_no is not None:
            result['passenger_cert_no'] = self.passenger_cert_no
        if self.passenger_cert_type is not None:
            result['passenger_cert_type'] = self.passenger_cert_type
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_cert_no') is not None:
            self.passenger_cert_no = m.get('passenger_cert_no')
        if m.get('passenger_cert_type') is not None:
            self.passenger_cert_type = m.get('passenger_cert_type')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        return self


class TrainFeeCalculateRefundRequestRefundTrainInfos(TeaModel):
    def __init__(
        self,
        arr_station_code: str = None,
        dep_station_code: str = None,
        dep_time: str = None,
        refund_passenger_infos: List[TrainFeeCalculateRefundRequestRefundTrainInfosRefundPassengerInfos] = None,
        train_no: str = None,
    ):
        # This parameter is required.
        self.arr_station_code = arr_station_code
        # This parameter is required.
        self.dep_station_code = dep_station_code
        # This parameter is required.
        self.dep_time = dep_time
        # This parameter is required.
        self.refund_passenger_infos = refund_passenger_infos
        # This parameter is required.
        self.train_no = train_no

    def validate(self):
        if self.refund_passenger_infos:
            for k in self.refund_passenger_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        result['refund_passenger_infos'] = []
        if self.refund_passenger_infos is not None:
            for k in self.refund_passenger_infos:
                result['refund_passenger_infos'].append(k.to_map() if k else None)
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        self.refund_passenger_infos = []
        if m.get('refund_passenger_infos') is not None:
            for k in m.get('refund_passenger_infos'):
                temp_model = TrainFeeCalculateRefundRequestRefundTrainInfosRefundPassengerInfos()
                self.refund_passenger_infos.append(temp_model.from_map(k))
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainFeeCalculateRefundRequest(TeaModel):
    def __init__(
        self,
        distribute_order_id: str = None,
        order_id: str = None,
        refund_train_infos: List[TrainFeeCalculateRefundRequestRefundTrainInfos] = None,
    ):
        # This parameter is required.
        self.distribute_order_id = distribute_order_id
        # This parameter is required.
        self.order_id = order_id
        # This parameter is required.
        self.refund_train_infos = refund_train_infos

    def validate(self):
        if self.refund_train_infos:
            for k in self.refund_train_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.distribute_order_id is not None:
            result['distribute_order_id'] = self.distribute_order_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        result['refund_train_infos'] = []
        if self.refund_train_infos is not None:
            for k in self.refund_train_infos:
                result['refund_train_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('distribute_order_id') is not None:
            self.distribute_order_id = m.get('distribute_order_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        self.refund_train_infos = []
        if m.get('refund_train_infos') is not None:
            for k in m.get('refund_train_infos'):
                temp_model = TrainFeeCalculateRefundRequestRefundTrainInfos()
                self.refund_train_infos.append(temp_model.from_map(k))
        return self


class TrainFeeCalculateRefundShrinkRequest(TeaModel):
    def __init__(
        self,
        distribute_order_id: str = None,
        order_id: str = None,
        refund_train_infos_shrink: str = None,
    ):
        # This parameter is required.
        self.distribute_order_id = distribute_order_id
        # This parameter is required.
        self.order_id = order_id
        # This parameter is required.
        self.refund_train_infos_shrink = refund_train_infos_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.distribute_order_id is not None:
            result['distribute_order_id'] = self.distribute_order_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.refund_train_infos_shrink is not None:
            result['refund_train_infos'] = self.refund_train_infos_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('distribute_order_id') is not None:
            self.distribute_order_id = m.get('distribute_order_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('refund_train_infos') is not None:
            self.refund_train_infos_shrink = m.get('refund_train_infos')
        return self


class TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetailsPassengerInfo(TeaModel):
    def __init__(
        self,
        passenger_cert_no: str = None,
        passenger_cert_type: str = None,
        passenger_id: str = None,
        passenger_name: str = None,
    ):
        self.passenger_cert_no = passenger_cert_no
        self.passenger_cert_type = passenger_cert_type
        self.passenger_id = passenger_id
        self.passenger_name = passenger_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_cert_no is not None:
            result['passenger_cert_no'] = self.passenger_cert_no
        if self.passenger_cert_type is not None:
            result['passenger_cert_type'] = self.passenger_cert_type
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_cert_no') is not None:
            self.passenger_cert_no = m.get('passenger_cert_no')
        if m.get('passenger_cert_type') is not None:
            self.passenger_cert_type = m.get('passenger_cert_type')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        return self


class TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetails(TeaModel):
    def __init__(
        self,
        can_refund: bool = None,
        passenger_info: TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetailsPassengerInfo = None,
        refund_cost_fee: int = None,
        refund_price: int = None,
        refund_rate: int = None,
        ticket_price: int = None,
    ):
        self.can_refund = can_refund
        self.passenger_info = passenger_info
        self.refund_cost_fee = refund_cost_fee
        self.refund_price = refund_price
        self.refund_rate = refund_rate
        self.ticket_price = ticket_price

    def validate(self):
        if self.passenger_info:
            self.passenger_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.can_refund is not None:
            result['can_refund'] = self.can_refund
        if self.passenger_info is not None:
            result['passenger_info'] = self.passenger_info.to_map()
        if self.refund_cost_fee is not None:
            result['refund_cost_fee'] = self.refund_cost_fee
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        if self.refund_rate is not None:
            result['refund_rate'] = self.refund_rate
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('can_refund') is not None:
            self.can_refund = m.get('can_refund')
        if m.get('passenger_info') is not None:
            temp_model = TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetailsPassengerInfo()
            self.passenger_info = temp_model.from_map(m['passenger_info'])
        if m.get('refund_cost_fee') is not None:
            self.refund_cost_fee = m.get('refund_cost_fee')
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        if m.get('refund_rate') is not None:
            self.refund_rate = m.get('refund_rate')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        return self


class TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetails(TeaModel):
    def __init__(
        self,
        arr_station_code: str = None,
        dep_station_code: str = None,
        dep_time: str = None,
        refund_ticket_details: List[TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetails] = None,
        train_no: str = None,
    ):
        self.arr_station_code = arr_station_code
        self.dep_station_code = dep_station_code
        self.dep_time = dep_time
        self.refund_ticket_details = refund_ticket_details
        self.train_no = train_no

    def validate(self):
        if self.refund_ticket_details:
            for k in self.refund_ticket_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        result['refund_ticket_details'] = []
        if self.refund_ticket_details is not None:
            for k in self.refund_ticket_details:
                result['refund_ticket_details'].append(k.to_map() if k else None)
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        self.refund_ticket_details = []
        if m.get('refund_ticket_details') is not None:
            for k in m.get('refund_ticket_details'):
                temp_model = TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetailsRefundTicketDetails()
                self.refund_ticket_details.append(temp_model.from_map(k))
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainFeeCalculateRefundResponseBodyModule(TeaModel):
    def __init__(
        self,
        distribute_order_id: str = None,
        order_id: str = None,
        refund_train_details: List[TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetails] = None,
    ):
        self.distribute_order_id = distribute_order_id
        self.order_id = order_id
        self.refund_train_details = refund_train_details

    def validate(self):
        if self.refund_train_details:
            for k in self.refund_train_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.distribute_order_id is not None:
            result['distribute_order_id'] = self.distribute_order_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        result['refund_train_details'] = []
        if self.refund_train_details is not None:
            for k in self.refund_train_details:
                result['refund_train_details'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('distribute_order_id') is not None:
            self.distribute_order_id = m.get('distribute_order_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        self.refund_train_details = []
        if m.get('refund_train_details') is not None:
            for k in m.get('refund_train_details'):
                temp_model = TrainFeeCalculateRefundResponseBodyModuleRefundTrainDetails()
                self.refund_train_details.append(temp_model.from_map(k))
        return self


class TrainFeeCalculateRefundResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainFeeCalculateRefundResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainFeeCalculateRefundResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainFeeCalculateRefundResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainFeeCalculateRefundResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainFeeCalculateRefundResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainNoInfoSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainNoInfoSearchRequest(TeaModel):
    def __init__(
        self,
        arr_location: str = None,
        dep_date: str = None,
        dep_location: str = None,
        line_key: str = None,
        middle_date: str = None,
        middle_station: str = None,
        order_id: str = None,
        train_no: str = None,
    ):
        # This parameter is required.
        self.arr_location = arr_location
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.dep_location = dep_location
        self.line_key = line_key
        self.middle_date = middle_date
        self.middle_station = middle_station
        self.order_id = order_id
        self.train_no = train_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_location is not None:
            result['arr_location'] = self.arr_location
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dep_location is not None:
            result['dep_location'] = self.dep_location
        if self.line_key is not None:
            result['line_key'] = self.line_key
        if self.middle_date is not None:
            result['middle_date'] = self.middle_date
        if self.middle_station is not None:
            result['middle_station'] = self.middle_station
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_location') is not None:
            self.arr_location = m.get('arr_location')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dep_location') is not None:
            self.dep_location = m.get('dep_location')
        if m.get('line_key') is not None:
            self.line_key = m.get('line_key')
        if m.get('middle_date') is not None:
            self.middle_date = m.get('middle_date')
        if m.get('middle_station') is not None:
            self.middle_station = m.get('middle_station')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainNoInfoSearchResponseBodyModuleTrainStationSearchVOSeatInfos(TeaModel):
    def __init__(
        self,
        price: int = None,
        seat_name: str = None,
        seat_type: str = None,
        stock: str = None,
    ):
        self.price = price
        self.seat_name = seat_name
        self.seat_type = seat_type
        self.stock = stock

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.price is not None:
            result['price'] = self.price
        if self.seat_name is not None:
            result['seat_name'] = self.seat_name
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.stock is not None:
            result['stock'] = self.stock
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('seat_name') is not None:
            self.seat_name = m.get('seat_name')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('stock') is not None:
            self.stock = m.get('stock')
        return self


class TrainNoInfoSearchResponseBodyModuleTrainStationSearchVO(TeaModel):
    def __init__(
        self,
        arr_day_tag: str = None,
        arr_station_code: str = None,
        arr_station_name: str = None,
        arr_time: str = None,
        cost_time: str = None,
        dep_station_code: str = None,
        dep_station_name: str = None,
        dep_time: str = None,
        is_end_station: int = None,
        is_start_station: int = None,
        price: str = None,
        sale_flag: str = None,
        seat_infos: List[TrainNoInfoSearchResponseBodyModuleTrainStationSearchVOSeatInfos] = None,
        train_no: str = None,
        train_type: str = None,
    ):
        self.arr_day_tag = arr_day_tag
        self.arr_station_code = arr_station_code
        self.arr_station_name = arr_station_name
        self.arr_time = arr_time
        self.cost_time = cost_time
        self.dep_station_code = dep_station_code
        self.dep_station_name = dep_station_name
        self.dep_time = dep_time
        self.is_end_station = is_end_station
        self.is_start_station = is_start_station
        self.price = price
        self.sale_flag = sale_flag
        self.seat_infos = seat_infos
        self.train_no = train_no
        self.train_type = train_type

    def validate(self):
        if self.seat_infos:
            for k in self.seat_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_day_tag is not None:
            result['arr_day_tag'] = self.arr_day_tag
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        if self.arr_station_name is not None:
            result['arr_station_name'] = self.arr_station_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cost_time is not None:
            result['cost_time'] = self.cost_time
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_station_name is not None:
            result['dep_station_name'] = self.dep_station_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.is_end_station is not None:
            result['is_end_station'] = self.is_end_station
        if self.is_start_station is not None:
            result['is_start_station'] = self.is_start_station
        if self.price is not None:
            result['price'] = self.price
        if self.sale_flag is not None:
            result['sale_flag'] = self.sale_flag
        result['seat_infos'] = []
        if self.seat_infos is not None:
            for k in self.seat_infos:
                result['seat_infos'].append(k.to_map() if k else None)
        if self.train_no is not None:
            result['train_no'] = self.train_no
        if self.train_type is not None:
            result['train_type'] = self.train_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_day_tag') is not None:
            self.arr_day_tag = m.get('arr_day_tag')
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        if m.get('arr_station_name') is not None:
            self.arr_station_name = m.get('arr_station_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cost_time') is not None:
            self.cost_time = m.get('cost_time')
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_station_name') is not None:
            self.dep_station_name = m.get('dep_station_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('is_end_station') is not None:
            self.is_end_station = m.get('is_end_station')
        if m.get('is_start_station') is not None:
            self.is_start_station = m.get('is_start_station')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('sale_flag') is not None:
            self.sale_flag = m.get('sale_flag')
        self.seat_infos = []
        if m.get('seat_infos') is not None:
            for k in m.get('seat_infos'):
                temp_model = TrainNoInfoSearchResponseBodyModuleTrainStationSearchVOSeatInfos()
                self.seat_infos.append(temp_model.from_map(k))
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        if m.get('train_type') is not None:
            self.train_type = m.get('train_type')
        return self


class TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailListSeatInfos(TeaModel):
    def __init__(
        self,
        price: int = None,
        seat_name: str = None,
        seat_type: str = None,
        stock: str = None,
    ):
        self.price = price
        self.seat_name = seat_name
        self.seat_type = seat_type
        self.stock = stock

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.price is not None:
            result['price'] = self.price
        if self.seat_name is not None:
            result['seat_name'] = self.seat_name
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.stock is not None:
            result['stock'] = self.stock
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('seat_name') is not None:
            self.seat_name = m.get('seat_name')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('stock') is not None:
            self.stock = m.get('stock')
        return self


class TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailList(TeaModel):
    def __init__(
        self,
        arr_day_tag: str = None,
        arr_station_code: str = None,
        arr_station_name: str = None,
        arr_time: str = None,
        cost_time: str = None,
        dep_station_code: str = None,
        dep_station_name: str = None,
        dep_time: str = None,
        is_end_station: int = None,
        is_start_station: int = None,
        price: str = None,
        sale_flag: str = None,
        seat_infos: List[TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailListSeatInfos] = None,
        train_no: str = None,
        train_type: str = None,
    ):
        self.arr_day_tag = arr_day_tag
        self.arr_station_code = arr_station_code
        self.arr_station_name = arr_station_name
        self.arr_time = arr_time
        self.cost_time = cost_time
        self.dep_station_code = dep_station_code
        self.dep_station_name = dep_station_name
        self.dep_time = dep_time
        self.is_end_station = is_end_station
        self.is_start_station = is_start_station
        self.price = price
        self.sale_flag = sale_flag
        self.seat_infos = seat_infos
        self.train_no = train_no
        self.train_type = train_type

    def validate(self):
        if self.seat_infos:
            for k in self.seat_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_day_tag is not None:
            result['arr_day_tag'] = self.arr_day_tag
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        if self.arr_station_name is not None:
            result['arr_station_name'] = self.arr_station_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cost_time is not None:
            result['cost_time'] = self.cost_time
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_station_name is not None:
            result['dep_station_name'] = self.dep_station_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.is_end_station is not None:
            result['is_end_station'] = self.is_end_station
        if self.is_start_station is not None:
            result['is_start_station'] = self.is_start_station
        if self.price is not None:
            result['price'] = self.price
        if self.sale_flag is not None:
            result['sale_flag'] = self.sale_flag
        result['seat_infos'] = []
        if self.seat_infos is not None:
            for k in self.seat_infos:
                result['seat_infos'].append(k.to_map() if k else None)
        if self.train_no is not None:
            result['train_no'] = self.train_no
        if self.train_type is not None:
            result['train_type'] = self.train_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_day_tag') is not None:
            self.arr_day_tag = m.get('arr_day_tag')
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        if m.get('arr_station_name') is not None:
            self.arr_station_name = m.get('arr_station_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cost_time') is not None:
            self.cost_time = m.get('cost_time')
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_station_name') is not None:
            self.dep_station_name = m.get('dep_station_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('is_end_station') is not None:
            self.is_end_station = m.get('is_end_station')
        if m.get('is_start_station') is not None:
            self.is_start_station = m.get('is_start_station')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('sale_flag') is not None:
            self.sale_flag = m.get('sale_flag')
        self.seat_infos = []
        if m.get('seat_infos') is not None:
            for k in m.get('seat_infos'):
                temp_model = TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailListSeatInfos()
                self.seat_infos.append(temp_model.from_map(k))
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        if m.get('train_type') is not None:
            self.train_type = m.get('train_type')
        return self


class TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVO(TeaModel):
    def __init__(
        self,
        transfer_detail_list: List[TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailList] = None,
        transfer_type: str = None,
    ):
        self.transfer_detail_list = transfer_detail_list
        self.transfer_type = transfer_type

    def validate(self):
        if self.transfer_detail_list:
            for k in self.transfer_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['transfer_detail_list'] = []
        if self.transfer_detail_list is not None:
            for k in self.transfer_detail_list:
                result['transfer_detail_list'].append(k.to_map() if k else None)
        if self.transfer_type is not None:
            result['transfer_type'] = self.transfer_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.transfer_detail_list = []
        if m.get('transfer_detail_list') is not None:
            for k in m.get('transfer_detail_list'):
                temp_model = TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVOTransferDetailList()
                self.transfer_detail_list.append(temp_model.from_map(k))
        if m.get('transfer_type') is not None:
            self.transfer_type = m.get('transfer_type')
        return self


class TrainNoInfoSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        train_station_search_vo: TrainNoInfoSearchResponseBodyModuleTrainStationSearchVO = None,
        train_transfer_station_search_vo: TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVO = None,
    ):
        self.train_station_search_vo = train_station_search_vo
        self.train_transfer_station_search_vo = train_transfer_station_search_vo

    def validate(self):
        if self.train_station_search_vo:
            self.train_station_search_vo.validate()
        if self.train_transfer_station_search_vo:
            self.train_transfer_station_search_vo.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.train_station_search_vo is not None:
            result['train_station_search_v_o'] = self.train_station_search_vo.to_map()
        if self.train_transfer_station_search_vo is not None:
            result['train_transfer_station_search_v_o'] = self.train_transfer_station_search_vo.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('train_station_search_v_o') is not None:
            temp_model = TrainNoInfoSearchResponseBodyModuleTrainStationSearchVO()
            self.train_station_search_vo = temp_model.from_map(m['train_station_search_v_o'])
        if m.get('train_transfer_station_search_v_o') is not None:
            temp_model = TrainNoInfoSearchResponseBodyModuleTrainTransferStationSearchVO()
            self.train_transfer_station_search_vo = temp_model.from_map(m['train_transfer_station_search_v_o'])
        return self


class TrainNoInfoSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainNoInfoSearchResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # requestId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainNoInfoSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainNoInfoSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainNoInfoSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainNoInfoSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainNoListSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainNoListSearchRequestOption(TeaModel):
    def __init__(
        self,
        need_transfer: bool = None,
    ):
        self.need_transfer = need_transfer

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.need_transfer is not None:
            result['need_transfer'] = self.need_transfer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('need_transfer') is not None:
            self.need_transfer = m.get('need_transfer')
        return self


class TrainNoListSearchRequest(TeaModel):
    def __init__(
        self,
        arr_location: str = None,
        dep_date: str = None,
        dep_location: str = None,
        option: TrainNoListSearchRequestOption = None,
        order_id: str = None,
    ):
        # This parameter is required.
        self.arr_location = arr_location
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.dep_location = dep_location
        # This parameter is required.
        self.option = option
        self.order_id = order_id

    def validate(self):
        if self.option:
            self.option.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_location is not None:
            result['arr_location'] = self.arr_location
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dep_location is not None:
            result['dep_location'] = self.dep_location
        if self.option is not None:
            result['option'] = self.option.to_map()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_location') is not None:
            self.arr_location = m.get('arr_location')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dep_location') is not None:
            self.dep_location = m.get('dep_location')
        if m.get('option') is not None:
            temp_model = TrainNoListSearchRequestOption()
            self.option = temp_model.from_map(m['option'])
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class TrainNoListSearchShrinkRequest(TeaModel):
    def __init__(
        self,
        arr_location: str = None,
        dep_date: str = None,
        dep_location: str = None,
        option_shrink: str = None,
        order_id: str = None,
    ):
        # This parameter is required.
        self.arr_location = arr_location
        # This parameter is required.
        self.dep_date = dep_date
        # This parameter is required.
        self.dep_location = dep_location
        # This parameter is required.
        self.option_shrink = option_shrink
        self.order_id = order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_location is not None:
            result['arr_location'] = self.arr_location
        if self.dep_date is not None:
            result['dep_date'] = self.dep_date
        if self.dep_location is not None:
            result['dep_location'] = self.dep_location
        if self.option_shrink is not None:
            result['option'] = self.option_shrink
        if self.order_id is not None:
            result['order_id'] = self.order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_location') is not None:
            self.arr_location = m.get('arr_location')
        if m.get('dep_date') is not None:
            self.dep_date = m.get('dep_date')
        if m.get('dep_location') is not None:
            self.dep_location = m.get('dep_location')
        if m.get('option') is not None:
            self.option_shrink = m.get('option')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        return self


class TrainNoListSearchResponseBodyModuleTrainStationSearchVOSSeatInfos(TeaModel):
    def __init__(
        self,
        price: int = None,
        seat_name: str = None,
        seat_type: str = None,
        stock: str = None,
    ):
        self.price = price
        self.seat_name = seat_name
        self.seat_type = seat_type
        self.stock = stock

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.price is not None:
            result['price'] = self.price
        if self.seat_name is not None:
            result['seat_name'] = self.seat_name
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.stock is not None:
            result['stock'] = self.stock
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('seat_name') is not None:
            self.seat_name = m.get('seat_name')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('stock') is not None:
            self.stock = m.get('stock')
        return self


class TrainNoListSearchResponseBodyModuleTrainStationSearchVOS(TeaModel):
    def __init__(
        self,
        arr_day_tag: str = None,
        arr_station_code: str = None,
        arr_station_name: str = None,
        arr_time: str = None,
        cost_time: str = None,
        dep_station_code: str = None,
        dep_station_name: str = None,
        dep_time: str = None,
        is_end_station: int = None,
        is_start_station: int = None,
        price: str = None,
        sale_flag: str = None,
        sale_flag_msg: str = None,
        seagment_index: str = None,
        seat_infos: List[TrainNoListSearchResponseBodyModuleTrainStationSearchVOSSeatInfos] = None,
        train_no: str = None,
        train_type: str = None,
    ):
        self.arr_day_tag = arr_day_tag
        self.arr_station_code = arr_station_code
        self.arr_station_name = arr_station_name
        self.arr_time = arr_time
        self.cost_time = cost_time
        self.dep_station_code = dep_station_code
        self.dep_station_name = dep_station_name
        self.dep_time = dep_time
        self.is_end_station = is_end_station
        self.is_start_station = is_start_station
        self.price = price
        self.sale_flag = sale_flag
        self.sale_flag_msg = sale_flag_msg
        self.seagment_index = seagment_index
        self.seat_infos = seat_infos
        self.train_no = train_no
        self.train_type = train_type

    def validate(self):
        if self.seat_infos:
            for k in self.seat_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_day_tag is not None:
            result['arr_day_tag'] = self.arr_day_tag
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        if self.arr_station_name is not None:
            result['arr_station_name'] = self.arr_station_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cost_time is not None:
            result['cost_time'] = self.cost_time
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_station_name is not None:
            result['dep_station_name'] = self.dep_station_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.is_end_station is not None:
            result['is_end_station'] = self.is_end_station
        if self.is_start_station is not None:
            result['is_start_station'] = self.is_start_station
        if self.price is not None:
            result['price'] = self.price
        if self.sale_flag is not None:
            result['sale_flag'] = self.sale_flag
        if self.sale_flag_msg is not None:
            result['sale_flag_msg'] = self.sale_flag_msg
        if self.seagment_index is not None:
            result['seagment_index'] = self.seagment_index
        result['seat_infos'] = []
        if self.seat_infos is not None:
            for k in self.seat_infos:
                result['seat_infos'].append(k.to_map() if k else None)
        if self.train_no is not None:
            result['train_no'] = self.train_no
        if self.train_type is not None:
            result['train_type'] = self.train_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_day_tag') is not None:
            self.arr_day_tag = m.get('arr_day_tag')
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        if m.get('arr_station_name') is not None:
            self.arr_station_name = m.get('arr_station_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cost_time') is not None:
            self.cost_time = m.get('cost_time')
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_station_name') is not None:
            self.dep_station_name = m.get('dep_station_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('is_end_station') is not None:
            self.is_end_station = m.get('is_end_station')
        if m.get('is_start_station') is not None:
            self.is_start_station = m.get('is_start_station')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('sale_flag') is not None:
            self.sale_flag = m.get('sale_flag')
        if m.get('sale_flag_msg') is not None:
            self.sale_flag_msg = m.get('sale_flag_msg')
        if m.get('seagment_index') is not None:
            self.seagment_index = m.get('seagment_index')
        self.seat_infos = []
        if m.get('seat_infos') is not None:
            for k in m.get('seat_infos'):
                temp_model = TrainNoListSearchResponseBodyModuleTrainStationSearchVOSSeatInfos()
                self.seat_infos.append(temp_model.from_map(k))
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        if m.get('train_type') is not None:
            self.train_type = m.get('train_type')
        return self


class TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailListSeatInfos(TeaModel):
    def __init__(
        self,
        price: int = None,
        seat_name: str = None,
        seat_type: str = None,
        stock: str = None,
    ):
        self.price = price
        self.seat_name = seat_name
        self.seat_type = seat_type
        self.stock = stock

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.price is not None:
            result['price'] = self.price
        if self.seat_name is not None:
            result['seat_name'] = self.seat_name
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.stock is not None:
            result['stock'] = self.stock
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('seat_name') is not None:
            self.seat_name = m.get('seat_name')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('stock') is not None:
            self.stock = m.get('stock')
        return self


class TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailList(TeaModel):
    def __init__(
        self,
        arr_day_tag: str = None,
        arr_station_code: str = None,
        arr_station_name: str = None,
        arr_time: str = None,
        cost_time: str = None,
        dep_station_code: str = None,
        dep_station_name: str = None,
        dep_time: str = None,
        is_end_station: int = None,
        is_start_station: int = None,
        price: str = None,
        sale_flag: str = None,
        sale_flag_msg: str = None,
        seat_infos: List[TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailListSeatInfos] = None,
        segment_index: str = None,
        train_no: str = None,
        train_type: str = None,
    ):
        self.arr_day_tag = arr_day_tag
        self.arr_station_code = arr_station_code
        self.arr_station_name = arr_station_name
        self.arr_time = arr_time
        self.cost_time = cost_time
        self.dep_station_code = dep_station_code
        self.dep_station_name = dep_station_name
        self.dep_time = dep_time
        self.is_end_station = is_end_station
        self.is_start_station = is_start_station
        self.price = price
        self.sale_flag = sale_flag
        self.sale_flag_msg = sale_flag_msg
        self.seat_infos = seat_infos
        self.segment_index = segment_index
        self.train_no = train_no
        self.train_type = train_type

    def validate(self):
        if self.seat_infos:
            for k in self.seat_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_day_tag is not None:
            result['arr_day_tag'] = self.arr_day_tag
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        if self.arr_station_name is not None:
            result['arr_station_name'] = self.arr_station_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.cost_time is not None:
            result['cost_time'] = self.cost_time
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_station_name is not None:
            result['dep_station_name'] = self.dep_station_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.is_end_station is not None:
            result['is_end_station'] = self.is_end_station
        if self.is_start_station is not None:
            result['is_start_station'] = self.is_start_station
        if self.price is not None:
            result['price'] = self.price
        if self.sale_flag is not None:
            result['sale_flag'] = self.sale_flag
        if self.sale_flag_msg is not None:
            result['sale_flag_msg'] = self.sale_flag_msg
        result['seat_infos'] = []
        if self.seat_infos is not None:
            for k in self.seat_infos:
                result['seat_infos'].append(k.to_map() if k else None)
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.train_no is not None:
            result['train_no'] = self.train_no
        if self.train_type is not None:
            result['train_type'] = self.train_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_day_tag') is not None:
            self.arr_day_tag = m.get('arr_day_tag')
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        if m.get('arr_station_name') is not None:
            self.arr_station_name = m.get('arr_station_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('cost_time') is not None:
            self.cost_time = m.get('cost_time')
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_station_name') is not None:
            self.dep_station_name = m.get('dep_station_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('is_end_station') is not None:
            self.is_end_station = m.get('is_end_station')
        if m.get('is_start_station') is not None:
            self.is_start_station = m.get('is_start_station')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('sale_flag') is not None:
            self.sale_flag = m.get('sale_flag')
        if m.get('sale_flag_msg') is not None:
            self.sale_flag_msg = m.get('sale_flag_msg')
        self.seat_infos = []
        if m.get('seat_infos') is not None:
            for k in m.get('seat_infos'):
                temp_model = TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailListSeatInfos()
                self.seat_infos.append(temp_model.from_map(k))
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        if m.get('train_type') is not None:
            self.train_type = m.get('train_type')
        return self


class TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOs(TeaModel):
    def __init__(
        self,
        arr_station: str = None,
        dep_station: str = None,
        line_key: str = None,
        middle_station: str = None,
        transfer_detail_list: List[TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailList] = None,
        transfer_type: str = None,
    ):
        self.arr_station = arr_station
        self.dep_station = dep_station
        self.line_key = line_key
        self.middle_station = middle_station
        self.transfer_detail_list = transfer_detail_list
        self.transfer_type = transfer_type

    def validate(self):
        if self.transfer_detail_list:
            for k in self.transfer_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.dep_station is not None:
            result['dep_station'] = self.dep_station
        if self.line_key is not None:
            result['line_key'] = self.line_key
        if self.middle_station is not None:
            result['middle_station'] = self.middle_station
        result['transfer_detail_list'] = []
        if self.transfer_detail_list is not None:
            for k in self.transfer_detail_list:
                result['transfer_detail_list'].append(k.to_map() if k else None)
        if self.transfer_type is not None:
            result['transfer_type'] = self.transfer_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('dep_station') is not None:
            self.dep_station = m.get('dep_station')
        if m.get('line_key') is not None:
            self.line_key = m.get('line_key')
        if m.get('middle_station') is not None:
            self.middle_station = m.get('middle_station')
        self.transfer_detail_list = []
        if m.get('transfer_detail_list') is not None:
            for k in m.get('transfer_detail_list'):
                temp_model = TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOsTransferDetailList()
                self.transfer_detail_list.append(temp_model.from_map(k))
        if m.get('transfer_type') is not None:
            self.transfer_type = m.get('transfer_type')
        return self


class TrainNoListSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        train_station_search_vos: List[TrainNoListSearchResponseBodyModuleTrainStationSearchVOS] = None,
        train_transfer_station_search_vos: List[TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOs] = None,
    ):
        self.train_station_search_vos = train_station_search_vos
        self.train_transfer_station_search_vos = train_transfer_station_search_vos

    def validate(self):
        if self.train_station_search_vos:
            for k in self.train_station_search_vos:
                if k:
                    k.validate()
        if self.train_transfer_station_search_vos:
            for k in self.train_transfer_station_search_vos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['train_station_search_v_o_s'] = []
        if self.train_station_search_vos is not None:
            for k in self.train_station_search_vos:
                result['train_station_search_v_o_s'].append(k.to_map() if k else None)
        result['train_transfer_station_search_v_os'] = []
        if self.train_transfer_station_search_vos is not None:
            for k in self.train_transfer_station_search_vos:
                result['train_transfer_station_search_v_os'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.train_station_search_vos = []
        if m.get('train_station_search_v_o_s') is not None:
            for k in m.get('train_station_search_v_o_s'):
                temp_model = TrainNoListSearchResponseBodyModuleTrainStationSearchVOS()
                self.train_station_search_vos.append(temp_model.from_map(k))
        self.train_transfer_station_search_vos = []
        if m.get('train_transfer_station_search_v_os') is not None:
            for k in m.get('train_transfer_station_search_v_os'):
                temp_model = TrainNoListSearchResponseBodyModuleTrainTransferStationSearchVOs()
                self.train_transfer_station_search_vos.append(temp_model.from_map(k))
        return self


class TrainNoListSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainNoListSearchResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainNoListSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainNoListSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainNoListSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainNoListSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderCancelHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainOrderCancelRequest(TeaModel):
    def __init__(
        self,
        change_order_id: str = None,
        order_id: str = None,
        out_change_order_id: str = None,
        out_order_id: str = None,
    ):
        self.change_order_id = change_order_id
        # This parameter is required.
        self.order_id = order_id
        self.out_change_order_id = out_change_order_id
        # This parameter is required.
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_order_id is not None:
            result['change_order_id'] = self.change_order_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_change_order_id is not None:
            result['out_change_order_id'] = self.out_change_order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_order_id') is not None:
            self.change_order_id = m.get('change_order_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_change_order_id') is not None:
            self.out_change_order_id = m.get('out_change_order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class TrainOrderCancelResponseBodyModule(TeaModel):
    def __init__(
        self,
        change_order_id: str = None,
        order_id: str = None,
        out_change_order_id: str = None,
        out_order_id: str = None,
        status: bool = None,
    ):
        self.change_order_id = change_order_id
        self.order_id = order_id
        self.out_change_order_id = out_change_order_id
        self.out_order_id = out_order_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_order_id is not None:
            result['change_order_id'] = self.change_order_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_change_order_id is not None:
            result['out_change_order_id'] = self.out_change_order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_order_id') is not None:
            self.change_order_id = m.get('change_order_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_change_order_id') is not None:
            self.out_change_order_id = m.get('out_change_order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class TrainOrderCancelResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainOrderCancelResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainOrderCancelResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderCancelResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainOrderCancelResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderCancelResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderChangeConfirmHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainOrderChangeConfirmRequest(TeaModel):
    def __init__(
        self,
        change_apply_id: str = None,
        change_settle_amount: int = None,
        order_id: str = None,
        out_change_apply_id: str = None,
        out_order_id: str = None,
    ):
        # This parameter is required.
        self.change_apply_id = change_apply_id
        # This parameter is required.
        self.change_settle_amount = change_settle_amount
        # This parameter is required.
        self.order_id = order_id
        # This parameter is required.
        self.out_change_apply_id = out_change_apply_id
        # This parameter is required.
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_apply_id is not None:
            result['change_apply_id'] = self.change_apply_id
        if self.change_settle_amount is not None:
            result['change_settle_amount'] = self.change_settle_amount
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_change_apply_id is not None:
            result['out_change_apply_id'] = self.out_change_apply_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_apply_id') is not None:
            self.change_apply_id = m.get('change_apply_id')
        if m.get('change_settle_amount') is not None:
            self.change_settle_amount = m.get('change_settle_amount')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_change_apply_id') is not None:
            self.out_change_apply_id = m.get('out_change_apply_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class TrainOrderChangeConfirmResponseBodyModule(TeaModel):
    def __init__(
        self,
        change_order_id: str = None,
        order_id: str = None,
        out_order_id: str = None,
        status: bool = None,
    ):
        self.change_order_id = change_order_id
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_order_id is not None:
            result['change_order_id'] = self.change_order_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_order_id') is not None:
            self.change_order_id = m.get('change_order_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class TrainOrderChangeConfirmResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainOrderChangeConfirmResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainOrderChangeConfirmResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderChangeConfirmResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainOrderChangeConfirmResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderChangeConfirmResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderCreateHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainOrderCreateRequestBookTrainInfosBookTicketInfos(TeaModel):
    def __init__(
        self,
        passenger_id: str = None,
        seat_type: str = None,
        ticket_price: int = None,
        ticket_type: str = None,
    ):
        # This parameter is required.
        self.passenger_id = passenger_id
        # This parameter is required.
        self.seat_type = seat_type
        # This parameter is required.
        self.ticket_price = ticket_price
        # This parameter is required.
        self.ticket_type = ticket_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_type is not None:
            result['ticket_type'] = self.ticket_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_type') is not None:
            self.ticket_type = m.get('ticket_type')
        return self


class TrainOrderCreateRequestBookTrainInfos(TeaModel):
    def __init__(
        self,
        arr_station_code: str = None,
        book_ticket_infos: List[TrainOrderCreateRequestBookTrainInfosBookTicketInfos] = None,
        choose_beds: str = None,
        choose_seats: str = None,
        dep_station_code: str = None,
        dep_time: str = None,
        train_no: str = None,
    ):
        # This parameter is required.
        self.arr_station_code = arr_station_code
        # This parameter is required.
        self.book_ticket_infos = book_ticket_infos
        self.choose_beds = choose_beds
        self.choose_seats = choose_seats
        # This parameter is required.
        self.dep_station_code = dep_station_code
        # This parameter is required.
        self.dep_time = dep_time
        # This parameter is required.
        self.train_no = train_no

    def validate(self):
        if self.book_ticket_infos:
            for k in self.book_ticket_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        result['book_ticket_infos'] = []
        if self.book_ticket_infos is not None:
            for k in self.book_ticket_infos:
                result['book_ticket_infos'].append(k.to_map() if k else None)
        if self.choose_beds is not None:
            result['choose_beds'] = self.choose_beds
        if self.choose_seats is not None:
            result['choose_seats'] = self.choose_seats
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        self.book_ticket_infos = []
        if m.get('book_ticket_infos') is not None:
            for k in m.get('book_ticket_infos'):
                temp_model = TrainOrderCreateRequestBookTrainInfosBookTicketInfos()
                self.book_ticket_infos.append(temp_model.from_map(k))
        if m.get('choose_beds') is not None:
            self.choose_beds = m.get('choose_beds')
        if m.get('choose_seats') is not None:
            self.choose_seats = m.get('choose_seats')
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainOrderCreateRequestBusinessInfo(TeaModel):
    def __init__(
        self,
        customer_apply_id: str = None,
        customer_itinerary_id: str = None,
    ):
        self.customer_apply_id = customer_apply_id
        self.customer_itinerary_id = customer_itinerary_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customer_apply_id is not None:
            result['customer_apply_id'] = self.customer_apply_id
        if self.customer_itinerary_id is not None:
            result['customer_itinerary_id'] = self.customer_itinerary_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('customer_apply_id') is not None:
            self.customer_apply_id = m.get('customer_apply_id')
        if m.get('customer_itinerary_id') is not None:
            self.customer_itinerary_id = m.get('customer_itinerary_id')
        return self


class TrainOrderCreateRequestContactInfo(TeaModel):
    def __init__(
        self,
        passenger_id: str = None,
        passenger_mobile: str = None,
        passenger_name: str = None,
    ):
        # This parameter is required.
        self.passenger_id = passenger_id
        # This parameter is required.
        self.passenger_mobile = passenger_mobile
        # This parameter is required.
        self.passenger_name = passenger_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_mobile is not None:
            result['passenger_mobile'] = self.passenger_mobile
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_mobile') is not None:
            self.passenger_mobile = m.get('passenger_mobile')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        return self


class TrainOrderCreateRequestPassengerOpenInfoSCostCenterInfo(TeaModel):
    def __init__(
        self,
        cascade_dept_name: str = None,
        cost_center_id: str = None,
        cost_center_name: str = None,
        cost_center_no: str = None,
        depart_id: str = None,
        depart_name: str = None,
        invoice_id: str = None,
        invoice_title: str = None,
        project_code: str = None,
        project_title: str = None,
    ):
        self.cascade_dept_name = cascade_dept_name
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.cost_center_no = cost_center_no
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.invoice_id = invoice_id
        self.invoice_title = invoice_title
        self.project_code = project_code
        self.project_title = project_title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cascade_dept_name is not None:
            result['cascade_dept_name'] = self.cascade_dept_name
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_no is not None:
            result['cost_center_no'] = self.cost_center_no
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cascade_dept_name') is not None:
            self.cascade_dept_name = m.get('cascade_dept_name')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_no') is not None:
            self.cost_center_no = m.get('cost_center_no')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        return self


class TrainOrderCreateRequestPassengerOpenInfoS(TeaModel):
    def __init__(
        self,
        cost_center_info: TrainOrderCreateRequestPassengerOpenInfoSCostCenterInfo = None,
        country_code: str = None,
        passenger_cert_no: str = None,
        passenger_cert_type: str = None,
        passenger_id: str = None,
        passenger_mobile: str = None,
        passenger_name: str = None,
        valid_date_end: str = None,
    ):
        self.cost_center_info = cost_center_info
        self.country_code = country_code
        # This parameter is required.
        self.passenger_cert_no = passenger_cert_no
        # This parameter is required.
        self.passenger_cert_type = passenger_cert_type
        # This parameter is required.
        self.passenger_id = passenger_id
        self.passenger_mobile = passenger_mobile
        # This parameter is required.
        self.passenger_name = passenger_name
        self.valid_date_end = valid_date_end

    def validate(self):
        if self.cost_center_info:
            self.cost_center_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_info is not None:
            result['cost_center_info'] = self.cost_center_info.to_map()
        if self.country_code is not None:
            result['country_code'] = self.country_code
        if self.passenger_cert_no is not None:
            result['passenger_cert_no'] = self.passenger_cert_no
        if self.passenger_cert_type is not None:
            result['passenger_cert_type'] = self.passenger_cert_type
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_mobile is not None:
            result['passenger_mobile'] = self.passenger_mobile
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.valid_date_end is not None:
            result['valid_date_end'] = self.valid_date_end
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cost_center_info') is not None:
            temp_model = TrainOrderCreateRequestPassengerOpenInfoSCostCenterInfo()
            self.cost_center_info = temp_model.from_map(m['cost_center_info'])
        if m.get('country_code') is not None:
            self.country_code = m.get('country_code')
        if m.get('passenger_cert_no') is not None:
            self.passenger_cert_no = m.get('passenger_cert_no')
        if m.get('passenger_cert_type') is not None:
            self.passenger_cert_type = m.get('passenger_cert_type')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_mobile') is not None:
            self.passenger_mobile = m.get('passenger_mobile')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('valid_date_end') is not None:
            self.valid_date_end = m.get('valid_date_end')
        return self


class TrainOrderCreateRequest(TeaModel):
    def __init__(
        self,
        accept_no_seat: str = None,
        book_train_infos: List[TrainOrderCreateRequestBookTrainInfos] = None,
        btrip_user_id: str = None,
        btrip_user_name: str = None,
        business_info: TrainOrderCreateRequestBusinessInfo = None,
        contact_info: TrainOrderCreateRequestContactInfo = None,
        force_match: str = None,
        is_pay_now: bool = None,
        out_order_id: str = None,
        passenger_open_info_s: List[TrainOrderCreateRequestPassengerOpenInfoS] = None,
    ):
        self.accept_no_seat = accept_no_seat
        # This parameter is required.
        self.book_train_infos = book_train_infos
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.btrip_user_name = btrip_user_name
        self.business_info = business_info
        # This parameter is required.
        self.contact_info = contact_info
        self.force_match = force_match
        self.is_pay_now = is_pay_now
        # This parameter is required.
        self.out_order_id = out_order_id
        # This parameter is required.
        self.passenger_open_info_s = passenger_open_info_s

    def validate(self):
        if self.book_train_infos:
            for k in self.book_train_infos:
                if k:
                    k.validate()
        if self.business_info:
            self.business_info.validate()
        if self.contact_info:
            self.contact_info.validate()
        if self.passenger_open_info_s:
            for k in self.passenger_open_info_s:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accept_no_seat is not None:
            result['accept_no_seat'] = self.accept_no_seat
        result['book_train_infos'] = []
        if self.book_train_infos is not None:
            for k in self.book_train_infos:
                result['book_train_infos'].append(k.to_map() if k else None)
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.btrip_user_name is not None:
            result['btrip_user_name'] = self.btrip_user_name
        if self.business_info is not None:
            result['business_info'] = self.business_info.to_map()
        if self.contact_info is not None:
            result['contact_info'] = self.contact_info.to_map()
        if self.force_match is not None:
            result['force_match'] = self.force_match
        if self.is_pay_now is not None:
            result['is_pay_now'] = self.is_pay_now
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_open_info_s'] = []
        if self.passenger_open_info_s is not None:
            for k in self.passenger_open_info_s:
                result['passenger_open_info_s'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('accept_no_seat') is not None:
            self.accept_no_seat = m.get('accept_no_seat')
        self.book_train_infos = []
        if m.get('book_train_infos') is not None:
            for k in m.get('book_train_infos'):
                temp_model = TrainOrderCreateRequestBookTrainInfos()
                self.book_train_infos.append(temp_model.from_map(k))
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('btrip_user_name') is not None:
            self.btrip_user_name = m.get('btrip_user_name')
        if m.get('business_info') is not None:
            temp_model = TrainOrderCreateRequestBusinessInfo()
            self.business_info = temp_model.from_map(m['business_info'])
        if m.get('contact_info') is not None:
            temp_model = TrainOrderCreateRequestContactInfo()
            self.contact_info = temp_model.from_map(m['contact_info'])
        if m.get('force_match') is not None:
            self.force_match = m.get('force_match')
        if m.get('is_pay_now') is not None:
            self.is_pay_now = m.get('is_pay_now')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_open_info_s = []
        if m.get('passenger_open_info_s') is not None:
            for k in m.get('passenger_open_info_s'):
                temp_model = TrainOrderCreateRequestPassengerOpenInfoS()
                self.passenger_open_info_s.append(temp_model.from_map(k))
        return self


class TrainOrderCreateShrinkRequest(TeaModel):
    def __init__(
        self,
        accept_no_seat: str = None,
        book_train_infos_shrink: str = None,
        btrip_user_id: str = None,
        btrip_user_name: str = None,
        business_info_shrink: str = None,
        contact_info_shrink: str = None,
        force_match: str = None,
        is_pay_now: bool = None,
        out_order_id: str = None,
        passenger_open_info_sshrink: str = None,
    ):
        self.accept_no_seat = accept_no_seat
        # This parameter is required.
        self.book_train_infos_shrink = book_train_infos_shrink
        # This parameter is required.
        self.btrip_user_id = btrip_user_id
        # This parameter is required.
        self.btrip_user_name = btrip_user_name
        self.business_info_shrink = business_info_shrink
        # This parameter is required.
        self.contact_info_shrink = contact_info_shrink
        self.force_match = force_match
        self.is_pay_now = is_pay_now
        # This parameter is required.
        self.out_order_id = out_order_id
        # This parameter is required.
        self.passenger_open_info_sshrink = passenger_open_info_sshrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accept_no_seat is not None:
            result['accept_no_seat'] = self.accept_no_seat
        if self.book_train_infos_shrink is not None:
            result['book_train_infos'] = self.book_train_infos_shrink
        if self.btrip_user_id is not None:
            result['btrip_user_id'] = self.btrip_user_id
        if self.btrip_user_name is not None:
            result['btrip_user_name'] = self.btrip_user_name
        if self.business_info_shrink is not None:
            result['business_info'] = self.business_info_shrink
        if self.contact_info_shrink is not None:
            result['contact_info'] = self.contact_info_shrink
        if self.force_match is not None:
            result['force_match'] = self.force_match
        if self.is_pay_now is not None:
            result['is_pay_now'] = self.is_pay_now
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.passenger_open_info_sshrink is not None:
            result['passenger_open_info_s'] = self.passenger_open_info_sshrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('accept_no_seat') is not None:
            self.accept_no_seat = m.get('accept_no_seat')
        if m.get('book_train_infos') is not None:
            self.book_train_infos_shrink = m.get('book_train_infos')
        if m.get('btrip_user_id') is not None:
            self.btrip_user_id = m.get('btrip_user_id')
        if m.get('btrip_user_name') is not None:
            self.btrip_user_name = m.get('btrip_user_name')
        if m.get('business_info') is not None:
            self.business_info_shrink = m.get('business_info')
        if m.get('contact_info') is not None:
            self.contact_info_shrink = m.get('contact_info')
        if m.get('force_match') is not None:
            self.force_match = m.get('force_match')
        if m.get('is_pay_now') is not None:
            self.is_pay_now = m.get('is_pay_now')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('passenger_open_info_s') is not None:
            self.passenger_open_info_sshrink = m.get('passenger_open_info_s')
        return self


class TrainOrderCreateResponseBodyModule(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        out_order_id: str = None,
        pay_status: str = None,
        service_fee: int = None,
    ):
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.pay_status = pay_status
        self.service_fee = service_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.pay_status is not None:
            result['pay_status'] = self.pay_status
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('pay_status') is not None:
            self.pay_status = m.get('pay_status')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        return self


class TrainOrderCreateResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainOrderCreateResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainOrderCreateResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderCreateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainOrderCreateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderCreateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderDetailQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainOrderDetailQueryRequest(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        out_order_id: str = None,
    ):
        # This parameter is required.
        self.order_id = order_id
        # This parameter is required.
        self.out_order_id = out_order_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        return self


class TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfosBookTicketInfos(TeaModel):
    def __init__(
        self,
        coach_no: str = None,
        fail_code: str = None,
        fail_reason: str = None,
        passenger_id: str = None,
        real_ticket_price: int = None,
        seat_no: str = None,
        seat_type: str = None,
        ticket_entrance: str = None,
        ticket_price: int = None,
        ticket_status: int = None,
        ticket_type: str = None,
    ):
        self.coach_no = coach_no
        self.fail_code = fail_code
        self.fail_reason = fail_reason
        self.passenger_id = passenger_id
        self.real_ticket_price = real_ticket_price
        self.seat_no = seat_no
        self.seat_type = seat_type
        self.ticket_entrance = ticket_entrance
        self.ticket_price = ticket_price
        self.ticket_status = ticket_status
        self.ticket_type = ticket_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.coach_no is not None:
            result['coach_no'] = self.coach_no
        if self.fail_code is not None:
            result['fail_code'] = self.fail_code
        if self.fail_reason is not None:
            result['fail_reason'] = self.fail_reason
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.real_ticket_price is not None:
            result['real_ticket_price'] = self.real_ticket_price
        if self.seat_no is not None:
            result['seat_no'] = self.seat_no
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.ticket_entrance is not None:
            result['ticket_entrance'] = self.ticket_entrance
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        if self.ticket_type is not None:
            result['ticket_type'] = self.ticket_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('coach_no') is not None:
            self.coach_no = m.get('coach_no')
        if m.get('fail_code') is not None:
            self.fail_code = m.get('fail_code')
        if m.get('fail_reason') is not None:
            self.fail_reason = m.get('fail_reason')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('real_ticket_price') is not None:
            self.real_ticket_price = m.get('real_ticket_price')
        if m.get('seat_no') is not None:
            self.seat_no = m.get('seat_no')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('ticket_entrance') is not None:
            self.ticket_entrance = m.get('ticket_entrance')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        if m.get('ticket_type') is not None:
            self.ticket_type = m.get('ticket_type')
        return self


class TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfos(TeaModel):
    def __init__(
        self,
        arr_station_code: str = None,
        arr_station_name: str = None,
        arrive_time: str = None,
        book_ticket_infos: List[TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfosBookTicketInfos] = None,
        dep_station_code: str = None,
        dep_station_name: str = None,
        dep_time: str = None,
        train_no: str = None,
    ):
        self.arr_station_code = arr_station_code
        self.arr_station_name = arr_station_name
        self.arrive_time = arrive_time
        self.book_ticket_infos = book_ticket_infos
        self.dep_station_code = dep_station_code
        self.dep_station_name = dep_station_name
        self.dep_time = dep_time
        self.train_no = train_no

    def validate(self):
        if self.book_ticket_infos:
            for k in self.book_ticket_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        if self.arr_station_name is not None:
            result['arr_station_name'] = self.arr_station_name
        if self.arrive_time is not None:
            result['arrive_time'] = self.arrive_time
        result['book_ticket_infos'] = []
        if self.book_ticket_infos is not None:
            for k in self.book_ticket_infos:
                result['book_ticket_infos'].append(k.to_map() if k else None)
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_station_name is not None:
            result['dep_station_name'] = self.dep_station_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        if m.get('arr_station_name') is not None:
            self.arr_station_name = m.get('arr_station_name')
        if m.get('arrive_time') is not None:
            self.arrive_time = m.get('arrive_time')
        self.book_ticket_infos = []
        if m.get('book_ticket_infos') is not None:
            for k in m.get('book_ticket_infos'):
                temp_model = TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfosBookTicketInfos()
                self.book_ticket_infos.append(temp_model.from_map(k))
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_station_name') is not None:
            self.dep_station_name = m.get('dep_station_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainOrderDetailQueryResponseBodyModuleBookInfos(TeaModel):
    def __init__(
        self,
        book_train_infos: List[TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfos] = None,
        fail_code: str = None,
        fail_msg: str = None,
        last_pay_time: str = None,
        status: int = None,
        ticket_no: str = None,
    ):
        self.book_train_infos = book_train_infos
        self.fail_code = fail_code
        self.fail_msg = fail_msg
        self.last_pay_time = last_pay_time
        self.status = status
        self.ticket_no = ticket_no

    def validate(self):
        if self.book_train_infos:
            for k in self.book_train_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['book_train_infos'] = []
        if self.book_train_infos is not None:
            for k in self.book_train_infos:
                result['book_train_infos'].append(k.to_map() if k else None)
        if self.fail_code is not None:
            result['fail_code'] = self.fail_code
        if self.fail_msg is not None:
            result['fail_msg'] = self.fail_msg
        if self.last_pay_time is not None:
            result['last_pay_time'] = self.last_pay_time
        if self.status is not None:
            result['status'] = self.status
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.book_train_infos = []
        if m.get('book_train_infos') is not None:
            for k in m.get('book_train_infos'):
                temp_model = TrainOrderDetailQueryResponseBodyModuleBookInfosBookTrainInfos()
                self.book_train_infos.append(temp_model.from_map(k))
        if m.get('fail_code') is not None:
            self.fail_code = m.get('fail_code')
        if m.get('fail_msg') is not None:
            self.fail_msg = m.get('fail_msg')
        if m.get('last_pay_time') is not None:
            self.last_pay_time = m.get('last_pay_time')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        return self


class TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfosChangeTicketInfos(TeaModel):
    def __init__(
        self,
        change_cost: int = None,
        change_diff: int = None,
        change_gap_handing_fee: int = None,
        change_min_ticket_amount_handing_fee: int = None,
        coach_no: str = None,
        fail_code: str = None,
        fail_reason: str = None,
        passenger_id: str = None,
        real_ticket_price: int = None,
        seat_no: str = None,
        seat_type: str = None,
        ticket_entrance: str = None,
        ticket_price: int = None,
        ticket_status: str = None,
    ):
        self.change_cost = change_cost
        self.change_diff = change_diff
        self.change_gap_handing_fee = change_gap_handing_fee
        self.change_min_ticket_amount_handing_fee = change_min_ticket_amount_handing_fee
        self.coach_no = coach_no
        self.fail_code = fail_code
        self.fail_reason = fail_reason
        self.passenger_id = passenger_id
        self.real_ticket_price = real_ticket_price
        self.seat_no = seat_no
        self.seat_type = seat_type
        self.ticket_entrance = ticket_entrance
        self.ticket_price = ticket_price
        self.ticket_status = ticket_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_cost is not None:
            result['change_cost'] = self.change_cost
        if self.change_diff is not None:
            result['change_diff'] = self.change_diff
        if self.change_gap_handing_fee is not None:
            result['change_gap_handing_fee'] = self.change_gap_handing_fee
        if self.change_min_ticket_amount_handing_fee is not None:
            result['change_min_ticket_amount_handing_fee'] = self.change_min_ticket_amount_handing_fee
        if self.coach_no is not None:
            result['coach_no'] = self.coach_no
        if self.fail_code is not None:
            result['fail_code'] = self.fail_code
        if self.fail_reason is not None:
            result['fail_reason'] = self.fail_reason
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.real_ticket_price is not None:
            result['real_ticket_price'] = self.real_ticket_price
        if self.seat_no is not None:
            result['seat_no'] = self.seat_no
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.ticket_entrance is not None:
            result['ticket_entrance'] = self.ticket_entrance
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_cost') is not None:
            self.change_cost = m.get('change_cost')
        if m.get('change_diff') is not None:
            self.change_diff = m.get('change_diff')
        if m.get('change_gap_handing_fee') is not None:
            self.change_gap_handing_fee = m.get('change_gap_handing_fee')
        if m.get('change_min_ticket_amount_handing_fee') is not None:
            self.change_min_ticket_amount_handing_fee = m.get('change_min_ticket_amount_handing_fee')
        if m.get('coach_no') is not None:
            self.coach_no = m.get('coach_no')
        if m.get('fail_code') is not None:
            self.fail_code = m.get('fail_code')
        if m.get('fail_reason') is not None:
            self.fail_reason = m.get('fail_reason')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('real_ticket_price') is not None:
            self.real_ticket_price = m.get('real_ticket_price')
        if m.get('seat_no') is not None:
            self.seat_no = m.get('seat_no')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('ticket_entrance') is not None:
            self.ticket_entrance = m.get('ticket_entrance')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        return self


class TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfos(TeaModel):
    def __init__(
        self,
        arr_station_code: str = None,
        arr_station_name: str = None,
        arrive_time: str = None,
        change_ticket_infos: List[TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfosChangeTicketInfos] = None,
        dep_station_code: str = None,
        dep_station_name: str = None,
        dep_time: str = None,
        train_no: str = None,
    ):
        self.arr_station_code = arr_station_code
        self.arr_station_name = arr_station_name
        self.arrive_time = arrive_time
        self.change_ticket_infos = change_ticket_infos
        self.dep_station_code = dep_station_code
        self.dep_station_name = dep_station_name
        self.dep_time = dep_time
        self.train_no = train_no

    def validate(self):
        if self.change_ticket_infos:
            for k in self.change_ticket_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station_code is not None:
            result['arr_station_code'] = self.arr_station_code
        if self.arr_station_name is not None:
            result['arr_station_name'] = self.arr_station_name
        if self.arrive_time is not None:
            result['arrive_time'] = self.arrive_time
        result['change_ticket_infos'] = []
        if self.change_ticket_infos is not None:
            for k in self.change_ticket_infos:
                result['change_ticket_infos'].append(k.to_map() if k else None)
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_station_name is not None:
            result['dep_station_name'] = self.dep_station_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station_code') is not None:
            self.arr_station_code = m.get('arr_station_code')
        if m.get('arr_station_name') is not None:
            self.arr_station_name = m.get('arr_station_name')
        if m.get('arrive_time') is not None:
            self.arrive_time = m.get('arrive_time')
        self.change_ticket_infos = []
        if m.get('change_ticket_infos') is not None:
            for k in m.get('change_ticket_infos'):
                temp_model = TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfosChangeTicketInfos()
                self.change_ticket_infos.append(temp_model.from_map(k))
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_station_name') is not None:
            self.dep_station_name = m.get('dep_station_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainOrderDetailQueryResponseBodyModuleChangeInfos(TeaModel):
    def __init__(
        self,
        change_apply_id: str = None,
        change_train_infos: List[TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfos] = None,
        limit_pay_time: str = None,
        out_change_apply_id: str = None,
        status: str = None,
    ):
        self.change_apply_id = change_apply_id
        self.change_train_infos = change_train_infos
        self.limit_pay_time = limit_pay_time
        self.out_change_apply_id = out_change_apply_id
        self.status = status

    def validate(self):
        if self.change_train_infos:
            for k in self.change_train_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_apply_id is not None:
            result['change_apply_id'] = self.change_apply_id
        result['change_train_infos'] = []
        if self.change_train_infos is not None:
            for k in self.change_train_infos:
                result['change_train_infos'].append(k.to_map() if k else None)
        if self.limit_pay_time is not None:
            result['limit_pay_time'] = self.limit_pay_time
        if self.out_change_apply_id is not None:
            result['out_change_apply_id'] = self.out_change_apply_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_apply_id') is not None:
            self.change_apply_id = m.get('change_apply_id')
        self.change_train_infos = []
        if m.get('change_train_infos') is not None:
            for k in m.get('change_train_infos'):
                temp_model = TrainOrderDetailQueryResponseBodyModuleChangeInfosChangeTrainInfos()
                self.change_train_infos.append(temp_model.from_map(k))
        if m.get('limit_pay_time') is not None:
            self.limit_pay_time = m.get('limit_pay_time')
        if m.get('out_change_apply_id') is not None:
            self.out_change_apply_id = m.get('out_change_apply_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetailsOfflineRefundInfos(TeaModel):
    def __init__(
        self,
        passenger_id: str = None,
        refund_price: int = None,
    ):
        self.passenger_id = passenger_id
        self.refund_price = refund_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        return self


class TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetails(TeaModel):
    def __init__(
        self,
        offline_refund_id: str = None,
        offline_refund_infos: List[TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetailsOfflineRefundInfos] = None,
        offline_refund_type: str = None,
        refund_total_price: int = None,
    ):
        self.offline_refund_id = offline_refund_id
        self.offline_refund_infos = offline_refund_infos
        self.offline_refund_type = offline_refund_type
        self.refund_total_price = refund_total_price

    def validate(self):
        if self.offline_refund_infos:
            for k in self.offline_refund_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.offline_refund_id is not None:
            result['offline_refund_id'] = self.offline_refund_id
        result['offline_refund_infos'] = []
        if self.offline_refund_infos is not None:
            for k in self.offline_refund_infos:
                result['offline_refund_infos'].append(k.to_map() if k else None)
        if self.offline_refund_type is not None:
            result['offline_refund_type'] = self.offline_refund_type
        if self.refund_total_price is not None:
            result['refund_total_price'] = self.refund_total_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('offline_refund_id') is not None:
            self.offline_refund_id = m.get('offline_refund_id')
        self.offline_refund_infos = []
        if m.get('offline_refund_infos') is not None:
            for k in m.get('offline_refund_infos'):
                temp_model = TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetailsOfflineRefundInfos()
                self.offline_refund_infos.append(temp_model.from_map(k))
        if m.get('offline_refund_type') is not None:
            self.offline_refund_type = m.get('offline_refund_type')
        if m.get('refund_total_price') is not None:
            self.refund_total_price = m.get('refund_total_price')
        return self


class TrainOrderDetailQueryResponseBodyModulePassengerInfoSCostCenterInfo(TeaModel):
    def __init__(
        self,
        cascade_dept_name: str = None,
        cost_center_id: str = None,
        cost_center_name: str = None,
        cost_center_no: str = None,
        depart_id: str = None,
        depart_name: str = None,
        invoice_id: str = None,
        invoice_title: str = None,
        passenger_id: str = None,
        project_code: str = None,
        project_title: str = None,
    ):
        self.cascade_dept_name = cascade_dept_name
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.cost_center_no = cost_center_no
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.invoice_id = invoice_id
        self.invoice_title = invoice_title
        self.passenger_id = passenger_id
        self.project_code = project_code
        self.project_title = project_title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cascade_dept_name is not None:
            result['cascade_dept_name'] = self.cascade_dept_name
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_no is not None:
            result['cost_center_no'] = self.cost_center_no
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.invoice_id is not None:
            result['invoice_id'] = self.invoice_id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_title is not None:
            result['project_title'] = self.project_title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cascade_dept_name') is not None:
            self.cascade_dept_name = m.get('cascade_dept_name')
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_no') is not None:
            self.cost_center_no = m.get('cost_center_no')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('invoice_id') is not None:
            self.invoice_id = m.get('invoice_id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        return self


class TrainOrderDetailQueryResponseBodyModulePassengerInfoS(TeaModel):
    def __init__(
        self,
        cost_center_info: TrainOrderDetailQueryResponseBodyModulePassengerInfoSCostCenterInfo = None,
        country_code: str = None,
        passenger_cert_no: str = None,
        passenger_cert_type: str = None,
        passenger_id: str = None,
        passenger_mobile: str = None,
        passenger_name: str = None,
        valid_date_end: str = None,
    ):
        self.cost_center_info = cost_center_info
        self.country_code = country_code
        self.passenger_cert_no = passenger_cert_no
        self.passenger_cert_type = passenger_cert_type
        self.passenger_id = passenger_id
        self.passenger_mobile = passenger_mobile
        self.passenger_name = passenger_name
        self.valid_date_end = valid_date_end

    def validate(self):
        if self.cost_center_info:
            self.cost_center_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_info is not None:
            result['cost_center_info'] = self.cost_center_info.to_map()
        if self.country_code is not None:
            result['country_code'] = self.country_code
        if self.passenger_cert_no is not None:
            result['passenger_cert_no'] = self.passenger_cert_no
        if self.passenger_cert_type is not None:
            result['passenger_cert_type'] = self.passenger_cert_type
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.passenger_mobile is not None:
            result['passenger_mobile'] = self.passenger_mobile
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.valid_date_end is not None:
            result['valid_date_end'] = self.valid_date_end
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cost_center_info') is not None:
            temp_model = TrainOrderDetailQueryResponseBodyModulePassengerInfoSCostCenterInfo()
            self.cost_center_info = temp_model.from_map(m['cost_center_info'])
        if m.get('country_code') is not None:
            self.country_code = m.get('country_code')
        if m.get('passenger_cert_no') is not None:
            self.passenger_cert_no = m.get('passenger_cert_no')
        if m.get('passenger_cert_type') is not None:
            self.passenger_cert_type = m.get('passenger_cert_type')
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('passenger_mobile') is not None:
            self.passenger_mobile = m.get('passenger_mobile')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('valid_date_end') is not None:
            self.valid_date_end = m.get('valid_date_end')
        return self


class TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfoRefundTicketInfos(TeaModel):
    def __init__(
        self,
        passenger_id: str = None,
        refund_cost: int = None,
        refund_price: int = None,
        ticket_price: int = None,
    ):
        self.passenger_id = passenger_id
        self.refund_cost = refund_cost
        self.refund_price = refund_price
        self.ticket_price = ticket_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.passenger_id is not None:
            result['passenger_id'] = self.passenger_id
        if self.refund_cost is not None:
            result['refund_cost'] = self.refund_cost
        if self.refund_price is not None:
            result['refund_price'] = self.refund_price
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('passenger_id') is not None:
            self.passenger_id = m.get('passenger_id')
        if m.get('refund_cost') is not None:
            self.refund_cost = m.get('refund_cost')
        if m.get('refund_price') is not None:
            self.refund_price = m.get('refund_price')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        return self


class TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfo(TeaModel):
    def __init__(
        self,
        arr_station_name: str = None,
        arr_time: str = None,
        dep_station_code: str = None,
        dep_station_name: str = None,
        dep_time: str = None,
        refund_ticket_infos: List[TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfoRefundTicketInfos] = None,
        train_no: str = None,
    ):
        self.arr_station_name = arr_station_name
        self.arr_time = arr_time
        self.dep_station_code = dep_station_code
        self.dep_station_name = dep_station_name
        self.dep_time = dep_time
        self.refund_ticket_infos = refund_ticket_infos
        self.train_no = train_no

    def validate(self):
        if self.refund_ticket_infos:
            for k in self.refund_ticket_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station_name is not None:
            result['arr_station_name'] = self.arr_station_name
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_station_code is not None:
            result['dep_station_code'] = self.dep_station_code
        if self.dep_station_name is not None:
            result['dep_station_name'] = self.dep_station_name
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        result['refund_ticket_infos'] = []
        if self.refund_ticket_infos is not None:
            for k in self.refund_ticket_infos:
                result['refund_ticket_infos'].append(k.to_map() if k else None)
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station_name') is not None:
            self.arr_station_name = m.get('arr_station_name')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_station_code') is not None:
            self.dep_station_code = m.get('dep_station_code')
        if m.get('dep_station_name') is not None:
            self.dep_station_name = m.get('dep_station_name')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        self.refund_ticket_infos = []
        if m.get('refund_ticket_infos') is not None:
            for k in m.get('refund_ticket_infos'):
                temp_model = TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfoRefundTicketInfos()
                self.refund_ticket_infos.append(temp_model.from_map(k))
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainOrderDetailQueryResponseBodyModuleRefundInfos(TeaModel):
    def __init__(
        self,
        fail_code: str = None,
        fail_msg: str = None,
        out_refund_id: str = None,
        refund_id: str = None,
        refund_train_info: List[TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfo] = None,
        status: str = None,
    ):
        self.fail_code = fail_code
        self.fail_msg = fail_msg
        self.out_refund_id = out_refund_id
        # String
        self.refund_id = refund_id
        self.refund_train_info = refund_train_info
        self.status = status

    def validate(self):
        if self.refund_train_info:
            for k in self.refund_train_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fail_code is not None:
            result['fail_code'] = self.fail_code
        if self.fail_msg is not None:
            result['fail_msg'] = self.fail_msg
        if self.out_refund_id is not None:
            result['out_refund_id'] = self.out_refund_id
        if self.refund_id is not None:
            result['refund_id'] = self.refund_id
        result['refund_train_info'] = []
        if self.refund_train_info is not None:
            for k in self.refund_train_info:
                result['refund_train_info'].append(k.to_map() if k else None)
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('fail_code') is not None:
            self.fail_code = m.get('fail_code')
        if m.get('fail_msg') is not None:
            self.fail_msg = m.get('fail_msg')
        if m.get('out_refund_id') is not None:
            self.out_refund_id = m.get('out_refund_id')
        if m.get('refund_id') is not None:
            self.refund_id = m.get('refund_id')
        self.refund_train_info = []
        if m.get('refund_train_info') is not None:
            for k in m.get('refund_train_info'):
                temp_model = TrainOrderDetailQueryResponseBodyModuleRefundInfosRefundTrainInfo()
                self.refund_train_info.append(temp_model.from_map(k))
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class TrainOrderDetailQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        book_infos: TrainOrderDetailQueryResponseBodyModuleBookInfos = None,
        change_infos: List[TrainOrderDetailQueryResponseBodyModuleChangeInfos] = None,
        offline_refund_details: List[TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetails] = None,
        order_id: str = None,
        out_order_id: str = None,
        passenger_info_s: List[TrainOrderDetailQueryResponseBodyModulePassengerInfoS] = None,
        refund_infos: List[TrainOrderDetailQueryResponseBodyModuleRefundInfos] = None,
    ):
        self.book_infos = book_infos
        self.change_infos = change_infos
        self.offline_refund_details = offline_refund_details
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.passenger_info_s = passenger_info_s
        self.refund_infos = refund_infos

    def validate(self):
        if self.book_infos:
            self.book_infos.validate()
        if self.change_infos:
            for k in self.change_infos:
                if k:
                    k.validate()
        if self.offline_refund_details:
            for k in self.offline_refund_details:
                if k:
                    k.validate()
        if self.passenger_info_s:
            for k in self.passenger_info_s:
                if k:
                    k.validate()
        if self.refund_infos:
            for k in self.refund_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.book_infos is not None:
            result['book_infos'] = self.book_infos.to_map()
        result['change_infos'] = []
        if self.change_infos is not None:
            for k in self.change_infos:
                result['change_infos'].append(k.to_map() if k else None)
        result['offlineRefundDetails'] = []
        if self.offline_refund_details is not None:
            for k in self.offline_refund_details:
                result['offlineRefundDetails'].append(k.to_map() if k else None)
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        result['passenger_info_s'] = []
        if self.passenger_info_s is not None:
            for k in self.passenger_info_s:
                result['passenger_info_s'].append(k.to_map() if k else None)
        result['refund_infos'] = []
        if self.refund_infos is not None:
            for k in self.refund_infos:
                result['refund_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('book_infos') is not None:
            temp_model = TrainOrderDetailQueryResponseBodyModuleBookInfos()
            self.book_infos = temp_model.from_map(m['book_infos'])
        self.change_infos = []
        if m.get('change_infos') is not None:
            for k in m.get('change_infos'):
                temp_model = TrainOrderDetailQueryResponseBodyModuleChangeInfos()
                self.change_infos.append(temp_model.from_map(k))
        self.offline_refund_details = []
        if m.get('offlineRefundDetails') is not None:
            for k in m.get('offlineRefundDetails'):
                temp_model = TrainOrderDetailQueryResponseBodyModuleOfflineRefundDetails()
                self.offline_refund_details.append(temp_model.from_map(k))
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        self.passenger_info_s = []
        if m.get('passenger_info_s') is not None:
            for k in m.get('passenger_info_s'):
                temp_model = TrainOrderDetailQueryResponseBodyModulePassengerInfoS()
                self.passenger_info_s.append(temp_model.from_map(k))
        self.refund_infos = []
        if m.get('refund_infos') is not None:
            for k in m.get('refund_infos'):
                temp_model = TrainOrderDetailQueryResponseBodyModuleRefundInfos()
                self.refund_infos.append(temp_model.from_map(k))
        return self


class TrainOrderDetailQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainOrderDetailQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainOrderDetailQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderDetailQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainOrderDetailQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderDetailQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderListQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainOrderListQueryRequest(TeaModel):
    def __init__(
        self,
        all_apply: bool = None,
        apply_id: int = None,
        depart_id: str = None,
        end_time: str = None,
        page: int = None,
        page_size: int = None,
        start_time: str = None,
        thirdpart_apply_id: str = None,
        update_end_time: str = None,
        update_start_time: str = None,
        user_id: str = None,
    ):
        self.all_apply = all_apply
        self.apply_id = apply_id
        self.depart_id = depart_id
        self.end_time = end_time
        self.page = page
        self.page_size = page_size
        self.start_time = start_time
        self.thirdpart_apply_id = thirdpart_apply_id
        self.update_end_time = update_end_time
        self.update_start_time = update_start_time
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all_apply is not None:
            result['all_apply'] = self.all_apply
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.update_end_time is not None:
            result['update_end_time'] = self.update_end_time
        if self.update_start_time is not None:
            result['update_start_time'] = self.update_start_time
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('all_apply') is not None:
            self.all_apply = m.get('all_apply')
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('update_end_time') is not None:
            self.update_end_time = m.get('update_end_time')
        if m.get('update_start_time') is not None:
            self.update_start_time = m.get('update_start_time')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderListQueryResponseBodyModuleCostCenter(TeaModel):
    def __init__(
        self,
        corp_id: str = None,
        id: int = None,
        name: str = None,
        number: str = None,
    ):
        self.corp_id = corp_id
        self.id = id
        self.name = name
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class TrainOrderListQueryResponseBodyModuleInvoice(TeaModel):
    def __init__(
        self,
        id: int = None,
        title: str = None,
    ):
        self.id = id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TrainOrderListQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(
        self,
        category_code: int = None,
        category_type: int = None,
        end_city: str = None,
        end_time: str = None,
        gmt_create: str = None,
        original_train_no: str = None,
        passenger_name: str = None,
        pay_type: int = None,
        price: float = None,
        seat_type: str = None,
        start_city: str = None,
        start_time: str = None,
        trade_id: str = None,
        train_no: str = None,
        type: int = None,
    ):
        self.category_code = category_code
        self.category_type = category_type
        self.end_city = end_city
        self.end_time = end_time
        self.gmt_create = gmt_create
        self.original_train_no = original_train_no
        self.passenger_name = passenger_name
        self.pay_type = pay_type
        self.price = price
        self.seat_type = seat_type
        self.start_city = start_city
        self.start_time = start_time
        self.trade_id = trade_id
        self.train_no = train_no
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.category_type is not None:
            result['category_type'] = self.category_type
        if self.end_city is not None:
            result['end_city'] = self.end_city
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.original_train_no is not None:
            result['original_train_no'] = self.original_train_no
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.start_city is not None:
            result['start_city'] = self.start_city
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.train_no is not None:
            result['train_no'] = self.train_no
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('category_type') is not None:
            self.category_type = m.get('category_type')
        if m.get('end_city') is not None:
            self.end_city = m.get('end_city')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('original_train_no') is not None:
            self.original_train_no = m.get('original_train_no')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('start_city') is not None:
            self.start_city = m.get('start_city')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TrainOrderListQueryResponseBodyModuleUserAffiliateList(TeaModel):
    def __init__(
        self,
        user_id: str = None,
        user_name: str = None,
    ):
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class TrainOrderListQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        apply_id: int = None,
        arr_city: str = None,
        arr_city_ad_code: str = None,
        arr_station: str = None,
        arr_time: str = None,
        btrip_title: str = None,
        contact_name: str = None,
        corp_id: str = None,
        corp_name: str = None,
        cost_center: TrainOrderListQueryResponseBodyModuleCostCenter = None,
        dep_city: str = None,
        dep_city_ad_code: str = None,
        dep_station: str = None,
        dep_time: str = None,
        depart_id: str = None,
        depart_name: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        invoice: TrainOrderListQueryResponseBodyModuleInvoice = None,
        price_info_list: List[TrainOrderListQueryResponseBodyModulePriceInfoList] = None,
        project_code: str = None,
        project_id: int = None,
        project_title: str = None,
        rider_name: str = None,
        run_time: str = None,
        seat_type: str = None,
        status: int = None,
        third_part_business_id: str = None,
        third_part_project_id: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_itinerary_id: str = None,
        ticket_count: int = None,
        ticket_no_12306: str = None,
        train_number: str = None,
        train_type: str = None,
        user_affiliate_list: List[TrainOrderListQueryResponseBodyModuleUserAffiliateList] = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.apply_id = apply_id
        self.arr_city = arr_city
        self.arr_city_ad_code = arr_city_ad_code
        self.arr_station = arr_station
        self.arr_time = arr_time
        self.btrip_title = btrip_title
        self.contact_name = contact_name
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.cost_center = cost_center
        self.dep_city = dep_city
        self.dep_city_ad_code = dep_city_ad_code
        self.dep_station = dep_station
        self.dep_time = dep_time
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.invoice = invoice
        self.price_info_list = price_info_list
        self.project_code = project_code
        self.project_id = project_id
        self.project_title = project_title
        self.rider_name = rider_name
        self.run_time = run_time
        self.seat_type = seat_type
        self.status = status
        self.third_part_business_id = third_part_business_id
        self.third_part_project_id = third_part_project_id
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.ticket_count = ticket_count
        self.ticket_no_12306 = ticket_no_12306
        self.train_number = train_number
        self.train_type = train_type
        self.user_affiliate_list = user_affiliate_list
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        if self.cost_center:
            self.cost_center.validate()
        if self.invoice:
            self.invoice.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.user_affiliate_list:
            for k in self.user_affiliate_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_city is not None:
            result['arr_city'] = self.arr_city
        if self.arr_city_ad_code is not None:
            result['arr_city_ad_code'] = self.arr_city_ad_code
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center.to_map()
        if self.dep_city is not None:
            result['dep_city'] = self.dep_city
        if self.dep_city_ad_code is not None:
            result['dep_city_ad_code'] = self.dep_city_ad_code
        if self.dep_station is not None:
            result['dep_station'] = self.dep_station
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.id is not None:
            result['id'] = self.id
        if self.invoice is not None:
            result['invoice'] = self.invoice.to_map()
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.rider_name is not None:
            result['rider_name'] = self.rider_name
        if self.run_time is not None:
            result['run_time'] = self.run_time
        if self.seat_type is not None:
            result['seat_type'] = self.seat_type
        if self.status is not None:
            result['status'] = self.status
        if self.third_part_business_id is not None:
            result['thirdPart_business_id'] = self.third_part_business_id
        if self.third_part_project_id is not None:
            result['third_part_project_id'] = self.third_part_project_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.ticket_count is not None:
            result['ticket_count'] = self.ticket_count
        if self.ticket_no_12306 is not None:
            result['ticket_no12306'] = self.ticket_no_12306
        if self.train_number is not None:
            result['train_number'] = self.train_number
        if self.train_type is not None:
            result['train_type'] = self.train_type
        result['user_affiliate_list'] = []
        if self.user_affiliate_list is not None:
            for k in self.user_affiliate_list:
                result['user_affiliate_list'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_city') is not None:
            self.arr_city = m.get('arr_city')
        if m.get('arr_city_ad_code') is not None:
            self.arr_city_ad_code = m.get('arr_city_ad_code')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('cost_center') is not None:
            temp_model = TrainOrderListQueryResponseBodyModuleCostCenter()
            self.cost_center = temp_model.from_map(m['cost_center'])
        if m.get('dep_city') is not None:
            self.dep_city = m.get('dep_city')
        if m.get('dep_city_ad_code') is not None:
            self.dep_city_ad_code = m.get('dep_city_ad_code')
        if m.get('dep_station') is not None:
            self.dep_station = m.get('dep_station')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice') is not None:
            temp_model = TrainOrderListQueryResponseBodyModuleInvoice()
            self.invoice = temp_model.from_map(m['invoice'])
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = TrainOrderListQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('rider_name') is not None:
            self.rider_name = m.get('rider_name')
        if m.get('run_time') is not None:
            self.run_time = m.get('run_time')
        if m.get('seat_type') is not None:
            self.seat_type = m.get('seat_type')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('thirdPart_business_id') is not None:
            self.third_part_business_id = m.get('thirdPart_business_id')
        if m.get('third_part_project_id') is not None:
            self.third_part_project_id = m.get('third_part_project_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('ticket_count') is not None:
            self.ticket_count = m.get('ticket_count')
        if m.get('ticket_no12306') is not None:
            self.ticket_no_12306 = m.get('ticket_no12306')
        if m.get('train_number') is not None:
            self.train_number = m.get('train_number')
        if m.get('train_type') is not None:
            self.train_type = m.get('train_type')
        self.user_affiliate_list = []
        if m.get('user_affiliate_list') is not None:
            for k in m.get('user_affiliate_list'):
                temp_model = TrainOrderListQueryResponseBodyModuleUserAffiliateList()
                self.user_affiliate_list.append(temp_model.from_map(k))
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class TrainOrderListQueryResponseBodyPageInfo(TeaModel):
    def __init__(
        self,
        page: int = None,
        page_size: int = None,
        total_number: int = None,
    ):
        self.page = page
        self.page_size = page_size
        self.total_number = total_number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_number is not None:
            result['total_number'] = self.total_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_number') is not None:
            self.total_number = m.get('total_number')
        return self


class TrainOrderListQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[TrainOrderListQueryResponseBodyModule] = None,
        page_info: TrainOrderListQueryResponseBodyPageInfo = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.page_info = page_info
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()
        if self.page_info:
            self.page_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.page_info is not None:
            result['page_info'] = self.page_info.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = TrainOrderListQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('page_info') is not None:
            temp_model = TrainOrderListQueryResponseBodyPageInfo()
            self.page_info = temp_model.from_map(m['page_info'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderListQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainOrderListQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderPayHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainOrderPayRequest(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        out_order_id: str = None,
        pay_amount: int = None,
    ):
        # This parameter is required.
        self.order_id = order_id
        # This parameter is required.
        self.out_order_id = out_order_id
        # This parameter is required.
        self.pay_amount = pay_amount

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.pay_amount is not None:
            result['pay_amount'] = self.pay_amount
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('pay_amount') is not None:
            self.pay_amount = m.get('pay_amount')
        return self


class TrainOrderPayResponseBodyModule(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        out_order_id: str = None,
        status: bool = None,
    ):
        self.order_id = order_id
        self.out_order_id = out_order_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.out_order_id is not None:
            result['out_order_id'] = self.out_order_id
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('out_order_id') is not None:
            self.out_order_id = m.get('out_order_id')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class TrainOrderPayResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainOrderPayResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainOrderPayResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderPayResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainOrderPayResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderPayResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainOrderQueryRequest(TeaModel):
    def __init__(
        self,
        order_id: int = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.order_id = order_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryResponseBodyModuleChangeTicketInfoList(TeaModel):
    def __init__(
        self,
        change_coach_no: str = None,
        change_gap_fee: float = None,
        change_handling_fee: float = None,
        change_seat_no: str = None,
        change_seat_type_name: str = None,
        change_service_fee: float = None,
        change_train_no: str = None,
        change_train_type_name: str = None,
        check_in_time: str = None,
        check_out_time: str = None,
        end_time: str = None,
        from_station_name: str = None,
        gmt_create: str = None,
        gmt_modify: str = None,
        origin_ticket_no: str = None,
        out_ticket_status: str = None,
        start_time: str = None,
        ticket_no: str = None,
        to_station_name: str = None,
    ):
        self.change_coach_no = change_coach_no
        self.change_gap_fee = change_gap_fee
        self.change_handling_fee = change_handling_fee
        self.change_seat_no = change_seat_no
        self.change_seat_type_name = change_seat_type_name
        self.change_service_fee = change_service_fee
        self.change_train_no = change_train_no
        self.change_train_type_name = change_train_type_name
        self.check_in_time = check_in_time
        self.check_out_time = check_out_time
        self.end_time = end_time
        self.from_station_name = from_station_name
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.origin_ticket_no = origin_ticket_no
        self.out_ticket_status = out_ticket_status
        self.start_time = start_time
        self.ticket_no = ticket_no
        self.to_station_name = to_station_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_coach_no is not None:
            result['change_coach_no'] = self.change_coach_no
        if self.change_gap_fee is not None:
            result['change_gap_fee'] = self.change_gap_fee
        if self.change_handling_fee is not None:
            result['change_handling_fee'] = self.change_handling_fee
        if self.change_seat_no is not None:
            result['change_seat_no'] = self.change_seat_no
        if self.change_seat_type_name is not None:
            result['change_seat_type_name'] = self.change_seat_type_name
        if self.change_service_fee is not None:
            result['change_service_fee'] = self.change_service_fee
        if self.change_train_no is not None:
            result['change_train_no'] = self.change_train_no
        if self.change_train_type_name is not None:
            result['change_train_type_name'] = self.change_train_type_name
        if self.check_in_time is not None:
            result['check_in_time'] = self.check_in_time
        if self.check_out_time is not None:
            result['check_out_time'] = self.check_out_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.from_station_name is not None:
            result['from_station_name'] = self.from_station_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.origin_ticket_no is not None:
            result['origin_ticket_no'] = self.origin_ticket_no
        if self.out_ticket_status is not None:
            result['out_ticket_status'] = self.out_ticket_status
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.to_station_name is not None:
            result['to_station_name'] = self.to_station_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_coach_no') is not None:
            self.change_coach_no = m.get('change_coach_no')
        if m.get('change_gap_fee') is not None:
            self.change_gap_fee = m.get('change_gap_fee')
        if m.get('change_handling_fee') is not None:
            self.change_handling_fee = m.get('change_handling_fee')
        if m.get('change_seat_no') is not None:
            self.change_seat_no = m.get('change_seat_no')
        if m.get('change_seat_type_name') is not None:
            self.change_seat_type_name = m.get('change_seat_type_name')
        if m.get('change_service_fee') is not None:
            self.change_service_fee = m.get('change_service_fee')
        if m.get('change_train_no') is not None:
            self.change_train_no = m.get('change_train_no')
        if m.get('change_train_type_name') is not None:
            self.change_train_type_name = m.get('change_train_type_name')
        if m.get('check_in_time') is not None:
            self.check_in_time = m.get('check_in_time')
        if m.get('check_out_time') is not None:
            self.check_out_time = m.get('check_out_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('from_station_name') is not None:
            self.from_station_name = m.get('from_station_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('origin_ticket_no') is not None:
            self.origin_ticket_no = m.get('origin_ticket_no')
        if m.get('out_ticket_status') is not None:
            self.out_ticket_status = m.get('out_ticket_status')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('to_station_name') is not None:
            self.to_station_name = m.get('to_station_name')
        return self


class TrainOrderQueryResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(
        self,
        id: int = None,
        title: str = None,
    ):
        self.id = id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TrainOrderQueryResponseBodyModuleOrderBaseInfo(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        btrip_title: str = None,
        contact_name: str = None,
        corp_id: str = None,
        corp_name: str = None,
        depart_id: str = None,
        depart_name: str = None,
        exceed_apply_id: str = None,
        exceed_third_part_apply_id: str = None,
        gmt_create: str = None,
        gmt_modify: str = None,
        itinerary_id: str = None,
        order_id: int = None,
        order_status: int = None,
        thirdpart_apply_id: str = None,
        thirdpart_corp_id: str = None,
        thirdpart_itinerary_id: str = None,
        trip_type: int = None,
        user_id: str = None,
    ):
        self.apply_id = apply_id
        self.btrip_title = btrip_title
        self.contact_name = contact_name
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.depart_id = depart_id
        self.depart_name = depart_name
        # 火车票超标审批id
        self.exceed_apply_id = exceed_apply_id
        # 火车票超标审批三方id
        self.exceed_third_part_apply_id = exceed_third_part_apply_id
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.itinerary_id = itinerary_id
        self.order_id = order_id
        self.order_status = order_status
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_corp_id = thirdpart_corp_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.trip_type = trip_type
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.exceed_apply_id is not None:
            result['exceed_apply_id'] = self.exceed_apply_id
        if self.exceed_third_part_apply_id is not None:
            result['exceed_third_part_apply_id'] = self.exceed_third_part_apply_id
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_corp_id is not None:
            result['thirdpart_corp_id'] = self.thirdpart_corp_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('exceed_apply_id') is not None:
            self.exceed_apply_id = m.get('exceed_apply_id')
        if m.get('exceed_third_part_apply_id') is not None:
            self.exceed_third_part_apply_id = m.get('exceed_third_part_apply_id')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_corp_id') is not None:
            self.thirdpart_corp_id = m.get('thirdpart_corp_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryResponseBodyModulePassengerInfoList(TeaModel):
    def __init__(
        self,
        cost_center_id: int = None,
        cost_center_name: str = None,
        cost_center_number: str = None,
        project_code: str = None,
        project_id: int = None,
        project_title: str = None,
        thirdpart_project_id: str = None,
        user_id: str = None,
        user_name: str = None,
        user_type: int = None,
    ):
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.cost_center_number = cost_center_number
        self.project_code = project_code
        self.project_id = project_id
        self.project_title = project_title
        self.thirdpart_project_id = thirdpart_project_id
        self.user_id = user_id
        self.user_name = user_name
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class TrainOrderQueryResponseBodyModulePriceInfoList(TeaModel):
    def __init__(
        self,
        category_code: int = None,
        gmt_create: str = None,
        passenger_name: str = None,
        pay_type: int = None,
        price: float = None,
        trade_id: str = None,
        type: int = None,
    ):
        self.category_code = category_code
        self.gmt_create = gmt_create
        self.passenger_name = passenger_name
        self.pay_type = pay_type
        self.price = price
        self.trade_id = trade_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TrainOrderQueryResponseBodyModuleRefundTicketInfoList(TeaModel):
    def __init__(
        self,
        gmt_create: str = None,
        gmt_modify: str = None,
        refund_fee: float = None,
        refund_service_fee: float = None,
        ticket_no: str = None,
    ):
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.refund_fee = refund_fee
        self.refund_service_fee = refund_service_fee
        self.ticket_no = ticket_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_service_fee is not None:
            result['refund_service_fee'] = self.refund_service_fee
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_service_fee') is not None:
            self.refund_service_fee = m.get('refund_service_fee')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        return self


class TrainOrderQueryResponseBodyModuleTicketInfoList(TeaModel):
    def __init__(
        self,
        changed: bool = None,
        check_in_time: str = None,
        check_out_time: str = None,
        coach_no: str = None,
        end_time: str = None,
        gmt_create: str = None,
        gmt_modify: str = None,
        out_ticket_status: str = None,
        pay_type: int = None,
        seat_no: str = None,
        seat_type_name: str = None,
        service_fee: float = None,
        start_time: str = None,
        ticket_no: str = None,
        ticket_price: float = None,
        ticket_status: int = None,
        train_type_name: str = None,
        user_id: str = None,
    ):
        self.changed = changed
        self.check_in_time = check_in_time
        self.check_out_time = check_out_time
        self.coach_no = coach_no
        self.end_time = end_time
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.out_ticket_status = out_ticket_status
        self.pay_type = pay_type
        self.seat_no = seat_no
        self.seat_type_name = seat_type_name
        self.service_fee = service_fee
        self.start_time = start_time
        self.ticket_no = ticket_no
        self.ticket_price = ticket_price
        self.ticket_status = ticket_status
        self.train_type_name = train_type_name
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.changed is not None:
            result['changed'] = self.changed
        if self.check_in_time is not None:
            result['check_in_time'] = self.check_in_time
        if self.check_out_time is not None:
            result['check_out_time'] = self.check_out_time
        if self.coach_no is not None:
            result['coach_no'] = self.coach_no
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.out_ticket_status is not None:
            result['out_ticket_status'] = self.out_ticket_status
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.seat_no is not None:
            result['seat_no'] = self.seat_no
        if self.seat_type_name is not None:
            result['seat_type_name'] = self.seat_type_name
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        if self.train_type_name is not None:
            result['train_type_name'] = self.train_type_name
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('changed') is not None:
            self.changed = m.get('changed')
        if m.get('check_in_time') is not None:
            self.check_in_time = m.get('check_in_time')
        if m.get('check_out_time') is not None:
            self.check_out_time = m.get('check_out_time')
        if m.get('coach_no') is not None:
            self.coach_no = m.get('coach_no')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('out_ticket_status') is not None:
            self.out_ticket_status = m.get('out_ticket_status')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('seat_no') is not None:
            self.seat_no = m.get('seat_no')
        if m.get('seat_type_name') is not None:
            self.seat_type_name = m.get('seat_type_name')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        if m.get('train_type_name') is not None:
            self.train_type_name = m.get('train_type_name')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryResponseBodyModuleTrainInfo(TeaModel):
    def __init__(
        self,
        arr_time: str = None,
        dep_time: str = None,
        from_city_ad_code: str = None,
        from_station_name: str = None,
        run_time: int = None,
        to_city_ad_code: str = None,
        to_station_name: str = None,
        train_no: str = None,
    ):
        self.arr_time = arr_time
        self.dep_time = dep_time
        self.from_city_ad_code = from_city_ad_code
        self.from_station_name = from_station_name
        self.run_time = run_time
        self.to_city_ad_code = to_city_ad_code
        self.to_station_name = to_station_name
        self.train_no = train_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.from_city_ad_code is not None:
            result['from_city_ad_code'] = self.from_city_ad_code
        if self.from_station_name is not None:
            result['from_station_name'] = self.from_station_name
        if self.run_time is not None:
            result['run_time'] = self.run_time
        if self.to_city_ad_code is not None:
            result['to_city_ad_code'] = self.to_city_ad_code
        if self.to_station_name is not None:
            result['to_station_name'] = self.to_station_name
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('from_city_ad_code') is not None:
            self.from_city_ad_code = m.get('from_city_ad_code')
        if m.get('from_station_name') is not None:
            self.from_station_name = m.get('from_station_name')
        if m.get('run_time') is not None:
            self.run_time = m.get('run_time')
        if m.get('to_city_ad_code') is not None:
            self.to_city_ad_code = m.get('to_city_ad_code')
        if m.get('to_station_name') is not None:
            self.to_station_name = m.get('to_station_name')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainOrderQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        change_ticket_info_list: List[TrainOrderQueryResponseBodyModuleChangeTicketInfoList] = None,
        invoice_info: TrainOrderQueryResponseBodyModuleInvoiceInfo = None,
        order_base_info: TrainOrderQueryResponseBodyModuleOrderBaseInfo = None,
        passenger_info_list: List[TrainOrderQueryResponseBodyModulePassengerInfoList] = None,
        price_info_list: List[TrainOrderQueryResponseBodyModulePriceInfoList] = None,
        refund_ticket_info_list: List[TrainOrderQueryResponseBodyModuleRefundTicketInfoList] = None,
        ticket_info_list: List[TrainOrderQueryResponseBodyModuleTicketInfoList] = None,
        train_info: TrainOrderQueryResponseBodyModuleTrainInfo = None,
    ):
        self.change_ticket_info_list = change_ticket_info_list
        self.invoice_info = invoice_info
        self.order_base_info = order_base_info
        self.passenger_info_list = passenger_info_list
        self.price_info_list = price_info_list
        self.refund_ticket_info_list = refund_ticket_info_list
        self.ticket_info_list = ticket_info_list
        self.train_info = train_info

    def validate(self):
        if self.change_ticket_info_list:
            for k in self.change_ticket_info_list:
                if k:
                    k.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.order_base_info:
            self.order_base_info.validate()
        if self.passenger_info_list:
            for k in self.passenger_info_list:
                if k:
                    k.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.refund_ticket_info_list:
            for k in self.refund_ticket_info_list:
                if k:
                    k.validate()
        if self.ticket_info_list:
            for k in self.ticket_info_list:
                if k:
                    k.validate()
        if self.train_info:
            self.train_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['change_ticket_info_list'] = []
        if self.change_ticket_info_list is not None:
            for k in self.change_ticket_info_list:
                result['change_ticket_info_list'].append(k.to_map() if k else None)
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.order_base_info is not None:
            result['order_base_info'] = self.order_base_info.to_map()
        result['passenger_info_list'] = []
        if self.passenger_info_list is not None:
            for k in self.passenger_info_list:
                result['passenger_info_list'].append(k.to_map() if k else None)
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        result['refund_ticket_info_list'] = []
        if self.refund_ticket_info_list is not None:
            for k in self.refund_ticket_info_list:
                result['refund_ticket_info_list'].append(k.to_map() if k else None)
        result['ticket_info_list'] = []
        if self.ticket_info_list is not None:
            for k in self.ticket_info_list:
                result['ticket_info_list'].append(k.to_map() if k else None)
        if self.train_info is not None:
            result['train_info'] = self.train_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.change_ticket_info_list = []
        if m.get('change_ticket_info_list') is not None:
            for k in m.get('change_ticket_info_list'):
                temp_model = TrainOrderQueryResponseBodyModuleChangeTicketInfoList()
                self.change_ticket_info_list.append(temp_model.from_map(k))
        if m.get('invoice_info') is not None:
            temp_model = TrainOrderQueryResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('order_base_info') is not None:
            temp_model = TrainOrderQueryResponseBodyModuleOrderBaseInfo()
            self.order_base_info = temp_model.from_map(m['order_base_info'])
        self.passenger_info_list = []
        if m.get('passenger_info_list') is not None:
            for k in m.get('passenger_info_list'):
                temp_model = TrainOrderQueryResponseBodyModulePassengerInfoList()
                self.passenger_info_list.append(temp_model.from_map(k))
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = TrainOrderQueryResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        self.refund_ticket_info_list = []
        if m.get('refund_ticket_info_list') is not None:
            for k in m.get('refund_ticket_info_list'):
                temp_model = TrainOrderQueryResponseBodyModuleRefundTicketInfoList()
                self.refund_ticket_info_list.append(temp_model.from_map(k))
        self.ticket_info_list = []
        if m.get('ticket_info_list') is not None:
            for k in m.get('ticket_info_list'):
                temp_model = TrainOrderQueryResponseBodyModuleTicketInfoList()
                self.ticket_info_list.append(temp_model.from_map(k))
        if m.get('train_info') is not None:
            temp_model = TrainOrderQueryResponseBodyModuleTrainInfo()
            self.train_info = temp_model.from_map(m['train_info'])
        return self


class TrainOrderQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainOrderQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainOrderQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainOrderQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainOrderQueryV2Headers(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainOrderQueryV2Request(TeaModel):
    def __init__(
        self,
        order_id: int = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.order_id = order_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList(TeaModel):
    def __init__(
        self,
        change_coach_no: str = None,
        change_gap_fee: float = None,
        change_handling_fee: float = None,
        change_seat_no: str = None,
        change_seat_type_name: str = None,
        change_service_fee: float = None,
        change_train_no: str = None,
        change_train_type_name: str = None,
        check_in_time: str = None,
        check_out_time: str = None,
        end_time: str = None,
        from_city_name: str = None,
        from_station_name: str = None,
        gmt_create: str = None,
        gmt_modify: str = None,
        origin_ticket_no: str = None,
        out_ticket_status: str = None,
        segment_index: int = None,
        start_time: str = None,
        ticket_entrance: str = None,
        ticket_no: str = None,
        ticket_status: int = None,
        to_city_name: str = None,
        to_station_name: str = None,
        use_ticket: str = None,
        user_id: str = None,
    ):
        self.change_coach_no = change_coach_no
        self.change_gap_fee = change_gap_fee
        self.change_handling_fee = change_handling_fee
        self.change_seat_no = change_seat_no
        self.change_seat_type_name = change_seat_type_name
        self.change_service_fee = change_service_fee
        self.change_train_no = change_train_no
        self.change_train_type_name = change_train_type_name
        self.check_in_time = check_in_time
        self.check_out_time = check_out_time
        self.end_time = end_time
        self.from_city_name = from_city_name
        self.from_station_name = from_station_name
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.origin_ticket_no = origin_ticket_no
        self.out_ticket_status = out_ticket_status
        self.segment_index = segment_index
        self.start_time = start_time
        self.ticket_entrance = ticket_entrance
        self.ticket_no = ticket_no
        self.ticket_status = ticket_status
        self.to_city_name = to_city_name
        self.to_station_name = to_station_name
        self.use_ticket = use_ticket
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.change_coach_no is not None:
            result['change_coach_no'] = self.change_coach_no
        if self.change_gap_fee is not None:
            result['change_gap_fee'] = self.change_gap_fee
        if self.change_handling_fee is not None:
            result['change_handling_fee'] = self.change_handling_fee
        if self.change_seat_no is not None:
            result['change_seat_no'] = self.change_seat_no
        if self.change_seat_type_name is not None:
            result['change_seat_type_name'] = self.change_seat_type_name
        if self.change_service_fee is not None:
            result['change_service_fee'] = self.change_service_fee
        if self.change_train_no is not None:
            result['change_train_no'] = self.change_train_no
        if self.change_train_type_name is not None:
            result['change_train_type_name'] = self.change_train_type_name
        if self.check_in_time is not None:
            result['check_in_time'] = self.check_in_time
        if self.check_out_time is not None:
            result['check_out_time'] = self.check_out_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.from_city_name is not None:
            result['from_city_name'] = self.from_city_name
        if self.from_station_name is not None:
            result['from_station_name'] = self.from_station_name
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.origin_ticket_no is not None:
            result['origin_ticket_no'] = self.origin_ticket_no
        if self.out_ticket_status is not None:
            result['out_ticket_status'] = self.out_ticket_status
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.ticket_entrance is not None:
            result['ticket_entrance'] = self.ticket_entrance
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        if self.to_city_name is not None:
            result['to_city_name'] = self.to_city_name
        if self.to_station_name is not None:
            result['to_station_name'] = self.to_station_name
        if self.use_ticket is not None:
            result['use_ticket'] = self.use_ticket
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('change_coach_no') is not None:
            self.change_coach_no = m.get('change_coach_no')
        if m.get('change_gap_fee') is not None:
            self.change_gap_fee = m.get('change_gap_fee')
        if m.get('change_handling_fee') is not None:
            self.change_handling_fee = m.get('change_handling_fee')
        if m.get('change_seat_no') is not None:
            self.change_seat_no = m.get('change_seat_no')
        if m.get('change_seat_type_name') is not None:
            self.change_seat_type_name = m.get('change_seat_type_name')
        if m.get('change_service_fee') is not None:
            self.change_service_fee = m.get('change_service_fee')
        if m.get('change_train_no') is not None:
            self.change_train_no = m.get('change_train_no')
        if m.get('change_train_type_name') is not None:
            self.change_train_type_name = m.get('change_train_type_name')
        if m.get('check_in_time') is not None:
            self.check_in_time = m.get('check_in_time')
        if m.get('check_out_time') is not None:
            self.check_out_time = m.get('check_out_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('from_city_name') is not None:
            self.from_city_name = m.get('from_city_name')
        if m.get('from_station_name') is not None:
            self.from_station_name = m.get('from_station_name')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('origin_ticket_no') is not None:
            self.origin_ticket_no = m.get('origin_ticket_no')
        if m.get('out_ticket_status') is not None:
            self.out_ticket_status = m.get('out_ticket_status')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('ticket_entrance') is not None:
            self.ticket_entrance = m.get('ticket_entrance')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        if m.get('to_city_name') is not None:
            self.to_city_name = m.get('to_city_name')
        if m.get('to_station_name') is not None:
            self.to_station_name = m.get('to_station_name')
        if m.get('use_ticket') is not None:
            self.use_ticket = m.get('use_ticket')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryV2ResponseBodyModuleInvoiceInfo(TeaModel):
    def __init__(
        self,
        id: int = None,
        title: str = None,
    ):
        self.id = id
        self.title = title

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.title is not None:
            result['title'] = self.title
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('title') is not None:
            self.title = m.get('title')
        return self


class TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        btrip_title: str = None,
        contact_name: str = None,
        contact_phone: str = None,
        corp_id: str = None,
        corp_name: str = None,
        depart_id: str = None,
        depart_name: str = None,
        exceed_apply_id: str = None,
        exceed_thirdpart_apply_id: str = None,
        gmt_create: str = None,
        gmt_modify: str = None,
        itinerary_id: str = None,
        order_id: int = None,
        order_status: int = None,
        third_part_business_id: str = None,
        thirdpart_apply_id: str = None,
        thirdpart_depart_id: str = None,
        thirdpart_itinerary_id: str = None,
        trip_type: int = None,
        user_id: str = None,
        user_nick: str = None,
    ):
        self.apply_id = apply_id
        self.btrip_title = btrip_title
        self.contact_name = contact_name
        self.contact_phone = contact_phone
        self.corp_id = corp_id
        self.corp_name = corp_name
        self.depart_id = depart_id
        self.depart_name = depart_name
        self.exceed_apply_id = exceed_apply_id
        self.exceed_thirdpart_apply_id = exceed_thirdpart_apply_id
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.itinerary_id = itinerary_id
        self.order_id = order_id
        self.order_status = order_status
        self.third_part_business_id = third_part_business_id
        self.thirdpart_apply_id = thirdpart_apply_id
        self.thirdpart_depart_id = thirdpart_depart_id
        self.thirdpart_itinerary_id = thirdpart_itinerary_id
        self.trip_type = trip_type
        self.user_id = user_id
        self.user_nick = user_nick

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.btrip_title is not None:
            result['btrip_title'] = self.btrip_title
        if self.contact_name is not None:
            result['contact_name'] = self.contact_name
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.corp_id is not None:
            result['corp_id'] = self.corp_id
        if self.corp_name is not None:
            result['corp_name'] = self.corp_name
        if self.depart_id is not None:
            result['depart_id'] = self.depart_id
        if self.depart_name is not None:
            result['depart_name'] = self.depart_name
        if self.exceed_apply_id is not None:
            result['exceed_apply_id'] = self.exceed_apply_id
        if self.exceed_thirdpart_apply_id is not None:
            result['exceed_thirdpart_apply_id'] = self.exceed_thirdpart_apply_id
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.itinerary_id is not None:
            result['itinerary_id'] = self.itinerary_id
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.order_status is not None:
            result['order_status'] = self.order_status
        if self.third_part_business_id is not None:
            result['thirdPart_business_id'] = self.third_part_business_id
        if self.thirdpart_apply_id is not None:
            result['thirdpart_apply_id'] = self.thirdpart_apply_id
        if self.thirdpart_depart_id is not None:
            result['thirdpart_depart_id'] = self.thirdpart_depart_id
        if self.thirdpart_itinerary_id is not None:
            result['thirdpart_itinerary_id'] = self.thirdpart_itinerary_id
        if self.trip_type is not None:
            result['trip_type'] = self.trip_type
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_nick is not None:
            result['user_nick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('btrip_title') is not None:
            self.btrip_title = m.get('btrip_title')
        if m.get('contact_name') is not None:
            self.contact_name = m.get('contact_name')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('corp_id') is not None:
            self.corp_id = m.get('corp_id')
        if m.get('corp_name') is not None:
            self.corp_name = m.get('corp_name')
        if m.get('depart_id') is not None:
            self.depart_id = m.get('depart_id')
        if m.get('depart_name') is not None:
            self.depart_name = m.get('depart_name')
        if m.get('exceed_apply_id') is not None:
            self.exceed_apply_id = m.get('exceed_apply_id')
        if m.get('exceed_thirdpart_apply_id') is not None:
            self.exceed_thirdpart_apply_id = m.get('exceed_thirdpart_apply_id')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('itinerary_id') is not None:
            self.itinerary_id = m.get('itinerary_id')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('order_status') is not None:
            self.order_status = m.get('order_status')
        if m.get('thirdPart_business_id') is not None:
            self.third_part_business_id = m.get('thirdPart_business_id')
        if m.get('thirdpart_apply_id') is not None:
            self.thirdpart_apply_id = m.get('thirdpart_apply_id')
        if m.get('thirdpart_depart_id') is not None:
            self.thirdpart_depart_id = m.get('thirdpart_depart_id')
        if m.get('thirdpart_itinerary_id') is not None:
            self.thirdpart_itinerary_id = m.get('thirdpart_itinerary_id')
        if m.get('trip_type') is not None:
            self.trip_type = m.get('trip_type')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_nick') is not None:
            self.user_nick = m.get('user_nick')
        return self


class TrainOrderQueryV2ResponseBodyModulePassengerInfoList(TeaModel):
    def __init__(
        self,
        cost_center_id: int = None,
        cost_center_name: str = None,
        cost_center_number: str = None,
        project_code: str = None,
        project_id: int = None,
        project_title: str = None,
        thirdpart_cost_center_id: str = None,
        thirdpart_project_id: str = None,
        user_id: str = None,
        user_name: str = None,
        user_type: int = None,
    ):
        self.cost_center_id = cost_center_id
        self.cost_center_name = cost_center_name
        self.cost_center_number = cost_center_number
        self.project_code = project_code
        self.project_id = project_id
        self.project_title = project_title
        self.thirdpart_cost_center_id = thirdpart_cost_center_id
        self.thirdpart_project_id = thirdpart_project_id
        self.user_id = user_id
        self.user_name = user_name
        self.user_type = user_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_center_id is not None:
            result['cost_center_id'] = self.cost_center_id
        if self.cost_center_name is not None:
            result['cost_center_name'] = self.cost_center_name
        if self.cost_center_number is not None:
            result['cost_center_number'] = self.cost_center_number
        if self.project_code is not None:
            result['project_code'] = self.project_code
        if self.project_id is not None:
            result['project_id'] = self.project_id
        if self.project_title is not None:
            result['project_title'] = self.project_title
        if self.thirdpart_cost_center_id is not None:
            result['thirdpart_cost_center_id'] = self.thirdpart_cost_center_id
        if self.thirdpart_project_id is not None:
            result['thirdpart_project_id'] = self.thirdpart_project_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        if self.user_type is not None:
            result['user_type'] = self.user_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cost_center_id') is not None:
            self.cost_center_id = m.get('cost_center_id')
        if m.get('cost_center_name') is not None:
            self.cost_center_name = m.get('cost_center_name')
        if m.get('cost_center_number') is not None:
            self.cost_center_number = m.get('cost_center_number')
        if m.get('project_code') is not None:
            self.project_code = m.get('project_code')
        if m.get('project_id') is not None:
            self.project_id = m.get('project_id')
        if m.get('project_title') is not None:
            self.project_title = m.get('project_title')
        if m.get('thirdpart_cost_center_id') is not None:
            self.thirdpart_cost_center_id = m.get('thirdpart_cost_center_id')
        if m.get('thirdpart_project_id') is not None:
            self.thirdpart_project_id = m.get('thirdpart_project_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        if m.get('user_type') is not None:
            self.user_type = m.get('user_type')
        return self


class TrainOrderQueryV2ResponseBodyModulePriceInfoList(TeaModel):
    def __init__(
        self,
        category_code: int = None,
        gmt_create: str = None,
        passenger_name: str = None,
        pay_type: int = None,
        price: float = None,
        trade_id: str = None,
        type: int = None,
    ):
        self.category_code = category_code
        self.gmt_create = gmt_create
        self.passenger_name = passenger_name
        self.pay_type = pay_type
        self.price = price
        self.trade_id = trade_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category_code is not None:
            result['category_code'] = self.category_code
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.passenger_name is not None:
            result['passenger_name'] = self.passenger_name
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.price is not None:
            result['price'] = self.price
        if self.trade_id is not None:
            result['trade_id'] = self.trade_id
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('category_code') is not None:
            self.category_code = m.get('category_code')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('passenger_name') is not None:
            self.passenger_name = m.get('passenger_name')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('trade_id') is not None:
            self.trade_id = m.get('trade_id')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList(TeaModel):
    def __init__(
        self,
        gmt_create: str = None,
        gmt_modify: str = None,
        refund_fee: float = None,
        refund_service_fee: float = None,
        ticket_no: str = None,
        user_id: str = None,
    ):
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.refund_fee = refund_fee
        self.refund_service_fee = refund_service_fee
        self.ticket_no = ticket_no
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.refund_fee is not None:
            result['refund_fee'] = self.refund_fee
        if self.refund_service_fee is not None:
            result['refund_service_fee'] = self.refund_service_fee
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('refund_fee') is not None:
            self.refund_fee = m.get('refund_fee')
        if m.get('refund_service_fee') is not None:
            self.refund_service_fee = m.get('refund_service_fee')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos(TeaModel):
    def __init__(
        self,
        changed: bool = None,
        check_in_time: str = None,
        check_out_time: str = None,
        coach_no: str = None,
        end_time: str = None,
        gmt_create: str = None,
        gmt_modify: str = None,
        out_ticket_status: str = None,
        pay_type: int = None,
        seat_no: str = None,
        seat_type_name: str = None,
        segment_index: int = None,
        service_fee: float = None,
        start_time: str = None,
        ticket_entrance: str = None,
        ticket_no: str = None,
        ticket_price: float = None,
        ticket_status: int = None,
        train_type_name: str = None,
        use_ticket: str = None,
        user_id: str = None,
    ):
        self.changed = changed
        self.check_in_time = check_in_time
        self.check_out_time = check_out_time
        self.coach_no = coach_no
        self.end_time = end_time
        self.gmt_create = gmt_create
        self.gmt_modify = gmt_modify
        self.out_ticket_status = out_ticket_status
        self.pay_type = pay_type
        self.seat_no = seat_no
        self.seat_type_name = seat_type_name
        self.segment_index = segment_index
        self.service_fee = service_fee
        self.start_time = start_time
        self.ticket_entrance = ticket_entrance
        self.ticket_no = ticket_no
        self.ticket_price = ticket_price
        self.ticket_status = ticket_status
        self.train_type_name = train_type_name
        self.use_ticket = use_ticket
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.changed is not None:
            result['changed'] = self.changed
        if self.check_in_time is not None:
            result['check_in_time'] = self.check_in_time
        if self.check_out_time is not None:
            result['check_out_time'] = self.check_out_time
        if self.coach_no is not None:
            result['coach_no'] = self.coach_no
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modify is not None:
            result['gmt_modify'] = self.gmt_modify
        if self.out_ticket_status is not None:
            result['out_ticket_status'] = self.out_ticket_status
        if self.pay_type is not None:
            result['pay_type'] = self.pay_type
        if self.seat_no is not None:
            result['seat_no'] = self.seat_no
        if self.seat_type_name is not None:
            result['seat_type_name'] = self.seat_type_name
        if self.segment_index is not None:
            result['segment_index'] = self.segment_index
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.ticket_entrance is not None:
            result['ticket_entrance'] = self.ticket_entrance
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.ticket_price is not None:
            result['ticket_price'] = self.ticket_price
        if self.ticket_status is not None:
            result['ticket_status'] = self.ticket_status
        if self.train_type_name is not None:
            result['train_type_name'] = self.train_type_name
        if self.use_ticket is not None:
            result['use_ticket'] = self.use_ticket
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('changed') is not None:
            self.changed = m.get('changed')
        if m.get('check_in_time') is not None:
            self.check_in_time = m.get('check_in_time')
        if m.get('check_out_time') is not None:
            self.check_out_time = m.get('check_out_time')
        if m.get('coach_no') is not None:
            self.coach_no = m.get('coach_no')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modify') is not None:
            self.gmt_modify = m.get('gmt_modify')
        if m.get('out_ticket_status') is not None:
            self.out_ticket_status = m.get('out_ticket_status')
        if m.get('pay_type') is not None:
            self.pay_type = m.get('pay_type')
        if m.get('seat_no') is not None:
            self.seat_no = m.get('seat_no')
        if m.get('seat_type_name') is not None:
            self.seat_type_name = m.get('seat_type_name')
        if m.get('segment_index') is not None:
            self.segment_index = m.get('segment_index')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('ticket_entrance') is not None:
            self.ticket_entrance = m.get('ticket_entrance')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('ticket_price') is not None:
            self.ticket_price = m.get('ticket_price')
        if m.get('ticket_status') is not None:
            self.ticket_status = m.get('ticket_status')
        if m.get('train_type_name') is not None:
            self.train_type_name = m.get('train_type_name')
        if m.get('use_ticket') is not None:
            self.use_ticket = m.get('use_ticket')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList(TeaModel):
    def __init__(
        self,
        arr_time: str = None,
        dep_time: str = None,
        from_city_ad_code: str = None,
        from_city_name: str = None,
        from_station_name: str = None,
        item_id: int = None,
        run_time: int = None,
        to_city_ad_code: str = None,
        to_city_name: str = None,
        to_station_name: str = None,
        train_no: str = None,
        train_ticket_infos: List[TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos] = None,
    ):
        self.arr_time = arr_time
        self.dep_time = dep_time
        self.from_city_ad_code = from_city_ad_code
        self.from_city_name = from_city_name
        self.from_station_name = from_station_name
        # itemId
        self.item_id = item_id
        self.run_time = run_time
        self.to_city_ad_code = to_city_ad_code
        self.to_city_name = to_city_name
        self.to_station_name = to_station_name
        self.train_no = train_no
        self.train_ticket_infos = train_ticket_infos

    def validate(self):
        if self.train_ticket_infos:
            for k in self.train_ticket_infos:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.from_city_ad_code is not None:
            result['from_city_ad_code'] = self.from_city_ad_code
        if self.from_city_name is not None:
            result['from_city_name'] = self.from_city_name
        if self.from_station_name is not None:
            result['from_station_name'] = self.from_station_name
        if self.item_id is not None:
            result['item_id'] = self.item_id
        if self.run_time is not None:
            result['run_time'] = self.run_time
        if self.to_city_ad_code is not None:
            result['to_city_ad_code'] = self.to_city_ad_code
        if self.to_city_name is not None:
            result['to_city_name'] = self.to_city_name
        if self.to_station_name is not None:
            result['to_station_name'] = self.to_station_name
        if self.train_no is not None:
            result['train_no'] = self.train_no
        result['train_ticket_infos'] = []
        if self.train_ticket_infos is not None:
            for k in self.train_ticket_infos:
                result['train_ticket_infos'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('from_city_ad_code') is not None:
            self.from_city_ad_code = m.get('from_city_ad_code')
        if m.get('from_city_name') is not None:
            self.from_city_name = m.get('from_city_name')
        if m.get('from_station_name') is not None:
            self.from_station_name = m.get('from_station_name')
        if m.get('item_id') is not None:
            self.item_id = m.get('item_id')
        if m.get('run_time') is not None:
            self.run_time = m.get('run_time')
        if m.get('to_city_ad_code') is not None:
            self.to_city_ad_code = m.get('to_city_ad_code')
        if m.get('to_city_name') is not None:
            self.to_city_name = m.get('to_city_name')
        if m.get('to_station_name') is not None:
            self.to_station_name = m.get('to_station_name')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        self.train_ticket_infos = []
        if m.get('train_ticket_infos') is not None:
            for k in m.get('train_ticket_infos'):
                temp_model = TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoListTrainTicketInfos()
                self.train_ticket_infos.append(temp_model.from_map(k))
        return self


class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo(TeaModel):
    def __init__(
        self,
        cost_time: str = None,
        end_time: str = None,
        from_city_ad_code: str = None,
        from_city_name: str = None,
        from_station_name: str = None,
        middle_city: str = None,
        middle_city_ad_code: str = None,
        middle_date: str = None,
        middle_station: str = None,
        middle_type: str = None,
        start_time: str = None,
        to_city_ad_code: str = None,
        to_city_name: str = None,
        to_station_name: str = None,
        wait_time: str = None,
    ):
        self.cost_time = cost_time
        self.end_time = end_time
        self.from_city_ad_code = from_city_ad_code
        self.from_city_name = from_city_name
        self.from_station_name = from_station_name
        self.middle_city = middle_city
        self.middle_city_ad_code = middle_city_ad_code
        self.middle_date = middle_date
        self.middle_station = middle_station
        self.middle_type = middle_type
        self.start_time = start_time
        self.to_city_ad_code = to_city_ad_code
        self.to_city_name = to_city_name
        self.to_station_name = to_station_name
        self.wait_time = wait_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.cost_time is not None:
            result['cost_time'] = self.cost_time
        if self.end_time is not None:
            result['end_time'] = self.end_time
        if self.from_city_ad_code is not None:
            result['from_city_ad_code'] = self.from_city_ad_code
        if self.from_city_name is not None:
            result['from_city_name'] = self.from_city_name
        if self.from_station_name is not None:
            result['from_station_name'] = self.from_station_name
        if self.middle_city is not None:
            result['middle_city'] = self.middle_city
        if self.middle_city_ad_code is not None:
            result['middle_city_ad_code'] = self.middle_city_ad_code
        if self.middle_date is not None:
            result['middle_date'] = self.middle_date
        if self.middle_station is not None:
            result['middle_station'] = self.middle_station
        if self.middle_type is not None:
            result['middle_type'] = self.middle_type
        if self.start_time is not None:
            result['start_time'] = self.start_time
        if self.to_city_ad_code is not None:
            result['to_city_ad_code'] = self.to_city_ad_code
        if self.to_city_name is not None:
            result['to_city_name'] = self.to_city_name
        if self.to_station_name is not None:
            result['to_station_name'] = self.to_station_name
        if self.wait_time is not None:
            result['wait_time'] = self.wait_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('cost_time') is not None:
            self.cost_time = m.get('cost_time')
        if m.get('end_time') is not None:
            self.end_time = m.get('end_time')
        if m.get('from_city_ad_code') is not None:
            self.from_city_ad_code = m.get('from_city_ad_code')
        if m.get('from_city_name') is not None:
            self.from_city_name = m.get('from_city_name')
        if m.get('from_station_name') is not None:
            self.from_station_name = m.get('from_station_name')
        if m.get('middle_city') is not None:
            self.middle_city = m.get('middle_city')
        if m.get('middle_city_ad_code') is not None:
            self.middle_city_ad_code = m.get('middle_city_ad_code')
        if m.get('middle_date') is not None:
            self.middle_date = m.get('middle_date')
        if m.get('middle_station') is not None:
            self.middle_station = m.get('middle_station')
        if m.get('middle_type') is not None:
            self.middle_type = m.get('middle_type')
        if m.get('start_time') is not None:
            self.start_time = m.get('start_time')
        if m.get('to_city_ad_code') is not None:
            self.to_city_ad_code = m.get('to_city_ad_code')
        if m.get('to_city_name') is not None:
            self.to_city_name = m.get('to_city_name')
        if m.get('to_station_name') is not None:
            self.to_station_name = m.get('to_station_name')
        if m.get('wait_time') is not None:
            self.wait_time = m.get('wait_time')
        return self


class TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo(TeaModel):
    def __init__(
        self,
        train_info_list: List[TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList] = None,
        train_transfer_info: TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo = None,
    ):
        self.train_info_list = train_info_list
        self.train_transfer_info = train_transfer_info

    def validate(self):
        if self.train_info_list:
            for k in self.train_info_list:
                if k:
                    k.validate()
        if self.train_transfer_info:
            self.train_transfer_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['train_info_list'] = []
        if self.train_info_list is not None:
            for k in self.train_info_list:
                result['train_info_list'].append(k.to_map() if k else None)
        if self.train_transfer_info is not None:
            result['train_transfer_info'] = self.train_transfer_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.train_info_list = []
        if m.get('train_info_list') is not None:
            for k in m.get('train_info_list'):
                temp_model = TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainInfoList()
                self.train_info_list.append(temp_model.from_map(k))
        if m.get('train_transfer_info') is not None:
            temp_model = TrainOrderQueryV2ResponseBodyModuleTrainOrderInfoTrainTransferInfo()
            self.train_transfer_info = temp_model.from_map(m['train_transfer_info'])
        return self


class TrainOrderQueryV2ResponseBodyModule(TeaModel):
    def __init__(
        self,
        change_ticket_info_list: List[TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList] = None,
        invoice_info: TrainOrderQueryV2ResponseBodyModuleInvoiceInfo = None,
        order_base_info: TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo = None,
        passenger_info_list: List[TrainOrderQueryV2ResponseBodyModulePassengerInfoList] = None,
        price_info_list: List[TrainOrderQueryV2ResponseBodyModulePriceInfoList] = None,
        refund_ticket_info_list: List[TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList] = None,
        train_order_info: TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo = None,
    ):
        self.change_ticket_info_list = change_ticket_info_list
        self.invoice_info = invoice_info
        self.order_base_info = order_base_info
        self.passenger_info_list = passenger_info_list
        self.price_info_list = price_info_list
        self.refund_ticket_info_list = refund_ticket_info_list
        self.train_order_info = train_order_info

    def validate(self):
        if self.change_ticket_info_list:
            for k in self.change_ticket_info_list:
                if k:
                    k.validate()
        if self.invoice_info:
            self.invoice_info.validate()
        if self.order_base_info:
            self.order_base_info.validate()
        if self.passenger_info_list:
            for k in self.passenger_info_list:
                if k:
                    k.validate()
        if self.price_info_list:
            for k in self.price_info_list:
                if k:
                    k.validate()
        if self.refund_ticket_info_list:
            for k in self.refund_ticket_info_list:
                if k:
                    k.validate()
        if self.train_order_info:
            self.train_order_info.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['change_ticket_info_list'] = []
        if self.change_ticket_info_list is not None:
            for k in self.change_ticket_info_list:
                result['change_ticket_info_list'].append(k.to_map() if k else None)
        if self.invoice_info is not None:
            result['invoice_info'] = self.invoice_info.to_map()
        if self.order_base_info is not None:
            result['order_base_info'] = self.order_base_info.to_map()
        result['passenger_info_list'] = []
        if self.passenger_info_list is not None:
            for k in self.passenger_info_list:
                result['passenger_info_list'].append(k.to_map() if k else None)
        result['price_info_list'] = []
        if self.price_info_list is not None:
            for k in self.price_info_list:
                result['price_info_list'].append(k.to_map() if k else None)
        result['refund_ticket_info_list'] = []
        if self.refund_ticket_info_list is not None:
            for k in self.refund_ticket_info_list:
                result['refund_ticket_info_list'].append(k.to_map() if k else None)
        if self.train_order_info is not None:
            result['train_order_info'] = self.train_order_info.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.change_ticket_info_list = []
        if m.get('change_ticket_info_list') is not None:
            for k in m.get('change_ticket_info_list'):
                temp_model = TrainOrderQueryV2ResponseBodyModuleChangeTicketInfoList()
                self.change_ticket_info_list.append(temp_model.from_map(k))
        if m.get('invoice_info') is not None:
            temp_model = TrainOrderQueryV2ResponseBodyModuleInvoiceInfo()
            self.invoice_info = temp_model.from_map(m['invoice_info'])
        if m.get('order_base_info') is not None:
            temp_model = TrainOrderQueryV2ResponseBodyModuleOrderBaseInfo()
            self.order_base_info = temp_model.from_map(m['order_base_info'])
        self.passenger_info_list = []
        if m.get('passenger_info_list') is not None:
            for k in m.get('passenger_info_list'):
                temp_model = TrainOrderQueryV2ResponseBodyModulePassengerInfoList()
                self.passenger_info_list.append(temp_model.from_map(k))
        self.price_info_list = []
        if m.get('price_info_list') is not None:
            for k in m.get('price_info_list'):
                temp_model = TrainOrderQueryV2ResponseBodyModulePriceInfoList()
                self.price_info_list.append(temp_model.from_map(k))
        self.refund_ticket_info_list = []
        if m.get('refund_ticket_info_list') is not None:
            for k in m.get('refund_ticket_info_list'):
                temp_model = TrainOrderQueryV2ResponseBodyModuleRefundTicketInfoList()
                self.refund_ticket_info_list.append(temp_model.from_map(k))
        if m.get('train_order_info') is not None:
            temp_model = TrainOrderQueryV2ResponseBodyModuleTrainOrderInfo()
            self.train_order_info = temp_model.from_map(m['train_order_info'])
        return self


class TrainOrderQueryV2ResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainOrderQueryV2ResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainOrderQueryV2ResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainOrderQueryV2Response(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainOrderQueryV2ResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainOrderQueryV2ResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainStationSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainStationSearchRequest(TeaModel):
    def __init__(
        self,
        keyword: str = None,
    ):
        # This parameter is required.
        self.keyword = keyword

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.keyword is not None:
            result['keyword'] = self.keyword
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('keyword') is not None:
            self.keyword = m.get('keyword')
        return self


class TrainStationSearchResponseBodyModuleCities(TeaModel):
    def __init__(
        self,
        code: str = None,
        name: str = None,
    ):
        self.code = code
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.name is not None:
            result['name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('name') is not None:
            self.name = m.get('name')
        return self


class TrainStationSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        cities: List[TrainStationSearchResponseBodyModuleCities] = None,
    ):
        self.cities = cities

    def validate(self):
        if self.cities:
            for k in self.cities:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['cities'] = []
        if self.cities is not None:
            for k in self.cities:
                result['cities'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.cities = []
        if m.get('cities') is not None:
            for k in m.get('cities'):
                temp_model = TrainStationSearchResponseBodyModuleCities()
                self.cities.append(temp_model.from_map(k))
        return self


class TrainStationSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainStationSearchResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainStationSearchResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainStationSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainStationSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainStationSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainStopoverSearchHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TrainStopoverSearchRequest(TeaModel):
    def __init__(
        self,
        arr_station: str = None,
        dep_station: str = None,
        train_date: str = None,
        train_no: str = None,
    ):
        # This parameter is required.
        self.arr_station = arr_station
        # This parameter is required.
        self.dep_station = dep_station
        # This parameter is required.
        self.train_date = train_date
        # This parameter is required.
        self.train_no = train_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.dep_station is not None:
            result['dep_station'] = self.dep_station
        if self.train_date is not None:
            result['train_date'] = self.train_date
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('dep_station') is not None:
            self.dep_station = m.get('dep_station')
        if m.get('train_date') is not None:
            self.train_date = m.get('train_date')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainStopoverSearchResponseBodyModule(TeaModel):
    def __init__(
        self,
        arr_time: str = None,
        dep_time: str = None,
        station_name: str = None,
        station_no: str = None,
        station_type: str = None,
        stop_over_time: str = None,
    ):
        self.arr_time = arr_time
        self.dep_time = dep_time
        self.station_name = station_name
        self.station_no = station_no
        self.station_type = station_type
        self.stop_over_time = stop_over_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.arr_time is not None:
            result['arr_time'] = self.arr_time
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.station_name is not None:
            result['station_name'] = self.station_name
        if self.station_no is not None:
            result['station_no'] = self.station_no
        if self.station_type is not None:
            result['station_type'] = self.station_type
        if self.stop_over_time is not None:
            result['stop_over_time'] = self.stop_over_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('arr_time') is not None:
            self.arr_time = m.get('arr_time')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('station_name') is not None:
            self.station_name = m.get('station_name')
        if m.get('station_no') is not None:
            self.station_no = m.get('station_no')
        if m.get('station_type') is not None:
            self.station_type = m.get('station_type')
        if m.get('stop_over_time') is not None:
            self.stop_over_time = m.get('stop_over_time')
        return self


class TrainStopoverSearchResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[TrainStopoverSearchResponseBodyModule] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = TrainStopoverSearchResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainStopoverSearchResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainStopoverSearchResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainStopoverSearchResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TrainTicketScanQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TrainTicketScanQueryRequest(TeaModel):
    def __init__(
        self,
        bill_date: str = None,
        bill_id: int = None,
        invoice_sub_task_id: int = None,
        page_no: int = None,
        page_size: int = None,
        serial_number: str = None,
        ticket_no: str = None,
    ):
        # This parameter is required.
        self.bill_date = bill_date
        self.bill_id = bill_id
        self.invoice_sub_task_id = invoice_sub_task_id
        self.page_no = page_no
        self.page_size = page_size
        self.serial_number = serial_number
        self.ticket_no = ticket_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.bill_id is not None:
            result['bill_id'] = self.bill_id
        if self.invoice_sub_task_id is not None:
            result['invoice_sub_task_id'] = self.invoice_sub_task_id
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.serial_number is not None:
            result['serial_number'] = self.serial_number
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('bill_id') is not None:
            self.bill_id = m.get('bill_id')
        if m.get('invoice_sub_task_id') is not None:
            self.invoice_sub_task_id = m.get('invoice_sub_task_id')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('serial_number') is not None:
            self.serial_number = m.get('serial_number')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        return self


class TrainTicketScanQueryResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        apply_id: str = None,
        arr_station: str = None,
        bill_date: str = None,
        coach_name: str = None,
        cost_center: str = None,
        dep_station: str = None,
        dep_time: str = None,
        department: str = None,
        id: str = None,
        invoice_title: str = None,
        order_id: int = None,
        oss_url: str = None,
        passenger: str = None,
        price: str = None,
        project: str = None,
        seat: str = None,
        seat_no: str = None,
        serial_number: str = None,
        tax_amount: str = None,
        tax_rate: str = None,
        ticket_no: str = None,
        train_no: str = None,
    ):
        self.apply_id = apply_id
        self.arr_station = arr_station
        self.bill_date = bill_date
        self.coach_name = coach_name
        self.cost_center = cost_center
        self.dep_station = dep_station
        self.dep_time = dep_time
        self.department = department
        self.id = id
        self.invoice_title = invoice_title
        self.order_id = order_id
        self.oss_url = oss_url
        self.passenger = passenger
        self.price = price
        self.project = project
        self.seat = seat
        self.seat_no = seat_no
        self.serial_number = serial_number
        self.tax_amount = tax_amount
        self.tax_rate = tax_rate
        # 取票号
        self.ticket_no = ticket_no
        # 车次
        self.train_no = train_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_id is not None:
            result['apply_id'] = self.apply_id
        if self.arr_station is not None:
            result['arr_station'] = self.arr_station
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.coach_name is not None:
            result['coach_name'] = self.coach_name
        if self.cost_center is not None:
            result['cost_center'] = self.cost_center
        if self.dep_station is not None:
            result['dep_station'] = self.dep_station
        if self.dep_time is not None:
            result['dep_time'] = self.dep_time
        if self.department is not None:
            result['department'] = self.department
        if self.id is not None:
            result['id'] = self.id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.order_id is not None:
            result['order_id'] = self.order_id
        if self.oss_url is not None:
            result['oss_url'] = self.oss_url
        if self.passenger is not None:
            result['passenger'] = self.passenger
        if self.price is not None:
            result['price'] = self.price
        if self.project is not None:
            result['project'] = self.project
        if self.seat is not None:
            result['seat'] = self.seat
        if self.seat_no is not None:
            result['seat_no'] = self.seat_no
        if self.serial_number is not None:
            result['serial_number'] = self.serial_number
        if self.tax_amount is not None:
            result['tax_amount'] = self.tax_amount
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.ticket_no is not None:
            result['ticket_no'] = self.ticket_no
        if self.train_no is not None:
            result['train_no'] = self.train_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('apply_id') is not None:
            self.apply_id = m.get('apply_id')
        if m.get('arr_station') is not None:
            self.arr_station = m.get('arr_station')
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('coach_name') is not None:
            self.coach_name = m.get('coach_name')
        if m.get('cost_center') is not None:
            self.cost_center = m.get('cost_center')
        if m.get('dep_station') is not None:
            self.dep_station = m.get('dep_station')
        if m.get('dep_time') is not None:
            self.dep_time = m.get('dep_time')
        if m.get('department') is not None:
            self.department = m.get('department')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('order_id') is not None:
            self.order_id = m.get('order_id')
        if m.get('oss_url') is not None:
            self.oss_url = m.get('oss_url')
        if m.get('passenger') is not None:
            self.passenger = m.get('passenger')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('project') is not None:
            self.project = m.get('project')
        if m.get('seat') is not None:
            self.seat = m.get('seat')
        if m.get('seat_no') is not None:
            self.seat_no = m.get('seat_no')
        if m.get('serial_number') is not None:
            self.serial_number = m.get('serial_number')
        if m.get('tax_amount') is not None:
            self.tax_amount = m.get('tax_amount')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('ticket_no') is not None:
            self.ticket_no = m.get('ticket_no')
        if m.get('train_no') is not None:
            self.train_no = m.get('train_no')
        return self


class TrainTicketScanQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        items: List[TrainTicketScanQueryResponseBodyModuleItems] = None,
        page_no: int = None,
        page_size: int = None,
        total_page: int = None,
        total_size: int = None,
    ):
        self.items = items
        self.page_no = page_no
        self.page_size = page_size
        self.total_page = total_page
        self.total_size = total_size

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_page is not None:
            result['total_page'] = self.total_page
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = TrainTicketScanQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class TrainTicketScanQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TrainTicketScanQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TrainTicketScanQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TrainTicketScanQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TrainTicketScanQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TrainTicketScanQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TravelStandardListQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        # This parameter is required.
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TravelStandardListQueryRequest(TeaModel):
    def __init__(
        self,
        from_group: bool = None,
        page_no: int = None,
        page_size: int = None,
        rule_name: str = None,
    ):
        self.from_group = from_group
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        self.rule_name = rule_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.from_group is not None:
            result['from_group'] = self.from_group
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.rule_name is not None:
            result['rule_name'] = self.rule_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('from_group') is not None:
            self.from_group = m.get('from_group')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('rule_name') is not None:
            self.rule_name = m.get('rule_name')
        return self


class TravelStandardListQueryResponseBodyModuleItemsMainReserveRule(TeaModel):
    def __init__(
        self,
        open_service_type_list: List[str] = None,
        rule_code: int = None,
        rule_desc: str = None,
        rule_id: int = None,
        rule_name: str = None,
    ):
        self.open_service_type_list = open_service_type_list
        self.rule_code = rule_code
        self.rule_desc = rule_desc
        self.rule_id = rule_id
        self.rule_name = rule_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_service_type_list is not None:
            result['open_service_type_list'] = self.open_service_type_list
        if self.rule_code is not None:
            result['rule_code'] = self.rule_code
        if self.rule_desc is not None:
            result['rule_desc'] = self.rule_desc
        if self.rule_id is not None:
            result['rule_id'] = self.rule_id
        if self.rule_name is not None:
            result['rule_name'] = self.rule_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('open_service_type_list') is not None:
            self.open_service_type_list = m.get('open_service_type_list')
        if m.get('rule_code') is not None:
            self.rule_code = m.get('rule_code')
        if m.get('rule_desc') is not None:
            self.rule_desc = m.get('rule_desc')
        if m.get('rule_id') is not None:
            self.rule_id = m.get('rule_id')
        if m.get('rule_name') is not None:
            self.rule_name = m.get('rule_name')
        return self


class TravelStandardListQueryResponseBodyModuleItemsReserveRuleDescDataList(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['key'] = self.key
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('key') is not None:
            self.key = m.get('key')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class TravelStandardListQueryResponseBodyModuleItemsReserveRuleDesc(TeaModel):
    def __init__(
        self,
        data_list: List[TravelStandardListQueryResponseBodyModuleItemsReserveRuleDescDataList] = None,
        title: str = None,
        type: str = None,
    ):
        self.data_list = data_list
        self.title = title
        self.type = type

    def validate(self):
        if self.data_list:
            for k in self.data_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data_list'] = []
        if self.data_list is not None:
            for k in self.data_list:
                result['data_list'].append(k.to_map() if k else None)
        if self.title is not None:
            result['title'] = self.title
        if self.type is not None:
            result['type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data_list = []
        if m.get('data_list') is not None:
            for k in m.get('data_list'):
                temp_model = TravelStandardListQueryResponseBodyModuleItemsReserveRuleDescDataList()
                self.data_list.append(temp_model.from_map(k))
        if m.get('title') is not None:
            self.title = m.get('title')
        if m.get('type') is not None:
            self.type = m.get('type')
        return self


class TravelStandardListQueryResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        main_reserve_rule: TravelStandardListQueryResponseBodyModuleItemsMainReserveRule = None,
        reserve_rule_desc: List[TravelStandardListQueryResponseBodyModuleItemsReserveRuleDesc] = None,
        scope: int = None,
    ):
        self.main_reserve_rule = main_reserve_rule
        self.reserve_rule_desc = reserve_rule_desc
        self.scope = scope

    def validate(self):
        if self.main_reserve_rule:
            self.main_reserve_rule.validate()
        if self.reserve_rule_desc:
            for k in self.reserve_rule_desc:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.main_reserve_rule is not None:
            result['main_reserve_rule'] = self.main_reserve_rule.to_map()
        result['reserve_rule_desc'] = []
        if self.reserve_rule_desc is not None:
            for k in self.reserve_rule_desc:
                result['reserve_rule_desc'].append(k.to_map() if k else None)
        if self.scope is not None:
            result['scope'] = self.scope
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('main_reserve_rule') is not None:
            temp_model = TravelStandardListQueryResponseBodyModuleItemsMainReserveRule()
            self.main_reserve_rule = temp_model.from_map(m['main_reserve_rule'])
        self.reserve_rule_desc = []
        if m.get('reserve_rule_desc') is not None:
            for k in m.get('reserve_rule_desc'):
                temp_model = TravelStandardListQueryResponseBodyModuleItemsReserveRuleDesc()
                self.reserve_rule_desc.append(temp_model.from_map(k))
        if m.get('scope') is not None:
            self.scope = m.get('scope')
        return self


class TravelStandardListQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        items: List[TravelStandardListQueryResponseBodyModuleItems] = None,
        total_size: int = None,
    ):
        self.items = items
        self.total_size = total_size

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = TravelStandardListQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class TravelStandardListQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: int = None,
        message: str = None,
        module: TravelStandardListQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TravelStandardListQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TravelStandardListQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TravelStandardListQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TravelStandardListQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TravelStandardQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TravelStandardQueryRequest(TeaModel):
    def __init__(
        self,
        from_group: bool = None,
        rule_code: int = None,
        service_type_list: List[str] = None,
    ):
        # This parameter is required.
        self.from_group = from_group
        # This parameter is required.
        self.rule_code = rule_code
        # This parameter is required.
        self.service_type_list = service_type_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.from_group is not None:
            result['from_group'] = self.from_group
        if self.rule_code is not None:
            result['rule_code'] = self.rule_code
        if self.service_type_list is not None:
            result['service_type_list'] = self.service_type_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('from_group') is not None:
            self.from_group = m.get('from_group')
        if m.get('rule_code') is not None:
            self.rule_code = m.get('rule_code')
        if m.get('service_type_list') is not None:
            self.service_type_list = m.get('service_type_list')
        return self


class TravelStandardQueryShrinkRequest(TeaModel):
    def __init__(
        self,
        from_group: bool = None,
        rule_code: int = None,
        service_type_list_shrink: str = None,
    ):
        # This parameter is required.
        self.from_group = from_group
        # This parameter is required.
        self.rule_code = rule_code
        # This parameter is required.
        self.service_type_list_shrink = service_type_list_shrink

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.from_group is not None:
            result['from_group'] = self.from_group
        if self.rule_code is not None:
            result['rule_code'] = self.rule_code
        if self.service_type_list_shrink is not None:
            result['service_type_list'] = self.service_type_list_shrink
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('from_group') is not None:
            self.from_group = m.get('from_group')
        if m.get('rule_code') is not None:
            self.rule_code = m.get('rule_code')
        if m.get('service_type_list') is not None:
            self.service_type_list_shrink = m.get('service_type_list')
        return self


class TravelStandardQueryResponseBodyModuleReserveRuleMainReserveRule(TeaModel):
    def __init__(
        self,
        open_service_type_list: List[str] = None,
        rule_code: int = None,
        rule_desc: str = None,
        rule_id: int = None,
        rule_name: str = None,
    ):
        self.open_service_type_list = open_service_type_list
        self.rule_code = rule_code
        self.rule_desc = rule_desc
        self.rule_id = rule_id
        self.rule_name = rule_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_service_type_list is not None:
            result['open_service_type_list'] = self.open_service_type_list
        if self.rule_code is not None:
            result['rule_code'] = self.rule_code
        if self.rule_desc is not None:
            result['rule_desc'] = self.rule_desc
        if self.rule_id is not None:
            result['rule_id'] = self.rule_id
        if self.rule_name is not None:
            result['rule_name'] = self.rule_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('open_service_type_list') is not None:
            self.open_service_type_list = m.get('open_service_type_list')
        if m.get('rule_code') is not None:
            self.rule_code = m.get('rule_code')
        if m.get('rule_desc') is not None:
            self.rule_desc = m.get('rule_desc')
        if m.get('rule_id') is not None:
            self.rule_id = m.get('rule_id')
        if m.get('rule_name') is not None:
            self.rule_name = m.get('rule_name')
        return self


class TravelStandardQueryResponseBodyModuleReserveRuleModuleConfigList(TeaModel):
    def __init__(
        self,
        code: str = None,
        value: str = None,
    ):
        self.code = code
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.value is not None:
            result['value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('value') is not None:
            self.value = m.get('value')
        return self


class TravelStandardQueryResponseBodyModuleReserveRule(TeaModel):
    def __init__(
        self,
        main_reserve_rule: TravelStandardQueryResponseBodyModuleReserveRuleMainReserveRule = None,
        module_config_list: List[TravelStandardQueryResponseBodyModuleReserveRuleModuleConfigList] = None,
    ):
        self.main_reserve_rule = main_reserve_rule
        self.module_config_list = module_config_list

    def validate(self):
        if self.main_reserve_rule:
            self.main_reserve_rule.validate()
        if self.module_config_list:
            for k in self.module_config_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.main_reserve_rule is not None:
            result['main_reserve_rule'] = self.main_reserve_rule.to_map()
        result['module_config_list'] = []
        if self.module_config_list is not None:
            for k in self.module_config_list:
                result['module_config_list'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('main_reserve_rule') is not None:
            temp_model = TravelStandardQueryResponseBodyModuleReserveRuleMainReserveRule()
            self.main_reserve_rule = temp_model.from_map(m['main_reserve_rule'])
        self.module_config_list = []
        if m.get('module_config_list') is not None:
            for k in m.get('module_config_list'):
                temp_model = TravelStandardQueryResponseBodyModuleReserveRuleModuleConfigList()
                self.module_config_list.append(temp_model.from_map(k))
        return self


class TravelStandardQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        activated_service_type_list: List[str] = None,
        reserve_rule: TravelStandardQueryResponseBodyModuleReserveRule = None,
    ):
        self.activated_service_type_list = activated_service_type_list
        self.reserve_rule = reserve_rule

    def validate(self):
        if self.reserve_rule:
            self.reserve_rule.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.activated_service_type_list is not None:
            result['activated_service_type_list'] = self.activated_service_type_list
        if self.reserve_rule is not None:
            result['reserve_rule'] = self.reserve_rule.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('activated_service_type_list') is not None:
            self.activated_service_type_list = m.get('activated_service_type_list')
        if m.get('reserve_rule') is not None:
            temp_model = TravelStandardQueryResponseBodyModuleReserveRule()
            self.reserve_rule = temp_model.from_map(m['reserve_rule'])
        return self


class TravelStandardQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TravelStandardQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TravelStandardQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TravelStandardQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TravelStandardQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TravelStandardQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TripBusinessInstanceQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class TripBusinessInstanceQueryRequest(TeaModel):
    def __init__(
        self,
        business_instance_id: str = None,
        third_business_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.business_instance_id = business_instance_id
        self.third_business_id = third_business_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_instance_id is not None:
            result['business_instance_id'] = self.business_instance_id
        if self.third_business_id is not None:
            result['third_business_id'] = self.third_business_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('business_instance_id') is not None:
            self.business_instance_id = m.get('business_instance_id')
        if m.get('third_business_id') is not None:
            self.third_business_id = m.get('third_business_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class TripBusinessInstanceQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        creator: str = None,
        gmt_create: int = None,
        gmt_modified: int = None,
        status: str = None,
    ):
        self.creator = creator
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.creator is not None:
            result['creator'] = self.creator
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_modified is not None:
            result['gmt_modified'] = self.gmt_modified
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('creator') is not None:
            self.creator = m.get('creator')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_modified') is not None:
            self.gmt_modified = m.get('gmt_modified')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class TripBusinessInstanceQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TripBusinessInstanceQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TripBusinessInstanceQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TripBusinessInstanceQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TripBusinessInstanceQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TripBusinessInstanceQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TripCCInfoQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TripCCInfoQueryRequest(TeaModel):
    def __init__(
        self,
        business_instance_id: str = None,
        node_id: str = None,
        third_business_id: str = None,
    ):
        self.business_instance_id = business_instance_id
        self.node_id = node_id
        self.third_business_id = third_business_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_instance_id is not None:
            result['business_instance_id'] = self.business_instance_id
        if self.node_id is not None:
            result['node_id'] = self.node_id
        if self.third_business_id is not None:
            result['third_business_id'] = self.third_business_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('business_instance_id') is not None:
            self.business_instance_id = m.get('business_instance_id')
        if m.get('node_id') is not None:
            self.node_id = m.get('node_id')
        if m.get('third_business_id') is not None:
            self.third_business_id = m.get('third_business_id')
        return self


class TripCCInfoQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        notifier: str = None,
        notify_start_time: int = None,
    ):
        self.notifier = notifier
        self.notify_start_time = notify_start_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.notifier is not None:
            result['notifier'] = self.notifier
        if self.notify_start_time is not None:
            result['notify_start_time'] = self.notify_start_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('notifier') is not None:
            self.notifier = m.get('notifier')
        if m.get('notify_start_time') is not None:
            self.notify_start_time = m.get('notify_start_time')
        return self


class TripCCInfoQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[TripCCInfoQueryResponseBodyModule] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = TripCCInfoQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TripCCInfoQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TripCCInfoQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TripCCInfoQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TripTaskQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class TripTaskQueryRequest(TeaModel):
    def __init__(
        self,
        business_instance_id: str = None,
        third_business_id: str = None,
        user_id: str = None,
        user_name: str = None,
    ):
        self.business_instance_id = business_instance_id
        self.third_business_id = third_business_id
        self.user_id = user_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_instance_id is not None:
            result['business_instance_id'] = self.business_instance_id
        if self.third_business_id is not None:
            result['third_business_id'] = self.third_business_id
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_name is not None:
            result['user_name'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('business_instance_id') is not None:
            self.business_instance_id = m.get('business_instance_id')
        if m.get('third_business_id') is not None:
            self.third_business_id = m.get('third_business_id')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_name') is not None:
            self.user_name = m.get('user_name')
        return self


class TripTaskQueryResponseBodyModuleRecordTasks(TeaModel):
    def __init__(
        self,
        actioner: str = None,
        attributes: str = None,
        gmt_create: int = None,
        gmt_finished: int = None,
        id: int = None,
        node_id: str = None,
        out_result: str = None,
        owner: str = None,
        status: str = None,
    ):
        self.actioner = actioner
        self.attributes = attributes
        self.gmt_create = gmt_create
        self.gmt_finished = gmt_finished
        self.id = id
        self.node_id = node_id
        self.out_result = out_result
        self.owner = owner
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actioner is not None:
            result['actioner'] = self.actioner
        if self.attributes is not None:
            result['attributes'] = self.attributes
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_finished is not None:
            result['gmt_finished'] = self.gmt_finished
        if self.id is not None:
            result['id'] = self.id
        if self.node_id is not None:
            result['node_id'] = self.node_id
        if self.out_result is not None:
            result['out_result'] = self.out_result
        if self.owner is not None:
            result['owner'] = self.owner
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('actioner') is not None:
            self.actioner = m.get('actioner')
        if m.get('attributes') is not None:
            self.attributes = m.get('attributes')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_finished') is not None:
            self.gmt_finished = m.get('gmt_finished')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('node_id') is not None:
            self.node_id = m.get('node_id')
        if m.get('out_result') is not None:
            self.out_result = m.get('out_result')
        if m.get('owner') is not None:
            self.owner = m.get('owner')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class TripTaskQueryResponseBodyModuleRunningTasks(TeaModel):
    def __init__(
        self,
        actioner: str = None,
        attributes: str = None,
        gmt_create: int = None,
        gmt_finished: int = None,
        id: int = None,
        node_id: str = None,
        out_result: str = None,
        owner: str = None,
        status: str = None,
    ):
        self.actioner = actioner
        self.attributes = attributes
        self.gmt_create = gmt_create
        self.gmt_finished = gmt_finished
        self.id = id
        self.node_id = node_id
        self.out_result = out_result
        self.owner = owner
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.actioner is not None:
            result['actioner'] = self.actioner
        if self.attributes is not None:
            result['attributes'] = self.attributes
        if self.gmt_create is not None:
            result['gmt_create'] = self.gmt_create
        if self.gmt_finished is not None:
            result['gmt_finished'] = self.gmt_finished
        if self.id is not None:
            result['id'] = self.id
        if self.node_id is not None:
            result['node_id'] = self.node_id
        if self.out_result is not None:
            result['out_result'] = self.out_result
        if self.owner is not None:
            result['owner'] = self.owner
        if self.status is not None:
            result['status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('actioner') is not None:
            self.actioner = m.get('actioner')
        if m.get('attributes') is not None:
            self.attributes = m.get('attributes')
        if m.get('gmt_create') is not None:
            self.gmt_create = m.get('gmt_create')
        if m.get('gmt_finished') is not None:
            self.gmt_finished = m.get('gmt_finished')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('node_id') is not None:
            self.node_id = m.get('node_id')
        if m.get('out_result') is not None:
            self.out_result = m.get('out_result')
        if m.get('owner') is not None:
            self.owner = m.get('owner')
        if m.get('status') is not None:
            self.status = m.get('status')
        return self


class TripTaskQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        need_refresh: bool = None,
        record_tasks: List[TripTaskQueryResponseBodyModuleRecordTasks] = None,
        running_tasks: List[TripTaskQueryResponseBodyModuleRunningTasks] = None,
    ):
        self.need_refresh = need_refresh
        self.record_tasks = record_tasks
        self.running_tasks = running_tasks

    def validate(self):
        if self.record_tasks:
            for k in self.record_tasks:
                if k:
                    k.validate()
        if self.running_tasks:
            for k in self.running_tasks:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.need_refresh is not None:
            result['needRefresh'] = self.need_refresh
        result['record_tasks'] = []
        if self.record_tasks is not None:
            for k in self.record_tasks:
                result['record_tasks'].append(k.to_map() if k else None)
        result['running_tasks'] = []
        if self.running_tasks is not None:
            for k in self.running_tasks:
                result['running_tasks'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('needRefresh') is not None:
            self.need_refresh = m.get('needRefresh')
        self.record_tasks = []
        if m.get('record_tasks') is not None:
            for k in m.get('record_tasks'):
                temp_model = TripTaskQueryResponseBodyModuleRecordTasks()
                self.record_tasks.append(temp_model.from_map(k))
        self.running_tasks = []
        if m.get('running_tasks') is not None:
            for k in m.get('running_tasks'):
                temp_model = TripTaskQueryResponseBodyModuleRunningTasks()
                self.running_tasks.append(temp_model.from_map(k))
        return self


class TripTaskQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: TripTaskQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        # module。
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = TripTaskQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class TripTaskQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TripTaskQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TripTaskQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateCustomRoleHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class UpdateCustomRoleRequest(TeaModel):
    def __init__(
        self,
        role_id: str = None,
        role_name: str = None,
    ):
        # This parameter is required.
        self.role_id = role_id
        # This parameter is required.
        self.role_name = role_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.role_id is not None:
            result['role_id'] = self.role_id
        if self.role_name is not None:
            result['role_name'] = self.role_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('role_id') is not None:
            self.role_id = m.get('role_id')
        if m.get('role_name') is not None:
            self.role_name = m.get('role_name')
        return self


class UpdateCustomRoleResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class UpdateCustomRoleResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateCustomRoleResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateCustomRoleResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateDepartmentHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class UpdateDepartmentRequest(TeaModel):
    def __init__(
        self,
        dept_name: str = None,
        manager_employee_id_list: List[str] = None,
        out_dept_id: str = None,
        out_dept_pid: str = None,
    ):
        # This parameter is required.
        self.dept_name = dept_name
        self.manager_employee_id_list = manager_employee_id_list
        # This parameter is required.
        self.out_dept_id = out_dept_id
        # This parameter is required.
        self.out_dept_pid = out_dept_pid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.manager_employee_id_list is not None:
            result['manager_employee_id_list'] = self.manager_employee_id_list
        if self.out_dept_id is not None:
            result['out_dept_id'] = self.out_dept_id
        if self.out_dept_pid is not None:
            result['out_dept_pid'] = self.out_dept_pid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('manager_employee_id_list') is not None:
            self.manager_employee_id_list = m.get('manager_employee_id_list')
        if m.get('out_dept_id') is not None:
            self.out_dept_id = m.get('out_dept_id')
        if m.get('out_dept_pid') is not None:
            self.out_dept_pid = m.get('out_dept_pid')
        return self


class UpdateDepartmentShrinkRequest(TeaModel):
    def __init__(
        self,
        dept_name: str = None,
        manager_employee_id_list_shrink: str = None,
        out_dept_id: str = None,
        out_dept_pid: str = None,
    ):
        # This parameter is required.
        self.dept_name = dept_name
        self.manager_employee_id_list_shrink = manager_employee_id_list_shrink
        # This parameter is required.
        self.out_dept_id = out_dept_id
        # This parameter is required.
        self.out_dept_pid = out_dept_pid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.manager_employee_id_list_shrink is not None:
            result['manager_employee_id_list'] = self.manager_employee_id_list_shrink
        if self.out_dept_id is not None:
            result['out_dept_id'] = self.out_dept_id
        if self.out_dept_pid is not None:
            result['out_dept_pid'] = self.out_dept_pid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('manager_employee_id_list') is not None:
            self.manager_employee_id_list_shrink = m.get('manager_employee_id_list')
        if m.get('out_dept_id') is not None:
            self.out_dept_id = m.get('out_dept_id')
        if m.get('out_dept_pid') is not None:
            self.out_dept_pid = m.get('out_dept_pid')
        return self


class UpdateDepartmentResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class UpdateDepartmentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateDepartmentResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateDepartmentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateEmployeeHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class UpdateEmployeeRequestCertList(TeaModel):
    def __init__(
        self,
        birthday: str = None,
        cert_expired_time: str = None,
        cert_nation: str = None,
        cert_no: str = None,
        cert_type: int = None,
        gender: str = None,
        nationality: str = None,
        phone: str = None,
        real_name: str = None,
        real_name_en: str = None,
    ):
        self.birthday = birthday
        self.cert_expired_time = cert_expired_time
        self.cert_nation = cert_nation
        self.cert_no = cert_no
        self.cert_type = cert_type
        self.gender = gender
        self.nationality = nationality
        self.phone = phone
        self.real_name = real_name
        self.real_name_en = real_name_en

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_expired_time is not None:
            result['cert_expired_time'] = self.cert_expired_time
        if self.cert_nation is not None:
            result['cert_nation'] = self.cert_nation
        if self.cert_no is not None:
            result['cert_no'] = self.cert_no
        if self.cert_type is not None:
            result['cert_type'] = self.cert_type
        if self.gender is not None:
            result['gender'] = self.gender
        if self.nationality is not None:
            result['nationality'] = self.nationality
        if self.phone is not None:
            result['phone'] = self.phone
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_expired_time') is not None:
            self.cert_expired_time = m.get('cert_expired_time')
        if m.get('cert_nation') is not None:
            self.cert_nation = m.get('cert_nation')
        if m.get('cert_no') is not None:
            self.cert_no = m.get('cert_no')
        if m.get('cert_type') is not None:
            self.cert_type = m.get('cert_type')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('nationality') is not None:
            self.nationality = m.get('nationality')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        return self


class UpdateEmployeeRequest(TeaModel):
    def __init__(
        self,
        avatar: str = None,
        base_city_code_list: List[str] = None,
        birthday: str = None,
        cert_list: List[UpdateEmployeeRequestCertList] = None,
        custom_role_code_list: List[str] = None,
        email: str = None,
        gender: str = None,
        is_admin: bool = None,
        is_boss: bool = None,
        is_dept_leader: bool = None,
        job_no: str = None,
        manager_user_id: str = None,
        out_dept_id_list: List[str] = None,
        phone: str = None,
        position_level: str = None,
        real_name: str = None,
        real_name_en: str = None,
        user_id: str = None,
        user_nick: str = None,
    ):
        self.avatar = avatar
        self.base_city_code_list = base_city_code_list
        self.birthday = birthday
        self.cert_list = cert_list
        self.custom_role_code_list = custom_role_code_list
        self.email = email
        self.gender = gender
        self.is_admin = is_admin
        self.is_boss = is_boss
        self.is_dept_leader = is_dept_leader
        self.job_no = job_no
        self.manager_user_id = manager_user_id
        self.out_dept_id_list = out_dept_id_list
        self.phone = phone
        self.position_level = position_level
        self.real_name = real_name
        self.real_name_en = real_name_en
        # This parameter is required.
        self.user_id = user_id
        self.user_nick = user_nick

    def validate(self):
        if self.cert_list:
            for k in self.cert_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avatar is not None:
            result['avatar'] = self.avatar
        if self.base_city_code_list is not None:
            result['base_city_code_list'] = self.base_city_code_list
        if self.birthday is not None:
            result['birthday'] = self.birthday
        result['cert_list'] = []
        if self.cert_list is not None:
            for k in self.cert_list:
                result['cert_list'].append(k.to_map() if k else None)
        if self.custom_role_code_list is not None:
            result['custom_role_code_list'] = self.custom_role_code_list
        if self.email is not None:
            result['email'] = self.email
        if self.gender is not None:
            result['gender'] = self.gender
        if self.is_admin is not None:
            result['is_admin'] = self.is_admin
        if self.is_boss is not None:
            result['is_boss'] = self.is_boss
        if self.is_dept_leader is not None:
            result['is_dept_leader'] = self.is_dept_leader
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.out_dept_id_list is not None:
            result['out_dept_id_list'] = self.out_dept_id_list
        if self.phone is not None:
            result['phone'] = self.phone
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_nick is not None:
            result['user_nick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('avatar') is not None:
            self.avatar = m.get('avatar')
        if m.get('base_city_code_list') is not None:
            self.base_city_code_list = m.get('base_city_code_list')
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        self.cert_list = []
        if m.get('cert_list') is not None:
            for k in m.get('cert_list'):
                temp_model = UpdateEmployeeRequestCertList()
                self.cert_list.append(temp_model.from_map(k))
        if m.get('custom_role_code_list') is not None:
            self.custom_role_code_list = m.get('custom_role_code_list')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('is_admin') is not None:
            self.is_admin = m.get('is_admin')
        if m.get('is_boss') is not None:
            self.is_boss = m.get('is_boss')
        if m.get('is_dept_leader') is not None:
            self.is_dept_leader = m.get('is_dept_leader')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('out_dept_id_list') is not None:
            self.out_dept_id_list = m.get('out_dept_id_list')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_nick') is not None:
            self.user_nick = m.get('user_nick')
        return self


class UpdateEmployeeShrinkRequest(TeaModel):
    def __init__(
        self,
        avatar: str = None,
        base_city_code_list_shrink: str = None,
        birthday: str = None,
        cert_list_shrink: str = None,
        custom_role_code_list_shrink: str = None,
        email: str = None,
        gender: str = None,
        is_admin: bool = None,
        is_boss: bool = None,
        is_dept_leader: bool = None,
        job_no: str = None,
        manager_user_id: str = None,
        out_dept_id_list_shrink: str = None,
        phone: str = None,
        position_level: str = None,
        real_name: str = None,
        real_name_en: str = None,
        user_id: str = None,
        user_nick: str = None,
    ):
        self.avatar = avatar
        self.base_city_code_list_shrink = base_city_code_list_shrink
        self.birthday = birthday
        self.cert_list_shrink = cert_list_shrink
        self.custom_role_code_list_shrink = custom_role_code_list_shrink
        self.email = email
        self.gender = gender
        self.is_admin = is_admin
        self.is_boss = is_boss
        self.is_dept_leader = is_dept_leader
        self.job_no = job_no
        self.manager_user_id = manager_user_id
        self.out_dept_id_list_shrink = out_dept_id_list_shrink
        self.phone = phone
        self.position_level = position_level
        self.real_name = real_name
        self.real_name_en = real_name_en
        # This parameter is required.
        self.user_id = user_id
        self.user_nick = user_nick

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.avatar is not None:
            result['avatar'] = self.avatar
        if self.base_city_code_list_shrink is not None:
            result['base_city_code_list'] = self.base_city_code_list_shrink
        if self.birthday is not None:
            result['birthday'] = self.birthday
        if self.cert_list_shrink is not None:
            result['cert_list'] = self.cert_list_shrink
        if self.custom_role_code_list_shrink is not None:
            result['custom_role_code_list'] = self.custom_role_code_list_shrink
        if self.email is not None:
            result['email'] = self.email
        if self.gender is not None:
            result['gender'] = self.gender
        if self.is_admin is not None:
            result['is_admin'] = self.is_admin
        if self.is_boss is not None:
            result['is_boss'] = self.is_boss
        if self.is_dept_leader is not None:
            result['is_dept_leader'] = self.is_dept_leader
        if self.job_no is not None:
            result['job_no'] = self.job_no
        if self.manager_user_id is not None:
            result['manager_user_id'] = self.manager_user_id
        if self.out_dept_id_list_shrink is not None:
            result['out_dept_id_list'] = self.out_dept_id_list_shrink
        if self.phone is not None:
            result['phone'] = self.phone
        if self.position_level is not None:
            result['position_level'] = self.position_level
        if self.real_name is not None:
            result['real_name'] = self.real_name
        if self.real_name_en is not None:
            result['real_name_en'] = self.real_name_en
        if self.user_id is not None:
            result['user_id'] = self.user_id
        if self.user_nick is not None:
            result['user_nick'] = self.user_nick
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('avatar') is not None:
            self.avatar = m.get('avatar')
        if m.get('base_city_code_list') is not None:
            self.base_city_code_list_shrink = m.get('base_city_code_list')
        if m.get('birthday') is not None:
            self.birthday = m.get('birthday')
        if m.get('cert_list') is not None:
            self.cert_list_shrink = m.get('cert_list')
        if m.get('custom_role_code_list') is not None:
            self.custom_role_code_list_shrink = m.get('custom_role_code_list')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('gender') is not None:
            self.gender = m.get('gender')
        if m.get('is_admin') is not None:
            self.is_admin = m.get('is_admin')
        if m.get('is_boss') is not None:
            self.is_boss = m.get('is_boss')
        if m.get('is_dept_leader') is not None:
            self.is_dept_leader = m.get('is_dept_leader')
        if m.get('job_no') is not None:
            self.job_no = m.get('job_no')
        if m.get('manager_user_id') is not None:
            self.manager_user_id = m.get('manager_user_id')
        if m.get('out_dept_id_list') is not None:
            self.out_dept_id_list_shrink = m.get('out_dept_id_list')
        if m.get('phone') is not None:
            self.phone = m.get('phone')
        if m.get('position_level') is not None:
            self.position_level = m.get('position_level')
        if m.get('real_name') is not None:
            self.real_name = m.get('real_name')
        if m.get('real_name_en') is not None:
            self.real_name_en = m.get('real_name_en')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        if m.get('user_nick') is not None:
            self.user_nick = m.get('user_nick')
        return self


class UpdateEmployeeResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class UpdateEmployeeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateEmployeeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateEmployeeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateEmployeeLeaveStatusHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_corp_token = x_acs_btrip_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_corp_token is not None:
            result['x-acs-btrip-corp-token'] = self.x_acs_btrip_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-corp-token') is not None:
            self.x_acs_btrip_corp_token = m.get('x-acs-btrip-corp-token')
        return self


class UpdateEmployeeLeaveStatusRequest(TeaModel):
    def __init__(
        self,
        is_leave: bool = None,
        user_id: str = None,
    ):
        # This parameter is required.
        self.is_leave = is_leave
        # This parameter is required.
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_leave is not None:
            result['is_leave'] = self.is_leave
        if self.user_id is not None:
            result['user_id'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('is_leave') is not None:
            self.is_leave = m.get('is_leave')
        if m.get('user_id') is not None:
            self.user_id = m.get('user_id')
        return self


class UpdateEmployeeLeaveStatusResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        http_status_code: int = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.http_status_code = http_status_code
        self.message = message
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.http_status_code is not None:
            result['httpStatusCode'] = self.http_status_code
        if self.message is not None:
            result['message'] = self.message
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('httpStatusCode') is not None:
            self.http_status_code = m.get('httpStatusCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class UpdateEmployeeLeaveStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateEmployeeLeaveStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateEmployeeLeaveStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UserQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class UserQueryRequest(TeaModel):
    def __init__(
        self,
        modified_time_greater_or_equal_than: str = None,
        page_size: int = None,
        page_token: str = None,
        third_part_job_no: str = None,
    ):
        self.modified_time_greater_or_equal_than = modified_time_greater_or_equal_than
        self.page_size = page_size
        self.page_token = page_token
        self.third_part_job_no = third_part_job_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.modified_time_greater_or_equal_than is not None:
            result['modified_time_greater_or_equal_than'] = self.modified_time_greater_or_equal_than
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.page_token is not None:
            result['page_token'] = self.page_token
        if self.third_part_job_no is not None:
            result['third_part_job_no'] = self.third_part_job_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('modified_time_greater_or_equal_than') is not None:
            self.modified_time_greater_or_equal_than = m.get('modified_time_greater_or_equal_than')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('page_token') is not None:
            self.page_token = m.get('page_token')
        if m.get('third_part_job_no') is not None:
            self.third_part_job_no = m.get('third_part_job_no')
        return self


class UserQueryResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        employee_nick: str = None,
        leave_status: int = None,
        third_part_employee_id: str = None,
        third_part_job_no: str = None,
    ):
        self.employee_nick = employee_nick
        self.leave_status = leave_status
        self.third_part_employee_id = third_part_employee_id
        self.third_part_job_no = third_part_job_no

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.employee_nick is not None:
            result['employee_nick'] = self.employee_nick
        if self.leave_status is not None:
            result['leave_status'] = self.leave_status
        if self.third_part_employee_id is not None:
            result['third_part_employee_id'] = self.third_part_employee_id
        if self.third_part_job_no is not None:
            result['third_part_job_no'] = self.third_part_job_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('employee_nick') is not None:
            self.employee_nick = m.get('employee_nick')
        if m.get('leave_status') is not None:
            self.leave_status = m.get('leave_status')
        if m.get('third_part_employee_id') is not None:
            self.third_part_employee_id = m.get('third_part_employee_id')
        if m.get('third_part_job_no') is not None:
            self.third_part_job_no = m.get('third_part_job_no')
        return self


class UserQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        has_more: bool = None,
        items: List[UserQueryResponseBodyModuleItems] = None,
        page_token: str = None,
        total: int = None,
    ):
        self.has_more = has_more
        self.items = items
        self.page_token = page_token
        self.total = total

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.has_more is not None:
            result['has_more'] = self.has_more
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_token is not None:
            result['page_token'] = self.page_token
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('has_more') is not None:
            self.has_more = m.get('has_more')
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = UserQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_token') is not None:
            self.page_token = m.get('page_token')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class UserQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: UserQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = UserQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class UserQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UserQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UserQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class VatInvoiceScanQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class VatInvoiceScanQueryRequest(TeaModel):
    def __init__(
        self,
        bill_date: str = None,
        bill_id: int = None,
        invoice_sub_task_id: int = None,
        page_no: int = None,
        page_size: int = None,
    ):
        # This parameter is required.
        self.bill_date = bill_date
        self.bill_id = bill_id
        self.invoice_sub_task_id = invoice_sub_task_id
        self.page_no = page_no
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.bill_id is not None:
            result['bill_id'] = self.bill_id
        if self.invoice_sub_task_id is not None:
            result['invoice_sub_task_id'] = self.invoice_sub_task_id
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('bill_id') is not None:
            self.bill_id = m.get('bill_id')
        if m.get('invoice_sub_task_id') is not None:
            self.invoice_sub_task_id = m.get('invoice_sub_task_id')
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        return self


class VatInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails(TeaModel):
    def __init__(
        self,
        amount: str = None,
        index: str = None,
        item_name: str = None,
        quantity: str = None,
        specification: str = None,
        tax: str = None,
        tax_rate: str = None,
        unit: str = None,
        unit_price: str = None,
    ):
        self.amount = amount
        # 行号
        self.index = index
        self.item_name = item_name
        self.quantity = quantity
        self.specification = specification
        self.tax = tax
        self.tax_rate = tax_rate
        self.unit = unit
        self.unit_price = unit_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount is not None:
            result['amount'] = self.amount
        if self.index is not None:
            result['index'] = self.index
        if self.item_name is not None:
            result['item_name'] = self.item_name
        if self.quantity is not None:
            result['quantity'] = self.quantity
        if self.specification is not None:
            result['specification'] = self.specification
        if self.tax is not None:
            result['tax'] = self.tax
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.unit is not None:
            result['unit'] = self.unit
        if self.unit_price is not None:
            result['unit_price'] = self.unit_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('index') is not None:
            self.index = m.get('index')
        if m.get('item_name') is not None:
            self.item_name = m.get('item_name')
        if m.get('quantity') is not None:
            self.quantity = m.get('quantity')
        if m.get('specification') is not None:
            self.specification = m.get('specification')
        if m.get('tax') is not None:
            self.tax = m.get('tax')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('unit') is not None:
            self.unit = m.get('unit')
        if m.get('unit_price') is not None:
            self.unit_price = m.get('unit_price')
        return self


class VatInvoiceScanQueryResponseBodyModuleItems(TeaModel):
    def __init__(
        self,
        amount_with_tax: str = None,
        amount_without_tax: str = None,
        bill_date: str = None,
        check_code: str = None,
        drawer: str = None,
        id: str = None,
        invoice_code: str = None,
        invoice_day: str = None,
        invoice_detail: str = None,
        invoice_details: List[VatInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails] = None,
        invoice_location: str = None,
        invoice_no: str = None,
        invoice_sub_task_id: int = None,
        invoice_type: int = None,
        invoice_type_desc: str = None,
        machine_code: str = None,
        ofd_oss_url: str = None,
        oss_url: str = None,
        password_area: str = None,
        pdf_oss_url: str = None,
        purchaser_bank_account_info: str = None,
        purchaser_contact_info: str = None,
        purchaser_name: str = None,
        purchaser_tax_no: str = None,
        recipient: str = None,
        remarks: str = None,
        reviewer: str = None,
        seller_bank_account_info: str = None,
        seller_contact_info: str = None,
        seller_name: str = None,
        seller_tax_no: str = None,
        smart_check_code: str = None,
        tax_amount: str = None,
        tax_rate: str = None,
        total_amount_in_words: str = None,
        xml_oss_url: str = None,
    ):
        self.amount_with_tax = amount_with_tax
        self.amount_without_tax = amount_without_tax
        self.bill_date = bill_date
        self.check_code = check_code
        self.drawer = drawer
        self.id = id
        self.invoice_code = invoice_code
        self.invoice_day = invoice_day
        self.invoice_detail = invoice_detail
        self.invoice_details = invoice_details
        self.invoice_location = invoice_location
        self.invoice_no = invoice_no
        self.invoice_sub_task_id = invoice_sub_task_id
        self.invoice_type = invoice_type
        self.invoice_type_desc = invoice_type_desc
        # 机器码
        self.machine_code = machine_code
        self.ofd_oss_url = ofd_oss_url
        self.oss_url = oss_url
        self.password_area = password_area
        self.pdf_oss_url = pdf_oss_url
        self.purchaser_bank_account_info = purchaser_bank_account_info
        self.purchaser_contact_info = purchaser_contact_info
        self.purchaser_name = purchaser_name
        self.purchaser_tax_no = purchaser_tax_no
        self.recipient = recipient
        self.remarks = remarks
        self.reviewer = reviewer
        self.seller_bank_account_info = seller_bank_account_info
        self.seller_contact_info = seller_contact_info
        self.seller_name = seller_name
        self.seller_tax_no = seller_tax_no
        self.smart_check_code = smart_check_code
        self.tax_amount = tax_amount
        self.tax_rate = tax_rate
        self.total_amount_in_words = total_amount_in_words
        self.xml_oss_url = xml_oss_url

    def validate(self):
        if self.invoice_details:
            for k in self.invoice_details:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.amount_with_tax is not None:
            result['amount_with_tax'] = self.amount_with_tax
        if self.amount_without_tax is not None:
            result['amount_without_tax'] = self.amount_without_tax
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        if self.check_code is not None:
            result['check_code'] = self.check_code
        if self.drawer is not None:
            result['drawer'] = self.drawer
        if self.id is not None:
            result['id'] = self.id
        if self.invoice_code is not None:
            result['invoice_code'] = self.invoice_code
        if self.invoice_day is not None:
            result['invoice_day'] = self.invoice_day
        if self.invoice_detail is not None:
            result['invoice_detail'] = self.invoice_detail
        result['invoice_details'] = []
        if self.invoice_details is not None:
            for k in self.invoice_details:
                result['invoice_details'].append(k.to_map() if k else None)
        if self.invoice_location is not None:
            result['invoice_location'] = self.invoice_location
        if self.invoice_no is not None:
            result['invoice_no'] = self.invoice_no
        if self.invoice_sub_task_id is not None:
            result['invoice_sub_task_id'] = self.invoice_sub_task_id
        if self.invoice_type is not None:
            result['invoice_type'] = self.invoice_type
        if self.invoice_type_desc is not None:
            result['invoice_type_desc'] = self.invoice_type_desc
        if self.machine_code is not None:
            result['machine_code'] = self.machine_code
        if self.ofd_oss_url is not None:
            result['ofd_oss_url'] = self.ofd_oss_url
        if self.oss_url is not None:
            result['oss_url'] = self.oss_url
        if self.password_area is not None:
            result['password_area'] = self.password_area
        if self.pdf_oss_url is not None:
            result['pdf_oss_url'] = self.pdf_oss_url
        if self.purchaser_bank_account_info is not None:
            result['purchaser_bank_account_info'] = self.purchaser_bank_account_info
        if self.purchaser_contact_info is not None:
            result['purchaser_contact_info'] = self.purchaser_contact_info
        if self.purchaser_name is not None:
            result['purchaser_name'] = self.purchaser_name
        if self.purchaser_tax_no is not None:
            result['purchaser_tax_no'] = self.purchaser_tax_no
        if self.recipient is not None:
            result['recipient'] = self.recipient
        if self.remarks is not None:
            result['remarks'] = self.remarks
        if self.reviewer is not None:
            result['reviewer'] = self.reviewer
        if self.seller_bank_account_info is not None:
            result['seller_bank_account_info'] = self.seller_bank_account_info
        if self.seller_contact_info is not None:
            result['seller_contact_info'] = self.seller_contact_info
        if self.seller_name is not None:
            result['seller_name'] = self.seller_name
        if self.seller_tax_no is not None:
            result['seller_tax_no'] = self.seller_tax_no
        if self.smart_check_code is not None:
            result['smart_check_code'] = self.smart_check_code
        if self.tax_amount is not None:
            result['tax_amount'] = self.tax_amount
        if self.tax_rate is not None:
            result['tax_rate'] = self.tax_rate
        if self.total_amount_in_words is not None:
            result['total_amount_in_words'] = self.total_amount_in_words
        if self.xml_oss_url is not None:
            result['xml_oss_url'] = self.xml_oss_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('amount_with_tax') is not None:
            self.amount_with_tax = m.get('amount_with_tax')
        if m.get('amount_without_tax') is not None:
            self.amount_without_tax = m.get('amount_without_tax')
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        if m.get('check_code') is not None:
            self.check_code = m.get('check_code')
        if m.get('drawer') is not None:
            self.drawer = m.get('drawer')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('invoice_code') is not None:
            self.invoice_code = m.get('invoice_code')
        if m.get('invoice_day') is not None:
            self.invoice_day = m.get('invoice_day')
        if m.get('invoice_detail') is not None:
            self.invoice_detail = m.get('invoice_detail')
        self.invoice_details = []
        if m.get('invoice_details') is not None:
            for k in m.get('invoice_details'):
                temp_model = VatInvoiceScanQueryResponseBodyModuleItemsInvoiceDetails()
                self.invoice_details.append(temp_model.from_map(k))
        if m.get('invoice_location') is not None:
            self.invoice_location = m.get('invoice_location')
        if m.get('invoice_no') is not None:
            self.invoice_no = m.get('invoice_no')
        if m.get('invoice_sub_task_id') is not None:
            self.invoice_sub_task_id = m.get('invoice_sub_task_id')
        if m.get('invoice_type') is not None:
            self.invoice_type = m.get('invoice_type')
        if m.get('invoice_type_desc') is not None:
            self.invoice_type_desc = m.get('invoice_type_desc')
        if m.get('machine_code') is not None:
            self.machine_code = m.get('machine_code')
        if m.get('ofd_oss_url') is not None:
            self.ofd_oss_url = m.get('ofd_oss_url')
        if m.get('oss_url') is not None:
            self.oss_url = m.get('oss_url')
        if m.get('password_area') is not None:
            self.password_area = m.get('password_area')
        if m.get('pdf_oss_url') is not None:
            self.pdf_oss_url = m.get('pdf_oss_url')
        if m.get('purchaser_bank_account_info') is not None:
            self.purchaser_bank_account_info = m.get('purchaser_bank_account_info')
        if m.get('purchaser_contact_info') is not None:
            self.purchaser_contact_info = m.get('purchaser_contact_info')
        if m.get('purchaser_name') is not None:
            self.purchaser_name = m.get('purchaser_name')
        if m.get('purchaser_tax_no') is not None:
            self.purchaser_tax_no = m.get('purchaser_tax_no')
        if m.get('recipient') is not None:
            self.recipient = m.get('recipient')
        if m.get('remarks') is not None:
            self.remarks = m.get('remarks')
        if m.get('reviewer') is not None:
            self.reviewer = m.get('reviewer')
        if m.get('seller_bank_account_info') is not None:
            self.seller_bank_account_info = m.get('seller_bank_account_info')
        if m.get('seller_contact_info') is not None:
            self.seller_contact_info = m.get('seller_contact_info')
        if m.get('seller_name') is not None:
            self.seller_name = m.get('seller_name')
        if m.get('seller_tax_no') is not None:
            self.seller_tax_no = m.get('seller_tax_no')
        if m.get('smart_check_code') is not None:
            self.smart_check_code = m.get('smart_check_code')
        if m.get('tax_amount') is not None:
            self.tax_amount = m.get('tax_amount')
        if m.get('tax_rate') is not None:
            self.tax_rate = m.get('tax_rate')
        if m.get('total_amount_in_words') is not None:
            self.total_amount_in_words = m.get('total_amount_in_words')
        if m.get('xml_oss_url') is not None:
            self.xml_oss_url = m.get('xml_oss_url')
        return self


class VatInvoiceScanQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        items: List[VatInvoiceScanQueryResponseBodyModuleItems] = None,
        page_no: int = None,
        page_size: int = None,
        total_page: int = None,
        total_size: int = None,
    ):
        self.items = items
        self.page_no = page_no
        self.page_size = page_size
        self.total_page = total_page
        self.total_size = total_size

    def validate(self):
        if self.items:
            for k in self.items:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['items'] = []
        if self.items is not None:
            for k in self.items:
                result['items'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['page_no'] = self.page_no
        if self.page_size is not None:
            result['page_size'] = self.page_size
        if self.total_page is not None:
            result['total_page'] = self.total_page
        if self.total_size is not None:
            result['total_size'] = self.total_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.items = []
        if m.get('items') is not None:
            for k in m.get('items'):
                temp_model = VatInvoiceScanQueryResponseBodyModuleItems()
                self.items.append(temp_model.from_map(k))
        if m.get('page_no') is not None:
            self.page_no = m.get('page_no')
        if m.get('page_size') is not None:
            self.page_size = m.get('page_size')
        if m.get('total_page') is not None:
            self.total_page = m.get('total_page')
        if m.get('total_size') is not None:
            self.total_size = m.get('total_size')
        return self


class VatInvoiceScanQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: VatInvoiceScanQueryResponseBodyModule = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            self.module.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.module is not None:
            result['module'] = self.module.to_map()
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('module') is not None:
            temp_model = VatInvoiceScanQueryResponseBodyModule()
            self.module = temp_model.from_map(m['module'])
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class VatInvoiceScanQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: VatInvoiceScanQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = VatInvoiceScanQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class WaitApplyInvoiceTaskDetailQueryHeaders(TeaModel):
    def __init__(
        self,
        common_headers: Dict[str, str] = None,
        x_acs_btrip_so_corp_token: str = None,
    ):
        self.common_headers = common_headers
        self.x_acs_btrip_so_corp_token = x_acs_btrip_so_corp_token

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common_headers is not None:
            result['commonHeaders'] = self.common_headers
        if self.x_acs_btrip_so_corp_token is not None:
            result['x-acs-btrip-so-corp-token'] = self.x_acs_btrip_so_corp_token
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('commonHeaders') is not None:
            self.common_headers = m.get('commonHeaders')
        if m.get('x-acs-btrip-so-corp-token') is not None:
            self.x_acs_btrip_so_corp_token = m.get('x-acs-btrip-so-corp-token')
        return self


class WaitApplyInvoiceTaskDetailQueryRequest(TeaModel):
    def __init__(
        self,
        bill_date: str = None,
    ):
        # This parameter is required.
        self.bill_date = bill_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_date is not None:
            result['bill_date'] = self.bill_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bill_date') is not None:
            self.bill_date = m.get('bill_date')
        return self


class WaitApplyInvoiceTaskDetailQueryResponseBodyModule(TeaModel):
    def __init__(
        self,
        contact: str = None,
        email: str = None,
        flight_invoice_fee: str = None,
        fu_point_invoice_fee: str = None,
        hotel_normal_invoice_fee: str = None,
        hotel_special_invoice_fee: str = None,
        international_flight_invoice_fee: str = None,
        international_hotel_invoice_fee: str = None,
        invoice_third_part_id: str = None,
        invoice_title: str = None,
        mail_address: str = None,
        mail_city: str = None,
        mail_full_address: str = None,
        mail_province: str = None,
        meal_normal_invoice_fee: str = None,
        penalty_fee: str = None,
        remark: str = None,
        service_fee: str = None,
        telephone: str = None,
        train_acceleration_package_invoice_fee: str = None,
        train_invoice_fee: str = None,
        vas_mall_special_invoice_fee: str = None,
        vehicle_invoice_fee: str = None,
        vehicle_normal_invoice_fee: str = None,
    ):
        self.contact = contact
        self.email = email
        self.flight_invoice_fee = flight_invoice_fee
        self.fu_point_invoice_fee = fu_point_invoice_fee
        self.hotel_normal_invoice_fee = hotel_normal_invoice_fee
        self.hotel_special_invoice_fee = hotel_special_invoice_fee
        self.international_flight_invoice_fee = international_flight_invoice_fee
        self.international_hotel_invoice_fee = international_hotel_invoice_fee
        self.invoice_third_part_id = invoice_third_part_id
        self.invoice_title = invoice_title
        self.mail_address = mail_address
        self.mail_city = mail_city
        self.mail_full_address = mail_full_address
        self.mail_province = mail_province
        self.meal_normal_invoice_fee = meal_normal_invoice_fee
        self.penalty_fee = penalty_fee
        self.remark = remark
        self.service_fee = service_fee
        self.telephone = telephone
        self.train_acceleration_package_invoice_fee = train_acceleration_package_invoice_fee
        self.train_invoice_fee = train_invoice_fee
        self.vas_mall_special_invoice_fee = vas_mall_special_invoice_fee
        self.vehicle_invoice_fee = vehicle_invoice_fee
        self.vehicle_normal_invoice_fee = vehicle_normal_invoice_fee

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.contact is not None:
            result['contact'] = self.contact
        if self.email is not None:
            result['email'] = self.email
        if self.flight_invoice_fee is not None:
            result['flight_invoice_fee'] = self.flight_invoice_fee
        if self.fu_point_invoice_fee is not None:
            result['fu_point_invoice_fee'] = self.fu_point_invoice_fee
        if self.hotel_normal_invoice_fee is not None:
            result['hotel_normal_invoice_fee'] = self.hotel_normal_invoice_fee
        if self.hotel_special_invoice_fee is not None:
            result['hotel_special_invoice_fee'] = self.hotel_special_invoice_fee
        if self.international_flight_invoice_fee is not None:
            result['international_flight_invoice_fee'] = self.international_flight_invoice_fee
        if self.international_hotel_invoice_fee is not None:
            result['international_hotel_invoice_fee'] = self.international_hotel_invoice_fee
        if self.invoice_third_part_id is not None:
            result['invoice_third_part_id'] = self.invoice_third_part_id
        if self.invoice_title is not None:
            result['invoice_title'] = self.invoice_title
        if self.mail_address is not None:
            result['mail_address'] = self.mail_address
        if self.mail_city is not None:
            result['mail_city'] = self.mail_city
        if self.mail_full_address is not None:
            result['mail_full_address'] = self.mail_full_address
        if self.mail_province is not None:
            result['mail_province'] = self.mail_province
        if self.meal_normal_invoice_fee is not None:
            result['meal_normal_invoice_fee'] = self.meal_normal_invoice_fee
        if self.penalty_fee is not None:
            result['penalty_fee'] = self.penalty_fee
        if self.remark is not None:
            result['remark'] = self.remark
        if self.service_fee is not None:
            result['service_fee'] = self.service_fee
        if self.telephone is not None:
            result['telephone'] = self.telephone
        if self.train_acceleration_package_invoice_fee is not None:
            result['train_acceleration_package_invoice_fee'] = self.train_acceleration_package_invoice_fee
        if self.train_invoice_fee is not None:
            result['train_invoice_fee'] = self.train_invoice_fee
        if self.vas_mall_special_invoice_fee is not None:
            result['vas_mall_special_invoice_fee'] = self.vas_mall_special_invoice_fee
        if self.vehicle_invoice_fee is not None:
            result['vehicle_invoice_fee'] = self.vehicle_invoice_fee
        if self.vehicle_normal_invoice_fee is not None:
            result['vehicle_normal_invoice_fee'] = self.vehicle_normal_invoice_fee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('contact') is not None:
            self.contact = m.get('contact')
        if m.get('email') is not None:
            self.email = m.get('email')
        if m.get('flight_invoice_fee') is not None:
            self.flight_invoice_fee = m.get('flight_invoice_fee')
        if m.get('fu_point_invoice_fee') is not None:
            self.fu_point_invoice_fee = m.get('fu_point_invoice_fee')
        if m.get('hotel_normal_invoice_fee') is not None:
            self.hotel_normal_invoice_fee = m.get('hotel_normal_invoice_fee')
        if m.get('hotel_special_invoice_fee') is not None:
            self.hotel_special_invoice_fee = m.get('hotel_special_invoice_fee')
        if m.get('international_flight_invoice_fee') is not None:
            self.international_flight_invoice_fee = m.get('international_flight_invoice_fee')
        if m.get('international_hotel_invoice_fee') is not None:
            self.international_hotel_invoice_fee = m.get('international_hotel_invoice_fee')
        if m.get('invoice_third_part_id') is not None:
            self.invoice_third_part_id = m.get('invoice_third_part_id')
        if m.get('invoice_title') is not None:
            self.invoice_title = m.get('invoice_title')
        if m.get('mail_address') is not None:
            self.mail_address = m.get('mail_address')
        if m.get('mail_city') is not None:
            self.mail_city = m.get('mail_city')
        if m.get('mail_full_address') is not None:
            self.mail_full_address = m.get('mail_full_address')
        if m.get('mail_province') is not None:
            self.mail_province = m.get('mail_province')
        if m.get('meal_normal_invoice_fee') is not None:
            self.meal_normal_invoice_fee = m.get('meal_normal_invoice_fee')
        if m.get('penalty_fee') is not None:
            self.penalty_fee = m.get('penalty_fee')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('service_fee') is not None:
            self.service_fee = m.get('service_fee')
        if m.get('telephone') is not None:
            self.telephone = m.get('telephone')
        if m.get('train_acceleration_package_invoice_fee') is not None:
            self.train_acceleration_package_invoice_fee = m.get('train_acceleration_package_invoice_fee')
        if m.get('train_invoice_fee') is not None:
            self.train_invoice_fee = m.get('train_invoice_fee')
        if m.get('vas_mall_special_invoice_fee') is not None:
            self.vas_mall_special_invoice_fee = m.get('vas_mall_special_invoice_fee')
        if m.get('vehicle_invoice_fee') is not None:
            self.vehicle_invoice_fee = m.get('vehicle_invoice_fee')
        if m.get('vehicle_normal_invoice_fee') is not None:
            self.vehicle_normal_invoice_fee = m.get('vehicle_normal_invoice_fee')
        return self


class WaitApplyInvoiceTaskDetailQueryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        module: List[WaitApplyInvoiceTaskDetailQueryResponseBodyModule] = None,
        request_id: str = None,
        success: bool = None,
        trace_id: str = None,
    ):
        self.code = code
        self.message = message
        self.module = module
        # requestId
        self.request_id = request_id
        self.success = success
        # traceId
        self.trace_id = trace_id

    def validate(self):
        if self.module:
            for k in self.module:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        result['module'] = []
        if self.module is not None:
            for k in self.module:
                result['module'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.success is not None:
            result['success'] = self.success
        if self.trace_id is not None:
            result['traceId'] = self.trace_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('message') is not None:
            self.message = m.get('message')
        self.module = []
        if m.get('module') is not None:
            for k in m.get('module'):
                temp_model = WaitApplyInvoiceTaskDetailQueryResponseBodyModule()
                self.module.append(temp_model.from_map(k))
        if m.get('requestId') is not None:
            self.request_id = m.get('requestId')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('traceId') is not None:
            self.trace_id = m.get('traceId')
        return self


class WaitApplyInvoiceTaskDetailQueryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: WaitApplyInvoiceTaskDetailQueryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = WaitApplyInvoiceTaskDetailQueryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


