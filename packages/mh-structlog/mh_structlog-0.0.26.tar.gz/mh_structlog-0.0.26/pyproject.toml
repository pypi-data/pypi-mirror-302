[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "mh_structlog"
authors = [
    {name = "Mathieu Hinderyckx", email = "mathieu.hinderyckx@gmail.com"}
]
description = "Some Structlog configuration and wrappers to easily use structlog."
version = "0.0.26"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "structlog",
    "orjson",
]

[tool.ruff]
line-length = 120
extend-include = ["*.ipynb"]
indent-width = 4
preview = false
required-version = ">=0.4.5"
target-version = "py39"
unsafe-fixes = true

# Overwritten in CI/CD
output-format = "full"
fix = true

[tool.ruff.lint]
preview = false
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # flake8-annotations
    "ANN",
    # flake8-async
    "ASYNC",
    # flake8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-logging-format
    "G",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-slots
    "SLOT",
    # flake8-simplify
    "SIM",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # Refactor
    "R",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # Perflint
    "PERF",
    # refurb
    # "FURB",  # disabled as currently only in preview
    # Ruff-specific rules
    "RUF",
]

ignore = [
    "D100",
    "D104",
    "E501",
    "TRY003",
    "ANN001",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
preview = false
line-ending = "lf"
indent-style = "space"
quote-style = "preserve"
docstring-code-format = true
docstring-code-line-length = "dynamic"
exclude = ["*.pyi"]

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
avoid-escape = true

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true     # allows for gradual typing
suppress-none-returning = false

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.isort]
force-single-line = false
combine-as-imports = true
force-wrap-aliases = false
detect-same-package = true
split-on-trailing-comma = false
known-local-folder = ["src"]
lines-after-imports = 2
