"""A web3.py Contract class for the ICornSilo contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ABIFunction, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    combomethod_typed,
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from .ICornSiloTypes import (
    BridgeEnabledEvent,
    TokenBridgedEvent,
    TokenDepositedEvent,
    TokenWithdrawnEvent,
)

structs = {}


class ICornSiloAddApprovedTokenContractFunction(ContractFunction):
    """ContractFunction for the addApprovedToken method."""

    def __call__(self, token: str) -> ICornSiloAddApprovedTokenContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(token))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ICornSiloBridgeAllTokensContractFunction(ContractFunction):
    """ContractFunction for the bridgeAllTokens method."""

    def __call__(self, recipient: str, cost: int, maxGas: int, gasPriceBid: int, data: bytes) -> ICornSiloBridgeAllTokensContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(recipient),
            dataclass_to_tuple(cost),
            dataclass_to_tuple(maxGas),
            dataclass_to_tuple(gasPriceBid),
            dataclass_to_tuple(data),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ICornSiloBridgeTokenContractFunction(ContractFunction):
    """ContractFunction for the bridgeToken method."""

    def __call__(self, token: str, recipient: str, maxGas: int, gasPriceBid: int, data: bytes) -> ICornSiloBridgeTokenContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(token),
            dataclass_to_tuple(recipient),
            dataclass_to_tuple(maxGas),
            dataclass_to_tuple(gasPriceBid),
            dataclass_to_tuple(data),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ICornSiloDepositContractFunction(ContractFunction):
    """ContractFunction for the deposit method."""

    def __call__(self, token: str, assets: int) -> ICornSiloDepositContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(token), dataclass_to_tuple(assets)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloDepositForContractFunction(ContractFunction):
    """ContractFunction for the depositFor method."""

    def __call__(self, recipient: str, token: str, assets: int) -> ICornSiloDepositForContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(recipient),
            dataclass_to_tuple(token),
            dataclass_to_tuple(assets),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloEnableBridgeContractFunction(ContractFunction):
    """ContractFunction for the enableBridge method."""

    def __call__(self, gatewayRouter: str, erc20Inbox: str, swapFacilityVault: str) -> ICornSiloEnableBridgeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(gatewayRouter),
            dataclass_to_tuple(erc20Inbox),
            dataclass_to_tuple(swapFacilityVault),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ICornSiloFrom18DecimalsToAssetDecimalsContractFunction(ContractFunction):
    """ContractFunction for the from18DecimalsToAssetDecimals method."""

    def __call__(self, amountIn18Decimals: int) -> ICornSiloFrom18DecimalsToAssetDecimalsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(amountIn18Decimals))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloFromAssetDecimalsTo18DecimalsContractFunction(ContractFunction):
    """ContractFunction for the fromAssetDecimalsTo18Decimals method."""

    def __call__(self, amount: int) -> ICornSiloFromAssetDecimalsTo18DecimalsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloGetApprovedTokensContractFunction(ContractFunction):
    """ContractFunction for the getApprovedTokens method."""

    def __call__(self) -> ICornSiloGetApprovedTokensContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloGetGatewayRouterContractFunction(ContractFunction):
    """ContractFunction for the getGatewayRouter method."""

    def __call__(self) -> ICornSiloGetGatewayRouterContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloMintAndDepositBitcornContractFunction(ContractFunction):
    """ContractFunction for the mintAndDepositBitcorn method."""

    def __call__(self, assets: int) -> ICornSiloMintAndDepositBitcornContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(assets))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloMintAndDepositBitcornForContractFunction(ContractFunction):
    """ContractFunction for the mintAndDepositBitcornFor method."""

    def __call__(self, recipient: str, assets: int) -> ICornSiloMintAndDepositBitcornForContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(recipient), dataclass_to_tuple(assets)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloPauseContractFunction(ContractFunction):
    """ContractFunction for the pause method."""

    def __call__(self) -> ICornSiloPauseContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ICornSiloRedeemAllContractFunction(ContractFunction):
    """ContractFunction for the redeemAll method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for RedeemAll."""

        approvedTokens: list[str]
        depositedAssets: list[int]
        bitcornShares: int
        minterAssetReturned: int

    def __call__(self) -> ICornSiloRedeemAllContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [list[str], list[int], int, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloRedeemBitcornContractFunction(ContractFunction):
    """ContractFunction for the redeemBitcorn method."""

    def __call__(self, shares: int) -> ICornSiloRedeemBitcornContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(shares))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloRedeemTokenContractFunction(ContractFunction):
    """ContractFunction for the redeemToken method."""

    def __call__(self, token: str, shares: int) -> ICornSiloRedeemTokenContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(token), dataclass_to_tuple(shares)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloSharesOfContractFunction(ContractFunction):
    """ContractFunction for the sharesOf method."""

    def __call__(self, user: str, token: str) -> ICornSiloSharesOfContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(user), dataclass_to_tuple(token)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloTotalSharesContractFunction(ContractFunction):
    """ContractFunction for the totalShares method."""

    def __call__(self, token: str) -> ICornSiloTotalSharesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(token))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ICornSiloUnpauseContractFunction(ContractFunction):
    """ContractFunction for the unpause method."""

    def __call__(self) -> ICornSiloUnpauseContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ICornSiloContractFunctions(ContractFunctions):
    """ContractFunctions for the ICornSilo contract."""

    addApprovedToken: ICornSiloAddApprovedTokenContractFunction

    bridgeAllTokens: ICornSiloBridgeAllTokensContractFunction

    bridgeToken: ICornSiloBridgeTokenContractFunction

    deposit: ICornSiloDepositContractFunction

    depositFor: ICornSiloDepositForContractFunction

    enableBridge: ICornSiloEnableBridgeContractFunction

    from18DecimalsToAssetDecimals: (
        ICornSiloFrom18DecimalsToAssetDecimalsContractFunction
    )

    fromAssetDecimalsTo18Decimals: (
        ICornSiloFromAssetDecimalsTo18DecimalsContractFunction
    )

    getApprovedTokens: ICornSiloGetApprovedTokensContractFunction

    getGatewayRouter: ICornSiloGetGatewayRouterContractFunction

    mintAndDepositBitcorn: ICornSiloMintAndDepositBitcornContractFunction

    mintAndDepositBitcornFor: ICornSiloMintAndDepositBitcornForContractFunction

    pause: ICornSiloPauseContractFunction

    redeemAll: ICornSiloRedeemAllContractFunction

    redeemBitcorn: ICornSiloRedeemBitcornContractFunction

    redeemToken: ICornSiloRedeemTokenContractFunction

    sharesOf: ICornSiloSharesOfContractFunction

    totalShares: ICornSiloTotalSharesContractFunction

    unpause: ICornSiloUnpauseContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addApprovedToken = (
            ICornSiloAddApprovedTokenContractFunction.factory(
                "addApprovedToken",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="addApprovedToken",
            )
        )
        self.bridgeAllTokens = ICornSiloBridgeAllTokensContractFunction.factory(
            "bridgeAllTokens",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="bridgeAllTokens",
        )
        self.bridgeToken = ICornSiloBridgeTokenContractFunction.factory(
            "bridgeToken",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="bridgeToken",
        )
        self.deposit = ICornSiloDepositContractFunction.factory(
            "deposit",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deposit",
        )
        self.depositFor = ICornSiloDepositForContractFunction.factory(
            "depositFor",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="depositFor",
        )
        self.enableBridge = ICornSiloEnableBridgeContractFunction.factory(
            "enableBridge",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="enableBridge",
        )
        self.from18DecimalsToAssetDecimals = (
            ICornSiloFrom18DecimalsToAssetDecimalsContractFunction.factory(
                "from18DecimalsToAssetDecimals",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="from18DecimalsToAssetDecimals",
            )
        )
        self.fromAssetDecimalsTo18Decimals = (
            ICornSiloFromAssetDecimalsTo18DecimalsContractFunction.factory(
                "fromAssetDecimalsTo18Decimals",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="fromAssetDecimalsTo18Decimals",
            )
        )
        self.getApprovedTokens = (
            ICornSiloGetApprovedTokensContractFunction.factory(
                "getApprovedTokens",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getApprovedTokens",
            )
        )
        self.getGatewayRouter = (
            ICornSiloGetGatewayRouterContractFunction.factory(
                "getGatewayRouter",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getGatewayRouter",
            )
        )
        self.mintAndDepositBitcorn = (
            ICornSiloMintAndDepositBitcornContractFunction.factory(
                "mintAndDepositBitcorn",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="mintAndDepositBitcorn",
            )
        )
        self.mintAndDepositBitcornFor = (
            ICornSiloMintAndDepositBitcornForContractFunction.factory(
                "mintAndDepositBitcornFor",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="mintAndDepositBitcornFor",
            )
        )
        self.pause = ICornSiloPauseContractFunction.factory(
            "pause",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="pause",
        )
        self.redeemAll = ICornSiloRedeemAllContractFunction.factory(
            "redeemAll",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="redeemAll",
        )
        self.redeemBitcorn = ICornSiloRedeemBitcornContractFunction.factory(
            "redeemBitcorn",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="redeemBitcorn",
        )
        self.redeemToken = ICornSiloRedeemTokenContractFunction.factory(
            "redeemToken",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="redeemToken",
        )
        self.sharesOf = ICornSiloSharesOfContractFunction.factory(
            "sharesOf",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="sharesOf",
        )
        self.totalShares = ICornSiloTotalSharesContractFunction.factory(
            "totalShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="totalShares",
        )
        self.unpause = ICornSiloUnpauseContractFunction.factory(
            "unpause",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="unpause",
        )


class ICornSiloBridgeEnabledContractEvent(ContractEvent):
    """ContractEvent for BridgeEnabled."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[BridgeEnabledEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            BridgeEnabledEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=BridgeEnabledEvent.BridgeEnabledEventArgs(
                    gatewayRouter=abi_event.args["gatewayRouter"],
                    swapFacilityVault=abi_event.args["swapFacilityVault"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[BridgeEnabledEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            BridgeEnabledEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=BridgeEnabledEvent.BridgeEnabledEventArgs(
                    gatewayRouter=abi_event.args["gatewayRouter"],
                    swapFacilityVault=abi_event.args["swapFacilityVault"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ICornSiloTokenBridgedContractEvent(ContractEvent):
    """ContractEvent for TokenBridged."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TokenBridgedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TokenBridgedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TokenBridgedEvent.TokenBridgedEventArgs(
                    token=abi_event.args["token"],
                    user=abi_event.args["user"],
                    recipient=abi_event.args["recipient"],
                    amount=abi_event.args["amount"],
                    maxGas=abi_event.args["maxGas"],
                    gasPriceBid=abi_event.args["gasPriceBid"],
                    data=abi_event.args["data"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TokenBridgedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TokenBridgedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TokenBridgedEvent.TokenBridgedEventArgs(
                    token=abi_event.args["token"],
                    user=abi_event.args["user"],
                    recipient=abi_event.args["recipient"],
                    amount=abi_event.args["amount"],
                    maxGas=abi_event.args["maxGas"],
                    gasPriceBid=abi_event.args["gasPriceBid"],
                    data=abi_event.args["data"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ICornSiloTokenDepositedContractEvent(ContractEvent):
    """ContractEvent for TokenDeposited."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TokenDepositedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TokenDepositedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TokenDepositedEvent.TokenDepositedEventArgs(
                    user=abi_event.args["user"],
                    token=abi_event.args["token"],
                    assets=abi_event.args["assets"],
                    shares=abi_event.args["shares"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TokenDepositedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TokenDepositedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TokenDepositedEvent.TokenDepositedEventArgs(
                    user=abi_event.args["user"],
                    token=abi_event.args["token"],
                    assets=abi_event.args["assets"],
                    shares=abi_event.args["shares"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ICornSiloTokenWithdrawnContractEvent(ContractEvent):
    """ContractEvent for TokenWithdrawn."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TokenWithdrawnEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TokenWithdrawnEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TokenWithdrawnEvent.TokenWithdrawnEventArgs(
                    user=abi_event.args["user"],
                    token=abi_event.args["token"],
                    assets=abi_event.args["assets"],
                    shares=abi_event.args["shares"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TokenWithdrawnEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TokenWithdrawnEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TokenWithdrawnEvent.TokenWithdrawnEventArgs(
                    user=abi_event.args["user"],
                    token=abi_event.args["token"],
                    assets=abi_event.args["assets"],
                    shares=abi_event.args["shares"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ICornSiloContractEvents(ContractEvents):
    """ContractEvents for the ICornSilo contract."""

    BridgeEnabled: Type[ICornSiloBridgeEnabledContractEvent]

    TokenBridged: Type[ICornSiloTokenBridgedContractEvent]

    TokenDeposited: Type[ICornSiloTokenDepositedContractEvent]

    TokenWithdrawn: Type[ICornSiloTokenWithdrawnContractEvent]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.BridgeEnabled = cast(
            Type[ICornSiloBridgeEnabledContractEvent],
            ICornSiloBridgeEnabledContractEvent.factory(
                "BridgeEnabled",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="BridgeEnabled",
            ),
        )
        self.TokenBridged = cast(
            Type[ICornSiloTokenBridgedContractEvent],
            ICornSiloTokenBridgedContractEvent.factory(
                "TokenBridged",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TokenBridged",
            ),
        )
        self.TokenDeposited = cast(
            Type[ICornSiloTokenDepositedContractEvent],
            ICornSiloTokenDepositedContractEvent.factory(
                "TokenDeposited",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TokenDeposited",
            ),
        )
        self.TokenWithdrawn = cast(
            Type[ICornSiloTokenWithdrawnContractEvent],
            ICornSiloTokenWithdrawnContractEvent.factory(
                "TokenWithdrawn",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TokenWithdrawn",
            ),
        )


class ICornSiloBelowOneSatoshiOfSharesContractError:
    """ContractError for BelowOneSatoshiOfShares."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloBelowOneSatoshiOfSharesContractError",
    ) -> None:
        self.selector = "0x802bcd9a"
        self.signature = "BelowOneSatoshiOfShares(uint256,uint256)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "BelowOneSatoshiOfShares"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloBitcornMinterAssetMustNotBeApprovedTokenContractError:
    """ContractError for BitcornMinterAssetMustNotBeApprovedToken."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloBitcornMinterAssetMustNotBeApprovedTokenContractError",
    ) -> None:
        self.selector = "0x273a0966"
        self.signature = "BitcornMinterAssetMustNotBeApprovedToken(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name")
                == "BitcornMinterAssetMustNotBeApprovedToken"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloBitcornMustNotBeApprovedTokenContractError:
    """ContractError for BitcornMustNotBeApprovedToken."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloBitcornMustNotBeApprovedTokenContractError",
    ) -> None:
        self.selector = "0x88570826"
        self.signature = "BitcornMustNotBeApprovedToken(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "BitcornMustNotBeApprovedToken"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloBridgeIsEnabledContractError:
    """ContractError for BridgeIsEnabled."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloBridgeIsEnabledContractError",
    ) -> None:
        self.selector = "0x78a04450"
        self.signature = "BridgeIsEnabled()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "BridgeIsEnabled"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloBridgeIsNotSetContractError:
    """ContractError for BridgeIsNotSet."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloBridgeIsNotSetContractError",
    ) -> None:
        self.selector = "0xfb28a663"
        self.signature = "BridgeIsNotSet()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "BridgeIsNotSet"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloBridgeNotEnabledContractError:
    """ContractError for BridgeNotEnabled."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloBridgeNotEnabledContractError",
    ) -> None:
        self.selector = "0x2a2faa72"
        self.signature = "BridgeNotEnabled()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "BridgeNotEnabled"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloInsufficientBitcornSharesToBridgeContractError:
    """ContractError for InsufficientBitcornSharesToBridge."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloInsufficientBitcornSharesToBridgeContractError",
    ) -> None:
        self.selector = "0xba5b1c72"
        self.signature = "InsufficientBitcornSharesToBridge(uint256,uint256)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "InsufficientBitcornSharesToBridge"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloInsufficientSharesContractError:
    """ContractError for InsufficientShares."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloInsufficientSharesContractError",
    ) -> None:
        self.selector = "0x68b65f11"
        self.signature = "InsufficientShares(address,uint256,uint256)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "InsufficientShares"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloSharesNotMultipleOfOneSatoshiContractError:
    """ContractError for SharesNotMultipleOfOneSatoshi."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloSharesNotMultipleOfOneSatoshiContractError",
    ) -> None:
        self.selector = "0x120604e4"
        self.signature = "SharesNotMultipleOfOneSatoshi(uint256,uint256)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "SharesNotMultipleOfOneSatoshi"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloTokenAlreadyApprovedContractError:
    """ContractError for TokenAlreadyApproved."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloTokenAlreadyApprovedContractError",
    ) -> None:
        self.selector = "0x76642047"
        self.signature = "TokenAlreadyApproved(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "TokenAlreadyApproved"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloTokenNotApprovedContractError:
    """ContractError for TokenNotApproved."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloTokenNotApprovedContractError",
    ) -> None:
        self.selector = "0x87921f5a"
        self.signature = "TokenNotApproved(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "TokenNotApproved"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloWithdrawalFeeAboveMaxContractError:
    """ContractError for WithdrawalFeeAboveMax."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloWithdrawalFeeAboveMaxContractError",
    ) -> None:
        self.selector = "0x18d1595e"
        self.signature = "WithdrawalFeeAboveMax(uint256)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "WithdrawalFeeAboveMax"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloZeroDepositContractError:
    """ContractError for ZeroDeposit."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloZeroDepositContractError",
    ) -> None:
        self.selector = "0xd47ecbef"
        self.signature = "ZeroDeposit(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "ZeroDeposit"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloZeroSharesContractError:
    """ContractError for ZeroShares."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloZeroSharesContractError",
    ) -> None:
        self.selector = "0xe1fee185"
        self.signature = "ZeroShares(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "ZeroShares"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloZeroSharesForAnyTokenContractError:
    """ContractError for ZeroSharesForAnyToken."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloZeroSharesForAnyTokenContractError",
    ) -> None:
        self.selector = "0x45937bd3"
        self.signature = "ZeroSharesForAnyToken(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "ZeroSharesForAnyToken"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloZeroWithdrawContractError:
    """ContractError for ZeroWithdraw."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ICornSiloZeroWithdrawContractError",
    ) -> None:
        self.selector = "0x9eea3859"
        self.signature = "ZeroWithdraw(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in icornsilo_abi
                if item.get("name") == "ZeroWithdraw"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ICornSiloContractErrors:
    """ContractErrors for the ICornSilo contract."""

    BelowOneSatoshiOfShares: ICornSiloBelowOneSatoshiOfSharesContractError

    BitcornMinterAssetMustNotBeApprovedToken: (
        ICornSiloBitcornMinterAssetMustNotBeApprovedTokenContractError
    )

    BitcornMustNotBeApprovedToken: (
        ICornSiloBitcornMustNotBeApprovedTokenContractError
    )

    BridgeIsEnabled: ICornSiloBridgeIsEnabledContractError

    BridgeIsNotSet: ICornSiloBridgeIsNotSetContractError

    BridgeNotEnabled: ICornSiloBridgeNotEnabledContractError

    InsufficientBitcornSharesToBridge: (
        ICornSiloInsufficientBitcornSharesToBridgeContractError
    )

    InsufficientShares: ICornSiloInsufficientSharesContractError

    SharesNotMultipleOfOneSatoshi: (
        ICornSiloSharesNotMultipleOfOneSatoshiContractError
    )

    TokenAlreadyApproved: ICornSiloTokenAlreadyApprovedContractError

    TokenNotApproved: ICornSiloTokenNotApprovedContractError

    WithdrawalFeeAboveMax: ICornSiloWithdrawalFeeAboveMaxContractError

    ZeroDeposit: ICornSiloZeroDepositContractError

    ZeroShares: ICornSiloZeroSharesContractError

    ZeroSharesForAnyToken: ICornSiloZeroSharesForAnyTokenContractError

    ZeroWithdraw: ICornSiloZeroWithdrawContractError

    def __init__(
        self,
    ) -> None:
        self.BelowOneSatoshiOfShares = (
            ICornSiloBelowOneSatoshiOfSharesContractError()
        )
        self.BitcornMinterAssetMustNotBeApprovedToken = (
            ICornSiloBitcornMinterAssetMustNotBeApprovedTokenContractError()
        )
        self.BitcornMustNotBeApprovedToken = (
            ICornSiloBitcornMustNotBeApprovedTokenContractError()
        )
        self.BridgeIsEnabled = ICornSiloBridgeIsEnabledContractError()
        self.BridgeIsNotSet = ICornSiloBridgeIsNotSetContractError()
        self.BridgeNotEnabled = ICornSiloBridgeNotEnabledContractError()
        self.InsufficientBitcornSharesToBridge = (
            ICornSiloInsufficientBitcornSharesToBridgeContractError()
        )
        self.InsufficientShares = ICornSiloInsufficientSharesContractError()
        self.SharesNotMultipleOfOneSatoshi = (
            ICornSiloSharesNotMultipleOfOneSatoshiContractError()
        )
        self.TokenAlreadyApproved = ICornSiloTokenAlreadyApprovedContractError()
        self.TokenNotApproved = ICornSiloTokenNotApprovedContractError()
        self.WithdrawalFeeAboveMax = (
            ICornSiloWithdrawalFeeAboveMaxContractError()
        )
        self.ZeroDeposit = ICornSiloZeroDepositContractError()
        self.ZeroShares = ICornSiloZeroSharesContractError()
        self.ZeroSharesForAnyToken = (
            ICornSiloZeroSharesForAnyTokenContractError()
        )
        self.ZeroWithdraw = ICornSiloZeroWithdrawContractError()

        self._all = [
            self.BelowOneSatoshiOfShares,
            self.BitcornMinterAssetMustNotBeApprovedToken,
            self.BitcornMustNotBeApprovedToken,
            self.BridgeIsEnabled,
            self.BridgeIsNotSet,
            self.BridgeNotEnabled,
            self.InsufficientBitcornSharesToBridge,
            self.InsufficientShares,
            self.SharesNotMultipleOfOneSatoshi,
            self.TokenAlreadyApproved,
            self.TokenNotApproved,
            self.WithdrawalFeeAboveMax,
            self.ZeroDeposit,
            self.ZeroShares,
            self.ZeroSharesForAnyToken,
            self.ZeroWithdraw,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"ICornSilo does not have a selector matching {selector}"
        )


icornsilo_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "addApprovedToken",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "bridgeAllTokens",
            "inputs": [
                {
                    "name": "recipient",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "cost", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "maxGas",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "gasPriceBid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "bridgeToken",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"},
                {
                    "name": "recipient",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "maxGas",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "gasPriceBid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deposit",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"},
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "shares", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "depositFor",
            "inputs": [
                {
                    "name": "recipient",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "token", "type": "address", "internalType": "address"},
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "shares", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "enableBridge",
            "inputs": [
                {
                    "name": "gatewayRouter",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "erc20Inbox",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "swapFacilityVault",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "from18DecimalsToAssetDecimals",
            "inputs": [
                {
                    "name": "amountIn18Decimals",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "fromAssetDecimalsTo18Decimals",
            "inputs": [
                {"name": "amount", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getApprovedTokens",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address[]", "internalType": "address[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getGatewayRouter",
            "inputs": [],
            "outputs": [
                {
                    "name": "gatewayRouter",
                    "type": "address",
                    "internalType": "contract IGatewayRouter",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "mintAndDepositBitcorn",
            "inputs": [
                {"name": "assets", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "shares", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "mintAndDepositBitcornFor",
            "inputs": [
                {
                    "name": "recipient",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "shares", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "pause",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "redeemAll",
            "inputs": [],
            "outputs": [
                {
                    "name": "approvedTokens",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {
                    "name": "depositedAssets",
                    "type": "uint256[]",
                    "internalType": "uint256[]",
                },
                {
                    "name": "bitcornShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "minterAssetReturned",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "redeemBitcorn",
            "inputs": [
                {"name": "shares", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "assets", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "redeemToken",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"},
                {
                    "name": "shares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "assets", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "sharesOf",
            "inputs": [
                {"name": "user", "type": "address", "internalType": "address"},
                {"name": "token", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "totalShares",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "unpause",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "BridgeEnabled",
            "inputs": [
                {
                    "name": "gatewayRouter",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "swapFacilityVault",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TokenBridged",
            "inputs": [
                {
                    "name": "token",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "user",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "recipient",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maxGas",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "gasPriceBid",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "data",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TokenDeposited",
            "inputs": [
                {
                    "name": "user",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "token",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assets",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "shares",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TokenWithdrawn",
            "inputs": [
                {
                    "name": "user",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "token",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assets",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "shares",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "error",
            "name": "BelowOneSatoshiOfShares",
            "inputs": [
                {
                    "name": "shares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "oneSatoshiOfBitcornShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
        },
        {
            "type": "error",
            "name": "BitcornMinterAssetMustNotBeApprovedToken",
            "inputs": [
                {
                    "name": "bitcornMinterAsset",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {
            "type": "error",
            "name": "BitcornMustNotBeApprovedToken",
            "inputs": [
                {
                    "name": "bitcorn",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {"type": "error", "name": "BridgeIsEnabled", "inputs": []},
        {"type": "error", "name": "BridgeIsNotSet", "inputs": []},
        {"type": "error", "name": "BridgeNotEnabled", "inputs": []},
        {
            "type": "error",
            "name": "InsufficientBitcornSharesToBridge",
            "inputs": [
                {
                    "name": "cachedShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "requiredShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
        },
        {
            "type": "error",
            "name": "InsufficientShares",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"},
                {
                    "name": "cachedShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "shares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
        },
        {
            "type": "error",
            "name": "SharesNotMultipleOfOneSatoshi",
            "inputs": [
                {
                    "name": "bitcornShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "oneSatoshiOfBitcornShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
        },
        {
            "type": "error",
            "name": "TokenAlreadyApproved",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "TokenNotApproved",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "WithdrawalFeeAboveMax",
            "inputs": [
                {"name": "fee", "type": "uint256", "internalType": "uint256"}
            ],
        },
        {
            "type": "error",
            "name": "ZeroDeposit",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "ZeroShares",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "ZeroSharesForAnyToken",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {
            "type": "error",
            "name": "ZeroWithdraw",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
    ],
)


class ICornSiloContract(Contract):
    """A web3.py Contract class for the ICornSilo contract."""

    abi: ABI = icornsilo_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = ICornSiloContractFunctions(icornsilo_abi, self.w3, address)  # type: ignore
        self.events = ICornSiloContractEvents(icornsilo_abi, self.w3, address)  # type: ignore
        self.errors = ICornSiloContractErrors()

    events: ICornSiloContractEvents

    errors: ICornSiloContractErrors = ICornSiloContractErrors()

    functions: ICornSiloContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ICornSiloContractFunctions(icornsilo_abi, w3, None)
        contract.errors = ICornSiloContractErrors()

        return contract
