"""A web3.py Contract class for the stdError contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}


class stdErrorArithmeticErrorContractFunction(ContractFunction):
    """ContractFunction for the arithmeticError method."""

    def __call__(self) -> stdErrorArithmeticErrorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class stdErrorAssertionErrorContractFunction(ContractFunction):
    """ContractFunction for the assertionError method."""

    def __call__(self) -> stdErrorAssertionErrorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class stdErrorDivisionErrorContractFunction(ContractFunction):
    """ContractFunction for the divisionError method."""

    def __call__(self) -> stdErrorDivisionErrorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class stdErrorEncodeStorageErrorContractFunction(ContractFunction):
    """ContractFunction for the encodeStorageError method."""

    def __call__(self) -> stdErrorEncodeStorageErrorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class stdErrorEnumConversionErrorContractFunction(ContractFunction):
    """ContractFunction for the enumConversionError method."""

    def __call__(self) -> stdErrorEnumConversionErrorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class stdErrorIndexOOBErrorContractFunction(ContractFunction):
    """ContractFunction for the indexOOBError method."""

    def __call__(self) -> stdErrorIndexOOBErrorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class stdErrorMemOverflowErrorContractFunction(ContractFunction):
    """ContractFunction for the memOverflowError method."""

    def __call__(self) -> stdErrorMemOverflowErrorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class stdErrorPopErrorContractFunction(ContractFunction):
    """ContractFunction for the popError method."""

    def __call__(self) -> stdErrorPopErrorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class stdErrorZeroVarErrorContractFunction(ContractFunction):
    """ContractFunction for the zeroVarError method."""

    def __call__(self) -> stdErrorZeroVarErrorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class stdErrorContractFunctions(ContractFunctions):
    """ContractFunctions for the stdError contract."""

    arithmeticError: stdErrorArithmeticErrorContractFunction

    assertionError: stdErrorAssertionErrorContractFunction

    divisionError: stdErrorDivisionErrorContractFunction

    encodeStorageError: stdErrorEncodeStorageErrorContractFunction

    enumConversionError: stdErrorEnumConversionErrorContractFunction

    indexOOBError: stdErrorIndexOOBErrorContractFunction

    memOverflowError: stdErrorMemOverflowErrorContractFunction

    popError: stdErrorPopErrorContractFunction

    zeroVarError: stdErrorZeroVarErrorContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.arithmeticError = stdErrorArithmeticErrorContractFunction.factory(
            "arithmeticError",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="arithmeticError",
        )
        self.assertionError = stdErrorAssertionErrorContractFunction.factory(
            "assertionError",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assertionError",
        )
        self.divisionError = stdErrorDivisionErrorContractFunction.factory(
            "divisionError",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="divisionError",
        )
        self.encodeStorageError = (
            stdErrorEncodeStorageErrorContractFunction.factory(
                "encodeStorageError",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="encodeStorageError",
            )
        )
        self.enumConversionError = (
            stdErrorEnumConversionErrorContractFunction.factory(
                "enumConversionError",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="enumConversionError",
            )
        )
        self.indexOOBError = stdErrorIndexOOBErrorContractFunction.factory(
            "indexOOBError",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="indexOOBError",
        )
        self.memOverflowError = (
            stdErrorMemOverflowErrorContractFunction.factory(
                "memOverflowError",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="memOverflowError",
            )
        )
        self.popError = stdErrorPopErrorContractFunction.factory(
            "popError",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="popError",
        )
        self.zeroVarError = stdErrorZeroVarErrorContractFunction.factory(
            "zeroVarError",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="zeroVarError",
        )


stderror_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "arithmeticError",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "assertionError",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "divisionError",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "encodeStorageError",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "enumConversionError",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "indexOOBError",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "memOverflowError",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "popError",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "zeroVarError",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes", "internalType": "bytes"}],
            "stateMutability": "view",
        },
    ],
)


class stdErrorContract(Contract):
    """A web3.py Contract class for the stdError contract."""

    abi: ABI = stderror_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x61025061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c8063986c5f6811610070578063986c5f68146100d8578063b22dc54d146100e0578063b67689da146100e8578063d160e4de146100f0578063fa784a44146100f857600080fd5b806305ee8612146100a257806310332977146100c05780631de45560146100c85780638995290f146100d0575b600080fd5b6100aa610100565b6040516100b791906101cb565b60405180910390f35b6100aa61013b565b6100aa61014d565b6100aa61015f565b6100aa610171565b6100aa610183565b6100aa610195565b6100aa6101a7565b6100aa6101b9565b604051603260248201526044015b60408051601f198184030181529190526020810180516001600160e01b0316634e487b7160e01b17905281565b6040516001602482015260440161010e565b6040516021602482015260440161010e565b6040516011602482015260440161010e565b6040516041602482015260440161010e565b6040516031602482015260440161010e565b6040516051602482015260440161010e565b6040516022602482015260440161010e565b6040516012602482015260440161010e565b60006020808352835180602085015260005b818110156101f9578581018301518582016040015282016101dd565b506000604082860101526040601f19601f830116850101925050509291505056fea26469706673582212202ddf3327fc7d44fd28d6095465643636bd4815fc75c1b813e5541e76ac7c3eef64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = stdErrorContractFunctions(stderror_abi, self.w3, address)  # type: ignore

    functions: stdErrorContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = stdErrorContractFunctions(stderror_abi, w3, None)

        return contract
