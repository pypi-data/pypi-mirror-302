# Form implementation generated from reading ui file 'main_wdgt.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from mnemosyne.libmnemosyne.gui_translator import _
from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWdgt(object):
    def setupUi(self, MainWdgt):
        MainWdgt.setObjectName("MainWdgt")
        MainWdgt.resize(315, 494)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWdgt.sizePolicy().hasHeightForWidth())
        MainWdgt.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons:mnemosyne.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWdgt.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(parent=MainWdgt)
        self.centralwidget.setObjectName("centralwidget")
        MainWdgt.setCentralWidget(self.centralwidget)
        self.menu_bar = QtWidgets.QMenuBar(parent=MainWdgt)
        self.menu_bar.setGeometry(QtCore.QRect(0, 0, 315, 18))
        self.menu_bar.setObjectName("menu_bar")
        self.menu_Settings = QtWidgets.QMenu(parent=self.menu_bar)
        self.menu_Settings.setObjectName("menu_Settings")
        self.menu_Help = QtWidgets.QMenu(parent=self.menu_bar)
        self.menu_Help.setObjectName("menu_Help")
        self.menu_File = QtWidgets.QMenu(parent=self.menu_bar)
        self.menu_File.setObjectName("menu_File")
        self.menu_Cards = QtWidgets.QMenu(parent=self.menu_bar)
        self.menu_Cards.setObjectName("menu_Cards")
        self.menu_Study = QtWidgets.QMenu(parent=self.menu_bar)
        self.menu_Study.setObjectName("menu_Study")
        MainWdgt.setMenuBar(self.menu_bar)
        self.status_bar = QtWidgets.QStatusBar(parent=MainWdgt)
        self.status_bar.setObjectName("status_bar")
        MainWdgt.setStatusBar(self.status_bar)
        self.tool_bar = QtWidgets.QToolBar(parent=MainWdgt)
        self.tool_bar.setMovable(False)
        self.tool_bar.setIconSize(QtCore.QSize(22, 22))
        self.tool_bar.setFloatable(False)
        self.tool_bar.setObjectName("tool_bar")
        MainWdgt.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.tool_bar)
        self.actionActivateCards = QtGui.QAction(parent=MainWdgt)
        self.actionActivateCards.setObjectName("actionActivateCards")
        self.actionAddCards = QtGui.QAction(parent=MainWdgt)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons:add.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionAddCards.setIcon(icon1)
        self.actionAddCards.setObjectName("actionAddCards")
        self.actionConfigure = QtGui.QAction(parent=MainWdgt)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons:configure.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionConfigure.setIcon(icon2)
        self.actionConfigure.setObjectName("actionConfigure")
        self.actionDeleteCurrentCard = QtGui.QAction(parent=MainWdgt)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons:delete.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionDeleteCurrentCard.setIcon(icon3)
        self.actionDeleteCurrentCard.setObjectName("actionDeleteCurrentCard")
        self.actionEditCurrentCard = QtGui.QAction(parent=MainWdgt)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("icons:edit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionEditCurrentCard.setIcon(icon4)
        self.actionEditCurrentCard.setObjectName("actionEditCurrentCard")
        self.actionResetCurrentCard = QtGui.QAction(parent=MainWdgt)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.actionResetCurrentCard.setFont(font)
        self.actionResetCurrentCard.setObjectName("actionResetCurrentCard")
        self.actionBrowseCards = QtGui.QAction(parent=MainWdgt)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("icons:cards.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionBrowseCards.setIcon(icon5)
        self.actionBrowseCards.setObjectName("actionBrowseCards")
        self.actionExport = QtGui.QAction(parent=MainWdgt)
        self.actionExport.setObjectName("actionExport")
        self.actionFileExit = QtGui.QAction(parent=MainWdgt)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("icons:exit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionFileExit.setIcon(icon6)
        self.actionFileExit.setObjectName("actionFileExit")
        self.actionFileNew = QtGui.QAction(parent=MainWdgt)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("icons:filenew.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionFileNew.setIcon(icon7)
        self.actionFileNew.setObjectName("actionFileNew")
        self.actionFileOpen = QtGui.QAction(parent=MainWdgt)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("icons:fileopen.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionFileOpen.setIcon(icon8)
        self.actionFileOpen.setObjectName("actionFileOpen")
        self.actionFileSave = QtGui.QAction(parent=MainWdgt)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("icons:filesave.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionFileSave.setIcon(icon9)
        self.actionFileSave.setObjectName("actionFileSave")
        self.actionFileSaveAs = QtGui.QAction(parent=MainWdgt)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("icons:filesaveas.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionFileSaveAs.setIcon(icon10)
        self.actionFileSaveAs.setObjectName("actionFileSaveAs")
        self.actionAbout = QtGui.QAction(parent=MainWdgt)
        self.actionAbout.setObjectName("actionAbout")
        self.actionImport = QtGui.QAction(parent=MainWdgt)
        self.actionImport.setObjectName("actionImport")
        self.actionGettingStarted = QtGui.QAction(parent=MainWdgt)
        self.actionGettingStarted.setObjectName("actionGettingStarted")
        self.actionShowStatistics = QtGui.QAction(parent=MainWdgt)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("icons:statistics.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionShowStatistics.setIcon(icon11)
        self.actionShowStatistics.setObjectName("actionShowStatistics")
        self.actionTip = QtGui.QAction(parent=MainWdgt)
        self.actionTip.setObjectName("actionTip")
        self.actionManagePlugins = QtGui.QAction(parent=MainWdgt)
        self.actionManagePlugins.setObjectName("actionManagePlugins")
        self.actionManageTypes = QtGui.QAction(parent=MainWdgt)
        self.actionManageTypes.setObjectName("actionManageTypes")
        self.actionSync = QtGui.QAction(parent=MainWdgt)
        self.actionSync.setObjectName("actionSync")
        self.actionCompact = QtGui.QAction(parent=MainWdgt)
        self.actionCompact.setObjectName("actionCompact")
        self.actionFindDuplicates = QtGui.QAction(parent=MainWdgt)
        self.actionFindDuplicates.setObjectName("actionFindDuplicates")
        self.actionStudyDefault = QtGui.QAction(parent=MainWdgt)
        self.actionStudyDefault.setCheckable(True)
        self.actionStudyDefault.setChecked(True)
        self.actionStudyDefault.setObjectName("actionStudyDefault")
        self.actionStudyNew = QtGui.QAction(parent=MainWdgt)
        self.actionStudyNew.setCheckable(True)
        self.actionStudyNew.setObjectName("actionStudyNew")
        self.actionCramAll = QtGui.QAction(parent=MainWdgt)
        self.actionCramAll.setCheckable(True)
        self.actionCramAll.setObjectName("actionCramAll")
        self.menu_Settings.addAction(self.actionConfigure)
        self.menu_Settings.addAction(self.actionManagePlugins)
        self.menu_Help.addAction(self.actionGettingStarted)
        self.menu_Help.addAction(self.actionTip)
        self.menu_Help.addSeparator()
        self.menu_Help.addAction(self.actionAbout)
        self.menu_File.addAction(self.actionFileNew)
        self.menu_File.addAction(self.actionFileOpen)
        self.menu_File.addAction(self.actionFileSave)
        self.menu_File.addAction(self.actionFileSaveAs)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.actionImport)
        self.menu_File.addAction(self.actionExport)
        self.menu_File.addAction(self.actionSync)
        self.menu_File.addAction(self.actionCompact)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.actionFileExit)
        self.menu_Cards.addAction(self.actionAddCards)
        self.menu_Cards.addAction(self.actionEditCurrentCard)
        self.menu_Cards.addAction(self.actionDeleteCurrentCard)
        self.menu_Cards.addAction(self.actionResetCurrentCard)
        self.menu_Cards.addSeparator()
        self.menu_Cards.addAction(self.actionBrowseCards)
        self.menu_Cards.addAction(self.actionFindDuplicates)
        self.menu_Cards.addAction(self.actionManageTypes)
        self.menu_Cards.addSeparator()
        self.menu_Cards.addAction(self.actionShowStatistics)
        self.menu_Study.addAction(self.actionActivateCards)
        self.menu_Study.addSeparator()
        self.menu_bar.addAction(self.menu_File.menuAction())
        self.menu_bar.addAction(self.menu_Cards.menuAction())
        self.menu_bar.addAction(self.menu_Study.menuAction())
        self.menu_bar.addAction(self.menu_Settings.menuAction())
        self.menu_bar.addAction(self.menu_Help.menuAction())
        self.tool_bar.addAction(self.actionAddCards)
        self.tool_bar.addAction(self.actionEditCurrentCard)
        self.tool_bar.addAction(self.actionDeleteCurrentCard)
        self.tool_bar.addAction(self.actionBrowseCards)
        self.tool_bar.addAction(self.actionShowStatistics)

        self.retranslateUi(MainWdgt)
        self.actionAddCards.triggered.connect(MainWdgt.add_cards) # type: ignore
        self.actionFileNew.triggered.connect(MainWdgt.file_new) # type: ignore
        self.actionFileOpen.triggered.connect(MainWdgt.file_open) # type: ignore
        self.actionFileSave.triggered.connect(MainWdgt.file_save) # type: ignore
        self.actionFileSaveAs.triggered.connect(MainWdgt.file_save_as) # type: ignore
        self.actionFileExit.triggered.connect(MainWdgt.close) # type: ignore
        self.actionEditCurrentCard.triggered.connect(MainWdgt.edit_current_card) # type: ignore
        self.actionDeleteCurrentCard.triggered.connect(MainWdgt.delete_current_card) # type: ignore
        self.actionResetCurrentCard.triggered.connect(MainWdgt.reset_current_card) # type: ignore
        self.actionManagePlugins.triggered.connect(MainWdgt.manage_plugins) # type: ignore
        self.actionManageTypes.triggered.connect(MainWdgt.manage_card_types) # type: ignore
        self.actionShowStatistics.triggered.connect(MainWdgt.show_statistics) # type: ignore
        self.actionImport.triggered.connect(MainWdgt.import_file) # type: ignore
        self.actionExport.triggered.connect(MainWdgt.export_file) # type: ignore
        self.actionConfigure.triggered.connect(MainWdgt.configure) # type: ignore
        self.actionActivateCards.triggered.connect(MainWdgt.activate_cards) # type: ignore
        self.actionSync.triggered.connect(MainWdgt.sync) # type: ignore
        self.actionBrowseCards.triggered.connect(MainWdgt.browse_cards) # type: ignore
        self.actionTip.triggered.connect(MainWdgt.show_tip) # type: ignore
        self.actionGettingStarted.triggered.connect(MainWdgt.show_getting_started) # type: ignore
        self.actionAbout.triggered.connect(MainWdgt.show_about) # type: ignore
        self.actionCompact.triggered.connect(MainWdgt.compact_database) # type: ignore
        self.actionFindDuplicates.triggered.connect(MainWdgt.find_duplicates) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWdgt)

    def retranslateUi(self, MainWdgt):
        _translate = QtCore.QCoreApplication.translate
        self.menu_Settings.setTitle(_('&Settings'))
        self.menu_Help.setTitle(_('&Help'))
        self.menu_File.setTitle(_('&File'))
        self.menu_Cards.setTitle(_('&Cards'))
        self.menu_Study.setTitle(_('S&tudy'))
        self.tool_bar.setWindowTitle(_('toolBar'))
        self.actionActivateCards.setText(_('(De)a&ctivate cards...'))
        self.actionActivateCards.setShortcut(_('Ctrl+D'))
        self.actionAddCards.setText(_('&Add cards...'))
        self.actionAddCards.setShortcut(_('Ctrl+A'))
        self.actionConfigure.setText(_('&Configure Mnemosyne...'))
        self.actionDeleteCurrentCard.setText(_('&Delete current card'))
        self.actionDeleteCurrentCard.setShortcut(_('Del'))
        self.actionEditCurrentCard.setText(_('&Edit current card...'))
        self.actionEditCurrentCard.setShortcut(_('Ctrl+E'))
        self.actionResetCurrentCard.setText(_('Reset current card'))
        self.actionBrowseCards.setText(_('&Browse cards...'))
        self.actionBrowseCards.setShortcut(_('Ctrl+B'))
        self.actionExport.setText(_('&Export...'))
        self.actionFileExit.setText(_('E&xit'))
        self.actionFileNew.setText(_('&New...'))
        self.actionFileNew.setShortcut(_('Ctrl+N'))
        self.actionFileOpen.setText(_('&Open...'))
        self.actionFileOpen.setShortcut(_('Ctrl+O'))
        self.actionFileSave.setText(_('&Save'))
        self.actionFileSave.setShortcut(_('Ctrl+S'))
        self.actionFileSaveAs.setText(_('Save &as...'))
        self.actionAbout.setText(_('&About'))
        self.actionImport.setText(_('&Import...'))
        self.actionGettingStarted.setText(_('&Getting started'))
        self.actionShowStatistics.setText(_('Show s&tatistics...'))
        self.actionShowStatistics.setShortcut(_('Ctrl+T'))
        self.actionTip.setText(_('&Tip of the day'))
        self.actionManagePlugins.setText(_('Manage &plugins...'))
        self.actionManagePlugins.setToolTip(_('Manage plugins'))
        self.actionManageTypes.setText(_('&Manage card types...'))
        self.actionSync.setText(_('S&ync...'))
        self.actionSync.setShortcut(_('Ctrl+Y'))
        self.actionCompact.setText(_('Compact...'))
        self.actionCompact.setToolTip(_('Compact database'))
        self.actionFindDuplicates.setText(_('Find duplicate questions'))
        self.actionStudyDefault.setText(_('Scheduled -> forgotten -> new'))
        self.actionStudyNew.setText(_('Study new cards only'))
        self.actionCramAll.setText(_('Cram active cards'))
