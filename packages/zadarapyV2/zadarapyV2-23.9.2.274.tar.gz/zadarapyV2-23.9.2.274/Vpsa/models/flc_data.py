# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class FlcData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uncategorized': 'CatagoryData',
        'documents_spreadsheets_and_text_files': 'CatagoryData',
        'temporary_files': 'CatagoryData',
        'backup_files': 'CatagoryData',
        'archive_files': 'CatagoryData',
        'audio_files': 'CatagoryData',
        'disk_images': 'CatagoryData',
        'installers': 'CatagoryData',
        'image_files': 'CatagoryData',
        'log_files': 'CatagoryData',
        'email_data': 'CatagoryData',
        'server_virtualization': 'CatagoryData',
        'video_files': 'CatagoryData'
    }

    attribute_map = {
        'uncategorized': 'Uncategorized',
        'documents_spreadsheets_and_text_files': 'Documents Spreadsheets and text files',
        'temporary_files': 'Temporary files',
        'backup_files': 'Backup files',
        'archive_files': 'Archive files',
        'audio_files': 'Audio files',
        'disk_images': 'Disk Images',
        'installers': 'Installers',
        'image_files': 'Image files',
        'log_files': 'Log Files',
        'email_data': 'Email Data',
        'server_virtualization': 'Server Virtualization',
        'video_files': 'Video files'
    }

    def __init__(self, uncategorized=None, documents_spreadsheets_and_text_files=None, temporary_files=None, backup_files=None, archive_files=None, audio_files=None, disk_images=None, installers=None, image_files=None, log_files=None, email_data=None, server_virtualization=None, video_files=None, _configuration=None):  # noqa: E501
        """FlcData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uncategorized = None
        self._documents_spreadsheets_and_text_files = None
        self._temporary_files = None
        self._backup_files = None
        self._archive_files = None
        self._audio_files = None
        self._disk_images = None
        self._installers = None
        self._image_files = None
        self._log_files = None
        self._email_data = None
        self._server_virtualization = None
        self._video_files = None
        self.discriminator = None

        if uncategorized is not None:
            self.uncategorized = uncategorized
        if documents_spreadsheets_and_text_files is not None:
            self.documents_spreadsheets_and_text_files = documents_spreadsheets_and_text_files
        if temporary_files is not None:
            self.temporary_files = temporary_files
        if backup_files is not None:
            self.backup_files = backup_files
        if archive_files is not None:
            self.archive_files = archive_files
        if audio_files is not None:
            self.audio_files = audio_files
        if disk_images is not None:
            self.disk_images = disk_images
        if installers is not None:
            self.installers = installers
        if image_files is not None:
            self.image_files = image_files
        if log_files is not None:
            self.log_files = log_files
        if email_data is not None:
            self.email_data = email_data
        if server_virtualization is not None:
            self.server_virtualization = server_virtualization
        if video_files is not None:
            self.video_files = video_files

    @property
    def uncategorized(self):
        """Gets the uncategorized of this FlcData.  # noqa: E501


        :return: The uncategorized of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._uncategorized

    @uncategorized.setter
    def uncategorized(self, uncategorized):
        """Sets the uncategorized of this FlcData.


        :param uncategorized: The uncategorized of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._uncategorized = uncategorized

    @property
    def documents_spreadsheets_and_text_files(self):
        """Gets the documents_spreadsheets_and_text_files of this FlcData.  # noqa: E501


        :return: The documents_spreadsheets_and_text_files of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._documents_spreadsheets_and_text_files

    @documents_spreadsheets_and_text_files.setter
    def documents_spreadsheets_and_text_files(self, documents_spreadsheets_and_text_files):
        """Sets the documents_spreadsheets_and_text_files of this FlcData.


        :param documents_spreadsheets_and_text_files: The documents_spreadsheets_and_text_files of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._documents_spreadsheets_and_text_files = documents_spreadsheets_and_text_files

    @property
    def temporary_files(self):
        """Gets the temporary_files of this FlcData.  # noqa: E501


        :return: The temporary_files of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._temporary_files

    @temporary_files.setter
    def temporary_files(self, temporary_files):
        """Sets the temporary_files of this FlcData.


        :param temporary_files: The temporary_files of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._temporary_files = temporary_files

    @property
    def backup_files(self):
        """Gets the backup_files of this FlcData.  # noqa: E501


        :return: The backup_files of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._backup_files

    @backup_files.setter
    def backup_files(self, backup_files):
        """Sets the backup_files of this FlcData.


        :param backup_files: The backup_files of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._backup_files = backup_files

    @property
    def archive_files(self):
        """Gets the archive_files of this FlcData.  # noqa: E501


        :return: The archive_files of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._archive_files

    @archive_files.setter
    def archive_files(self, archive_files):
        """Sets the archive_files of this FlcData.


        :param archive_files: The archive_files of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._archive_files = archive_files

    @property
    def audio_files(self):
        """Gets the audio_files of this FlcData.  # noqa: E501


        :return: The audio_files of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._audio_files

    @audio_files.setter
    def audio_files(self, audio_files):
        """Sets the audio_files of this FlcData.


        :param audio_files: The audio_files of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._audio_files = audio_files

    @property
    def disk_images(self):
        """Gets the disk_images of this FlcData.  # noqa: E501


        :return: The disk_images of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._disk_images

    @disk_images.setter
    def disk_images(self, disk_images):
        """Sets the disk_images of this FlcData.


        :param disk_images: The disk_images of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._disk_images = disk_images

    @property
    def installers(self):
        """Gets the installers of this FlcData.  # noqa: E501


        :return: The installers of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._installers

    @installers.setter
    def installers(self, installers):
        """Sets the installers of this FlcData.


        :param installers: The installers of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._installers = installers

    @property
    def image_files(self):
        """Gets the image_files of this FlcData.  # noqa: E501


        :return: The image_files of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._image_files

    @image_files.setter
    def image_files(self, image_files):
        """Sets the image_files of this FlcData.


        :param image_files: The image_files of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._image_files = image_files

    @property
    def log_files(self):
        """Gets the log_files of this FlcData.  # noqa: E501


        :return: The log_files of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._log_files

    @log_files.setter
    def log_files(self, log_files):
        """Sets the log_files of this FlcData.


        :param log_files: The log_files of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._log_files = log_files

    @property
    def email_data(self):
        """Gets the email_data of this FlcData.  # noqa: E501


        :return: The email_data of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._email_data

    @email_data.setter
    def email_data(self, email_data):
        """Sets the email_data of this FlcData.


        :param email_data: The email_data of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._email_data = email_data

    @property
    def server_virtualization(self):
        """Gets the server_virtualization of this FlcData.  # noqa: E501


        :return: The server_virtualization of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._server_virtualization

    @server_virtualization.setter
    def server_virtualization(self, server_virtualization):
        """Sets the server_virtualization of this FlcData.


        :param server_virtualization: The server_virtualization of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._server_virtualization = server_virtualization

    @property
    def video_files(self):
        """Gets the video_files of this FlcData.  # noqa: E501


        :return: The video_files of this FlcData.  # noqa: E501
        :rtype: CatagoryData
        """
        return self._video_files

    @video_files.setter
    def video_files(self, video_files):
        """Sets the video_files of this FlcData.


        :param video_files: The video_files of this FlcData.  # noqa: E501
        :type: CatagoryData
        """

        self._video_files = video_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlcData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlcData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FlcData):
            return True

        return self.to_dict() != other.to_dict()
