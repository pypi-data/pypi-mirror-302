# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class Volume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'size': 'int',
        'vpsa_id': 'int',
        'vpsa_name': 'str',
        'vpsa_internal_name': 'str',
        'url': 'str',
        'flc': 'bool',
        'drive': 'VolumeDrive'
    }

    attribute_map = {
        'id': 'id',
        'size': 'size',
        'vpsa_id': 'vpsa_id',
        'vpsa_name': 'vpsa_name',
        'vpsa_internal_name': 'vpsa_internal_name',
        'url': 'url',
        'flc': 'flc',
        'drive': 'drive'
    }

    def __init__(self, id=None, size=None, vpsa_id=None, vpsa_name=None, vpsa_internal_name=None, url=None, flc=None, drive=None, _configuration=None):  # noqa: E501
        """Volume - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._size = None
        self._vpsa_id = None
        self._vpsa_name = None
        self._vpsa_internal_name = None
        self._url = None
        self._flc = None
        self._drive = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if size is not None:
            self.size = size
        if vpsa_id is not None:
            self.vpsa_id = vpsa_id
        if vpsa_name is not None:
            self.vpsa_name = vpsa_name
        if vpsa_internal_name is not None:
            self.vpsa_internal_name = vpsa_internal_name
        if url is not None:
            self.url = url
        if flc is not None:
            self.flc = flc
        if drive is not None:
            self.drive = drive

    @property
    def id(self):
        """Gets the id of this Volume.  # noqa: E501


        :return: The id of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Volume.


        :param id: The id of this Volume.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def size(self):
        """Gets the size of this Volume.  # noqa: E501


        :return: The size of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Volume.


        :param size: The size of this Volume.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def vpsa_id(self):
        """Gets the vpsa_id of this Volume.  # noqa: E501


        :return: The vpsa_id of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._vpsa_id

    @vpsa_id.setter
    def vpsa_id(self, vpsa_id):
        """Sets the vpsa_id of this Volume.


        :param vpsa_id: The vpsa_id of this Volume.  # noqa: E501
        :type: int
        """

        self._vpsa_id = vpsa_id

    @property
    def vpsa_name(self):
        """Gets the vpsa_name of this Volume.  # noqa: E501


        :return: The vpsa_name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_name

    @vpsa_name.setter
    def vpsa_name(self, vpsa_name):
        """Sets the vpsa_name of this Volume.


        :param vpsa_name: The vpsa_name of this Volume.  # noqa: E501
        :type: str
        """

        self._vpsa_name = vpsa_name

    @property
    def vpsa_internal_name(self):
        """Gets the vpsa_internal_name of this Volume.  # noqa: E501


        :return: The vpsa_internal_name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._vpsa_internal_name

    @vpsa_internal_name.setter
    def vpsa_internal_name(self, vpsa_internal_name):
        """Sets the vpsa_internal_name of this Volume.


        :param vpsa_internal_name: The vpsa_internal_name of this Volume.  # noqa: E501
        :type: str
        """

        self._vpsa_internal_name = vpsa_internal_name

    @property
    def url(self):
        """Gets the url of this Volume.  # noqa: E501


        :return: The url of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Volume.


        :param url: The url of this Volume.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def flc(self):
        """Gets the flc of this Volume.  # noqa: E501


        :return: The flc of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._flc

    @flc.setter
    def flc(self, flc):
        """Sets the flc of this Volume.


        :param flc: The flc of this Volume.  # noqa: E501
        :type: bool
        """

        self._flc = flc

    @property
    def drive(self):
        """Gets the drive of this Volume.  # noqa: E501


        :return: The drive of this Volume.  # noqa: E501
        :rtype: VolumeDrive
        """
        return self._drive

    @drive.setter
    def drive(self, drive):
        """Sets the drive of this Volume.


        :param drive: The drive of this Volume.  # noqa: E501
        :type: VolumeDrive
        """

        self._drive = drive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Volume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Volume):
            return True

        return self.to_dict() != other.to_dict()
