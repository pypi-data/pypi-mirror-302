"""Calculate and plot velocity distributions using the backtrace method.

    How to run
    ----------
    $ python vdist-solver1d.py -d <directory> -i <ispec> -o output.png
"""
from argparse import ArgumentParser

import emout
import matplotlib.pyplot as plt
import numpy as np

from vdsolver.core import PhaseGrid, VSolveTarget
from vdsolver.sims.essimulator import ChargedParticle
from vdsolver.tools.emses import create_default_simulator


def parse_args():
    parser = ArgumentParser()

    parser.add_argument('--directory', '-d', default='./')
    parser.add_argument('--istep', '-is', default=-1, type=int)

    parser.add_argument('--ispec', '-i', default=0, type=int)

    parser.add_argument('--dt', '-dt', default=1.0, type=float)
    parser.add_argument('--maxstep', '-ms', default=10000, type=int)

    parser.add_argument('--use_si', action='store_true')

    parser.add_argument('--output', '-o', default=None)

    parser.add_argument('--max_workers', '-mw', default=8, type=int)
    parser.add_argument('--chunksize', '-chk', default=100, type=int)

    parser.add_argument('--use_mpi', '-mpi', action='store_true')

    return parser.parse_args()


def create_simulator(*args, **kwargs):
    sim = None
    return sim


def main():
    args = parse_args()

    data = emout.Emout(args.directory)

    N{C1} = 100

    phase_grid = PhaseGrid(
        {phase}
    )

    # Create simulator
    sim = create_default_simulator(data, args.ispec, args.istep)

    # For self-simulation
    # sim = create_simulator()

    pcl_prototype = ChargedParticle.create_prototype(q_m=data.inp.qm[args.ispec])
    target = VSolveTarget(sim,
                          pcl_prototype,
                          data.inp.dt*args.dt,
                          phase_grid,
                          args.maxstep,
                          args.max_workers,
                          args.chunksize,
                          show_progress=True,
                          use_mpi=args.use_mpi,
                          )

    phases, probs = target.solve()

    phases = phases.reshape(N{C1}, 6)
    {C1} = phases[:, {i1}]
    if args.use_si:
        {C1} = data.unit.v.reverse({C1})
    probs = probs.reshape(N{C1})

    plt.plot({C1}, probs)
    plt.xlabel('{C1}')
    plt.ylabel('Probability')

    if args.output is None:
        plt.show()
    else:
        plt.gcf().savefig(args.output)


if __name__ == '__main__':
    main()
