"""A web3.py Contract class for the IMorphoStaticTyping contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import dataclass_to_tuple, rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from .AuthorizationTypes import Authorization
from .MarketParamsTypes import MarketParams
from .SignatureTypes import Signature

structs = {
    "MarketParams": MarketParams,
    "Authorization": Authorization,
    "Signature": Signature,
}


class IMorphoStaticTypingDOMAIN_SEPARATORContractFunction(ContractFunction):
    """ContractFunction for the DOMAIN_SEPARATOR method."""

    def __call__(self) -> IMorphoStaticTypingDOMAIN_SEPARATORContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingAccrueInterestContractFunction(ContractFunction):
    """ContractFunction for the accrueInterest method."""

    def __call__(self, marketParams: MarketParams) -> IMorphoStaticTypingAccrueInterestContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(marketParams))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingBorrowContractFunction(ContractFunction):
    """ContractFunction for the borrow method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Borrow."""

        assetsBorrowed: int
        sharesBorrowed: int

    def __call__(self, marketParams: MarketParams, assets: int, shares: int, onBehalf: str, receiver: str) -> IMorphoStaticTypingBorrowContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(marketParams),
            dataclass_to_tuple(assets),
            dataclass_to_tuple(shares),
            dataclass_to_tuple(onBehalf),
            dataclass_to_tuple(receiver),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingCreateMarketContractFunction(ContractFunction):
    """ContractFunction for the createMarket method."""

    def __call__(self, marketParams: MarketParams) -> IMorphoStaticTypingCreateMarketContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(marketParams))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingEnableIrmContractFunction(ContractFunction):
    """ContractFunction for the enableIrm method."""

    def __call__(self, irm: str) -> IMorphoStaticTypingEnableIrmContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(irm))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingEnableLltvContractFunction(ContractFunction):
    """ContractFunction for the enableLltv method."""

    def __call__(self, lltv: int) -> IMorphoStaticTypingEnableLltvContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(lltv))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingExtSloadsContractFunction(ContractFunction):
    """ContractFunction for the extSloads method."""

    def __call__(self, slots: list[bytes]) -> IMorphoStaticTypingExtSloadsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(slots))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bytes]:
        """returns list[bytes]."""
        # Define the expected return types from the smart contract call

        return_types = list[bytes]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[bytes],
            rename_returned_types(structs, return_types, raw_values),
        )


class IMorphoStaticTypingFeeRecipientContractFunction(ContractFunction):
    """ContractFunction for the feeRecipient method."""

    def __call__(self) -> IMorphoStaticTypingFeeRecipientContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingFlashLoanContractFunction(ContractFunction):
    """ContractFunction for the flashLoan method."""

    def __call__(self, token: str, assets: int, data: bytes) -> IMorphoStaticTypingFlashLoanContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(token),
            dataclass_to_tuple(assets),
            dataclass_to_tuple(data),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingIdToMarketParamsContractFunction(ContractFunction):
    """ContractFunction for the idToMarketParams method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for IdToMarketParams."""

        loanToken: str
        collateralToken: str
        oracle: str
        irm: str
        lltv: int

    def __call__(self, _id: bytes) -> IMorphoStaticTypingIdToMarketParamsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(_id))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [str, str, str, str, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingIsAuthorizedContractFunction(ContractFunction):
    """ContractFunction for the isAuthorized method."""

    def __call__(self, authorizer: str, authorized: str) -> IMorphoStaticTypingIsAuthorizedContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(authorizer), dataclass_to_tuple(authorized)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingIsIrmEnabledContractFunction(ContractFunction):
    """ContractFunction for the isIrmEnabled method."""

    def __call__(self, irm: str) -> IMorphoStaticTypingIsIrmEnabledContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(irm))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingIsLltvEnabledContractFunction(ContractFunction):
    """ContractFunction for the isLltvEnabled method."""

    def __call__(self, lltv: int) -> IMorphoStaticTypingIsLltvEnabledContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(lltv))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingLiquidateContractFunction(ContractFunction):
    """ContractFunction for the liquidate method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Liquidate."""

        arg1: int
        arg2: int

    def __call__(self, marketParams: MarketParams, borrower: str, seizedAssets: int, repaidShares: int, data: bytes) -> IMorphoStaticTypingLiquidateContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(marketParams),
            dataclass_to_tuple(borrower),
            dataclass_to_tuple(seizedAssets),
            dataclass_to_tuple(repaidShares),
            dataclass_to_tuple(data),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingMarketContractFunction(ContractFunction):
    """ContractFunction for the market method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Market."""

        totalSupplyAssets: int
        totalSupplyShares: int
        totalBorrowAssets: int
        totalBorrowShares: int
        lastUpdate: int
        fee: int

    def __call__(self, _id: bytes) -> IMorphoStaticTypingMarketContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(_id))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int, int, int, int, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingNonceContractFunction(ContractFunction):
    """ContractFunction for the nonce method."""

    def __call__(self, authorizer: str) -> IMorphoStaticTypingNonceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(authorizer))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingOwnerContractFunction(ContractFunction):
    """ContractFunction for the owner method."""

    def __call__(self) -> IMorphoStaticTypingOwnerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingPositionContractFunction(ContractFunction):
    """ContractFunction for the position method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Position."""

        supplyShares: int
        borrowShares: int
        collateral: int

    def __call__(self, _id: bytes, user: str) -> IMorphoStaticTypingPositionContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(_id), dataclass_to_tuple(user)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingRepayContractFunction(ContractFunction):
    """ContractFunction for the repay method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Repay."""

        assetsRepaid: int
        sharesRepaid: int

    def __call__(self, marketParams: MarketParams, assets: int, shares: int, onBehalf: str, data: bytes) -> IMorphoStaticTypingRepayContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(marketParams),
            dataclass_to_tuple(assets),
            dataclass_to_tuple(shares),
            dataclass_to_tuple(onBehalf),
            dataclass_to_tuple(data),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingSetAuthorizationContractFunction(ContractFunction):
    """ContractFunction for the setAuthorization method."""

    def __call__(self, authorized: str, newIsAuthorized: bool) -> IMorphoStaticTypingSetAuthorizationContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(authorized), dataclass_to_tuple(newIsAuthorized)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingSetAuthorizationWithSigContractFunction(
    ContractFunction
):
    """ContractFunction for the setAuthorizationWithSig method."""

    def __call__(self, authorization: Authorization, signature: Signature) -> IMorphoStaticTypingSetAuthorizationWithSigContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(authorization), dataclass_to_tuple(signature)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingSetFeeContractFunction(ContractFunction):
    """ContractFunction for the setFee method."""

    def __call__(self, marketParams: MarketParams, newFee: int) -> IMorphoStaticTypingSetFeeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(marketParams), dataclass_to_tuple(newFee)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingSetFeeRecipientContractFunction(ContractFunction):
    """ContractFunction for the setFeeRecipient method."""

    def __call__(self, newFeeRecipient: str) -> IMorphoStaticTypingSetFeeRecipientContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(newFeeRecipient))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingSetOwnerContractFunction(ContractFunction):
    """ContractFunction for the setOwner method."""

    def __call__(self, newOwner: str) -> IMorphoStaticTypingSetOwnerContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(newOwner))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingSupplyContractFunction(ContractFunction):
    """ContractFunction for the supply method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Supply."""

        assetsSupplied: int
        sharesSupplied: int

    def __call__(self, marketParams: MarketParams, assets: int, shares: int, onBehalf: str, data: bytes) -> IMorphoStaticTypingSupplyContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(marketParams),
            dataclass_to_tuple(assets),
            dataclass_to_tuple(shares),
            dataclass_to_tuple(onBehalf),
            dataclass_to_tuple(data),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingSupplyCollateralContractFunction(ContractFunction):
    """ContractFunction for the supplyCollateral method."""

    def __call__(self, marketParams: MarketParams, assets: int, onBehalf: str, data: bytes) -> IMorphoStaticTypingSupplyCollateralContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(marketParams),
            dataclass_to_tuple(assets),
            dataclass_to_tuple(onBehalf),
            dataclass_to_tuple(data),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingWithdrawContractFunction(ContractFunction):
    """ContractFunction for the withdraw method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Withdraw."""

        assetsWithdrawn: int
        sharesWithdrawn: int

    def __call__(self, marketParams: MarketParams, assets: int, shares: int, onBehalf: str, receiver: str) -> IMorphoStaticTypingWithdrawContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(marketParams),
            dataclass_to_tuple(assets),
            dataclass_to_tuple(shares),
            dataclass_to_tuple(onBehalf),
            dataclass_to_tuple(receiver),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMorphoStaticTypingWithdrawCollateralContractFunction(ContractFunction):
    """ContractFunction for the withdrawCollateral method."""

    def __call__(self, marketParams: MarketParams, assets: int, onBehalf: str, receiver: str) -> IMorphoStaticTypingWithdrawCollateralContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(marketParams),
            dataclass_to_tuple(assets),
            dataclass_to_tuple(onBehalf),
            dataclass_to_tuple(receiver),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMorphoStaticTypingContractFunctions(ContractFunctions):
    """ContractFunctions for the IMorphoStaticTyping contract."""

    DOMAIN_SEPARATOR: IMorphoStaticTypingDOMAIN_SEPARATORContractFunction

    accrueInterest: IMorphoStaticTypingAccrueInterestContractFunction

    borrow: IMorphoStaticTypingBorrowContractFunction

    createMarket: IMorphoStaticTypingCreateMarketContractFunction

    enableIrm: IMorphoStaticTypingEnableIrmContractFunction

    enableLltv: IMorphoStaticTypingEnableLltvContractFunction

    extSloads: IMorphoStaticTypingExtSloadsContractFunction

    feeRecipient: IMorphoStaticTypingFeeRecipientContractFunction

    flashLoan: IMorphoStaticTypingFlashLoanContractFunction

    idToMarketParams: IMorphoStaticTypingIdToMarketParamsContractFunction

    isAuthorized: IMorphoStaticTypingIsAuthorizedContractFunction

    isIrmEnabled: IMorphoStaticTypingIsIrmEnabledContractFunction

    isLltvEnabled: IMorphoStaticTypingIsLltvEnabledContractFunction

    liquidate: IMorphoStaticTypingLiquidateContractFunction

    market: IMorphoStaticTypingMarketContractFunction

    nonce: IMorphoStaticTypingNonceContractFunction

    owner: IMorphoStaticTypingOwnerContractFunction

    position: IMorphoStaticTypingPositionContractFunction

    repay: IMorphoStaticTypingRepayContractFunction

    setAuthorization: IMorphoStaticTypingSetAuthorizationContractFunction

    setAuthorizationWithSig: (
        IMorphoStaticTypingSetAuthorizationWithSigContractFunction
    )

    setFee: IMorphoStaticTypingSetFeeContractFunction

    setFeeRecipient: IMorphoStaticTypingSetFeeRecipientContractFunction

    setOwner: IMorphoStaticTypingSetOwnerContractFunction

    supply: IMorphoStaticTypingSupplyContractFunction

    supplyCollateral: IMorphoStaticTypingSupplyCollateralContractFunction

    withdraw: IMorphoStaticTypingWithdrawContractFunction

    withdrawCollateral: IMorphoStaticTypingWithdrawCollateralContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.DOMAIN_SEPARATOR = (
            IMorphoStaticTypingDOMAIN_SEPARATORContractFunction.factory(
                "DOMAIN_SEPARATOR",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="DOMAIN_SEPARATOR",
            )
        )
        self.accrueInterest = (
            IMorphoStaticTypingAccrueInterestContractFunction.factory(
                "accrueInterest",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="accrueInterest",
            )
        )
        self.borrow = IMorphoStaticTypingBorrowContractFunction.factory(
            "borrow",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="borrow",
        )
        self.createMarket = (
            IMorphoStaticTypingCreateMarketContractFunction.factory(
                "createMarket",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="createMarket",
            )
        )
        self.enableIrm = IMorphoStaticTypingEnableIrmContractFunction.factory(
            "enableIrm",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="enableIrm",
        )
        self.enableLltv = IMorphoStaticTypingEnableLltvContractFunction.factory(
            "enableLltv",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="enableLltv",
        )
        self.extSloads = IMorphoStaticTypingExtSloadsContractFunction.factory(
            "extSloads",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="extSloads",
        )
        self.feeRecipient = (
            IMorphoStaticTypingFeeRecipientContractFunction.factory(
                "feeRecipient",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="feeRecipient",
            )
        )
        self.flashLoan = IMorphoStaticTypingFlashLoanContractFunction.factory(
            "flashLoan",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="flashLoan",
        )
        self.idToMarketParams = (
            IMorphoStaticTypingIdToMarketParamsContractFunction.factory(
                "idToMarketParams",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="idToMarketParams",
            )
        )
        self.isAuthorized = (
            IMorphoStaticTypingIsAuthorizedContractFunction.factory(
                "isAuthorized",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="isAuthorized",
            )
        )
        self.isIrmEnabled = (
            IMorphoStaticTypingIsIrmEnabledContractFunction.factory(
                "isIrmEnabled",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="isIrmEnabled",
            )
        )
        self.isLltvEnabled = (
            IMorphoStaticTypingIsLltvEnabledContractFunction.factory(
                "isLltvEnabled",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="isLltvEnabled",
            )
        )
        self.liquidate = IMorphoStaticTypingLiquidateContractFunction.factory(
            "liquidate",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="liquidate",
        )
        self.market = IMorphoStaticTypingMarketContractFunction.factory(
            "market",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="market",
        )
        self.nonce = IMorphoStaticTypingNonceContractFunction.factory(
            "nonce",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="nonce",
        )
        self.owner = IMorphoStaticTypingOwnerContractFunction.factory(
            "owner",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="owner",
        )
        self.position = IMorphoStaticTypingPositionContractFunction.factory(
            "position",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="position",
        )
        self.repay = IMorphoStaticTypingRepayContractFunction.factory(
            "repay",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="repay",
        )
        self.setAuthorization = (
            IMorphoStaticTypingSetAuthorizationContractFunction.factory(
                "setAuthorization",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="setAuthorization",
            )
        )
        self.setAuthorizationWithSig = (
            IMorphoStaticTypingSetAuthorizationWithSigContractFunction.factory(
                "setAuthorizationWithSig",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="setAuthorizationWithSig",
            )
        )
        self.setFee = IMorphoStaticTypingSetFeeContractFunction.factory(
            "setFee",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setFee",
        )
        self.setFeeRecipient = (
            IMorphoStaticTypingSetFeeRecipientContractFunction.factory(
                "setFeeRecipient",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="setFeeRecipient",
            )
        )
        self.setOwner = IMorphoStaticTypingSetOwnerContractFunction.factory(
            "setOwner",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setOwner",
        )
        self.supply = IMorphoStaticTypingSupplyContractFunction.factory(
            "supply",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="supply",
        )
        self.supplyCollateral = (
            IMorphoStaticTypingSupplyCollateralContractFunction.factory(
                "supplyCollateral",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="supplyCollateral",
            )
        )
        self.withdraw = IMorphoStaticTypingWithdrawContractFunction.factory(
            "withdraw",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="withdraw",
        )
        self.withdrawCollateral = (
            IMorphoStaticTypingWithdrawCollateralContractFunction.factory(
                "withdrawCollateral",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="withdrawCollateral",
            )
        )


imorphostatictyping_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "DOMAIN_SEPARATOR",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "accrueInterest",
            "inputs": [
                {
                    "name": "marketParams",
                    "type": "tuple",
                    "internalType": "struct MarketParams",
                    "components": [
                        {
                            "name": "loanToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "collateralToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "oracle",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "irm",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "lltv",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "borrow",
            "inputs": [
                {
                    "name": "marketParams",
                    "type": "tuple",
                    "internalType": "struct MarketParams",
                    "components": [
                        {
                            "name": "loanToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "collateralToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "oracle",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "irm",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "lltv",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "shares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "onBehalf",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "receiver",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {
                    "name": "assetsBorrowed",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "sharesBorrowed",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "createMarket",
            "inputs": [
                {
                    "name": "marketParams",
                    "type": "tuple",
                    "internalType": "struct MarketParams",
                    "components": [
                        {
                            "name": "loanToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "collateralToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "oracle",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "irm",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "lltv",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "enableIrm",
            "inputs": [
                {"name": "irm", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "enableLltv",
            "inputs": [
                {"name": "lltv", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "extSloads",
            "inputs": [
                {
                    "name": "slots",
                    "type": "bytes32[]",
                    "internalType": "bytes32[]",
                }
            ],
            "outputs": [
                {"name": "", "type": "bytes32[]", "internalType": "bytes32[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "feeRecipient",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "flashLoan",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"},
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "idToMarketParams",
            "inputs": [{"name": "id", "type": "bytes32", "internalType": "Id"}],
            "outputs": [
                {
                    "name": "loanToken",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "collateralToken",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "oracle",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "irm", "type": "address", "internalType": "address"},
                {"name": "lltv", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isAuthorized",
            "inputs": [
                {
                    "name": "authorizer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "authorized",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isIrmEnabled",
            "inputs": [
                {"name": "irm", "type": "address", "internalType": "address"}
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isLltvEnabled",
            "inputs": [
                {"name": "lltv", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "liquidate",
            "inputs": [
                {
                    "name": "marketParams",
                    "type": "tuple",
                    "internalType": "struct MarketParams",
                    "components": [
                        {
                            "name": "loanToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "collateralToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "oracle",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "irm",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "lltv",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "borrower",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "seizedAssets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "repaidShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "market",
            "inputs": [{"name": "id", "type": "bytes32", "internalType": "Id"}],
            "outputs": [
                {
                    "name": "totalSupplyAssets",
                    "type": "uint128",
                    "internalType": "uint128",
                },
                {
                    "name": "totalSupplyShares",
                    "type": "uint128",
                    "internalType": "uint128",
                },
                {
                    "name": "totalBorrowAssets",
                    "type": "uint128",
                    "internalType": "uint128",
                },
                {
                    "name": "totalBorrowShares",
                    "type": "uint128",
                    "internalType": "uint128",
                },
                {
                    "name": "lastUpdate",
                    "type": "uint128",
                    "internalType": "uint128",
                },
                {"name": "fee", "type": "uint128", "internalType": "uint128"},
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "nonce",
            "inputs": [
                {
                    "name": "authorizer",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "owner",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "position",
            "inputs": [
                {"name": "id", "type": "bytes32", "internalType": "Id"},
                {"name": "user", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {
                    "name": "supplyShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "borrowShares",
                    "type": "uint128",
                    "internalType": "uint128",
                },
                {
                    "name": "collateral",
                    "type": "uint128",
                    "internalType": "uint128",
                },
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "repay",
            "inputs": [
                {
                    "name": "marketParams",
                    "type": "tuple",
                    "internalType": "struct MarketParams",
                    "components": [
                        {
                            "name": "loanToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "collateralToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "oracle",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "irm",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "lltv",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "shares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "onBehalf",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {
                    "name": "assetsRepaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "sharesRepaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setAuthorization",
            "inputs": [
                {
                    "name": "authorized",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "newIsAuthorized",
                    "type": "bool",
                    "internalType": "bool",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setAuthorizationWithSig",
            "inputs": [
                {
                    "name": "authorization",
                    "type": "tuple",
                    "internalType": "struct Authorization",
                    "components": [
                        {
                            "name": "authorizer",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "authorized",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "isAuthorized",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "nonce",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "signature",
                    "type": "tuple",
                    "internalType": "struct Signature",
                    "components": [
                        {"name": "v", "type": "uint8", "internalType": "uint8"},
                        {
                            "name": "r",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "s",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                    ],
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setFee",
            "inputs": [
                {
                    "name": "marketParams",
                    "type": "tuple",
                    "internalType": "struct MarketParams",
                    "components": [
                        {
                            "name": "loanToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "collateralToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "oracle",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "irm",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "lltv",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "newFee",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setFeeRecipient",
            "inputs": [
                {
                    "name": "newFeeRecipient",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setOwner",
            "inputs": [
                {
                    "name": "newOwner",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "supply",
            "inputs": [
                {
                    "name": "marketParams",
                    "type": "tuple",
                    "internalType": "struct MarketParams",
                    "components": [
                        {
                            "name": "loanToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "collateralToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "oracle",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "irm",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "lltv",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "shares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "onBehalf",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {
                    "name": "assetsSupplied",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "sharesSupplied",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "supplyCollateral",
            "inputs": [
                {
                    "name": "marketParams",
                    "type": "tuple",
                    "internalType": "struct MarketParams",
                    "components": [
                        {
                            "name": "loanToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "collateralToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "oracle",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "irm",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "lltv",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "onBehalf",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "withdraw",
            "inputs": [
                {
                    "name": "marketParams",
                    "type": "tuple",
                    "internalType": "struct MarketParams",
                    "components": [
                        {
                            "name": "loanToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "collateralToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "oracle",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "irm",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "lltv",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "shares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "onBehalf",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "receiver",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {
                    "name": "assetsWithdrawn",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "sharesWithdrawn",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "withdrawCollateral",
            "inputs": [
                {
                    "name": "marketParams",
                    "type": "tuple",
                    "internalType": "struct MarketParams",
                    "components": [
                        {
                            "name": "loanToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "collateralToken",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "oracle",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "irm",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "lltv",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "onBehalf",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "receiver",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
    ],
)


class IMorphoStaticTypingContract(Contract):
    """A web3.py Contract class for the IMorphoStaticTyping contract."""

    abi: ABI = imorphostatictyping_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IMorphoStaticTypingContractFunctions(imorphostatictyping_abi, self.w3, address)  # type: ignore

    functions: IMorphoStaticTypingContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IMorphoStaticTypingContractFunctions(
            imorphostatictyping_abi, w3, None
        )

        return contract
