# coding: utf-8

"""
    Zadara VPSA Storage Array REST API

     # Overview  This document outlines the methods available for administrating your Zadara Storage VPSA&#8482;. The Zadara Storage Array REST API   supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the   Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or   through the X-Access-Key header.  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some  time to complete. When using the API, this can cause some actions, such as large volume creation, to be undesirably asynchronous.  You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Specific Fields For Product  Some of the fields/actions used in the API should be used only for a specific product. The following tags are used to mark which   product responds to the fields/actions  VPSA Flash Array  VPSA Storage Array - Hybrid VPSA  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Vpsa.configuration import Configuration


class InlineResponse20072ResponsePoolSsd(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reserved_capacity': 'float',
        'usable_capacity': 'float',
        'used_capacity': 'float',
        'free_capacity': 'float',
        'used_by_data_capacity': 'float',
        'used_by_metadata_capacity': 'float',
        'usable_shrinked_capacity': 'float',
        'data_segments_capacity': 'float',
        'metadata_segments_capacity': 'float',
        'stale_capacity': 'float',
        'free_segments_capacity': 'float',
        'free_segments_percent': 'float'
    }

    attribute_map = {
        'reserved_capacity': 'reserved_capacity',
        'usable_capacity': 'usable_capacity',
        'used_capacity': 'used_capacity',
        'free_capacity': 'free_capacity',
        'used_by_data_capacity': 'used_by_data_capacity',
        'used_by_metadata_capacity': 'used_by_metadata_capacity',
        'usable_shrinked_capacity': 'usable_shrinked_capacity',
        'data_segments_capacity': 'data_segments_capacity',
        'metadata_segments_capacity': 'metadata_segments_capacity',
        'stale_capacity': 'stale_capacity',
        'free_segments_capacity': 'free_segments_capacity',
        'free_segments_percent': 'free_segments_percent'
    }

    def __init__(self, reserved_capacity=None, usable_capacity=None, used_capacity=None, free_capacity=None, used_by_data_capacity=None, used_by_metadata_capacity=None, usable_shrinked_capacity=None, data_segments_capacity=None, metadata_segments_capacity=None, stale_capacity=None, free_segments_capacity=None, free_segments_percent=None, _configuration=None):  # noqa: E501
        """InlineResponse20072ResponsePoolSsd - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._reserved_capacity = None
        self._usable_capacity = None
        self._used_capacity = None
        self._free_capacity = None
        self._used_by_data_capacity = None
        self._used_by_metadata_capacity = None
        self._usable_shrinked_capacity = None
        self._data_segments_capacity = None
        self._metadata_segments_capacity = None
        self._stale_capacity = None
        self._free_segments_capacity = None
        self._free_segments_percent = None
        self.discriminator = None

        if reserved_capacity is not None:
            self.reserved_capacity = reserved_capacity
        if usable_capacity is not None:
            self.usable_capacity = usable_capacity
        if used_capacity is not None:
            self.used_capacity = used_capacity
        if free_capacity is not None:
            self.free_capacity = free_capacity
        if used_by_data_capacity is not None:
            self.used_by_data_capacity = used_by_data_capacity
        if used_by_metadata_capacity is not None:
            self.used_by_metadata_capacity = used_by_metadata_capacity
        if usable_shrinked_capacity is not None:
            self.usable_shrinked_capacity = usable_shrinked_capacity
        if data_segments_capacity is not None:
            self.data_segments_capacity = data_segments_capacity
        if metadata_segments_capacity is not None:
            self.metadata_segments_capacity = metadata_segments_capacity
        if stale_capacity is not None:
            self.stale_capacity = stale_capacity
        if free_segments_capacity is not None:
            self.free_segments_capacity = free_segments_capacity
        if free_segments_percent is not None:
            self.free_segments_percent = free_segments_percent

    @property
    def reserved_capacity(self):
        """Gets the reserved_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The reserved_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._reserved_capacity

    @reserved_capacity.setter
    def reserved_capacity(self, reserved_capacity):
        """Sets the reserved_capacity of this InlineResponse20072ResponsePoolSsd.


        :param reserved_capacity: The reserved_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._reserved_capacity = reserved_capacity

    @property
    def usable_capacity(self):
        """Gets the usable_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The usable_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._usable_capacity

    @usable_capacity.setter
    def usable_capacity(self, usable_capacity):
        """Sets the usable_capacity of this InlineResponse20072ResponsePoolSsd.


        :param usable_capacity: The usable_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._usable_capacity = usable_capacity

    @property
    def used_capacity(self):
        """Gets the used_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The used_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._used_capacity

    @used_capacity.setter
    def used_capacity(self, used_capacity):
        """Sets the used_capacity of this InlineResponse20072ResponsePoolSsd.


        :param used_capacity: The used_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._used_capacity = used_capacity

    @property
    def free_capacity(self):
        """Gets the free_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The free_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._free_capacity

    @free_capacity.setter
    def free_capacity(self, free_capacity):
        """Sets the free_capacity of this InlineResponse20072ResponsePoolSsd.


        :param free_capacity: The free_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._free_capacity = free_capacity

    @property
    def used_by_data_capacity(self):
        """Gets the used_by_data_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The used_by_data_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._used_by_data_capacity

    @used_by_data_capacity.setter
    def used_by_data_capacity(self, used_by_data_capacity):
        """Sets the used_by_data_capacity of this InlineResponse20072ResponsePoolSsd.


        :param used_by_data_capacity: The used_by_data_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._used_by_data_capacity = used_by_data_capacity

    @property
    def used_by_metadata_capacity(self):
        """Gets the used_by_metadata_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The used_by_metadata_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._used_by_metadata_capacity

    @used_by_metadata_capacity.setter
    def used_by_metadata_capacity(self, used_by_metadata_capacity):
        """Sets the used_by_metadata_capacity of this InlineResponse20072ResponsePoolSsd.


        :param used_by_metadata_capacity: The used_by_metadata_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._used_by_metadata_capacity = used_by_metadata_capacity

    @property
    def usable_shrinked_capacity(self):
        """Gets the usable_shrinked_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The usable_shrinked_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._usable_shrinked_capacity

    @usable_shrinked_capacity.setter
    def usable_shrinked_capacity(self, usable_shrinked_capacity):
        """Sets the usable_shrinked_capacity of this InlineResponse20072ResponsePoolSsd.


        :param usable_shrinked_capacity: The usable_shrinked_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._usable_shrinked_capacity = usable_shrinked_capacity

    @property
    def data_segments_capacity(self):
        """Gets the data_segments_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The data_segments_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._data_segments_capacity

    @data_segments_capacity.setter
    def data_segments_capacity(self, data_segments_capacity):
        """Sets the data_segments_capacity of this InlineResponse20072ResponsePoolSsd.


        :param data_segments_capacity: The data_segments_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._data_segments_capacity = data_segments_capacity

    @property
    def metadata_segments_capacity(self):
        """Gets the metadata_segments_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The metadata_segments_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._metadata_segments_capacity

    @metadata_segments_capacity.setter
    def metadata_segments_capacity(self, metadata_segments_capacity):
        """Sets the metadata_segments_capacity of this InlineResponse20072ResponsePoolSsd.


        :param metadata_segments_capacity: The metadata_segments_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._metadata_segments_capacity = metadata_segments_capacity

    @property
    def stale_capacity(self):
        """Gets the stale_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The stale_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._stale_capacity

    @stale_capacity.setter
    def stale_capacity(self, stale_capacity):
        """Sets the stale_capacity of this InlineResponse20072ResponsePoolSsd.


        :param stale_capacity: The stale_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._stale_capacity = stale_capacity

    @property
    def free_segments_capacity(self):
        """Gets the free_segments_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The free_segments_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._free_segments_capacity

    @free_segments_capacity.setter
    def free_segments_capacity(self, free_segments_capacity):
        """Sets the free_segments_capacity of this InlineResponse20072ResponsePoolSsd.


        :param free_segments_capacity: The free_segments_capacity of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._free_segments_capacity = free_segments_capacity

    @property
    def free_segments_percent(self):
        """Gets the free_segments_percent of this InlineResponse20072ResponsePoolSsd.  # noqa: E501


        :return: The free_segments_percent of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :rtype: float
        """
        return self._free_segments_percent

    @free_segments_percent.setter
    def free_segments_percent(self, free_segments_percent):
        """Sets the free_segments_percent of this InlineResponse20072ResponsePoolSsd.


        :param free_segments_percent: The free_segments_percent of this InlineResponse20072ResponsePoolSsd.  # noqa: E501
        :type: float
        """

        self._free_segments_percent = free_segments_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20072ResponsePoolSsd, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20072ResponsePoolSsd):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20072ResponsePoolSsd):
            return True

        return self.to_dict() != other.to_dict()
