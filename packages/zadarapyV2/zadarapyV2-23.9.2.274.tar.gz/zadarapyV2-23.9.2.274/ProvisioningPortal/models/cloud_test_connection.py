# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class CloudTestConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_id': 'int',
        'ip': 'str',
        'admin_user': 'str',
        'admin_key': 'str',
        'auth_url': 'str',
        'nova_url': 'str',
        'keystone_url': 'str',
        'ssl_verify': 'bool',
        'gateway_address': 'str'
    }

    attribute_map = {
        'cloud_id': 'cloud_id',
        'ip': 'ip',
        'admin_user': 'admin_user',
        'admin_key': 'admin_key',
        'auth_url': 'auth_url',
        'nova_url': 'nova_url',
        'keystone_url': 'keystone_url',
        'ssl_verify': 'ssl_verify',
        'gateway_address': 'gateway_address'
    }

    def __init__(self, cloud_id=None, ip=None, admin_user=None, admin_key=None, auth_url=None, nova_url=None, keystone_url=None, ssl_verify=None, gateway_address=None, _configuration=None):  # noqa: E501
        """CloudTestConnection - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cloud_id = None
        self._ip = None
        self._admin_user = None
        self._admin_key = None
        self._auth_url = None
        self._nova_url = None
        self._keystone_url = None
        self._ssl_verify = None
        self._gateway_address = None
        self.discriminator = None

        if cloud_id is not None:
            self.cloud_id = cloud_id
        if ip is not None:
            self.ip = ip
        if admin_user is not None:
            self.admin_user = admin_user
        if admin_key is not None:
            self.admin_key = admin_key
        if auth_url is not None:
            self.auth_url = auth_url
        if nova_url is not None:
            self.nova_url = nova_url
        if keystone_url is not None:
            self.keystone_url = keystone_url
        if ssl_verify is not None:
            self.ssl_verify = ssl_verify
        if gateway_address is not None:
            self.gateway_address = gateway_address

    @property
    def cloud_id(self):
        """Gets the cloud_id of this CloudTestConnection.  # noqa: E501

        Cloud ID. Opt out for testing new cloud connectivity.  # noqa: E501

        :return: The cloud_id of this CloudTestConnection.  # noqa: E501
        :rtype: int
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this CloudTestConnection.

        Cloud ID. Opt out for testing new cloud connectivity.  # noqa: E501

        :param cloud_id: The cloud_id of this CloudTestConnection.  # noqa: E501
        :type: int
        """

        self._cloud_id = cloud_id

    @property
    def ip(self):
        """Gets the ip of this CloudTestConnection.  # noqa: E501

        Cloud's ip address  # noqa: E501

        :return: The ip of this CloudTestConnection.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this CloudTestConnection.

        Cloud's ip address  # noqa: E501

        :param ip: The ip of this CloudTestConnection.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def admin_user(self):
        """Gets the admin_user of this CloudTestConnection.  # noqa: E501

        Nova admin user  # noqa: E501

        :return: The admin_user of this CloudTestConnection.  # noqa: E501
        :rtype: str
        """
        return self._admin_user

    @admin_user.setter
    def admin_user(self, admin_user):
        """Sets the admin_user of this CloudTestConnection.

        Nova admin user  # noqa: E501

        :param admin_user: The admin_user of this CloudTestConnection.  # noqa: E501
        :type: str
        """

        self._admin_user = admin_user

    @property
    def admin_key(self):
        """Gets the admin_key of this CloudTestConnection.  # noqa: E501

        Nova admin key. Only applies to new cloud. Do not provide for existing cloud.  # noqa: E501

        :return: The admin_key of this CloudTestConnection.  # noqa: E501
        :rtype: str
        """
        return self._admin_key

    @admin_key.setter
    def admin_key(self, admin_key):
        """Sets the admin_key of this CloudTestConnection.

        Nova admin key. Only applies to new cloud. Do not provide for existing cloud.  # noqa: E501

        :param admin_key: The admin_key of this CloudTestConnection.  # noqa: E501
        :type: str
        """

        self._admin_key = admin_key

    @property
    def auth_url(self):
        """Gets the auth_url of this CloudTestConnection.  # noqa: E501

        Auth URL.  # noqa: E501

        :return: The auth_url of this CloudTestConnection.  # noqa: E501
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this CloudTestConnection.

        Auth URL.  # noqa: E501

        :param auth_url: The auth_url of this CloudTestConnection.  # noqa: E501
        :type: str
        """

        self._auth_url = auth_url

    @property
    def nova_url(self):
        """Gets the nova_url of this CloudTestConnection.  # noqa: E501

        Nova URL.  # noqa: E501

        :return: The nova_url of this CloudTestConnection.  # noqa: E501
        :rtype: str
        """
        return self._nova_url

    @nova_url.setter
    def nova_url(self, nova_url):
        """Sets the nova_url of this CloudTestConnection.

        Nova URL.  # noqa: E501

        :param nova_url: The nova_url of this CloudTestConnection.  # noqa: E501
        :type: str
        """

        self._nova_url = nova_url

    @property
    def keystone_url(self):
        """Gets the keystone_url of this CloudTestConnection.  # noqa: E501

        Keystone URL.  # noqa: E501

        :return: The keystone_url of this CloudTestConnection.  # noqa: E501
        :rtype: str
        """
        return self._keystone_url

    @keystone_url.setter
    def keystone_url(self, keystone_url):
        """Sets the keystone_url of this CloudTestConnection.

        Keystone URL.  # noqa: E501

        :param keystone_url: The keystone_url of this CloudTestConnection.  # noqa: E501
        :type: str
        """

        self._keystone_url = keystone_url

    @property
    def ssl_verify(self):
        """Gets the ssl_verify of this CloudTestConnection.  # noqa: E501

        Verify SSL (public ecommerce only).  # noqa: E501

        :return: The ssl_verify of this CloudTestConnection.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_verify

    @ssl_verify.setter
    def ssl_verify(self, ssl_verify):
        """Sets the ssl_verify of this CloudTestConnection.

        Verify SSL (public ecommerce only).  # noqa: E501

        :param ssl_verify: The ssl_verify of this CloudTestConnection.  # noqa: E501
        :type: bool
        """

        self._ssl_verify = ssl_verify

    @property
    def gateway_address(self):
        """Gets the gateway_address of this CloudTestConnection.  # noqa: E501

        Gateway Address.  # noqa: E501

        :return: The gateway_address of this CloudTestConnection.  # noqa: E501
        :rtype: str
        """
        return self._gateway_address

    @gateway_address.setter
    def gateway_address(self, gateway_address):
        """Sets the gateway_address of this CloudTestConnection.

        Gateway Address.  # noqa: E501

        :param gateway_address: The gateway_address of this CloudTestConnection.  # noqa: E501
        :type: str
        """

        self._gateway_address = gateway_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudTestConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudTestConnection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudTestConnection):
            return True

        return self.to_dict() != other.to_dict()
