"""A web3.py Contract class for the ILiquidityPool contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import dataclass_to_tuple, rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}


class ILiquidityPoolAddEthAmountLockedForWithdrawalContractFunction(
    ContractFunction
):
    """ContractFunction for the addEthAmountLockedForWithdrawal method."""

    def __call__(self, amount: int) -> ILiquidityPoolAddEthAmountLockedForWithdrawalContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ILiquidityPoolAmountForShareContractFunction(ContractFunction):
    """ContractFunction for the amountForShare method."""

    def __call__(self, share: int) -> ILiquidityPoolAmountForShareContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(share))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolDepositContractFunction0(ContractFunction):
    """ContractFunction for the deposit method."""

    def __call__(self) -> ILiquidityPoolDepositContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(ILiquidityPoolDepositContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolDepositContractFunction1(ContractFunction):
    """ContractFunction for the deposit method."""

    def __call__(self, referral: str) -> ILiquidityPoolDepositContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(ILiquidityPoolDepositContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolDepositContractFunction2(ContractFunction):
    """ContractFunction for the deposit method."""

    def __call__(self, user: str, referral: str) -> ILiquidityPoolDepositContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(user), dataclass_to_tuple(referral))  # type: ignore
        return cast(ILiquidityPoolDepositContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolDepositContractFunction(ContractFunction):
    """ContractFunction for the deposit method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self) -> ILiquidityPoolDepositContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, referral: str) -> ILiquidityPoolDepositContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, user: str, referral: str) -> ILiquidityPoolDepositContractFunction2:  # type: ignore
        ...

    def __call__(self, *args) -> ILiquidityPoolDepositContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class ILiquidityPoolDepositToRecipientContractFunction(ContractFunction):
    """ContractFunction for the depositToRecipient method."""

    def __call__(self, recipient: str, amount: int, referral: str) -> ILiquidityPoolDepositToRecipientContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(recipient),
            dataclass_to_tuple(amount),
            dataclass_to_tuple(referral),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolEETHContractFunction(ContractFunction):
    """ContractFunction for the eETH method."""

    def __call__(self) -> ILiquidityPoolEETHContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolGetTotalEtherClaimOfContractFunction(ContractFunction):
    """ContractFunction for the getTotalEtherClaimOf method."""

    def __call__(self, user: str) -> ILiquidityPoolGetTotalEtherClaimOfContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(user))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolGetTotalPooledEtherContractFunction(ContractFunction):
    """ContractFunction for the getTotalPooledEther method."""

    def __call__(self) -> ILiquidityPoolGetTotalPooledEtherContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolNumPendingDepositsContractFunction(ContractFunction):
    """ContractFunction for the numPendingDeposits method."""

    def __call__(self) -> ILiquidityPoolNumPendingDepositsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolRebaseContractFunction(ContractFunction):
    """ContractFunction for the rebase method."""

    def __call__(self, accruedRewards: int) -> ILiquidityPoolRebaseContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(accruedRewards))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ILiquidityPoolReduceEthAmountLockedForWithdrawalContractFunction(
    ContractFunction
):
    """ContractFunction for the reduceEthAmountLockedForWithdrawal method."""

    def __call__(self, amount: int) -> ILiquidityPoolReduceEthAmountLockedForWithdrawalContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ILiquidityPoolSharesForAmountContractFunction(ContractFunction):
    """ContractFunction for the sharesForAmount method."""

    def __call__(self, amount: int) -> ILiquidityPoolSharesForAmountContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolSharesForWithdrawalAmountContractFunction(ContractFunction):
    """ContractFunction for the sharesForWithdrawalAmount method."""

    def __call__(self, amount: int) -> ILiquidityPoolSharesForWithdrawalAmountContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolTotalValueInLpContractFunction(ContractFunction):
    """ContractFunction for the totalValueInLp method."""

    def __call__(self) -> ILiquidityPoolTotalValueInLpContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolTotalValueOutOfLpContractFunction(ContractFunction):
    """ContractFunction for the totalValueOutOfLp method."""

    def __call__(self) -> ILiquidityPoolTotalValueOutOfLpContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ILiquidityPoolContractFunctions(ContractFunctions):
    """ContractFunctions for the ILiquidityPool contract."""

    addEthAmountLockedForWithdrawal: (
        ILiquidityPoolAddEthAmountLockedForWithdrawalContractFunction
    )

    amountForShare: ILiquidityPoolAmountForShareContractFunction

    deposit: ILiquidityPoolDepositContractFunction

    depositToRecipient: ILiquidityPoolDepositToRecipientContractFunction

    eETH: ILiquidityPoolEETHContractFunction

    getTotalEtherClaimOf: ILiquidityPoolGetTotalEtherClaimOfContractFunction

    getTotalPooledEther: ILiquidityPoolGetTotalPooledEtherContractFunction

    numPendingDeposits: ILiquidityPoolNumPendingDepositsContractFunction

    rebase: ILiquidityPoolRebaseContractFunction

    reduceEthAmountLockedForWithdrawal: (
        ILiquidityPoolReduceEthAmountLockedForWithdrawalContractFunction
    )

    sharesForAmount: ILiquidityPoolSharesForAmountContractFunction

    sharesForWithdrawalAmount: (
        ILiquidityPoolSharesForWithdrawalAmountContractFunction
    )

    totalValueInLp: ILiquidityPoolTotalValueInLpContractFunction

    totalValueOutOfLp: ILiquidityPoolTotalValueOutOfLpContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addEthAmountLockedForWithdrawal = ILiquidityPoolAddEthAmountLockedForWithdrawalContractFunction.factory(
            "addEthAmountLockedForWithdrawal",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="addEthAmountLockedForWithdrawal",
        )
        self.amountForShare = (
            ILiquidityPoolAmountForShareContractFunction.factory(
                "amountForShare",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="amountForShare",
            )
        )
        self.deposit = ILiquidityPoolDepositContractFunction.factory(
            "deposit",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deposit",
        )
        self.depositToRecipient = (
            ILiquidityPoolDepositToRecipientContractFunction.factory(
                "depositToRecipient",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="depositToRecipient",
            )
        )
        self.eETH = ILiquidityPoolEETHContractFunction.factory(
            "eETH",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="eETH",
        )
        self.getTotalEtherClaimOf = (
            ILiquidityPoolGetTotalEtherClaimOfContractFunction.factory(
                "getTotalEtherClaimOf",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getTotalEtherClaimOf",
            )
        )
        self.getTotalPooledEther = (
            ILiquidityPoolGetTotalPooledEtherContractFunction.factory(
                "getTotalPooledEther",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getTotalPooledEther",
            )
        )
        self.numPendingDeposits = (
            ILiquidityPoolNumPendingDepositsContractFunction.factory(
                "numPendingDeposits",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="numPendingDeposits",
            )
        )
        self.rebase = ILiquidityPoolRebaseContractFunction.factory(
            "rebase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="rebase",
        )
        self.reduceEthAmountLockedForWithdrawal = ILiquidityPoolReduceEthAmountLockedForWithdrawalContractFunction.factory(
            "reduceEthAmountLockedForWithdrawal",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="reduceEthAmountLockedForWithdrawal",
        )
        self.sharesForAmount = (
            ILiquidityPoolSharesForAmountContractFunction.factory(
                "sharesForAmount",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="sharesForAmount",
            )
        )
        self.sharesForWithdrawalAmount = (
            ILiquidityPoolSharesForWithdrawalAmountContractFunction.factory(
                "sharesForWithdrawalAmount",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="sharesForWithdrawalAmount",
            )
        )
        self.totalValueInLp = (
            ILiquidityPoolTotalValueInLpContractFunction.factory(
                "totalValueInLp",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="totalValueInLp",
            )
        )
        self.totalValueOutOfLp = (
            ILiquidityPoolTotalValueOutOfLpContractFunction.factory(
                "totalValueOutOfLp",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="totalValueOutOfLp",
            )
        )


iliquiditypool_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "addEthAmountLockedForWithdrawal",
            "inputs": [
                {
                    "name": "_amount",
                    "type": "uint128",
                    "internalType": "uint128",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "amountForShare",
            "inputs": [
                {"name": "_share", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deposit",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deposit",
            "inputs": [
                {
                    "name": "_referral",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deposit",
            "inputs": [
                {"name": "_user", "type": "address", "internalType": "address"},
                {
                    "name": "_referral",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "depositToRecipient",
            "inputs": [
                {
                    "name": "_recipient",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_referral",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "eETH",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IEETH",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getTotalEtherClaimOf",
            "inputs": [
                {"name": "_user", "type": "address", "internalType": "address"}
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getTotalPooledEther",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "numPendingDeposits",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint32", "internalType": "uint32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "rebase",
            "inputs": [
                {
                    "name": "_accruedRewards",
                    "type": "int128",
                    "internalType": "int128",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "reduceEthAmountLockedForWithdrawal",
            "inputs": [
                {
                    "name": "_amount",
                    "type": "uint128",
                    "internalType": "uint128",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "sharesForAmount",
            "inputs": [
                {
                    "name": "_amount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "sharesForWithdrawalAmount",
            "inputs": [
                {
                    "name": "_amount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "totalValueInLp",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint128", "internalType": "uint128"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "totalValueOutOfLp",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint128", "internalType": "uint128"}
            ],
            "stateMutability": "view",
        },
    ],
)


class ILiquidityPoolContract(Contract):
    """A web3.py Contract class for the ILiquidityPool contract."""

    abi: ABI = iliquiditypool_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = ILiquidityPoolContractFunctions(iliquiditypool_abi, self.w3, address)  # type: ignore

    functions: ILiquidityPoolContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ILiquidityPoolContractFunctions(
            iliquiditypool_abi, w3, None
        )

        return contract
