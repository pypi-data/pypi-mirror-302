# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class Zios(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'internal_name': 'str',
        'user': 'str',
        'tenant_name': 'str',
        'description': 'str',
        'status': 'str',
        'engine_type': 'str',
        'vcpus': 'int',
        'ram': 'int',
        'https_termination': 'bool',
        'image': 'str',
        'drives': 'int',
        'cache': 'int',
        'virtual_controllers': 'int',
        'ip_address': 'str',
        'ipv6_address': 'str',
        'public_ip': 'str',
        'management_url': 'str',
        'storage_policies_count': 'int',
        'metadata_policies_count': 'int',
        'accounts_count': 'int',
        'users_count': 'int',
        'containers_count': 'int',
        'redundancy_status': 'str',
        'objects_count': 'int',
        'active_vc_index': 'int',
        'network_configuration': 'ZiosNetworkConfiguration',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'internal_name': 'internal_name',
        'user': 'user',
        'tenant_name': 'tenant_name',
        'description': 'description',
        'status': 'status',
        'engine_type': 'engine_type',
        'vcpus': 'vcpus',
        'ram': 'ram',
        'https_termination': 'https_termination',
        'image': 'image',
        'drives': 'drives',
        'cache': 'cache',
        'virtual_controllers': 'virtual_controllers',
        'ip_address': 'ip_address',
        'ipv6_address': 'ipv6_address',
        'public_ip': 'public_ip',
        'management_url': 'management_url',
        'storage_policies_count': 'storage_policies_count',
        'metadata_policies_count': 'metadata_policies_count',
        'accounts_count': 'accounts_count',
        'users_count': 'users_count',
        'containers_count': 'containers_count',
        'redundancy_status': 'redundancy_status',
        'objects_count': 'objects_count',
        'active_vc_index': 'active_vc_index',
        'network_configuration': 'network_configuration',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, internal_name=None, user=None, tenant_name=None, description=None, status=None, engine_type=None, vcpus=None, ram=None, https_termination=None, image=None, drives=None, cache=None, virtual_controllers=None, ip_address=None, ipv6_address=None, public_ip=None, management_url=None, storage_policies_count=None, metadata_policies_count=None, accounts_count=None, users_count=None, containers_count=None, redundancy_status=None, objects_count=None, active_vc_index=None, network_configuration=None, created_at=None, updated_at=None, _configuration=None):  # noqa: E501
        """Zios - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._internal_name = None
        self._user = None
        self._tenant_name = None
        self._description = None
        self._status = None
        self._engine_type = None
        self._vcpus = None
        self._ram = None
        self._https_termination = None
        self._image = None
        self._drives = None
        self._cache = None
        self._virtual_controllers = None
        self._ip_address = None
        self._ipv6_address = None
        self._public_ip = None
        self._management_url = None
        self._storage_policies_count = None
        self._metadata_policies_count = None
        self._accounts_count = None
        self._users_count = None
        self._containers_count = None
        self._redundancy_status = None
        self._objects_count = None
        self._active_vc_index = None
        self._network_configuration = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if internal_name is not None:
            self.internal_name = internal_name
        if user is not None:
            self.user = user
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if engine_type is not None:
            self.engine_type = engine_type
        if vcpus is not None:
            self.vcpus = vcpus
        if ram is not None:
            self.ram = ram
        if https_termination is not None:
            self.https_termination = https_termination
        if image is not None:
            self.image = image
        if drives is not None:
            self.drives = drives
        if cache is not None:
            self.cache = cache
        if virtual_controllers is not None:
            self.virtual_controllers = virtual_controllers
        if ip_address is not None:
            self.ip_address = ip_address
        if ipv6_address is not None:
            self.ipv6_address = ipv6_address
        if public_ip is not None:
            self.public_ip = public_ip
        if management_url is not None:
            self.management_url = management_url
        if storage_policies_count is not None:
            self.storage_policies_count = storage_policies_count
        if metadata_policies_count is not None:
            self.metadata_policies_count = metadata_policies_count
        if accounts_count is not None:
            self.accounts_count = accounts_count
        if users_count is not None:
            self.users_count = users_count
        if containers_count is not None:
            self.containers_count = containers_count
        if redundancy_status is not None:
            self.redundancy_status = redundancy_status
        if objects_count is not None:
            self.objects_count = objects_count
        if active_vc_index is not None:
            self.active_vc_index = active_vc_index
        if network_configuration is not None:
            self.network_configuration = network_configuration
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Zios.  # noqa: E501


        :return: The id of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Zios.


        :param id: The id of this Zios.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Zios.  # noqa: E501


        :return: The name of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Zios.


        :param name: The name of this Zios.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def internal_name(self):
        """Gets the internal_name of this Zios.  # noqa: E501


        :return: The internal_name of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this Zios.


        :param internal_name: The internal_name of this Zios.  # noqa: E501
        :type: str
        """

        self._internal_name = internal_name

    @property
    def user(self):
        """Gets the user of this Zios.  # noqa: E501


        :return: The user of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Zios.


        :param user: The user of this Zios.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def tenant_name(self):
        """Gets the tenant_name of this Zios.  # noqa: E501


        :return: The tenant_name of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this Zios.


        :param tenant_name: The tenant_name of this Zios.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def description(self):
        """Gets the description of this Zios.  # noqa: E501


        :return: The description of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Zios.


        :param description: The description of this Zios.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this Zios.  # noqa: E501


        :return: The status of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Zios.


        :param status: The status of this Zios.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def engine_type(self):
        """Gets the engine_type of this Zios.  # noqa: E501


        :return: The engine_type of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this Zios.


        :param engine_type: The engine_type of this Zios.  # noqa: E501
        :type: str
        """

        self._engine_type = engine_type

    @property
    def vcpus(self):
        """Gets the vcpus of this Zios.  # noqa: E501


        :return: The vcpus of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._vcpus

    @vcpus.setter
    def vcpus(self, vcpus):
        """Sets the vcpus of this Zios.


        :param vcpus: The vcpus of this Zios.  # noqa: E501
        :type: int
        """

        self._vcpus = vcpus

    @property
    def ram(self):
        """Gets the ram of this Zios.  # noqa: E501


        :return: The ram of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this Zios.


        :param ram: The ram of this Zios.  # noqa: E501
        :type: int
        """

        self._ram = ram

    @property
    def https_termination(self):
        """Gets the https_termination of this Zios.  # noqa: E501


        :return: The https_termination of this Zios.  # noqa: E501
        :rtype: bool
        """
        return self._https_termination

    @https_termination.setter
    def https_termination(self, https_termination):
        """Sets the https_termination of this Zios.


        :param https_termination: The https_termination of this Zios.  # noqa: E501
        :type: bool
        """

        self._https_termination = https_termination

    @property
    def image(self):
        """Gets the image of this Zios.  # noqa: E501


        :return: The image of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Zios.


        :param image: The image of this Zios.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def drives(self):
        """Gets the drives of this Zios.  # noqa: E501


        :return: The drives of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this Zios.


        :param drives: The drives of this Zios.  # noqa: E501
        :type: int
        """

        self._drives = drives

    @property
    def cache(self):
        """Gets the cache of this Zios.  # noqa: E501


        :return: The cache of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this Zios.


        :param cache: The cache of this Zios.  # noqa: E501
        :type: int
        """

        self._cache = cache

    @property
    def virtual_controllers(self):
        """Gets the virtual_controllers of this Zios.  # noqa: E501


        :return: The virtual_controllers of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._virtual_controllers

    @virtual_controllers.setter
    def virtual_controllers(self, virtual_controllers):
        """Sets the virtual_controllers of this Zios.


        :param virtual_controllers: The virtual_controllers of this Zios.  # noqa: E501
        :type: int
        """

        self._virtual_controllers = virtual_controllers

    @property
    def ip_address(self):
        """Gets the ip_address of this Zios.  # noqa: E501


        :return: The ip_address of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Zios.


        :param ip_address: The ip_address of this Zios.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this Zios.  # noqa: E501


        :return: The ipv6_address of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this Zios.


        :param ipv6_address: The ipv6_address of this Zios.  # noqa: E501
        :type: str
        """

        self._ipv6_address = ipv6_address

    @property
    def public_ip(self):
        """Gets the public_ip of this Zios.  # noqa: E501


        :return: The public_ip of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this Zios.


        :param public_ip: The public_ip of this Zios.  # noqa: E501
        :type: str
        """

        self._public_ip = public_ip

    @property
    def management_url(self):
        """Gets the management_url of this Zios.  # noqa: E501


        :return: The management_url of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._management_url

    @management_url.setter
    def management_url(self, management_url):
        """Sets the management_url of this Zios.


        :param management_url: The management_url of this Zios.  # noqa: E501
        :type: str
        """

        self._management_url = management_url

    @property
    def storage_policies_count(self):
        """Gets the storage_policies_count of this Zios.  # noqa: E501


        :return: The storage_policies_count of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._storage_policies_count

    @storage_policies_count.setter
    def storage_policies_count(self, storage_policies_count):
        """Sets the storage_policies_count of this Zios.


        :param storage_policies_count: The storage_policies_count of this Zios.  # noqa: E501
        :type: int
        """

        self._storage_policies_count = storage_policies_count

    @property
    def metadata_policies_count(self):
        """Gets the metadata_policies_count of this Zios.  # noqa: E501


        :return: The metadata_policies_count of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._metadata_policies_count

    @metadata_policies_count.setter
    def metadata_policies_count(self, metadata_policies_count):
        """Sets the metadata_policies_count of this Zios.


        :param metadata_policies_count: The metadata_policies_count of this Zios.  # noqa: E501
        :type: int
        """

        self._metadata_policies_count = metadata_policies_count

    @property
    def accounts_count(self):
        """Gets the accounts_count of this Zios.  # noqa: E501


        :return: The accounts_count of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._accounts_count

    @accounts_count.setter
    def accounts_count(self, accounts_count):
        """Sets the accounts_count of this Zios.


        :param accounts_count: The accounts_count of this Zios.  # noqa: E501
        :type: int
        """

        self._accounts_count = accounts_count

    @property
    def users_count(self):
        """Gets the users_count of this Zios.  # noqa: E501


        :return: The users_count of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._users_count

    @users_count.setter
    def users_count(self, users_count):
        """Sets the users_count of this Zios.


        :param users_count: The users_count of this Zios.  # noqa: E501
        :type: int
        """

        self._users_count = users_count

    @property
    def containers_count(self):
        """Gets the containers_count of this Zios.  # noqa: E501


        :return: The containers_count of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._containers_count

    @containers_count.setter
    def containers_count(self, containers_count):
        """Sets the containers_count of this Zios.


        :param containers_count: The containers_count of this Zios.  # noqa: E501
        :type: int
        """

        self._containers_count = containers_count

    @property
    def redundancy_status(self):
        """Gets the redundancy_status of this Zios.  # noqa: E501


        :return: The redundancy_status of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._redundancy_status

    @redundancy_status.setter
    def redundancy_status(self, redundancy_status):
        """Sets the redundancy_status of this Zios.


        :param redundancy_status: The redundancy_status of this Zios.  # noqa: E501
        :type: str
        """

        self._redundancy_status = redundancy_status

    @property
    def objects_count(self):
        """Gets the objects_count of this Zios.  # noqa: E501


        :return: The objects_count of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._objects_count

    @objects_count.setter
    def objects_count(self, objects_count):
        """Sets the objects_count of this Zios.


        :param objects_count: The objects_count of this Zios.  # noqa: E501
        :type: int
        """

        self._objects_count = objects_count

    @property
    def active_vc_index(self):
        """Gets the active_vc_index of this Zios.  # noqa: E501


        :return: The active_vc_index of this Zios.  # noqa: E501
        :rtype: int
        """
        return self._active_vc_index

    @active_vc_index.setter
    def active_vc_index(self, active_vc_index):
        """Sets the active_vc_index of this Zios.


        :param active_vc_index: The active_vc_index of this Zios.  # noqa: E501
        :type: int
        """

        self._active_vc_index = active_vc_index

    @property
    def network_configuration(self):
        """Gets the network_configuration of this Zios.  # noqa: E501


        :return: The network_configuration of this Zios.  # noqa: E501
        :rtype: ZiosNetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this Zios.


        :param network_configuration: The network_configuration of this Zios.  # noqa: E501
        :type: ZiosNetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def created_at(self):
        """Gets the created_at of this Zios.  # noqa: E501


        :return: The created_at of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Zios.


        :param created_at: The created_at of this Zios.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Zios.  # noqa: E501


        :return: The updated_at of this Zios.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Zios.


        :param updated_at: The updated_at of this Zios.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Zios, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Zios):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Zios):
            return True

        return self.to_dict() != other.to_dict()
