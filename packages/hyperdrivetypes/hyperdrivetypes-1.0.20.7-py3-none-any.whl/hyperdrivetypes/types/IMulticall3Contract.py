"""A web3.py Contract class for the IMulticall3 contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import dataclass_to_tuple, rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from . import IMulticall3Types as IMulticall3

structs = {
    "IMulticall3.Call": IMulticall3.Call,
    "IMulticall3.Call3": IMulticall3.Call3,
    "IMulticall3.Result": IMulticall3.Result,
    "IMulticall3.Call3Value": IMulticall3.Call3Value,
}


class IMulticall3AggregateContractFunction(ContractFunction):
    """ContractFunction for the aggregate method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Aggregate."""

        blockNumber: int
        returnData: list[bytes]

    def __call__(self, calls: list[IMulticall3.Call]) -> IMulticall3AggregateContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(calls))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, list[bytes]]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3Aggregate3ContractFunction(ContractFunction):
    """ContractFunction for the aggregate3 method."""

    def __call__(self, calls: list[IMulticall3.Call3]) -> IMulticall3Aggregate3ContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(calls))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[IMulticall3.Result]:
        """returns list[IMulticall3.Result]."""
        # Define the expected return types from the smart contract call

        return_types = list[IMulticall3.Result]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[IMulticall3.Result],
            rename_returned_types(structs, return_types, raw_values),
        )


class IMulticall3Aggregate3ValueContractFunction(ContractFunction):
    """ContractFunction for the aggregate3Value method."""

    def __call__(self, calls: list[IMulticall3.Call3Value]) -> IMulticall3Aggregate3ValueContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(calls))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[IMulticall3.Result]:
        """returns list[IMulticall3.Result]."""
        # Define the expected return types from the smart contract call

        return_types = list[IMulticall3.Result]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[IMulticall3.Result],
            rename_returned_types(structs, return_types, raw_values),
        )


class IMulticall3BlockAndAggregateContractFunction(ContractFunction):
    """ContractFunction for the blockAndAggregate method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for BlockAndAggregate."""

        blockNumber: int
        blockHash: bytes
        returnData: list[IMulticall3.Result]

    def __call__(self, calls: list[IMulticall3.Call]) -> IMulticall3BlockAndAggregateContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(calls))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, bytes, list[IMulticall3.Result]]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3GetBasefeeContractFunction(ContractFunction):
    """ContractFunction for the getBasefee method."""

    def __call__(self) -> IMulticall3GetBasefeeContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3GetBlockHashContractFunction(ContractFunction):
    """ContractFunction for the getBlockHash method."""

    def __call__(self, blockNumber: int) -> IMulticall3GetBlockHashContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(blockNumber))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3GetBlockNumberContractFunction(ContractFunction):
    """ContractFunction for the getBlockNumber method."""

    def __call__(self) -> IMulticall3GetBlockNumberContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3GetChainIdContractFunction(ContractFunction):
    """ContractFunction for the getChainId method."""

    def __call__(self) -> IMulticall3GetChainIdContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3GetCurrentBlockCoinbaseContractFunction(ContractFunction):
    """ContractFunction for the getCurrentBlockCoinbase method."""

    def __call__(self) -> IMulticall3GetCurrentBlockCoinbaseContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3GetCurrentBlockDifficultyContractFunction(ContractFunction):
    """ContractFunction for the getCurrentBlockDifficulty method."""

    def __call__(self) -> IMulticall3GetCurrentBlockDifficultyContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3GetCurrentBlockGasLimitContractFunction(ContractFunction):
    """ContractFunction for the getCurrentBlockGasLimit method."""

    def __call__(self) -> IMulticall3GetCurrentBlockGasLimitContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3GetCurrentBlockTimestampContractFunction(ContractFunction):
    """ContractFunction for the getCurrentBlockTimestamp method."""

    def __call__(self) -> IMulticall3GetCurrentBlockTimestampContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3GetEthBalanceContractFunction(ContractFunction):
    """ContractFunction for the getEthBalance method."""

    def __call__(self, addr: str) -> IMulticall3GetEthBalanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(addr))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3GetLastBlockHashContractFunction(ContractFunction):
    """ContractFunction for the getLastBlockHash method."""

    def __call__(self) -> IMulticall3GetLastBlockHashContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3TryAggregateContractFunction(ContractFunction):
    """ContractFunction for the tryAggregate method."""

    def __call__(self, requireSuccess: bool, calls: list[IMulticall3.Call]) -> IMulticall3TryAggregateContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(requireSuccess), dataclass_to_tuple(calls)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[IMulticall3.Result]:
        """returns list[IMulticall3.Result]."""
        # Define the expected return types from the smart contract call

        return_types = list[IMulticall3.Result]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            list[IMulticall3.Result],
            rename_returned_types(structs, return_types, raw_values),
        )


class IMulticall3TryBlockAndAggregateContractFunction(ContractFunction):
    """ContractFunction for the tryBlockAndAggregate method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for TryBlockAndAggregate."""

        blockNumber: int
        blockHash: bytes
        returnData: list[IMulticall3.Result]

    def __call__(self, requireSuccess: bool, calls: list[IMulticall3.Call]) -> IMulticall3TryBlockAndAggregateContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(requireSuccess), dataclass_to_tuple(calls)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, bytes, list[IMulticall3.Result]]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IMulticall3ContractFunctions(ContractFunctions):
    """ContractFunctions for the IMulticall3 contract."""

    aggregate: IMulticall3AggregateContractFunction

    aggregate3: IMulticall3Aggregate3ContractFunction

    aggregate3Value: IMulticall3Aggregate3ValueContractFunction

    blockAndAggregate: IMulticall3BlockAndAggregateContractFunction

    getBasefee: IMulticall3GetBasefeeContractFunction

    getBlockHash: IMulticall3GetBlockHashContractFunction

    getBlockNumber: IMulticall3GetBlockNumberContractFunction

    getChainId: IMulticall3GetChainIdContractFunction

    getCurrentBlockCoinbase: IMulticall3GetCurrentBlockCoinbaseContractFunction

    getCurrentBlockDifficulty: (
        IMulticall3GetCurrentBlockDifficultyContractFunction
    )

    getCurrentBlockGasLimit: IMulticall3GetCurrentBlockGasLimitContractFunction

    getCurrentBlockTimestamp: (
        IMulticall3GetCurrentBlockTimestampContractFunction
    )

    getEthBalance: IMulticall3GetEthBalanceContractFunction

    getLastBlockHash: IMulticall3GetLastBlockHashContractFunction

    tryAggregate: IMulticall3TryAggregateContractFunction

    tryBlockAndAggregate: IMulticall3TryBlockAndAggregateContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.aggregate = IMulticall3AggregateContractFunction.factory(
            "aggregate",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="aggregate",
        )
        self.aggregate3 = IMulticall3Aggregate3ContractFunction.factory(
            "aggregate3",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="aggregate3",
        )
        self.aggregate3Value = (
            IMulticall3Aggregate3ValueContractFunction.factory(
                "aggregate3Value",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="aggregate3Value",
            )
        )
        self.blockAndAggregate = (
            IMulticall3BlockAndAggregateContractFunction.factory(
                "blockAndAggregate",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="blockAndAggregate",
            )
        )
        self.getBasefee = IMulticall3GetBasefeeContractFunction.factory(
            "getBasefee",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getBasefee",
        )
        self.getBlockHash = IMulticall3GetBlockHashContractFunction.factory(
            "getBlockHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getBlockHash",
        )
        self.getBlockNumber = IMulticall3GetBlockNumberContractFunction.factory(
            "getBlockNumber",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getBlockNumber",
        )
        self.getChainId = IMulticall3GetChainIdContractFunction.factory(
            "getChainId",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getChainId",
        )
        self.getCurrentBlockCoinbase = (
            IMulticall3GetCurrentBlockCoinbaseContractFunction.factory(
                "getCurrentBlockCoinbase",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getCurrentBlockCoinbase",
            )
        )
        self.getCurrentBlockDifficulty = (
            IMulticall3GetCurrentBlockDifficultyContractFunction.factory(
                "getCurrentBlockDifficulty",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getCurrentBlockDifficulty",
            )
        )
        self.getCurrentBlockGasLimit = (
            IMulticall3GetCurrentBlockGasLimitContractFunction.factory(
                "getCurrentBlockGasLimit",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getCurrentBlockGasLimit",
            )
        )
        self.getCurrentBlockTimestamp = (
            IMulticall3GetCurrentBlockTimestampContractFunction.factory(
                "getCurrentBlockTimestamp",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getCurrentBlockTimestamp",
            )
        )
        self.getEthBalance = IMulticall3GetEthBalanceContractFunction.factory(
            "getEthBalance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getEthBalance",
        )
        self.getLastBlockHash = (
            IMulticall3GetLastBlockHashContractFunction.factory(
                "getLastBlockHash",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getLastBlockHash",
            )
        )
        self.tryAggregate = IMulticall3TryAggregateContractFunction.factory(
            "tryAggregate",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="tryAggregate",
        )
        self.tryBlockAndAggregate = (
            IMulticall3TryBlockAndAggregateContractFunction.factory(
                "tryBlockAndAggregate",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="tryBlockAndAggregate",
            )
        )


imulticall3_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "aggregate",
            "inputs": [
                {
                    "name": "calls",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Call[]",
                    "components": [
                        {
                            "name": "target",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "callData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                }
            ],
            "outputs": [
                {
                    "name": "blockNumber",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "returnData",
                    "type": "bytes[]",
                    "internalType": "bytes[]",
                },
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "aggregate3",
            "inputs": [
                {
                    "name": "calls",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Call3[]",
                    "components": [
                        {
                            "name": "target",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "allowFailure",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "callData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                }
            ],
            "outputs": [
                {
                    "name": "returnData",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Result[]",
                    "components": [
                        {
                            "name": "success",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "returnData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "aggregate3Value",
            "inputs": [
                {
                    "name": "calls",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Call3Value[]",
                    "components": [
                        {
                            "name": "target",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "allowFailure",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "value",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "callData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                }
            ],
            "outputs": [
                {
                    "name": "returnData",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Result[]",
                    "components": [
                        {
                            "name": "success",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "returnData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "blockAndAggregate",
            "inputs": [
                {
                    "name": "calls",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Call[]",
                    "components": [
                        {
                            "name": "target",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "callData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                }
            ],
            "outputs": [
                {
                    "name": "blockNumber",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "blockHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "returnData",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Result[]",
                    "components": [
                        {
                            "name": "success",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "returnData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "getBasefee",
            "inputs": [],
            "outputs": [
                {
                    "name": "basefee",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getBlockHash",
            "inputs": [
                {
                    "name": "blockNumber",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {
                    "name": "blockHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getBlockNumber",
            "inputs": [],
            "outputs": [
                {
                    "name": "blockNumber",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getChainId",
            "inputs": [],
            "outputs": [
                {
                    "name": "chainid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getCurrentBlockCoinbase",
            "inputs": [],
            "outputs": [
                {
                    "name": "coinbase",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getCurrentBlockDifficulty",
            "inputs": [],
            "outputs": [
                {
                    "name": "difficulty",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getCurrentBlockGasLimit",
            "inputs": [],
            "outputs": [
                {
                    "name": "gaslimit",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getCurrentBlockTimestamp",
            "inputs": [],
            "outputs": [
                {
                    "name": "timestamp",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getEthBalance",
            "inputs": [
                {"name": "addr", "type": "address", "internalType": "address"}
            ],
            "outputs": [
                {
                    "name": "balance",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getLastBlockHash",
            "inputs": [],
            "outputs": [
                {
                    "name": "blockHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "tryAggregate",
            "inputs": [
                {
                    "name": "requireSuccess",
                    "type": "bool",
                    "internalType": "bool",
                },
                {
                    "name": "calls",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Call[]",
                    "components": [
                        {
                            "name": "target",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "callData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "returnData",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Result[]",
                    "components": [
                        {
                            "name": "success",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "returnData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "tryBlockAndAggregate",
            "inputs": [
                {
                    "name": "requireSuccess",
                    "type": "bool",
                    "internalType": "bool",
                },
                {
                    "name": "calls",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Call[]",
                    "components": [
                        {
                            "name": "target",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "callData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "blockNumber",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "blockHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "returnData",
                    "type": "tuple[]",
                    "internalType": "struct IMulticall3.Result[]",
                    "components": [
                        {
                            "name": "success",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "returnData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "stateMutability": "payable",
        },
    ],
)


class IMulticall3Contract(Contract):
    """A web3.py Contract class for the IMulticall3 contract."""

    abi: ABI = imulticall3_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IMulticall3ContractFunctions(imulticall3_abi, self.w3, address)  # type: ignore

    functions: IMulticall3ContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IMulticall3ContractFunctions(
            imulticall3_abi, w3, None
        )

        return contract
