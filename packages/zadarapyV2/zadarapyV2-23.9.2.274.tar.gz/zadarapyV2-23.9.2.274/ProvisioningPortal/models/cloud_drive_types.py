# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class CloudDriveTypes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hourly_price_usd': 'str',
        'capacity_gb': 'int',
        'name': 'str',
        'key': 'str',
        'id': 'str'
    }

    attribute_map = {
        'hourly_price_usd': 'hourly_price_usd',
        'capacity_gb': 'capacity_gb',
        'name': 'name',
        'key': 'key',
        'id': 'id'
    }

    def __init__(self, hourly_price_usd=None, capacity_gb=None, name=None, key=None, id=None, _configuration=None):  # noqa: E501
        """CloudDriveTypes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._hourly_price_usd = None
        self._capacity_gb = None
        self._name = None
        self._key = None
        self._id = None
        self.discriminator = None

        if hourly_price_usd is not None:
            self.hourly_price_usd = hourly_price_usd
        if capacity_gb is not None:
            self.capacity_gb = capacity_gb
        if name is not None:
            self.name = name
        if key is not None:
            self.key = key
        if id is not None:
            self.id = id

    @property
    def hourly_price_usd(self):
        """Gets the hourly_price_usd of this CloudDriveTypes.  # noqa: E501


        :return: The hourly_price_usd of this CloudDriveTypes.  # noqa: E501
        :rtype: str
        """
        return self._hourly_price_usd

    @hourly_price_usd.setter
    def hourly_price_usd(self, hourly_price_usd):
        """Sets the hourly_price_usd of this CloudDriveTypes.


        :param hourly_price_usd: The hourly_price_usd of this CloudDriveTypes.  # noqa: E501
        :type: str
        """

        self._hourly_price_usd = hourly_price_usd

    @property
    def capacity_gb(self):
        """Gets the capacity_gb of this CloudDriveTypes.  # noqa: E501


        :return: The capacity_gb of this CloudDriveTypes.  # noqa: E501
        :rtype: int
        """
        return self._capacity_gb

    @capacity_gb.setter
    def capacity_gb(self, capacity_gb):
        """Sets the capacity_gb of this CloudDriveTypes.


        :param capacity_gb: The capacity_gb of this CloudDriveTypes.  # noqa: E501
        :type: int
        """

        self._capacity_gb = capacity_gb

    @property
    def name(self):
        """Gets the name of this CloudDriveTypes.  # noqa: E501


        :return: The name of this CloudDriveTypes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudDriveTypes.


        :param name: The name of this CloudDriveTypes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def key(self):
        """Gets the key of this CloudDriveTypes.  # noqa: E501


        :return: The key of this CloudDriveTypes.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CloudDriveTypes.


        :param key: The key of this CloudDriveTypes.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def id(self):
        """Gets the id of this CloudDriveTypes.  # noqa: E501


        :return: The id of this CloudDriveTypes.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudDriveTypes.


        :param id: The id of this CloudDriveTypes.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudDriveTypes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudDriveTypes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudDriveTypes):
            return True

        return self.to_dict() != other.to_dict()
