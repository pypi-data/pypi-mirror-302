# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse20083MessageActions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'update_time': 'str',
        'name': 'str',
        'param': 'InlineResponse20083MessageParam',
        'state': 'str',
        'steps': 'list[InlineResponse20083MessageSteps]'
    }

    attribute_map = {
        'comment': 'comment',
        'update_time': 'update-time',
        'name': 'name',
        'param': 'param',
        'state': 'state',
        'steps': 'steps'
    }

    def __init__(self, comment=None, update_time=None, name=None, param=None, state=None, steps=None, _configuration=None):  # noqa: E501
        """InlineResponse20083MessageActions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._comment = None
        self._update_time = None
        self._name = None
        self._param = None
        self._state = None
        self._steps = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if update_time is not None:
            self.update_time = update_time
        if name is not None:
            self.name = name
        if param is not None:
            self.param = param
        if state is not None:
            self.state = state
        if steps is not None:
            self.steps = steps

    @property
    def comment(self):
        """Gets the comment of this InlineResponse20083MessageActions.  # noqa: E501


        :return: The comment of this InlineResponse20083MessageActions.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InlineResponse20083MessageActions.


        :param comment: The comment of this InlineResponse20083MessageActions.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def update_time(self):
        """Gets the update_time of this InlineResponse20083MessageActions.  # noqa: E501


        :return: The update_time of this InlineResponse20083MessageActions.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InlineResponse20083MessageActions.


        :param update_time: The update_time of this InlineResponse20083MessageActions.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    @property
    def name(self):
        """Gets the name of this InlineResponse20083MessageActions.  # noqa: E501


        :return: The name of this InlineResponse20083MessageActions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20083MessageActions.


        :param name: The name of this InlineResponse20083MessageActions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def param(self):
        """Gets the param of this InlineResponse20083MessageActions.  # noqa: E501


        :return: The param of this InlineResponse20083MessageActions.  # noqa: E501
        :rtype: InlineResponse20083MessageParam
        """
        return self._param

    @param.setter
    def param(self, param):
        """Sets the param of this InlineResponse20083MessageActions.


        :param param: The param of this InlineResponse20083MessageActions.  # noqa: E501
        :type: InlineResponse20083MessageParam
        """

        self._param = param

    @property
    def state(self):
        """Gets the state of this InlineResponse20083MessageActions.  # noqa: E501


        :return: The state of this InlineResponse20083MessageActions.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse20083MessageActions.


        :param state: The state of this InlineResponse20083MessageActions.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def steps(self):
        """Gets the steps of this InlineResponse20083MessageActions.  # noqa: E501


        :return: The steps of this InlineResponse20083MessageActions.  # noqa: E501
        :rtype: list[InlineResponse20083MessageSteps]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this InlineResponse20083MessageActions.


        :param steps: The steps of this InlineResponse20083MessageActions.  # noqa: E501
        :type: list[InlineResponse20083MessageSteps]
        """

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20083MessageActions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20083MessageActions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20083MessageActions):
            return True

        return self.to_dict() != other.to_dict()
