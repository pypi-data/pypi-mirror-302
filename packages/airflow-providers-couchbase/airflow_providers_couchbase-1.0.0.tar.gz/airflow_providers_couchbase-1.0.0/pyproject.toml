[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "airflow-providers-couchbase"
dynamic = ["version"]
authors = [
  { name = "Shyam Venkat", email = "shyam.venkat@couchbase.com" },
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

description = "A package to simplify connecting to the couchbase nosql database from Apache Airflow"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.7"
dependencies = [
  "apache-airflow >= 2.2",
  "couchbase==4.*",
]

[project.urls]
Documentation = "https://github.com/Couchbase-Ecosystem/airflow-providers-couchbase#readme"
Issues = "https://github.com/Couchbase-Ecosystem/airflow-providers-couchbase/issues"
Source = "https://github.com/Couchbase-Ecosystem/airflow-providers-couchbase"

[tool.hatch.version]
path = "airflow_providers_couchbase/__about__.py"


[tool.hatch]
packages = [
    { include = "airflow_providers_couchbase" },
]

[tool.hatch.build.targets.wheel]
packages = ["airflow_providers_couchbase"]


# Define environments for development and testing
[tool.hatch.envs.default]
extra-dependencies = [
    "pytest",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage html"]
cov = ["test-cov", "cov-report"]

[project.entry-points."apache_airflow_provider"]
provider_info = "airflow_providers_couchbase:get_provider_info"


## linting and test

[tool.coverage.run]
source = ["airflow_providers_couchbase", "tests"]
branch = true
parallel = false

[tool.coverage.paths]
airflow_providers_couchbase = ["airflow_providers_couchbase"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

# Add linting environment
[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive --explicit-package-bases {args:airflow_providers_couchbase tests examples}"
style = [
  "ruff check {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff check {args:.} --fix",
  "style",
]
all = [
  "style",
  "typing",
]


[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
target-version = ["py37"]
line-length = 130
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 130
lint.select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  #A001 Variable `filter` is shadowing a Python builtin
  "A001", 
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  
  #Exception must not use a string literal, assign to variable first
  "EM101",

  #Too many arguments for `logging` format string
  "PLE1205",

  

  # Use `X | Y` for type annotations
  "UP007"
]
lint.unfixable = [
  # Don't touch unused imports
  "F401",
]

lint.exclude = ["tests/**/*"]

[tool.mypy]
ignore_missing_imports = true

[tool.ruff.lint.isort]
known-first-party = ["airflow"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]






[tool.pytest.ini_options]
markers = [
  "unit: unit tests",
  "integration: integration tests",
  "embedders: embedders tests",
  "generators: generators tests",
]