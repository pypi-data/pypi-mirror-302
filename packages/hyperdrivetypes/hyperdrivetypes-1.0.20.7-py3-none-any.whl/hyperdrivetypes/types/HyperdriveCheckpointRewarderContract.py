"""A web3.py Contract class for the HyperdriveCheckpointRewarder contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ABIFunction, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    combomethod_typed,
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from .HyperdriveCheckpointRewarderTypes import (
    AdminUpdatedEvent,
    CheckpointRewardClaimedEvent,
    SubrewarderUpdatedEvent,
)

structs = {}


class HyperdriveCheckpointRewarderAdminContractFunction(ContractFunction):
    """ContractFunction for the admin method."""

    def __call__(self) -> HyperdriveCheckpointRewarderAdminContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointRewarderClaimCheckpointRewardContractFunction(
    ContractFunction
):
    """ContractFunction for the claimCheckpointReward method."""

    def __call__(self, claimant: str, checkpointTime: int, isTrader: bool) -> HyperdriveCheckpointRewarderClaimCheckpointRewardContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(claimant),
            dataclass_to_tuple(checkpointTime),
            dataclass_to_tuple(isTrader),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveCheckpointRewarderKindContractFunction(ContractFunction):
    """ContractFunction for the kind method."""

    def __call__(self) -> HyperdriveCheckpointRewarderKindContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointRewarderNameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self) -> HyperdriveCheckpointRewarderNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointRewarderSubrewarderContractFunction(ContractFunction):
    """ContractFunction for the subrewarder method."""

    def __call__(self) -> HyperdriveCheckpointRewarderSubrewarderContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointRewarderUpdateAdminContractFunction(ContractFunction):
    """ContractFunction for the updateAdmin method."""

    def __call__(self, admin: str) -> HyperdriveCheckpointRewarderUpdateAdminContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(admin))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveCheckpointRewarderUpdateSubrewarderContractFunction(
    ContractFunction
):
    """ContractFunction for the updateSubrewarder method."""

    def __call__(self, subrewarder: str) -> HyperdriveCheckpointRewarderUpdateSubrewarderContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(subrewarder))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveCheckpointRewarderVersionContractFunction(ContractFunction):
    """ContractFunction for the version method."""

    def __call__(self) -> HyperdriveCheckpointRewarderVersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveCheckpointRewarderContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveCheckpointRewarder contract."""

    admin: HyperdriveCheckpointRewarderAdminContractFunction

    claimCheckpointReward: (
        HyperdriveCheckpointRewarderClaimCheckpointRewardContractFunction
    )

    kind: HyperdriveCheckpointRewarderKindContractFunction

    name: HyperdriveCheckpointRewarderNameContractFunction

    subrewarder: HyperdriveCheckpointRewarderSubrewarderContractFunction

    updateAdmin: HyperdriveCheckpointRewarderUpdateAdminContractFunction

    updateSubrewarder: (
        HyperdriveCheckpointRewarderUpdateSubrewarderContractFunction
    )

    version: HyperdriveCheckpointRewarderVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.admin = HyperdriveCheckpointRewarderAdminContractFunction.factory(
            "admin",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="admin",
        )
        self.claimCheckpointReward = HyperdriveCheckpointRewarderClaimCheckpointRewardContractFunction.factory(
            "claimCheckpointReward",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="claimCheckpointReward",
        )
        self.kind = HyperdriveCheckpointRewarderKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="kind",
        )
        self.name = HyperdriveCheckpointRewarderNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="name",
        )
        self.subrewarder = (
            HyperdriveCheckpointRewarderSubrewarderContractFunction.factory(
                "subrewarder",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="subrewarder",
            )
        )
        self.updateAdmin = (
            HyperdriveCheckpointRewarderUpdateAdminContractFunction.factory(
                "updateAdmin",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateAdmin",
            )
        )
        self.updateSubrewarder = HyperdriveCheckpointRewarderUpdateSubrewarderContractFunction.factory(
            "updateSubrewarder",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateSubrewarder",
        )
        self.version = (
            HyperdriveCheckpointRewarderVersionContractFunction.factory(
                "version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="version",
            )
        )


class HyperdriveCheckpointRewarderAdminUpdatedContractEvent(ContractEvent):
    """ContractEvent for AdminUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AdminUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AdminUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AdminUpdatedEvent.AdminUpdatedEventArgs(
                    admin=abi_event.args["admin"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AdminUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AdminUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AdminUpdatedEvent.AdminUpdatedEventArgs(
                    admin=abi_event.args["admin"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveCheckpointRewarderCheckpointRewardClaimedContractEvent(
    ContractEvent
):
    """ContractEvent for CheckpointRewardClaimed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CheckpointRewardClaimedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CheckpointRewardClaimedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CheckpointRewardClaimedEvent.CheckpointRewardClaimedEventArgs(
                    instance=abi_event.args["instance"],
                    claimant=abi_event.args["claimant"],
                    isTrader=abi_event.args["isTrader"],
                    checkpointTime=abi_event.args["checkpointTime"],
                    rewardToken=abi_event.args["rewardToken"],
                    rewardAmount=abi_event.args["rewardAmount"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CheckpointRewardClaimedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CheckpointRewardClaimedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CheckpointRewardClaimedEvent.CheckpointRewardClaimedEventArgs(
                    instance=abi_event.args["instance"],
                    claimant=abi_event.args["claimant"],
                    isTrader=abi_event.args["isTrader"],
                    checkpointTime=abi_event.args["checkpointTime"],
                    rewardToken=abi_event.args["rewardToken"],
                    rewardAmount=abi_event.args["rewardAmount"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveCheckpointRewarderSubrewarderUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for SubrewarderUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SubrewarderUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SubrewarderUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SubrewarderUpdatedEvent.SubrewarderUpdatedEventArgs(
                    subrewarder=abi_event.args["subrewarder"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SubrewarderUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SubrewarderUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SubrewarderUpdatedEvent.SubrewarderUpdatedEventArgs(
                    subrewarder=abi_event.args["subrewarder"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveCheckpointRewarderContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveCheckpointRewarder contract."""

    AdminUpdated: Type[HyperdriveCheckpointRewarderAdminUpdatedContractEvent]

    CheckpointRewardClaimed: Type[
        HyperdriveCheckpointRewarderCheckpointRewardClaimedContractEvent
    ]

    SubrewarderUpdated: Type[
        HyperdriveCheckpointRewarderSubrewarderUpdatedContractEvent
    ]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AdminUpdated = cast(
            Type[HyperdriveCheckpointRewarderAdminUpdatedContractEvent],
            HyperdriveCheckpointRewarderAdminUpdatedContractEvent.factory(
                "AdminUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AdminUpdated",
            ),
        )
        self.CheckpointRewardClaimed = cast(
            Type[
                HyperdriveCheckpointRewarderCheckpointRewardClaimedContractEvent
            ],
            HyperdriveCheckpointRewarderCheckpointRewardClaimedContractEvent.factory(
                "CheckpointRewardClaimed",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CheckpointRewardClaimed",
            ),
        )
        self.SubrewarderUpdated = cast(
            Type[HyperdriveCheckpointRewarderSubrewarderUpdatedContractEvent],
            HyperdriveCheckpointRewarderSubrewarderUpdatedContractEvent.factory(
                "SubrewarderUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="SubrewarderUpdated",
            ),
        )


class HyperdriveCheckpointRewarderUnauthorizedContractError:
    """ContractError for Unauthorized."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveCheckpointRewarderUnauthorizedContractError",
    ) -> None:
        self.selector = "0x82b42900"
        self.signature = "Unauthorized()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivecheckpointrewarder_abi
                if item.get("name") == "Unauthorized"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveCheckpointRewarderContractErrors:
    """ContractErrors for the HyperdriveCheckpointRewarder contract."""

    Unauthorized: HyperdriveCheckpointRewarderUnauthorizedContractError

    def __init__(
        self,
    ) -> None:
        self.Unauthorized = (
            HyperdriveCheckpointRewarderUnauthorizedContractError()
        )

        self._all = [
            self.Unauthorized,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"HyperdriveCheckpointRewarder does not have a selector matching {selector}"
        )


hyperdrivecheckpointrewarder_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {
                    "name": "_subrewarder",
                    "type": "address",
                    "internalType": "contract IHyperdriveCheckpointSubrewarder",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "admin",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "claimCheckpointReward",
            "inputs": [
                {
                    "name": "_claimant",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_checkpointTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_isTrader", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "subrewarder",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IHyperdriveCheckpointSubrewarder",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "updateAdmin",
            "inputs": [
                {"name": "_admin", "type": "address", "internalType": "address"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateSubrewarder",
            "inputs": [
                {
                    "name": "_subrewarder",
                    "type": "address",
                    "internalType": "contract IHyperdriveCheckpointSubrewarder",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "event",
            "name": "AdminUpdated",
            "inputs": [
                {
                    "name": "admin",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CheckpointRewardClaimed",
            "inputs": [
                {
                    "name": "instance",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "claimant",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "isTrader",
                    "type": "bool",
                    "indexed": True,
                    "internalType": "bool",
                },
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "rewardToken",
                    "type": "address",
                    "indexed": False,
                    "internalType": "contract IERC20",
                },
                {
                    "name": "rewardAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "SubrewarderUpdated",
            "inputs": [
                {
                    "name": "subrewarder",
                    "type": "address",
                    "indexed": True,
                    "internalType": "contract IHyperdriveCheckpointSubrewarder",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "Unauthorized", "inputs": []},
    ],
)


class HyperdriveCheckpointRewarderContract(Contract):
    """A web3.py Contract class for the HyperdriveCheckpointRewarder contract."""

    abi: ABI = hyperdrivecheckpointrewarder_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561001057600080fd5b5060405161082b38038061082b83398101604081905261002f9161009e565b60018054336001600160a01b031991821617909155600280549091166001600160a01b03831617905560006100648382610203565b5050506102c2565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b038116811461009957600080fd5b919050565b600080604083850312156100b157600080fd5b82516001600160401b03808211156100c857600080fd5b818501915085601f8301126100dc57600080fd5b8151818111156100ee576100ee61006c565b604051601f8201601f19908116603f011681019083821181831017156101165761011661006c565b8160405282815260209350888484870101111561013257600080fd5b600091505b828210156101545784820184015181830185015290830190610137565b600084848301015280965050505061016d818601610082565b925050509250929050565b600181811c9082168061018c57607f821691505b6020821081036101ac57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101fe576000816000526020600020601f850160051c810160208610156101db5750805b601f850160051c820191505b818110156101fa578281556001016101e7565b5050505b505050565b81516001600160401b0381111561021c5761021c61006c565b6102308161022a8454610178565b846101b2565b602080601f831160018114610265576000841561024d5750858301515b600019600386901b1c1916600185901b1785556101fa565b600085815260208120601f198616915b8281101561029457888601518255948401946001909101908401610275565b50858210156102b25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61055a806102d16000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806369114d4e1161005b57806369114d4e146101385780639b06ae491461014d578063e2f273bd14610160578063f851a4401461017357600080fd5b806304baa00b1461008d57806306fdde03146100df5780633d7f7b24146100e757806354fd4d5014610112575b600080fd5b6100c96040518060400160405280601c81526020017f48797065726472697665436865636b706f696e7452657761726465720000000081525081565b6040516100d691906103ea565b60405180910390f35b6100c9610186565b6002546100fa906001600160a01b031681565b6040516001600160a01b0390911681526020016100d6565b6100c960405180604001604052806007815260200166076312e302e32360cc1b81525081565b61014b610146366004610451565b610214565b005b61014b61015b366004610498565b610302565b61014b61016e366004610498565b610376565b6001546100fa906001600160a01b031681565b60008054610193906104bc565b80601f01602080910402602001604051908101604052809291908181526020018280546101bf906104bc565b801561020c5780601f106101e15761010080835404028352916020019161020c565b820191906000526020600020905b8154815290600101906020018083116101ef57829003601f168201915b505050505081565b60025460405163e9f4604160e01b81523360048201526001600160a01b038581166024830152604482018590528315156064830152600092839291169063e9f460419060840160408051808303816000875af1158015610278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029c91906104f6565b909250905080156102fb57604080518581526001600160a01b0384811660208301529181018390528415159187169033907f458cb4864d237cf3ef21835340aeec96759e685bd06793180e8cf7a7cd69cd5e9060600160405180910390a45b5050505050565b6001546001600160a01b0316331461032c576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f4a847489062ccada272e291a747bfecff5d74ded500da0a156faca0bd8394dc690600090a250565b6001546001600160a01b031633146103a0576040516282b42960e81b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d90600090a250565b60006020808352835180602085015260005b81811015610418578581018301518582016040015282016103fc565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461044e57600080fd5b50565b60008060006060848603121561046657600080fd5b833561047181610439565b9250602084013591506040840135801515811461048d57600080fd5b809150509250925092565b6000602082840312156104aa57600080fd5b81356104b581610439565b9392505050565b600181811c908216806104d057607f821691505b6020821081036104f057634e487b7160e01b600052602260045260246000fd5b50919050565b6000806040838503121561050957600080fd5b825161051481610439565b602093909301519294929350505056fea26469706673582212206e74ca3197fc2756673283de846c27671dace07ccaa07bddf0f7c86f3573aee664736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = HyperdriveCheckpointRewarderContractFunctions(hyperdrivecheckpointrewarder_abi, self.w3, address)  # type: ignore
        self.events = HyperdriveCheckpointRewarderContractEvents(hyperdrivecheckpointrewarder_abi, self.w3, address)  # type: ignore
        self.errors = HyperdriveCheckpointRewarderContractErrors()

    events: HyperdriveCheckpointRewarderContractEvents

    errors: HyperdriveCheckpointRewarderContractErrors = (
        HyperdriveCheckpointRewarderContractErrors()
    )

    functions: HyperdriveCheckpointRewarderContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        subrewarder: str

    @classmethod
    def constructor(cls, name: str, subrewarder: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(name), dataclass_to_tuple(subrewarder)
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args,
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveCheckpointRewarderContractFunctions(
            hyperdrivecheckpointrewarder_abi, w3, None
        )
        contract.errors = HyperdriveCheckpointRewarderContractErrors()

        return contract
