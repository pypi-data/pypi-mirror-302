"""A web3.py Contract class for the IMockHyperdrive contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import dataclass_to_tuple, rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}


class IMockHyperdrive__external_transferFromContractFunction(ContractFunction):
    """ContractFunction for the __external_transferFrom method."""

    def __call__(self, tokenID: int, _from: str, to: str, amount: int, caller: str) -> IMockHyperdrive__external_transferFromContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(tokenID),
            dataclass_to_tuple(_from),
            dataclass_to_tuple(to),
            dataclass_to_tuple(amount),
            dataclass_to_tuple(caller),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMockHyperdrive__setBalanceOfContractFunction(ContractFunction):
    """ContractFunction for the __setBalanceOf method."""

    def __call__(self, tokenId: int, who: str, amount: int) -> IMockHyperdrive__setBalanceOfContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(tokenId),
            dataclass_to_tuple(who),
            dataclass_to_tuple(amount),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMockHyperdriveAccrueContractFunction(ContractFunction):
    """ContractFunction for the accrue method."""

    def __call__(self, time: int, apr: int) -> IMockHyperdriveAccrueContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(time), dataclass_to_tuple(apr)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMockHyperdriveBurnContractFunction(ContractFunction):
    """ContractFunction for the burn method."""

    def __call__(self, tokenID: int, _from: str, amount: int) -> IMockHyperdriveBurnContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(tokenID),
            dataclass_to_tuple(_from),
            dataclass_to_tuple(amount),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMockHyperdriveCalculateTimeRemainingContractFunction(ContractFunction):
    """ContractFunction for the calculateTimeRemaining method."""

    def __call__(self, maturityTime: int) -> IMockHyperdriveCalculateTimeRemainingContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maturityTime))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMockHyperdriveCalculateTimeRemainingScaledContractFunction(
    ContractFunction
):
    """ContractFunction for the calculateTimeRemainingScaled method."""

    def __call__(self, maturityTime: int) -> IMockHyperdriveCalculateTimeRemainingScaledContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maturityTime))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMockHyperdriveGetGovernanceFeesAccruedContractFunction(ContractFunction):
    """ContractFunction for the getGovernanceFeesAccrued method."""

    def __call__(self) -> IMockHyperdriveGetGovernanceFeesAccruedContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMockHyperdriveLatestCheckpointContractFunction(ContractFunction):
    """ContractFunction for the latestCheckpoint method."""

    def __call__(self) -> IMockHyperdriveLatestCheckpointContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IMockHyperdriveMintContractFunction(ContractFunction):
    """ContractFunction for the mint method."""

    def __call__(self, tokenID: int, to: str, amount: int) -> IMockHyperdriveMintContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(tokenID),
            dataclass_to_tuple(to),
            dataclass_to_tuple(amount),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMockHyperdriveSetReservesContractFunction(ContractFunction):
    """ContractFunction for the setReserves method."""

    def __call__(self, shareReserves: int, bondReserves: int) -> IMockHyperdriveSetReservesContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(shareReserves), dataclass_to_tuple(bondReserves)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMockHyperdriveUpdateLiquidityContractFunction(ContractFunction):
    """ContractFunction for the updateLiquidity method."""

    def __call__(self, shareReservesDelta: int) -> IMockHyperdriveUpdateLiquidityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(shareReservesDelta))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IMockHyperdriveContractFunctions(ContractFunctions):
    """ContractFunctions for the IMockHyperdrive contract."""

    __external_transferFrom: (
        IMockHyperdrive__external_transferFromContractFunction
    )

    __setBalanceOf: IMockHyperdrive__setBalanceOfContractFunction

    accrue: IMockHyperdriveAccrueContractFunction

    burn: IMockHyperdriveBurnContractFunction

    calculateTimeRemaining: (
        IMockHyperdriveCalculateTimeRemainingContractFunction
    )

    calculateTimeRemainingScaled: (
        IMockHyperdriveCalculateTimeRemainingScaledContractFunction
    )

    getGovernanceFeesAccrued: (
        IMockHyperdriveGetGovernanceFeesAccruedContractFunction
    )

    latestCheckpoint: IMockHyperdriveLatestCheckpointContractFunction

    mint: IMockHyperdriveMintContractFunction

    setReserves: IMockHyperdriveSetReservesContractFunction

    updateLiquidity: IMockHyperdriveUpdateLiquidityContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.__external_transferFrom = (
            IMockHyperdrive__external_transferFromContractFunction.factory(
                "__external_transferFrom",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="__external_transferFrom",
            )
        )
        self.__setBalanceOf = (
            IMockHyperdrive__setBalanceOfContractFunction.factory(
                "__setBalanceOf",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="__setBalanceOf",
            )
        )
        self.accrue = IMockHyperdriveAccrueContractFunction.factory(
            "accrue",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="accrue",
        )
        self.burn = IMockHyperdriveBurnContractFunction.factory(
            "burn",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="burn",
        )
        self.calculateTimeRemaining = (
            IMockHyperdriveCalculateTimeRemainingContractFunction.factory(
                "calculateTimeRemaining",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="calculateTimeRemaining",
            )
        )
        self.calculateTimeRemainingScaled = (
            IMockHyperdriveCalculateTimeRemainingScaledContractFunction.factory(
                "calculateTimeRemainingScaled",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="calculateTimeRemainingScaled",
            )
        )
        self.getGovernanceFeesAccrued = (
            IMockHyperdriveGetGovernanceFeesAccruedContractFunction.factory(
                "getGovernanceFeesAccrued",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getGovernanceFeesAccrued",
            )
        )
        self.latestCheckpoint = (
            IMockHyperdriveLatestCheckpointContractFunction.factory(
                "latestCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="latestCheckpoint",
            )
        )
        self.mint = IMockHyperdriveMintContractFunction.factory(
            "mint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="mint",
        )
        self.setReserves = IMockHyperdriveSetReservesContractFunction.factory(
            "setReserves",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setReserves",
        )
        self.updateLiquidity = (
            IMockHyperdriveUpdateLiquidityContractFunction.factory(
                "updateLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateLiquidity",
            )
        )


imockhyperdrive_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "__external_transferFrom",
            "inputs": [
                {
                    "name": "tokenID",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "from", "type": "address", "internalType": "address"},
                {"name": "to", "type": "address", "internalType": "address"},
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "caller",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "__setBalanceOf",
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_who", "type": "address", "internalType": "address"},
                {
                    "name": "_amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "accrue",
            "inputs": [
                {"name": "time", "type": "uint256", "internalType": "uint256"},
                {"name": "apr", "type": "int256", "internalType": "int256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "burn",
            "inputs": [
                {
                    "name": "tokenID",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "from", "type": "address", "internalType": "address"},
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "calculateTimeRemaining",
            "inputs": [
                {
                    "name": "_maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "calculateTimeRemainingScaled",
            "inputs": [
                {
                    "name": "_maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getGovernanceFeesAccrued",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "latestCheckpoint",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "mint",
            "inputs": [
                {
                    "name": "tokenID",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setReserves",
            "inputs": [
                {
                    "name": "shareReserves",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "bondReserves",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLiquidity",
            "inputs": [
                {
                    "name": "shareReservesDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
    ],
)


class IMockHyperdriveContract(Contract):
    """A web3.py Contract class for the IMockHyperdrive contract."""

    abi: ABI = imockhyperdrive_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IMockHyperdriveContractFunctions(imockhyperdrive_abi, self.w3, address)  # type: ignore

    functions: IMockHyperdriveContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IMockHyperdriveContractFunctions(
            imockhyperdrive_abi, w3, None
        )

        return contract
