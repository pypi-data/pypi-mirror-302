# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse200137RingBalance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'normal_percentage': 'int',
        'degraded_percentage': 'int',
        'critical_percentage': 'int',
        'normal_count': 'int',
        'degraded_count': 'int',
        'critical_count': 'int'
    }

    attribute_map = {
        'normal_percentage': 'normal_percentage',
        'degraded_percentage': 'degraded_percentage',
        'critical_percentage': 'critical_percentage',
        'normal_count': 'normal_count',
        'degraded_count': 'degraded_count',
        'critical_count': 'critical_count'
    }

    def __init__(self, normal_percentage=None, degraded_percentage=None, critical_percentage=None, normal_count=None, degraded_count=None, critical_count=None, _configuration=None):  # noqa: E501
        """InlineResponse200137RingBalance - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._normal_percentage = None
        self._degraded_percentage = None
        self._critical_percentage = None
        self._normal_count = None
        self._degraded_count = None
        self._critical_count = None
        self.discriminator = None

        if normal_percentage is not None:
            self.normal_percentage = normal_percentage
        if degraded_percentage is not None:
            self.degraded_percentage = degraded_percentage
        if critical_percentage is not None:
            self.critical_percentage = critical_percentage
        if normal_count is not None:
            self.normal_count = normal_count
        if degraded_count is not None:
            self.degraded_count = degraded_count
        if critical_count is not None:
            self.critical_count = critical_count

    @property
    def normal_percentage(self):
        """Gets the normal_percentage of this InlineResponse200137RingBalance.  # noqa: E501


        :return: The normal_percentage of this InlineResponse200137RingBalance.  # noqa: E501
        :rtype: int
        """
        return self._normal_percentage

    @normal_percentage.setter
    def normal_percentage(self, normal_percentage):
        """Sets the normal_percentage of this InlineResponse200137RingBalance.


        :param normal_percentage: The normal_percentage of this InlineResponse200137RingBalance.  # noqa: E501
        :type: int
        """

        self._normal_percentage = normal_percentage

    @property
    def degraded_percentage(self):
        """Gets the degraded_percentage of this InlineResponse200137RingBalance.  # noqa: E501


        :return: The degraded_percentage of this InlineResponse200137RingBalance.  # noqa: E501
        :rtype: int
        """
        return self._degraded_percentage

    @degraded_percentage.setter
    def degraded_percentage(self, degraded_percentage):
        """Sets the degraded_percentage of this InlineResponse200137RingBalance.


        :param degraded_percentage: The degraded_percentage of this InlineResponse200137RingBalance.  # noqa: E501
        :type: int
        """

        self._degraded_percentage = degraded_percentage

    @property
    def critical_percentage(self):
        """Gets the critical_percentage of this InlineResponse200137RingBalance.  # noqa: E501


        :return: The critical_percentage of this InlineResponse200137RingBalance.  # noqa: E501
        :rtype: int
        """
        return self._critical_percentage

    @critical_percentage.setter
    def critical_percentage(self, critical_percentage):
        """Sets the critical_percentage of this InlineResponse200137RingBalance.


        :param critical_percentage: The critical_percentage of this InlineResponse200137RingBalance.  # noqa: E501
        :type: int
        """

        self._critical_percentage = critical_percentage

    @property
    def normal_count(self):
        """Gets the normal_count of this InlineResponse200137RingBalance.  # noqa: E501


        :return: The normal_count of this InlineResponse200137RingBalance.  # noqa: E501
        :rtype: int
        """
        return self._normal_count

    @normal_count.setter
    def normal_count(self, normal_count):
        """Sets the normal_count of this InlineResponse200137RingBalance.


        :param normal_count: The normal_count of this InlineResponse200137RingBalance.  # noqa: E501
        :type: int
        """

        self._normal_count = normal_count

    @property
    def degraded_count(self):
        """Gets the degraded_count of this InlineResponse200137RingBalance.  # noqa: E501


        :return: The degraded_count of this InlineResponse200137RingBalance.  # noqa: E501
        :rtype: int
        """
        return self._degraded_count

    @degraded_count.setter
    def degraded_count(self, degraded_count):
        """Sets the degraded_count of this InlineResponse200137RingBalance.


        :param degraded_count: The degraded_count of this InlineResponse200137RingBalance.  # noqa: E501
        :type: int
        """

        self._degraded_count = degraded_count

    @property
    def critical_count(self):
        """Gets the critical_count of this InlineResponse200137RingBalance.  # noqa: E501


        :return: The critical_count of this InlineResponse200137RingBalance.  # noqa: E501
        :rtype: int
        """
        return self._critical_count

    @critical_count.setter
    def critical_count(self, critical_count):
        """Sets the critical_count of this InlineResponse200137RingBalance.


        :param critical_count: The critical_count of this InlineResponse200137RingBalance.  # noqa: E501
        :type: int
        """

        self._critical_count = critical_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200137RingBalance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200137RingBalance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200137RingBalance):
            return True

        return self.to_dict() != other.to_dict()
