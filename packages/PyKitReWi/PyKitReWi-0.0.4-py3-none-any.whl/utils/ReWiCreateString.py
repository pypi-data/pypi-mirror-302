# 制作对角线
# for i in range(720):
#     for j in range(420):
#         if i == j:
#             outputStr = "{},{}".format(i, j)
#             print(outputStr)
#             file = open('../windowUI/drawTouchRect-diagonal-720x420.txt', 'a')
#             file.write(outputStr+'\n')
#             file.close()

# N个 随机点
# import random
# amount = 80
# for i in range(amount):
#     outputStr = "{},{}\n".format(random.randint(1, 720), random.randint(1, 420))
#     print(outputStr)
#     file = open('./drawTouchRect-random-720x420.txt', 'a')
#     file.write(outputStr)
#     file.close()

# 制作Dict
# for i in range(100):
#     outputStr = "{}:{}".format(i, "[ , , , ],")
#     print(outputStr)

# 制作连数
# for i in range(365):
#     outputStr = "{}".format(i)
#     print(outputStr,end=",")

import binascii
bytesData = []
# 制作字符串
for i in range(200):
    bytesData.append(i)
# 使用hexlify函数将bytes数据转换为16进制字符串
hex_string = binascii.hexlify(bytearray(bytesData)).decode('utf-8').upper()
# 插入空格
strData = ' '.join(hex_string[i:i + 2] for i in range(0, len(hex_string), 2))
print(strData)
# 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63

# 字段分离
# 速度查表：{速度值：[对应最小帧，对应最大帧,对应最小帧，对应最大帧,],}
# videoSpeedDict = {
#     0: [0, 4, 742, 760],
#     1: [5, 8, 722, 741],
#     2: [9, 11, 715, 721],
#     3: [12, 16, 705, 714],
#     4: [17, 18, 699, 704],
#     5: [19, 23, 690, 698],
#     6: [24, 25, 687, 689],
#     7: [26, 29, 681, 686],
#     8: [30, 34, 675, 680],
#     9: [35, 36, 670, 674],
#     10: [37, 38, 665, 669],
#     11: [39, 41, 660, 664],
#     12: [42, 43, 653, 659],
#     13: [44, 48, 651, 652],
#     14: [49, 50, 646, 650],
#     15: [51, 54, 640, 645],
#     16: [55, 56, 639, 639],
#     17: [57, 60, 633, 638],
#     18: [61, 64, 631, 632],
#     19: [65, 67, 626, 630],
#     20: [66, 68, 624, 625],
#     21: [69, 72, 621, 623],
#     22: [73, 74, 616, 620],
#     23: [75, 76, 614, 615],
#     24: [77, 82, 611, 613],
#     25: [83, 85, 608, 610],
#     26: [86, 86, 603, 607],
#     27: [87, 89, 600, 602],
#     28: [90, 92, 598, 599],
#     29: [93, 94, 596, 597],
#     30: [95, 99, 593, 595],
#     31: [100, 102, 588, 592],
#     32: [103, 105, 586, 587],
#     33: [106, 109, 584, 585],
#     34: [110, 110, 581, 583],
#     35: [111, 114, 576, 580],
#     36: [115, 118, 574, 575],
#     37: [119, 119, 572, 573],
#     38: [120, 123, 569, 571],
#     39: [124, 425, 567, 568],
#     40: [126, 127, 564, 566],
#     41: [128, 133, 562, 563],
#     42: [134, 137, 560, 561],
#     43: [138, 140, 557, 559],
#     44: [141, 142, 555, 556],
#     45: [143, 144, 551, 554],
#     46: [145, 149, 549, 550],
#     47: [150, 151, 547, 548],
#     48: [152, 153, 544, 546],
#     49: [154, 156, 542, 543],
#     50: [157, 163, 539, 541],
#     51: [164, 164, 537, 538],
#     52: [165, 166, 535, 536],
#     53: [167, 168, 532, 534],
#     54: [169, 174, 530, 531],
#     55: [175, 176, 527, 529],
#     56: [177, 178, 526, 526],
#     57: [179, 183, 525, 525],
#     58: [184, 186, 524, 524],
#     59: [188, 189, 523, 523],
#     60: [190, 193, 522, 522],
#     61: [194, 195, 519, 521],
#     62: [196, 199, 518, 518],
#     63: [200, 204, 515, 517],
#     64: [205, 206, 514, 514],
#     65: [207, 212, 513, 513],
#     66: [213, 213, 509, 512],
#     67: [214, 215, 507, 508],
#     68: [216, 222, 506, 506],
#     69: [223, 224, 503, 505],
#     70: [225, 230, 502, 502],
#     71: [231, 232, 499, 501],
#     72: [233, 237, 498, 498],
#     73: [238, 242, 495, 497],
#     74: [244, 245, 492, 494],
#     75: [246, 250, 491, 491],
#     76: [251, 251, 489, 490],
#     77: [252, 257, 488, 488],
#     78: [258, 262, 485, 487],
#     79: [263, 263, 482, 484],
#     80: [264, 266, 481, 481],
#     81: [267, 271, 478, 480],
#     82: [272, 275, 475, 477],
#     83: [276, 281, 473, 474],
#     84: [282, 286, 472, 472],
#     85: [287, 291, 471, 471],
#     86: [292, 296, 469, 470],
#     87: [297, 300, 467, 468],
#     88: [301, 306, 466, 466],
#     89: [307, 311, 465, 465],
#     90: [312, 318, 462, 464],
#     91: [319, 323, 459, 461],
#     92: [324, 331, 455, 458],
#     93: [332, 338, 454, 454],
#     94: [339, 347, 453, 453],
#     95: [348, 357, 450, 452],
#     96: [358, 370, 448, 449],
#     97: [371, 386, 447, 447],
#     98: [387, 409, 445, 446],
#     99: [410, 444, 410, 444],
# }
# print("{")
# for i in range(100):
#     frList = videoSpeedDict.get(i, 0)
#     # print("{}frList : {} --> {},{},{},{}".format(i,frList,frList[0],frList[1],frList[2],frList[3]))
#     for j in range(frList[0], frList[1] + 1, 1):
#         print(f"{j}:{i},", end=" ")
# for i in range(99, -1, -1):
#     frList = videoSpeedDict.get(i, 0)
#     # print("{}frList : {} --> {},{},{},{}".format(i,frList,frList[0],frList[1],frList[2],frList[3]))
#     for j in range(frList[2], frList[3] + 1, 1):
#         print(f"{j}:{i},", end=" ")
# print("}")
