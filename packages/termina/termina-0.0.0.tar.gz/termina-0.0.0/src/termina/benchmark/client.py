# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.available_categories_response import AvailableCategoriesResponse
from ..types.available_models_response import AvailableModelsResponse
from ..types.benchmark_quantile import BenchmarkQuantile
from ..types.categories_metadata_response import CategoriesMetadataResponse
from ..types.columns_metadata_response import ColumnsMetadataResponse
from ..types.deal_combined_metrics_response import DealCombinedMetricsResponse
from ..types.http_validation_error import HttpValidationError
from ..types.models_metadata_response import ModelsMetadataResponse
from ..types.scale_models_response import ScaleModelsResponse
from ..types.tradeoff_models_response import TradeoffModelsResponse
from .types.benchmark_get_combined_time_series_request_user_type import BenchmarkGetCombinedTimeSeriesRequestUserType
from .types.benchmark_get_deal_benchmark_quantiles_request_user_type import (
    BenchmarkGetDealBenchmarkQuantilesRequestUserType,
)
from .types.benchmark_get_deal_benchmark_tradeoff_at_scale_request_user_type import (
    BenchmarkGetDealBenchmarkTradeoffAtScaleRequestUserType,
)
from .types.benchmark_get_quantiles_request_user_type import BenchmarkGetQuantilesRequestUserType
from .types.benchmark_get_scaling_request_user_type import BenchmarkGetScalingRequestUserType
from .types.benchmark_get_time_series_endpoint_request_user_type import BenchmarkGetTimeSeriesEndpointRequestUserType
from .types.benchmark_get_tradeoff_at_scale_request_user_type import BenchmarkGetTradeoffAtScaleRequestUserType


class BenchmarkClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_available_benchmark_categories(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AvailableCategoriesResponse:
        """
        Get the list of categories with benchmark models available for the account.

        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AvailableCategoriesResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_available_benchmark_categories(
            group_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/data/benchmark/available_benchmark_categories",
            method="GET",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(AvailableCategoriesResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_quantiles(
        self,
        category: str,
        user_type: BenchmarkGetQuantilesRequestUserType,
        group_id: int,
        *,
        revenue: float,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BenchmarkQuantile]:
        """
        Get the benchmark quantiles for a given category at a specified revenue scale. If columns are specified, only those columns will be returned.

        Parameters
        ----------
        category : str

        user_type : BenchmarkGetQuantilesRequestUserType

        group_id : int

        revenue : float
            Annualized revenue scale for which to obtain benchmarks

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BenchmarkQuantile]
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_quantiles(
            category="category",
            user_type="business",
            group_id=1,
            revenue=1.1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/data/benchmark/quantiles/{jsonable_encoder(category)}/{jsonable_encoder(user_type)}",
            method="GET",
            params={"revenue": revenue, "column": column},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[BenchmarkQuantile], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_scaling(
        self,
        category: str,
        user_type: BenchmarkGetScalingRequestUserType,
        group_id: int,
        *,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScaleModelsResponse:
        """
        Get the scaling models for a given category. Multiple models can be specified.

        Parameters
        ----------
        category : str

        user_type : BenchmarkGetScalingRequestUserType

        group_id : int

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScaleModelsResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_scaling(
            category="category",
            user_type="business",
            group_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/data/benchmark/scaling/{jsonable_encoder(category)}/{jsonable_encoder(user_type)}",
            method="GET",
            params={"model": model},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ScaleModelsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_available_models(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AvailableModelsResponse:
        """
        Get the list of available scaling and tradeoff models for the account.

        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AvailableModelsResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_available_models(
            group_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/data/benchmark/available_models",
            method="GET",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(AvailableModelsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_tradeoff_at_scale(
        self,
        category: str,
        user_type: BenchmarkGetTradeoffAtScaleRequestUserType,
        group_id: int,
        *,
        revenue: float,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TradeoffModelsResponse:
        """
        Get the tradeoff at scale model for a given category.

        Parameters
        ----------
        category : str

        user_type : BenchmarkGetTradeoffAtScaleRequestUserType

        group_id : int

        revenue : float
            Annualized revenue scale for which to obtain benchmarks

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TradeoffModelsResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_tradeoff_at_scale(
            category="category",
            user_type="business",
            group_id=1,
            revenue=1.1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/data/benchmark/tradeoff_at_scale/{jsonable_encoder(category)}/{jsonable_encoder(user_type)}",
            method="GET",
            params={"revenue": revenue, "model": model},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(TradeoffModelsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_available_company_categories(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AvailableCategoriesResponse:
        """
        Get the categories with benchmark models available for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AvailableCategoriesResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_available_company_categories(
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/benchmark/available_categories",
            method="GET",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(AvailableCategoriesResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_combined_time_series(
        self,
        user_type: BenchmarkGetCombinedTimeSeriesRequestUserType,
        group_id: int,
        deal_id: int,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[DealCombinedMetricsResponse]:
        """
        Get the combined time series data for the deal.

        Parameters
        ----------
        user_type : BenchmarkGetCombinedTimeSeriesRequestUserType

        group_id : int

        deal_id : int

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DealCombinedMetricsResponse]
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_combined_time_series(
            user_type="business",
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/benchmark/combined_time_series/{jsonable_encoder(user_type)}",
            method="GET",
            params={"column": column},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[DealCombinedMetricsResponse], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_time_series_endpoint(
        self,
        user_type: BenchmarkGetTimeSeriesEndpointRequestUserType,
        group_id: int,
        deal_id: int,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealCombinedMetricsResponse:
        """
        Get the time series data endpoint for the deal.

        Parameters
        ----------
        user_type : BenchmarkGetTimeSeriesEndpointRequestUserType

        group_id : int

        deal_id : int

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealCombinedMetricsResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_time_series_endpoint(
            user_type="business",
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/benchmark/time_series_endpoint/{jsonable_encoder(user_type)}",
            method="GET",
            params={"column": column},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(DealCombinedMetricsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_deal_benchmark_quantiles(
        self,
        category: str,
        user_type: BenchmarkGetDealBenchmarkQuantilesRequestUserType,
        group_id: int,
        deal_id: int,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BenchmarkQuantile]:
        """
        Get the benchmark quantiles for a given category.

        Parameters
        ----------
        category : str

        user_type : BenchmarkGetDealBenchmarkQuantilesRequestUserType

        group_id : int

        deal_id : int

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BenchmarkQuantile]
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_deal_benchmark_quantiles(
            category="category",
            user_type="business",
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/benchmark/quantiles/{jsonable_encoder(category)}/{jsonable_encoder(user_type)}",
            method="GET",
            params={"column": column},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[BenchmarkQuantile], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_deal_benchmark_tradeoff_at_scale(
        self,
        category: str,
        user_type: BenchmarkGetDealBenchmarkTradeoffAtScaleRequestUserType,
        group_id: int,
        deal_id: int,
        *,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TradeoffModelsResponse:
        """
        Get the tradeoff models for a given category.

        Parameters
        ----------
        category : str

        user_type : BenchmarkGetDealBenchmarkTradeoffAtScaleRequestUserType

        group_id : int

        deal_id : int

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TradeoffModelsResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_deal_benchmark_tradeoff_at_scale(
            category="category",
            user_type="business",
            group_id=1,
            deal_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/benchmark/tradeoff_at_scale/{jsonable_encoder(category)}/{jsonable_encoder(user_type)}",
            method="GET",
            params={"model": model},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(TradeoffModelsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_columns_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ColumnsMetadataResponse:
        """
        Get the columns metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ColumnsMetadataResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_columns_metadata()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/data/benchmark/metadata/columns", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ColumnsMetadataResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_models_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ModelsMetadataResponse]:
        """
        Get the models metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelsMetadataResponse]
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_models_metadata()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/data/benchmark/metadata/models", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[ModelsMetadataResponse], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_categories_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CategoriesMetadataResponse:
        """
        Get the categories metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CategoriesMetadataResponse
            Successful Response

        Examples
        --------
        from termina.client import Termina

        client = Termina(
            token="YOUR_TOKEN",
        )
        client.benchmark.get_categories_metadata()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v1/data/benchmark/metadata/categories", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(CategoriesMetadataResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBenchmarkClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_available_benchmark_categories(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AvailableCategoriesResponse:
        """
        Get the list of categories with benchmark models available for the account.

        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AvailableCategoriesResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_available_benchmark_categories(
            group_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/data/benchmark/available_benchmark_categories",
            method="GET",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(AvailableCategoriesResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_quantiles(
        self,
        category: str,
        user_type: BenchmarkGetQuantilesRequestUserType,
        group_id: int,
        *,
        revenue: float,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BenchmarkQuantile]:
        """
        Get the benchmark quantiles for a given category at a specified revenue scale. If columns are specified, only those columns will be returned.

        Parameters
        ----------
        category : str

        user_type : BenchmarkGetQuantilesRequestUserType

        group_id : int

        revenue : float
            Annualized revenue scale for which to obtain benchmarks

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BenchmarkQuantile]
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_quantiles(
            category="category",
            user_type="business",
            group_id=1,
            revenue=1.1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/data/benchmark/quantiles/{jsonable_encoder(category)}/{jsonable_encoder(user_type)}",
            method="GET",
            params={"revenue": revenue, "column": column},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[BenchmarkQuantile], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_scaling(
        self,
        category: str,
        user_type: BenchmarkGetScalingRequestUserType,
        group_id: int,
        *,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScaleModelsResponse:
        """
        Get the scaling models for a given category. Multiple models can be specified.

        Parameters
        ----------
        category : str

        user_type : BenchmarkGetScalingRequestUserType

        group_id : int

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScaleModelsResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_scaling(
            category="category",
            user_type="business",
            group_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/data/benchmark/scaling/{jsonable_encoder(category)}/{jsonable_encoder(user_type)}",
            method="GET",
            params={"model": model},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ScaleModelsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_available_models(
        self, group_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AvailableModelsResponse:
        """
        Get the list of available scaling and tradeoff models for the account.

        Parameters
        ----------
        group_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AvailableModelsResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_available_models(
            group_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/data/benchmark/available_models",
            method="GET",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(AvailableModelsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_tradeoff_at_scale(
        self,
        category: str,
        user_type: BenchmarkGetTradeoffAtScaleRequestUserType,
        group_id: int,
        *,
        revenue: float,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TradeoffModelsResponse:
        """
        Get the tradeoff at scale model for a given category.

        Parameters
        ----------
        category : str

        user_type : BenchmarkGetTradeoffAtScaleRequestUserType

        group_id : int

        revenue : float
            Annualized revenue scale for which to obtain benchmarks

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TradeoffModelsResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_tradeoff_at_scale(
            category="category",
            user_type="business",
            group_id=1,
            revenue=1.1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/data/benchmark/tradeoff_at_scale/{jsonable_encoder(category)}/{jsonable_encoder(user_type)}",
            method="GET",
            params={"revenue": revenue, "model": model},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(TradeoffModelsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_available_company_categories(
        self, group_id: int, deal_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AvailableCategoriesResponse:
        """
        Get the categories with benchmark models available for the company associated with the deal.

        Parameters
        ----------
        group_id : int

        deal_id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AvailableCategoriesResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_available_company_categories(
            group_id=1,
            deal_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/benchmark/available_categories",
            method="GET",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(AvailableCategoriesResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_combined_time_series(
        self,
        user_type: BenchmarkGetCombinedTimeSeriesRequestUserType,
        group_id: int,
        deal_id: int,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[DealCombinedMetricsResponse]:
        """
        Get the combined time series data for the deal.

        Parameters
        ----------
        user_type : BenchmarkGetCombinedTimeSeriesRequestUserType

        group_id : int

        deal_id : int

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DealCombinedMetricsResponse]
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_combined_time_series(
            user_type="business",
            group_id=1,
            deal_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/benchmark/combined_time_series/{jsonable_encoder(user_type)}",
            method="GET",
            params={"column": column},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[DealCombinedMetricsResponse], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_time_series_endpoint(
        self,
        user_type: BenchmarkGetTimeSeriesEndpointRequestUserType,
        group_id: int,
        deal_id: int,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DealCombinedMetricsResponse:
        """
        Get the time series data endpoint for the deal.

        Parameters
        ----------
        user_type : BenchmarkGetTimeSeriesEndpointRequestUserType

        group_id : int

        deal_id : int

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DealCombinedMetricsResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_time_series_endpoint(
            user_type="business",
            group_id=1,
            deal_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/benchmark/time_series_endpoint/{jsonable_encoder(user_type)}",
            method="GET",
            params={"column": column},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(DealCombinedMetricsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_deal_benchmark_quantiles(
        self,
        category: str,
        user_type: BenchmarkGetDealBenchmarkQuantilesRequestUserType,
        group_id: int,
        deal_id: int,
        *,
        column: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[BenchmarkQuantile]:
        """
        Get the benchmark quantiles for a given category.

        Parameters
        ----------
        category : str

        user_type : BenchmarkGetDealBenchmarkQuantilesRequestUserType

        group_id : int

        deal_id : int

        column : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BenchmarkQuantile]
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_deal_benchmark_quantiles(
            category="category",
            user_type="business",
            group_id=1,
            deal_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/benchmark/quantiles/{jsonable_encoder(category)}/{jsonable_encoder(user_type)}",
            method="GET",
            params={"column": column},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[BenchmarkQuantile], _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_deal_benchmark_tradeoff_at_scale(
        self,
        category: str,
        user_type: BenchmarkGetDealBenchmarkTradeoffAtScaleRequestUserType,
        group_id: int,
        deal_id: int,
        *,
        model: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TradeoffModelsResponse:
        """
        Get the tradeoff models for a given category.

        Parameters
        ----------
        category : str

        user_type : BenchmarkGetDealBenchmarkTradeoffAtScaleRequestUserType

        group_id : int

        deal_id : int

        model : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TradeoffModelsResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_deal_benchmark_tradeoff_at_scale(
            category="category",
            user_type="business",
            group_id=1,
            deal_id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/v1/group/{jsonable_encoder(group_id)}/deal/{jsonable_encoder(deal_id)}/data/benchmark/tradeoff_at_scale/{jsonable_encoder(category)}/{jsonable_encoder(user_type)}",
            method="GET",
            params={"model": model},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(TradeoffModelsResponse, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_columns_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ColumnsMetadataResponse:
        """
        Get the columns metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ColumnsMetadataResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_columns_metadata()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/data/benchmark/metadata/columns", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ColumnsMetadataResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_models_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ModelsMetadataResponse]:
        """
        Get the models metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelsMetadataResponse]
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_models_metadata()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/data/benchmark/metadata/models", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.List[ModelsMetadataResponse], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_categories_metadata(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CategoriesMetadataResponse:
        """
        Get the categories metadata.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CategoriesMetadataResponse
            Successful Response

        Examples
        --------
        from termina.client import AsyncTermina

        client = AsyncTermina(
            token="YOUR_TOKEN",
        )
        await client.benchmark.get_categories_metadata()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v1/data/benchmark/metadata/categories", method="GET", request_options=request_options
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(CategoriesMetadataResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
