{"version":3,"file":"static/chunks/4950.f188798dc3effb17.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/pipelines/PipelineExplorerRoot.oss.tsx","webpack://_N_E/../ui-core/src/pipelines/PipelineRunsRoot.tsx","webpack://_N_E/../ui-core/src/snapshots/SnapshotNav.tsx","webpack://_N_E/../ui-core/src/snapshots/SnapshotRoot.tsx"],"sourcesContent":["import {useState} from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {explodeCompositesInHandleGraph} from './CompositeSupport';\nimport {\n  GRAPH_EXPLORER_ASSET_NODE_FRAGMENT,\n  GRAPH_EXPLORER_FRAGMENT,\n  GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT,\n  GraphExplorer,\n  GraphExplorerOptions,\n} from './GraphExplorer';\nimport {NonIdealPipelineQueryResult} from './NonIdealPipelineQueryResult';\nimport {ExplorerPath, explorerPathFromString, explorerPathToString} from './PipelinePathUtils';\nimport {\n  PipelineExplorerRootQuery,\n  PipelineExplorerRootQueryVariables,\n} from './types/PipelineExplorerRoot.oss.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetGraphViewType} from '../asset-graph/Utils';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntryFragment';\nimport {Loading} from '../ui/Loading';\nimport {buildPipelineSelector} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\n\nexport const PipelineExplorerSnapshotRoot = () => {\n  useTrackPageView();\n\n  const params = useParams();\n  const explorerPath = explorerPathFromString((params as any)['0']);\n  const {pipelineName, snapshotId} = explorerPath;\n  const history = useHistory();\n\n  useDocumentTitle(`Snapshot: ${pipelineName}${snapshotId ? `@${snapshotId.slice(0, 8)}` : ''}`);\n\n  return (\n    <PipelineExplorerContainer\n      explorerPath={explorerPath}\n      onChangeExplorerPath={(path, mode) => {\n        history[mode](`/snapshots/${explorerPathToString(path)}`);\n      }}\n      onNavigateToSourceAssetNode={(e, {assetKey}) => {\n        const path = assetDetailsPathForKey(assetKey);\n        if (e.metaKey) {\n          window.open(path, '_blank');\n        } else {\n          history.push(assetDetailsPathForKey(assetKey));\n        }\n      }}\n    />\n  );\n};\n\nexport const PipelineExplorerContainer = ({\n  explorerPath,\n  repoAddress,\n  onChangeExplorerPath,\n  onNavigateToSourceAssetNode,\n  isGraph = false,\n}: {\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (\n    e: Pick<React.MouseEvent<any>, 'metaKey'>,\n    node: AssetLocation,\n  ) => void;\n  repoAddress?: RepoAddress;\n  isGraph?: boolean;\n}) => {\n  const [options, setOptions] = useState<GraphExplorerOptions>({\n    explodeComposites: explorerPath.explodeComposites ?? false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const pipelineSelector = buildPipelineSelector(repoAddress || null, explorerPath.pipelineName);\n\n  const pipelineResult = useQuery<PipelineExplorerRootQuery, PipelineExplorerRootQueryVariables>(\n    PIPELINE_EXPLORER_ROOT_QUERY,\n    {\n      variables: {\n        snapshotPipelineSelector: explorerPath.snapshotId ? undefined : pipelineSelector,\n        snapshotId: explorerPath.snapshotId ? explorerPath.snapshotId : undefined,\n        rootHandleID: parentNames.join('.'),\n        requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n      },\n    },\n  );\n\n  return (\n    <Loading<PipelineExplorerRootQuery> queryResult={pipelineResult}>\n      {({pipelineSnapshotOrError: result}) => {\n        if (result.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph={isGraph}\n              result={result}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n        const assetNodesPresent = result.solidHandles.some(\n          (h) => h.solid.definition.assetNodes.length > 0,\n        );\n        if (options.preferAssetRendering && assetNodesPresent) {\n          return (\n            <AssetGraphExplorer\n              options={options}\n              setOptions={setOptions}\n              fetchOptions={{pipelineSelector}}\n              explorerPath={explorerPath}\n              onChangeExplorerPath={onChangeExplorerPath}\n              onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n              viewType={AssetGraphViewType.JOB}\n            />\n          );\n        }\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={onChangeExplorerPath}\n            container={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={isGraph}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const PIPELINE_EXPLORER_ROOT_QUERY = gql`\n  query PipelineExplorerRootQuery(\n    $snapshotPipelineSelector: PipelineSelector\n    $snapshotId: String\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    pipelineSnapshotOrError(\n      snapshotId: $snapshotId\n      activePipelineSelector: $snapshotPipelineSelector\n    ) {\n      ... on PipelineSnapshot {\n        id\n        name\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n            definition {\n              assetNodes {\n                id\n                ...GraphExplorerAssetNodeFragment\n              }\n            }\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n        ...GraphExplorerFragment\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${GRAPH_EXPLORER_FRAGMENT}\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${GRAPH_EXPLORER_ASSET_NODE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Box,\n  ButtonLink,\n  CursorHistoryControls,\n  Icon,\n  NonIdealState,\n  Page,\n  Tag,\n  TokenizingFieldValue,\n  tokenToString,\n} from '@dagster-io/ui-components';\nimport {useCallback, useMemo} from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\nimport {\n  PipelineRunsRootQuery,\n  PipelineRunsRootQueryVariables,\n} from './types/PipelineRunsRoot.types';\nimport {useJobTitle} from './useJobTitle';\nimport {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunTable} from '../runs/RunTable';\nimport {RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTableRunFragment';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunsQueryRefetchContext} from '../runs/RunUtils';\nimport {\n  RunFilterToken,\n  RunFilterTokenType,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  useRunsFilterInput,\n} from '../runs/RunsFilterInput';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\nimport {\n  isThisThingAJob,\n  isThisThingAnAssetJob,\n  useRepository,\n} from '../workspace/WorkspaceContext/util';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nconst PAGE_SIZE = 25;\nconst ENABLED_FILTERS: RunFilterTokenType[] = [\n  'status',\n  'tag',\n  'id',\n  'created_date_before',\n  'created_date_after',\n];\n\ninterface Props {\n  repoAddress?: RepoAddress;\n}\n\nexport const PipelineRunsRoot = (props: Props) => {\n  useTrackPageView();\n\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n  const {repoAddress = null} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters(ENABLED_FILTERS);\n  const permanentTokens = useMemo(() => {\n    return [\n      isJob ? {token: 'job', value: pipelineName} : {token: 'pipeline', value: pipelineName},\n      snapshotId ? {token: 'snapshotId', value: snapshotId} : null,\n    ].filter(Boolean) as TokenizingFieldValue[];\n  }, [isJob, pipelineName, snapshotId]);\n\n  const allTokens = [...filterTokens, ...permanentTokens];\n  if (repoAddress) {\n    const repoToken = {\n      token: 'tag',\n      value: `${DagsterTag.RepositoryLabelTag}=${repoAddressAsTag(repoAddress)}`,\n    };\n    allTokens.push(repoToken);\n  }\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PipelineRunsRootQuery,\n    PipelineRunsRootQueryVariables\n  >({\n    query: PIPELINE_RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n    variables: {\n      filter: {...runsFilterForSearchTokens(allTokens), pipelineName, snapshotId},\n    },\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n  });\n\n  const onAddTag = useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!filterTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokens([...filterTokens, token]);\n      }\n    },\n    [filterTokens, setFilterTokens],\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {button, activeFiltersJsx} = useRunsFilterInput({\n    enabledFilters: ENABLED_FILTERS,\n    tokens: filterTokens,\n    onChange: setFilterTokens,\n    loading: queryResult.loading,\n  });\n\n  return (\n    <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n      <Page>\n        <Loading queryResult={queryResult} allowStaleData={true}>\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n\n            const runs = pipelineRunsOrError.results;\n\n            const displayed = runs.slice(0, PAGE_SIZE);\n            const {hasNextCursor, hasPrevCursor} = paginationProps;\n\n            return (\n              <>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={displayed}\n                    onAddTag={onAddTag}\n                    actionBarComponents={\n                      <Box\n                        flex={{\n                          direction: 'row',\n                          justifyContent: 'space-between',\n                          grow: 1,\n                          alignItems: 'center',\n                          gap: 4,\n                        }}\n                        margin={{right: 8}}\n                      >\n                        {button}\n                        <QueryRefreshCountdown refreshState={refreshState} />\n                      </Box>\n                    }\n                    belowActionBarComponents={\n                      <>\n                        {permanentTokens.map(({token, value}) => (\n                          <Tag key={token}>{`${token}:${value}`}</Tag>\n                        ))}\n                        {activeFiltersJsx.length ? (\n                          <>\n                            {activeFiltersJsx}\n                            <ButtonLink\n                              onClick={() => {\n                                setFilterTokens([]);\n                              }}\n                            >\n                              Clear all\n                            </ButtonLink>\n                          </>\n                        ) : null}\n                      </>\n                    }\n                    emptyState={() => (\n                      <EmptyState\n                        repoAddress={repoAddress}\n                        anyFilter={filterTokens.length > 0}\n                        jobName={pipelineName}\n                        jobPath={pipelinePath}\n                      />\n                    )}\n                  />\n                </StickyTableContainer>\n                {hasNextCursor || hasPrevCursor ? (\n                  <div style={{marginTop: '20px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </Page>\n    </RunsQueryRefetchContext.Provider>\n  );\n};\n\ninterface EmptyStateProps {\n  repoAddress: RepoAddress | null;\n  jobName: string;\n  jobPath: string;\n  anyFilter: boolean;\n}\n\nconst EmptyState = (props: EmptyStateProps) => {\n  const {repoAddress, anyFilter, jobName, jobPath} = props;\n\n  const repo = useRepository(repoAddress);\n  const isAssetJob = isThisThingAnAssetJob(repo, jobName);\n\n  const description = () => {\n    if (!repoAddress) {\n      return <div>You have not launched any runs for this job.</div>;\n    }\n\n    if (isAssetJob) {\n      return (\n        <Box flex={{direction: 'column', gap: 12}}>\n          <div>\n            {anyFilter\n              ? 'There are no matching runs for these filters.'\n              : 'You have not materialized any assets with this job yet.'}\n          </div>\n          <div>\n            <AnchorButton\n              icon={<Icon name=\"materialization\" />}\n              to={workspacePathFromAddress(repoAddress, `/jobs/${jobPath}`)}\n            >\n              Materialize an asset\n            </AnchorButton>\n          </div>\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12}}>\n        <div>\n          {anyFilter\n            ? 'There are no matching runs for these filters.'\n            : 'You have not launched any runs for this job yet.'}\n        </div>\n        <div>\n          <AnchorButton\n            icon={<Icon name=\"add_circle\" />}\n            to={workspacePathFromAddress(repoAddress, `/jobs/${jobPath}/playground`)}\n          >\n            Launch a run\n          </AnchorButton>\n        </div>\n      </Box>\n    );\n  };\n\n  return (\n    <Box padding={{vertical: 64}}>\n      <NonIdealState icon=\"run\" title=\"No runs found\" description={description()} />\n    </Box>\n  );\n};\n\nconst PIPELINE_RUNS_ROOT_QUERY = gql`\n  query PipelineRunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {FontFamily, Heading, PageHeader, Tabs, Tag} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\n\nimport {SnapshotQuery, SnapshotQueryVariables} from './types/SnapshotNav.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {ExplorerPath, explorerPathToString} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {useActivePipelineForName} from '../workspace/WorkspaceContext/util';\nimport {workspacePipelinePathGuessRepo} from '../workspace/workspacePath';\n\nconst SNAPSHOT_PARENT_QUERY = gql`\n  query SnapshotQuery($snapshotId: String!) {\n    pipelineSnapshotOrError(snapshotId: $snapshotId) {\n      ... on PipelineSnapshot {\n        id\n        parentSnapshotId\n      }\n    }\n  }\n`;\n\ninterface SnapshotNavProps {\n  activeTab?: string;\n  explorerPath: ExplorerPath;\n}\n\nexport const SnapshotNav = (props: SnapshotNavProps) => {\n  const {activeTab = '', explorerPath} = props;\n  const {pipelineName, snapshotId = ''} = explorerPath;\n  const explorerPathString = explorerPathToString({\n    ...explorerPath,\n    opNames: [],\n  });\n\n  const currentPipelineState = useActivePipelineForName(pipelineName);\n  const currentSnapshotID = currentPipelineState?.pipelineSnapshotId;\n\n  const queryResult = useQuery<SnapshotQuery, SnapshotQueryVariables>(SNAPSHOT_PARENT_QUERY, {\n    variables: {snapshotId},\n  });\n\n  const {data, loading} = queryResult;\n\n  const tag = () => {\n    if (loading) {\n      return (\n        <Tag intent=\"none\" minimal>\n          ...\n        </Tag>\n      );\n    }\n\n    if (\n      !currentSnapshotID ||\n      (currentSnapshotID !== snapshotId &&\n        data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n        data?.pipelineSnapshotOrError?.parentSnapshotId !== currentSnapshotID)\n    ) {\n      return (\n        <Tag intent=\"warning\" minimal>\n          Snapshot\n        </Tag>\n      );\n    }\n\n    return (\n      <Tag intent=\"success\" minimal>\n        Current\n      </Tag>\n    );\n  };\n\n  const tabs = [\n    {\n      text: 'Definition',\n      pathComponent: '',\n      href: `/snapshots/${explorerPathString}`,\n    },\n    {\n      text: 'Runs',\n      pathComponent: 'runs',\n      href: `/snapshots/${explorerPathString}runs`,\n    },\n  ];\n\n  return (\n    <PageHeader\n      title={\n        <Heading style={{fontFamily: FontFamily.monospace, fontSize: '16px'}}>\n          {explorerPath.snapshotId?.slice(0, 8)}\n        </Heading>\n      }\n      tags={\n        <>\n          <Tag icon=\"schema\">\n            Snapshot of{' '}\n            <Link to={workspacePipelinePathGuessRepo(explorerPath.pipelineName)}>\n              {explorerPath.pipelineName}\n            </Link>\n          </Tag>\n          {tag()}\n        </>\n      }\n      tabs={\n        <Tabs selectedTabId={activeTab}>\n          {tabs.map((tab) => {\n            const {href, text, pathComponent} = tab;\n            return <TabLink key={text} id={pathComponent} title={text} to={href} />;\n          })}\n        </Tabs>\n      }\n    />\n  );\n};\n","import {Switch, useParams} from 'react-router-dom';\nimport {PipelineExplorerSnapshotRoot} from 'shared/pipelines/PipelineExplorerRoot.oss';\n\nimport {SnapshotNav} from './SnapshotNav';\nimport {Route} from '../app/Route';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {PipelineRunsRoot} from '../pipelines/PipelineRunsRoot';\n\nexport const SnapshotRoot = () => {\n  const {pipelinePath, tab} = useParams<{\n    pipelinePath: string;\n    tab?: string;\n  }>();\n  const explorerPath = explorerPathFromString(pipelinePath);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <SnapshotNav activeTab={tab} explorerPath={explorerPath} />\n      <Switch>\n        <Route path=\"/snapshots/:pipelinePath/runs\">\n          <PipelineRunsRoot />\n        </Route>\n        <Route path=\"/snapshots/(/?.*)\">\n          <PipelineExplorerSnapshotRoot />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default SnapshotRoot;\n"],"names":["PipelineExplorerSnapshotRoot","useTrackPageView","params","useParams","explorerPath","explorerPathFromString","pipelineName","snapshotId","history","useHistory","useDocumentTitle","concat","slice","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","PipelineExplorerContainer","onChangeExplorerPath","path","mode","explorerPathToString","onNavigateToSourceAssetNode","e","assetKey","param","assetDetailsPathForKey","metaKey","window","open","push","repoAddress","isGraph","options","setOptions","useState","explodeComposites","preferAssetRendering","parentNames","opNames","length","pipelineSelector","buildPipelineSelector","pipelineResult","useQuery","PIPELINE_EXPLORER_ROOT_QUERY","variables","snapshotPipelineSelector","undefined","rootHandleID","join","requestScopeHandleID","Loading","queryResult","pipelineSnapshotOrError","result","__typename","NonIdealPipelineQueryResult","parentHandle","solidHandle","displayedHandles","explodeCompositesInHandleGraph","solidHandles","assetNodesPresent","some","h","solid","definition","assetNodes","AssetGraphExplorer","fetchOptions","viewType","AssetGraphViewType","JOB","GraphExplorer","container","handles","getInvocations","filter","s","name","definitionName","map","handleID","gql","METADATA_ENTRY_FRAGMENT","GRAPH_EXPLORER_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","GRAPH_EXPLORER_ASSET_NODE_FRAGMENT","PYTHON_ERROR_FRAGMENT","ENABLED_FILTERS","PipelineRunsRoot","pipelinePath","props","repo","useRepository","isJob","isThisThingAJob","useJobTitle","filterTokens","setFilterTokens","useQueryPersistedRunFilters","permanentTokens","useMemo","token","value","Boolean","allTokens","repoToken","repoAddressAsTag","DagsterTag","RepositoryLabelTag","paginationProps","useCursorPaginatedQuery","query","PIPELINE_RUNS_ROOT_QUERY","pageSize","runsFilterForSearchTokens","nextCursorForResult","runs","pipelineRunsOrError","results","PAGE_SIZE","id","getResultArray","data","onAddTag","useCallback","tokenAsString","tokenToString","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","button","activeFiltersJsx","useRunsFilterInput","enabledFilters","tokens","onChange","loading","RunsQueryRefetchContext","Provider","refetch","Page","allowStaleData","Box","padding","vertical","NonIdealState","icon","title","description","message","displayed","hasNextCursor","hasPrevCursor","jsxs","Fragment","StickyTableContainer","$top","RunTable","actionBarComponents","flex","direction","justifyContent","grow","alignItems","gap","margin","right","QueryRefreshCountdown","belowActionBarComponents","Tag","ButtonLink","onClick","emptyState","EmptyState","anyFilter","jobName","jobPath","div","style","marginTop","CursorHistoryControls","isAssetJob","isThisThingAnAssetJob","AnchorButton","Icon","to","workspacePathFromAddress","RUN_TABLE_RUN_FRAGMENT","SNAPSHOT_PARENT_QUERY","SnapshotNav","activeTab","explorerPathString","currentPipelineState","useActivePipelineForName","currentSnapshotID","pipelineSnapshotId","jsx_runtime","PageHeader","Heading","fontFamily","FontFamily","monospace","fontSize","tags","Link","workspacePipelinePathGuessRepo","intent","minimal","parentSnapshotId","tabs","Tabs","selectedTabId","text","pathComponent","href","tab","TabLink","SnapshotRoot","display","flexDirection","minWidth","width","height","Switch","Route","snapshots_SnapshotRoot"],"sourceRoot":""}