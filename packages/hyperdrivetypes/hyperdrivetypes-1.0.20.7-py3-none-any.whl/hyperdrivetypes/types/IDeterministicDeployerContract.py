"""A web3.py Contract class for the IDeterministicDeployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, Sequence, Type, cast, overload

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ABIFunction, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    combomethod_typed,
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from . import ICreateXTypes as ICreateX
from .IDeterministicDeployerTypes import (
    ContractCreationEvent,
    Create3ProxyContractCreationEvent,
)

structs = {
    "ICreateX.Values": ICreateX.Values,
}


class IDeterministicDeployerComputeCreate2AddressContractFunction0(
    ContractFunction
):
    """ContractFunction for the computeCreate2Address method."""

    def __call__(self, salt: bytes, initCodeHash: bytes) -> IDeterministicDeployerComputeCreate2AddressContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(initCodeHash))  # type: ignore
        return cast(
            IDeterministicDeployerComputeCreate2AddressContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerComputeCreate2AddressContractFunction1(
    ContractFunction
):
    """ContractFunction for the computeCreate2Address method."""

    def __call__(self, salt: bytes, initCodeHash: bytes, deployer: str) -> IDeterministicDeployerComputeCreate2AddressContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(initCodeHash), dataclass_to_tuple(deployer))  # type: ignore
        return cast(
            IDeterministicDeployerComputeCreate2AddressContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerComputeCreate2AddressContractFunction(
    ContractFunction
):
    """ContractFunction for the computeCreate2Address method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, salt: bytes, initCodeHash: bytes) -> IDeterministicDeployerComputeCreate2AddressContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, salt: bytes, initCodeHash: bytes, deployer: str) -> IDeterministicDeployerComputeCreate2AddressContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> IDeterministicDeployerComputeCreate2AddressContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class IDeterministicDeployerComputeCreate3AddressContractFunction0(
    ContractFunction
):
    """ContractFunction for the computeCreate3Address method."""

    def __call__(self, salt: bytes, deployer: str) -> IDeterministicDeployerComputeCreate3AddressContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(deployer))  # type: ignore
        return cast(
            IDeterministicDeployerComputeCreate3AddressContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerComputeCreate3AddressContractFunction1(
    ContractFunction
):
    """ContractFunction for the computeCreate3Address method."""

    def __call__(self, salt: bytes) -> IDeterministicDeployerComputeCreate3AddressContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(
            IDeterministicDeployerComputeCreate3AddressContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerComputeCreate3AddressContractFunction(
    ContractFunction
):
    """ContractFunction for the computeCreate3Address method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, salt: bytes, deployer: str) -> IDeterministicDeployerComputeCreate3AddressContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, salt: bytes) -> IDeterministicDeployerComputeCreate3AddressContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> IDeterministicDeployerComputeCreate3AddressContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class IDeterministicDeployerComputeCreateAddressContractFunction0(
    ContractFunction
):
    """ContractFunction for the computeCreateAddress method."""

    def __call__(self, nonce: int) -> IDeterministicDeployerComputeCreateAddressContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(
            IDeterministicDeployerComputeCreateAddressContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerComputeCreateAddressContractFunction1(
    ContractFunction
):
    """ContractFunction for the computeCreateAddress method."""

    def __call__(self, deployer: str, nonce: int) -> IDeterministicDeployerComputeCreateAddressContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(deployer), dataclass_to_tuple(nonce))  # type: ignore
        return cast(
            IDeterministicDeployerComputeCreateAddressContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerComputeCreateAddressContractFunction(
    ContractFunction
):
    """ContractFunction for the computeCreateAddress method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, nonce: int) -> IDeterministicDeployerComputeCreateAddressContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, deployer: str, nonce: int) -> IDeterministicDeployerComputeCreateAddressContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> IDeterministicDeployerComputeCreateAddressContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class IDeterministicDeployerDeployCreateContractFunction(ContractFunction):
    """ContractFunction for the deployCreate method."""

    def __call__(self, initCode: bytes) -> IDeterministicDeployerDeployCreateContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(initCode))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate2ContractFunction0(ContractFunction):
    """ContractFunction for the deployCreate2 method."""

    def __call__(self, salt: bytes, initCode: bytes) -> IDeterministicDeployerDeployCreate2ContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(initCode))  # type: ignore
        return cast(IDeterministicDeployerDeployCreate2ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate2ContractFunction1(ContractFunction):
    """ContractFunction for the deployCreate2 method."""

    def __call__(self, initCode: bytes) -> IDeterministicDeployerDeployCreate2ContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(IDeterministicDeployerDeployCreate2ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate2ContractFunction(ContractFunction):
    """ContractFunction for the deployCreate2 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, salt: bytes, initCode: bytes) -> IDeterministicDeployerDeployCreate2ContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, initCode: bytes) -> IDeterministicDeployerDeployCreate2ContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> IDeterministicDeployerDeployCreate2ContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class IDeterministicDeployerDeployCreate2AndInitContractFunction0(
    ContractFunction
):
    """ContractFunction for the deployCreate2AndInit method."""

    def __call__(self, salt: bytes, initCode: bytes, data: bytes, values: ICreateX.Values, refundAddress: str) -> IDeterministicDeployerDeployCreate2AndInitContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(initCode), dataclass_to_tuple(data), dataclass_to_tuple(values), dataclass_to_tuple(refundAddress))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreate2AndInitContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate2AndInitContractFunction1(
    ContractFunction
):
    """ContractFunction for the deployCreate2AndInit method."""

    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values) -> IDeterministicDeployerDeployCreate2AndInitContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(initCode), dataclass_to_tuple(data), dataclass_to_tuple(values))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreate2AndInitContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate2AndInitContractFunction2(
    ContractFunction
):
    """ContractFunction for the deployCreate2AndInit method."""

    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values, refundAddress: str) -> IDeterministicDeployerDeployCreate2AndInitContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(initCode), dataclass_to_tuple(data), dataclass_to_tuple(values), dataclass_to_tuple(refundAddress))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreate2AndInitContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate2AndInitContractFunction3(
    ContractFunction
):
    """ContractFunction for the deployCreate2AndInit method."""

    def __call__(self, salt: bytes, initCode: bytes, data: bytes, values: ICreateX.Values) -> IDeterministicDeployerDeployCreate2AndInitContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(initCode), dataclass_to_tuple(data), dataclass_to_tuple(values))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreate2AndInitContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate2AndInitContractFunction(
    ContractFunction
):
    """ContractFunction for the deployCreate2AndInit method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, salt: bytes, initCode: bytes, data: bytes, values: ICreateX.Values, refundAddress: str) -> IDeterministicDeployerDeployCreate2AndInitContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values) -> IDeterministicDeployerDeployCreate2AndInitContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values, refundAddress: str) -> IDeterministicDeployerDeployCreate2AndInitContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, salt: bytes, initCode: bytes, data: bytes, values: ICreateX.Values) -> IDeterministicDeployerDeployCreate2AndInitContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> IDeterministicDeployerDeployCreate2AndInitContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class IDeterministicDeployerDeployCreate2CloneContractFunction0(
    ContractFunction
):
    """ContractFunction for the deployCreate2Clone method."""

    def __call__(self, salt: bytes, implementation: str, data: bytes) -> IDeterministicDeployerDeployCreate2CloneContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(implementation), dataclass_to_tuple(data))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreate2CloneContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate2CloneContractFunction1(
    ContractFunction
):
    """ContractFunction for the deployCreate2Clone method."""

    def __call__(self, implementation: str, data: bytes) -> IDeterministicDeployerDeployCreate2CloneContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(implementation), dataclass_to_tuple(data))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreate2CloneContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate2CloneContractFunction(
    ContractFunction
):
    """ContractFunction for the deployCreate2Clone method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, salt: bytes, implementation: str, data: bytes) -> IDeterministicDeployerDeployCreate2CloneContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, implementation: str, data: bytes) -> IDeterministicDeployerDeployCreate2CloneContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> IDeterministicDeployerDeployCreate2CloneContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class IDeterministicDeployerDeployCreate3ContractFunction0(ContractFunction):
    """ContractFunction for the deployCreate3 method."""

    def __call__(self, initCode: bytes) -> IDeterministicDeployerDeployCreate3ContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(IDeterministicDeployerDeployCreate3ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate3ContractFunction1(ContractFunction):
    """ContractFunction for the deployCreate3 method."""

    def __call__(self, salt: bytes, initCode: bytes) -> IDeterministicDeployerDeployCreate3ContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(initCode))  # type: ignore
        return cast(IDeterministicDeployerDeployCreate3ContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate3ContractFunction(ContractFunction):
    """ContractFunction for the deployCreate3 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, initCode: bytes) -> IDeterministicDeployerDeployCreate3ContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, salt: bytes, initCode: bytes) -> IDeterministicDeployerDeployCreate3ContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> IDeterministicDeployerDeployCreate3ContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class IDeterministicDeployerDeployCreate3AndInitContractFunction0(
    ContractFunction
):
    """ContractFunction for the deployCreate3AndInit method."""

    def __call__(self, salt: bytes, initCode: bytes, data: bytes, values: ICreateX.Values) -> IDeterministicDeployerDeployCreate3AndInitContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(initCode), dataclass_to_tuple(data), dataclass_to_tuple(values))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreate3AndInitContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate3AndInitContractFunction1(
    ContractFunction
):
    """ContractFunction for the deployCreate3AndInit method."""

    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values) -> IDeterministicDeployerDeployCreate3AndInitContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(initCode), dataclass_to_tuple(data), dataclass_to_tuple(values))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreate3AndInitContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate3AndInitContractFunction2(
    ContractFunction
):
    """ContractFunction for the deployCreate3AndInit method."""

    def __call__(self, salt: bytes, initCode: bytes, data: bytes, values: ICreateX.Values, refundAddress: str) -> IDeterministicDeployerDeployCreate3AndInitContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(salt), dataclass_to_tuple(initCode), dataclass_to_tuple(data), dataclass_to_tuple(values), dataclass_to_tuple(refundAddress))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreate3AndInitContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate3AndInitContractFunction3(
    ContractFunction
):
    """ContractFunction for the deployCreate3AndInit method."""

    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values, refundAddress: str) -> IDeterministicDeployerDeployCreate3AndInitContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(initCode), dataclass_to_tuple(data), dataclass_to_tuple(values), dataclass_to_tuple(refundAddress))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreate3AndInitContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreate3AndInitContractFunction(
    ContractFunction
):
    """ContractFunction for the deployCreate3AndInit method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, salt: bytes, initCode: bytes, data: bytes, values: ICreateX.Values) -> IDeterministicDeployerDeployCreate3AndInitContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values) -> IDeterministicDeployerDeployCreate3AndInitContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, salt: bytes, initCode: bytes, data: bytes, values: ICreateX.Values, refundAddress: str) -> IDeterministicDeployerDeployCreate3AndInitContractFunction2:  # type: ignore
        ...

    @overload
    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values, refundAddress: str) -> IDeterministicDeployerDeployCreate3AndInitContractFunction3:  # type: ignore
        ...

    def __call__(self, *args) -> IDeterministicDeployerDeployCreate3AndInitContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class IDeterministicDeployerDeployCreateAndInitContractFunction0(
    ContractFunction
):
    """ContractFunction for the deployCreateAndInit method."""

    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values) -> IDeterministicDeployerDeployCreateAndInitContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(initCode), dataclass_to_tuple(data), dataclass_to_tuple(values))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreateAndInitContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreateAndInitContractFunction1(
    ContractFunction
):
    """ContractFunction for the deployCreateAndInit method."""

    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values, refundAddress: str) -> IDeterministicDeployerDeployCreateAndInitContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(initCode), dataclass_to_tuple(data), dataclass_to_tuple(values), dataclass_to_tuple(refundAddress))  # type: ignore
        return cast(
            IDeterministicDeployerDeployCreateAndInitContractFunction, self
        )

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function
        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerDeployCreateAndInitContractFunction(
    ContractFunction
):
    """ContractFunction for the deployCreateAndInit method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values) -> IDeterministicDeployerDeployCreateAndInitContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, initCode: bytes, data: bytes, values: ICreateX.Values, refundAddress: str) -> IDeterministicDeployerDeployCreateAndInitContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> IDeterministicDeployerDeployCreateAndInitContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class IDeterministicDeployerDeployCreateCloneContractFunction(ContractFunction):
    """ContractFunction for the deployCreateClone method."""

    def __call__(self, implementation: str, data: bytes) -> IDeterministicDeployerDeployCreateCloneContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(implementation), dataclass_to_tuple(data)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IDeterministicDeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the IDeterministicDeployer contract."""

    computeCreate2Address: (
        IDeterministicDeployerComputeCreate2AddressContractFunction
    )

    computeCreate3Address: (
        IDeterministicDeployerComputeCreate3AddressContractFunction
    )

    computeCreateAddress: (
        IDeterministicDeployerComputeCreateAddressContractFunction
    )

    deployCreate: IDeterministicDeployerDeployCreateContractFunction

    deployCreate2: IDeterministicDeployerDeployCreate2ContractFunction

    deployCreate2AndInit: (
        IDeterministicDeployerDeployCreate2AndInitContractFunction
    )

    deployCreate2Clone: IDeterministicDeployerDeployCreate2CloneContractFunction

    deployCreate3: IDeterministicDeployerDeployCreate3ContractFunction

    deployCreate3AndInit: (
        IDeterministicDeployerDeployCreate3AndInitContractFunction
    )

    deployCreateAndInit: (
        IDeterministicDeployerDeployCreateAndInitContractFunction
    )

    deployCreateClone: IDeterministicDeployerDeployCreateCloneContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.computeCreate2Address = (
            IDeterministicDeployerComputeCreate2AddressContractFunction.factory(
                "computeCreate2Address",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="computeCreate2Address",
            )
        )
        self.computeCreate3Address = (
            IDeterministicDeployerComputeCreate3AddressContractFunction.factory(
                "computeCreate3Address",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="computeCreate3Address",
            )
        )
        self.computeCreateAddress = (
            IDeterministicDeployerComputeCreateAddressContractFunction.factory(
                "computeCreateAddress",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="computeCreateAddress",
            )
        )
        self.deployCreate = (
            IDeterministicDeployerDeployCreateContractFunction.factory(
                "deployCreate",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployCreate",
            )
        )
        self.deployCreate2 = (
            IDeterministicDeployerDeployCreate2ContractFunction.factory(
                "deployCreate2",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployCreate2",
            )
        )
        self.deployCreate2AndInit = (
            IDeterministicDeployerDeployCreate2AndInitContractFunction.factory(
                "deployCreate2AndInit",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployCreate2AndInit",
            )
        )
        self.deployCreate2Clone = (
            IDeterministicDeployerDeployCreate2CloneContractFunction.factory(
                "deployCreate2Clone",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployCreate2Clone",
            )
        )
        self.deployCreate3 = (
            IDeterministicDeployerDeployCreate3ContractFunction.factory(
                "deployCreate3",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployCreate3",
            )
        )
        self.deployCreate3AndInit = (
            IDeterministicDeployerDeployCreate3AndInitContractFunction.factory(
                "deployCreate3AndInit",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployCreate3AndInit",
            )
        )
        self.deployCreateAndInit = (
            IDeterministicDeployerDeployCreateAndInitContractFunction.factory(
                "deployCreateAndInit",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployCreateAndInit",
            )
        )
        self.deployCreateClone = (
            IDeterministicDeployerDeployCreateCloneContractFunction.factory(
                "deployCreateClone",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployCreateClone",
            )
        )


class IDeterministicDeployerContractCreationContractEvent(ContractEvent):
    """ContractEvent for ContractCreation."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ContractCreationEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ContractCreationEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ContractCreationEvent.ContractCreationEventArgs(
                    newContract=abi_event.args["newContract"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ContractCreationEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ContractCreationEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ContractCreationEvent.ContractCreationEventArgs(
                    newContract=abi_event.args["newContract"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class IDeterministicDeployerCreate3ProxyContractCreationContractEvent(
    ContractEvent
):
    """ContractEvent for Create3ProxyContractCreation."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Create3ProxyContractCreationEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Create3ProxyContractCreationEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Create3ProxyContractCreationEvent.Create3ProxyContractCreationEventArgs(
                    newContract=abi_event.args["newContract"],
                    salt=abi_event.args["salt"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Create3ProxyContractCreationEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Create3ProxyContractCreationEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Create3ProxyContractCreationEvent.Create3ProxyContractCreationEventArgs(
                    newContract=abi_event.args["newContract"],
                    salt=abi_event.args["salt"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class IDeterministicDeployerContractEvents(ContractEvents):
    """ContractEvents for the IDeterministicDeployer contract."""

    ContractCreation: Type[IDeterministicDeployerContractCreationContractEvent]

    Create3ProxyContractCreation: Type[
        IDeterministicDeployerCreate3ProxyContractCreationContractEvent
    ]

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.ContractCreation = cast(
            Type[IDeterministicDeployerContractCreationContractEvent],
            IDeterministicDeployerContractCreationContractEvent.factory(
                "ContractCreation",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ContractCreation",
            ),
        )
        self.Create3ProxyContractCreation = cast(
            Type[
                IDeterministicDeployerCreate3ProxyContractCreationContractEvent
            ],
            IDeterministicDeployerCreate3ProxyContractCreationContractEvent.factory(
                "Create3ProxyContractCreation",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Create3ProxyContractCreation",
            ),
        )


class IDeterministicDeployerFailedContractCreationContractError:
    """ContractError for FailedContractCreation."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IDeterministicDeployerFailedContractCreationContractError",
    ) -> None:
        self.selector = "0xc05cee7a"
        self.signature = "FailedContractCreation(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ideterministicdeployer_abi
                if item.get("name") == "FailedContractCreation"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IDeterministicDeployerFailedContractInitialisationContractError:
    """ContractError for FailedContractInitialisation."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IDeterministicDeployerFailedContractInitialisationContractError",
    ) -> None:
        self.selector = "0xa57ca239"
        self.signature = "FailedContractInitialisation(address,bytes)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ideterministicdeployer_abi
                if item.get("name") == "FailedContractInitialisation"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IDeterministicDeployerFailedEtherTransferContractError:
    """ContractError for FailedEtherTransfer."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IDeterministicDeployerFailedEtherTransferContractError",
    ) -> None:
        self.selector = "0xc2b3f445"
        self.signature = "FailedEtherTransfer(address,bytes)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ideterministicdeployer_abi
                if item.get("name") == "FailedEtherTransfer"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IDeterministicDeployerInvalidNonceValueContractError:
    """ContractError for InvalidNonceValue."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IDeterministicDeployerInvalidNonceValueContractError",
    ) -> None:
        self.selector = "0x3c55ab3b"
        self.signature = "InvalidNonceValue(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ideterministicdeployer_abi
                if item.get("name") == "InvalidNonceValue"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IDeterministicDeployerInvalidSaltContractError:
    """ContractError for InvalidSalt."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IDeterministicDeployerInvalidSaltContractError",
    ) -> None:
        self.selector = "0x13b3a2a1"
        self.signature = "InvalidSalt(address)"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ideterministicdeployer_abi
                if item.get("name") == "InvalidSalt"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IDeterministicDeployerContractErrors:
    """ContractErrors for the IDeterministicDeployer contract."""

    FailedContractCreation: (
        IDeterministicDeployerFailedContractCreationContractError
    )

    FailedContractInitialisation: (
        IDeterministicDeployerFailedContractInitialisationContractError
    )

    FailedEtherTransfer: IDeterministicDeployerFailedEtherTransferContractError

    InvalidNonceValue: IDeterministicDeployerInvalidNonceValueContractError

    InvalidSalt: IDeterministicDeployerInvalidSaltContractError

    def __init__(
        self,
    ) -> None:
        self.FailedContractCreation = (
            IDeterministicDeployerFailedContractCreationContractError()
        )
        self.FailedContractInitialisation = (
            IDeterministicDeployerFailedContractInitialisationContractError()
        )
        self.FailedEtherTransfer = (
            IDeterministicDeployerFailedEtherTransferContractError()
        )
        self.InvalidNonceValue = (
            IDeterministicDeployerInvalidNonceValueContractError()
        )
        self.InvalidSalt = IDeterministicDeployerInvalidSaltContractError()

        self._all = [
            self.FailedContractCreation,
            self.FailedContractInitialisation,
            self.FailedEtherTransfer,
            self.InvalidNonceValue,
            self.InvalidSalt,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"IDeterministicDeployer does not have a selector matching {selector}"
        )


ideterministicdeployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "computeCreate2Address",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "initCodeHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
            ],
            "outputs": [
                {
                    "name": "computedAddress",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "computeCreate2Address",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "initCodeHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "deployer",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {
                    "name": "computedAddress",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "computeCreate3Address",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "deployer",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {
                    "name": "computedAddress",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "computeCreate3Address",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"}
            ],
            "outputs": [
                {
                    "name": "computedAddress",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "computeCreateAddress",
            "inputs": [
                {"name": "nonce", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {
                    "name": "computedAddress",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "computeCreateAddress",
            "inputs": [
                {
                    "name": "deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "nonce", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {
                    "name": "computedAddress",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployCreate",
            "inputs": [
                {"name": "initCode", "type": "bytes", "internalType": "bytes"}
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate2",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate2",
            "inputs": [
                {"name": "initCode", "type": "bytes", "internalType": "bytes"}
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate2AndInit",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
                {
                    "name": "values",
                    "type": "tuple",
                    "internalType": "struct ICreateX.Values",
                    "components": [
                        {
                            "name": "constructorAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "initCallAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "refundAddress",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate2AndInit",
            "inputs": [
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
                {
                    "name": "values",
                    "type": "tuple",
                    "internalType": "struct ICreateX.Values",
                    "components": [
                        {
                            "name": "constructorAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "initCallAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate2AndInit",
            "inputs": [
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
                {
                    "name": "values",
                    "type": "tuple",
                    "internalType": "struct ICreateX.Values",
                    "components": [
                        {
                            "name": "constructorAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "initCallAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "refundAddress",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate2AndInit",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
                {
                    "name": "values",
                    "type": "tuple",
                    "internalType": "struct ICreateX.Values",
                    "components": [
                        {
                            "name": "constructorAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "initCallAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate2Clone",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "implementation",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {"name": "proxy", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate2Clone",
            "inputs": [
                {
                    "name": "implementation",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {"name": "proxy", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate3",
            "inputs": [
                {"name": "initCode", "type": "bytes", "internalType": "bytes"}
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate3",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate3AndInit",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
                {
                    "name": "values",
                    "type": "tuple",
                    "internalType": "struct ICreateX.Values",
                    "components": [
                        {
                            "name": "constructorAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "initCallAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate3AndInit",
            "inputs": [
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
                {
                    "name": "values",
                    "type": "tuple",
                    "internalType": "struct ICreateX.Values",
                    "components": [
                        {
                            "name": "constructorAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "initCallAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate3AndInit",
            "inputs": [
                {"name": "salt", "type": "bytes32", "internalType": "bytes32"},
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
                {
                    "name": "values",
                    "type": "tuple",
                    "internalType": "struct ICreateX.Values",
                    "components": [
                        {
                            "name": "constructorAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "initCallAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "refundAddress",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreate3AndInit",
            "inputs": [
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
                {
                    "name": "values",
                    "type": "tuple",
                    "internalType": "struct ICreateX.Values",
                    "components": [
                        {
                            "name": "constructorAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "initCallAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "refundAddress",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreateAndInit",
            "inputs": [
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
                {
                    "name": "values",
                    "type": "tuple",
                    "internalType": "struct ICreateX.Values",
                    "components": [
                        {
                            "name": "constructorAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "initCallAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreateAndInit",
            "inputs": [
                {"name": "initCode", "type": "bytes", "internalType": "bytes"},
                {"name": "data", "type": "bytes", "internalType": "bytes"},
                {
                    "name": "values",
                    "type": "tuple",
                    "internalType": "struct ICreateX.Values",
                    "components": [
                        {
                            "name": "constructorAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "initCallAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "refundAddress",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployCreateClone",
            "inputs": [
                {
                    "name": "implementation",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {"name": "proxy", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "payable",
        },
        {
            "type": "event",
            "name": "ContractCreation",
            "inputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "salt",
                    "type": "bytes32",
                    "indexed": True,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ContractCreation",
            "inputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Create3ProxyContractCreation",
            "inputs": [
                {
                    "name": "newContract",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "salt",
                    "type": "bytes32",
                    "indexed": True,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "error",
            "name": "FailedContractCreation",
            "inputs": [
                {
                    "name": "emitter",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {
            "type": "error",
            "name": "FailedContractInitialisation",
            "inputs": [
                {
                    "name": "emitter",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "revertData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
            ],
        },
        {
            "type": "error",
            "name": "FailedEtherTransfer",
            "inputs": [
                {
                    "name": "emitter",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "revertData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
            ],
        },
        {
            "type": "error",
            "name": "InvalidNonceValue",
            "inputs": [
                {
                    "name": "emitter",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {
            "type": "error",
            "name": "InvalidSalt",
            "inputs": [
                {
                    "name": "emitter",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
    ],
)


class IDeterministicDeployerContract(Contract):
    """A web3.py Contract class for the IDeterministicDeployer contract."""

    abi: ABI = ideterministicdeployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IDeterministicDeployerContractFunctions(ideterministicdeployer_abi, self.w3, address)  # type: ignore
        self.events = IDeterministicDeployerContractEvents(ideterministicdeployer_abi, self.w3, address)  # type: ignore
        self.errors = IDeterministicDeployerContractErrors()

    events: IDeterministicDeployerContractEvents

    errors: IDeterministicDeployerContractErrors = (
        IDeterministicDeployerContractErrors()
    )

    functions: IDeterministicDeployerContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IDeterministicDeployerContractFunctions(
            ideterministicdeployer_abi, w3, None
        )
        contract.errors = IDeterministicDeployerContractErrors()

        return contract
