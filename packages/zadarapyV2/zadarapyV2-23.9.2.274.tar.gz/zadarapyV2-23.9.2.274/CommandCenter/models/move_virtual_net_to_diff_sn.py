# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class MoveVirtualNetToDiffSn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sn_names': 'list[str]',
        'vc_index': 'int',
        'force': 'bool'
    }

    attribute_map = {
        'sn_names': 'sn_names',
        'vc_index': 'vc_index',
        'force': 'force'
    }

    def __init__(self, sn_names=None, vc_index=None, force=None, _configuration=None):  # noqa: E501
        """MoveVirtualNetToDiffSn - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sn_names = None
        self._vc_index = None
        self._force = None
        self.discriminator = None

        self.sn_names = sn_names
        self.vc_index = vc_index
        if force is not None:
            self.force = force

    @property
    def sn_names(self):
        """Gets the sn_names of this MoveVirtualNetToDiffSn.  # noqa: E501

        destination storage node(s) for the virtual controller. When selecting multiple destination storage nodes, the VC will be moved to the first storage node with sufficient resources, according to the selected order  # noqa: E501

        :return: The sn_names of this MoveVirtualNetToDiffSn.  # noqa: E501
        :rtype: list[str]
        """
        return self._sn_names

    @sn_names.setter
    def sn_names(self, sn_names):
        """Sets the sn_names of this MoveVirtualNetToDiffSn.

        destination storage node(s) for the virtual controller. When selecting multiple destination storage nodes, the VC will be moved to the first storage node with sufficient resources, according to the selected order  # noqa: E501

        :param sn_names: The sn_names of this MoveVirtualNetToDiffSn.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and sn_names is None:
            raise ValueError("Invalid value for `sn_names`, must not be `None`")  # noqa: E501

        self._sn_names = sn_names

    @property
    def vc_index(self):
        """Gets the vc_index of this MoveVirtualNetToDiffSn.  # noqa: E501

        Virtual controller index  # noqa: E501

        :return: The vc_index of this MoveVirtualNetToDiffSn.  # noqa: E501
        :rtype: int
        """
        return self._vc_index

    @vc_index.setter
    def vc_index(self, vc_index):
        """Sets the vc_index of this MoveVirtualNetToDiffSn.

        Virtual controller index  # noqa: E501

        :param vc_index: The vc_index of this MoveVirtualNetToDiffSn.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and vc_index is None:
            raise ValueError("Invalid value for `vc_index`, must not be `None`")  # noqa: E501

        self._vc_index = vc_index

    @property
    def force(self):
        """Gets the force of this MoveVirtualNetToDiffSn.  # noqa: E501

        In case the Storage Node that hosts the VC is offline and marked for decommission, use the force flag to allow the VC relocation.  # noqa: E501

        :return: The force of this MoveVirtualNetToDiffSn.  # noqa: E501
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this MoveVirtualNetToDiffSn.

        In case the Storage Node that hosts the VC is offline and marked for decommission, use the force flag to allow the VC relocation.  # noqa: E501

        :param force: The force of this MoveVirtualNetToDiffSn.  # noqa: E501
        :type: bool
        """

        self._force = force

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MoveVirtualNetToDiffSn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MoveVirtualNetToDiffSn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MoveVirtualNetToDiffSn):
            return True

        return self.to_dict() != other.to_dict()
