"""A web3.py Contract class for the EzETHLineaHyperdriveDeployerCoordinator contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ABIFunction, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    combomethod_typed,
    dataclass_to_tuple,
    get_abi_input_types,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from . import (
    HyperdriveDeployerCoordinatorTypes as HyperdriveDeployerCoordinator,
)
from . import IHyperdriveTypes as IHyperdrive

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolDeployConfig": IHyperdrive.PoolDeployConfig,
    "HyperdriveDeployerCoordinator.Deployment": HyperdriveDeployerCoordinator.Deployment,
    "IHyperdrive.Options": IHyperdrive.Options,
}


class EzETHLineaHyperdriveDeployerCoordinatorConvertToBaseContractFunction(
    ContractFunction
):
    """ContractFunction for the convertToBase method."""

    def __call__(self, shareAmount: int) -> EzETHLineaHyperdriveDeployerCoordinatorConvertToBaseContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(shareAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorConvertToSharesContractFunction(
    ContractFunction
):
    """ContractFunction for the convertToShares method."""

    def __call__(self, baseAmount: int) -> EzETHLineaHyperdriveDeployerCoordinatorConvertToSharesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(baseAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorCoreDeployerContractFunction(
    ContractFunction
):
    """ContractFunction for the coreDeployer method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorCoreDeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction(
    ContractFunction
):
    """ContractFunction for the deployHyperdrive method."""

    def __call__(self, deploymentId: bytes, name: str, deployConfig: IHyperdrive.PoolDeployConfig, extraData: bytes, salt: bytes) -> EzETHLineaHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(name),
            dataclass_to_tuple(deployConfig),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorDeployTargetContractFunction(
    ContractFunction
):
    """ContractFunction for the deployTarget method."""

    def __call__(self, deploymentId: bytes, deployConfig: IHyperdrive.PoolDeployConfig, extraData: bytes, targetIndex: int, salt: bytes) -> EzETHLineaHyperdriveDeployerCoordinatorDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(deployConfig),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(targetIndex),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorDeploymentsContractFunction(
    ContractFunction
):
    """ContractFunction for the deployments method."""

    def __call__(self, deploymentId: bytes) -> EzETHLineaHyperdriveDeployerCoordinatorDeploymentsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(deploymentId))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> HyperdriveDeployerCoordinator.Deployment:
        """returns HyperdriveDeployerCoordinator.Deployment."""
        # Define the expected return types from the smart contract call

        return_types = HyperdriveDeployerCoordinator.Deployment

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            HyperdriveDeployerCoordinator.Deployment,
            rename_returned_types(structs, return_types, raw_values),
        )


class EzETHLineaHyperdriveDeployerCoordinatorFactoryContractFunction(
    ContractFunction
):
    """ContractFunction for the factory method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorFactoryContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction(
    ContractFunction
):
    """ContractFunction for the getNumberOfTargets method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorInitializeContractFunction(
    ContractFunction
):
    """ContractFunction for the initialize method."""

    def __call__(self, deploymentId: bytes, lp: str, contribution: int, apr: int, options: IHyperdrive.Options) -> EzETHLineaHyperdriveDeployerCoordinatorInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(lp),
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(apr),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorKindContractFunction(
    ContractFunction
):
    """ContractFunction for the kind method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorKindContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorNameContractFunction(
    ContractFunction
):
    """ContractFunction for the name method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorTarget0DeployerContractFunction(
    ContractFunction
):
    """ContractFunction for the target0Deployer method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorTarget0DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorTarget1DeployerContractFunction(
    ContractFunction
):
    """ContractFunction for the target1Deployer method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorTarget1DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorTarget2DeployerContractFunction(
    ContractFunction
):
    """ContractFunction for the target2Deployer method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorTarget2DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorTarget3DeployerContractFunction(
    ContractFunction
):
    """ContractFunction for the target3Deployer method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorTarget3DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorTarget4DeployerContractFunction(
    ContractFunction
):
    """ContractFunction for the target4Deployer method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorTarget4DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorVersionContractFunction(
    ContractFunction
):
    """ContractFunction for the version method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorVersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorXRenzoDepositContractFunction(
    ContractFunction
):
    """ContractFunction for the xRenzoDeposit method."""

    def __call__(self) -> EzETHLineaHyperdriveDeployerCoordinatorXRenzoDepositContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class EzETHLineaHyperdriveDeployerCoordinatorContractFunctions(
    ContractFunctions
):
    """ContractFunctions for the EzETHLineaHyperdriveDeployerCoordinator contract."""

    convertToBase: (
        EzETHLineaHyperdriveDeployerCoordinatorConvertToBaseContractFunction
    )

    convertToShares: (
        EzETHLineaHyperdriveDeployerCoordinatorConvertToSharesContractFunction
    )

    coreDeployer: (
        EzETHLineaHyperdriveDeployerCoordinatorCoreDeployerContractFunction
    )

    deployHyperdrive: (
        EzETHLineaHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction
    )

    deployTarget: (
        EzETHLineaHyperdriveDeployerCoordinatorDeployTargetContractFunction
    )

    deployments: (
        EzETHLineaHyperdriveDeployerCoordinatorDeploymentsContractFunction
    )

    factory: EzETHLineaHyperdriveDeployerCoordinatorFactoryContractFunction

    getNumberOfTargets: EzETHLineaHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction

    initialize: (
        EzETHLineaHyperdriveDeployerCoordinatorInitializeContractFunction
    )

    kind: EzETHLineaHyperdriveDeployerCoordinatorKindContractFunction

    name: EzETHLineaHyperdriveDeployerCoordinatorNameContractFunction

    target0Deployer: (
        EzETHLineaHyperdriveDeployerCoordinatorTarget0DeployerContractFunction
    )

    target1Deployer: (
        EzETHLineaHyperdriveDeployerCoordinatorTarget1DeployerContractFunction
    )

    target2Deployer: (
        EzETHLineaHyperdriveDeployerCoordinatorTarget2DeployerContractFunction
    )

    target3Deployer: (
        EzETHLineaHyperdriveDeployerCoordinatorTarget3DeployerContractFunction
    )

    target4Deployer: (
        EzETHLineaHyperdriveDeployerCoordinatorTarget4DeployerContractFunction
    )

    version: EzETHLineaHyperdriveDeployerCoordinatorVersionContractFunction

    xRenzoDeposit: (
        EzETHLineaHyperdriveDeployerCoordinatorXRenzoDepositContractFunction
    )

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.convertToBase = EzETHLineaHyperdriveDeployerCoordinatorConvertToBaseContractFunction.factory(
            "convertToBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToBase",
        )
        self.convertToShares = EzETHLineaHyperdriveDeployerCoordinatorConvertToSharesContractFunction.factory(
            "convertToShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToShares",
        )
        self.coreDeployer = EzETHLineaHyperdriveDeployerCoordinatorCoreDeployerContractFunction.factory(
            "coreDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="coreDeployer",
        )
        self.deployHyperdrive = EzETHLineaHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction.factory(
            "deployHyperdrive",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployHyperdrive",
        )
        self.deployTarget = EzETHLineaHyperdriveDeployerCoordinatorDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployTarget",
        )
        self.deployments = EzETHLineaHyperdriveDeployerCoordinatorDeploymentsContractFunction.factory(
            "deployments",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployments",
        )
        self.factory = EzETHLineaHyperdriveDeployerCoordinatorFactoryContractFunction.factory(
            "factory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="factory",
        )
        self.getNumberOfTargets = EzETHLineaHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction.factory(
            "getNumberOfTargets",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getNumberOfTargets",
        )
        self.initialize = EzETHLineaHyperdriveDeployerCoordinatorInitializeContractFunction.factory(
            "initialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="initialize",
        )
        self.kind = (
            EzETHLineaHyperdriveDeployerCoordinatorKindContractFunction.factory(
                "kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="kind",
            )
        )
        self.name = (
            EzETHLineaHyperdriveDeployerCoordinatorNameContractFunction.factory(
                "name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="name",
            )
        )
        self.target0Deployer = EzETHLineaHyperdriveDeployerCoordinatorTarget0DeployerContractFunction.factory(
            "target0Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target0Deployer",
        )
        self.target1Deployer = EzETHLineaHyperdriveDeployerCoordinatorTarget1DeployerContractFunction.factory(
            "target1Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target1Deployer",
        )
        self.target2Deployer = EzETHLineaHyperdriveDeployerCoordinatorTarget2DeployerContractFunction.factory(
            "target2Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target2Deployer",
        )
        self.target3Deployer = EzETHLineaHyperdriveDeployerCoordinatorTarget3DeployerContractFunction.factory(
            "target3Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target3Deployer",
        )
        self.target4Deployer = EzETHLineaHyperdriveDeployerCoordinatorTarget4DeployerContractFunction.factory(
            "target4Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="target4Deployer",
        )
        self.version = EzETHLineaHyperdriveDeployerCoordinatorVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="version",
        )
        self.xRenzoDeposit = EzETHLineaHyperdriveDeployerCoordinatorXRenzoDepositContractFunction.factory(
            "xRenzoDeposit",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="xRenzoDeposit",
        )


class EzETHLineaHyperdriveDeployerCoordinatorApprovalFailedContractError:
    """ContractError for ApprovalFailed."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorApprovalFailedContractError",
    ) -> None:
        self.selector = "0x8164f842"
        self.signature = "ApprovalFailed()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "ApprovalFailed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError:
    """ContractError for DeploymentAlreadyExists."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError",
    ) -> None:
        self.selector = "0x77c3669a"
        self.signature = "DeploymentAlreadyExists()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentAlreadyExists"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError:
    """ContractError for DeploymentDoesNotExist."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError",
    ) -> None:
        self.selector = "0xe62c7024"
        self.signature = "DeploymentDoesNotExist()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentDoesNotExist"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError:
    """ContractError for HyperdriveAlreadyDeployed."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError",
    ) -> None:
        self.selector = "0x2c95caeb"
        self.signature = "HyperdriveAlreadyDeployed()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveAlreadyDeployed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError:
    """ContractError for HyperdriveIsNotDeployed."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError",
    ) -> None:
        self.selector = "0x952b05cb"
        self.signature = "HyperdriveIsNotDeployed()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveIsNotDeployed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorIncompleteDeploymentContractError:
    """ContractError for IncompleteDeployment."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorIncompleteDeploymentContractError",
    ) -> None:
        self.selector = "0xe97cc2bf"
        self.signature = "IncompleteDeployment()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "IncompleteDeployment"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorInsufficientValueContractError:
    """ContractError for InsufficientValue."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorInsufficientValueContractError",
    ) -> None:
        self.selector = "0x11011294"
        self.signature = "InsufficientValue()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "InsufficientValue"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorInvalidBaseTokenContractError:
    """ContractError for InvalidBaseToken."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorInvalidBaseTokenContractError",
    ) -> None:
        self.selector = "0x0e442a4a"
        self.signature = "InvalidBaseToken()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidBaseToken"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError:
    """ContractError for InvalidCheckpointDuration."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError",
    ) -> None:
        self.selector = "0x5428734d"
        self.signature = "InvalidCheckpointDuration()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidCheckpointDuration"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError:
    """ContractError for InvalidFeeAmounts."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError",
    ) -> None:
        self.selector = "0x45ee5986"
        self.signature = "InvalidFeeAmounts()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidFeeAmounts"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError:
    """ContractError for InvalidMinimumShareReserves."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError",
    ) -> None:
        self.selector = "0x49db44f5"
        self.signature = "InvalidMinimumShareReserves()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumShareReserves"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError:
    """ContractError for InvalidMinimumTransactionAmount."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError",
    ) -> None:
        self.selector = "0x3192a446"
        self.signature = "InvalidMinimumTransactionAmount()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumTransactionAmount"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorInvalidPositionDurationContractError:
    """ContractError for InvalidPositionDuration."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorInvalidPositionDurationContractError",
    ) -> None:
        self.selector = "0x4a7fff9e"
        self.signature = "InvalidPositionDuration()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidPositionDuration"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorInvalidTargetIndexContractError:
    """ContractError for InvalidTargetIndex."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorInvalidTargetIndexContractError",
    ) -> None:
        self.selector = "0x3b3f02b2"
        self.signature = "InvalidTargetIndex()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidTargetIndex"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError:
    """ContractError for InvalidVaultSharesToken."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError",
    ) -> None:
        self.selector = "0xe7ee73a0"
        self.signature = "InvalidVaultSharesToken()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidVaultSharesToken"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorMismatchedConfigContractError:
    """ContractError for MismatchedConfig."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorMismatchedConfigContractError",
    ) -> None:
        self.selector = "0x332ee11f"
        self.signature = "MismatchedConfig()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedConfig"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorMismatchedExtraDataContractError:
    """ContractError for MismatchedExtraData."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorMismatchedExtraDataContractError",
    ) -> None:
        self.selector = "0xd1939688"
        self.signature = "MismatchedExtraData()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedExtraData"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorNotPayableContractError:
    """ContractError for NotPayable."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorNotPayableContractError",
    ) -> None:
        self.selector = "0x1574f9f3"
        self.signature = "NotPayable()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "NotPayable"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError:
    """ContractError for SenderIsNotFactory."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError",
    ) -> None:
        self.selector = "0x40843511"
        self.signature = "SenderIsNotFactory()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "SenderIsNotFactory"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError:
    """ContractError for TargetAlreadyDeployed."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError",
    ) -> None:
        self.selector = "0x0744b578"
        self.signature = "TargetAlreadyDeployed()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "TargetAlreadyDeployed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorTransferFailedContractError:
    """ContractError for TransferFailed."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorTransferFailedContractError",
    ) -> None:
        self.selector = "0x90b8ec18"
        self.signature = "TransferFailed()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "TransferFailed"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorUnsupportedTokenContractError:
    """ContractError for UnsupportedToken."""

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "EzETHLineaHyperdriveDeployerCoordinatorUnsupportedTokenContractError",
    ) -> None:
        self.selector = "0x6a172882"
        self.signature = "UnsupportedToken()"

    @combomethod_typed
    def decode_error_data(
        self,
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ezethlineahyperdrivedeployercoordinator_abi
                if item.get("name") == "UnsupportedToken"
                and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class EzETHLineaHyperdriveDeployerCoordinatorContractErrors:
    """ContractErrors for the EzETHLineaHyperdriveDeployerCoordinator contract."""

    ApprovalFailed: (
        EzETHLineaHyperdriveDeployerCoordinatorApprovalFailedContractError
    )

    DeploymentAlreadyExists: EzETHLineaHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError

    DeploymentDoesNotExist: EzETHLineaHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError

    HyperdriveAlreadyDeployed: EzETHLineaHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError

    HyperdriveIsNotDeployed: EzETHLineaHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError

    IncompleteDeployment: (
        EzETHLineaHyperdriveDeployerCoordinatorIncompleteDeploymentContractError
    )

    InsufficientValue: (
        EzETHLineaHyperdriveDeployerCoordinatorInsufficientValueContractError
    )

    InvalidBaseToken: (
        EzETHLineaHyperdriveDeployerCoordinatorInvalidBaseTokenContractError
    )

    InvalidCheckpointDuration: EzETHLineaHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError

    InvalidFeeAmounts: (
        EzETHLineaHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError
    )

    InvalidMinimumShareReserves: EzETHLineaHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError

    InvalidMinimumTransactionAmount: EzETHLineaHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError

    InvalidPositionDuration: EzETHLineaHyperdriveDeployerCoordinatorInvalidPositionDurationContractError

    InvalidTargetIndex: (
        EzETHLineaHyperdriveDeployerCoordinatorInvalidTargetIndexContractError
    )

    InvalidVaultSharesToken: EzETHLineaHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError

    MismatchedConfig: (
        EzETHLineaHyperdriveDeployerCoordinatorMismatchedConfigContractError
    )

    MismatchedExtraData: (
        EzETHLineaHyperdriveDeployerCoordinatorMismatchedExtraDataContractError
    )

    NotPayable: EzETHLineaHyperdriveDeployerCoordinatorNotPayableContractError

    SenderIsNotFactory: (
        EzETHLineaHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError
    )

    TargetAlreadyDeployed: EzETHLineaHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError

    TransferFailed: (
        EzETHLineaHyperdriveDeployerCoordinatorTransferFailedContractError
    )

    UnsupportedToken: (
        EzETHLineaHyperdriveDeployerCoordinatorUnsupportedTokenContractError
    )

    def __init__(
        self,
    ) -> None:
        self.ApprovalFailed = (
            EzETHLineaHyperdriveDeployerCoordinatorApprovalFailedContractError()
        )
        self.DeploymentAlreadyExists = (
            EzETHLineaHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError()
        )
        self.DeploymentDoesNotExist = (
            EzETHLineaHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError()
        )
        self.HyperdriveAlreadyDeployed = (
            EzETHLineaHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError()
        )
        self.HyperdriveIsNotDeployed = (
            EzETHLineaHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError()
        )
        self.IncompleteDeployment = (
            EzETHLineaHyperdriveDeployerCoordinatorIncompleteDeploymentContractError()
        )
        self.InsufficientValue = (
            EzETHLineaHyperdriveDeployerCoordinatorInsufficientValueContractError()
        )
        self.InvalidBaseToken = (
            EzETHLineaHyperdriveDeployerCoordinatorInvalidBaseTokenContractError()
        )
        self.InvalidCheckpointDuration = (
            EzETHLineaHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError()
        )
        self.InvalidFeeAmounts = (
            EzETHLineaHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError()
        )
        self.InvalidMinimumShareReserves = (
            EzETHLineaHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError()
        )
        self.InvalidMinimumTransactionAmount = (
            EzETHLineaHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError()
        )
        self.InvalidPositionDuration = (
            EzETHLineaHyperdriveDeployerCoordinatorInvalidPositionDurationContractError()
        )
        self.InvalidTargetIndex = (
            EzETHLineaHyperdriveDeployerCoordinatorInvalidTargetIndexContractError()
        )
        self.InvalidVaultSharesToken = (
            EzETHLineaHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError()
        )
        self.MismatchedConfig = (
            EzETHLineaHyperdriveDeployerCoordinatorMismatchedConfigContractError()
        )
        self.MismatchedExtraData = (
            EzETHLineaHyperdriveDeployerCoordinatorMismatchedExtraDataContractError()
        )
        self.NotPayable = (
            EzETHLineaHyperdriveDeployerCoordinatorNotPayableContractError()
        )
        self.SenderIsNotFactory = (
            EzETHLineaHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError()
        )
        self.TargetAlreadyDeployed = (
            EzETHLineaHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError()
        )
        self.TransferFailed = (
            EzETHLineaHyperdriveDeployerCoordinatorTransferFailedContractError()
        )
        self.UnsupportedToken = (
            EzETHLineaHyperdriveDeployerCoordinatorUnsupportedTokenContractError()
        )

        self._all = [
            self.ApprovalFailed,
            self.DeploymentAlreadyExists,
            self.DeploymentDoesNotExist,
            self.HyperdriveAlreadyDeployed,
            self.HyperdriveIsNotDeployed,
            self.IncompleteDeployment,
            self.InsufficientValue,
            self.InvalidBaseToken,
            self.InvalidCheckpointDuration,
            self.InvalidFeeAmounts,
            self.InvalidMinimumShareReserves,
            self.InvalidMinimumTransactionAmount,
            self.InvalidPositionDuration,
            self.InvalidTargetIndex,
            self.InvalidVaultSharesToken,
            self.MismatchedConfig,
            self.MismatchedExtraData,
            self.NotPayable,
            self.SenderIsNotFactory,
            self.TargetAlreadyDeployed,
            self.TransferFailed,
            self.UnsupportedToken,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(
            f"EzETHLineaHyperdriveDeployerCoordinator does not have a selector matching {selector}"
        )


ezethlineahyperdrivedeployercoordinator_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {
                    "name": "_factory",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_coreDeployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target0Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target1Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target2Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target3Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target4Deployer",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_xRenzoDeposit",
                    "type": "address",
                    "internalType": "contract IXRenzoDeposit",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "convertToBase",
            "inputs": [
                {
                    "name": "_shareAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {
                    "name": "_baseAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "coreDeployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployHyperdrive",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_targetIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployments",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                }
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct HyperdriveDeployerCoordinator.Deployment",
                    "components": [
                        {
                            "name": "configHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "extraDataHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "hyperdrive",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target0",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target1",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target2",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target3",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "target4",
                            "type": "address",
                            "internalType": "address",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "factory",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfTargets",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "_lp", "type": "address", "internalType": "address"},
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target0Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target1Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target2Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target3Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target4Deployer",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "xRenzoDeposit",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IXRenzoDeposit",
                }
            ],
            "stateMutability": "view",
        },
        {"type": "error", "name": "ApprovalFailed", "inputs": []},
        {"type": "error", "name": "DeploymentAlreadyExists", "inputs": []},
        {"type": "error", "name": "DeploymentDoesNotExist", "inputs": []},
        {"type": "error", "name": "HyperdriveAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "HyperdriveIsNotDeployed", "inputs": []},
        {"type": "error", "name": "IncompleteDeployment", "inputs": []},
        {"type": "error", "name": "InsufficientValue", "inputs": []},
        {"type": "error", "name": "InvalidBaseToken", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidFeeAmounts", "inputs": []},
        {"type": "error", "name": "InvalidMinimumShareReserves", "inputs": []},
        {
            "type": "error",
            "name": "InvalidMinimumTransactionAmount",
            "inputs": [],
        },
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTargetIndex", "inputs": []},
        {"type": "error", "name": "InvalidVaultSharesToken", "inputs": []},
        {"type": "error", "name": "MismatchedConfig", "inputs": []},
        {"type": "error", "name": "MismatchedExtraData", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {"type": "error", "name": "SenderIsNotFactory", "inputs": []},
        {"type": "error", "name": "TargetAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
        {"type": "error", "name": "UnsupportedToken", "inputs": []},
    ],
)


class EzETHLineaHyperdriveDeployerCoordinatorContract(Contract):
    """A web3.py Contract class for the EzETHLineaHyperdriveDeployerCoordinator contract."""

    abi: ABI = ezethlineahyperdrivedeployercoordinator_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x6101806040523480156200001257600080fd5b50604051620027d2380380620027d28339810160408190526200003591620000c9565b888888888888888860006200004b8982620002c5565b506001600160a01b0396871660805294861660a05292851660c05290841660e05283166101005282166101205281166101405291909116610160525062000391975050505050505050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620000c457600080fd5b919050565b60008060008060008060008060006101208a8c031215620000e957600080fd5b89516001600160401b03808211156200010157600080fd5b818c0191508c601f8301126200011657600080fd5b8151818111156200012b576200012b62000096565b604051601f8201601f19908116603f0116810190838211818310171562000156576200015662000096565b81604052828152602093508f848487010111156200017357600080fd5b600091505b8282101562000197578482018401518183018501529083019062000178565b6000848483010152809d50505050620001b2818d01620000ac565b99505050620001c460408b01620000ac565b9650620001d460608b01620000ac565b9550620001e460808b01620000ac565b9450620001f460a08b01620000ac565b93506200020460c08b01620000ac565b92506200021460e08b01620000ac565b9150620002256101008b01620000ac565b90509295985092959850929598565b600181811c908216806200024957607f821691505b6020821081036200026a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002c0576000816000526020600020601f850160051c810160208610156200029b5750805b601f850160051c820191505b81811015620002bc57828155600101620002a7565b5050505b505050565b81516001600160401b03811115620002e157620002e162000096565b620002f981620002f2845462000234565b8462000270565b602080601f831160018114620003315760008415620003185750858301515b600019600386901b1c1916600185901b178555620002bc565b600085815260208120601f198616915b82811015620003625788860151825594840194600190910190840162000341565b5085821015620003815787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e051610100516101205161014051610160516123646200046e600039600081816101600152818161071901526114890152600081816102fc0152610ddd0152600081816103640152610ca70152600081816103cc0152610b710152600081816103300152610a3b015260008181610398015261082d015260008181610474015261113501526000818161044001528181610581015281816107510152818161085d01528181610a6b01528181610ba101528181610cd701528181610e0d01528181610f04015261116601526123646000f3fe6080604052600436106101095760003560e01c8063ab71905f11610095578063c45a015511610064578063c45a01551461042e578063c6e6f592146103ee578063c83e1f5114610462578063e990eba814610496578063e99be396146104b657600080fd5b8063ab71905f14610386578063b6cb1118146103ba578063b88fed9f146103ee578063c15106181461040e57600080fd5b806337404017116100dc57806337404017146101bb57806354fd4d50146102ba578063966ecd1c146102ea578063a085fa301461031e578063aa8cd6c41461035257600080fd5b806304baa00b1461010e57806306fdde031461013957806312ae5e671461014e57806316abfc701461019a575b600080fd5b34801561011a57600080fd5b506101236104ca565b604051610130919061199f565b60405180910390f35b34801561014557600080fd5b506101236104e6565b34801561015a57600080fd5b506101827f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610130565b6101ad6101a8366004611ae1565b610574565b604051908152602001610130565b3480156101c757600080fd5b506102ad6101d6366004611ba6565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091525060009081526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b0390811660608301526004830154811660808301526005830154811660a08301526006830154811660c08301526007830154811660e083015260089092015490911661010082015290565b6040516101309190611bbf565b3480156102c657600080fd5b50604080518082019091526007815266076312e302e32360cc1b6020820152610123565b3480156102f657600080fd5b506101827f000000000000000000000000000000000000000000000000000000000000000081565b34801561032a57600080fd5b506101827f000000000000000000000000000000000000000000000000000000000000000081565b34801561035e57600080fd5b506101827f000000000000000000000000000000000000000000000000000000000000000081565b34801561039257600080fd5b506101827f000000000000000000000000000000000000000000000000000000000000000081565b3480156103c657600080fd5b506101827f000000000000000000000000000000000000000000000000000000000000000081565b3480156103fa57600080fd5b506101ad610409366004611ba6565b610712565b34801561041a57600080fd5b50610182610429366004611d97565b610744565b34801561043a57600080fd5b506101827f000000000000000000000000000000000000000000000000000000000000000081565b34801561046e57600080fd5b506101827f000000000000000000000000000000000000000000000000000000000000000081565b3480156104a257600080fd5b506101826104b1366004611e05565b610ef7565b3480156104c257600080fd5b5060056101ad565b6040518060600160405280602781526020016123086027913981565b600080546104f390611ea6565b80601f016020809104026020016040519081016040528092919081815260200182805461051f90611ea6565b801561056c5780601f106105415761010080835404028352916020019161056c565b820191906000526020600020905b81548152906001019060200180831161054f57829003601f168201915b505050505081565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105bf57604051634084351160e01b815260040160405180910390fd5b6105c7611274565b6000868152600160205260409020600301546001600160a01b0316806106005760405163952b05cb60e01b815260040160405180910390fd5b600061060e82888887611295565b9050816001600160a01b03166377d05ff4828888886040518563ffffffff1660e01b815260040161064193929190611ee0565b60206040518083038185885af115801561065f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106849190611f30565b925060006106928234611f49565b9050801561070557604051600090339083908381818185875af1925050503d80600081146106dc576040519150601f19603f3d011682016040523d82523d6000602084013e6106e1565b606091505b5050905080610703576040516312171d8360e31b815260040160405180910390fd5b505b5050505b95945050505050565b600061073e7f00000000000000000000000000000000000000000000000000000000000000008361145d565b92915050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461078f57604051634084351160e01b815260040160405180910390fd5b600086815260016020526040812090849003610947578054156107c557604051633be1b34d60e11b815260040160405180910390fd5b6107cf868661147d565b60006107db87876115d6565b90506000876040516020016107f09190611f6a565b604051602081830303815290604052805190602001209050600087805190602001209050600061081f8a6115f0565b9050838160800181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008c8f8c604051602001610899929190918252602082015260400190565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b81526004016108ce949392919061219d565b6020604051808303816000875af11580156108ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091191906121e3565b9285555060018401556002830191909155600490910180546001600160a01b0319166001600160a01b0383161790559050610709565b600087815260016020526040902054806109745760405163398b1c0960e21b815260040160405180910390fd5b80876040516020016109869190611f6a565b60405160208183030381529060405280519060200120146109ba5760405163332ee11f60e01b815260040160405180910390fd5b600182015486516020880120146109e457604051631a3272d160e31b815260040160405180910390fd5b6109ee878761147d565b60006109f9886115f0565b6002840154608082015290506001869003610b3c5760058301546001600160a01b031615610a395760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610aa093929190612200565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610ad5949392919061219d565b6020604051808303816000875af1158015610af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1891906121e3565b6005840180546001600160a01b0319166001600160a01b0383161790559350610705565b85600203610c725760068301546001600160a01b031615610b6f5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610bd693929190612200565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610c0b949392919061219d565b6020604051808303816000875af1158015610c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4e91906121e3565b6006840180546001600160a01b0319166001600160a01b0383161790559350610705565b85600303610da85760078301546001600160a01b031615610ca55760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610d0c93929190612200565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610d41949392919061219d565b6020604051808303816000875af1158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8491906121e3565b6007840180546001600160a01b0319166001600160a01b0383161790559350610705565b85600403610ede5760088301546001600160a01b031615610ddb5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610e4293929190612200565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610e77949392919061219d565b6020604051808303816000875af1158015610e96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eba91906121e3565b6008840180546001600160a01b0319166001600160a01b0383161790559350610705565b604051631d9f815960e11b815260040160405180910390fd5b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f4257604051634084351160e01b815260040160405180910390fd5b60008681526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b03908116606083018190526004840154821660808401526005840154821660a08401526006840154821660c08401526007840154821660e0840152600890930154166101008201529015610feb57604051632c95caeb60e01b815260040160405180910390fd5b805161100a5760405163398b1c0960e21b815260040160405180910390fd5b60808101516001600160a01b0316158061102f575060a08101516001600160a01b0316155b80611045575060c08101516001600160a01b0316155b8061105b575060e08101516001600160a01b0316155b8061107257506101008101516001600160a01b0316155b156110905760405163e97cc2bf60e01b815260040160405180910390fd5b80516040516110a3908790602001611f6a565b60405160208183030381529060405280519060200120146110d75760405163332ee11f60e01b815260040160405180910390fd5b806020015184805190602001201461110257604051631a3272d160e31b815260040160405180910390fd5b61110c858561147d565b6000611117866115f0565b905081604001518160800181815250506000889050600085905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638cc23ce08b867f00000000000000000000000000000000000000000000000000000000000000008c8a608001518b60a001518c60c001518d60e001518e61010001518d8d6040516020016111bc929190918252602082015260400190565b604051602081830303815290604052805190602001206040518b63ffffffff1660e01b81526004016111f79a99989796959493929190612221565b6020604051808303816000875af1158015611216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123a91906121e3565b60009b8c5260016020526040909b2060030180546001600160a01b0319166001600160a01b038d1617905550989998505050505050505050565b341561129357604051631574f9f360e01b815260040160405180910390fd5b565b60008160200151156112ba5760405163350b944160e11b815260040160405180910390fd5b6000856001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131e91906121e3565b6040516323b872dd60e01b81526001600160a01b038781166004830152306024830152604482018790529192506000918316906323b872dd906064016020604051808303816000875af1158015611379573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139d91906122a4565b9050806113bd576040516312171d8360e31b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b0388811660048301526024820187905283169063095ea7b3906044016020604051808303816000875af115801561140c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143091906122a4565b905080611450576040516340b27c2160e11b815260040160405180910390fd5b5060009695505050505050565b600080611469846116be565b9050611475838261172a565b949350505050565b611487828261173f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663152b2c4f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150991906121e3565b6001600160a01b031682602001516001600160a01b03161461153e5760405163073f739d60e51b815260040160405180910390fd5b81516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461157c57604051630722152560e11b815260040160405180910390fd5b816080015166038d7ea4c68000146115a7576040516349db44f560e01b815260040160405180910390fd5b8160a0015166038d7ea4c68000146115d2576040516318c9522360e11b815260040160405180910390fd5b5050565b60006115e9670de0b6b3a7640000610712565b9392505050565b6115f8611872565b81516001600160a01b03908116825260208084015182169083015260408084015182169083015260608084015190830152608083015160a08084019190915283015160c08084019190915283015160e08084019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015181166101608084019190915283015181166101808084019190915283015181166101a080840191909152830151166101c080830191909152909101516101e082015290565b600080826001600160a01b03166396f0bd616040518163ffffffff1660e01b81526004016040805180830381865afa1580156116fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172291906122c1565b509392505050565b60006115e98383670de0b6b3a7640000611854565b6103e882608001511015611766576040516349db44f560e01b815260040160405180910390fd5b81610100015160000361178c57604051635428734d60e01b815260040160405180910390fd5b8161010001518260e0015110806117b657508161010001518260e001516117b391906122e5565b15155b156117d45760405163253fffcf60e11b815260040160405180910390fd5b6101c082015151670de0b6b3a764000010806118005750670de0b6b3a7640000826101c0015160200151115b8061181b5750670de0b6b3a7640000826101c0015160400151115b806118365750670de0b6b3a7640000826101c0015160600151115b156115d2576040516322f72cc360e11b815260040160405180910390fd5b600082600019048411830215820261186b57600080fd5b5091020490565b60405180610200016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016119546040518060800160405280600081526020016000815260200160008152602001600081525090565b905290565b6000815180845260005b8181101561197f57602081850181015186830182015201611963565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006115e96020830184611959565b6001600160a01b03811681146119c757600080fd5b50565b80356119d5816119b2565b919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611a1357611a136119da565b60405290565b6040516101e0810167ffffffffffffffff81118282101715611a1357611a136119da565b80151581146119c757600080fd5b600067ffffffffffffffff80841115611a6657611a666119da565b604051601f8501601f19908116603f01168101908282118183101715611a8e57611a8e6119da565b81604052809350858152868686011115611aa757600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611ad257600080fd5b6115e983833560208501611a4b565b600080600080600060a08688031215611af957600080fd5b853594506020860135611b0b816119b2565b93506040860135925060608601359150608086013567ffffffffffffffff80821115611b3657600080fd5b908701906060828a031215611b4a57600080fd5b611b526119f0565b8235611b5d816119b2565b81526020830135611b6d81611a3d565b6020820152604083013582811115611b8457600080fd5b611b908b828601611ac1565b6040830152508093505050509295509295909350565b600060208284031215611bb857600080fd5b5035919050565b8151815260208083015190820152604080830151908201526060808301516001600160a01b039081169183019190915260808084015182169083015260a08084015182169083015260c08084015182169083015260e08084015182169083015261010080840151918216818401526101208301915b505092915050565b600060808284031215611c4e57600080fd5b6040516080810181811067ffffffffffffffff82111715611c7157611c716119da565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006102408284031215611cb557600080fd5b611cbd611a19565b9050611cc8826119ca565b8152611cd6602083016119ca565b6020820152611ce7604083016119ca565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140611d448184016119ca565b90820152610160611d568382016119ca565b90820152610180611d688382016119ca565b908201526101a0611d7a8382016119ca565b908201526101c0611d8d84848301611c3c565b9082015292915050565b60008060008060006102c08688031215611db057600080fd5b85359450611dc18760208801611ca2565b935061026086013567ffffffffffffffff811115611dde57600080fd5b611dea88828901611ac1565b9598949750949561028081013595506102a001359392505050565b60008060008060006102c08688031215611e1e57600080fd5b85359450602086013567ffffffffffffffff80821115611e3d57600080fd5b818801915088601f830112611e5157600080fd5b611e6089833560208501611a4b565b9550611e6f8960408a01611ca2565b9450610280880135915080821115611e8657600080fd5b50611e9388828901611ac1565b959894975092956102a001359392505050565b600181811c90821680611eba57607f821691505b602082108103611eda57634e487b7160e01b600052602260045260246000fd5b50919050565b8381528260208201526060604082015260018060a01b03825116606082015260208201511515608082015260006040830151606060a0840152611f2660c0840182611959565b9695505050505050565b600060208284031215611f4257600080fd5b5051919050565b8181038181111561073e57634e487b7160e01b600052601160045260246000fd5b81516001600160a01b0316815261024081016020830151611f9660208401826001600160a01b03169052565b506040830151611fb160408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151612017828501826001600160a01b03169052565b5050610160838101516001600160a01b0390811691840191909152610180808501518216908401526101a080850151909116908301526101c08084015180518285015260208101516101e085015260408101516102008501526060810151610220850152611c34565b80516001600160a01b0316825260208101516120a760208401826001600160a01b03169052565b5060408101516120c260408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151818401525061012080820151818401525061014080820151818401525061016080820151612134828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e090810151805191830191909152602081015161020083015260408101516102208301526060015161024090910152565b60006102c06121ac8388612080565b6001600160a01b03861661026084015261028083018190526121d081840186611959565b915050826102a083015295945050505050565b6000602082840312156121f557600080fd5b81516115e9816119b2565b6001600160a01b039390931683526020830191909152604082015260600190565b60006103808083526122358184018e611959565b9050612244602084018d612080565b6001600160a01b038b81166102808501528382036102a0850152612268828c611959565b9981166102c08501529788166102e084015250509385166103008501529184166103208401529092166103408201526103600152949350505050565b6000602082840312156122b657600080fd5b81516115e981611a3d565b600080604083850312156122d457600080fd5b505080516020909101519092909150565b60008261230257634e487b7160e01b600052601260045260246000fd5b50069056fe457a4554484c696e6561487970657264726976654465706c6f796572436f6f7264696e61746f72a2646970667358221220e4635a4a98ec9f7e594c992491770526b1e8eec09fba0c64e2e4c6ac04c8d1da64736f6c63430008160033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = EzETHLineaHyperdriveDeployerCoordinatorContractFunctions(ezethlineahyperdrivedeployercoordinator_abi, self.w3, address)  # type: ignore

        self.errors = EzETHLineaHyperdriveDeployerCoordinatorContractErrors()

    errors: EzETHLineaHyperdriveDeployerCoordinatorContractErrors = (
        EzETHLineaHyperdriveDeployerCoordinatorContractErrors()
    )

    functions: EzETHLineaHyperdriveDeployerCoordinatorContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        factory: str

        coreDeployer: str

        target0Deployer: str

        target1Deployer: str

        target2Deployer: str

        target3Deployer: str

        target4Deployer: str

        xRenzoDeposit: str

    @classmethod
    def constructor(cls, name: str, factory: str, coreDeployer: str, target0Deployer: str, target1Deployer: str, target2Deployer: str, target3Deployer: str, target4Deployer: str, xRenzoDeposit: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(name),
            dataclass_to_tuple(factory),
            dataclass_to_tuple(coreDeployer),
            dataclass_to_tuple(target0Deployer),
            dataclass_to_tuple(target1Deployer),
            dataclass_to_tuple(target2Deployer),
            dataclass_to_tuple(target3Deployer),
            dataclass_to_tuple(target4Deployer),
            dataclass_to_tuple(xRenzoDeposit),
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args,
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = (
            EzETHLineaHyperdriveDeployerCoordinatorContractFunctions(
                ezethlineahyperdrivedeployercoordinator_abi, w3, None
            )
        )
        contract.errors = (
            EzETHLineaHyperdriveDeployerCoordinatorContractErrors()
        )

        return contract
