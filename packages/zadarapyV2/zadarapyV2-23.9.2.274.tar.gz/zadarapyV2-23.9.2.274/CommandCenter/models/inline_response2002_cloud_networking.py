# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse2002CloudNetworking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'cloud_id': 'int',
        'fe_range_start': 'str',
        'fe_range_end': 'str',
        'fe_total_count': 'int',
        'be_range_start': 'str',
        'be_range_end': 'str',
        'be_total_count': 'int',
        'hb_range_start': 'str',
        'hb_range_end': 'str',
        'hb_total_count': 'int',
        'fe_allocated_count': 'int',
        'be_allocated_count': 'int',
        'hb_allocated_count': 'int',
        'public_ips_total_count': 'int',
        'public_ips_allocated_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'cloud_id': 'cloud_id',
        'fe_range_start': 'fe_range_start',
        'fe_range_end': 'fe_range_end',
        'fe_total_count': 'fe_total_count',
        'be_range_start': 'be_range_start',
        'be_range_end': 'be_range_end',
        'be_total_count': 'be_total_count',
        'hb_range_start': 'hb_range_start',
        'hb_range_end': 'hb_range_end',
        'hb_total_count': 'hb_total_count',
        'fe_allocated_count': 'fe_allocated_count',
        'be_allocated_count': 'be_allocated_count',
        'hb_allocated_count': 'hb_allocated_count',
        'public_ips_total_count': 'public_ips_total_count',
        'public_ips_allocated_count': 'public_ips_allocated_count'
    }

    def __init__(self, id=None, cloud_id=None, fe_range_start=None, fe_range_end=None, fe_total_count=None, be_range_start=None, be_range_end=None, be_total_count=None, hb_range_start=None, hb_range_end=None, hb_total_count=None, fe_allocated_count=None, be_allocated_count=None, hb_allocated_count=None, public_ips_total_count=None, public_ips_allocated_count=None, _configuration=None):  # noqa: E501
        """InlineResponse2002CloudNetworking - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._cloud_id = None
        self._fe_range_start = None
        self._fe_range_end = None
        self._fe_total_count = None
        self._be_range_start = None
        self._be_range_end = None
        self._be_total_count = None
        self._hb_range_start = None
        self._hb_range_end = None
        self._hb_total_count = None
        self._fe_allocated_count = None
        self._be_allocated_count = None
        self._hb_allocated_count = None
        self._public_ips_total_count = None
        self._public_ips_allocated_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if cloud_id is not None:
            self.cloud_id = cloud_id
        if fe_range_start is not None:
            self.fe_range_start = fe_range_start
        if fe_range_end is not None:
            self.fe_range_end = fe_range_end
        if fe_total_count is not None:
            self.fe_total_count = fe_total_count
        if be_range_start is not None:
            self.be_range_start = be_range_start
        if be_range_end is not None:
            self.be_range_end = be_range_end
        if be_total_count is not None:
            self.be_total_count = be_total_count
        if hb_range_start is not None:
            self.hb_range_start = hb_range_start
        if hb_range_end is not None:
            self.hb_range_end = hb_range_end
        if hb_total_count is not None:
            self.hb_total_count = hb_total_count
        if fe_allocated_count is not None:
            self.fe_allocated_count = fe_allocated_count
        if be_allocated_count is not None:
            self.be_allocated_count = be_allocated_count
        if hb_allocated_count is not None:
            self.hb_allocated_count = hb_allocated_count
        if public_ips_total_count is not None:
            self.public_ips_total_count = public_ips_total_count
        if public_ips_allocated_count is not None:
            self.public_ips_allocated_count = public_ips_allocated_count

    @property
    def id(self):
        """Gets the id of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The id of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2002CloudNetworking.


        :param id: The id of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cloud_id(self):
        """Gets the cloud_id of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The cloud_id of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: int
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this InlineResponse2002CloudNetworking.


        :param cloud_id: The cloud_id of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: int
        """

        self._cloud_id = cloud_id

    @property
    def fe_range_start(self):
        """Gets the fe_range_start of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The fe_range_start of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: str
        """
        return self._fe_range_start

    @fe_range_start.setter
    def fe_range_start(self, fe_range_start):
        """Sets the fe_range_start of this InlineResponse2002CloudNetworking.


        :param fe_range_start: The fe_range_start of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: str
        """

        self._fe_range_start = fe_range_start

    @property
    def fe_range_end(self):
        """Gets the fe_range_end of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The fe_range_end of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: str
        """
        return self._fe_range_end

    @fe_range_end.setter
    def fe_range_end(self, fe_range_end):
        """Sets the fe_range_end of this InlineResponse2002CloudNetworking.


        :param fe_range_end: The fe_range_end of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: str
        """

        self._fe_range_end = fe_range_end

    @property
    def fe_total_count(self):
        """Gets the fe_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The fe_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: int
        """
        return self._fe_total_count

    @fe_total_count.setter
    def fe_total_count(self, fe_total_count):
        """Sets the fe_total_count of this InlineResponse2002CloudNetworking.


        :param fe_total_count: The fe_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: int
        """

        self._fe_total_count = fe_total_count

    @property
    def be_range_start(self):
        """Gets the be_range_start of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The be_range_start of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: str
        """
        return self._be_range_start

    @be_range_start.setter
    def be_range_start(self, be_range_start):
        """Sets the be_range_start of this InlineResponse2002CloudNetworking.


        :param be_range_start: The be_range_start of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: str
        """

        self._be_range_start = be_range_start

    @property
    def be_range_end(self):
        """Gets the be_range_end of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The be_range_end of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: str
        """
        return self._be_range_end

    @be_range_end.setter
    def be_range_end(self, be_range_end):
        """Sets the be_range_end of this InlineResponse2002CloudNetworking.


        :param be_range_end: The be_range_end of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: str
        """

        self._be_range_end = be_range_end

    @property
    def be_total_count(self):
        """Gets the be_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The be_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: int
        """
        return self._be_total_count

    @be_total_count.setter
    def be_total_count(self, be_total_count):
        """Sets the be_total_count of this InlineResponse2002CloudNetworking.


        :param be_total_count: The be_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: int
        """

        self._be_total_count = be_total_count

    @property
    def hb_range_start(self):
        """Gets the hb_range_start of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The hb_range_start of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: str
        """
        return self._hb_range_start

    @hb_range_start.setter
    def hb_range_start(self, hb_range_start):
        """Sets the hb_range_start of this InlineResponse2002CloudNetworking.


        :param hb_range_start: The hb_range_start of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: str
        """

        self._hb_range_start = hb_range_start

    @property
    def hb_range_end(self):
        """Gets the hb_range_end of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The hb_range_end of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: str
        """
        return self._hb_range_end

    @hb_range_end.setter
    def hb_range_end(self, hb_range_end):
        """Sets the hb_range_end of this InlineResponse2002CloudNetworking.


        :param hb_range_end: The hb_range_end of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: str
        """

        self._hb_range_end = hb_range_end

    @property
    def hb_total_count(self):
        """Gets the hb_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The hb_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: int
        """
        return self._hb_total_count

    @hb_total_count.setter
    def hb_total_count(self, hb_total_count):
        """Sets the hb_total_count of this InlineResponse2002CloudNetworking.


        :param hb_total_count: The hb_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: int
        """

        self._hb_total_count = hb_total_count

    @property
    def fe_allocated_count(self):
        """Gets the fe_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The fe_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: int
        """
        return self._fe_allocated_count

    @fe_allocated_count.setter
    def fe_allocated_count(self, fe_allocated_count):
        """Sets the fe_allocated_count of this InlineResponse2002CloudNetworking.


        :param fe_allocated_count: The fe_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: int
        """

        self._fe_allocated_count = fe_allocated_count

    @property
    def be_allocated_count(self):
        """Gets the be_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The be_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: int
        """
        return self._be_allocated_count

    @be_allocated_count.setter
    def be_allocated_count(self, be_allocated_count):
        """Sets the be_allocated_count of this InlineResponse2002CloudNetworking.


        :param be_allocated_count: The be_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: int
        """

        self._be_allocated_count = be_allocated_count

    @property
    def hb_allocated_count(self):
        """Gets the hb_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The hb_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: int
        """
        return self._hb_allocated_count

    @hb_allocated_count.setter
    def hb_allocated_count(self, hb_allocated_count):
        """Sets the hb_allocated_count of this InlineResponse2002CloudNetworking.


        :param hb_allocated_count: The hb_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: int
        """

        self._hb_allocated_count = hb_allocated_count

    @property
    def public_ips_total_count(self):
        """Gets the public_ips_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The public_ips_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: int
        """
        return self._public_ips_total_count

    @public_ips_total_count.setter
    def public_ips_total_count(self, public_ips_total_count):
        """Sets the public_ips_total_count of this InlineResponse2002CloudNetworking.


        :param public_ips_total_count: The public_ips_total_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: int
        """

        self._public_ips_total_count = public_ips_total_count

    @property
    def public_ips_allocated_count(self):
        """Gets the public_ips_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501


        :return: The public_ips_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :rtype: int
        """
        return self._public_ips_allocated_count

    @public_ips_allocated_count.setter
    def public_ips_allocated_count(self, public_ips_allocated_count):
        """Sets the public_ips_allocated_count of this InlineResponse2002CloudNetworking.


        :param public_ips_allocated_count: The public_ips_allocated_count of this InlineResponse2002CloudNetworking.  # noqa: E501
        :type: int
        """

        self._public_ips_allocated_count = public_ips_allocated_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002CloudNetworking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002CloudNetworking):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2002CloudNetworking):
            return True

        return self.to_dict() != other.to_dict()
