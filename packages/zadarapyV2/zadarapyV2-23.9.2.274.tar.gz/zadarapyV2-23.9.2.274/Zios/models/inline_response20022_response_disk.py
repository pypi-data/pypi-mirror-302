# coding: utf-8

"""
    Zadara VPSA Object Storage REST API

    # Overview  This document outlines the methods available for administrating your VPSA&#174; Object Storage. The API supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or through the X-Access-Key header. Alternately, you can use the username and password parameters for authentication, but we do not recommend this method for anything other than possibly retrieving an API key.  By default , all operations are allowed only to VPSA Object Storage admin. Some actions are allowed by an account admin and they will be marked on the action's header  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some time to complete. When using the API, this can cause some actions, such as adding drives to storage policy, to be undesirably asynchronous. You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Metering API  Metering information can be retrieved using the VPSA Object Storage API for the following components:  - Accounts - Users - Drives - Virtual Controllers - Load Balancer Groups - Storage Policies  Metering information returned by the API is subject to the following constraints:  - 10 seconds interval - 1 hour range - 1 minute interval - 1 day range - 1 hour interval - 30 days range  Values outside the accepted range will be returned as 0.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Zios.configuration import Configuration


class InlineResponse20022ResponseDisk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'display_name': 'str',
        'disk_type': 'str',
        'disk_uuid': 'str',
        'storage_node': 'str',
        'vc': 'str',
        'region_id': 'int',
        'zone_id': 'int',
        'policy_type': 'int',
        'allocation_zone': 'str',
        'allocation_zone_display_name': 'str',
        'storage_policy': 'str',
        'capacity_protection': 'str',
        'status': 'str',
        'capacity': 'int',
        'partition_count_degraded': 'int',
        'partition_count_critical': 'int',
        'created_at': 'str',
        'modified_at': 'str',
        'percentage_added': 'int'
    }

    attribute_map = {
        'name': 'name',
        'display_name': 'display_name',
        'disk_type': 'disk_type',
        'disk_uuid': 'disk_uuid',
        'storage_node': 'storage_node',
        'vc': 'vc',
        'region_id': 'region_id',
        'zone_id': 'zone_id',
        'policy_type': 'policy_type',
        'allocation_zone': 'allocation-zone',
        'allocation_zone_display_name': 'allocation-zone_display_name',
        'storage_policy': 'storage_policy',
        'capacity_protection': 'capacity_protection',
        'status': 'status',
        'capacity': 'capacity',
        'partition_count_degraded': 'partition_count_degraded',
        'partition_count_critical': 'partition_count_critical',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'percentage_added': 'percentage_added'
    }

    def __init__(self, name=None, display_name=None, disk_type=None, disk_uuid=None, storage_node=None, vc=None, region_id=None, zone_id=None, policy_type=None, allocation_zone=None, allocation_zone_display_name=None, storage_policy=None, capacity_protection=None, status=None, capacity=None, partition_count_degraded=None, partition_count_critical=None, created_at=None, modified_at=None, percentage_added=None, _configuration=None):  # noqa: E501
        """InlineResponse20022ResponseDisk - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._display_name = None
        self._disk_type = None
        self._disk_uuid = None
        self._storage_node = None
        self._vc = None
        self._region_id = None
        self._zone_id = None
        self._policy_type = None
        self._allocation_zone = None
        self._allocation_zone_display_name = None
        self._storage_policy = None
        self._capacity_protection = None
        self._status = None
        self._capacity = None
        self._partition_count_degraded = None
        self._partition_count_critical = None
        self._created_at = None
        self._modified_at = None
        self._percentage_added = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if disk_type is not None:
            self.disk_type = disk_type
        if disk_uuid is not None:
            self.disk_uuid = disk_uuid
        if storage_node is not None:
            self.storage_node = storage_node
        if vc is not None:
            self.vc = vc
        if region_id is not None:
            self.region_id = region_id
        if zone_id is not None:
            self.zone_id = zone_id
        if policy_type is not None:
            self.policy_type = policy_type
        if allocation_zone is not None:
            self.allocation_zone = allocation_zone
        if allocation_zone_display_name is not None:
            self.allocation_zone_display_name = allocation_zone_display_name
        if storage_policy is not None:
            self.storage_policy = storage_policy
        if capacity_protection is not None:
            self.capacity_protection = capacity_protection
        if status is not None:
            self.status = status
        if capacity is not None:
            self.capacity = capacity
        if partition_count_degraded is not None:
            self.partition_count_degraded = partition_count_degraded
        if partition_count_critical is not None:
            self.partition_count_critical = partition_count_critical
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if percentage_added is not None:
            self.percentage_added = percentage_added

    @property
    def name(self):
        """Gets the name of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The name of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20022ResponseDisk.


        :param name: The name of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The display_name of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse20022ResponseDisk.


        :param display_name: The display_name of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def disk_type(self):
        """Gets the disk_type of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The disk_type of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this InlineResponse20022ResponseDisk.


        :param disk_type: The disk_type of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._disk_type = disk_type

    @property
    def disk_uuid(self):
        """Gets the disk_uuid of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The disk_uuid of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._disk_uuid

    @disk_uuid.setter
    def disk_uuid(self, disk_uuid):
        """Sets the disk_uuid of this InlineResponse20022ResponseDisk.


        :param disk_uuid: The disk_uuid of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._disk_uuid = disk_uuid

    @property
    def storage_node(self):
        """Gets the storage_node of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The storage_node of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._storage_node

    @storage_node.setter
    def storage_node(self, storage_node):
        """Sets the storage_node of this InlineResponse20022ResponseDisk.


        :param storage_node: The storage_node of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._storage_node = storage_node

    @property
    def vc(self):
        """Gets the vc of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The vc of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._vc

    @vc.setter
    def vc(self, vc):
        """Sets the vc of this InlineResponse20022ResponseDisk.


        :param vc: The vc of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._vc = vc

    @property
    def region_id(self):
        """Gets the region_id of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The region_id of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this InlineResponse20022ResponseDisk.


        :param region_id: The region_id of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: int
        """

        self._region_id = region_id

    @property
    def zone_id(self):
        """Gets the zone_id of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The zone_id of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: int
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this InlineResponse20022ResponseDisk.


        :param zone_id: The zone_id of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: int
        """

        self._zone_id = zone_id

    @property
    def policy_type(self):
        """Gets the policy_type of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The policy_type of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: int
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this InlineResponse20022ResponseDisk.


        :param policy_type: The policy_type of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: int
        """

        self._policy_type = policy_type

    @property
    def allocation_zone(self):
        """Gets the allocation_zone of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The allocation_zone of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._allocation_zone

    @allocation_zone.setter
    def allocation_zone(self, allocation_zone):
        """Sets the allocation_zone of this InlineResponse20022ResponseDisk.


        :param allocation_zone: The allocation_zone of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._allocation_zone = allocation_zone

    @property
    def allocation_zone_display_name(self):
        """Gets the allocation_zone_display_name of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The allocation_zone_display_name of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._allocation_zone_display_name

    @allocation_zone_display_name.setter
    def allocation_zone_display_name(self, allocation_zone_display_name):
        """Sets the allocation_zone_display_name of this InlineResponse20022ResponseDisk.


        :param allocation_zone_display_name: The allocation_zone_display_name of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._allocation_zone_display_name = allocation_zone_display_name

    @property
    def storage_policy(self):
        """Gets the storage_policy of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The storage_policy of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._storage_policy

    @storage_policy.setter
    def storage_policy(self, storage_policy):
        """Sets the storage_policy of this InlineResponse20022ResponseDisk.


        :param storage_policy: The storage_policy of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._storage_policy = storage_policy

    @property
    def capacity_protection(self):
        """Gets the capacity_protection of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The capacity_protection of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._capacity_protection

    @capacity_protection.setter
    def capacity_protection(self, capacity_protection):
        """Sets the capacity_protection of this InlineResponse20022ResponseDisk.


        :param capacity_protection: The capacity_protection of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._capacity_protection = capacity_protection

    @property
    def status(self):
        """Gets the status of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The status of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20022ResponseDisk.


        :param status: The status of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def capacity(self):
        """Gets the capacity of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The capacity of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this InlineResponse20022ResponseDisk.


        :param capacity: The capacity of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def partition_count_degraded(self):
        """Gets the partition_count_degraded of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The partition_count_degraded of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: int
        """
        return self._partition_count_degraded

    @partition_count_degraded.setter
    def partition_count_degraded(self, partition_count_degraded):
        """Sets the partition_count_degraded of this InlineResponse20022ResponseDisk.


        :param partition_count_degraded: The partition_count_degraded of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: int
        """

        self._partition_count_degraded = partition_count_degraded

    @property
    def partition_count_critical(self):
        """Gets the partition_count_critical of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The partition_count_critical of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: int
        """
        return self._partition_count_critical

    @partition_count_critical.setter
    def partition_count_critical(self, partition_count_critical):
        """Sets the partition_count_critical of this InlineResponse20022ResponseDisk.


        :param partition_count_critical: The partition_count_critical of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: int
        """

        self._partition_count_critical = partition_count_critical

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The created_at of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20022ResponseDisk.


        :param created_at: The created_at of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The modified_at of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this InlineResponse20022ResponseDisk.


        :param modified_at: The modified_at of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: str
        """

        self._modified_at = modified_at

    @property
    def percentage_added(self):
        """Gets the percentage_added of this InlineResponse20022ResponseDisk.  # noqa: E501


        :return: The percentage_added of this InlineResponse20022ResponseDisk.  # noqa: E501
        :rtype: int
        """
        return self._percentage_added

    @percentage_added.setter
    def percentage_added(self, percentage_added):
        """Sets the percentage_added of this InlineResponse20022ResponseDisk.


        :param percentage_added: The percentage_added of this InlineResponse20022ResponseDisk.  # noqa: E501
        :type: int
        """

        self._percentage_added = percentage_added

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20022ResponseDisk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20022ResponseDisk):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20022ResponseDisk):
            return True

        return self.to_dict() != other.to_dict()
