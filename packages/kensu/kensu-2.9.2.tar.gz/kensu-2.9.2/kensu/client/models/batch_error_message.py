# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: beta
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat

from six import iteritems


class BatchErrorMessage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_message': 'str',
        'entity_type': 'str',
        'entity_json': 'str'
    }

    attribute_map = {
        'error_message': 'errorMessage',
        'entity_type': 'entityType',
        'entity_json': 'entityJson'
    }

    def __init__(self, error_message=None, entity_type=None, entity_json=None):
        """
        BatchErrorMessage - a model defined in Swagger
        """

        self._error_message = None
        self._entity_type = None
        self._entity_json = None

        self.error_message = error_message
        self.entity_type = entity_type
        self.entity_json = entity_json

    @property
    def error_message(self):
        """
        Gets the error_message of this BatchErrorMessage.

        :return: The error_message of this BatchErrorMessage.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this BatchErrorMessage.

        :param error_message: The error_message of this BatchErrorMessage.
        :type: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message

    @property
    def entity_type(self):
        """
        Gets the entity_type of this BatchErrorMessage.

        :return: The entity_type of this BatchErrorMessage.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this BatchErrorMessage.

        :param entity_type: The entity_type of this BatchErrorMessage.
        :type: str
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")

        self._entity_type = entity_type

    @property
    def entity_json(self):
        """
        Gets the entity_json of this BatchErrorMessage.

        :return: The entity_json of this BatchErrorMessage.
        :rtype: str
        """
        return self._entity_json

    @entity_json.setter
    def entity_json(self, entity_json):
        """
        Sets the entity_json of this BatchErrorMessage.

        :param entity_json: The entity_json of this BatchErrorMessage.
        :type: str
        """
        if entity_json is None:
            raise ValueError("Invalid value for `entity_json`, must not be `None`")

        self._entity_json = entity_json

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BatchErrorMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
