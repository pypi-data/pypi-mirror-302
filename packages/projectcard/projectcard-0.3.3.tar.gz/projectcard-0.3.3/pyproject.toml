[build-system]
requires = [
    "setuptools>=60",
    "setuptools-scm>=8.0",
    "wheel"
]

[project]
name = "projectcard"
dynamic = ["version"]
description = "Project Cards represent information about a tranportation infrastructure projects sufficient for usage in a regional travel demand model. This package supports validation and usage of this schema."
license =  {file = "LICENSE"}
readme = "README.md"
authors = [
    { name = "Elizabeth Sall", email = "elizabeth@urbanlabs.io" },
]

classifiers = [
    "Development Status :: 1 - Planning",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
]
requires-python = ">=3.9"
dependencies = [
    "jsonref",
    "jsonschema",
    "pydantic>=2.0",
    "pyyaml",
    "tabulate",
    "ruff",
    "toml",
]

[tool.setuptools]
packages = ["projectcard"]
script-files = ["projectcard/bin/validate_card", "projectcard/bin/update_projectcard_schema"]
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "projectcard.__version__"}

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"

[tool.radon]
exclude = ["tests/", "docs/"]  # Use a list for multiple paths
cc_min = "B"  # Keep the minimum cyclomatic complexity threshold

[tool.coverage.run]
relative_files = true
source = ["project_card"]

[tool.mypy]
files = "project_card"
python_version = "3.9"
follow_imports = "skip"
show_error_codes = true
show_error_context = true
ignore_missing_imports = true
disable_error_code = ["attr-defined", "import-untyped"]
warn_unused_ignores = true

[tool.ruff]

line-length = 99

[tool.ruff.lint]
select = ["D"]
ignore = [
    "RET504",  # Unnecessary assignment  before `return` statement
    "UP007", # non pep-604 annotations.
    "C416", # non pep-604 annotations.
    "UP007", # non pep-604 annotations.
    "PLR0913", # too many args
    "G004" # logging format
]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PTH",         # flake8-use-pathlib
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "PYI",         # flake8-pyi
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D103",
    "D106",
    "D101",
    "D104",
    "D100",
    "PLR2004" # magic # comparisons
]

"**/__init__.py" = ["F401", "F403"]
