# coding: utf-8

"""
    Zadara Provisioning Portal API

     # Overview  This document outlines the methods available for creation and high-level administration of Zadara Storage VPSAs via a Zadara Storage Provisioning Portal. This API supports form-encoded requests, and can return either JSON or XML responses.  ## Endpoint  The base URL for the requests is the Provisioning Portal URL you created your VPSA through - for example: https://manage.zadarastorage.com/, and all APIs will be prefixed with /api as noted in the documentation below.  ## Authentication  To use this API, an authentication token is required. The API for retrieving this token can be found below in the Authentication section. You may pass this token in requests either via the the X-Token header or via basic authentication (base64 encoded) in Authorization header.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ProvisioningPortal.configuration import Configuration


class InlineResponse2008DataIoenginesProvider9(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'type': 'str',
        'name': 'str',
        'cloud_name': 'str',
        'type_id': 'int',
        'data': 'InlineResponse2008DataIoenginesProvider9Data'
    }

    attribute_map = {
        'currency': 'currency',
        'type': 'type',
        'name': 'name',
        'cloud_name': 'cloud-name',
        'type_id': 'type-id',
        'data': 'data'
    }

    def __init__(self, currency=None, type=None, name=None, cloud_name=None, type_id=None, data=None, _configuration=None):  # noqa: E501
        """InlineResponse2008DataIoenginesProvider9 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currency = None
        self._type = None
        self._name = None
        self._cloud_name = None
        self._type_id = None
        self._data = None
        self.discriminator = None

        if currency is not None:
            self.currency = currency
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if cloud_name is not None:
            self.cloud_name = cloud_name
        if type_id is not None:
            self.type_id = type_id
        if data is not None:
            self.data = data

    @property
    def currency(self):
        """Gets the currency of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501


        :return: The currency of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InlineResponse2008DataIoenginesProvider9.


        :param currency: The currency of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def type(self):
        """Gets the type of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501


        :return: The type of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2008DataIoenginesProvider9.


        :param type: The type of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501


        :return: The name of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2008DataIoenginesProvider9.


        :param name: The name of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cloud_name(self):
        """Gets the cloud_name of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501


        :return: The cloud_name of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :rtype: str
        """
        return self._cloud_name

    @cloud_name.setter
    def cloud_name(self, cloud_name):
        """Sets the cloud_name of this InlineResponse2008DataIoenginesProvider9.


        :param cloud_name: The cloud_name of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :type: str
        """

        self._cloud_name = cloud_name

    @property
    def type_id(self):
        """Gets the type_id of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501


        :return: The type_id of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this InlineResponse2008DataIoenginesProvider9.


        :param type_id: The type_id of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def data(self):
        """Gets the data of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501


        :return: The data of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :rtype: InlineResponse2008DataIoenginesProvider9Data
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this InlineResponse2008DataIoenginesProvider9.


        :param data: The data of this InlineResponse2008DataIoenginesProvider9.  # noqa: E501
        :type: InlineResponse2008DataIoenginesProvider9Data
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008DataIoenginesProvider9, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008DataIoenginesProvider9):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2008DataIoenginesProvider9):
            return True

        return self.to_dict() != other.to_dict()
