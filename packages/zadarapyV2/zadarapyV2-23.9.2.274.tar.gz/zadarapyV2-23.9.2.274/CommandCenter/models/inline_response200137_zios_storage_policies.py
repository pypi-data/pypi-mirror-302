# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse200137ZiosStoragePolicies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'internal_name': 'str',
        'name': 'str',
        'status': 'str',
        'protection': 'str',
        'default': 'bool',
        'health_status': 'str',
        'health_percentage': 'int',
        'ring_balance': 'InlineResponse200137RingBalance',
        'used_capacity': 'int',
        'free_capacity': 'int'
    }

    attribute_map = {
        'id': 'id',
        'internal_name': 'internal_name',
        'name': 'name',
        'status': 'status',
        'protection': 'protection',
        'default': 'default',
        'health_status': 'health_status',
        'health_percentage': 'health_percentage',
        'ring_balance': 'ring_balance',
        'used_capacity': 'used_capacity',
        'free_capacity': 'free_capacity'
    }

    def __init__(self, id=None, internal_name=None, name=None, status=None, protection=None, default=None, health_status=None, health_percentage=None, ring_balance=None, used_capacity=None, free_capacity=None, _configuration=None):  # noqa: E501
        """InlineResponse200137ZiosStoragePolicies - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._internal_name = None
        self._name = None
        self._status = None
        self._protection = None
        self._default = None
        self._health_status = None
        self._health_percentage = None
        self._ring_balance = None
        self._used_capacity = None
        self._free_capacity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if internal_name is not None:
            self.internal_name = internal_name
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if protection is not None:
            self.protection = protection
        if default is not None:
            self.default = default
        if health_status is not None:
            self.health_status = health_status
        if health_percentage is not None:
            self.health_percentage = health_percentage
        if ring_balance is not None:
            self.ring_balance = ring_balance
        if used_capacity is not None:
            self.used_capacity = used_capacity
        if free_capacity is not None:
            self.free_capacity = free_capacity

    @property
    def id(self):
        """Gets the id of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The id of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200137ZiosStoragePolicies.


        :param id: The id of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def internal_name(self):
        """Gets the internal_name of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The internal_name of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: str
        """
        return self._internal_name

    @internal_name.setter
    def internal_name(self, internal_name):
        """Sets the internal_name of this InlineResponse200137ZiosStoragePolicies.


        :param internal_name: The internal_name of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: str
        """

        self._internal_name = internal_name

    @property
    def name(self):
        """Gets the name of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The name of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200137ZiosStoragePolicies.


        :param name: The name of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The status of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200137ZiosStoragePolicies.


        :param status: The status of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def protection(self):
        """Gets the protection of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The protection of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this InlineResponse200137ZiosStoragePolicies.


        :param protection: The protection of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def default(self):
        """Gets the default of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The default of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this InlineResponse200137ZiosStoragePolicies.


        :param default: The default of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def health_status(self):
        """Gets the health_status of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The health_status of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this InlineResponse200137ZiosStoragePolicies.


        :param health_status: The health_status of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: str
        """

        self._health_status = health_status

    @property
    def health_percentage(self):
        """Gets the health_percentage of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The health_percentage of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: int
        """
        return self._health_percentage

    @health_percentage.setter
    def health_percentage(self, health_percentage):
        """Sets the health_percentage of this InlineResponse200137ZiosStoragePolicies.


        :param health_percentage: The health_percentage of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: int
        """

        self._health_percentage = health_percentage

    @property
    def ring_balance(self):
        """Gets the ring_balance of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The ring_balance of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: InlineResponse200137RingBalance
        """
        return self._ring_balance

    @ring_balance.setter
    def ring_balance(self, ring_balance):
        """Sets the ring_balance of this InlineResponse200137ZiosStoragePolicies.


        :param ring_balance: The ring_balance of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: InlineResponse200137RingBalance
        """

        self._ring_balance = ring_balance

    @property
    def used_capacity(self):
        """Gets the used_capacity of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The used_capacity of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: int
        """
        return self._used_capacity

    @used_capacity.setter
    def used_capacity(self, used_capacity):
        """Sets the used_capacity of this InlineResponse200137ZiosStoragePolicies.


        :param used_capacity: The used_capacity of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: int
        """

        self._used_capacity = used_capacity

    @property
    def free_capacity(self):
        """Gets the free_capacity of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501


        :return: The free_capacity of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :rtype: int
        """
        return self._free_capacity

    @free_capacity.setter
    def free_capacity(self, free_capacity):
        """Sets the free_capacity of this InlineResponse200137ZiosStoragePolicies.


        :param free_capacity: The free_capacity of this InlineResponse200137ZiosStoragePolicies.  # noqa: E501
        :type: int
        """

        self._free_capacity = free_capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200137ZiosStoragePolicies, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200137ZiosStoragePolicies):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200137ZiosStoragePolicies):
            return True

        return self.to_dict() != other.to_dict()
