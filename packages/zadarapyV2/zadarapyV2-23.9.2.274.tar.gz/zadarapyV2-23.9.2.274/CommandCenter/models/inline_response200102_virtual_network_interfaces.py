# coding: utf-8

"""
    Command Center operations

    Command Center operations  # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from CommandCenter.configuration import Configuration


class InlineResponse200102VirtualNetworkInterfaces(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_network_id': 'int',
        'vpsa_id': 'int',
        'id': 'int',
        'vni_id': 'int',
        'ip': 'str',
        'domain_rec_name': 'str',
        'fixed_address_0': 'str',
        'fixed_address_1': 'str',
        'cidr': 'str',
        'name': 'str',
        'vlan_id': 'int'
    }

    attribute_map = {
        'custom_network_id': 'custom_network_id',
        'vpsa_id': 'vpsa_id',
        'id': 'id',
        'vni_id': 'vni_id',
        'ip': 'ip',
        'domain_rec_name': 'domain_rec_name',
        'fixed_address_0': 'fixed_address_0',
        'fixed_address_1': 'fixed_address_1',
        'cidr': 'cidr',
        'name': 'name',
        'vlan_id': 'vlan_id'
    }

    def __init__(self, custom_network_id=None, vpsa_id=None, id=None, vni_id=None, ip=None, domain_rec_name=None, fixed_address_0=None, fixed_address_1=None, cidr=None, name=None, vlan_id=None, _configuration=None):  # noqa: E501
        """InlineResponse200102VirtualNetworkInterfaces - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_network_id = None
        self._vpsa_id = None
        self._id = None
        self._vni_id = None
        self._ip = None
        self._domain_rec_name = None
        self._fixed_address_0 = None
        self._fixed_address_1 = None
        self._cidr = None
        self._name = None
        self._vlan_id = None
        self.discriminator = None

        if custom_network_id is not None:
            self.custom_network_id = custom_network_id
        if vpsa_id is not None:
            self.vpsa_id = vpsa_id
        if id is not None:
            self.id = id
        if vni_id is not None:
            self.vni_id = vni_id
        if ip is not None:
            self.ip = ip
        if domain_rec_name is not None:
            self.domain_rec_name = domain_rec_name
        if fixed_address_0 is not None:
            self.fixed_address_0 = fixed_address_0
        if fixed_address_1 is not None:
            self.fixed_address_1 = fixed_address_1
        if cidr is not None:
            self.cidr = cidr
        if name is not None:
            self.name = name
        if vlan_id is not None:
            self.vlan_id = vlan_id

    @property
    def custom_network_id(self):
        """Gets the custom_network_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The custom_network_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._custom_network_id

    @custom_network_id.setter
    def custom_network_id(self, custom_network_id):
        """Sets the custom_network_id of this InlineResponse200102VirtualNetworkInterfaces.


        :param custom_network_id: The custom_network_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._custom_network_id = custom_network_id

    @property
    def vpsa_id(self):
        """Gets the vpsa_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The vpsa_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._vpsa_id

    @vpsa_id.setter
    def vpsa_id(self, vpsa_id):
        """Sets the vpsa_id of this InlineResponse200102VirtualNetworkInterfaces.


        :param vpsa_id: The vpsa_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._vpsa_id = vpsa_id

    @property
    def id(self):
        """Gets the id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200102VirtualNetworkInterfaces.


        :param id: The id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def vni_id(self):
        """Gets the vni_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The vni_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._vni_id

    @vni_id.setter
    def vni_id(self, vni_id):
        """Sets the vni_id of this InlineResponse200102VirtualNetworkInterfaces.


        :param vni_id: The vni_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._vni_id = vni_id

    @property
    def ip(self):
        """Gets the ip of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The ip of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this InlineResponse200102VirtualNetworkInterfaces.


        :param ip: The ip of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def domain_rec_name(self):
        """Gets the domain_rec_name of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The domain_rec_name of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._domain_rec_name

    @domain_rec_name.setter
    def domain_rec_name(self, domain_rec_name):
        """Sets the domain_rec_name of this InlineResponse200102VirtualNetworkInterfaces.


        :param domain_rec_name: The domain_rec_name of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._domain_rec_name = domain_rec_name

    @property
    def fixed_address_0(self):
        """Gets the fixed_address_0 of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The fixed_address_0 of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._fixed_address_0

    @fixed_address_0.setter
    def fixed_address_0(self, fixed_address_0):
        """Sets the fixed_address_0 of this InlineResponse200102VirtualNetworkInterfaces.


        :param fixed_address_0: The fixed_address_0 of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._fixed_address_0 = fixed_address_0

    @property
    def fixed_address_1(self):
        """Gets the fixed_address_1 of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The fixed_address_1 of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._fixed_address_1

    @fixed_address_1.setter
    def fixed_address_1(self, fixed_address_1):
        """Sets the fixed_address_1 of this InlineResponse200102VirtualNetworkInterfaces.


        :param fixed_address_1: The fixed_address_1 of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._fixed_address_1 = fixed_address_1

    @property
    def cidr(self):
        """Gets the cidr of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The cidr of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this InlineResponse200102VirtualNetworkInterfaces.


        :param cidr: The cidr of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._cidr = cidr

    @property
    def name(self):
        """Gets the name of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The name of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse200102VirtualNetworkInterfaces.


        :param name: The name of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def vlan_id(self):
        """Gets the vlan_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501


        :return: The vlan_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this InlineResponse200102VirtualNetworkInterfaces.


        :param vlan_id: The vlan_id of this InlineResponse200102VirtualNetworkInterfaces.  # noqa: E501
        :type: int
        """

        self._vlan_id = vlan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200102VirtualNetworkInterfaces, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200102VirtualNetworkInterfaces):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200102VirtualNetworkInterfaces):
            return True

        return self.to_dict() != other.to_dict()
