# coding: utf-8

"""
    Zadara VPSA Object Storage REST API

    # Overview  This document outlines the methods available for administrating your VPSA&#174; Object Storage. The API supports form-encoded, JSON, and XML requests, and can return either JSON or XML responses.  ## Usage  The majority of the APIs available require authentication which requires an API token to use. You can retrieve this token through the Users section of your VPSA, or through the API using the \"Return a user's access key\" API in the Users Section below.  ## Authentication Methods  The authentication token can be passed either through the access_key parameter inside of the body of the REST API request, or through the X-Access-Key header. Alternately, you can use the username and password parameters for authentication, but we do not recommend this method for anything other than possibly retrieving an API key.  By default , all operations are allowed only to VPSA Object Storage admin. Some actions are allowed by an account admin and they will be marked on the action's header  ## Timeouts  By default, all operations that don't complete within five seconds will return a message informing you that the action may take some time to complete. When using the API, this can cause some actions, such as adding drives to storage policy, to be undesirably asynchronous. You can specify your own timeout with the timeout parameter, in seconds, and a timeout value of -1 specifies an infinite timeout.  ## Metering API  Metering information can be retrieved using the VPSA Object Storage API for the following components:  - Accounts - Users - Drives - Virtual Controllers - Load Balancer Groups - Storage Policies  Metering information returned by the API is subject to the following constraints:  - 10 seconds interval - 1 hour range - 1 minute interval - 1 day range - 1 hour interval - 30 days range  Values outside the accepted range will be returned as 0.  ## Questions  If you have any questions or need support involving the REST API, please contact for assistance.   # noqa: E501

    OpenAPI spec version: 23.09-sp2
    Contact: support@zadarastorage.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Zios.configuration import Configuration


class InlineResponse20052ResponseUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'username': 'str',
        'email': 'str',
        'access_key': 'str',
        'primary': 'bool',
        'admin': 'bool',
        'locked': 'bool',
        'roles': 'list[InlineResponse20049ResponseRoles]',
        'display_timezone': 'str',
        'notify_on_events': 'bool',
        'permissions': 'list[str]',
        'zios_data': 'InlineResponse20052ResponseUserZiosData'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'email': 'email',
        'access_key': 'access_key',
        'primary': 'primary',
        'admin': 'admin',
        'locked': 'locked',
        'roles': 'roles',
        'display_timezone': 'display_timezone',
        'notify_on_events': 'notify_on_events',
        'permissions': 'permissions',
        'zios_data': 'zios_data'
    }

    def __init__(self, id=None, username=None, email=None, access_key=None, primary=None, admin=None, locked=None, roles=None, display_timezone=None, notify_on_events=None, permissions=None, zios_data=None, _configuration=None):  # noqa: E501
        """InlineResponse20052ResponseUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._username = None
        self._email = None
        self._access_key = None
        self._primary = None
        self._admin = None
        self._locked = None
        self._roles = None
        self._display_timezone = None
        self._notify_on_events = None
        self._permissions = None
        self._zios_data = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email
        if access_key is not None:
            self.access_key = access_key
        if primary is not None:
            self.primary = primary
        if admin is not None:
            self.admin = admin
        if locked is not None:
            self.locked = locked
        if roles is not None:
            self.roles = roles
        if display_timezone is not None:
            self.display_timezone = display_timezone
        if notify_on_events is not None:
            self.notify_on_events = notify_on_events
        if permissions is not None:
            self.permissions = permissions
        if zios_data is not None:
            self.zios_data = zios_data

    @property
    def id(self):
        """Gets the id of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The id of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20052ResponseUser.


        :param id: The id of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The username of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InlineResponse20052ResponseUser.


        :param username: The username of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The email of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20052ResponseUser.


        :param email: The email of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def access_key(self):
        """Gets the access_key of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The access_key of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this InlineResponse20052ResponseUser.


        :param access_key: The access_key of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def primary(self):
        """Gets the primary of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The primary of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this InlineResponse20052ResponseUser.


        :param primary: The primary of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: bool
        """

        self._primary = primary

    @property
    def admin(self):
        """Gets the admin of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The admin of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this InlineResponse20052ResponseUser.


        :param admin: The admin of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: bool
        """

        self._admin = admin

    @property
    def locked(self):
        """Gets the locked of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The locked of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this InlineResponse20052ResponseUser.


        :param locked: The locked of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def roles(self):
        """Gets the roles of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The roles of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: list[InlineResponse20049ResponseRoles]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this InlineResponse20052ResponseUser.


        :param roles: The roles of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: list[InlineResponse20049ResponseRoles]
        """

        self._roles = roles

    @property
    def display_timezone(self):
        """Gets the display_timezone of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The display_timezone of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: str
        """
        return self._display_timezone

    @display_timezone.setter
    def display_timezone(self, display_timezone):
        """Sets the display_timezone of this InlineResponse20052ResponseUser.


        :param display_timezone: The display_timezone of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: str
        """

        self._display_timezone = display_timezone

    @property
    def notify_on_events(self):
        """Gets the notify_on_events of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The notify_on_events of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: bool
        """
        return self._notify_on_events

    @notify_on_events.setter
    def notify_on_events(self, notify_on_events):
        """Sets the notify_on_events of this InlineResponse20052ResponseUser.


        :param notify_on_events: The notify_on_events of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: bool
        """

        self._notify_on_events = notify_on_events

    @property
    def permissions(self):
        """Gets the permissions of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The permissions of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this InlineResponse20052ResponseUser.


        :param permissions: The permissions of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    @property
    def zios_data(self):
        """Gets the zios_data of this InlineResponse20052ResponseUser.  # noqa: E501


        :return: The zios_data of this InlineResponse20052ResponseUser.  # noqa: E501
        :rtype: InlineResponse20052ResponseUserZiosData
        """
        return self._zios_data

    @zios_data.setter
    def zios_data(self, zios_data):
        """Sets the zios_data of this InlineResponse20052ResponseUser.


        :param zios_data: The zios_data of this InlineResponse20052ResponseUser.  # noqa: E501
        :type: InlineResponse20052ResponseUserZiosData
        """

        self._zios_data = zios_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20052ResponseUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20052ResponseUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20052ResponseUser):
            return True

        return self.to_dict() != other.to_dict()
