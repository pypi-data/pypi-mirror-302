"""A web3.py Contract class for the IChainlinkAggregatorV3 contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.43.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import dataclass_to_tuple, rename_returned_types
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunction,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}


class IChainlinkAggregatorV3AggregatorContractFunction(ContractFunction):
    """ContractFunction for the aggregator method."""

    def __call__(self) -> IChainlinkAggregatorV3AggregatorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IChainlinkAggregatorV3DecimalsContractFunction(ContractFunction):
    """ContractFunction for the decimals method."""

    def __call__(self) -> IChainlinkAggregatorV3DecimalsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IChainlinkAggregatorV3DescriptionContractFunction(ContractFunction):
    """ContractFunction for the description method."""

    def __call__(self) -> IChainlinkAggregatorV3DescriptionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IChainlinkAggregatorV3GetRoundDataContractFunction(ContractFunction):
    """ContractFunction for the getRoundData method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for GetRoundData."""

        roundId: int
        answer: int
        startedAt: int
        updatedAt: int
        answeredInRound: int

    def __call__(self, roundId: int) -> IChainlinkAggregatorV3GetRoundDataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(roundId))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int, int, int, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IChainlinkAggregatorV3LatestRoundDataContractFunction(ContractFunction):
    """ContractFunction for the latestRoundData method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for LatestRoundData."""

        roundId: int
        answer: int
        startedAt: int
        updatedAt: int
        answeredInRound: int

    def __call__(self) -> IChainlinkAggregatorV3LatestRoundDataContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int, int, int, int]

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class IChainlinkAggregatorV3VersionContractFunction(ContractFunction):
    """ContractFunction for the version method."""

    def __call__(self) -> IChainlinkAggregatorV3VersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )
        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IChainlinkAggregatorV3ContractFunctions(ContractFunctions):
    """ContractFunctions for the IChainlinkAggregatorV3 contract."""

    aggregator: IChainlinkAggregatorV3AggregatorContractFunction

    decimals: IChainlinkAggregatorV3DecimalsContractFunction

    description: IChainlinkAggregatorV3DescriptionContractFunction

    getRoundData: IChainlinkAggregatorV3GetRoundDataContractFunction

    latestRoundData: IChainlinkAggregatorV3LatestRoundDataContractFunction

    version: IChainlinkAggregatorV3VersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.aggregator = (
            IChainlinkAggregatorV3AggregatorContractFunction.factory(
                "aggregator",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="aggregator",
            )
        )
        self.decimals = IChainlinkAggregatorV3DecimalsContractFunction.factory(
            "decimals",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="decimals",
        )
        self.description = (
            IChainlinkAggregatorV3DescriptionContractFunction.factory(
                "description",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="description",
            )
        )
        self.getRoundData = (
            IChainlinkAggregatorV3GetRoundDataContractFunction.factory(
                "getRoundData",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getRoundData",
            )
        )
        self.latestRoundData = (
            IChainlinkAggregatorV3LatestRoundDataContractFunction.factory(
                "latestRoundData",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="latestRoundData",
            )
        )
        self.version = IChainlinkAggregatorV3VersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="version",
        )


ichainlinkaggregatorv3_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "aggregator",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "decimals",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "description",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getRoundData",
            "inputs": [
                {"name": "_roundId", "type": "uint80", "internalType": "uint80"}
            ],
            "outputs": [
                {"name": "roundId", "type": "uint80", "internalType": "uint80"},
                {"name": "answer", "type": "int256", "internalType": "int256"},
                {
                    "name": "startedAt",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "updatedAt",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "answeredInRound",
                    "type": "uint80",
                    "internalType": "uint80",
                },
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "latestRoundData",
            "inputs": [],
            "outputs": [
                {"name": "roundId", "type": "uint80", "internalType": "uint80"},
                {"name": "answer", "type": "int256", "internalType": "int256"},
                {
                    "name": "startedAt",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "updatedAt",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "answeredInRound",
                    "type": "uint80",
                    "internalType": "uint80",
                },
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
    ],
)


class IChainlinkAggregatorV3Contract(Contract):
    """A web3.py Contract class for the IChainlinkAggregatorV3 contract."""

    abi: ABI = ichainlinkaggregatorv3_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IChainlinkAggregatorV3ContractFunctions(ichainlinkaggregatorv3_abi, self.w3, address)  # type: ignore

    functions: IChainlinkAggregatorV3ContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IChainlinkAggregatorV3ContractFunctions(
            ichainlinkaggregatorv3_abi, w3, None
        )

        return contract
